name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Download Git submodules
      run: git submodule update --init --recursive
    - uses: coq-community/docker-coq-action@v1
      with:
        custom_image: coqorg/coq:8.20-ocaml-4.14-flambda
        custom_script: |
          startGroup "Install dependencies"
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source "$HOME/.cargo/env"
            rustup toolchain install nightly-2024-12-07-x86_64-unknown-linux-gnu
            cargo --version
            sudo ln -s `which python3` /usr/bin/python
            opam install -y --deps-only CoqOfRust/coq-of-rust.opam
          endGroup
          startGroup "Build"
            sudo chown -R $(whoami) .
            rustup component add rust-src rustc-dev llvm-tools-preview
            cargo build --verbose
          endGroup
          startGroup "Install"
            cargo install --path lib/
          endGroup
          startGroup "Format check"
            cargo fmt --check
          endGroup
          startGroup "Lint"
            cargo clippy --all-targets --all-features -- -D warnings
          endGroup
          startGroup "Translate Rust examples"
            python run_tests.py
          endGroup
          startGroup "Pre-process the smart contracts"
            cd contracts
            python source_to_generated.py
            cd generated
            for dir in * ; do cd $dir ; cargo check ; cd .. ; done
            cd ../..
          endGroup
          # We disable for now this translation as this makes a panic!
          # startGroup "Translate Ink! library"
          #   cd CoqOfRust
          #   ./generate_ink_example.sh
          #   cd ..
          # endGroup
          # Generate markdown with progress on links for instructions
          startGroup "Generate markdown with progress on links for instructions"
            cd CoqOfRust/revm/revm_interpreter/instructions/links
            python count_admitted.py > progress_on_links.md
            cd ../../../../..
          endGroup
          startGroup "Save space"
            cargo clean
          endGroup
          startGroup "Translate the alloc library"
            cd third-party/rust/library/alloc
            cp ../../../../rust-toolchain ./
            time cargo build
            touch src/lib.rs
            time cargo coq-of-rust
            rsync -rcv src/ ../../../../CoqOfRust/alloc/ --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            cd ../../../..
          endGroup
          startGroup "Translate the core library"
            cd third-party/rust/library/core
            cp ../../../../rust-toolchain ./
            time cargo build
            touch src/lib.rs
            export RUST_MIN_STACK=800000000
            time cargo coq-of-rust
            rsync -rcv src/ ../../../../CoqOfRust/core/ --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            cd ../../../..
          endGroup
          startGroup "Save space"
            cd third-party/rust/library/alloc
            cargo clean
            cd ../../../..
            cd third-party/rust/library/core
            cargo clean
            cd ../../../..
          endGroup
          startGroup "Translate Revm"
            cd third-party/revm
            cp ../../rust-toolchain ./
            cd crates
            # We compile each library twice to avoid errors. TODO: investigate why this is needed
            # bytecode
            cd bytecode
            cargo coq-of-rust
            touch src/lib.rs
            cargo coq-of-rust --with-json
            rsync -rcv src/ ../../../../CoqOfRust/revm/revm_bytecode/ --include='*/' --include='*.v' --include='*.rs' --include='*.json' --exclude='*'
            cd ..
            # context/interface
            cd context/interface
            cargo coq-of-rust
            touch src/lib.rs
            cargo coq-of-rust --with-json
            rsync -rcv src/ ../../../../../CoqOfRust/revm/revm_context_interface/ --include='*/' --include='*.v' --include='*.rs' --include='*.json' --exclude='*'
            cd ../..
            # interpreter
            cd interpreter
            cargo coq-of-rust
            touch src/lib.rs
            cargo coq-of-rust --with-json
            rsync -rcv src/ ../../../../CoqOfRust/revm/revm_interpreter/ --include='*/' --include='*.v' --include='*.rs' --include='*.json' --exclude='*'
            cd ..
            # precompile
            cd precompile
            cargo coq-of-rust
            touch src/lib.rs
            cargo coq-of-rust --with-json
            rsync -rcv src/ ../../../../CoqOfRust/revm/revm_precompile/ --include='*/' --include='*.v' --include='*.rs' --include='*.json' --exclude='*'
            cd ..
            # primitives
            cd primitives
            cargo coq-of-rust
            touch src/lib.rs
            cargo coq-of-rust --with-json
            rsync -rcv src/ ../../../../CoqOfRust/revm/revm_primitives/ --include='*/' --include='*.v' --include='*.rs' --include='*.json' --exclude='*'
            cd ..
            # specification
            cd specification
            cargo coq-of-rust
            touch src/lib.rs
            cargo coq-of-rust --with-json
            rsync -rcv src/ ../../../../CoqOfRust/revm/revm_specification/ --include='*/' --include='*.v' --include='*.rs' --include='*.json' --exclude='*'
            cd ..
            cd ../../..
          endGroup
          startGroup "Translate ruint"
            cd third-party/uint
            cp ../../rust-toolchain ./
            cargo coq-of-rust
            touch src/lib.rs
            cargo coq-of-rust
            rsync -rcv src/ ../../CoqOfRust/ruint/ --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            cd ../..
          endGroup
          startGroup "Translate alloy-core"
            cd third-party/alloy-rs-core/crates/primitives
            cp ../../../../rust-toolchain ./
            cargo coq-of-rust
            touch src/lib.rs
            cargo coq-of-rust
            rsync -rcv src/ ../../../../CoqOfRust/alloy_primitives/ --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            cd ../../../..
          endGroup
          startGroup "Translate bytes"
            cd third-party/bytes
            cp ../../rust-toolchain ./
            grep -q workspace Cargo.toml || echo '[workspace]' >> Cargo.toml
            cargo coq-of-rust
            touch src/lib.rs
            cargo coq-of-rust
            rsync -rcv src/ ../../CoqOfRust/bytes/ --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            cd ../..
          endGroup
          startGroup "Translate Move Sui"
            cd third-party/move-sui
            cp ../../rust-toolchain ./
            cd crates
            # move-abstract-stack
            cd move-abstract-stack
            cargo coq-of-rust
            touch src/lib.rs
            cargo coq-of-rust
            rsync -rcv src/ ../../../../CoqOfRust/move_sui/translations/move_abstract_stack/ --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            cd ..
            # move-binary-format
            cd move-binary-format
            cargo coq-of-rust
            touch src/lib.rs
            cargo coq-of-rust
            rsync -rcv src/ ../../../../CoqOfRust/move_sui/translations/move_binary_format/ --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            cd ..
            # move-bytecode-verifier
            cd move-bytecode-verifier
            cargo coq-of-rust
            touch src/lib.rs
            cargo coq-of-rust
            rsync -rcv src/ ../../../../CoqOfRust/move_sui/translations/move_bytecode_verifier/ --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            cd ..
            # move-bytecode-verifier-meter
            cd move-bytecode-verifier-meter
            cargo coq-of-rust
            touch src/lib.rs
            cargo coq-of-rust
            rsync -rcv src/ ../../../../CoqOfRust/move_sui/translations/move_bytecode_verifier_meter/ --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            cd ..
            # move-core-types
            cd move-core-types
            cargo coq-of-rust
            touch src/lib.rs
            cargo coq-of-rust
            rsync -rcv src/ ../../../../CoqOfRust/move_sui/translations/move_core_types/ --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            cd ..
            cd ../../..
          endGroup
          startGroup "Translate Plonky3"
            cd third-party/Plonky3
            git checkout -- .
            cp ../../rust-toolchain ./
            # Add a line at the beginning of the file to enable its translation
            sed -i '1i#![feature(const_swap)]' util/src/lib.rs
            cargo coq-of-rust
            touch air/src/lib.rs
            touch blake3-air/src/lib.rs
            touch field/src/lib.rs
            touch matrix/src/lib.rs
            touch maybe-rayon/src/lib.rs
            touch util/src/lib.rs
            cargo coq-of-rust
            rsync -rcv ./air/src/ ../../CoqOfRust/plonky3/air --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            rsync -rcv ./blake3-air/src/ ../../CoqOfRust/plonky3/blake3-air --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            rsync -rcv ./field/src/ ../../CoqOfRust/plonky3/field --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            rsync -rcv ./matrix/src/ ../../CoqOfRust/plonky3/matrix --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            rsync -rcv ./maybe-rayon/src/ ../../CoqOfRust/plonky3/maybe-rayon --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            rsync -rcv ./util/src/ ../../CoqOfRust/plonky3/util --include='*/' --include='*.v' --include='*.rs' --exclude='*'
            cd ../..
            # As there are differences on this file depending on the CPU features that are available
            rm CoqOfRust/plonky3/field/integers.v
          endGroup
          startGroup "Generate Rocq files from Python"
            cd CoqOfRust
            make generate
            cd ..
          endGroup
          startGroup "Check that the diff is empty (excluding submodules)"
            git -c color.ui=always diff --exit-code --ignore-submodules=dirty
          endGroup
          startGroup "Compile Coq translations"
            cd CoqOfRust
            python ./make_and_detect_warnings.py
            cd ..
          endGroup
