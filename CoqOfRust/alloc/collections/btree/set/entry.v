(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module collections.
  Module btree.
    Module set.
      Module entry.
        (*
        Enum Entry
        {
          const_params := [];
          ty_params := [ "T"; "A" ];
          variants :=
            [
              {
                name := "Occupied";
                item :=
                  StructTuple
                    [
                      Ty.apply
                        (Ty.path "alloc::collections::btree::set::entry::OccupiedEntry")
                        []
                        [ T; A ]
                    ];
              };
              {
                name := "Vacant";
                item :=
                  StructTuple
                    [
                      Ty.apply
                        (Ty.path "alloc::collections::btree::set::entry::VacantEntry")
                        []
                        [ T; A ]
                    ];
              }
            ];
        }
        *)
        
        Axiom IsDiscriminant_Entry_Occupied :
          M.IsDiscriminant "alloc::collections::btree::set::entry::Entry::Occupied" 0.
        Axiom IsDiscriminant_Entry_Vacant :
          M.IsDiscriminant "alloc::collections::btree::set::entry::Entry::Vacant" 1.
        
        Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_where_core_cmp_Ord_T_where_core_alloc_Allocator_A_where_core_clone_Clone_A_for_alloc_collections_btree_set_entry_Entry_T_A.
          Definition Self (T A : Ty.t) : Ty.t :=
            Ty.apply (Ty.path "alloc::collections::btree::set::entry::Entry") [] [ T; A ].
          
          (*
              fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                  match *self {
                      Vacant(ref v) => f.debug_tuple("Entry").field(v).finish(),
                      Occupied(ref o) => f.debug_tuple("Entry").field(o).finish(),
                  }
              }
          *)
          Definition fmt (T A : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T A in
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let f := M.alloc (| f |) in
                M.read (|
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "*")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ]
                      ],
                    M.deref (| M.read (| self |) |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "alloc::collections::btree::set::entry::Entry::Vacant",
                              0
                            |) in
                          let v := M.alloc (| γ0_0 |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                              M.get_associated_function (|
                                Ty.path "core::fmt::builders::DebugTuple",
                                "finish",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.path "core::fmt::builders::DebugTuple" ],
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::builders::DebugTuple",
                                        "field",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "core::fmt::builders::DebugTuple",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Formatter",
                                                "debug_tuple",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| f |) |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| mk_str (| "Entry" |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        (* Unsize *)
                                        M.pointer_coercion
                                          (M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| v |) |)
                                          |))
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "alloc::collections::btree::set::entry::Entry::Occupied",
                              0
                            |) in
                          let o := M.alloc (| γ0_0 |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                              M.get_associated_function (|
                                Ty.path "core::fmt::builders::DebugTuple",
                                "finish",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.path "core::fmt::builders::DebugTuple" ],
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::builders::DebugTuple",
                                        "field",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "core::fmt::builders::DebugTuple",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Formatter",
                                                "debug_tuple",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| f |) |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| mk_str (| "Entry" |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        (* Unsize *)
                                        M.pointer_coercion
                                          (M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| o |) |)
                                          |))
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |)))
                    ]
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T A : Ty.t),
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T A)
              (* Instance *) [ ("fmt", InstanceField.Method (fmt T A)) ].
        End Impl_core_fmt_Debug_where_core_fmt_Debug_T_where_core_cmp_Ord_T_where_core_alloc_Allocator_A_where_core_clone_Clone_A_for_alloc_collections_btree_set_entry_Entry_T_A.
        
        (* StructRecord
          {
            name := "OccupiedEntry";
            const_params := [];
            ty_params := [ "T"; "A" ];
            fields :=
              [
                ("inner",
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::entry::OccupiedEntry")
                    []
                    [ T; Ty.path "alloc::collections::btree::set_val::SetValZST"; A ])
              ];
          } *)
        
        Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_where_core_cmp_Ord_T_where_core_alloc_Allocator_A_where_core_clone_Clone_A_for_alloc_collections_btree_set_entry_OccupiedEntry_T_A.
          Definition Self (T A : Ty.t) : Ty.t :=
            Ty.apply (Ty.path "alloc::collections::btree::set::entry::OccupiedEntry") [] [ T; A ].
          
          (*
              fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                  f.debug_struct("OccupiedEntry").field("value", self.get()).finish()
              }
          *)
          Definition fmt (T A : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T A in
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let f := M.alloc (| f |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::builders::DebugStruct",
                    "finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [ Ty.path "core::fmt::builders::DebugStruct" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::builders::DebugStruct",
                            "field",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "core::fmt::builders::DebugStruct",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Formatter",
                                    "debug_struct",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| f |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| mk_str (| "OccupiedEntry" |) |)
                                    |)
                                  ]
                                |)
                              |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "value" |) |) |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply (Ty.path "&") [] [ T ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "alloc::collections::btree::set::entry::OccupiedEntry")
                                        []
                                        [ T; A ],
                                      "get",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |))
                          ]
                        |)
                      |)
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T A : Ty.t),
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T A)
              (* Instance *) [ ("fmt", InstanceField.Method (fmt T A)) ].
        End Impl_core_fmt_Debug_where_core_fmt_Debug_T_where_core_cmp_Ord_T_where_core_alloc_Allocator_A_where_core_clone_Clone_A_for_alloc_collections_btree_set_entry_OccupiedEntry_T_A.
        
        (* StructRecord
          {
            name := "VacantEntry";
            const_params := [];
            ty_params := [ "T"; "A" ];
            fields :=
              [
                ("inner",
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::entry::VacantEntry")
                    []
                    [ T; Ty.path "alloc::collections::btree::set_val::SetValZST"; A ])
              ];
          } *)
        
        Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_where_core_cmp_Ord_T_where_core_alloc_Allocator_A_where_core_clone_Clone_A_for_alloc_collections_btree_set_entry_VacantEntry_T_A.
          Definition Self (T A : Ty.t) : Ty.t :=
            Ty.apply (Ty.path "alloc::collections::btree::set::entry::VacantEntry") [] [ T; A ].
          
          (*
              fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                  f.debug_tuple("VacantEntry").field(self.get()).finish()
              }
          *)
          Definition fmt (T A : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T A in
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let f := M.alloc (| f |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::builders::DebugTuple",
                    "finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [ Ty.path "core::fmt::builders::DebugTuple" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::builders::DebugTuple",
                            "field",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "core::fmt::builders::DebugTuple",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Formatter",
                                    "debug_tuple",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| f |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| mk_str (| "VacantEntry" |) |)
                                    |)
                                  ]
                                |)
                              |)
                            |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply (Ty.path "&") [] [ T ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "alloc::collections::btree::set::entry::VacantEntry")
                                        []
                                        [ T; A ],
                                      "get",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |))
                          ]
                        |)
                      |)
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T A : Ty.t),
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T A)
              (* Instance *) [ ("fmt", InstanceField.Method (fmt T A)) ].
        End Impl_core_fmt_Debug_where_core_fmt_Debug_T_where_core_cmp_Ord_T_where_core_alloc_Allocator_A_where_core_clone_Clone_A_for_alloc_collections_btree_set_entry_VacantEntry_T_A.
        
        Module Impl_alloc_collections_btree_set_entry_Entry_T_A.
          Definition Self (T A : Ty.t) : Ty.t :=
            Ty.apply (Ty.path "alloc::collections::btree::set::entry::Entry") [] [ T; A ].
          
          (*
              pub fn insert(self) -> OccupiedEntry<'a, T, A> {
                  match self {
                      Occupied(entry) => entry,
                      Vacant(entry) => entry.insert_entry(),
                  }
              }
          *)
          Definition insert
              (T A : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self T A in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.read (|
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "*")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::collections::btree::set::entry::OccupiedEntry")
                          []
                          [ T; A ]
                      ],
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "alloc::collections::btree::set::entry::Entry::Occupied",
                              0
                            |) in
                          let entry := M.copy (| γ0_0 |) in
                          entry));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "alloc::collections::btree::set::entry::Entry::Vacant",
                              0
                            |) in
                          let entry := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::collections::btree::set::entry::OccupiedEntry")
                                []
                                [ T; A ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::set::entry::VacantEntry")
                                  []
                                  [ T; A ],
                                "insert_entry",
                                [],
                                []
                              |),
                              [ M.read (| entry |) ]
                            |)
                          |)))
                    ]
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_insert :
            forall (T A : Ty.t),
            M.IsAssociatedFunction.C (Self T A) "insert" (insert T A).
          Admitted.
          Global Typeclasses Opaque insert.
          
          (*
              pub fn or_insert(self) {
                  if let Vacant(entry) = self {
                      entry.insert();
                  }
              }
          *)
          Definition or_insert
              (T A : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self T A in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.read (|
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := self in
                          let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "alloc::collections::btree::set::entry::Entry::Vacant",
                              0
                            |) in
                          let entry := M.copy (| γ0_0 |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::set::entry::VacantEntry")
                                    []
                                    [ T; A ],
                                  "insert",
                                  [],
                                  []
                                |),
                                [ M.read (| entry |) ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_or_insert :
            forall (T A : Ty.t),
            M.IsAssociatedFunction.C (Self T A) "or_insert" (or_insert T A).
          Admitted.
          Global Typeclasses Opaque or_insert.
          
          (*
              pub fn get(&self) -> &T {
                  match *self {
                      Occupied(ref entry) => entry.get(),
                      Vacant(ref entry) => entry.get(),
                  }
              }
          *)
          Definition get (T A : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T A in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.read (|
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "&") [] [ T ] ],
                        M.deref (| M.read (| self |) |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "alloc::collections::btree::set::entry::Entry::Occupied",
                                  0
                                |) in
                              let entry := M.alloc (| γ0_0 |) in
                              M.alloc (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply (Ty.path "&") [] [ T ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "alloc::collections::btree::set::entry::OccupiedEntry")
                                          []
                                          [ T; A ],
                                        "get",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| entry |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "alloc::collections::btree::set::entry::Entry::Vacant",
                                  0
                                |) in
                              let entry := M.alloc (| γ0_0 |) in
                              M.alloc (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply (Ty.path "&") [] [ T ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "alloc::collections::btree::set::entry::VacantEntry")
                                          []
                                          [ T; A ],
                                        "get",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| entry |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_get :
            forall (T A : Ty.t),
            M.IsAssociatedFunction.C (Self T A) "get" (get T A).
          Admitted.
          Global Typeclasses Opaque get.
        End Impl_alloc_collections_btree_set_entry_Entry_T_A.
        
        Module Impl_alloc_collections_btree_set_entry_OccupiedEntry_T_A.
          Definition Self (T A : Ty.t) : Ty.t :=
            Ty.apply (Ty.path "alloc::collections::btree::set::entry::OccupiedEntry") [] [ T; A ].
          
          (*
              pub fn get(&self) -> &T {
                  self.inner.key()
              }
          *)
          Definition get (T A : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T A in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ T ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::entry::OccupiedEntry")
                          []
                          [ T; Ty.path "alloc::collections::btree::set_val::SetValZST"; A ],
                        "key",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "alloc::collections::btree::set::entry::OccupiedEntry",
                            "inner"
                          |)
                        |)
                      ]
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_get :
            forall (T A : Ty.t),
            M.IsAssociatedFunction.C (Self T A) "get" (get T A).
          Admitted.
          Global Typeclasses Opaque get.
          
          (*
              pub fn remove(self) -> T {
                  self.inner.remove_entry().0
              }
          *)
          Definition remove
              (T A : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self T A in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.read (|
                  M.SubPointer.get_tuple_field (|
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [ T; Ty.path "alloc::collections::btree::set_val::SetValZST" ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::entry::OccupiedEntry")
                            []
                            [ T; Ty.path "alloc::collections::btree::set_val::SetValZST"; A ],
                          "remove_entry",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "alloc::collections::btree::set::entry::OccupiedEntry",
                              "inner"
                            |)
                          |)
                        ]
                      |)
                    |),
                    0
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_remove :
            forall (T A : Ty.t),
            M.IsAssociatedFunction.C (Self T A) "remove" (remove T A).
          Admitted.
          Global Typeclasses Opaque remove.
        End Impl_alloc_collections_btree_set_entry_OccupiedEntry_T_A.
        
        Module Impl_alloc_collections_btree_set_entry_VacantEntry_T_A.
          Definition Self (T A : Ty.t) : Ty.t :=
            Ty.apply (Ty.path "alloc::collections::btree::set::entry::VacantEntry") [] [ T; A ].
          
          (*
              pub fn get(&self) -> &T {
                  self.inner.key()
              }
          *)
          Definition get (T A : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T A in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ T ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::entry::VacantEntry")
                          []
                          [ T; Ty.path "alloc::collections::btree::set_val::SetValZST"; A ],
                        "key",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "alloc::collections::btree::set::entry::VacantEntry",
                            "inner"
                          |)
                        |)
                      ]
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_get :
            forall (T A : Ty.t),
            M.IsAssociatedFunction.C (Self T A) "get" (get T A).
          Admitted.
          Global Typeclasses Opaque get.
          
          (*
              pub fn into_value(self) -> T {
                  self.inner.into_key()
              }
          *)
          Definition into_value
              (T A : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self T A in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.call_closure (|
                  T,
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::entry::VacantEntry")
                      []
                      [ T; Ty.path "alloc::collections::btree::set_val::SetValZST"; A ],
                    "into_key",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "alloc::collections::btree::set::entry::VacantEntry",
                        "inner"
                      |)
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_into_value :
            forall (T A : Ty.t),
            M.IsAssociatedFunction.C (Self T A) "into_value" (into_value T A).
          Admitted.
          Global Typeclasses Opaque into_value.
          
          (*
              pub fn insert(self) {
                  self.inner.insert(SetValZST);
              }
          *)
          Definition insert
              (T A : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self T A in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.read (|
                  let~ _ :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [ Ty.path "alloc::collections::btree::set_val::SetValZST" ]
                        ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [ Ty.path "alloc::collections::btree::set_val::SetValZST" ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::entry::VacantEntry")
                            []
                            [ T; Ty.path "alloc::collections::btree::set_val::SetValZST"; A ],
                          "insert",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "alloc::collections::btree::set::entry::VacantEntry",
                              "inner"
                            |)
                          |);
                          Value.StructTuple "alloc::collections::btree::set_val::SetValZST" [] [] []
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_insert :
            forall (T A : Ty.t),
            M.IsAssociatedFunction.C (Self T A) "insert" (insert T A).
          Admitted.
          Global Typeclasses Opaque insert.
          
          (*
              fn insert_entry(self) -> OccupiedEntry<'a, T, A> {
                  OccupiedEntry { inner: self.inner.insert_entry(SetValZST) }
              }
          *)
          Definition insert_entry
              (T A : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self T A in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                Value.StructRecord
                  "alloc::collections::btree::set::entry::OccupiedEntry"
                  []
                  [ T; A ]
                  [
                    ("inner",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::entry::OccupiedEntry")
                          []
                          [ T; Ty.path "alloc::collections::btree::set_val::SetValZST"; A ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::entry::VacantEntry")
                            []
                            [ T; Ty.path "alloc::collections::btree::set_val::SetValZST"; A ],
                          "insert_entry",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "alloc::collections::btree::set::entry::VacantEntry",
                              "inner"
                            |)
                          |);
                          Value.StructTuple "alloc::collections::btree::set_val::SetValZST" [] [] []
                        ]
                      |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_insert_entry :
            forall (T A : Ty.t),
            M.IsAssociatedFunction.C (Self T A) "insert_entry" (insert_entry T A).
          Admitted.
          Global Typeclasses Opaque insert_entry.
        End Impl_alloc_collections_btree_set_entry_VacantEntry_T_A.
      End entry.
    End set.
  End btree.
End collections.
