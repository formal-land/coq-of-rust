(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module str.
  Module Impl_alloc_slice_Concat_where_core_borrow_Borrow_S_str_str_for_slice_S.
    Definition Self (S : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [ S ].
    
    (*     type Output = String; *)
    Definition _Output (S : Ty.t) : Ty.t := Ty.path "alloc::string::String".
    
    (*
        fn concat(slice: &Self) -> String {
            Join::join(slice, "")
        }
    *)
    Definition concat (S : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self S in
      match τ, α with
      | [], [ slice ] =>
        ltac:(M.monadic
          (let slice := M.alloc (| slice |) in
          M.call_closure (|
            M.get_trait_method (|
              "alloc::slice::Join",
              Ty.apply (Ty.path "slice") [ S ],
              [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ],
              "join",
              []
            |),
            [ M.read (| slice |); M.read (| Value.String "" |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (S : Ty.t),
      M.IsTraitInstance
        "alloc::slice::Concat"
        (Self S)
        (* Trait polymorphic types *) [ (* Item *) Ty.path "str" ]
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output S)); ("concat", InstanceField.Method (concat S)) ].
  End Impl_alloc_slice_Concat_where_core_borrow_Borrow_S_str_str_for_slice_S.
  
  Module Impl_alloc_slice_Join_where_core_borrow_Borrow_S_str_ref__str_for_slice_S.
    Definition Self (S : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [ S ].
    
    (*     type Output = String; *)
    Definition _Output (S : Ty.t) : Ty.t := Ty.path "alloc::string::String".
    
    (*
        fn join(slice: &Self, sep: &str) -> String {
            unsafe { String::from_utf8_unchecked(join_generic_copy(slice, sep.as_bytes())) }
        }
    *)
    Definition join (S : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self S in
      match τ, α with
      | [], [ slice; sep ] =>
        ltac:(M.monadic
          (let slice := M.alloc (| slice |) in
          let sep := M.alloc (| sep |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "alloc::string::String",
              "from_utf8_unchecked",
              []
            |),
            [
              M.call_closure (|
                M.get_function (|
                  "alloc::str::join_generic_copy",
                  [ Ty.path "str"; Ty.path "u8"; S ]
                |),
                [
                  M.read (| slice |);
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "str", "as_bytes", [] |),
                    [ M.read (| sep |) ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (S : Ty.t),
      M.IsTraitInstance
        "alloc::slice::Join"
        (Self S)
        (* Trait polymorphic types *) [ (* Separator *) Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output S)); ("join", InstanceField.Method (join S)) ].
  End Impl_alloc_slice_Join_where_core_borrow_Borrow_S_str_ref__str_for_slice_S.
  
  (*
  fn join_generic_copy<B, T, S>(slice: &[S], sep: &[T]) -> Vec<T>
  where
      T: Copy,
      B: AsRef<[T]> + ?Sized,
      S: Borrow<B>,
  {
      let sep_len = sep.len();
      let mut iter = slice.iter();
  
      // the first slice is the only one without a separator preceding it
      let first = match iter.next() {
          Some(first) => first,
          None => return vec![],
      };
  
      // compute the exact total length of the joined Vec
      // if the `len` calculation overflows, we'll panic
      // we would have run out of memory anyway and the rest of the function requires
      // the entire Vec pre-allocated for safety
      let reserved_len = sep_len
          .checked_mul(iter.len())
          .and_then(|n| {
              slice.iter().map(|s| s.borrow().as_ref().len()).try_fold(n, usize::checked_add)
          })
          .expect("attempt to join into collection with len > usize::MAX");
  
      // prepare an uninitialized buffer
      let mut result = Vec::with_capacity(reserved_len);
      debug_assert!(result.capacity() >= reserved_len);
  
      result.extend_from_slice(first.borrow().as_ref());
  
      unsafe {
          let pos = result.len();
          let target = result.spare_capacity_mut().get_unchecked_mut(..reserved_len - pos);
  
          // Convert the separator and slices to slices of MaybeUninit
          // to simplify implementation in specialize_for_lengths
          let sep_uninit = core::slice::from_raw_parts(sep.as_ptr().cast(), sep.len());
          let iter_uninit = iter.map(|it| {
              let it = it.borrow().as_ref();
              core::slice::from_raw_parts(it.as_ptr().cast(), it.len())
          });
  
          // copy separator and slices over without bounds checks
          // generate loops with hardcoded offsets for small separators
          // massive improvements possible (~ x2)
          let remain = specialize_for_lengths!(sep_uninit, target, iter_uninit; 0, 1, 2, 3, 4);
  
          // A weird borrow implementation may return different
          // slices for the length calculation and the actual copy.
          // Make sure we don't expose uninitialized bytes to the caller.
          let result_len = reserved_len - remain.len();
          result.set_len(result_len);
      }
      result
  }
  *)
  Definition join_generic_copy (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ B; T; _ as S ], [ slice; sep ] =>
      ltac:(M.monadic
        (let slice := M.alloc (| slice |) in
        let sep := M.alloc (| sep |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let sep_len :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (| Ty.apply (Ty.path "slice") [ T ], "len", [] |),
                    [ M.read (| sep |) ]
                  |)
                |) in
              let iter :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (| Ty.apply (Ty.path "slice") [ S ], "iter", [] |),
                    [ M.read (| slice |) ]
                  |)
                |) in
              let first :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::slice::iter::Iter") [ S ],
                          [],
                          "next",
                          []
                        |),
                        [ iter ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::option::Option::Some",
                              0
                            |) in
                          let first := M.copy (| γ0_0 |) in
                          first));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ T; Ty.path "alloc::alloc::Global" ],
                                      "new",
                                      []
                                    |),
                                    []
                                  |)
                                |)
                              |)
                            |)
                          |)))
                    ]
                  |)
                |) in
              let reserved_len :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ],
                      "expect",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ],
                          "and_then",
                          [
                            Ty.path "usize";
                            Ty.function
                              [ Ty.tuple [ Ty.path "usize" ] ]
                              (Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (| Ty.path "usize", "checked_mul", [] |),
                            [
                              M.read (| sep_len |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::exact_size::ExactSizeIterator",
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [ S ],
                                  [],
                                  "len",
                                  []
                                |),
                                [ iter ]
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let n := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::map::Map")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [ S ];
                                                  Ty.function
                                                    [ Ty.tuple [ Ty.apply (Ty.path "&") [ S ] ] ]
                                                    (Ty.path "usize")
                                                ],
                                              [],
                                              "try_fold",
                                              [
                                                Ty.path "usize";
                                                Ty.function
                                                  [ Ty.path "usize"; Ty.path "usize" ]
                                                  (Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [ Ty.path "usize" ]);
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "usize" ]
                                              ]
                                            |),
                                            [
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [ S ],
                                                    [],
                                                    "map",
                                                    [
                                                      Ty.path "usize";
                                                      Ty.function
                                                        [ Ty.tuple [ Ty.apply (Ty.path "&") [ S ] ]
                                                        ]
                                                        (Ty.path "usize")
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply (Ty.path "slice") [ S ],
                                                        "iter",
                                                        []
                                                      |),
                                                      [ M.read (| slice |) ]
                                                    |);
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            M.match_operator (|
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let s := M.copy (| γ |) in
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [ T ],
                                                                        "len",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::convert::AsRef",
                                                                            B,
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                [ T ]
                                                                            ],
                                                                            "as_ref",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::borrow::Borrow",
                                                                                S,
                                                                                [ B ],
                                                                                "borrow",
                                                                                []
                                                                              |),
                                                                              [ M.read (| s |) ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)
                                                          | _ => M.impossible (||)
                                                          end))
                                                  ]
                                                |)
                                              |);
                                              M.read (| n |);
                                              M.get_associated_function (|
                                                Ty.path "usize",
                                                "checked_add",
                                                []
                                              |)
                                            ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |);
                      M.read (|
                        Value.String "attempt to join into collection with len > usize::MAX"
                      |)
                    ]
                  |)
                |) in
              let result :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [ T; Ty.path "alloc::alloc::Global" ],
                      "with_capacity",
                      []
                    |),
                    [ M.read (| reserved_len |) ]
                  |)
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.Pure.not
                                          (BinOp.Pure.ge
                                            (M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ T; Ty.path "alloc::alloc::Global" ],
                                                "capacity",
                                                []
                                              |),
                                              [ result ]
                                            |))
                                            (M.read (| reserved_len |)))
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        M.get_function (| "core::panicking::panic", [] |),
                                        [
                                          M.read (|
                                            Value.String
                                              "assertion failed: result.capacity() >= reserved_len"
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [ T; Ty.path "alloc::alloc::Global" ],
                      "extend_from_slice",
                      []
                    |),
                    [
                      result;
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::convert::AsRef",
                          B,
                          [ Ty.apply (Ty.path "slice") [ T ] ],
                          "as_ref",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "core::borrow::Borrow", S, [ B ], "borrow", [] |),
                            [ M.read (| first |) ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                let pos :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "alloc::vec::Vec") [ T; Ty.path "alloc::alloc::Global" ],
                        "len",
                        []
                      |),
                      [ result ]
                    |)
                  |) in
                let target :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [ T ] ],
                        "get_unchecked_mut",
                        [ Ty.apply (Ty.path "core::ops::range::RangeTo") [ Ty.path "usize" ] ]
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ T; Ty.path "alloc::alloc::Global" ],
                            "spare_capacity_mut",
                            []
                          |),
                          [ result ]
                        |);
                        Value.StructRecord
                          "core::ops::range::RangeTo"
                          [
                            ("end_",
                              BinOp.Panic.sub (|
                                Integer.Usize,
                                M.read (| reserved_len |),
                                M.read (| pos |)
                              |))
                          ]
                      ]
                    |)
                  |) in
                let sep_uninit :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "core::slice::raw::from_raw_parts",
                        [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [ T ] ]
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "*const") [ T ],
                            "cast",
                            [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [ T ] ]
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [ T ],
                                "as_ptr",
                                []
                              |),
                              [ M.read (| sep |) ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [ T ],
                            "len",
                            []
                          |),
                          [ M.read (| sep |) ]
                        |)
                      ]
                    |)
                  |) in
                let iter_uninit :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::Iter") [ S ],
                        [],
                        "map",
                        [
                          Ty.apply
                            (Ty.path "&")
                            [
                              Ty.apply
                                (Ty.path "slice")
                                [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [ T ] ]
                            ];
                          Ty.function
                            [ Ty.tuple [ Ty.apply (Ty.path "&") [ S ] ] ]
                            (Ty.apply
                              (Ty.path "&")
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [ T ]
                                  ]
                              ])
                        ]
                      |),
                      [
                        M.read (| iter |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let it := M.copy (| γ |) in
                                        M.read (|
                                          let it :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::AsRef",
                                                  B,
                                                  [ Ty.apply (Ty.path "slice") [ T ] ],
                                                  "as_ref",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::borrow::Borrow",
                                                      S,
                                                      [ B ],
                                                      "borrow",
                                                      []
                                                    |),
                                                    [ M.read (| it |) ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_function (|
                                                "core::slice::raw::from_raw_parts",
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                                    [ T ]
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "*const") [ T ],
                                                    "cast",
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::mem::maybe_uninit::MaybeUninit")
                                                        [ T ]
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply (Ty.path "slice") [ T ],
                                                        "as_ptr",
                                                        []
                                                      |),
                                                      [ M.read (| it |) ]
                                                    |)
                                                  ]
                                                |);
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [ T ],
                                                    "len",
                                                    []
                                                  |),
                                                  [ M.read (| it |) ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                let remain :=
                  M.alloc (|
                    M.read (|
                      let target := M.copy (| target |) in
                      let iter := M.copy (| iter_uninit |) in
                      let sep_bytes := M.copy (| sep_uninit |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [ T ]
                                  ],
                                "len",
                                []
                              |),
                              [ M.read (| sep_uninit |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Integer 0
                                  |) in
                                M.use
                                  (M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::collect::IntoIterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply (Ty.path "core::slice::iter::Iter") [ S ];
                                              Ty.function
                                                [ Ty.tuple [ Ty.apply (Ty.path "&") [ S ] ] ]
                                                (Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::mem::maybe_uninit::MaybeUninit")
                                                          [ T ]
                                                      ]
                                                  ])
                                            ],
                                          [],
                                          "into_iter",
                                          []
                                        |),
                                        [ M.read (| iter |) ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let iter := M.copy (| γ |) in
                                          M.loop (|
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [ S ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [ Ty.apply (Ty.path "&") [ S ] ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::mem::maybe_uninit::MaybeUninit")
                                                                        [ T ]
                                                                    ]
                                                                ])
                                                          ],
                                                        [],
                                                        "next",
                                                        []
                                                      |),
                                                      [ iter ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (| M.break (||) |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::option::Option::Some",
                                                            0
                                                          |) in
                                                        let s := M.copy (| γ0_0 |) in
                                                        let len :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                      [ T ]
                                                                  ],
                                                                "len",
                                                                []
                                                              |),
                                                              [ M.read (| sep_bytes |) ]
                                                            |)
                                                          |) in
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                      [ T ]
                                                                  ],
                                                                "split_at_mut",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| target |);
                                                                M.read (| len |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    0
                                                                  |) in
                                                                let γ0_1 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    1
                                                                  |) in
                                                                let head := M.copy (| γ0_0 |) in
                                                                let tail := M.copy (| γ0_1 |) in
                                                                let _ :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "copy_from_slice",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| head |);
                                                                        M.read (| sep_bytes |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let _ :=
                                                                  M.write (|
                                                                    target,
                                                                    M.read (| tail |)
                                                                  |) in
                                                                let content_bytes :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::convert::AsRef",
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::mem::maybe_uninit::MaybeUninit")
                                                                                [ T ]
                                                                            ]
                                                                        ],
                                                                        "as_ref",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::borrow::Borrow",
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::mem::maybe_uninit::MaybeUninit")
                                                                                  [ T ]
                                                                              ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::mem::maybe_uninit::MaybeUninit")
                                                                                    [ T ]
                                                                                ]
                                                                            ],
                                                                            "borrow",
                                                                            []
                                                                          |),
                                                                          [ M.read (| s |) ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let len :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "len",
                                                                        []
                                                                      |),
                                                                      [ M.read (| content_bytes |) ]
                                                                    |)
                                                                  |) in
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "split_at_mut",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| target |);
                                                                        M.read (| len |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            0
                                                                          |) in
                                                                        let γ0_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            1
                                                                          |) in
                                                                        let head :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let tail :=
                                                                          M.copy (| γ0_1 |) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                                      [ T ]
                                                                                  ],
                                                                                "copy_from_slice",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| head |);
                                                                                M.read (|
                                                                                  content_bytes
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let _ :=
                                                                          M.write (|
                                                                            target,
                                                                            M.read (| tail |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                          |)))
                                    ]
                                  |))));
                            fun γ =>
                              ltac:(M.monadic
                                (let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Integer 1
                                  |) in
                                M.use
                                  (M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::collect::IntoIterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply (Ty.path "core::slice::iter::Iter") [ S ];
                                              Ty.function
                                                [ Ty.tuple [ Ty.apply (Ty.path "&") [ S ] ] ]
                                                (Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::mem::maybe_uninit::MaybeUninit")
                                                          [ T ]
                                                      ]
                                                  ])
                                            ],
                                          [],
                                          "into_iter",
                                          []
                                        |),
                                        [ M.read (| iter |) ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let iter := M.copy (| γ |) in
                                          M.loop (|
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [ S ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [ Ty.apply (Ty.path "&") [ S ] ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::mem::maybe_uninit::MaybeUninit")
                                                                        [ T ]
                                                                    ]
                                                                ])
                                                          ],
                                                        [],
                                                        "next",
                                                        []
                                                      |),
                                                      [ iter ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (| M.break (||) |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::option::Option::Some",
                                                            0
                                                          |) in
                                                        let s := M.copy (| γ0_0 |) in
                                                        let len :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                      [ T ]
                                                                  ],
                                                                "len",
                                                                []
                                                              |),
                                                              [ M.read (| sep_bytes |) ]
                                                            |)
                                                          |) in
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                      [ T ]
                                                                  ],
                                                                "split_at_mut",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| target |);
                                                                M.read (| len |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    0
                                                                  |) in
                                                                let γ0_1 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    1
                                                                  |) in
                                                                let head := M.copy (| γ0_0 |) in
                                                                let tail := M.copy (| γ0_1 |) in
                                                                let _ :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "copy_from_slice",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| head |);
                                                                        M.read (| sep_bytes |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let _ :=
                                                                  M.write (|
                                                                    target,
                                                                    M.read (| tail |)
                                                                  |) in
                                                                let content_bytes :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::convert::AsRef",
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::mem::maybe_uninit::MaybeUninit")
                                                                                [ T ]
                                                                            ]
                                                                        ],
                                                                        "as_ref",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::borrow::Borrow",
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::mem::maybe_uninit::MaybeUninit")
                                                                                  [ T ]
                                                                              ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::mem::maybe_uninit::MaybeUninit")
                                                                                    [ T ]
                                                                                ]
                                                                            ],
                                                                            "borrow",
                                                                            []
                                                                          |),
                                                                          [ M.read (| s |) ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let len :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "len",
                                                                        []
                                                                      |),
                                                                      [ M.read (| content_bytes |) ]
                                                                    |)
                                                                  |) in
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "split_at_mut",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| target |);
                                                                        M.read (| len |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            0
                                                                          |) in
                                                                        let γ0_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            1
                                                                          |) in
                                                                        let head :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let tail :=
                                                                          M.copy (| γ0_1 |) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                                      [ T ]
                                                                                  ],
                                                                                "copy_from_slice",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| head |);
                                                                                M.read (|
                                                                                  content_bytes
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let _ :=
                                                                          M.write (|
                                                                            target,
                                                                            M.read (| tail |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                          |)))
                                    ]
                                  |))));
                            fun γ =>
                              ltac:(M.monadic
                                (let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Integer 2
                                  |) in
                                M.use
                                  (M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::collect::IntoIterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply (Ty.path "core::slice::iter::Iter") [ S ];
                                              Ty.function
                                                [ Ty.tuple [ Ty.apply (Ty.path "&") [ S ] ] ]
                                                (Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::mem::maybe_uninit::MaybeUninit")
                                                          [ T ]
                                                      ]
                                                  ])
                                            ],
                                          [],
                                          "into_iter",
                                          []
                                        |),
                                        [ M.read (| iter |) ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let iter := M.copy (| γ |) in
                                          M.loop (|
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [ S ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [ Ty.apply (Ty.path "&") [ S ] ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::mem::maybe_uninit::MaybeUninit")
                                                                        [ T ]
                                                                    ]
                                                                ])
                                                          ],
                                                        [],
                                                        "next",
                                                        []
                                                      |),
                                                      [ iter ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (| M.break (||) |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::option::Option::Some",
                                                            0
                                                          |) in
                                                        let s := M.copy (| γ0_0 |) in
                                                        let len :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                      [ T ]
                                                                  ],
                                                                "len",
                                                                []
                                                              |),
                                                              [ M.read (| sep_bytes |) ]
                                                            |)
                                                          |) in
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                      [ T ]
                                                                  ],
                                                                "split_at_mut",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| target |);
                                                                M.read (| len |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    0
                                                                  |) in
                                                                let γ0_1 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    1
                                                                  |) in
                                                                let head := M.copy (| γ0_0 |) in
                                                                let tail := M.copy (| γ0_1 |) in
                                                                let _ :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "copy_from_slice",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| head |);
                                                                        M.read (| sep_bytes |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let _ :=
                                                                  M.write (|
                                                                    target,
                                                                    M.read (| tail |)
                                                                  |) in
                                                                let content_bytes :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::convert::AsRef",
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::mem::maybe_uninit::MaybeUninit")
                                                                                [ T ]
                                                                            ]
                                                                        ],
                                                                        "as_ref",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::borrow::Borrow",
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::mem::maybe_uninit::MaybeUninit")
                                                                                  [ T ]
                                                                              ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::mem::maybe_uninit::MaybeUninit")
                                                                                    [ T ]
                                                                                ]
                                                                            ],
                                                                            "borrow",
                                                                            []
                                                                          |),
                                                                          [ M.read (| s |) ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let len :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "len",
                                                                        []
                                                                      |),
                                                                      [ M.read (| content_bytes |) ]
                                                                    |)
                                                                  |) in
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "split_at_mut",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| target |);
                                                                        M.read (| len |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            0
                                                                          |) in
                                                                        let γ0_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            1
                                                                          |) in
                                                                        let head :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let tail :=
                                                                          M.copy (| γ0_1 |) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                                      [ T ]
                                                                                  ],
                                                                                "copy_from_slice",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| head |);
                                                                                M.read (|
                                                                                  content_bytes
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let _ :=
                                                                          M.write (|
                                                                            target,
                                                                            M.read (| tail |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                          |)))
                                    ]
                                  |))));
                            fun γ =>
                              ltac:(M.monadic
                                (let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Integer 3
                                  |) in
                                M.use
                                  (M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::collect::IntoIterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply (Ty.path "core::slice::iter::Iter") [ S ];
                                              Ty.function
                                                [ Ty.tuple [ Ty.apply (Ty.path "&") [ S ] ] ]
                                                (Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::mem::maybe_uninit::MaybeUninit")
                                                          [ T ]
                                                      ]
                                                  ])
                                            ],
                                          [],
                                          "into_iter",
                                          []
                                        |),
                                        [ M.read (| iter |) ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let iter := M.copy (| γ |) in
                                          M.loop (|
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [ S ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [ Ty.apply (Ty.path "&") [ S ] ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::mem::maybe_uninit::MaybeUninit")
                                                                        [ T ]
                                                                    ]
                                                                ])
                                                          ],
                                                        [],
                                                        "next",
                                                        []
                                                      |),
                                                      [ iter ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (| M.break (||) |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::option::Option::Some",
                                                            0
                                                          |) in
                                                        let s := M.copy (| γ0_0 |) in
                                                        let len :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                      [ T ]
                                                                  ],
                                                                "len",
                                                                []
                                                              |),
                                                              [ M.read (| sep_bytes |) ]
                                                            |)
                                                          |) in
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                      [ T ]
                                                                  ],
                                                                "split_at_mut",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| target |);
                                                                M.read (| len |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    0
                                                                  |) in
                                                                let γ0_1 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    1
                                                                  |) in
                                                                let head := M.copy (| γ0_0 |) in
                                                                let tail := M.copy (| γ0_1 |) in
                                                                let _ :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "copy_from_slice",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| head |);
                                                                        M.read (| sep_bytes |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let _ :=
                                                                  M.write (|
                                                                    target,
                                                                    M.read (| tail |)
                                                                  |) in
                                                                let content_bytes :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::convert::AsRef",
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::mem::maybe_uninit::MaybeUninit")
                                                                                [ T ]
                                                                            ]
                                                                        ],
                                                                        "as_ref",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::borrow::Borrow",
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::mem::maybe_uninit::MaybeUninit")
                                                                                  [ T ]
                                                                              ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::mem::maybe_uninit::MaybeUninit")
                                                                                    [ T ]
                                                                                ]
                                                                            ],
                                                                            "borrow",
                                                                            []
                                                                          |),
                                                                          [ M.read (| s |) ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let len :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "len",
                                                                        []
                                                                      |),
                                                                      [ M.read (| content_bytes |) ]
                                                                    |)
                                                                  |) in
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "split_at_mut",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| target |);
                                                                        M.read (| len |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            0
                                                                          |) in
                                                                        let γ0_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            1
                                                                          |) in
                                                                        let head :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let tail :=
                                                                          M.copy (| γ0_1 |) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                                      [ T ]
                                                                                  ],
                                                                                "copy_from_slice",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| head |);
                                                                                M.read (|
                                                                                  content_bytes
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let _ :=
                                                                          M.write (|
                                                                            target,
                                                                            M.read (| tail |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                          |)))
                                    ]
                                  |))));
                            fun γ =>
                              ltac:(M.monadic
                                (let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Integer 4
                                  |) in
                                M.use
                                  (M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::collect::IntoIterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply (Ty.path "core::slice::iter::Iter") [ S ];
                                              Ty.function
                                                [ Ty.tuple [ Ty.apply (Ty.path "&") [ S ] ] ]
                                                (Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::mem::maybe_uninit::MaybeUninit")
                                                          [ T ]
                                                      ]
                                                  ])
                                            ],
                                          [],
                                          "into_iter",
                                          []
                                        |),
                                        [ M.read (| iter |) ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let iter := M.copy (| γ |) in
                                          M.loop (|
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [ S ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [ Ty.apply (Ty.path "&") [ S ] ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::mem::maybe_uninit::MaybeUninit")
                                                                        [ T ]
                                                                    ]
                                                                ])
                                                          ],
                                                        [],
                                                        "next",
                                                        []
                                                      |),
                                                      [ iter ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (| M.break (||) |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::option::Option::Some",
                                                            0
                                                          |) in
                                                        let s := M.copy (| γ0_0 |) in
                                                        let len :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                      [ T ]
                                                                  ],
                                                                "len",
                                                                []
                                                              |),
                                                              [ M.read (| sep_bytes |) ]
                                                            |)
                                                          |) in
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                      [ T ]
                                                                  ],
                                                                "split_at_mut",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| target |);
                                                                M.read (| len |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    0
                                                                  |) in
                                                                let γ0_1 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    1
                                                                  |) in
                                                                let head := M.copy (| γ0_0 |) in
                                                                let tail := M.copy (| γ0_1 |) in
                                                                let _ :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "copy_from_slice",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| head |);
                                                                        M.read (| sep_bytes |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let _ :=
                                                                  M.write (|
                                                                    target,
                                                                    M.read (| tail |)
                                                                  |) in
                                                                let content_bytes :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::convert::AsRef",
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::mem::maybe_uninit::MaybeUninit")
                                                                                [ T ]
                                                                            ]
                                                                        ],
                                                                        "as_ref",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::borrow::Borrow",
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::mem::maybe_uninit::MaybeUninit")
                                                                                  [ T ]
                                                                              ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::mem::maybe_uninit::MaybeUninit")
                                                                                    [ T ]
                                                                                ]
                                                                            ],
                                                                            "borrow",
                                                                            []
                                                                          |),
                                                                          [ M.read (| s |) ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let len :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "len",
                                                                        []
                                                                      |),
                                                                      [ M.read (| content_bytes |) ]
                                                                    |)
                                                                  |) in
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "split_at_mut",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| target |);
                                                                        M.read (| len |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            0
                                                                          |) in
                                                                        let γ0_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            1
                                                                          |) in
                                                                        let head :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let tail :=
                                                                          M.copy (| γ0_1 |) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                                      [ T ]
                                                                                  ],
                                                                                "copy_from_slice",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| head |);
                                                                                M.read (|
                                                                                  content_bytes
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let _ :=
                                                                          M.write (|
                                                                            target,
                                                                            M.read (| tail |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                          |)))
                                    ]
                                  |))));
                            fun γ =>
                              ltac:(M.monadic
                                (M.use
                                  (M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::collect::IntoIterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply (Ty.path "core::slice::iter::Iter") [ S ];
                                              Ty.function
                                                [ Ty.tuple [ Ty.apply (Ty.path "&") [ S ] ] ]
                                                (Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::mem::maybe_uninit::MaybeUninit")
                                                          [ T ]
                                                      ]
                                                  ])
                                            ],
                                          [],
                                          "into_iter",
                                          []
                                        |),
                                        [ M.read (| iter |) ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let iter := M.copy (| γ |) in
                                          M.loop (|
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [ S ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [ Ty.apply (Ty.path "&") [ S ] ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::mem::maybe_uninit::MaybeUninit")
                                                                        [ T ]
                                                                    ]
                                                                ])
                                                          ],
                                                        [],
                                                        "next",
                                                        []
                                                      |),
                                                      [ iter ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (| M.break (||) |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::option::Option::Some",
                                                            0
                                                          |) in
                                                        let s := M.copy (| γ0_0 |) in
                                                        let len :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                      [ T ]
                                                                  ],
                                                                "len",
                                                                []
                                                              |),
                                                              [ M.read (| sep_bytes |) ]
                                                            |)
                                                          |) in
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                      [ T ]
                                                                  ],
                                                                "split_at_mut",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| target |);
                                                                M.read (| len |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    0
                                                                  |) in
                                                                let γ0_1 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    1
                                                                  |) in
                                                                let head := M.copy (| γ0_0 |) in
                                                                let tail := M.copy (| γ0_1 |) in
                                                                let _ :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "copy_from_slice",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| head |);
                                                                        M.read (| sep_bytes |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let _ :=
                                                                  M.write (|
                                                                    target,
                                                                    M.read (| tail |)
                                                                  |) in
                                                                let content_bytes :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::convert::AsRef",
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::mem::maybe_uninit::MaybeUninit")
                                                                                [ T ]
                                                                            ]
                                                                        ],
                                                                        "as_ref",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::borrow::Borrow",
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::mem::maybe_uninit::MaybeUninit")
                                                                                  [ T ]
                                                                              ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::mem::maybe_uninit::MaybeUninit")
                                                                                    [ T ]
                                                                                ]
                                                                            ],
                                                                            "borrow",
                                                                            []
                                                                          |),
                                                                          [ M.read (| s |) ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let len :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "len",
                                                                        []
                                                                      |),
                                                                      [ M.read (| content_bytes |) ]
                                                                    |)
                                                                  |) in
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              [ T ]
                                                                          ],
                                                                        "split_at_mut",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| target |);
                                                                        M.read (| len |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            0
                                                                          |) in
                                                                        let γ0_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            1
                                                                          |) in
                                                                        let head :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let tail :=
                                                                          M.copy (| γ0_1 |) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                                      [ T ]
                                                                                  ],
                                                                                "copy_from_slice",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| head |);
                                                                                M.read (|
                                                                                  content_bytes
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let _ :=
                                                                          M.write (|
                                                                            target,
                                                                            M.read (| tail |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                          |)))
                                    ]
                                  |))))
                          ]
                        |) in
                      target
                    |)
                  |) in
                let result_len :=
                  M.alloc (|
                    BinOp.Panic.sub (|
                      Integer.Usize,
                      M.read (| reserved_len |),
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [ T ] ],
                          "len",
                          []
                        |),
                        [ M.read (| remain |) ]
                      |)
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "alloc::vec::Vec") [ T; Ty.path "alloc::alloc::Global" ],
                        "set_len",
                        []
                      |),
                      [ result; M.read (| result_len |) ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |) in
              result
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  Module Impl_core_borrow_Borrow_str_for_alloc_string_String.
    Definition Self : Ty.t := Ty.path "alloc::string::String".
    
    (*
        fn borrow(&self) -> &str {
            &self[..]
        }
    *)
    Definition borrow (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::ops::index::Index",
              Ty.path "alloc::string::String",
              [ Ty.path "core::ops::range::RangeFull" ],
              "index",
              []
            |),
            [ M.read (| self |); Value.StructTuple "core::ops::range::RangeFull" [] ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::borrow::Borrow"
        Self
        (* Trait polymorphic types *) [ (* Borrowed *) Ty.path "str" ]
        (* Instance *) [ ("borrow", InstanceField.Method borrow) ].
  End Impl_core_borrow_Borrow_str_for_alloc_string_String.
  
  Module Impl_core_borrow_BorrowMut_str_for_alloc_string_String.
    Definition Self : Ty.t := Ty.path "alloc::string::String".
    
    (*
        fn borrow_mut(&mut self) -> &mut str {
            &mut self[..]
        }
    *)
    Definition borrow_mut (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::ops::index::IndexMut",
              Ty.path "alloc::string::String",
              [ Ty.path "core::ops::range::RangeFull" ],
              "index_mut",
              []
            |),
            [ M.read (| self |); Value.StructTuple "core::ops::range::RangeFull" [] ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::borrow::BorrowMut"
        Self
        (* Trait polymorphic types *) [ (* Borrowed *) Ty.path "str" ]
        (* Instance *) [ ("borrow_mut", InstanceField.Method borrow_mut) ].
  End Impl_core_borrow_BorrowMut_str_for_alloc_string_String.
  
  Module Impl_alloc_borrow_ToOwned_for_str.
    Definition Self : Ty.t := Ty.path "str".
    
    (*     type Owned = String; *)
    Definition _Owned : Ty.t := Ty.path "alloc::string::String".
    
    (*
        fn to_owned(&self) -> String {
            unsafe { String::from_utf8_unchecked(self.as_bytes().to_owned()) }
        }
    *)
    Definition to_owned (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "alloc::string::String",
              "from_utf8_unchecked",
              []
            |),
            [
              M.call_closure (|
                M.get_trait_method (|
                  "alloc::borrow::ToOwned",
                  Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                  [],
                  "to_owned",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "str", "as_bytes", [] |),
                    [ M.read (| self |) ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn clone_into(&self, target: &mut String) {
            let mut b = mem::take(target).into_bytes();
            self.as_bytes().clone_into(&mut b);
            *target = unsafe { String::from_utf8_unchecked(b) }
        }
    *)
    Definition clone_into (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; target ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let target := M.alloc (| target |) in
          M.read (|
            let b :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (| Ty.path "alloc::string::String", "into_bytes", [] |),
                  [
                    M.call_closure (|
                      M.get_function (| "core::mem::take", [ Ty.path "alloc::string::String" ] |),
                      [ M.read (| target |) ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "alloc::borrow::ToOwned",
                    Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                    [],
                    "clone_into",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (| Ty.path "str", "as_bytes", [] |),
                      [ M.read (| self |) ]
                    |);
                    b
                  ]
                |)
              |) in
            M.write (|
              M.read (| target |),
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "alloc::string::String",
                  "from_utf8_unchecked",
                  []
                |),
                [ M.read (| b |) ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "alloc::borrow::ToOwned"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("Owned", InstanceField.Ty _Owned);
          ("to_owned", InstanceField.Method to_owned);
          ("clone_into", InstanceField.Method clone_into)
        ].
  End Impl_alloc_borrow_ToOwned_for_str.
  
  Module Impl_str.
    Definition Self : Ty.t := Ty.path "str".
    
    (*
        pub fn into_boxed_bytes(self: Box<str>) -> Box<[u8]> {
            self.into()
        }
    *)
    Definition into_boxed_bytes (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::convert::Into",
              Ty.apply
                (Ty.path "alloc::boxed::Box")
                [ Ty.path "str"; Ty.path "alloc::alloc::Global" ],
              [
                Ty.apply
                  (Ty.path "alloc::boxed::Box")
                  [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ]; Ty.path "alloc::alloc::Global" ]
              ],
              "into",
              []
            |),
            [ M.read (| self |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_into_boxed_bytes :
      M.IsAssociatedFunction Self "into_boxed_bytes" into_boxed_bytes.
    
    (*
        pub fn replace<'a, P: Pattern<'a>>(&'a self, from: P, to: &str) -> String {
            let mut result = String::new();
            let mut last_end = 0;
            for (start, part) in self.match_indices(from) {
                result.push_str(unsafe { self.get_unchecked(last_end..start) });
                result.push_str(to);
                last_end = start + part.len();
            }
            result.push_str(unsafe { self.get_unchecked(last_end..self.len()) });
            result
        }
    *)
    Definition replace (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ P ], [ self; from; to ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let from := M.alloc (| from |) in
          let to := M.alloc (| to |) in
          M.read (|
            let result :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (| Ty.path "alloc::string::String", "new", [] |),
                  []
                |)
              |) in
            let last_end := M.alloc (| Value.Integer 0 |) in
            let _ :=
              M.use
                (M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "core::str::iter::MatchIndices") [ P ],
                        [],
                        "into_iter",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (| Ty.path "str", "match_indices", [ P ] |),
                          [ M.read (| self |); M.read (| from |) ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          ltac:(M.monadic
                            (let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply (Ty.path "core::str::iter::MatchIndices") [ P ],
                                      [],
                                      "next",
                                      []
                                    |),
                                    [ iter ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                      let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                      let start := M.copy (| γ1_0 |) in
                                      let part := M.copy (| γ1_1 |) in
                                      let _ :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "alloc::string::String",
                                              "push_str",
                                              []
                                            |),
                                            [
                                              result;
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "str",
                                                  "get_unchecked",
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::Range")
                                                      [ Ty.path "usize" ]
                                                  ]
                                                |),
                                                [
                                                  M.read (| self |);
                                                  Value.StructRecord
                                                    "core::ops::range::Range"
                                                    [
                                                      ("start", M.read (| last_end |));
                                                      ("end_", M.read (| start |))
                                                    ]
                                                ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let _ :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "alloc::string::String",
                                              "push_str",
                                              []
                                            |),
                                            [ result; M.read (| to |) ]
                                          |)
                                        |) in
                                      let _ :=
                                        M.write (|
                                          last_end,
                                          BinOp.Panic.add (|
                                            Integer.Usize,
                                            M.read (| start |),
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "str",
                                                "len",
                                                []
                                              |),
                                              [ M.read (| part |) ]
                                            |)
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (| Ty.path "alloc::string::String", "push_str", [] |),
                  [
                    result;
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "str",
                        "get_unchecked",
                        [ Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ] ]
                      |),
                      [
                        M.read (| self |);
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start", M.read (| last_end |));
                            ("end_",
                              M.call_closure (|
                                M.get_associated_function (| Ty.path "str", "len", [] |),
                                [ M.read (| self |) ]
                              |))
                          ]
                      ]
                    |)
                  ]
                |)
              |) in
            result
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_replace : M.IsAssociatedFunction Self "replace" replace.
    
    (*
        pub fn replacen<'a, P: Pattern<'a>>(&'a self, pat: P, to: &str, count: usize) -> String {
            // Hope to reduce the times of re-allocation
            let mut result = String::with_capacity(32);
            let mut last_end = 0;
            for (start, part) in self.match_indices(pat).take(count) {
                result.push_str(unsafe { self.get_unchecked(last_end..start) });
                result.push_str(to);
                last_end = start + part.len();
            }
            result.push_str(unsafe { self.get_unchecked(last_end..self.len()) });
            result
        }
    *)
    Definition replacen (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ P ], [ self; pat; to; count ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          let to := M.alloc (| to |) in
          let count := M.alloc (| count |) in
          M.read (|
            let result :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "alloc::string::String",
                    "with_capacity",
                    []
                  |),
                  [ Value.Integer 32 ]
                |)
              |) in
            let last_end := M.alloc (| Value.Integer 0 |) in
            let _ :=
              M.use
                (M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::take::Take")
                          [ Ty.apply (Ty.path "core::str::iter::MatchIndices") [ P ] ],
                        [],
                        "into_iter",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::str::iter::MatchIndices") [ P ],
                            [],
                            "take",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (| Ty.path "str", "match_indices", [ P ] |),
                              [ M.read (| self |); M.read (| pat |) ]
                            |);
                            M.read (| count |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          ltac:(M.monadic
                            (let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::take::Take")
                                        [ Ty.apply (Ty.path "core::str::iter::MatchIndices") [ P ]
                                        ],
                                      [],
                                      "next",
                                      []
                                    |),
                                    [ iter ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                      let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                      let start := M.copy (| γ1_0 |) in
                                      let part := M.copy (| γ1_1 |) in
                                      let _ :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "alloc::string::String",
                                              "push_str",
                                              []
                                            |),
                                            [
                                              result;
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "str",
                                                  "get_unchecked",
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::Range")
                                                      [ Ty.path "usize" ]
                                                  ]
                                                |),
                                                [
                                                  M.read (| self |);
                                                  Value.StructRecord
                                                    "core::ops::range::Range"
                                                    [
                                                      ("start", M.read (| last_end |));
                                                      ("end_", M.read (| start |))
                                                    ]
                                                ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let _ :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "alloc::string::String",
                                              "push_str",
                                              []
                                            |),
                                            [ result; M.read (| to |) ]
                                          |)
                                        |) in
                                      let _ :=
                                        M.write (|
                                          last_end,
                                          BinOp.Panic.add (|
                                            Integer.Usize,
                                            M.read (| start |),
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "str",
                                                "len",
                                                []
                                              |),
                                              [ M.read (| part |) ]
                                            |)
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (| Ty.path "alloc::string::String", "push_str", [] |),
                  [
                    result;
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "str",
                        "get_unchecked",
                        [ Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ] ]
                      |),
                      [
                        M.read (| self |);
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start", M.read (| last_end |));
                            ("end_",
                              M.call_closure (|
                                M.get_associated_function (| Ty.path "str", "len", [] |),
                                [ M.read (| self |) ]
                              |))
                          ]
                      ]
                    |)
                  ]
                |)
              |) in
            result
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_replacen : M.IsAssociatedFunction Self "replacen" replacen.
    
    (*
        pub fn to_lowercase(&self) -> String {
            let out = convert_while_ascii(self.as_bytes(), u8::to_ascii_lowercase);
    
            // Safety: we know this is a valid char boundary since
            // out.len() is only progressed if ascii bytes are found
            let rest = unsafe { self.get_unchecked(out.len()..) };
    
            // Safety: We have written only valid ASCII to our vec
            let mut s = unsafe { String::from_utf8_unchecked(out) };
    
            for (i, c) in rest[..].char_indices() {
                if c == 'Σ' {
                    // Σ maps to σ, except at the end of a word where it maps to ς.
                    // This is the only conditional (contextual) but language-independent mapping
                    // in `SpecialCasing.txt`,
                    // so hard-code it rather than have a generic "condition" mechanism.
                    // See https://github.com/rust-lang/rust/issues/26035
                    map_uppercase_sigma(rest, i, &mut s)
                } else {
                    match conversions::to_lower(c) {
                        [a, '\0', _] => s.push(a),
                        [a, b, '\0'] => {
                            s.push(a);
                            s.push(b);
                        }
                        [a, b, c] => {
                            s.push(a);
                            s.push(b);
                            s.push(c);
                        }
                    }
                }
            }
            return s;
    
            fn map_uppercase_sigma(from: &str, i: usize, to: &mut String) {
                // See https://www.unicode.org/versions/Unicode7.0.0/ch03.pdf#G33992
                // for the definition of `Final_Sigma`.
                debug_assert!('Σ'.len_utf8() == 2);
                let is_word_final = case_ignorable_then_cased(from[..i].chars().rev())
                    && !case_ignorable_then_cased(from[i + 2..].chars());
                to.push_str(if is_word_final { "ς" } else { "σ" });
            }
    
            fn case_ignorable_then_cased<I: Iterator<Item = char>>(iter: I) -> bool {
                use core::unicode::{Case_Ignorable, Cased};
                match iter.skip_while(|&c| Case_Ignorable(c)).next() {
                    Some(c) => Cased(c),
                    None => false,
                }
            }
        }
    *)
    Definition to_lowercase (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.never_to_any (|
                M.read (|
                  let out :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (| "alloc::str::convert_while_ascii", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (| Ty.path "str", "as_bytes", [] |),
                            [ M.read (| self |) ]
                          |);
                          (* ReifyFnPointer *)
                          M.pointer_coercion
                            (M.get_associated_function (| Ty.path "u8", "to_ascii_lowercase", [] |))
                        ]
                      |)
                    |) in
                  let rest :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "str",
                          "get_unchecked",
                          [ Ty.apply (Ty.path "core::ops::range::RangeFrom") [ Ty.path "usize" ] ]
                        |),
                        [
                          M.read (| self |);
                          Value.StructRecord
                            "core::ops::range::RangeFrom"
                            [
                              ("start",
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                    "len",
                                    []
                                  |),
                                  [ out ]
                                |))
                            ]
                        ]
                      |)
                    |) in
                  let s :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "alloc::string::String",
                          "from_utf8_unchecked",
                          []
                        |),
                        [ M.read (| out |) ]
                      |)
                    |) in
                  let _ :=
                    M.use
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.path "core::str::iter::CharIndices",
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (| Ty.path "str", "char_indices", [] |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::index::Index",
                                      Ty.path "str",
                                      [ Ty.path "core::ops::range::RangeFull" ],
                                      "index",
                                      []
                                    |),
                                    [
                                      M.read (| rest |);
                                      Value.StructTuple "core::ops::range::RangeFull" []
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                ltac:(M.monadic
                                  (let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.path "core::str::iter::CharIndices",
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let i := M.copy (| γ1_0 |) in
                                            let c := M.copy (| γ1_1 |) in
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          BinOp.Pure.eq
                                                            (M.read (| c |))
                                                            (Value.UnicodeChar 931)
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Self,
                                                          "map_uppercase_sigma.to_lowercase",
                                                          []
                                                        |),
                                                        [ M.read (| rest |); M.read (| i |); s ]
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_function (|
                                                            "core::unicode::unicode_data::conversions::to_lower",
                                                            []
                                                          |),
                                                          [ M.read (| c |) ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_slice_index (|
                                                                γ,
                                                                0
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_slice_index (|
                                                                γ,
                                                                1
                                                              |) in
                                                            let γ0_2 :=
                                                              M.SubPointer.get_slice_index (|
                                                                γ,
                                                                2
                                                              |) in
                                                            let a := M.copy (| γ0_0 |) in
                                                            let _ :=
                                                              M.is_constant_or_break_match (|
                                                                M.read (| γ0_1 |),
                                                                Value.UnicodeChar 0
                                                              |) in
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path "alloc::string::String",
                                                                  "push",
                                                                  []
                                                                |),
                                                                [ s; M.read (| a |) ]
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_slice_index (|
                                                                γ,
                                                                0
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_slice_index (|
                                                                γ,
                                                                1
                                                              |) in
                                                            let γ0_2 :=
                                                              M.SubPointer.get_slice_index (|
                                                                γ,
                                                                2
                                                              |) in
                                                            let a := M.copy (| γ0_0 |) in
                                                            let b := M.copy (| γ0_1 |) in
                                                            let _ :=
                                                              M.is_constant_or_break_match (|
                                                                M.read (| γ0_2 |),
                                                                Value.UnicodeChar 0
                                                              |) in
                                                            let _ :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path "alloc::string::String",
                                                                    "push",
                                                                    []
                                                                  |),
                                                                  [ s; M.read (| a |) ]
                                                                |)
                                                              |) in
                                                            let _ :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path "alloc::string::String",
                                                                    "push",
                                                                    []
                                                                  |),
                                                                  [ s; M.read (| b |) ]
                                                                |)
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_slice_index (|
                                                                γ,
                                                                0
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_slice_index (|
                                                                γ,
                                                                1
                                                              |) in
                                                            let γ0_2 :=
                                                              M.SubPointer.get_slice_index (|
                                                                γ,
                                                                2
                                                              |) in
                                                            let a := M.copy (| γ0_0 |) in
                                                            let b := M.copy (| γ0_1 |) in
                                                            let c := M.copy (| γ0_2 |) in
                                                            let _ :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path "alloc::string::String",
                                                                    "push",
                                                                    []
                                                                  |),
                                                                  [ s; M.read (| a |) ]
                                                                |)
                                                              |) in
                                                            let _ :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path "alloc::string::String",
                                                                    "push",
                                                                    []
                                                                  |),
                                                                  [ s; M.read (| b |) ]
                                                                |)
                                                              |) in
                                                            let _ :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path "alloc::string::String",
                                                                    "push",
                                                                    []
                                                                  |),
                                                                  [ s; M.read (| c |) ]
                                                                |)
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  M.return_ (| M.read (| s |) |)
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_to_lowercase : M.IsAssociatedFunction Self "to_lowercase" to_lowercase.
    
    (*
        pub fn to_uppercase(&self) -> String {
            let out = convert_while_ascii(self.as_bytes(), u8::to_ascii_uppercase);
    
            // Safety: we know this is a valid char boundary since
            // out.len() is only progressed if ascii bytes are found
            let rest = unsafe { self.get_unchecked(out.len()..) };
    
            // Safety: We have written only valid ASCII to our vec
            let mut s = unsafe { String::from_utf8_unchecked(out) };
    
            for c in rest.chars() {
                match conversions::to_upper(c) {
                    [a, '\0', _] => s.push(a),
                    [a, b, '\0'] => {
                        s.push(a);
                        s.push(b);
                    }
                    [a, b, c] => {
                        s.push(a);
                        s.push(b);
                        s.push(c);
                    }
                }
            }
            s
        }
    *)
    Definition to_uppercase (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let out :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (| "alloc::str::convert_while_ascii", [] |),
                  [
                    M.call_closure (|
                      M.get_associated_function (| Ty.path "str", "as_bytes", [] |),
                      [ M.read (| self |) ]
                    |);
                    (* ReifyFnPointer *)
                    M.pointer_coercion
                      (M.get_associated_function (| Ty.path "u8", "to_ascii_uppercase", [] |))
                  ]
                |)
              |) in
            let rest :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "str",
                    "get_unchecked",
                    [ Ty.apply (Ty.path "core::ops::range::RangeFrom") [ Ty.path "usize" ] ]
                  |),
                  [
                    M.read (| self |);
                    Value.StructRecord
                      "core::ops::range::RangeFrom"
                      [
                        ("start",
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                              "len",
                              []
                            |),
                            [ out ]
                          |))
                      ]
                  ]
                |)
              |) in
            let s :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "alloc::string::String",
                    "from_utf8_unchecked",
                    []
                  |),
                  [ M.read (| out |) ]
                |)
              |) in
            let _ :=
              M.use
                (M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.path "core::str::iter::Chars",
                        [],
                        "into_iter",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (| Ty.path "str", "chars", [] |),
                          [ M.read (| rest |) ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          ltac:(M.monadic
                            (let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.path "core::str::iter::Chars",
                                      [],
                                      "next",
                                      []
                                    |),
                                    [ iter ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let c := M.copy (| γ0_0 |) in
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_function (|
                                              "core::unicode::unicode_data::conversions::to_upper",
                                              []
                                            |),
                                            [ M.read (| c |) ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_slice_index (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                                              let γ0_2 := M.SubPointer.get_slice_index (| γ, 2 |) in
                                              let a := M.copy (| γ0_0 |) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ0_1 |),
                                                  Value.UnicodeChar 0
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "alloc::string::String",
                                                    "push",
                                                    []
                                                  |),
                                                  [ s; M.read (| a |) ]
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_slice_index (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                                              let γ0_2 := M.SubPointer.get_slice_index (| γ, 2 |) in
                                              let a := M.copy (| γ0_0 |) in
                                              let b := M.copy (| γ0_1 |) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ0_2 |),
                                                  Value.UnicodeChar 0
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "alloc::string::String",
                                                      "push",
                                                      []
                                                    |),
                                                    [ s; M.read (| a |) ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "alloc::string::String",
                                                      "push",
                                                      []
                                                    |),
                                                    [ s; M.read (| b |) ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_slice_index (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                                              let γ0_2 := M.SubPointer.get_slice_index (| γ, 2 |) in
                                              let a := M.copy (| γ0_0 |) in
                                              let b := M.copy (| γ0_1 |) in
                                              let c := M.copy (| γ0_2 |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "alloc::string::String",
                                                      "push",
                                                      []
                                                    |),
                                                    [ s; M.read (| a |) ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "alloc::string::String",
                                                      "push",
                                                      []
                                                    |),
                                                    [ s; M.read (| b |) ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "alloc::string::String",
                                                      "push",
                                                      []
                                                    |),
                                                    [ s; M.read (| c |) ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            s
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_to_uppercase : M.IsAssociatedFunction Self "to_uppercase" to_uppercase.
    
    (*
        pub fn into_string(self: Box<str>) -> String {
            let slice = Box::<[u8]>::from(self);
            unsafe { String::from_utf8_unchecked(slice.into_vec()) }
        }
    *)
    Definition into_string (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let slice :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.apply
                      (Ty.path "alloc::boxed::Box")
                      [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ]; Ty.path "alloc::alloc::Global"
                      ],
                    [
                      Ty.apply
                        (Ty.path "alloc::boxed::Box")
                        [ Ty.path "str"; Ty.path "alloc::alloc::Global" ]
                    ],
                    "from",
                    []
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "alloc::string::String",
                  "from_utf8_unchecked",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                      "into_vec",
                      [ Ty.path "alloc::alloc::Global" ]
                    |),
                    [ M.read (| slice |) ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_into_string : M.IsAssociatedFunction Self "into_string" into_string.
    
    (*
        pub fn repeat(&self, n: usize) -> String {
            unsafe { String::from_utf8_unchecked(self.as_bytes().repeat(n)) }
        }
    *)
    Definition repeat (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; n ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let n := M.alloc (| n |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "alloc::string::String",
              "from_utf8_unchecked",
              []
            |),
            [
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                  "repeat",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "str", "as_bytes", [] |),
                    [ M.read (| self |) ]
                  |);
                  M.read (| n |)
                ]
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_repeat : M.IsAssociatedFunction Self "repeat" repeat.
    
    (*
        pub fn to_ascii_uppercase(&self) -> String {
            let mut s = self.to_owned();
            s.make_ascii_uppercase();
            s
        }
    *)
    Definition to_ascii_uppercase (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let s :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "alloc::borrow::ToOwned",
                    Ty.path "str",
                    [],
                    "to_owned",
                    []
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (| Ty.path "str", "make_ascii_uppercase", [] |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::deref::DerefMut",
                        Ty.path "alloc::string::String",
                        [],
                        "deref_mut",
                        []
                      |),
                      [ s ]
                    |)
                  ]
                |)
              |) in
            s
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_to_ascii_uppercase :
      M.IsAssociatedFunction Self "to_ascii_uppercase" to_ascii_uppercase.
    
    (*
        pub fn to_ascii_lowercase(&self) -> String {
            let mut s = self.to_owned();
            s.make_ascii_lowercase();
            s
        }
    *)
    Definition to_ascii_lowercase (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let s :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "alloc::borrow::ToOwned",
                    Ty.path "str",
                    [],
                    "to_owned",
                    []
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (| Ty.path "str", "make_ascii_lowercase", [] |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::deref::DerefMut",
                        Ty.path "alloc::string::String",
                        [],
                        "deref_mut",
                        []
                      |),
                      [ s ]
                    |)
                  ]
                |)
              |) in
            s
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_to_ascii_lowercase :
      M.IsAssociatedFunction Self "to_ascii_lowercase" to_ascii_lowercase.
  End Impl_str.
  
  (*
  pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> {
      unsafe { Box::from_raw(Box::into_raw(v) as *mut str) }
  }
  *)
  Definition from_boxed_utf8_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ v ] =>
      ltac:(M.monadic
        (let v := M.alloc (| v |) in
        M.call_closure (|
          M.get_associated_function (|
            Ty.apply
              (Ty.path "alloc::boxed::Box")
              [ Ty.path "str"; Ty.path "alloc::alloc::Global" ],
            "from_raw",
            []
          |),
          [
            M.rust_cast
              (M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::boxed::Box")
                    [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ]; Ty.path "alloc::alloc::Global" ],
                  "into_raw",
                  []
                |),
                [ M.read (| v |) ]
              |))
          ]
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  fn convert_while_ascii(b: &[u8], convert: fn(&u8) -> u8) -> Vec<u8> {
      let mut out = Vec::with_capacity(b.len());
  
      const USIZE_SIZE: usize = mem::size_of::<usize>();
      const MAGIC_UNROLL: usize = 2;
      const N: usize = USIZE_SIZE * MAGIC_UNROLL;
      const NONASCII_MASK: usize = usize::from_ne_bytes([0x80; USIZE_SIZE]);
  
      let mut i = 0;
      unsafe {
          while i + N <= b.len() {
              // Safety: we have checks the sizes `b` and `out` to know that our
              let in_chunk = b.get_unchecked(i..i + N);
              let out_chunk = out.spare_capacity_mut().get_unchecked_mut(i..i + N);
  
              let mut bits = 0;
              for j in 0..MAGIC_UNROLL {
                  // read the bytes 1 usize at a time (unaligned since we haven't checked the alignment)
                  // safety: in_chunk is valid bytes in the range
                  bits |= in_chunk.as_ptr().cast::<usize>().add(j).read_unaligned();
              }
              // if our chunks aren't ascii, then return only the prior bytes as init
              if bits & NONASCII_MASK != 0 {
                  break;
              }
  
              // perform the case conversions on N bytes (gets heavily autovec'd)
              for j in 0..N {
                  // safety: in_chunk and out_chunk is valid bytes in the range
                  let out = out_chunk.get_unchecked_mut(j);
                  out.write(convert(in_chunk.get_unchecked(j)));
              }
  
              // mark these bytes as initialised
              i += N;
          }
          out.set_len(i);
      }
  
      out
  }
  *)
  Definition convert_while_ascii (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ b; convert ] =>
      ltac:(M.monadic
        (let b := M.alloc (| b |) in
        let convert := M.alloc (| convert |) in
        M.read (|
          let out :=
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                  "with_capacity",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                      "len",
                      []
                    |),
                    [ M.read (| b |) ]
                  |)
                ]
              |)
            |) in
          let i := M.alloc (| Value.Integer 0 |) in
          let _ :=
            let _ :=
              M.loop (|
                ltac:(M.monadic
                  (M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.Pure.le
                                  (BinOp.Panic.add (|
                                    Integer.Usize,
                                    M.read (| i |),
                                    M.read (|
                                      M.get_constant (| "alloc::str::convert_while_ascii::N" |)
                                    |)
                                  |))
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                                      "len",
                                      []
                                    |),
                                    [ M.read (| b |) ]
                                  |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let in_chunk :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                                  "get_unchecked",
                                  [ Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.read (| b |);
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", M.read (| i |));
                                      ("end_",
                                        BinOp.Panic.add (|
                                          Integer.Usize,
                                          M.read (| i |),
                                          M.read (|
                                            M.get_constant (|
                                              "alloc::str::convert_while_ascii::N"
                                            |)
                                          |)
                                        |))
                                    ]
                                ]
                              |)
                            |) in
                          let out_chunk :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    [
                                      Ty.apply
                                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                        [ Ty.path "u8" ]
                                    ],
                                  "get_unchecked_mut",
                                  [ Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                      "spare_capacity_mut",
                                      []
                                    |),
                                    [ out ]
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", M.read (| i |));
                                      ("end_",
                                        BinOp.Panic.add (|
                                          Integer.Usize,
                                          M.read (| i |),
                                          M.read (|
                                            M.get_constant (|
                                              "alloc::str::convert_while_ascii::N"
                                            |)
                                          |)
                                        |))
                                    ]
                                ]
                              |)
                            |) in
                          let bits := M.alloc (| Value.Integer 0 |) in
                          let _ :=
                            M.use
                              (M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::IntoIterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        [ Ty.path "usize" ],
                                      [],
                                      "into_iter",
                                      []
                                    |),
                                    [
                                      Value.StructRecord
                                        "core::ops::range::Range"
                                        [
                                          ("start", Value.Integer 0);
                                          ("end_",
                                            M.read (|
                                              M.get_constant (|
                                                "alloc::str::convert_while_ascii::MAGIC_UNROLL"
                                              |)
                                            |))
                                        ]
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let iter := M.copy (| γ |) in
                                      M.loop (|
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::Range")
                                                      [ Ty.path "usize" ],
                                                    [],
                                                    "next",
                                                    []
                                                  |),
                                                  [ iter ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.alloc (|
                                                      M.never_to_any (| M.read (| M.break (||) |) |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::option::Option::Some",
                                                        0
                                                      |) in
                                                    let j := M.copy (| γ0_0 |) in
                                                    let _ :=
                                                      let β := bits in
                                                      M.write (|
                                                        β,
                                                        BinOp.Pure.bit_or
                                                          (M.read (| β |))
                                                          (M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "*const")
                                                                [ Ty.path "usize" ],
                                                              "read_unaligned",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "*const")
                                                                    [ Ty.path "usize" ],
                                                                  "add",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "*const")
                                                                        [ Ty.path "u8" ],
                                                                      "cast",
                                                                      [ Ty.path "usize" ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            [ Ty.path "u8" ],
                                                                          "as_ptr",
                                                                          []
                                                                        |),
                                                                        [ M.read (| in_chunk |) ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.read (| j |)
                                                                ]
                                                              |)
                                                            ]
                                                          |))
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                      |)))
                                ]
                              |)) in
                          let _ :=
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          BinOp.Pure.ne
                                            (BinOp.Pure.bit_and
                                              (M.read (| bits |))
                                              (M.read (|
                                                M.get_constant (|
                                                  "alloc::str::convert_while_ascii::NONASCII_MASK"
                                                |)
                                              |)))
                                            (Value.Integer 0)
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          let _ :=
                            M.use
                              (M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::IntoIterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        [ Ty.path "usize" ],
                                      [],
                                      "into_iter",
                                      []
                                    |),
                                    [
                                      Value.StructRecord
                                        "core::ops::range::Range"
                                        [
                                          ("start", Value.Integer 0);
                                          ("end_",
                                            M.read (|
                                              M.get_constant (|
                                                "alloc::str::convert_while_ascii::N"
                                              |)
                                            |))
                                        ]
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let iter := M.copy (| γ |) in
                                      M.loop (|
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::Range")
                                                      [ Ty.path "usize" ],
                                                    [],
                                                    "next",
                                                    []
                                                  |),
                                                  [ iter ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.alloc (|
                                                      M.never_to_any (| M.read (| M.break (||) |) |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::option::Option::Some",
                                                        0
                                                      |) in
                                                    let j := M.copy (| γ0_0 |) in
                                                    let out :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::mem::maybe_uninit::MaybeUninit")
                                                                  [ Ty.path "u8" ]
                                                              ],
                                                            "get_unchecked_mut",
                                                            [ Ty.path "usize" ]
                                                          |),
                                                          [ M.read (| out_chunk |); M.read (| j |) ]
                                                        |)
                                                      |) in
                                                    let _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                              [ Ty.path "u8" ],
                                                            "write",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| out |);
                                                            M.call_closure (|
                                                              M.read (| convert |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      [ Ty.path "u8" ],
                                                                    "get_unchecked",
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.read (| in_chunk |);
                                                                    M.read (| j |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                      |)))
                                ]
                              |)) in
                          let _ :=
                            let β := i in
                            M.write (|
                              β,
                              BinOp.Panic.add (|
                                Integer.Usize,
                                M.read (| β |),
                                M.read (|
                                  M.get_constant (| "alloc::str::convert_while_ascii::N" |)
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let _ :=
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                M.alloc (| Value.Tuple [] |)
                              |)
                            |)
                          |)))
                    ]
                  |)))
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                    "set_len",
                    []
                  |),
                  [ out; M.read (| i |) ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |) in
          out
        |)))
    | _, _ => M.impossible
    end.
  
  Module convert_while_ascii.
    Definition value_USIZE_SIZE : Value.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (| M.get_function (| "core::mem::size_of", [ Ty.path "usize" ] |), [] |)
          |))).
    
    Definition value_MAGIC_UNROLL : Value.t :=
      M.run ltac:(M.monadic (M.alloc (| Value.Integer 2 |))).
    
    Definition value_N : Value.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            BinOp.Panic.mul (|
              Integer.Usize,
              M.read (| M.get_constant (| "alloc::str::convert_while_ascii::USIZE_SIZE" |) |),
              M.read (| M.get_constant (| "alloc::str::convert_while_ascii::MAGIC_UNROLL" |) |)
            |)
          |))).
    
    Definition value_NONASCII_MASK : Value.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              M.get_associated_function (| Ty.path "usize", "from_ne_bytes", [] |),
              [ repeat (Value.Integer 128) 8 ]
            |)
          |))).
  End convert_while_ascii.
End str.
