(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module bits.
  Module function.
    Module Impl_core_convert_From_where_core_borrow_Borrow_A_array_Usize_20_u8_where_core_borrow_Borrow_S_array_Usize_4_u8_Tuple_A_S__for_alloy_primitives_bits_function_Function.
      Definition Self (A S : Ty.t) : Ty.t := Ty.path "alloy_primitives::bits::function::Function".
      
      (*
          fn from((address, selector): (A, S)) -> Self {
              Self::from_address_and_selector(address, selector)
          }
      *)
      Definition from (A S : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self A S in
        match ε, τ, α with
        | [], [], [ β0 ] =>
          ltac:(M.monadic
            (let β0 := M.alloc (| β0 |) in
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "alloy_primitives::bits::function::Function" ],
              β0,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let address := M.copy (| γ0_0 |) in
                    let selector := M.copy (| γ0_1 |) in
                    M.call_closure (|
                      Ty.path "alloy_primitives::bits::function::Function",
                      M.get_associated_function (|
                        Ty.path "alloy_primitives::bits::function::Function",
                        "from_address_and_selector",
                        [],
                        [ A; S ]
                      |),
                      [ M.read (| address |); M.read (| selector |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (A S : Ty.t),
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.tuple [ A; S ] ]
          (Self A S)
          (* Instance *) [ ("from", InstanceField.Method (from A S)) ].
    End Impl_core_convert_From_where_core_borrow_Borrow_A_array_Usize_20_u8_where_core_borrow_Borrow_S_array_Usize_4_u8_Tuple_A_S__for_alloy_primitives_bits_function_Function.
    
    Module Impl_alloy_primitives_bits_function_Function.
      Definition Self : Ty.t := Ty.path "alloy_primitives::bits::function::Function".
      
      (*
          pub fn from_word(word: FixedBytes<32>) -> Self {
              Self(FixedBytes(word[..24].try_into().unwrap()))
          }
      *)
      Definition from_word (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ word ] =>
          ltac:(M.monadic
            (let word := M.alloc (| word |) in
            Value.StructTuple
              "alloy_primitives::bits::function::Function"
              []
              []
              [
                Value.StructTuple
                  "alloy_primitives::bits::fixed::FixedBytes"
                  [ Value.Integer IntegerKind.Usize 24 ]
                  []
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 24 ]
                        [ Ty.path "u8" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 24 ]
                              [ Ty.path "u8" ];
                            Ty.path "core::array::TryFromSliceError"
                          ],
                        "unwrap",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 24 ]
                                [ Ty.path "u8" ];
                              Ty.path "core::array::TryFromSliceError"
                            ],
                          M.get_trait_method (|
                            "core::convert::TryInto",
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            [],
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 24 ]
                                [ Ty.path "u8" ]
                            ],
                            "try_into",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                  M.get_trait_method (|
                                    "core::ops::index::Index",
                                    Ty.apply
                                      (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::RangeTo")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                    "index",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, word |);
                                    Value.StructRecord
                                      "core::ops::range::RangeTo"
                                      []
                                      [ Ty.path "usize" ]
                                      [ ("end_", Value.Integer IntegerKind.Usize 24) ]
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_word :
        M.IsAssociatedFunction.C Self "from_word" from_word.
      Admitted.
      Global Typeclasses Opaque from_word.
      
      (*
          pub fn into_word(&self) -> FixedBytes<32> {
              let mut word = [0; 32];
              word[..24].copy_from_slice(self.as_slice());
              FixedBytes(word)
          }
      *)
      Definition into_word (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ word :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ] :=
                M.alloc (|
                  repeat (| Value.Integer IntegerKind.U8 0, Value.Integer IntegerKind.Usize 32 |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                      "copy_from_slice",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            M.get_trait_method (|
                              "core::ops::index::IndexMut",
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ Ty.path "u8" ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeTo")
                                  []
                                  [ Ty.path "usize" ]
                              ],
                              "index_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, word |);
                              Value.StructRecord
                                "core::ops::range::RangeTo"
                                []
                                [ Ty.path "usize" ]
                                [ ("end_", Value.Integer IntegerKind.Usize 24) ]
                            ]
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                [ Value.Integer IntegerKind.Usize 24 ]
                                [],
                              "as_slice",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                          [ Value.Integer IntegerKind.Usize 24 ]
                                          []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.path "alloy_primitives::bits::function::Function",
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructTuple
                  "alloy_primitives::bits::fixed::FixedBytes"
                  [ Value.Integer IntegerKind.Usize 32 ]
                  []
                  [ M.read (| word |) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_into_word :
        M.IsAssociatedFunction.C Self "into_word" into_word.
      Admitted.
      Global Typeclasses Opaque into_word.
      
      (*
          pub fn from_address_and_selector<A, S>(address: A, selector: S) -> Self
          where
              A: Borrow<[u8; 20]>,
              S: Borrow<[u8; 4]>,
          {
              let mut bytes = [0; 24];
              bytes[..20].copy_from_slice(address.borrow());
              bytes[20..].copy_from_slice(selector.borrow());
              Self(FixedBytes(bytes))
          }
      *)
      Definition from_address_and_selector
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [ A; _ as S ], [ address; selector ] =>
          ltac:(M.monadic
            (let address := M.alloc (| address |) in
            let selector := M.alloc (| selector |) in
            M.read (|
              let~ bytes :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 24 ]
                        [ Ty.path "u8" ]
                    ] :=
                M.alloc (|
                  repeat (| Value.Integer IntegerKind.U8 0, Value.Integer IntegerKind.Usize 24 |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                      "copy_from_slice",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            M.get_trait_method (|
                              "core::ops::index::IndexMut",
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 24 ]
                                [ Ty.path "u8" ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeTo")
                                  []
                                  [ Ty.path "usize" ]
                              ],
                              "index_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, bytes |);
                              Value.StructRecord
                                "core::ops::range::RangeTo"
                                []
                                [ Ty.path "usize" ]
                                [ ("end_", Value.Integer IntegerKind.Usize 20) ]
                            ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion
                        (M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 20 ]
                                    [ Ty.path "u8" ]
                                ],
                              M.get_trait_method (|
                                "core::borrow::Borrow",
                                A,
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 20 ]
                                    [ Ty.path "u8" ]
                                ],
                                "borrow",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, address |) ]
                            |)
                          |)
                        |))
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                      "copy_from_slice",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            M.get_trait_method (|
                              "core::ops::index::IndexMut",
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 24 ]
                                [ Ty.path "u8" ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeFrom")
                                  []
                                  [ Ty.path "usize" ]
                              ],
                              "index_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, bytes |);
                              Value.StructRecord
                                "core::ops::range::RangeFrom"
                                []
                                [ Ty.path "usize" ]
                                [ ("start", Value.Integer IntegerKind.Usize 20) ]
                            ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion
                        (M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [ Ty.path "u8" ]
                                ],
                              M.get_trait_method (|
                                "core::borrow::Borrow",
                                S,
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [ Ty.path "u8" ]
                                ],
                                "borrow",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, selector |) ]
                            |)
                          |)
                        |))
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructTuple
                  "alloy_primitives::bits::function::Function"
                  []
                  []
                  [
                    Value.StructTuple
                      "alloy_primitives::bits::fixed::FixedBytes"
                      [ Value.Integer IntegerKind.Usize 24 ]
                      []
                      [ M.read (| bytes |) ]
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_address_and_selector :
        M.IsAssociatedFunction.C Self "from_address_and_selector" from_address_and_selector.
      Admitted.
      Global Typeclasses Opaque from_address_and_selector.
      
      (*
          pub fn as_address_and_selector(&self) -> (&Address, &Selector) {
              // SAFETY: Function (24) = Address (20) + Selector (4)
              unsafe { (&*self.as_ptr().cast(), &*self.as_ptr().add(20).cast()) }
          }
      *)
      Definition as_address_and_selector
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.Tuple
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "*const")
                            []
                            [ Ty.path "alloy_primitives::bits::address::Address" ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                            "cast",
                            [],
                            [ Ty.path "alloy_primitives::bits::address::Address" ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                "as_ptr",
                                [],
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 24 ]
                                              [ Ty.path "u8" ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                            [ Value.Integer IntegerKind.Usize 24 ]
                                            [],
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "alloy_primitives::bits::fixed::FixedBytes")
                                                      [ Value.Integer IntegerKind.Usize 24 ]
                                                      []
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.path
                                                    "alloy_primitives::bits::function::Function",
                                                  [],
                                                  [],
                                                  "deref",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| self |) |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "*const")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                []
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                            "cast",
                            [],
                            [
                              Ty.apply
                                (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                []
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                                "add",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    "as_ptr",
                                    [],
                                    []
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 24 ]
                                                  [ Ty.path "u8" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path
                                                  "alloy_primitives::bits::fixed::FixedBytes")
                                                [ Value.Integer IntegerKind.Usize 24 ]
                                                [],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloy_primitives::bits::fixed::FixedBytes")
                                                          [ Value.Integer IntegerKind.Usize 24 ]
                                                          []
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.path
                                                        "alloy_primitives::bits::function::Function",
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| self |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |))
                                  ]
                                |);
                                Value.Integer IntegerKind.Usize 20
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)
                  |)
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_as_address_and_selector :
        M.IsAssociatedFunction.C Self "as_address_and_selector" as_address_and_selector.
      Admitted.
      Global Typeclasses Opaque as_address_and_selector.
      
      (*
          pub fn to_address_and_selector(&self) -> (Address, Selector) {
              let (a, s) = self.as_address_and_selector();
              ( *a, *s)
          }
      *)
      Definition to_address_and_selector
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.tuple
                      [
                        Ty.path "alloy_primitives::bits::address::Address";
                        Ty.apply
                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          []
                      ]
                  ],
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "alloy_primitives::bits::address::Address" ];
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              []
                          ]
                      ],
                    M.get_associated_function (|
                      Ty.path "alloy_primitives::bits::function::Function",
                      "as_address_and_selector",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let a := M.copy (| γ0_0 |) in
                      let s := M.copy (| γ0_1 |) in
                      M.alloc (|
                        Value.Tuple
                          [
                            M.read (| M.deref (| M.read (| a |) |) |);
                            M.read (| M.deref (| M.read (| s |) |) |)
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_to_address_and_selector :
        M.IsAssociatedFunction.C Self "to_address_and_selector" to_address_and_selector.
      Admitted.
      Global Typeclasses Opaque to_address_and_selector.
    End Impl_alloy_primitives_bits_function_Function.
  End function.
End bits.
