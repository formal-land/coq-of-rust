(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module bytes_.
  (* StructTuple
    {
      name := "Bytes";
      const_params := [];
      ty_params := [];
      fields := [ Ty.path "bytes::bytes::Bytes" ];
    } *)
  
  Module Impl_core_clone_Clone_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "alloy_primitives::bytes_::Bytes"
            [
              M.call_closure (|
                Ty.path "bytes::bytes::Bytes",
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.path "bytes::bytes::Bytes",
                  [],
                  [],
                  "clone",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_tuple_field (|
                          M.deref (| M.read (| self |) |),
                          "alloy_primitives::bytes_::Bytes",
                          0
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_default_Default_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructTuple
            "alloy_primitives::bytes_::Bytes"
            [
              M.call_closure (|
                Ty.path "bytes::bytes::Bytes",
                M.get_trait_method (|
                  "core::default::Default",
                  Ty.path "bytes::bytes::Bytes",
                  [],
                  [],
                  "default",
                  [],
                  []
                |),
                []
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_marker_StructuralPartialEq_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_cmp_PartialEq_alloy_primitives_bytes__Bytes_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (|
              "core::cmp::PartialEq",
              Ty.path "bytes::bytes::Bytes",
              [],
              [ Ty.path "bytes::bytes::Bytes" ],
              "eq",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_tuple_field (|
                  M.deref (| M.read (| self |) |),
                  "alloy_primitives::bytes_::Bytes",
                  0
                |)
              |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_tuple_field (|
                  M.deref (| M.read (| other |) |),
                  "alloy_primitives::bytes_::Bytes",
                  0
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "alloy_primitives::bytes_::Bytes" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_alloy_primitives_bytes__Bytes_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_cmp_Eq_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_cmp_PartialOrd_alloy_primitives_bytes__Bytes_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (* PartialOrd *)
    Definition partial_cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "core::cmp::Ordering" ],
            M.get_trait_method (|
              "core::cmp::PartialOrd",
              Ty.path "bytes::bytes::Bytes",
              [],
              [ Ty.path "bytes::bytes::Bytes" ],
              "partial_cmp",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| self |) |),
                      "alloy_primitives::bytes_::Bytes",
                      0
                    |)
                  |)
                |)
              |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| other |) |),
                      "alloy_primitives::bytes_::Bytes",
                      0
                    |)
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "alloy_primitives::bytes_::Bytes" ]
        Self
        (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
  End Impl_core_cmp_PartialOrd_alloy_primitives_bytes__Bytes_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_cmp_Ord_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (* Ord *)
    Definition cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.path "core::cmp::Ordering",
            M.get_trait_method (|
              "core::cmp::Ord",
              Ty.path "bytes::bytes::Bytes",
              [],
              [],
              "cmp",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| self |) |),
                      "alloy_primitives::bytes_::Bytes",
                      0
                    |)
                  |)
                |)
              |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| other |) |),
                      "alloy_primitives::bytes_::Bytes",
                      0
                    |)
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Ord"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
  End Impl_core_cmp_Ord_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_hash_Hash_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (* Hash *)
    Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.call_closure (|
            Ty.tuple [],
            M.get_trait_method (|
              "core::hash::Hash",
              Ty.path "bytes::bytes::Bytes",
              [],
              [],
              "hash",
              [],
              [ __H ]
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| self |) |),
                      "alloy_primitives::bytes_::Bytes",
                      0
                    |)
                  |)
                |)
              |);
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_default_Default_for_ref__alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t :=
      Ty.apply (Ty.path "&") [] [ Ty.path "alloy_primitives::bytes_::Bytes" ].
    
    (*
        fn default() -> Self {
            static EMPTY: Bytes = Bytes::new();
            &EMPTY
        }
    *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.read (|
                    get_constant (|
                      "alloy_primitives::bytes_::default::EMPTY",
                      Ty.apply (Ty.path "&") [] [ Ty.path "alloy_primitives::bytes_::Bytes" ]
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_ref__alloy_primitives_bytes__Bytes.
  
  Module Impl_core_fmt_Debug_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            fmt::LowerHex::fmt(self, f)
        }
    *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_trait_method (|
              "core::fmt::LowerHex",
              Ty.path "alloy_primitives::bytes_::Bytes",
              [],
              [],
              "fmt",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_fmt_Display_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            fmt::LowerHex::fmt(self, f)
        }
    *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_trait_method (|
              "core::fmt::LowerHex",
              Ty.path "alloy_primitives::bytes_::Bytes",
              [],
              [],
              "fmt",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_fmt_LowerHex_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.pad(&hex::encode_prefixed(self.as_ref()))
        }
    *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "pad", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.path "alloc::string::String",
                      [],
                      [],
                      "deref",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "alloc::string::String",
                                M.get_function (|
                                  "const_hex::encode_prefixed",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                    M.get_trait_method (|
                                      "core::convert::AsRef",
                                      Ty.path "alloy_primitives::bytes_::Bytes",
                                      [],
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                      "as_ref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::LowerHex"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_LowerHex_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_fmt_UpperHex_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.pad(&hex::encode_upper_prefixed(self.as_ref()))
        }
    *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "pad", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.path "alloc::string::String",
                      [],
                      [],
                      "deref",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "alloc::string::String",
                                M.get_function (|
                                  "const_hex::encode_upper_prefixed",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                    M.get_trait_method (|
                                      "core::convert::AsRef",
                                      Ty.path "alloy_primitives::bytes_::Bytes",
                                      [],
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                      "as_ref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::UpperHex"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_UpperHex_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_ops_deref_Deref_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*     type Target = bytes::Bytes; *)
    Definition _Target : Ty.t := Ty.path "bytes::bytes::Bytes".
    
    (*
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    *)
    Definition deref (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_tuple_field (|
                  M.deref (| M.read (| self |) |),
                  "alloy_primitives::bytes_::Bytes",
                  0
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::deref::Deref"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("Target", InstanceField.Ty _Target); ("deref", InstanceField.Method deref) ].
  End Impl_core_ops_deref_Deref_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_ops_deref_DerefMut_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    *)
    Definition deref_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| self |) |),
                      "alloy_primitives::bytes_::Bytes",
                      0
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::deref::DerefMut"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("deref_mut", InstanceField.Method deref_mut) ].
  End Impl_core_ops_deref_DerefMut_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_convert_AsRef_slice_u8_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn as_ref(&self) -> &[u8] {
            self.0.as_ref()
        }
    *)
    Definition as_ref (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                M.get_trait_method (|
                  "core::convert::AsRef",
                  Ty.path "bytes::bytes::Bytes",
                  [],
                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                  "as_ref",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| self |) |),
                      "alloy_primitives::bytes_::Bytes",
                      0
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::AsRef"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
        Self
        (* Instance *) [ ("as_ref", InstanceField.Method as_ref) ].
  End Impl_core_convert_AsRef_slice_u8_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_borrow_Borrow_slice_u8_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn borrow(&self) -> &[u8] {
            self.as_ref()
        }
    *)
    Definition borrow (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                M.get_trait_method (|
                  "core::convert::AsRef",
                  Ty.path "alloy_primitives::bytes_::Bytes",
                  [],
                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                  "as_ref",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::borrow::Borrow"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
        Self
        (* Instance *) [ ("borrow", InstanceField.Method borrow) ].
  End Impl_core_borrow_Borrow_slice_u8_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_iter_traits_collect_FromIterator_u8_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
            Self(bytes::Bytes::from_iter(iter))
        }
    *)
    Definition from_iter (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ iter ] =>
        ltac:(M.monadic
          (let iter := M.alloc (| iter |) in
          Value.StructTuple
            "alloy_primitives::bytes_::Bytes"
            [
              M.call_closure (|
                Ty.path "bytes::bytes::Bytes",
                M.get_trait_method (|
                  "core::iter::traits::collect::FromIterator",
                  Ty.path "bytes::bytes::Bytes",
                  [],
                  [ Ty.path "u8" ],
                  "from_iter",
                  [],
                  [ T ]
                |),
                [ M.read (| iter |) ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::collect::FromIterator"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u8" ]
        Self
        (* Instance *) [ ("from_iter", InstanceField.Method from_iter) ].
  End Impl_core_iter_traits_collect_FromIterator_u8_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_iter_traits_collect_FromIterator_ref__u8_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn from_iter<T: IntoIterator<Item = &'a u8>>(iter: T) -> Self {
            Self(iter.into_iter().copied().collect::<bytes::Bytes>())
        }
    *)
    Definition from_iter (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ iter ] =>
        ltac:(M.monadic
          (let iter := M.alloc (| iter |) in
          Value.StructTuple
            "alloy_primitives::bytes_::Bytes"
            [
              M.call_closure (|
                Ty.path "bytes::bytes::Bytes",
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::copied::Copied")
                    []
                    [
                      Ty.associated_in_trait
                        "core::iter::traits::collect::IntoIterator"
                        []
                        []
                        T
                        "IntoIter"
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [ Ty.path "bytes::bytes::Bytes" ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::copied::Copied")
                      []
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::collect::IntoIterator"
                          []
                          []
                          T
                          "IntoIter"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.associated_in_trait
                        "core::iter::traits::collect::IntoIterator"
                        []
                        []
                        T
                        "IntoIter",
                      [],
                      [],
                      "copied",
                      [],
                      [ Ty.path "u8" ]
                    |),
                    [
                      M.call_closure (|
                        Ty.associated_in_trait
                          "core::iter::traits::collect::IntoIterator"
                          []
                          []
                          T
                          "IntoIter",
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          T,
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [ M.read (| iter |) ]
                      |)
                    ]
                  |)
                ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::collect::FromIterator"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ]
        Self
        (* Instance *) [ ("from_iter", InstanceField.Method from_iter) ].
  End Impl_core_iter_traits_collect_FromIterator_ref__u8_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_iter_traits_collect_IntoIterator_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*     type Item = u8; *)
    Definition _Item : Ty.t := Ty.path "u8".
    
    (*     type IntoIter = bytes::buf::IntoIter<bytes::Bytes>; *)
    Definition _IntoIter : Ty.t :=
      Ty.apply (Ty.path "bytes::buf::iter::IntoIter") [] [ Ty.path "bytes::bytes::Bytes" ].
    
    (*
        fn into_iter(self) -> Self::IntoIter {
            self.0.into_iter()
        }
    *)
    Definition into_iter (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "bytes::buf::iter::IntoIter") [] [ Ty.path "bytes::bytes::Bytes" ],
            M.get_trait_method (|
              "core::iter::traits::collect::IntoIterator",
              Ty.path "bytes::bytes::Bytes",
              [],
              [],
              "into_iter",
              [],
              []
            |),
            [
              M.read (|
                M.SubPointer.get_struct_tuple_field (| self, "alloy_primitives::bytes_::Bytes", 0 |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::collect::IntoIterator"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [
          ("Item", InstanceField.Ty _Item);
          ("IntoIter", InstanceField.Ty _IntoIter);
          ("into_iter", InstanceField.Method into_iter)
        ].
  End Impl_core_iter_traits_collect_IntoIterator_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_iter_traits_collect_IntoIterator_for_ref__alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t :=
      Ty.apply (Ty.path "&") [] [ Ty.path "alloy_primitives::bytes_::Bytes" ].
    
    (*     type Item = &'a u8; *)
    Definition _Item : Ty.t := Ty.apply (Ty.path "&") [] [ Ty.path "u8" ].
    
    (*     type IntoIter = core::slice::Iter<'a, u8>; *)
    Definition _IntoIter : Ty.t := Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ].
    
    (*
        fn into_iter(self) -> Self::IntoIter {
            self.iter()
        }
    *)
    Definition into_iter (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
            M.get_associated_function (|
              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
              "iter",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.path "bytes::bytes::Bytes",
                      [],
                      [],
                      "deref",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ Ty.path "bytes::bytes::Bytes" ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.path "alloy_primitives::bytes_::Bytes",
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::collect::IntoIterator"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [
          ("Item", InstanceField.Ty _Item);
          ("IntoIter", InstanceField.Ty _IntoIter);
          ("into_iter", InstanceField.Method into_iter)
        ].
  End Impl_core_iter_traits_collect_IntoIterator_for_ref__alloy_primitives_bytes__Bytes.
  
  Module Impl_core_convert_From_bytes_bytes_Bytes_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn from(value: bytes::Bytes) -> Self {
            Self(value)
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructTuple "alloy_primitives::bytes_::Bytes" [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "bytes::bytes::Bytes" ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_bytes_bytes_Bytes_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_convert_From_alloy_primitives_bytes__Bytes_for_bytes_bytes_Bytes.
    Definition Self : Ty.t := Ty.path "bytes::bytes::Bytes".
    
    (*
        fn from(value: Bytes) -> Self {
            value.0
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.read (|
            M.SubPointer.get_struct_tuple_field (| value, "alloy_primitives::bytes_::Bytes", 0 |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "alloy_primitives::bytes_::Bytes" ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_alloy_primitives_bytes__Bytes_for_bytes_bytes_Bytes.
  
  Module Impl_core_convert_From_alloc_vec_Vec_u8_alloc_alloc_Global_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn from(value: Vec<u8>) -> Self {
            Self(value.into())
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructTuple
            "alloy_primitives::bytes_::Bytes"
            [
              M.call_closure (|
                Ty.path "bytes::bytes::Bytes",
                M.get_trait_method (|
                  "core::convert::Into",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                  [],
                  [ Ty.path "bytes::bytes::Bytes" ],
                  "into",
                  [],
                  []
                |),
                [ M.read (| value |) ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ] ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_alloc_vec_Vec_u8_alloc_alloc_Global_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_convert_From_alloy_primitives_bits_fixed_FixedBytes_N_for_alloy_primitives_bytes__Bytes.
    Definition Self (N : Value.t) : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn from(value: FixedBytes<N>) -> Self {
            value.to_vec().into()
        }
    *)
    Definition from (N : Value.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self N in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.call_closure (|
            Ty.path "alloy_primitives::bytes_::Bytes",
            M.get_trait_method (|
              "core::convert::Into",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
              [],
              [ Ty.path "alloy_primitives::bytes_::Bytes" ],
              "into",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                  "to_vec",
                  [],
                  []
                |),
                [
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "array") [ N ] [ Ty.path "u8" ] ],
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply (Ty.path "alloy_primitives::bits::fixed::FixedBytes") [ N ] [],
                            [],
                            [],
                            "deref",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, value |) ]
                        |)
                      |)
                    |))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N : Value.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "alloy_primitives::bits::fixed::FixedBytes") [ N ] [] ]
        (Self N)
        (* Instance *) [ ("from", InstanceField.Method (from N)) ].
  End Impl_core_convert_From_alloy_primitives_bits_fixed_FixedBytes_N_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_convert_From_ref__alloy_primitives_bits_fixed_FixedBytes_N_for_alloy_primitives_bytes__Bytes.
    Definition Self (N : Value.t) : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn from(value: &'static FixedBytes<N>) -> Self {
            Self::from_static(value.as_slice())
        }
    *)
    Definition from (N : Value.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self N in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.call_closure (|
            Ty.path "alloy_primitives::bytes_::Bytes",
            M.get_associated_function (|
              Ty.path "alloy_primitives::bytes_::Bytes",
              "from_static",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloy_primitives::bits::fixed::FixedBytes") [ N ] [],
                      "as_slice",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |) ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N : Value.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "&")
            []
            [ Ty.apply (Ty.path "alloy_primitives::bits::fixed::FixedBytes") [ N ] [] ]
        ]
        (Self N)
        (* Instance *) [ ("from", InstanceField.Method (from N)) ].
  End Impl_core_convert_From_ref__alloy_primitives_bits_fixed_FixedBytes_N_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_convert_From_array_N_u8_for_alloy_primitives_bytes__Bytes.
    Definition Self (N : Value.t) : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn from(value: [u8; N]) -> Self {
            value.to_vec().into()
        }
    *)
    Definition from (N : Value.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self N in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.call_closure (|
            Ty.path "alloy_primitives::bytes_::Bytes",
            M.get_trait_method (|
              "core::convert::Into",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
              [],
              [ Ty.path "alloy_primitives::bytes_::Bytes" ],
              "into",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                  "to_vec",
                  [],
                  []
                |),
                [ (* Unsize *) M.pointer_coercion (M.borrow (| Pointer.Kind.Ref, value |)) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N : Value.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "array") [ N ] [ Ty.path "u8" ] ]
        (Self N)
        (* Instance *) [ ("from", InstanceField.Method (from N)) ].
  End Impl_core_convert_From_array_N_u8_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_convert_From_ref__array_N_u8_for_alloy_primitives_bytes__Bytes.
    Definition Self (N : Value.t) : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn from(value: &'static [u8; N]) -> Self {
            Self::from_static(value)
        }
    *)
    Definition from (N : Value.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self N in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.call_closure (|
            Ty.path "alloy_primitives::bytes_::Bytes",
            M.get_associated_function (|
              Ty.path "alloy_primitives::bytes_::Bytes",
              "from_static",
              [],
              []
            |),
            [
              (* Unsize *)
              M.pointer_coercion (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N : Value.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ N ] [ Ty.path "u8" ] ] ]
        (Self N)
        (* Instance *) [ ("from", InstanceField.Method (from N)) ].
  End Impl_core_convert_From_ref__array_N_u8_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_convert_From_ref__slice_u8_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn from(value: &'static [u8]) -> Self {
            Self::from_static(value)
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.call_closure (|
            Ty.path "alloy_primitives::bytes_::Bytes",
            M.get_associated_function (|
              Ty.path "alloy_primitives::bytes_::Bytes",
              "from_static",
              [],
              []
            |),
            [ M.read (| value |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_ref__slice_u8_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_convert_From_ref__str_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn from(value: &'static str) -> Self {
            Self::from_static(value.as_bytes())
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.call_closure (|
            Ty.path "alloy_primitives::bytes_::Bytes",
            M.get_associated_function (|
              Ty.path "alloy_primitives::bytes_::Bytes",
              "from_static",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |) ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_ref__str_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_convert_From_alloc_boxed_Box_slice_u8_alloc_alloc_Global_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn from(value: Box<[u8]>) -> Self {
            Self(value.into())
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructTuple
            "alloy_primitives::bytes_::Bytes"
            [
              M.call_closure (|
                Ty.path "bytes::bytes::Bytes",
                M.get_trait_method (|
                  "core::convert::Into",
                  Ty.apply
                    (Ty.path "alloc::boxed::Box")
                    []
                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ]; Ty.path "alloc::alloc::Global"
                    ],
                  [],
                  [ Ty.path "bytes::bytes::Bytes" ],
                  "into",
                  [],
                  []
                |),
                [ M.read (| value |) ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "alloc::boxed::Box")
            []
            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ]; Ty.path "alloc::alloc::Global" ]
        ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_alloc_boxed_Box_slice_u8_alloc_alloc_Global_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_convert_From_alloc_string_String_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn from(value: String) -> Self {
            Self(value.into())
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructTuple
            "alloy_primitives::bytes_::Bytes"
            [
              M.call_closure (|
                Ty.path "bytes::bytes::Bytes",
                M.get_trait_method (|
                  "core::convert::Into",
                  Ty.path "alloc::string::String",
                  [],
                  [ Ty.path "bytes::bytes::Bytes" ],
                  "into",
                  [],
                  []
                |),
                [ M.read (| value |) ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "alloc::string::String" ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_alloc_string_String_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_convert_From_alloy_primitives_bytes__Bytes_for_alloc_vec_Vec_u8_alloc_alloc_Global.
    Definition Self : Ty.t :=
      Ty.apply (Ty.path "alloc::vec::Vec") [] [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ].
    
    (*
        fn from(value: Bytes) -> Self {
            value.0.into()
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
            M.get_trait_method (|
              "core::convert::Into",
              Ty.path "bytes::bytes::Bytes",
              [],
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
              ],
              "into",
              [],
              []
            |),
            [
              M.read (|
                M.SubPointer.get_struct_tuple_field (|
                  value,
                  "alloy_primitives::bytes_::Bytes",
                  0
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "alloy_primitives::bytes_::Bytes" ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_alloy_primitives_bytes__Bytes_for_alloc_vec_Vec_u8_alloc_alloc_Global.
  
  Module Impl_core_cmp_PartialEq_slice_u8_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn eq(&self, other: &[u8]) -> bool {
            self[..] == *other
        }
    *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (|
              "core::cmp::PartialEq",
              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
              [],
              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
              "eq",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_trait_method (|
                      "core::ops::index::Index",
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                      [],
                      [ Ty.path "core::ops::range::RangeFull" ],
                      "index",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.path "bytes::bytes::Bytes",
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply (Ty.path "&") [] [ Ty.path "bytes::bytes::Bytes" ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.path "alloy_primitives::bytes_::Bytes",
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |)
                      |);
                      Value.StructTuple "core::ops::range::RangeFull" []
                    ]
                  |)
                |)
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_slice_u8_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_cmp_PartialEq_alloy_primitives_bytes__Bytes_for_slice_u8.
    Definition Self : Ty.t := Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ].
    
    (*
        fn eq(&self, other: &Bytes) -> bool {
            *self == other[..]
        }
    *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (|
              "core::cmp::PartialEq",
              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
              [],
              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
              "eq",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_trait_method (|
                      "core::ops::index::Index",
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                      [],
                      [ Ty.path "core::ops::range::RangeFull" ],
                      "index",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.path "bytes::bytes::Bytes",
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply (Ty.path "&") [] [ Ty.path "bytes::bytes::Bytes" ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.path "alloy_primitives::bytes_::Bytes",
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| other |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |)
                      |);
                      Value.StructTuple "core::ops::range::RangeFull" []
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "alloy_primitives::bytes_::Bytes" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_alloy_primitives_bytes__Bytes_for_slice_u8.
  
  Module Impl_core_cmp_PartialEq_alloc_vec_Vec_u8_alloc_alloc_Global_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn eq(&self, other: &Vec<u8>) -> bool {
            self[..] == other[..]
        }
    *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (|
              "core::cmp::PartialEq",
              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
              [],
              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
              "eq",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_trait_method (|
                      "core::ops::index::Index",
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                      [],
                      [ Ty.path "core::ops::range::RangeFull" ],
                      "index",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.path "bytes::bytes::Bytes",
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply (Ty.path "&") [] [ Ty.path "bytes::bytes::Bytes" ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.path "alloy_primitives::bytes_::Bytes",
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |)
                      |);
                      Value.StructTuple "core::ops::range::RangeFull" []
                    ]
                  |)
                |)
              |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_trait_method (|
                      "core::ops::index::Index",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                      [],
                      [ Ty.path "core::ops::range::RangeFull" ],
                      "index",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |);
                      Value.StructTuple "core::ops::range::RangeFull" []
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ] ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_alloc_vec_Vec_u8_alloc_alloc_Global_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_cmp_PartialEq_alloy_primitives_bytes__Bytes_for_alloc_vec_Vec_u8_alloc_alloc_Global.
    Definition Self : Ty.t :=
      Ty.apply (Ty.path "alloc::vec::Vec") [] [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ].
    
    (*
        fn eq(&self, other: &Bytes) -> bool {
            *other == *self
        }
    *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (|
              "core::cmp::PartialEq",
              Ty.path "alloy_primitives::bytes_::Bytes",
              [],
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
              ],
              "eq",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "alloy_primitives::bytes_::Bytes" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_alloy_primitives_bytes__Bytes_for_alloc_vec_Vec_u8_alloc_alloc_Global.
  
  Module Impl_core_cmp_PartialEq_bytes_bytes_Bytes_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn eq(&self, other: &bytes::Bytes) -> bool {
            other == self.as_ref()
        }
    *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (|
              "core::cmp::PartialEq",
              Ty.apply (Ty.path "&") [] [ Ty.path "bytes::bytes::Bytes" ],
              [],
              [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ],
              "eq",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, other |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_trait_method (|
                      "core::convert::AsRef",
                      Ty.path "alloy_primitives::bytes_::Bytes",
                      [],
                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                      "as_ref",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "bytes::bytes::Bytes" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_bytes_bytes_Bytes_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_core_str_traits_FromStr_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*     type Err = hex::FromHexError; *)
    Definition _Err : Ty.t := Ty.path "const_hex::error::FromHexError".
    
    (*
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            hex::decode(value).map(Into::into)
        }
    *)
    Definition from_str (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.path "alloy_primitives::bytes_::Bytes"; Ty.path "const_hex::error::FromHexError"
              ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                  Ty.path "const_hex::error::FromHexError"
                ],
              "map",
              [],
              [
                Ty.path "alloy_primitives::bytes_::Bytes";
                Ty.function
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                  ]
                  (Ty.path "alloy_primitives::bytes_::Bytes")
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                    Ty.path "const_hex::error::FromHexError"
                  ],
                M.get_function (|
                  "const_hex::decode",
                  [],
                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                |),
                [ M.read (| value |) ]
              |);
              M.get_trait_method (|
                "core::convert::Into",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                [],
                [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                "into",
                [],
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::str::traits::FromStr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("Err", InstanceField.Ty _Err); ("from_str", InstanceField.Method from_str) ].
  End Impl_core_str_traits_FromStr_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_const_hex_traits_FromHex_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*     type Error = hex::FromHexError; *)
    Definition _Error : Ty.t := Ty.path "const_hex::error::FromHexError".
    
    (*
        fn from_hex<T: AsRef<[u8]>>(hex: T) -> Result<Self, Self::Error> {
            hex::decode(hex).map(Self::from)
        }
    *)
    Definition from_hex (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ hex ] =>
        ltac:(M.monadic
          (let hex := M.alloc (| hex |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.path "alloy_primitives::bytes_::Bytes"; Ty.path "const_hex::error::FromHexError"
              ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                  Ty.path "const_hex::error::FromHexError"
                ],
              "map",
              [],
              [
                Ty.path "alloy_primitives::bytes_::Bytes";
                Ty.function
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                  ]
                  (Ty.path "alloy_primitives::bytes_::Bytes")
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                    Ty.path "const_hex::error::FromHexError"
                  ],
                M.get_function (| "const_hex::decode", [], [ T ] |),
                [ M.read (| hex |) ]
              |);
              M.get_trait_method (|
                "core::convert::From",
                Ty.path "alloy_primitives::bytes_::Bytes",
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                ],
                "from",
                [],
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "const_hex::traits::FromHex"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("Error", InstanceField.Ty _Error); ("from_hex", InstanceField.Method from_hex) ].
  End Impl_const_hex_traits_FromHex_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_bytes_buf_buf_impl_Buf_for_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        fn remaining(&self) -> usize {
            self.0.len()
        }
    *)
    Definition remaining (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_associated_function (| Ty.path "bytes::bytes::Bytes", "len", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_tuple_field (|
                  M.deref (| M.read (| self |) |),
                  "alloy_primitives::bytes_::Bytes",
                  0
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn chunk(&self) -> &[u8] {
            self.0.chunk()
        }
    *)
    Definition chunk (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                M.get_trait_method (|
                  "bytes::buf::buf_impl::Buf",
                  Ty.path "bytes::bytes::Bytes",
                  [],
                  [],
                  "chunk",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| self |) |),
                      "alloy_primitives::bytes_::Bytes",
                      0
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn advance(&mut self, cnt: usize) {
            self.0.advance(cnt)
        }
    *)
    Definition advance (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; cnt ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let cnt := M.alloc (| cnt |) in
          M.call_closure (|
            Ty.tuple [],
            M.get_trait_method (|
              "bytes::buf::buf_impl::Buf",
              Ty.path "bytes::bytes::Bytes",
              [],
              [],
              "advance",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.SubPointer.get_struct_tuple_field (|
                  M.deref (| M.read (| self |) |),
                  "alloy_primitives::bytes_::Bytes",
                  0
                |)
              |);
              M.read (| cnt |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn copy_to_bytes(&mut self, len: usize) -> bytes::Bytes {
            self.0.copy_to_bytes(len)
        }
    *)
    Definition copy_to_bytes (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; len ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let len := M.alloc (| len |) in
          M.call_closure (|
            Ty.path "bytes::bytes::Bytes",
            M.get_trait_method (|
              "bytes::buf::buf_impl::Buf",
              Ty.path "bytes::bytes::Bytes",
              [],
              [],
              "copy_to_bytes",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.SubPointer.get_struct_tuple_field (|
                  M.deref (| M.read (| self |) |),
                  "alloy_primitives::bytes_::Bytes",
                  0
                |)
              |);
              M.read (| len |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "bytes::buf::buf_impl::Buf"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [
          ("remaining", InstanceField.Method remaining);
          ("chunk", InstanceField.Method chunk);
          ("advance", InstanceField.Method advance);
          ("copy_to_bytes", InstanceField.Method copy_to_bytes)
        ].
  End Impl_bytes_buf_buf_impl_Buf_for_alloy_primitives_bytes__Bytes.
  
  Module Impl_alloy_primitives_bytes__Bytes.
    Definition Self : Ty.t := Ty.path "alloy_primitives::bytes_::Bytes".
    
    (*
        pub const fn new() -> Self {
            Self(bytes::Bytes::new())
        }
    *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructTuple
            "alloy_primitives::bytes_::Bytes"
            [
              M.call_closure (|
                Ty.path "bytes::bytes::Bytes",
                M.get_associated_function (| Ty.path "bytes::bytes::Bytes", "new", [], [] |),
                []
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub const fn from_static(bytes: &'static [u8]) -> Self {
            Self(bytes::Bytes::from_static(bytes))
        }
    *)
    Definition from_static (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ bytes ] =>
        ltac:(M.monadic
          (let bytes := M.alloc (| bytes |) in
          Value.StructTuple
            "alloy_primitives::bytes_::Bytes"
            [
              M.call_closure (|
                Ty.path "bytes::bytes::Bytes",
                M.get_associated_function (|
                  Ty.path "bytes::bytes::Bytes",
                  "from_static",
                  [],
                  []
                |),
                [ M.read (| bytes |) ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_from_static :
      M.IsAssociatedFunction.C Self "from_static" from_static.
    Admitted.
    Global Typeclasses Opaque from_static.
    
    (*
        pub fn copy_from_slice(data: &[u8]) -> Self {
            Self(bytes::Bytes::copy_from_slice(data))
        }
    *)
    Definition copy_from_slice (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ data ] =>
        ltac:(M.monadic
          (let data := M.alloc (| data |) in
          Value.StructTuple
            "alloy_primitives::bytes_::Bytes"
            [
              M.call_closure (|
                Ty.path "bytes::bytes::Bytes",
                M.get_associated_function (|
                  Ty.path "bytes::bytes::Bytes",
                  "copy_from_slice",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| data |) |) |) ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_copy_from_slice :
      M.IsAssociatedFunction.C Self "copy_from_slice" copy_from_slice.
    Admitted.
    Global Typeclasses Opaque copy_from_slice.
    
    (*
        pub fn slice(&self, range: impl RangeBounds<usize>) -> Self {
            Self(self.0.slice(range))
        }
    *)
    Definition slice (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ impl_RangeBounds_usize_ ], [ self; range ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let range := M.alloc (| range |) in
          Value.StructTuple
            "alloy_primitives::bytes_::Bytes"
            [
              M.call_closure (|
                Ty.path "bytes::bytes::Bytes",
                M.get_associated_function (|
                  Ty.path "bytes::bytes::Bytes",
                  "slice",
                  [],
                  [ impl_RangeBounds_usize_ ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| self |) |),
                      "alloy_primitives::bytes_::Bytes",
                      0
                    |)
                  |);
                  M.read (| range |)
                ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_slice : M.IsAssociatedFunction.C Self "slice" slice.
    Admitted.
    Global Typeclasses Opaque slice.
    
    (*
        pub fn slice_ref(&self, subset: &[u8]) -> Self {
            Self(self.0.slice_ref(subset))
        }
    *)
    Definition slice_ref (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; subset ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let subset := M.alloc (| subset |) in
          Value.StructTuple
            "alloy_primitives::bytes_::Bytes"
            [
              M.call_closure (|
                Ty.path "bytes::bytes::Bytes",
                M.get_associated_function (| Ty.path "bytes::bytes::Bytes", "slice_ref", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| self |) |),
                      "alloy_primitives::bytes_::Bytes",
                      0
                    |)
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| subset |) |) |)
                ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_slice_ref :
      M.IsAssociatedFunction.C Self "slice_ref" slice_ref.
    Admitted.
    Global Typeclasses Opaque slice_ref.
    
    (*
        pub fn split_off(&mut self, at: usize) -> Self {
            Self(self.0.split_off(at))
        }
    *)
    Definition split_off (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; at_ ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let at_ := M.alloc (| at_ |) in
          Value.StructTuple
            "alloy_primitives::bytes_::Bytes"
            [
              M.call_closure (|
                Ty.path "bytes::bytes::Bytes",
                M.get_associated_function (| Ty.path "bytes::bytes::Bytes", "split_off", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| self |) |),
                      "alloy_primitives::bytes_::Bytes",
                      0
                    |)
                  |);
                  M.read (| at_ |)
                ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split_off :
      M.IsAssociatedFunction.C Self "split_off" split_off.
    Admitted.
    Global Typeclasses Opaque split_off.
    
    (*
        pub fn split_to(&mut self, at: usize) -> Self {
            Self(self.0.split_to(at))
        }
    *)
    Definition split_to (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; at_ ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let at_ := M.alloc (| at_ |) in
          Value.StructTuple
            "alloy_primitives::bytes_::Bytes"
            [
              M.call_closure (|
                Ty.path "bytes::bytes::Bytes",
                M.get_associated_function (| Ty.path "bytes::bytes::Bytes", "split_to", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| self |) |),
                      "alloy_primitives::bytes_::Bytes",
                      0
                    |)
                  |);
                  M.read (| at_ |)
                ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split_to : M.IsAssociatedFunction.C Self "split_to" split_to.
    Admitted.
    Global Typeclasses Opaque split_to.
  End Impl_alloy_primitives_bytes__Bytes.
End bytes_.
