(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module log.
  (*
  pub fn logs_bloom<'a>(logs: impl IntoIterator<Item = &'a Log>) -> Bloom {
      let mut bloom = Bloom::ZERO;
      for log in logs {
          bloom.accrue_log(log);
      }
      bloom
  }
  *)
  Definition logs_bloom (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ impl_IntoIterator_Item____'a_Log_ ], [ logs ] =>
      ltac:(M.monadic
        (let logs := M.alloc (| logs |) in
        M.read (|
          let~ bloom :
              Ty.apply (Ty.path "*") [] [ Ty.path "alloy_primitives::bits::bloom::Bloom" ] :=
            M.copy (|
              get_associated_constant (|
                Ty.path "alloy_primitives::bits::bloom::Bloom",
                "ZERO",
                Ty.path "alloy_primitives::bits::bloom::Bloom"
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      impl_IntoIterator_Item____'a_Log_
                      "IntoIter",
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      impl_IntoIterator_Item____'a_Log_,
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| logs |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloy_primitives::log::Log")
                                            []
                                            [ Ty.path "alloy_primitives::log::LogData" ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.associated_in_trait
                                      "core::iter::traits::collect::IntoIterator"
                                      []
                                      []
                                      impl_IntoIterator_Item____'a_Log_
                                      "IntoIter",
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let log := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_associated_function (|
                                            Ty.path "alloy_primitives::bits::bloom::Bloom",
                                            "accrue_log",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (| Pointer.Kind.MutRef, bloom |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| log |) |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          bloom
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_logs_bloom :
    M.IsFunction.C "alloy_primitives::log::logs_bloom" logs_bloom.
  Admitted.
  Global Typeclasses Opaque logs_bloom.
  
  (* StructRecord
    {
      name := "LogData";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("topics",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.apply
                  (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                  [ Value.Integer IntegerKind.Usize 32 ]
                  [];
                Ty.path "alloc::alloc::Global"
              ]);
          ("data", Ty.path "alloy_primitives::bytes_::Bytes")
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_alloy_primitives_log_LogData.
    Definition Self : Ty.t := Ty.path "alloy_primitives::log::LogData".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "alloy_primitives::log::LogData"
            []
            []
            [
              ("topics",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "alloy_primitives::log::LogData",
                            "topics"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("data",
                M.call_closure (|
                  Ty.path "alloy_primitives::bytes_::Bytes",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "alloy_primitives::bytes_::Bytes",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "alloy_primitives::log::LogData",
                            "data"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_alloy_primitives_log_LogData.
  
  Module Impl_core_fmt_Debug_for_alloy_primitives_log_LogData.
    Definition Self : Ty.t := Ty.path "alloy_primitives::log::LogData".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "LogData" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "topics" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "alloy_primitives::log::LogData",
                        "topics"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "data" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "alloy_primitives::log::LogData",
                            "data"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_alloy_primitives_log_LogData.
  
  Module Impl_core_default_Default_for_alloy_primitives_log_LogData.
    Definition Self : Ty.t := Ty.path "alloy_primitives::log::LogData".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "alloy_primitives::log::LogData"
            []
            []
            [
              ("topics",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("data",
                M.call_closure (|
                  Ty.path "alloy_primitives::bytes_::Bytes",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "alloy_primitives::bytes_::Bytes",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_alloy_primitives_log_LogData.
  
  Module Impl_core_marker_StructuralPartialEq_for_alloy_primitives_log_LogData.
    Definition Self : Ty.t := Ty.path "alloy_primitives::log::LogData".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_alloy_primitives_log_LogData.
  
  Module Impl_core_cmp_PartialEq_alloy_primitives_log_LogData_for_alloy_primitives_log_LogData.
    Definition Self : Ty.t := Ty.path "alloy_primitives::log::LogData".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [];
                    Ty.path "alloc::alloc::Global"
                  ],
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [];
                      Ty.path "alloc::alloc::Global"
                    ]
                ],
                "eq",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::log::LogData",
                    "topics"
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| other |) |),
                    "alloy_primitives::log::LogData",
                    "topics"
                  |)
                |)
              ]
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.path "alloy_primitives::bytes_::Bytes",
                  [],
                  [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                  "eq",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "alloy_primitives::log::LogData",
                      "data"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "alloy_primitives::log::LogData",
                      "data"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "alloy_primitives::log::LogData" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_alloy_primitives_log_LogData_for_alloy_primitives_log_LogData.
  
  Module Impl_core_cmp_Eq_for_alloy_primitives_log_LogData.
    Definition Self : Ty.t := Ty.path "alloy_primitives::log::LogData".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_alloy_primitives_log_LogData.
  
  Module Impl_core_hash_Hash_for_alloy_primitives_log_LogData.
    Definition Self : Ty.t := Ty.path "alloy_primitives::log::LogData".
    
    (* Hash *)
    Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "hash",
                    [],
                    [ __H ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "alloy_primitives::log::LogData",
                            "topics"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::hash::Hash",
                  Ty.path "alloy_primitives::bytes_::Bytes",
                  [],
                  [],
                  "hash",
                  [],
                  [ __H ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "alloy_primitives::log::LogData",
                          "data"
                        |)
                      |)
                    |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_alloy_primitives_log_LogData.
  
  Module Impl_alloy_primitives_log_LogData.
    Definition Self : Ty.t := Ty.path "alloy_primitives::log::LogData".
    
    (*
        pub const fn new_unchecked(topics: Vec<B256>, data: Bytes) -> Self {
            Self { topics, data }
        }
    *)
    Definition new_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ topics; data ] =>
        ltac:(M.monadic
          (let topics := M.alloc (| topics |) in
          let data := M.alloc (| data |) in
          Value.StructRecord
            "alloy_primitives::log::LogData"
            []
            []
            [ ("topics", M.read (| topics |)); ("data", M.read (| data |)) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_unchecked :
      M.IsAssociatedFunction.C Self "new_unchecked" new_unchecked.
    Admitted.
    Global Typeclasses Opaque new_unchecked.
    
    (*
        pub fn new(topics: Vec<B256>, data: Bytes) -> Option<Self> {
            let this = Self::new_unchecked(topics, data);
            this.is_valid().then_some(this)
        }
    *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ topics; data ] =>
        ltac:(M.monadic
          (let topics := M.alloc (| topics |) in
          let data := M.alloc (| data |) in
          M.read (|
            let~ this : Ty.apply (Ty.path "*") [] [ Ty.path "alloy_primitives::log::LogData" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "alloy_primitives::log::LogData",
                  M.get_associated_function (|
                    Ty.path "alloy_primitives::log::LogData",
                    "new_unchecked",
                    [],
                    []
                  |),
                  [ M.read (| topics |); M.read (| data |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.path "alloy_primitives::log::LogData" ],
                M.get_associated_function (|
                  Ty.path "bool",
                  "then_some",
                  [],
                  [ Ty.path "alloy_primitives::log::LogData" ]
                |),
                [
                  M.call_closure (|
                    Ty.path "bool",
                    M.get_associated_function (|
                      Ty.path "alloy_primitives::log::LogData",
                      "is_valid",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, this |) ]
                  |);
                  M.read (| this |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub const fn empty() -> Self {
            Self { topics: Vec::new(), data: Bytes::new() }
        }
    *)
    Definition empty (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "alloy_primitives::log::LogData"
            []
            []
            [
              ("topics",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    [],
                    []
                  |),
                  []
                |));
              ("data",
                M.call_closure (|
                  Ty.path "alloy_primitives::bytes_::Bytes",
                  M.get_associated_function (|
                    Ty.path "alloy_primitives::bytes_::Bytes",
                    "new",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_empty : M.IsAssociatedFunction.C Self "empty" empty.
    Admitted.
    Global Typeclasses Opaque empty.
    
    (*
        pub fn is_valid(&self) -> bool {
            self.topics.len() <= 4
        }
    *)
    Definition is_valid (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "bool",
            BinOp.le,
            [
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [];
                      Ty.path "alloc::alloc::Global"
                    ],
                  "len",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "alloy_primitives::log::LogData",
                      "topics"
                    |)
                  |)
                ]
              |);
              Value.Integer IntegerKind.Usize 4
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_is_valid : M.IsAssociatedFunction.C Self "is_valid" is_valid.
    Admitted.
    Global Typeclasses Opaque is_valid.
    
    (*
        pub fn topics(&self) -> &[B256] {
            &self.topics
        }
    *)
    Definition topics (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          []
                      ]
                  ],
                M.get_trait_method (|
                  "core::ops::deref::Deref",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [];
                      Ty.path "alloc::alloc::Global"
                    ],
                  [],
                  [],
                  "deref",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "alloy_primitives::log::LogData",
                          "topics"
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_topics : M.IsAssociatedFunction.C Self "topics" topics.
    Admitted.
    Global Typeclasses Opaque topics.
    
    (*
        pub fn topics_mut(&mut self) -> &mut [B256] {
            &mut self.topics
        }
    *)
    Definition topics_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              []
                          ]
                      ],
                    M.get_trait_method (|
                      "core::ops::deref::DerefMut",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "deref_mut",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "alloy_primitives::log::LogData",
                              "topics"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_topics_mut :
      M.IsAssociatedFunction.C Self "topics_mut" topics_mut.
    Admitted.
    Global Typeclasses Opaque topics_mut.
    
    (*
        pub fn topics_mut_unchecked(&mut self) -> &mut Vec<B256> {
            &mut self.topics
        }
    *)
    Definition topics_mut_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "alloy_primitives::log::LogData",
                      "topics"
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_topics_mut_unchecked :
      M.IsAssociatedFunction.C Self "topics_mut_unchecked" topics_mut_unchecked.
    Admitted.
    Global Typeclasses Opaque topics_mut_unchecked.
    
    (*
        pub fn set_topics_unchecked(&mut self, topics: Vec<B256>) {
            self.topics = topics;
        }
    *)
    Definition set_topics_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; topics ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let topics := M.alloc (| topics |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::log::LogData",
                    "topics"
                  |),
                  M.read (| topics |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_set_topics_unchecked :
      M.IsAssociatedFunction.C Self "set_topics_unchecked" set_topics_unchecked.
    Admitted.
    Global Typeclasses Opaque set_topics_unchecked.
    
    (*
        pub fn set_topics_truncating(&mut self, mut topics: Vec<B256>) {
            topics.truncate(4);
            self.set_topics_unchecked(topics);
        }
    *)
    Definition set_topics_truncating (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; topics ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let topics := M.alloc (| topics |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "truncate",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, topics |); Value.Integer IntegerKind.Usize 4 ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "alloy_primitives::log::LogData",
                    "set_topics_unchecked",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.read (| topics |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_set_topics_truncating :
      M.IsAssociatedFunction.C Self "set_topics_truncating" set_topics_truncating.
    Admitted.
    Global Typeclasses Opaque set_topics_truncating.
    
    (*
        pub fn split(self) -> (Vec<B256>, Bytes) {
            (self.topics, self.data)
        }
    *)
    Definition split (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple
            [
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  self,
                  "alloy_primitives::log::LogData",
                  "topics"
                |)
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  self,
                  "alloy_primitives::log::LogData",
                  "data"
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split : M.IsAssociatedFunction.C Self "split" split.
    Admitted.
    Global Typeclasses Opaque split.
  End Impl_alloy_primitives_log_LogData.
  
  (* Trait *)
  (* Empty module 'IntoLogData' *)
  
  Module Impl_alloy_primitives_log_IntoLogData_for_alloy_primitives_log_LogData.
    Definition Self : Ty.t := Ty.path "alloy_primitives::log::LogData".
    
    (*
        fn to_log_data(&self) -> LogData {
            self.clone()
        }
    *)
    Definition to_log_data (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "alloy_primitives::log::LogData",
            M.get_trait_method (|
              "core::clone::Clone",
              Ty.path "alloy_primitives::log::LogData",
              [],
              [],
              "clone",
              [],
              []
            |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn into_log_data(self) -> LogData {
            self
        }
    *)
    Definition into_log_data (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| self |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "alloy_primitives::log::IntoLogData"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [
          ("to_log_data", InstanceField.Method to_log_data);
          ("into_log_data", InstanceField.Method into_log_data)
        ].
  End Impl_alloy_primitives_log_IntoLogData_for_alloy_primitives_log_LogData.
  
  (* StructRecord
    {
      name := "Log";
      const_params := [];
      ty_params := [ "T" ];
      fields := [ ("address", Ty.path "alloy_primitives::bits::address::Address"); ("data", T) ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_alloy_primitives_log_Log_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ].
    
    (* Clone *)
    Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "alloy_primitives::log::Log"
            []
            [ T ]
            [
              ("address",
                M.call_closure (|
                  Ty.path "alloy_primitives::bits::address::Address",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "alloy_primitives::bits::address::Address",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "alloy_primitives::log::Log",
                            "address"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("data",
                M.call_closure (|
                  T,
                  M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "alloy_primitives::log::Log",
                            "data"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_T_for_alloy_primitives_log_Log_T.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_alloy_primitives_log_Log_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ].
    
    (* Debug *)
    Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Log" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "address" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "alloy_primitives::log::Log",
                        "address"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "data" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "alloy_primitives::log::Log",
                            "data"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_alloy_primitives_log_Log_T.
  
  Module Impl_core_default_Default_where_core_default_Default_T_for_alloy_primitives_log_Log_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ].
    
    (* Default *)
    Definition default (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "alloy_primitives::log::Log"
            []
            [ T ]
            [
              ("address",
                M.call_closure (|
                  Ty.path "alloy_primitives::bits::address::Address",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "alloy_primitives::bits::address::Address",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("data",
                M.call_closure (|
                  T,
                  M.get_trait_method (| "core::default::Default", T, [], [], "default", [], [] |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("default", InstanceField.Method (default T)) ].
  End Impl_core_default_Default_where_core_default_Default_T_for_alloy_primitives_log_Log_T.
  
  Module Impl_core_marker_StructuralPartialEq_for_alloy_primitives_log_Log_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ].
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_alloy_primitives_log_Log_T.
  
  Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_T_alloy_primitives_log_Log_T_for_alloy_primitives_log_Log_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ].
    
    (* PartialEq *)
    Definition eq (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.path "alloy_primitives::bits::address::Address",
                [],
                [ Ty.path "alloy_primitives::bits::address::Address" ],
                "eq",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::log::Log",
                    "address"
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| other |) |),
                    "alloy_primitives::log::Log",
                    "address"
                  |)
                |)
              ]
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (| "core::cmp::PartialEq", T, [], [ T ], "eq", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "alloy_primitives::log::Log",
                      "data"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "alloy_primitives::log::Log",
                      "data"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ] ]
        (Self T)
        (* Instance *) [ ("eq", InstanceField.Method (eq T)) ].
  End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_T_alloy_primitives_log_Log_T_for_alloy_primitives_log_Log_T.
  
  Module Impl_core_cmp_Eq_where_core_cmp_Eq_T_for_alloy_primitives_log_Log_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ].
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq T)) ].
  End Impl_core_cmp_Eq_where_core_cmp_Eq_T_for_alloy_primitives_log_Log_T.
  
  Module Impl_core_hash_Hash_where_core_hash_Hash_T_for_alloy_primitives_log_Log_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ].
    
    (* Hash *)
    Definition hash (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.path "alloy_primitives::bits::address::Address",
                    [],
                    [],
                    "hash",
                    [],
                    [ __H ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "alloy_primitives::log::Log",
                            "address"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (| "core::hash::Hash", T, [], [], "hash", [], [ __H ] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "alloy_primitives::log::Log",
                          "data"
                        |)
                      |)
                    |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::hash::Hash"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("hash", InstanceField.Method (hash T)) ].
  End Impl_core_hash_Hash_where_core_hash_Hash_T_for_alloy_primitives_log_Log_T.
  
  Module Impl_core_ops_deref_Deref_for_alloy_primitives_log_Log_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ].
    
    (*     type Target = T; *)
    Definition _Target (T : Ty.t) : Ty.t := T.
    
    (*
        fn deref(&self) -> &Self::Target {
            &self.data
        }
    *)
    Definition deref (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "alloy_primitives::log::Log",
                  "data"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::deref::Deref"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *)
        [ ("Target", InstanceField.Ty (_Target T)); ("deref", InstanceField.Method (deref T)) ].
  End Impl_core_ops_deref_Deref_for_alloy_primitives_log_Log_T.
  
  Module Impl_core_ops_deref_DerefMut_for_alloy_primitives_log_Log_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ].
    
    (*
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.data
        }
    *)
    Definition deref_mut (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "alloy_primitives::log::Log",
                      "data"
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::deref::DerefMut"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("deref_mut", InstanceField.Method (deref_mut T)) ].
  End Impl_core_ops_deref_DerefMut_for_alloy_primitives_log_Log_T.
  
  Module Impl_alloy_primitives_log_Log_alloy_primitives_log_LogData.
    Definition Self : Ty.t :=
      Ty.apply
        (Ty.path "alloy_primitives::log::Log")
        []
        [ Ty.path "alloy_primitives::log::LogData" ].
    
    (*
        pub fn new(address: Address, topics: Vec<B256>, data: Bytes) -> Option<Self> {
            LogData::new(topics, data).map(|data| Self { address, data })
        }
    *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ address; topics; data ] =>
        ltac:(M.monadic
          (let address := M.alloc (| address |) in
          let topics := M.alloc (| topics |) in
          let data := M.alloc (| data |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [
                Ty.apply
                  (Ty.path "alloy_primitives::log::Log")
                  []
                  [ Ty.path "alloy_primitives::log::LogData" ]
              ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.path "alloy_primitives::log::LogData" ],
              "map",
              [],
              [
                Ty.apply
                  (Ty.path "alloy_primitives::log::Log")
                  []
                  [ Ty.path "alloy_primitives::log::LogData" ];
                Ty.function
                  [ Ty.tuple [ Ty.path "alloy_primitives::log::LogData" ] ]
                  (Ty.apply
                    (Ty.path "alloy_primitives::log::Log")
                    []
                    [ Ty.path "alloy_primitives::log::LogData" ])
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.path "alloy_primitives::log::LogData" ],
                M.get_associated_function (|
                  Ty.path "alloy_primitives::log::LogData",
                  "new",
                  [],
                  []
                |),
                [ M.read (| topics |); M.read (| data |) ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [ Ty.tuple [ Ty.path "alloy_primitives::log::LogData" ] ]
                                (Ty.apply
                                  (Ty.path "alloy_primitives::log::Log")
                                  []
                                  [ Ty.path "alloy_primitives::log::LogData" ])
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let data := M.copy (| γ |) in
                                Value.StructRecord
                                  "alloy_primitives::log::Log"
                                  []
                                  [ Ty.path "alloy_primitives::log::LogData" ]
                                  [ ("address", M.read (| address |)); ("data", M.read (| data |))
                                  ]))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub const fn new_unchecked(address: Address, topics: Vec<B256>, data: Bytes) -> Self {
            Self { address, data: LogData::new_unchecked(topics, data) }
        }
    *)
    Definition new_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ address; topics; data ] =>
        ltac:(M.monadic
          (let address := M.alloc (| address |) in
          let topics := M.alloc (| topics |) in
          let data := M.alloc (| data |) in
          Value.StructRecord
            "alloy_primitives::log::Log"
            []
            [ Ty.path "alloy_primitives::log::LogData" ]
            [
              ("address", M.read (| address |));
              ("data",
                M.call_closure (|
                  Ty.path "alloy_primitives::log::LogData",
                  M.get_associated_function (|
                    Ty.path "alloy_primitives::log::LogData",
                    "new_unchecked",
                    [],
                    []
                  |),
                  [ M.read (| topics |); M.read (| data |) ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_unchecked :
      M.IsAssociatedFunction.C Self "new_unchecked" new_unchecked.
    Admitted.
    Global Typeclasses Opaque new_unchecked.
    
    (*
        pub const fn empty() -> Self {
            Self { address: Address::ZERO, data: LogData::empty() }
        }
    *)
    Definition empty (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "alloy_primitives::log::Log"
            []
            [ Ty.path "alloy_primitives::log::LogData" ]
            [
              ("address",
                M.read (|
                  get_associated_constant (|
                    Ty.path "alloy_primitives::bits::address::Address",
                    "ZERO",
                    Ty.path "alloy_primitives::bits::address::Address"
                  |)
                |));
              ("data",
                M.call_closure (|
                  Ty.path "alloy_primitives::log::LogData",
                  M.get_associated_function (|
                    Ty.path "alloy_primitives::log::LogData",
                    "empty",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_empty : M.IsAssociatedFunction.C Self "empty" empty.
    Admitted.
    Global Typeclasses Opaque empty.
  End Impl_alloy_primitives_log_Log_alloy_primitives_log_LogData.
  
  Module Impl_alloy_primitives_log_Log_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ].
    
    (*
        pub const fn new_from_event_unchecked(address: Address, data: T) -> Self {
            Self { address, data }
        }
    *)
    Definition new_from_event_unchecked
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ address; data ] =>
        ltac:(M.monadic
          (let address := M.alloc (| address |) in
          let data := M.alloc (| data |) in
          Value.StructRecord
            "alloy_primitives::log::Log"
            []
            [ T ]
            [ ("address", M.read (| address |)); ("data", M.read (| data |)) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_from_event_unchecked :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "new_from_event_unchecked" (new_from_event_unchecked T).
    Admitted.
    Global Typeclasses Opaque new_from_event_unchecked.
    
    (*
        pub fn new_from_event(address: Address, data: T) -> Option<Self> {
            let this = Self::new_from_event_unchecked(address, data);
            (&this.data).into().is_valid().then_some(this)
        }
    *)
    Definition new_from_event
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ address; data ] =>
        ltac:(M.monadic
          (let address := M.alloc (| address |) in
          let data := M.alloc (| data |) in
          M.read (|
            let~ this :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ],
                    "new_from_event_unchecked",
                    [],
                    []
                  |),
                  [ M.read (| address |); M.read (| data |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ] ],
                M.get_associated_function (|
                  Ty.path "bool",
                  "then_some",
                  [],
                  [ Ty.apply (Ty.path "alloy_primitives::log::Log") [] [ T ] ]
                |),
                [
                  M.call_closure (|
                    Ty.path "bool",
                    M.get_associated_function (|
                      Ty.path "alloy_primitives::log::LogData",
                      "is_valid",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "alloy_primitives::log::LogData",
                            M.get_trait_method (|
                              "core::convert::Into",
                              Ty.apply (Ty.path "&") [] [ T ],
                              [],
                              [ Ty.path "alloy_primitives::log::LogData" ],
                              "into",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      this,
                                      "alloy_primitives::log::Log",
                                      "data"
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.read (| this |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_from_event :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "new_from_event" (new_from_event T).
    Admitted.
    Global Typeclasses Opaque new_from_event.
    
    (*
        pub fn reserialize(&self) -> Log<LogData> {
            Log { address: self.address, data: (&self.data).into() }
        }
    *)
    Definition reserialize (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "alloy_primitives::log::Log"
            []
            [ Ty.path "alloy_primitives::log::LogData" ]
            [
              ("address",
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::log::Log",
                    "address"
                  |)
                |));
              ("data",
                M.call_closure (|
                  Ty.path "alloy_primitives::log::LogData",
                  M.get_trait_method (|
                    "core::convert::Into",
                    Ty.apply (Ty.path "&") [] [ T ],
                    [],
                    [ Ty.path "alloy_primitives::log::LogData" ],
                    "into",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "alloy_primitives::log::Log",
                            "data"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_reserialize :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "reserialize" (reserialize T).
    Admitted.
    Global Typeclasses Opaque reserialize.
  End Impl_alloy_primitives_log_Log_T.
End log.
