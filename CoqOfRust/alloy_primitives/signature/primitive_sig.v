(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module signature.
  Module primitive_sig.
    Definition value_SECP256K1N_ORDER (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          M.call_closure (|
            Ty.apply
              (Ty.path "ruint::Uint")
              [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
              [],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "ruint::Uint")
                [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                [],
              "from_limbs",
              [],
              []
            |),
            [
              Value.Array
                [
                  Value.Integer IntegerKind.U64 13822214165235122497;
                  Value.Integer IntegerKind.U64 13451932020343611451;
                  Value.Integer IntegerKind.U64 18446744073709551614;
                  Value.Integer IntegerKind.U64 18446744073709551615
                ]
            ]
          |)
        |))).
    
    Global Instance Instance_IsConstant_value_SECP256K1N_ORDER :
      M.IsFunction.C
        "alloy_primitives::signature::primitive_sig::SECP256K1N_ORDER"
        value_SECP256K1N_ORDER.
    Admitted.
    Global Typeclasses Opaque value_SECP256K1N_ORDER.
    
    (* StructRecord
      {
        name := "PrimitiveSignature";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("y_parity", Ty.path "bool");
            ("r",
              Ty.apply
                (Ty.path "ruint::Uint")
                [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                []);
            ("s",
              Ty.apply
                (Ty.path "ruint::Uint")
                [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                [])
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
      Definition Self : Ty.t :=
        Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature" ],
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.apply
                          (Ty.path "*")
                          []
                          [ Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature"
                          ],
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
    
    Module Impl_core_marker_Copy_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
      Definition Self : Ty.t :=
        Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
    
    Module Impl_core_fmt_Debug_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
      Definition Self : Ty.t :=
        Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field3_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "PrimitiveSignature" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "y_parity" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                          "y_parity"
                        |)
                      |)
                    |)
                  |));
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "r" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                          "r"
                        |)
                      |)
                    |)
                  |));
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "s" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                              "s"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
    
    Module Impl_core_hash_Hash_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
      Definition Self : Ty.t :=
        Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature".
      
      (* Hash *)
      Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::hash::Hash",
                      Ty.path "bool",
                      [],
                      [],
                      "hash",
                      [],
                      [ __H ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                              "y_parity"
                            |)
                          |)
                        |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::hash::Hash",
                      Ty.apply
                        (Ty.path "ruint::Uint")
                        [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                        [],
                      [],
                      [],
                      "hash",
                      [],
                      [ __H ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                              "r"
                            |)
                          |)
                        |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                    ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      [],
                    [],
                    [],
                    "hash",
                    [],
                    [ __H ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                            "s"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
    
    Module Impl_core_marker_StructuralPartialEq_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
      Definition Self : Ty.t :=
        Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
    
    Module Impl_core_cmp_PartialEq_alloy_primitives_signature_primitive_sig_PrimitiveSignature_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
      Definition Self : Ty.t :=
        Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              LogicalOp.and (|
                M.call_closure (|
                  Ty.path "bool",
                  BinOp.eq,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                        "y_parity"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                        "y_parity"
                      |)
                    |)
                  ]
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.apply
                        (Ty.path "ruint::Uint")
                        [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                        [],
                      [],
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          []
                      ],
                      "eq",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                          "r"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| other |) |),
                          "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                          "r"
                        |)
                      |)
                    ]
                  |)))
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      [],
                    [],
                    [
                      Ty.apply
                        (Ty.path "ruint::Uint")
                        [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                        []
                    ],
                    "eq",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                        "s"
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                        "s"
                      |)
                    |)
                  ]
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_alloy_primitives_signature_primitive_sig_PrimitiveSignature_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
    
    Module Impl_core_cmp_Eq_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
      Definition Self : Ty.t :=
        Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
    
    Module Impl_core_convert_TryFrom_ref__slice_u8_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
      Definition Self : Ty.t :=
        Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature".
      
      (*     type Error = SignatureError; *)
      Definition _Error : Ty.t := Ty.path "alloy_primitives::signature::error::SignatureError".
      
      (*
          fn try_from(bytes: &'a [u8]) -> Result<Self, Self::Error> {
              if bytes.len() != 65 {
                  return Err(SignatureError::FromBytes("expected exactly 65 bytes"));
              }
              let parity =
                  normalize_v(bytes[64] as u64).ok_or(SignatureError::InvalidParity(bytes[64] as u64))?;
              Ok(Self::from_bytes_and_parity(&bytes[..64], parity))
          }
      *)
      Definition try_from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ bytes ] =>
          ltac:(M.monadic
            (let bytes := M.alloc (| bytes |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature";
                  Ty.associated_in_trait
                    "core::convert::TryFrom"
                    []
                    [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ]
                    (Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature")
                    "Error"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ne,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| bytes |) |)
                                          |)
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 65
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.StructTuple
                                      "core::result::Result::Err"
                                      []
                                      [
                                        Ty.path
                                          "alloy_primitives::signature::primitive_sig::PrimitiveSignature";
                                        Ty.path "alloy_primitives::signature::error::SignatureError"
                                      ]
                                      [
                                        Value.StructTuple
                                          "alloy_primitives::signature::error::SignatureError::FromBytes"
                                          []
                                          []
                                          [ mk_str (| "expected exactly 65 bytes" |) ]
                                      ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ parity : Ty.apply (Ty.path "*") [] [ Ty.path "bool" ] :=
                    M.copy (|
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.path "bool" ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.path "alloy_primitives::signature::error::SignatureError"
                                  ];
                                Ty.path "bool"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "bool";
                                  Ty.path "alloy_primitives::signature::error::SignatureError"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "bool";
                                    Ty.path "alloy_primitives::signature::error::SignatureError"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "bool" ],
                                  "ok_or",
                                  [],
                                  [ Ty.path "alloy_primitives::signature::error::SignatureError" ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "bool" ],
                                    M.get_function (|
                                      "alloy_primitives::signature::utils::normalize_v",
                                      [],
                                      []
                                    |),
                                    [
                                      M.cast
                                        (Ty.path "u64")
                                        (M.read (|
                                          M.SubPointer.get_array_field (|
                                            M.deref (| M.read (| bytes |) |),
                                            Value.Integer IntegerKind.Usize 64
                                          |)
                                        |))
                                    ]
                                  |);
                                  Value.StructTuple
                                    "alloy_primitives::signature::error::SignatureError::InvalidParity"
                                    []
                                    []
                                    [
                                      M.cast
                                        (Ty.path "u64")
                                        (M.read (|
                                          M.SubPointer.get_array_field (|
                                            M.deref (| M.read (| bytes |) |),
                                            Value.Integer IntegerKind.Usize 64
                                          |)
                                        |))
                                    ]
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path
                                              "alloy_primitives::signature::primitive_sig::PrimitiveSignature";
                                            Ty.path
                                              "alloy_primitives::signature::error::SignatureError"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path
                                                "alloy_primitives::signature::primitive_sig::PrimitiveSignature";
                                              Ty.path
                                                "alloy_primitives::signature::error::SignatureError"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path
                                                  "alloy_primitives::signature::error::SignatureError"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature";
                        Ty.path "alloy_primitives::signature::error::SignatureError"
                      ]
                      [
                        M.call_closure (|
                          Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                          M.get_associated_function (|
                            Ty.path
                              "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                            "from_bytes_and_parity",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                      M.get_trait_method (|
                                        "core::ops::index::Index",
                                        Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeTo")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                        "index",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| bytes |) |)
                                        |);
                                        Value.StructRecord
                                          "core::ops::range::RangeTo"
                                          []
                                          [ Ty.path "usize" ]
                                          [ ("end_", Value.Integer IntegerKind.Usize 64) ]
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |);
                            M.read (| parity |)
                          ]
                        |)
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ]
          Self
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_ref__slice_u8_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
    
    Module Impl_core_str_traits_FromStr_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
      Definition Self : Ty.t :=
        Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature".
      
      (*     type Err = SignatureError; *)
      Definition _Err : Ty.t := Ty.path "alloy_primitives::signature::error::SignatureError".
      
      (*
          fn from_str(s: &str) -> Result<Self, Self::Err> {
              let bytes = hex::decode(s)?;
              Self::try_from(&bytes[..])
          }
      *)
      Definition from_str (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ s ] =>
          ltac:(M.monadic
            (let s := M.alloc (| s |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature";
                  Ty.associated_in_trait
                    "core::str::traits::FromStr"
                    []
                    []
                    (Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature")
                    "Err"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ bytes :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                        ] :=
                    M.copy (|
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                          ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.path "const_hex::error::FromHexError"
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "const_hex::error::FromHexError"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "const_hex::error::FromHexError"
                                  ],
                                M.get_function (|
                                  "const_hex::decode",
                                  [],
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                |),
                                [ M.read (| s |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path
                                              "alloy_primitives::signature::primitive_sig::PrimitiveSignature";
                                            Ty.path
                                              "alloy_primitives::signature::error::SignatureError"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path
                                                "alloy_primitives::signature::primitive_sig::PrimitiveSignature";
                                              Ty.path
                                                "alloy_primitives::signature::error::SignatureError"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "const_hex::error::FromHexError"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature";
                          Ty.path "alloy_primitives::signature::error::SignatureError"
                        ],
                      M.get_trait_method (|
                        "core::convert::TryFrom",
                        Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                        [],
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                        ],
                        "try_from",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              M.get_trait_method (|
                                "core::ops::index::Index",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                [],
                                [ Ty.path "core::ops::range::RangeFull" ],
                                "index",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, bytes |);
                                Value.StructTuple "core::ops::range::RangeFull" [] [] []
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::str::traits::FromStr"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("Err", InstanceField.Ty _Err); ("from_str", InstanceField.Method from_str) ].
    End Impl_core_str_traits_FromStr_for_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
    
    Module Impl_core_convert_From_ref__alloy_primitives_signature_primitive_sig_PrimitiveSignature_for_array_Usize_65_u8.
      Definition Self : Ty.t :=
        Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 65 ] [ Ty.path "u8" ].
      
      (*
          fn from(value: &PrimitiveSignature) -> [u8; 65] {
              value.as_bytes()
          }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 65 ] [ Ty.path "u8" ],
              M.get_associated_function (|
                Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                "as_bytes",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "&")
              []
              [ Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature" ]
          ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_ref__alloy_primitives_signature_primitive_sig_PrimitiveSignature_for_array_Usize_65_u8.
    
    Module Impl_core_convert_From_alloy_primitives_signature_primitive_sig_PrimitiveSignature_for_array_Usize_65_u8.
      Definition Self : Ty.t :=
        Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 65 ] [ Ty.path "u8" ].
      
      (*
          fn from(value: PrimitiveSignature) -> [u8; 65] {
              value.as_bytes()
          }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 65 ] [ Ty.path "u8" ],
              M.get_associated_function (|
                Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                "as_bytes",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, value |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_alloy_primitives_signature_primitive_sig_PrimitiveSignature_for_array_Usize_65_u8.
    
    Module Impl_core_convert_From_ref__alloy_primitives_signature_primitive_sig_PrimitiveSignature_for_alloc_vec_Vec_u8_alloc_alloc_Global.
      Definition Self : Ty.t :=
        Ty.apply (Ty.path "alloc::vec::Vec") [] [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ].
      
      (*
          fn from(value: &PrimitiveSignature) -> Self {
              value.as_bytes().to_vec()
          }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
              M.get_associated_function (|
                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                "to_vec",
                [],
                []
              |),
              [
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 65 ]
                          [ Ty.path "u8" ],
                        M.get_associated_function (|
                          Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                          "as_bytes",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |) ]
                      |)
                    |)
                  |))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "&")
              []
              [ Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature" ]
          ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_ref__alloy_primitives_signature_primitive_sig_PrimitiveSignature_for_alloc_vec_Vec_u8_alloc_alloc_Global.
    
    Module Impl_core_convert_From_alloy_primitives_signature_primitive_sig_PrimitiveSignature_for_alloc_vec_Vec_u8_alloc_alloc_Global.
      Definition Self : Ty.t :=
        Ty.apply (Ty.path "alloc::vec::Vec") [] [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ].
      
      (*
          fn from(value: PrimitiveSignature) -> Self {
              value.as_bytes().to_vec()
          }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
              M.get_associated_function (|
                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                "to_vec",
                [],
                []
              |),
              [
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 65 ]
                          [ Ty.path "u8" ],
                        M.get_associated_function (|
                          Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                          "as_bytes",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, value |) ]
                      |)
                    |)
                  |))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_alloy_primitives_signature_primitive_sig_PrimitiveSignature_for_alloc_vec_Vec_u8_alloc_alloc_Global.
    
    Module Impl_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
      Definition Self : Ty.t :=
        Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature".
      
      (*
          pub fn test_signature() -> Self {
              Self::from_scalars_and_parity(
                  b256!("840cfc572845f5786e702984c2a582528cad4b49b2a10b9db1be7fca90058565"),
                  b256!("25e7109ceb98168d95b09b18bbf6b685130e0562f233877d492b94eee0c5b6d1"),
                  false,
              )
          }
      *)
      Definition test_signature (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
              M.get_associated_function (|
                Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                "from_scalars_and_parity",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                    [ Value.Integer IntegerKind.Usize 32 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      get_constant (|
                        "alloy_primitives::signature::primitive_sig::test_signature::RES",
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [ Ty.path "u8" ]
                      |)
                    |)
                  ]
                |);
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                    [ Value.Integer IntegerKind.Usize 32 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      get_constant (|
                        "alloy_primitives::signature::primitive_sig::test_signature::RES'1",
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [ Ty.path "u8" ]
                      |)
                    |)
                  ]
                |);
                Value.Bool false
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_test_signature :
        M.IsAssociatedFunction.C Self "test_signature" test_signature.
      Admitted.
      Global Typeclasses Opaque test_signature.
      
      (*
          pub fn new(r: U256, s: U256, v: bool) -> Self {
              Self { r, s, y_parity: v }
          }
      *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ r; s; v ] =>
          ltac:(M.monadic
            (let r := M.alloc (| r |) in
            let s := M.alloc (| s |) in
            let v := M.alloc (| v |) in
            Value.StructRecord
              "alloy_primitives::signature::primitive_sig::PrimitiveSignature"
              []
              []
              [ ("r", M.read (| r |)); ("s", M.read (| s |)); ("y_parity", M.read (| v |)) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn from_scalars_and_parity(r: crate::B256, s: crate::B256, parity: bool) -> Self {
              Self::new(U256::from_be_slice(r.as_ref()), U256::from_be_slice(s.as_ref()), parity)
          }
      *)
      Definition from_scalars_and_parity
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ r; s; parity ] =>
          ltac:(M.monadic
            (let r := M.alloc (| r |) in
            let s := M.alloc (| s |) in
            let parity := M.alloc (| parity |) in
            M.call_closure (|
              Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
              M.get_associated_function (|
                Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                "new",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      [],
                    "from_be_slice",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                          M.get_trait_method (|
                            "core::convert::AsRef",
                            Ty.apply
                              (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [],
                            [],
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            "as_ref",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, r |) ]
                        |)
                      |)
                    |)
                  ]
                |);
                M.call_closure (|
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      [],
                    "from_be_slice",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                          M.get_trait_method (|
                            "core::convert::AsRef",
                            Ty.apply
                              (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [],
                            [],
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            "as_ref",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, s |) ]
                        |)
                      |)
                    |)
                  ]
                |);
                M.read (| parity |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_scalars_and_parity :
        M.IsAssociatedFunction.C Self "from_scalars_and_parity" from_scalars_and_parity.
      Admitted.
      Global Typeclasses Opaque from_scalars_and_parity.
      
      (*
          pub fn normalize_s(&self) -> Option<Self> {
              let s = self.s();
      
              if s > SECP256K1N_ORDER >> 1 {
                  Some(Self { y_parity: !self.y_parity, r: self.r, s: SECP256K1N_ORDER - s })
              } else {
                  None
              }
          }
      *)
      Definition normalize_s (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ s :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "ruint::Uint")
                        [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                        []
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      [],
                    M.get_associated_function (|
                      Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                      "s",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature" ]
                  ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_trait_method (|
                                "core::cmp::PartialOrd",
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ],
                                "gt",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, s |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [],
                                      M.get_trait_method (|
                                        "core::ops::bit::Shr",
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [],
                                        [],
                                        [ Ty.path "i32" ],
                                        "shr",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "alloy_primitives::signature::primitive_sig::SECP256K1N_ORDER",
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              []
                                          |)
                                        |);
                                        Value.Integer IntegerKind.I32 1
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          []
                          [ Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature"
                          ]
                          [
                            Value.StructRecord
                              "alloy_primitives::signature::primitive_sig::PrimitiveSignature"
                              []
                              []
                              [
                                ("y_parity",
                                  UnOp.not (|
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                                        "y_parity"
                                      |)
                                    |)
                                  |));
                                ("r",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                                      "r"
                                    |)
                                  |));
                                ("s",
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    M.get_trait_method (|
                                      "core::ops::arith::Sub",
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      ],
                                      "sub",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (|
                                        get_constant (|
                                          "alloy_primitives::signature::primitive_sig::SECP256K1N_ORDER",
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            []
                                        |)
                                      |);
                                      M.read (| s |)
                                    ]
                                  |))
                              ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::option::Option::None"
                          []
                          [ Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature"
                          ]
                          []
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_normalize_s :
        M.IsAssociatedFunction.C Self "normalize_s" normalize_s.
      Admitted.
      Global Typeclasses Opaque normalize_s.
      
      (*
          pub fn from_bytes_and_parity(bytes: &[u8], parity: bool) -> Self {
              let r = U256::from_be_slice(&bytes[..32]);
              let s = U256::from_be_slice(&bytes[32..64]);
              Self::new(r, s, parity)
          }
      *)
      Definition from_bytes_and_parity (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ bytes; parity ] =>
          ltac:(M.monadic
            (let bytes := M.alloc (| bytes |) in
            let parity := M.alloc (| parity |) in
            M.read (|
              let~ r :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "ruint::Uint")
                        [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                        []
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "ruint::Uint")
                        [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                        [],
                      "from_be_slice",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_trait_method (|
                                  "core::ops::index::Index",
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ],
                                  "index",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| bytes |) |) |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    []
                                    [ Ty.path "usize" ]
                                    [ ("end_", Value.Integer IntegerKind.Usize 32) ]
                                ]
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ s :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "ruint::Uint")
                        [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                        []
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "ruint::Uint")
                        [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                        [],
                      "from_be_slice",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_trait_method (|
                                  "core::ops::index::Index",
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ]
                                  ],
                                  "index",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| bytes |) |) |);
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    []
                                    [ Ty.path "usize" ]
                                    [
                                      ("start", Value.Integer IntegerKind.Usize 32);
                                      ("end_", Value.Integer IntegerKind.Usize 64)
                                    ]
                                ]
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                  M.get_associated_function (|
                    Ty.path "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                    "new",
                    [],
                    []
                  |),
                  [ M.read (| r |); M.read (| s |); M.read (| parity |) ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_bytes_and_parity :
        M.IsAssociatedFunction.C Self "from_bytes_and_parity" from_bytes_and_parity.
      Admitted.
      Global Typeclasses Opaque from_bytes_and_parity.
      
      (*
          pub const fn r(&self) -> U256 {
              self.r
          }
      *)
      Definition r (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                "r"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_r : M.IsAssociatedFunction.C Self "r" r.
      Admitted.
      Global Typeclasses Opaque r.
      
      (*
          pub const fn s(&self) -> U256 {
              self.s
          }
      *)
      Definition s (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                "s"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_s : M.IsAssociatedFunction.C Self "s" s.
      Admitted.
      Global Typeclasses Opaque s.
      
      (*
          pub const fn v(&self) -> bool {
              self.y_parity
          }
      *)
      Definition v (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                "y_parity"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_v : M.IsAssociatedFunction.C Self "v" v.
      Admitted.
      Global Typeclasses Opaque v.
      
      (*
          pub fn as_bytes(&self) -> [u8; 65] {
              let mut sig = [0u8; 65];
              sig[..32].copy_from_slice(&self.r.to_be_bytes::<32>());
              sig[32..64].copy_from_slice(&self.s.to_be_bytes::<32>());
              sig[64] = 27 + self.y_parity as u8;
              sig
          }
      *)
      Definition as_bytes (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ sig :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 65 ]
                        [ Ty.path "u8" ]
                    ] :=
                M.alloc (|
                  repeat (| Value.Integer IntegerKind.U8 0, Value.Integer IntegerKind.Usize 65 |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                      "copy_from_slice",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            M.get_trait_method (|
                              "core::ops::index::IndexMut",
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 65 ]
                                [ Ty.path "u8" ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeTo")
                                  []
                                  [ Ty.path "usize" ]
                              ],
                              "index_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, sig |);
                              Value.StructRecord
                                "core::ops::range::RangeTo"
                                []
                                [ Ty.path "usize" ]
                                [ ("end_", Value.Integer IntegerKind.Usize 32) ]
                            ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion
                        (M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ Ty.path "u8" ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    "to_be_bytes",
                                    [ Value.Integer IntegerKind.Usize 32 ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                                        "r"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |))
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                      "copy_from_slice",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            M.get_trait_method (|
                              "core::ops::index::IndexMut",
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 65 ]
                                [ Ty.path "u8" ],
                              [],
                              [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ]
                              ],
                              "index_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, sig |);
                              Value.StructRecord
                                "core::ops::range::Range"
                                []
                                [ Ty.path "usize" ]
                                [
                                  ("start", Value.Integer IntegerKind.Usize 32);
                                  ("end_", Value.Integer IntegerKind.Usize 64)
                                ]
                            ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion
                        (M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ Ty.path "u8" ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    "to_be_bytes",
                                    [ Value.Integer IntegerKind.Usize 32 ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                                        "s"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |))
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.write (|
                    M.SubPointer.get_array_field (| sig, Value.Integer IntegerKind.Usize 64 |),
                    M.call_closure (|
                      Ty.path "u8",
                      BinOp.Wrap.add,
                      [
                        Value.Integer IntegerKind.U8 27;
                        M.cast
                          (Ty.path "u8")
                          (M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                              "y_parity"
                            |)
                          |))
                      ]
                    |)
                  |)
                |) in
              sig
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_as_bytes :
        M.IsAssociatedFunction.C Self "as_bytes" as_bytes.
      Admitted.
      Global Typeclasses Opaque as_bytes.
      
      (*
          pub const fn with_parity(self, v: bool) -> Self {
              Self { y_parity: v, r: self.r, s: self.s }
          }
      *)
      Definition with_parity (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; v ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let v := M.alloc (| v |) in
            Value.StructRecord
              "alloy_primitives::signature::primitive_sig::PrimitiveSignature"
              []
              []
              [
                ("y_parity", M.read (| v |));
                ("r",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                      "r"
                    |)
                  |));
                ("s",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "alloy_primitives::signature::primitive_sig::PrimitiveSignature",
                      "s"
                    |)
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_with_parity :
        M.IsAssociatedFunction.C Self "with_parity" with_parity.
      Admitted.
      Global Typeclasses Opaque with_parity.
    End Impl_alloy_primitives_signature_primitive_sig_PrimitiveSignature.
  End primitive_sig.
End signature.
