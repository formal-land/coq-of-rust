(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module signed.
  Module int.
    (* StructTuple
      {
        name := "Signed";
        const_params := [ "BITS"; "LIMBS" ];
        ty_params := [];
        fields := [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ];
      } *)
    
    Module Impl_core_clone_Clone_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
      Definition Self (BITS LIMBS : Value.t) : Ty.t :=
        Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [].
      
      (* Clone *)
      Definition clone
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BITS LIMBS : Value.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BITS LIMBS)
          (* Instance *) [ ("clone", InstanceField.Method (clone BITS LIMBS)) ].
    End Impl_core_clone_Clone_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
    
    Module Impl_core_marker_Copy_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
      Definition Self (BITS LIMBS : Value.t) : Ty.t :=
        Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [].
      
      Axiom Implements :
        forall (BITS LIMBS : Value.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BITS LIMBS)
          (* Instance *) [].
    End Impl_core_marker_Copy_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
    
    Module Impl_core_default_Default_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
      Definition Self (BITS LIMBS : Value.t) : Ty.t :=
        Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [].
      
      (* Default *)
      Definition default
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.StructTuple
              "alloy_primitives::signed::int::Signed"
              [
                M.call_closure (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BITS LIMBS : Value.t),
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BITS LIMBS)
          (* Instance *) [ ("default", InstanceField.Method (default BITS LIMBS)) ].
    End Impl_core_default_Default_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
    
    Module Impl_core_marker_StructuralPartialEq_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
      Definition Self (BITS LIMBS : Value.t) : Ty.t :=
        Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [].
      
      Axiom Implements :
        forall (BITS LIMBS : Value.t),
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BITS LIMBS)
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
    
    Module Impl_core_cmp_PartialEq_alloy_primitives_signed_int_Signed_BITS_LIMBS_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
      Definition Self (BITS LIMBS : Value.t) : Ty.t :=
        Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [].
      
      (* PartialEq *)
      Definition eq
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                [],
                [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                "eq",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| other |) |),
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BITS LIMBS : Value.t),
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [] ]
          (Self BITS LIMBS)
          (* Instance *) [ ("eq", InstanceField.Method (eq BITS LIMBS)) ].
    End Impl_core_cmp_PartialEq_alloy_primitives_signed_int_Signed_BITS_LIMBS_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
    
    Module Impl_core_cmp_Eq_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
      Definition Self (BITS LIMBS : Value.t) : Ty.t :=
        Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [].
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BITS LIMBS : Value.t),
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BITS LIMBS)
          (* Instance *)
          [
            ("assert_receiver_is_total_eq",
              InstanceField.Method (assert_receiver_is_total_eq BITS LIMBS))
          ].
    End Impl_core_cmp_Eq_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
    
    Module Impl_core_hash_Hash_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
      Definition Self (BITS LIMBS : Value.t) : Ty.t :=
        Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [].
      
      (* Hash *)
      Definition hash
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.call_closure (|
              Ty.tuple [],
              M.get_trait_method (|
                "core::hash::Hash",
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                [],
                [],
                "hash",
                [],
                [ __H ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_tuple_field (|
                        M.deref (| M.read (| self |) |),
                        "alloy_primitives::signed::int::Signed",
                        0
                      |)
                    |)
                  |)
                |);
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BITS LIMBS : Value.t),
        M.IsTraitInstance
          "core::hash::Hash"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BITS LIMBS)
          (* Instance *) [ ("hash", InstanceField.Method (hash BITS LIMBS)) ].
    End Impl_core_hash_Hash_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
    
    Module Impl_core_fmt_Debug_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
      Definition Self (BITS LIMBS : Value.t) : Ty.t :=
        Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [].
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              fmt::Display::fmt(self, f)
          }
      *)
      Definition fmt
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_trait_method (|
                "core::fmt::Display",
                Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
                [],
                [],
                "fmt",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BITS LIMBS : Value.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BITS LIMBS)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt BITS LIMBS)) ].
    End Impl_core_fmt_Debug_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
    
    Module Impl_core_fmt_Display_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
      Definition Self (BITS LIMBS : Value.t) : Ty.t :=
        Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [].
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              let (sign, abs) = self.into_sign_and_abs();
              sign.fmt(f)?;
              if f.sign_plus() {
                  write!(f, "{abs}")
              } else {
                  abs.fmt(f)
              }
          }
      *)
      Definition fmt
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  M.match_operator (|
                    None,
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple
                          [
                            Ty.path "alloy_primitives::signed::sign::Sign";
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloy_primitives::signed::int::Signed")
                            [ BITS; LIMBS ]
                            [],
                          "into_sign_and_abs",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let sign := M.copy (| γ0_0 |) in
                          let abs := M.copy (| γ0_1 |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "core::fmt::Error"
                                        ];
                                      Ty.tuple []
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                    [],
                                    [],
                                    "branch",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      M.get_trait_method (|
                                        "core::fmt::Display",
                                        Ty.path "alloy_primitives::signed::sign::Sign",
                                        [],
                                        [],
                                        "fmt",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, sign |);
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| f |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "core::fmt::Error"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |) in
                          M.match_operator (|
                            Some
                              (Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "core::fmt::Error" ]),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::Formatter",
                                            "sign_plus",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| f |) |)
                                            |)
                                          ]
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::Formatter",
                                        "write_fmt",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| f |) |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "core::fmt::Arguments",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::Arguments",
                                            "new_v1",
                                            [
                                              Value.Integer IntegerKind.Usize 1;
                                              Value.Integer IntegerKind.Usize 1
                                            ],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (| Value.Array [ mk_str (| "" |) ] |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            "new_display",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [ BITS; LIMBS ]
                                                                []
                                                            ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (| Pointer.Kind.Ref, abs |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      M.get_trait_method (|
                                        "core::fmt::Display",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        [],
                                        [],
                                        "fmt",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, abs |);
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| f |) |)
                                        |)
                                      ]
                                    |)
                                  |)))
                            ]
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BITS LIMBS : Value.t),
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BITS LIMBS)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt BITS LIMBS)) ].
    End Impl_core_fmt_Display_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
    
    Module Impl_core_fmt_Binary_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
      Definition Self (BITS LIMBS : Value.t) : Ty.t :=
        Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [].
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              self.0.fmt(f)
          }
      *)
      Definition fmt
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_trait_method (|
                "core::fmt::Binary",
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                [],
                [],
                "fmt",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |);
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BITS LIMBS : Value.t),
        M.IsTraitInstance
          "core::fmt::Binary"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BITS LIMBS)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt BITS LIMBS)) ].
    End Impl_core_fmt_Binary_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
    
    Module Impl_core_fmt_Octal_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
      Definition Self (BITS LIMBS : Value.t) : Ty.t :=
        Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [].
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              self.0.fmt(f)
          }
      *)
      Definition fmt
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_trait_method (|
                "core::fmt::Octal",
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                [],
                [],
                "fmt",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |);
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BITS LIMBS : Value.t),
        M.IsTraitInstance
          "core::fmt::Octal"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BITS LIMBS)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt BITS LIMBS)) ].
    End Impl_core_fmt_Octal_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
    
    Module Impl_core_fmt_LowerHex_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
      Definition Self (BITS LIMBS : Value.t) : Ty.t :=
        Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [].
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              self.0.fmt(f)
          }
      *)
      Definition fmt
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_trait_method (|
                "core::fmt::LowerHex",
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                [],
                [],
                "fmt",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |);
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BITS LIMBS : Value.t),
        M.IsTraitInstance
          "core::fmt::LowerHex"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BITS LIMBS)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt BITS LIMBS)) ].
    End Impl_core_fmt_LowerHex_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
    
    Module Impl_core_fmt_UpperHex_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
      Definition Self (BITS LIMBS : Value.t) : Ty.t :=
        Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [].
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              self.0.fmt(f)
          }
      *)
      Definition fmt
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_trait_method (|
                "core::fmt::UpperHex",
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                [],
                [],
                "fmt",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |);
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (BITS LIMBS : Value.t),
        M.IsTraitInstance
          "core::fmt::UpperHex"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self BITS LIMBS)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt BITS LIMBS)) ].
    End Impl_core_fmt_UpperHex_for_alloy_primitives_signed_int_Signed_BITS_LIMBS.
    
    Module Impl_alloy_primitives_signed_int_Signed_BITS_LIMBS.
      Definition Self (BITS LIMBS : Value.t) : Ty.t :=
        Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [].
      
      (*     pub(crate) const MASK: u64 = ruint::mask(BITS); *)
      (* Ty.path "u64" *)
      Definition value_MASK
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (| Ty.path "u64", M.get_function (| "ruint::mask", [], [] |), [ BITS ] |)
          |))).
      
      Global Instance AssociatedConstant_value_MASK :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "MASK" (value_MASK BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque value_MASK.
      
      (*     pub(crate) const SIGN_BIT: u64 = sign_bit(BITS); *)
      (* Ty.path "u64" *)
      Definition value_SIGN_BIT
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u64",
              M.get_function (| "alloy_primitives::signed::utils::sign_bit", [], [] |),
              [ BITS ]
            |)
          |))).
      
      Global Instance AssociatedConstant_value_SIGN_BIT :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "SIGN_BIT" (value_SIGN_BIT BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque value_SIGN_BIT.
      
      (*     pub const BITS: usize = BITS; *)
      (* Ty.path "usize" *)
      Definition value_BITS
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        ltac:(M.monadic (M.alloc (| BITS |))).
      
      Global Instance AssociatedConstant_value_BITS :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "BITS" (value_BITS BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque value_BITS.
      
      (*     pub const BYTES: usize = Uint::<BITS, LIMBS>::BYTES; *)
      (* Ty.path "usize" *)
      Definition value_BYTES
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        ltac:(M.monadic
          (get_associated_constant (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            "BYTES",
            Ty.path "usize"
          |))).
      
      Global Instance AssociatedConstant_value_BYTES :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "BYTES" (value_BYTES BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque value_BYTES.
      
      (*     pub const MIN: Self = min(); *)
      (* Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [] *)
      Definition value_MIN
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
              M.get_function (| "alloy_primitives::signed::utils::min", [ BITS; LIMBS ], [] |),
              []
            |)
          |))).
      
      Global Instance AssociatedConstant_value_MIN :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "MIN" (value_MIN BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque value_MIN.
      
      (*     pub const MAX: Self = max(); *)
      (* Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [] *)
      Definition value_MAX
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
              M.get_function (| "alloy_primitives::signed::utils::max", [ BITS; LIMBS ], [] |),
              []
            |)
          |))).
      
      Global Instance AssociatedConstant_value_MAX :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "MAX" (value_MAX BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque value_MAX.
      
      (*     pub const ZERO: Self = zero(); *)
      (* Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [] *)
      Definition value_ZERO
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
              M.get_function (| "alloy_primitives::signed::utils::zero", [ BITS; LIMBS ], [] |),
              []
            |)
          |))).
      
      Global Instance AssociatedConstant_value_ZERO :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "ZERO" (value_ZERO BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque value_ZERO.
      
      (*     pub const ONE: Self = one(); *)
      (* Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [] *)
      Definition value_ONE
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
              M.get_function (| "alloy_primitives::signed::utils::one", [ BITS; LIMBS ], [] |),
              []
            |)
          |))).
      
      Global Instance AssociatedConstant_value_ONE :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "ONE" (value_ONE BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque value_ONE.
      
      (*     pub const MINUS_ONE: Self = Self(Uint::<BITS, LIMBS>::MAX); *)
      (* Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [] *)
      Definition value_MINUS_ONE
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        ltac:(M.monadic
          (M.alloc (|
            Value.StructTuple
              "alloy_primitives::signed::int::Signed"
              [
                M.read (|
                  get_associated_constant (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "MAX",
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                  |)
                |)
              ]
          |))).
      
      Global Instance AssociatedConstant_value_MINUS_ONE :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "MINUS_ONE" (value_MINUS_ONE BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque value_MINUS_ONE.
      
      (*
          pub const fn from_raw(val: Uint<BITS, LIMBS>) -> Self {
              Self(val)
          }
      *)
      Definition from_raw
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ val ] =>
          ltac:(M.monadic
            (let val := M.alloc (| val |) in
            Value.StructTuple "alloy_primitives::signed::int::Signed" [ M.read (| val |) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_raw :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "from_raw" (from_raw BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque from_raw.
      
      (*
          pub fn unchecked_from<T>(val: T) -> Self
          where
              T: TryInto<Self>,
              <T as TryInto<Self>>::Error: fmt::Debug,
          {
              val.try_into().unwrap()
          }
      *)
      Definition unchecked_from
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [ T ], [ val ] =>
          ltac:(M.monadic
            (let val := M.alloc (| val |) in
            M.call_closure (|
              Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [];
                    Ty.associated_in_trait
                      "core::convert::TryInto"
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ BITS; LIMBS ]
                          []
                      ]
                      T
                      "Error"
                  ],
                "unwrap",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [];
                      Ty.associated_in_trait
                        "core::convert::TryInto"
                        []
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::signed::int::Signed")
                            [ BITS; LIMBS ]
                            []
                        ]
                        T
                        "Error"
                    ],
                  M.get_trait_method (|
                    "core::convert::TryInto",
                    T,
                    [],
                    [ Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] []
                    ],
                    "try_into",
                    [],
                    []
                  |),
                  [ M.read (| val |) ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_unchecked_from :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "unchecked_from" (unchecked_from BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque unchecked_from.
      
      (*
          pub fn unchecked_into<T>(self) -> T
          where
              Self: TryInto<T>,
              <Self as TryInto<T>>::Error: fmt::Debug,
          {
              self.try_into().unwrap()
          }
      *)
      Definition unchecked_into
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [ T ], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              T,
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    T;
                    Ty.associated_in_trait
                      "core::convert::TryInto"
                      []
                      [ T ]
                      (Ty.apply
                        (Ty.path "alloy_primitives::signed::int::Signed")
                        [ BITS; LIMBS ]
                        [])
                      "Error"
                  ],
                "unwrap",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      T;
                      Ty.associated_in_trait
                        "core::convert::TryInto"
                        []
                        [ T ]
                        (Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ BITS; LIMBS ]
                          [])
                        "Error"
                    ],
                  M.get_trait_method (|
                    "core::convert::TryInto",
                    Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
                    [],
                    [ T ],
                    "try_into",
                    [],
                    []
                  |),
                  [ M.read (| self |) ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_unchecked_into :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "unchecked_into" (unchecked_into BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque unchecked_into.
      
      (*
          pub const fn into_raw(self) -> Uint<BITS, LIMBS> {
              self.0
          }
      *)
      Definition into_raw
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_tuple_field (|
                self,
                "alloy_primitives::signed::int::Signed",
                0
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_into_raw :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "into_raw" (into_raw BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque into_raw.
      
      (*
          pub const fn sign(&self) -> Sign {
              // if the last limb contains the sign bit, then we're negative
              // because we can't set any higher bits to 1, we use >= as a proxy
              // check to avoid bit comparison
              if let Some(limb) = self.0.as_limbs().last() {
                  if *limb >= Self::SIGN_BIT {
                      return Sign::Negative;
                  }
              }
              Sign::Positive
          }
      *)
      Definition sign
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                    "last",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ]
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            "as_limbs",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_tuple_field (|
                                                M.deref (| M.read (| self |) |),
                                                "alloy_primitives::signed::int::Signed",
                                                0
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |) in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let limb := M.copy (| γ0_0 |) in
                            M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          BinOp.ge (|
                                            M.read (| M.deref (| M.read (| limb |) |) |),
                                            M.read (|
                                              get_associated_constant (|
                                                Ty.apply
                                                  (Ty.path "alloy_primitives::signed::int::Signed")
                                                  [ BITS; LIMBS ]
                                                  [],
                                                "SIGN_BIT",
                                                Ty.path "u64"
                                              |)
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            Value.StructTuple
                                              "alloy_primitives::signed::sign::Sign::Negative"
                                              []
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.alloc (|
                    Value.StructTuple "alloy_primitives::signed::sign::Sign::Positive" []
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_sign :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "sign" (sign BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque sign.
      
      (*
          pub const fn is_odd(&self) -> bool {
              if BITS == 0 {
                  false
              } else {
                  self.as_limbs()[0] % 2 == 1
              }
          }
      *)
      Definition is_odd
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Some (Ty.path "bool"),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (| BinOp.eq (| BITS, Value.Integer IntegerKind.Usize 0 |) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (| Value.Bool false |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        BinOp.eq (|
                          BinOp.Wrap.rem (|
                            M.read (|
                              M.SubPointer.get_array_field (|
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloy_primitives::signed::int::Signed")
                                        [ BITS; LIMBS ]
                                        [],
                                      "as_limbs",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |),
                            Value.Integer IntegerKind.U64 2
                          |),
                          Value.Integer IntegerKind.U64 1
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_odd :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "is_odd" (is_odd BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque is_odd.
      
      (*
          pub const fn const_eq(&self, other: &Self) -> bool {
              const_eq(self, other)
          }
      *)
      Definition const_eq
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              Ty.path "bool",
              M.get_function (| "alloy_primitives::signed::utils::const_eq", [ BITS; LIMBS ], [] |),
              [
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_const_eq :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "const_eq" (const_eq BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque const_eq.
      
      (*
          pub const fn is_zero(&self) -> bool {
              self.const_eq(&Self::ZERO)
          }
      *)
      Definition is_zero
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "bool",
              M.get_associated_function (|
                Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
                "const_eq",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      get_associated_constant (|
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ BITS; LIMBS ]
                          [],
                        "ZERO",
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ BITS; LIMBS ]
                          []
                      |)
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_zero :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "is_zero" (is_zero BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque is_zero.
      
      (*
          pub const fn is_positive(&self) -> bool {
              !self.is_zero() && matches!(self.sign(), Sign::Positive)
          }
      *)
      Definition is_positive
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            LogicalOp.and (|
              UnOp.not (|
                M.call_closure (|
                  Ty.path "bool",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
                    "is_zero",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |),
              ltac:(M.monadic
                (M.read (|
                  M.match_operator (|
                    Some (Ty.path "bool"),
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "alloy_primitives::signed::sign::Sign",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloy_primitives::signed::int::Signed")
                            [ BITS; LIMBS ]
                            [],
                          "sign",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "alloy_primitives::signed::sign::Sign::Positive"
                            |) in
                          M.alloc (| Value.Bool true |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
                    ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_positive :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "is_positive" (is_positive BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque is_positive.
      
      (*
          pub const fn is_negative(&self) -> bool {
              matches!(self.sign(), Sign::Negative)
          }
      *)
      Definition is_negative
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Some (Ty.path "bool"),
                M.alloc (|
                  M.call_closure (|
                    Ty.path "alloy_primitives::signed::sign::Sign",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
                      "sign",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "alloy_primitives::signed::sign::Sign::Negative"
                        |) in
                      M.alloc (| Value.Bool true |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_negative :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "is_negative" (is_negative BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque is_negative.
      
      (*
          pub fn count_ones(&self) -> usize {
              self.0.count_ones()
          }
      *)
      Definition count_ones
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                "count_ones",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_count_ones :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "count_ones" (count_ones BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque count_ones.
      
      (*
          pub fn count_zeros(&self) -> usize {
              self.0.count_zeros()
          }
      *)
      Definition count_zeros
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                "count_zeros",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_count_zeros :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "count_zeros" (count_zeros BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque count_zeros.
      
      (*
          pub fn leading_zeros(&self) -> usize {
              self.0.leading_zeros()
          }
      *)
      Definition leading_zeros
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                "leading_zeros",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_leading_zeros :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "leading_zeros" (leading_zeros BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque leading_zeros.
      
      (*
          pub fn trailing_zeros(&self) -> usize {
              self.0.trailing_zeros()
          }
      *)
      Definition trailing_zeros
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                "trailing_zeros",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_trailing_zeros :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "trailing_zeros" (trailing_zeros BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque trailing_zeros.
      
      (*
          pub fn trailing_ones(&self) -> usize {
              self.0.trailing_ones()
          }
      *)
      Definition trailing_ones
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                "trailing_ones",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_trailing_ones :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "trailing_ones" (trailing_ones BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque trailing_ones.
      
      (*
          pub const fn bit(&self, index: usize) -> bool {
              self.0.bit(index)
          }
      *)
      Definition bit
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            M.call_closure (|
              Ty.path "bool",
              M.get_associated_function (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                "bit",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |);
                M.read (| index |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_bit :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "bit" (bit BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque bit.
      
      (*
          pub const fn byte(&self, index: usize) -> u8 {
              self.0.byte(index)
          }
      *)
      Definition byte
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            M.call_closure (|
              Ty.path "u8",
              M.get_associated_function (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                "byte",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |);
                M.read (| index |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_byte :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "byte" (byte BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque byte.
      
      (*
          pub fn bits(&self) -> u32 {
              let unsigned = self.unsigned_abs();
              let unsigned_bits = unsigned.bit_len();
      
              // NOTE: We need to deal with two special cases:
              //   - the number is 0
              //   - the number is a negative power of `2`. These numbers are written as `0b11..1100..00`.
              //   In the case of a negative power of two, the number of bits required
              //   to represent the negative signed value is equal to the number of
              //   bits required to represent its absolute value as an unsigned
              //   integer. This is best illustrated by an example: the number of bits
              //   required to represent `-128` is `8` since it is equal to `i8::MIN`
              //   and, therefore, obviously fits in `8` bits. This is equal to the
              //   number of bits required to represent `128` as an unsigned integer
              //   (which fits in a `u8`).  However, the number of bits required to
              //   represent `128` as a signed integer is `9`, as it is greater than
              //   `i8::MAX`.  In the general case, an extra bit is needed to
              //   represent the sign.
              let bits = if self.count_zeros() == self.trailing_zeros() {
                  // `self` is zero or a negative power of two
                  unsigned_bits
              } else {
                  unsigned_bits + 1
              };
      
              bits as u32
          }
      *)
      Definition bits
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ unsigned : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
                      "unsigned_abs",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ unsigned_bits : Ty.path "usize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      "bit_len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, unsigned |) ]
                  |)
                |) in
              let~ bits : Ty.path "usize" :=
                M.copy (|
                  M.match_operator (|
                    Some (Ty.path "usize"),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.eq (|
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloy_primitives::signed::int::Signed")
                                        [ BITS; LIMBS ]
                                        [],
                                      "count_zeros",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |),
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloy_primitives::signed::int::Signed")
                                        [ BITS; LIMBS ]
                                        [],
                                      "trailing_zeros",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          unsigned_bits));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            BinOp.Wrap.add (|
                              M.read (| unsigned_bits |),
                              Value.Integer IntegerKind.Usize 1
                            |)
                          |)))
                    ]
                  |)
                |) in
              M.alloc (| M.cast (Ty.path "u32") (M.read (| bits |)) |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_bits :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "bits" (bits BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque bits.
      
      (*
          pub fn overflowing_from_sign_and_abs(sign: Sign, abs: Uint<BITS, LIMBS>) -> (Self, bool) {
              let value = Self(match sign {
                  Sign::Positive => abs,
                  Sign::Negative => twos_complement(abs),
              });
      
              (value, value.sign() != sign && value != Self::ZERO)
          }
      *)
      Definition overflowing_from_sign_and_abs
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ sign; abs ] =>
          ltac:(M.monadic
            (let sign := M.alloc (| sign |) in
            let abs := M.alloc (| abs |) in
            M.read (|
              let~ value :
                  Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [] :=
                M.alloc (|
                  Value.StructTuple
                    "alloy_primitives::signed::int::Signed"
                    [
                      M.read (|
                        M.match_operator (|
                          Some (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []),
                          sign,
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let _ :=
                                  M.is_struct_tuple (|
                                    γ,
                                    "alloy_primitives::signed::sign::Sign::Positive"
                                  |) in
                                abs));
                            fun γ =>
                              ltac:(M.monadic
                                (let _ :=
                                  M.is_struct_tuple (|
                                    γ,
                                    "alloy_primitives::signed::sign::Sign::Negative"
                                  |) in
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    M.get_function (|
                                      "alloy_primitives::signed::utils::twos_complement",
                                      [ BITS; LIMBS ],
                                      []
                                    |),
                                    [ M.read (| abs |) ]
                                  |)
                                |)))
                          ]
                        |)
                      |)
                    ]
                |) in
              M.alloc (|
                Value.Tuple
                  [
                    M.read (| value |);
                    LogicalOp.and (|
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::cmp::PartialEq",
                          Ty.path "alloy_primitives::signed::sign::Sign",
                          [],
                          [ Ty.path "alloy_primitives::signed::sign::Sign" ],
                          "ne",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "alloy_primitives::signed::sign::Sign",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloy_primitives::signed::int::Signed")
                                    [ BITS; LIMBS ]
                                    [],
                                  "sign",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, value |) ]
                              |)
                            |)
                          |);
                          M.borrow (| Pointer.Kind.Ref, sign |)
                        ]
                      |),
                      ltac:(M.monadic
                        (M.call_closure (|
                          Ty.path "bool",
                          M.get_trait_method (|
                            "core::cmp::PartialEq",
                            Ty.apply
                              (Ty.path "alloy_primitives::signed::int::Signed")
                              [ BITS; LIMBS ]
                              [],
                            [],
                            [
                              Ty.apply
                                (Ty.path "alloy_primitives::signed::int::Signed")
                                [ BITS; LIMBS ]
                                []
                            ],
                            "ne",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, value |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              get_associated_constant (|
                                Ty.apply
                                  (Ty.path "alloy_primitives::signed::int::Signed")
                                  [ BITS; LIMBS ]
                                  [],
                                "ZERO",
                                Ty.apply
                                  (Ty.path "alloy_primitives::signed::int::Signed")
                                  [ BITS; LIMBS ]
                                  []
                              |)
                            |)
                          ]
                        |)))
                    |)
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_overflowing_from_sign_and_abs :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C
          (Self BITS LIMBS)
          "overflowing_from_sign_and_abs"
          (overflowing_from_sign_and_abs BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque overflowing_from_sign_and_abs.
      
      (*
          pub fn checked_from_sign_and_abs(sign: Sign, abs: Uint<BITS, LIMBS>) -> Option<Self> {
              let (result, overflow) = Self::overflowing_from_sign_and_abs(sign, abs);
              if overflow {
                  None
              } else {
                  Some(result)
              }
          }
      *)
      Definition checked_from_sign_and_abs
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ sign; abs ] =>
          ltac:(M.monadic
            (let sign := M.alloc (| sign |) in
            let abs := M.alloc (| abs |) in
            M.read (|
              M.match_operator (|
                None,
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ BITS; LIMBS ]
                          [];
                        Ty.path "bool"
                      ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
                      "overflowing_from_sign_and_abs",
                      [],
                      []
                    |),
                    [ M.read (| sign |); M.read (| abs |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let result := M.copy (| γ0_0 |) in
                      let overflow := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Some
                          (Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloy_primitives::signed::int::Signed")
                                [ BITS; LIMBS ]
                                []
                            ]),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use overflow in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (| Value.StructTuple "core::option::Option::None" [] |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                Value.StructTuple
                                  "core::option::Option::Some"
                                  [ M.read (| result |) ]
                              |)))
                        ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_checked_from_sign_and_abs :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C
          (Self BITS LIMBS)
          "checked_from_sign_and_abs"
          (checked_from_sign_and_abs BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque checked_from_sign_and_abs.
      
      (*
          pub fn from_dec_str(value: &str) -> Result<Self, ParseSignedError> {
              let (sign, value) = match value.as_bytes().first() {
                  Some(b'+') => (Sign::Positive, &value[1..]),
                  Some(b'-') => (Sign::Negative, &value[1..]),
                  _ => (Sign::Positive, value),
              };
              let abs = Uint::<BITS, LIMBS>::from_str_radix(value, 10)?;
              Self::checked_from_sign_and_abs(sign, abs).ok_or(ParseSignedError::IntegerOverflow)
          }
      *)
      Definition from_dec_str
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  M.match_operator (|
                    None,
                    M.match_operator (|
                      Some
                        (Ty.tuple
                          [
                            Ty.path "alloy_primitives::signed::sign::Sign";
                            Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                          ]),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                            "first",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                  M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| value |) |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let _ :=
                              M.is_constant_or_break_match (|
                                M.read (| γ0_0 |),
                                Value.Integer IntegerKind.U8 43
                              |) in
                            M.alloc (|
                              Value.Tuple
                                [
                                  Value.StructTuple
                                    "alloy_primitives::signed::sign::Sign::Positive"
                                    [];
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.path "str",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeFrom")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| value |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeFrom"
                                            [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let _ :=
                              M.is_constant_or_break_match (|
                                M.read (| γ0_0 |),
                                Value.Integer IntegerKind.U8 45
                              |) in
                            M.alloc (|
                              Value.Tuple
                                [
                                  Value.StructTuple
                                    "alloy_primitives::signed::sign::Sign::Negative"
                                    [];
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.path "str",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeFrom")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| value |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeFrom"
                                            [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.Tuple
                                [
                                  Value.StructTuple
                                    "alloy_primitives::signed::sign::Sign::Positive"
                                    [];
                                  M.read (| value |)
                                ]
                            |)))
                      ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let sign := M.copy (| γ0_0 |) in
                          let value := M.copy (| γ0_1 |) in
                          let~ abs : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                            M.copy (|
                              M.match_operator (|
                                Some (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []),
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "ruint::string::ParseError"
                                          ];
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                                          Ty.path "ruint::string::ParseError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                                            Ty.path "ruint::string::ParseError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          "from_str_radix",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| value |) |)
                                          |);
                                          Value.Integer IntegerKind.U64 10
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "alloy_primitives::signed::int::Signed")
                                                      [ BITS; LIMBS ]
                                                      [];
                                                    Ty.path
                                                      "alloy_primitives::signed::errors::ParseSignedError"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloy_primitives::signed::int::Signed")
                                                        [ BITS; LIMBS ]
                                                        [];
                                                      Ty.path
                                                        "alloy_primitives::signed::errors::ParseSignedError"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "ruint::string::ParseError"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloy_primitives::signed::int::Signed")
                                    [ BITS; LIMBS ]
                                    [];
                                  Ty.path "alloy_primitives::signed::errors::ParseSignedError"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloy_primitives::signed::int::Signed")
                                      [ BITS; LIMBS ]
                                      []
                                  ],
                                "ok_or",
                                [],
                                [ Ty.path "alloy_primitives::signed::errors::ParseSignedError" ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloy_primitives::signed::int::Signed")
                                        [ BITS; LIMBS ]
                                        []
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloy_primitives::signed::int::Signed")
                                      [ BITS; LIMBS ]
                                      [],
                                    "checked_from_sign_and_abs",
                                    [],
                                    []
                                  |),
                                  [ M.read (| sign |); M.read (| abs |) ]
                                |);
                                Value.StructTuple
                                  "alloy_primitives::signed::errors::ParseSignedError::IntegerOverflow"
                                  []
                              ]
                            |)
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_dec_str :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "from_dec_str" (from_dec_str BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque from_dec_str.
      
      (*
          pub fn to_dec_string(&self) -> String {
              let sign = self.sign();
              let abs = self.unsigned_abs();
      
              format!("{sign}{abs}")
          }
      *)
      Definition to_dec_string
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ sign : Ty.path "alloy_primitives::signed::sign::Sign" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "alloy_primitives::signed::sign::Sign",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
                      "sign",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ abs : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
                      "unsigned_abs",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.path "alloc::string::String",
                  M.get_function (|
                    "core::hint::must_use",
                    [],
                    [ Ty.path "alloc::string::String" ]
                  |),
                  [
                    M.read (|
                      let~ res : Ty.path "alloc::string::String" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "alloc::string::String",
                            M.get_function (| "alloc::fmt::format", [], [] |),
                            [
                              M.call_closure (|
                                Ty.path "core::fmt::Arguments",
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_v1",
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 2
                                  ],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Value.Array [ mk_str (| "" |); mk_str (| "" |) ]
                                        |)
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Value.Array
                                            [
                                              M.call_closure (|
                                                Ty.path "core::fmt::rt::Argument",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  "new_display",
                                                  [],
                                                  [ Ty.path "alloy_primitives::signed::sign::Sign" ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.Ref, sign |)
                                                    |)
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                Ty.path "core::fmt::rt::Argument",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  "new_display",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [ BITS; LIMBS ]
                                                      []
                                                  ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.Ref, abs |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |) in
                      res
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_to_dec_string :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "to_dec_string" (to_dec_string BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque to_dec_string.
      
      (*
          pub fn from_hex_str(value: &str) -> Result<Self, ParseSignedError> {
              let (sign, value) = match value.as_bytes().first() {
                  Some(b'+') => (Sign::Positive, &value[1..]),
                  Some(b'-') => (Sign::Negative, &value[1..]),
                  _ => (Sign::Positive, value),
              };
      
              let value = value.strip_prefix("0x").unwrap_or(value);
      
              if value.len() > 64 {
                  return Err(ParseSignedError::IntegerOverflow);
              }
      
              let abs = Uint::<BITS, LIMBS>::from_str_radix(value, 16)?;
              Self::checked_from_sign_and_abs(sign, abs).ok_or(ParseSignedError::IntegerOverflow)
          }
      *)
      Definition from_hex_str
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  M.match_operator (|
                    None,
                    M.match_operator (|
                      Some
                        (Ty.tuple
                          [
                            Ty.path "alloy_primitives::signed::sign::Sign";
                            Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                          ]),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                            "first",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                  M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| value |) |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let _ :=
                              M.is_constant_or_break_match (|
                                M.read (| γ0_0 |),
                                Value.Integer IntegerKind.U8 43
                              |) in
                            M.alloc (|
                              Value.Tuple
                                [
                                  Value.StructTuple
                                    "alloy_primitives::signed::sign::Sign::Positive"
                                    [];
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.path "str",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeFrom")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| value |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeFrom"
                                            [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let _ :=
                              M.is_constant_or_break_match (|
                                M.read (| γ0_0 |),
                                Value.Integer IntegerKind.U8 45
                              |) in
                            M.alloc (|
                              Value.Tuple
                                [
                                  Value.StructTuple
                                    "alloy_primitives::signed::sign::Sign::Negative"
                                    [];
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.path "str",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeFrom")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| value |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeFrom"
                                            [ ("start", Value.Integer IntegerKind.Usize 1) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.Tuple
                                [
                                  Value.StructTuple
                                    "alloy_primitives::signed::sign::Sign::Positive"
                                    [];
                                  M.read (| value |)
                                ]
                            |)))
                      ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let sign := M.copy (| γ0_0 |) in
                          let value := M.copy (| γ0_1 |) in
                          let~ value : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                  "unwrap_or",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    M.get_associated_function (|
                                      Ty.path "str",
                                      "strip_prefix",
                                      [],
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| value |) |)
                                      |);
                                      mk_str (| "0x" |)
                                    ]
                                  |);
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |)
                                ]
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          BinOp.gt (|
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.path "str",
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| value |) |)
                                                |)
                                              ]
                                            |),
                                            Value.Integer IntegerKind.Usize 64
                                          |)
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            Value.StructTuple
                                              "core::result::Result::Err"
                                              [
                                                Value.StructTuple
                                                  "alloy_primitives::signed::errors::ParseSignedError::IntegerOverflow"
                                                  []
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          let~ abs : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                            M.copy (|
                              M.match_operator (|
                                Some (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []),
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "ruint::string::ParseError"
                                          ];
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                                          Ty.path "ruint::string::ParseError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                                            Ty.path "ruint::string::ParseError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          "from_str_radix",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| value |) |)
                                          |);
                                          Value.Integer IntegerKind.U64 16
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "alloy_primitives::signed::int::Signed")
                                                      [ BITS; LIMBS ]
                                                      [];
                                                    Ty.path
                                                      "alloy_primitives::signed::errors::ParseSignedError"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloy_primitives::signed::int::Signed")
                                                        [ BITS; LIMBS ]
                                                        [];
                                                      Ty.path
                                                        "alloy_primitives::signed::errors::ParseSignedError"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "ruint::string::ParseError"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloy_primitives::signed::int::Signed")
                                    [ BITS; LIMBS ]
                                    [];
                                  Ty.path "alloy_primitives::signed::errors::ParseSignedError"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloy_primitives::signed::int::Signed")
                                      [ BITS; LIMBS ]
                                      []
                                  ],
                                "ok_or",
                                [],
                                [ Ty.path "alloy_primitives::signed::errors::ParseSignedError" ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloy_primitives::signed::int::Signed")
                                        [ BITS; LIMBS ]
                                        []
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloy_primitives::signed::int::Signed")
                                      [ BITS; LIMBS ]
                                      [],
                                    "checked_from_sign_and_abs",
                                    [],
                                    []
                                  |),
                                  [ M.read (| sign |); M.read (| abs |) ]
                                |);
                                Value.StructTuple
                                  "alloy_primitives::signed::errors::ParseSignedError::IntegerOverflow"
                                  []
                              ]
                            |)
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_hex_str :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "from_hex_str" (from_hex_str BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque from_hex_str.
      
      (*
          pub fn to_hex_string(&self) -> String {
              let sign = self.sign();
              let abs = self.unsigned_abs();
      
              format!("{sign}0x{abs:x}")
          }
      *)
      Definition to_hex_string
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ sign : Ty.path "alloy_primitives::signed::sign::Sign" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "alloy_primitives::signed::sign::Sign",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
                      "sign",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ abs : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
                      "unsigned_abs",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.path "alloc::string::String",
                  M.get_function (|
                    "core::hint::must_use",
                    [],
                    [ Ty.path "alloc::string::String" ]
                  |),
                  [
                    M.read (|
                      let~ res : Ty.path "alloc::string::String" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "alloc::string::String",
                            M.get_function (| "alloc::fmt::format", [], [] |),
                            [
                              M.call_closure (|
                                Ty.path "core::fmt::Arguments",
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_v1",
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 2
                                  ],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Value.Array [ mk_str (| "" |); mk_str (| "0x" |) ]
                                        |)
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Value.Array
                                            [
                                              M.call_closure (|
                                                Ty.path "core::fmt::rt::Argument",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  "new_display",
                                                  [],
                                                  [ Ty.path "alloy_primitives::signed::sign::Sign" ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.Ref, sign |)
                                                    |)
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                Ty.path "core::fmt::rt::Argument",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  "new_lower_hex",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [ BITS; LIMBS ]
                                                      []
                                                  ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.Ref, abs |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |) in
                      res
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_to_hex_string :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "to_hex_string" (to_hex_string BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque to_hex_string.
      
      (*
          pub fn into_sign_and_abs(&self) -> (Sign, Uint<BITS, LIMBS>) {
              let sign = self.sign();
              let abs = match sign {
                  Sign::Positive => self.0,
                  Sign::Negative => twos_complement(self.0),
              };
              (sign, abs)
          }
      *)
      Definition into_sign_and_abs
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ sign : Ty.path "alloy_primitives::signed::sign::Sign" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "alloy_primitives::signed::sign::Sign",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [],
                      "sign",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ abs : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                M.copy (|
                  M.match_operator (|
                    Some (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []),
                    sign,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "alloy_primitives::signed::sign::Sign::Positive"
                            |) in
                          M.SubPointer.get_struct_tuple_field (|
                            M.deref (| M.read (| self |) |),
                            "alloy_primitives::signed::int::Signed",
                            0
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "alloy_primitives::signed::sign::Sign::Negative"
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                              M.get_function (|
                                "alloy_primitives::signed::utils::twos_complement",
                                [ BITS; LIMBS ],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_tuple_field (|
                                    M.deref (| M.read (| self |) |),
                                    "alloy_primitives::signed::int::Signed",
                                    0
                                  |)
                                |)
                              ]
                            |)
                          |)))
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [ M.read (| sign |); M.read (| abs |) ] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_into_sign_and_abs :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C
          (Self BITS LIMBS)
          "into_sign_and_abs"
          (into_sign_and_abs BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque into_sign_and_abs.
      
      (*
          pub const fn to_be_bytes<const BYTES: usize>(&self) -> [u8; BYTES] {
              self.0.to_be_bytes()
          }
      *)
      Definition to_be_bytes
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [ BYTES ], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.apply (Ty.path "array") [ BYTES ] [ Ty.path "u8" ],
              M.get_associated_function (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                "to_be_bytes",
                [ BYTES ],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_to_be_bytes :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "to_be_bytes" (to_be_bytes BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque to_be_bytes.
      
      (*
          pub const fn to_le_bytes<const BYTES: usize>(&self) -> [u8; BYTES] {
              self.0.to_le_bytes()
          }
      *)
      Definition to_le_bytes
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [ BYTES ], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.apply (Ty.path "array") [ BYTES ] [ Ty.path "u8" ],
              M.get_associated_function (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                "to_le_bytes",
                [ BYTES ],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_to_le_bytes :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "to_le_bytes" (to_le_bytes BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque to_le_bytes.
      
      (*
          pub const fn from_be_bytes<const BYTES: usize>(bytes: [u8; BYTES]) -> Self {
              Self(Uint::from_be_bytes::<BYTES>(bytes))
          }
      *)
      Definition from_be_bytes
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [ BYTES ], [], [ bytes ] =>
          ltac:(M.monadic
            (let bytes := M.alloc (| bytes |) in
            Value.StructTuple
              "alloy_primitives::signed::int::Signed"
              [
                M.call_closure (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "from_be_bytes",
                    [ BYTES ],
                    []
                  |),
                  [ M.read (| bytes |) ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_be_bytes :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "from_be_bytes" (from_be_bytes BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque from_be_bytes.
      
      (*
          pub const fn from_le_bytes<const BYTES: usize>(bytes: [u8; BYTES]) -> Self {
              Self(Uint::from_le_bytes::<BYTES>(bytes))
          }
      *)
      Definition from_le_bytes
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [ BYTES ], [], [ bytes ] =>
          ltac:(M.monadic
            (let bytes := M.alloc (| bytes |) in
            Value.StructTuple
              "alloy_primitives::signed::int::Signed"
              [
                M.call_closure (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "from_le_bytes",
                    [ BYTES ],
                    []
                  |),
                  [ M.read (| bytes |) ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_le_bytes :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "from_le_bytes" (from_le_bytes BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque from_le_bytes.
      
      (*
          pub fn try_from_be_slice(slice: &[u8]) -> Option<Self> {
              Uint::try_from_be_slice(slice).map(Self)
          }
      *)
      Definition try_from_be_slice
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ slice ] =>
          ltac:(M.monadic
            (let slice := M.alloc (| slice |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [] ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                "map",
                [],
                [
                  Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [];
                  Ty.function
                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                    (Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [])
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "try_from_be_slice",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| slice |) |) |) ]
                |);
                M.constructor_as_closure "alloy_primitives::signed::int::Signed"
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_try_from_be_slice :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C
          (Self BITS LIMBS)
          "try_from_be_slice"
          (try_from_be_slice BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque try_from_be_slice.
      
      (*
          pub fn try_from_le_slice(slice: &[u8]) -> Option<Self> {
              Uint::try_from_le_slice(slice).map(Self)
          }
      *)
      Definition try_from_le_slice
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ slice ] =>
          ltac:(M.monadic
            (let slice := M.alloc (| slice |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [] ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                "map",
                [],
                [
                  Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [];
                  Ty.function
                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                    (Ty.apply (Ty.path "alloy_primitives::signed::int::Signed") [ BITS; LIMBS ] [])
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "try_from_le_slice",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| slice |) |) |) ]
                |);
                M.constructor_as_closure "alloy_primitives::signed::int::Signed"
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_try_from_le_slice :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C
          (Self BITS LIMBS)
          "try_from_le_slice"
          (try_from_le_slice BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque try_from_le_slice.
      
      (*
          pub const fn as_limbs(&self) -> &[u64; LIMBS] {
              self.0.as_limbs()
          }
      *)
      Definition as_limbs
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "as_limbs",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_tuple_field (|
                        M.deref (| M.read (| self |) |),
                        "alloy_primitives::signed::int::Signed",
                        0
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_as_limbs :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "as_limbs" (as_limbs BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque as_limbs.
      
      (*
          pub const fn into_limbs(self) -> [u64; LIMBS] {
              self.0.into_limbs()
          }
      *)
      Definition into_limbs
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ],
              M.get_associated_function (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                "into_limbs",
                [],
                []
              |),
              [
                M.read (|
                  M.SubPointer.get_struct_tuple_field (|
                    self,
                    "alloy_primitives::signed::int::Signed",
                    0
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_into_limbs :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "into_limbs" (into_limbs BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque into_limbs.
      
      (*
          pub const fn from_limbs(limbs: [u64; LIMBS]) -> Self {
              Self(Uint::from_limbs(limbs))
          }
      *)
      Definition from_limbs
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [], [ limbs ] =>
          ltac:(M.monadic
            (let limbs := M.alloc (| limbs |) in
            Value.StructTuple
              "alloy_primitives::signed::int::Signed"
              [
                M.call_closure (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "from_limbs",
                    [],
                    []
                  |),
                  [ M.read (| limbs |) ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_limbs :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "from_limbs" (from_limbs BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque from_limbs.
      
      (*
          pub fn from_base_be<I: IntoIterator<Item = u64>>(
              base: u64,
              digits: I,
          ) -> Result<Self, BaseConvertError> {
              Ok(Self(Uint::from_base_be(base, digits)?))
          }
      *)
      Definition from_base_be
          (BITS LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self BITS LIMBS in
        match ε, τ, α with
        | [], [ _ as I ], [ base; digits ] =>
          ltac:(M.monadic
            (let base := M.alloc (| base |) in
            let digits := M.alloc (| digits |) in
            M.catch_return (|
              ltac:(M.monadic
                (Value.StructTuple
                  "core::result::Result::Ok"
                  [
                    Value.StructTuple
                      "alloy_primitives::signed::int::Signed"
                      [
                        M.read (|
                          M.match_operator (|
                            Some (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []),
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.path "ruint::base_convert::BaseConvertError"
                                      ];
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                  ],
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                                      Ty.path "ruint::base_convert::BaseConvertError"
                                    ],
                                  [],
                                  [],
                                  "branch",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                                        Ty.path "ruint::base_convert::BaseConvertError"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      "from_base_be",
                                      [],
                                      [ I ]
                                    |),
                                    [ M.read (| base |); M.read (| digits |) ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloy_primitives::signed::int::Signed")
                                                  [ BITS; LIMBS ]
                                                  [];
                                                Ty.path "ruint::base_convert::BaseConvertError"
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "alloy_primitives::signed::int::Signed")
                                                    [ BITS; LIMBS ]
                                                    [];
                                                  Ty.path "ruint::base_convert::BaseConvertError"
                                                ],
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "ruint::base_convert::BaseConvertError"
                                                  ]
                                              ],
                                              "from_residual",
                                              [],
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |)
                        |)
                      ]
                  ]))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_base_be :
        forall (BITS LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self BITS LIMBS) "from_base_be" (from_base_be BITS LIMBS).
      Admitted.
      Global Typeclasses Opaque from_base_be.
    End Impl_alloy_primitives_signed_int_Signed_BITS_LIMBS.
  End int.
End signed.
