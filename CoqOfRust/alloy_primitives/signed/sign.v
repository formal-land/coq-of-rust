(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module signed.
  Module sign.
    (*
    Enum Sign
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "Negative";
            item := StructTuple [];
          };
          {
            name := "Positive";
            item := StructTuple [];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_Sign_Negative :
      M.IsDiscriminant "alloy_primitives::signed::sign::Sign::Negative" 0.
    Axiom IsDiscriminant_Sign_Positive :
      M.IsDiscriminant "alloy_primitives::signed::sign::Sign::Positive" 1.
    
    Module Impl_core_clone_Clone_for_alloy_primitives_signed_sign_Sign.
      Definition Self : Ty.t := Ty.path "alloy_primitives::signed::sign::Sign".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (| M.deref (| M.read (| self |) |) |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_alloy_primitives_signed_sign_Sign.
    
    Module Impl_core_marker_Copy_for_alloy_primitives_signed_sign_Sign.
      Definition Self : Ty.t := Ty.path "alloy_primitives::signed::sign::Sign".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_alloy_primitives_signed_sign_Sign.
    
    Module Impl_core_fmt_Debug_for_alloy_primitives_signed_sign_Sign.
      Definition Self : Ty.t := Ty.path "alloy_primitives::signed::sign::Sign".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.read (|
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "alloy_primitives::signed::sign::Sign::Negative"
                            |) in
                          M.alloc (|
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Negative" |) |) |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "alloy_primitives::signed::sign::Sign::Positive"
                            |) in
                          M.alloc (|
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Positive" |) |) |)
                          |)))
                    ]
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_alloy_primitives_signed_sign_Sign.
    
    Module Impl_core_marker_StructuralPartialEq_for_alloy_primitives_signed_sign_Sign.
      Definition Self : Ty.t := Ty.path "alloy_primitives::signed::sign::Sign".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_alloy_primitives_signed_sign_Sign.
    
    Module Impl_core_cmp_PartialEq_alloy_primitives_signed_sign_Sign_for_alloy_primitives_signed_sign_Sign.
      Definition Self : Ty.t := Ty.path "alloy_primitives::signed::sign::Sign".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.apply (Ty.path "*") [] [ Ty.path "i8" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "i8",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "alloy_primitives::signed::sign::Sign" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.apply (Ty.path "*") [] [ Ty.path "i8" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "i8",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "alloy_primitives::signed::sign::Sign" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.path "bool",
                  BinOp.eq,
                  [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "alloy_primitives::signed::sign::Sign" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_alloy_primitives_signed_sign_Sign_for_alloy_primitives_signed_sign_Sign.
    
    Module Impl_core_cmp_Eq_for_alloy_primitives_signed_sign_Sign.
      Definition Self : Ty.t := Ty.path "alloy_primitives::signed::sign::Sign".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.Tuple []))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_alloy_primitives_signed_sign_Sign.
    
    Module Impl_core_ops_arith_Mul_alloy_primitives_signed_sign_Sign_for_alloy_primitives_signed_sign_Sign.
      Definition Self : Ty.t := Ty.path "alloy_primitives::signed::sign::Sign".
      
      (*     type Output = Self; *)
      Definition _Output : Ty.t := Ty.path "alloy_primitives::signed::sign::Sign".
      
      (*
          fn mul(self, rhs: Self) -> Self::Output {
              match (self, rhs) {
                  (Self::Positive, Self::Positive) => Self::Positive,
                  (Self::Positive, Self::Negative) => Self::Negative,
                  (Self::Negative, Self::Positive) => Self::Negative,
                  (Self::Negative, Self::Negative) => Self::Positive,
              }
          }
      *)
      Definition mul (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; rhs ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let rhs := M.alloc (| rhs |) in
            M.read (|
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.path "alloy_primitives::signed::sign::Sign" ],
                M.alloc (| Value.Tuple [ M.read (| self |); M.read (| rhs |) ] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "alloy_primitives::signed::sign::Sign::Positive"
                        |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_1,
                          "alloy_primitives::signed::sign::Sign::Positive"
                        |) in
                      M.alloc (|
                        Value.StructTuple "alloy_primitives::signed::sign::Sign::Positive" []
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "alloy_primitives::signed::sign::Sign::Positive"
                        |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_1,
                          "alloy_primitives::signed::sign::Sign::Negative"
                        |) in
                      M.alloc (|
                        Value.StructTuple "alloy_primitives::signed::sign::Sign::Negative" []
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "alloy_primitives::signed::sign::Sign::Negative"
                        |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_1,
                          "alloy_primitives::signed::sign::Sign::Positive"
                        |) in
                      M.alloc (|
                        Value.StructTuple "alloy_primitives::signed::sign::Sign::Negative" []
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "alloy_primitives::signed::sign::Sign::Negative"
                        |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_1,
                          "alloy_primitives::signed::sign::Sign::Negative"
                        |) in
                      M.alloc (|
                        Value.StructTuple "alloy_primitives::signed::sign::Sign::Positive" []
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::arith::Mul"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "alloy_primitives::signed::sign::Sign" ]
          Self
          (* Instance *)
          [ ("Output", InstanceField.Ty _Output); ("mul", InstanceField.Method mul) ].
    End Impl_core_ops_arith_Mul_alloy_primitives_signed_sign_Sign_for_alloy_primitives_signed_sign_Sign.
    
    Module Impl_core_ops_arith_Neg_for_alloy_primitives_signed_sign_Sign.
      Definition Self : Ty.t := Ty.path "alloy_primitives::signed::sign::Sign".
      
      (*     type Output = Self; *)
      Definition _Output : Ty.t := Ty.path "alloy_primitives::signed::sign::Sign".
      
      (*
          fn neg(self) -> Self::Output {
              match self {
                  Self::Positive => Self::Negative,
                  Self::Negative => Self::Positive,
              }
          }
      *)
      Definition neg (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.path "alloy_primitives::signed::sign::Sign" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "alloy_primitives::signed::sign::Sign::Positive"
                        |) in
                      M.alloc (|
                        Value.StructTuple "alloy_primitives::signed::sign::Sign::Negative" []
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "alloy_primitives::signed::sign::Sign::Negative"
                        |) in
                      M.alloc (|
                        Value.StructTuple "alloy_primitives::signed::sign::Sign::Positive" []
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::arith::Neg"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("Output", InstanceField.Ty _Output); ("neg", InstanceField.Method neg) ].
    End Impl_core_ops_arith_Neg_for_alloy_primitives_signed_sign_Sign.
    
    Module Impl_core_ops_bit_Not_for_alloy_primitives_signed_sign_Sign.
      Definition Self : Ty.t := Ty.path "alloy_primitives::signed::sign::Sign".
      
      (*     type Output = Self; *)
      Definition _Output : Ty.t := Ty.path "alloy_primitives::signed::sign::Sign".
      
      (*
          fn not(self) -> Self::Output {
              match self {
                  Self::Positive => Self::Negative,
                  Self::Negative => Self::Positive,
              }
          }
      *)
      Definition not (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.path "alloy_primitives::signed::sign::Sign" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "alloy_primitives::signed::sign::Sign::Positive"
                        |) in
                      M.alloc (|
                        Value.StructTuple "alloy_primitives::signed::sign::Sign::Negative" []
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "alloy_primitives::signed::sign::Sign::Negative"
                        |) in
                      M.alloc (|
                        Value.StructTuple "alloy_primitives::signed::sign::Sign::Positive" []
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::bit::Not"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("Output", InstanceField.Ty _Output); ("not", InstanceField.Method not) ].
    End Impl_core_ops_bit_Not_for_alloy_primitives_signed_sign_Sign.
    
    Module Impl_core_fmt_Display_for_alloy_primitives_signed_sign_Sign.
      Definition Self : Ty.t := Ty.path "alloy_primitives::signed::sign::Sign".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              match (self, f.sign_plus()) {
                  (Self::Positive, false) => Ok(()),
                  _ => f.write_char(self.as_char()),
              }
          }
      *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ]
                  ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.read (| self |);
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "sign_plus",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| f |) |) |) ]
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "alloy_primitives::signed::sign::Sign::Positive"
                        |) in
                      let _ :=
                        is_constant_or_break_match (| M.read (| γ0_1 |), Value.Bool false |) in
                      M.alloc (|
                        Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_trait_method (|
                            "core::fmt::Write",
                            Ty.path "core::fmt::Formatter",
                            [],
                            [],
                            "write_char",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.call_closure (|
                              Ty.path "char",
                              M.get_associated_function (|
                                Ty.path "alloy_primitives::signed::sign::Sign",
                                "as_char",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_alloy_primitives_signed_sign_Sign.
    
    Module Impl_alloy_primitives_signed_sign_Sign.
      Definition Self : Ty.t := Ty.path "alloy_primitives::signed::sign::Sign".
      
      (*
          pub const fn const_eq(self, other: Self) -> bool {
              self as i8 == other as i8
          }
      *)
      Definition const_eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              Ty.path "bool",
              BinOp.eq,
              [
                M.cast (Ty.path "i8") (M.read (| self |));
                M.cast (Ty.path "i8") (M.read (| other |))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_const_eq :
        M.IsAssociatedFunction.C Self "const_eq" const_eq.
      Admitted.
      Global Typeclasses Opaque const_eq.
      
      (*
          pub const fn is_positive(&self) -> bool {
              matches!(self, Self::Positive)
          }
      *)
      Definition is_positive (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.path "bool" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "alloy_primitives::signed::sign::Sign::Positive"
                        |) in
                      M.alloc (| Value.Bool true |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_positive :
        M.IsAssociatedFunction.C Self "is_positive" is_positive.
      Admitted.
      Global Typeclasses Opaque is_positive.
      
      (*
          pub const fn is_negative(&self) -> bool {
              matches!(self, Self::Negative)
          }
      *)
      Definition is_negative (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.path "bool" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "alloy_primitives::signed::sign::Sign::Negative"
                        |) in
                      M.alloc (| Value.Bool true |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_negative :
        M.IsAssociatedFunction.C Self "is_negative" is_negative.
      Admitted.
      Global Typeclasses Opaque is_negative.
      
      (*
          pub const fn as_char(&self) -> char {
              match self {
                  Self::Positive => '+',
                  Self::Negative => '-',
              }
          }
      *)
      Definition as_char (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.path "char" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "alloy_primitives::signed::sign::Sign::Positive"
                        |) in
                      M.alloc (| Value.UnicodeChar 43 |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "alloy_primitives::signed::sign::Sign::Negative"
                        |) in
                      M.alloc (| Value.UnicodeChar 45 |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_as_char : M.IsAssociatedFunction.C Self "as_char" as_char.
      Admitted.
      Global Typeclasses Opaque as_char.
    End Impl_alloy_primitives_signed_sign_Sign.
  End sign.
End signed.
