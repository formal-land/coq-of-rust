(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module utils.
  Module units.
    Definition value_MAX_U64_EXPONENT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U8 19 |))).
    
    Global Instance Instance_IsConstant_value_MAX_U64_EXPONENT :
      M.IsFunction.C "alloy_primitives::utils::units::MAX_U64_EXPONENT" value_MAX_U64_EXPONENT.
    Admitted.
    Global Typeclasses Opaque value_MAX_U64_EXPONENT.
    
    (*
    pub fn parse_ether(eth: &str) -> Result<U256, UnitsError> {
        ParseUnits::parse_units(eth, Unit::ETHER).map(Into::into)
    }
    *)
    Definition parse_ether (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ eth ] =>
        ltac:(M.monadic
          (let eth := M.alloc (| eth |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "ruint::Uint")
                  [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                  [];
                Ty.path "alloy_primitives::utils::units::UnitsError"
              ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "alloy_primitives::utils::units::ParseUnits";
                  Ty.path "alloy_primitives::utils::units::UnitsError"
                ],
              "map",
              [],
              [
                Ty.apply
                  (Ty.path "ruint::Uint")
                  [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                  [];
                Ty.function
                  [ Ty.path "alloy_primitives::utils::units::ParseUnits" ]
                  (Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [])
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "alloy_primitives::utils::units::ParseUnits";
                    Ty.path "alloy_primitives::utils::units::UnitsError"
                  ],
                M.get_associated_function (|
                  Ty.path "alloy_primitives::utils::units::ParseUnits",
                  "parse_units",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| eth |) |) |);
                  M.read (|
                    get_associated_constant (|
                      Ty.path "alloy_primitives::utils::units::Unit",
                      "ETHER",
                      Ty.path "alloy_primitives::utils::units::Unit"
                    |)
                  |)
                ]
              |);
              M.get_trait_method (|
                "core::convert::Into",
                Ty.path "alloy_primitives::utils::units::ParseUnits",
                [],
                [
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    []
                ],
                "into",
                [],
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_parse_ether :
      M.IsFunction.C "alloy_primitives::utils::units::parse_ether" parse_ether.
    Admitted.
    Global Typeclasses Opaque parse_ether.
    
    (*
    pub fn parse_units<K, E>(amount: &str, units: K) -> Result<ParseUnits, UnitsError>
    where
        K: TryInto<Unit, Error = E>,
        UnitsError: From<E>,
    {
        ParseUnits::parse_units(amount, units.try_into()?)
    }
    *)
    Definition parse_units (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ K; E ], [ amount; units ] =>
        ltac:(M.monadic
          (let amount := M.alloc (| amount |) in
          let units := M.alloc (| units |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "alloy_primitives::utils::units::ParseUnits";
                    Ty.path "alloy_primitives::utils::units::UnitsError"
                  ],
                M.get_associated_function (|
                  Ty.path "alloy_primitives::utils::units::ParseUnits",
                  "parse_units",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| amount |) |) |);
                  M.read (|
                    M.match_operator (|
                      Some (Ty.path "alloy_primitives::utils::units::Unit"),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.path "core::convert::Infallible"; E ];
                              Ty.path "alloy_primitives::utils::units::Unit"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "alloy_primitives::utils::units::Unit"; E ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.path "alloy_primitives::utils::units::Unit"; E ],
                              M.get_trait_method (|
                                "core::convert::TryInto",
                                K,
                                [],
                                [ Ty.path "alloy_primitives::utils::units::Unit" ],
                                "try_into",
                                [],
                                []
                              |),
                              [ M.read (| units |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "alloy_primitives::utils::units::ParseUnits";
                                          Ty.path "alloy_primitives::utils::units::UnitsError"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "alloy_primitives::utils::units::ParseUnits";
                                            Ty.path "alloy_primitives::utils::units::UnitsError"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [ Ty.path "core::convert::Infallible"; E ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_parse_units :
      M.IsFunction.C "alloy_primitives::utils::units::parse_units" parse_units.
    Admitted.
    Global Typeclasses Opaque parse_units.
    
    (*
    pub fn format_ether<T: Into<ParseUnits>>(amount: T) -> String {
        amount.into().format_units(Unit::ETHER)
    }
    *)
    Definition format_ether (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ amount ] =>
        ltac:(M.monadic
          (let amount := M.alloc (| amount |) in
          M.call_closure (|
            Ty.path "alloc::string::String",
            M.get_associated_function (|
              Ty.path "alloy_primitives::utils::units::ParseUnits",
              "format_units",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.alloc (|
                  M.call_closure (|
                    Ty.path "alloy_primitives::utils::units::ParseUnits",
                    M.get_trait_method (|
                      "core::convert::Into",
                      T,
                      [],
                      [ Ty.path "alloy_primitives::utils::units::ParseUnits" ],
                      "into",
                      [],
                      []
                    |),
                    [ M.read (| amount |) ]
                  |)
                |)
              |);
              M.read (|
                get_associated_constant (|
                  Ty.path "alloy_primitives::utils::units::Unit",
                  "ETHER",
                  Ty.path "alloy_primitives::utils::units::Unit"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_format_ether :
      M.IsFunction.C "alloy_primitives::utils::units::format_ether" format_ether.
    Admitted.
    Global Typeclasses Opaque format_ether.
    
    (*
    pub fn format_units<T, K, E>(amount: T, units: K) -> Result<String, UnitsError>
    where
        T: Into<ParseUnits>,
        K: TryInto<Unit, Error = E>,
        UnitsError: From<E>,
    {
        units.try_into().map(|units| amount.into().format_units(units)).map_err(UnitsError::from)
    }
    *)
    Definition format_units (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T; K; E ], [ amount; units ] =>
        ltac:(M.monadic
          (let amount := M.alloc (| amount |) in
          let units := M.alloc (| units |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.path "alloc::string::String";
                Ty.path "alloy_primitives::utils::units::UnitsError"
              ],
            M.get_associated_function (|
              Ty.apply (Ty.path "core::result::Result") [] [ Ty.path "alloc::string::String"; E ],
              "map_err",
              [],
              [
                Ty.path "alloy_primitives::utils::units::UnitsError";
                Ty.function [ E ] (Ty.path "alloy_primitives::utils::units::UnitsError")
              ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::result::Result") [] [ Ty.path "alloc::string::String"; E ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.path "alloy_primitives::utils::units::Unit"; E ],
                  "map",
                  [],
                  [
                    Ty.path "alloc::string::String";
                    Ty.function
                      [ Ty.tuple [ Ty.path "alloy_primitives::utils::units::Unit" ] ]
                      (Ty.path "alloc::string::String")
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.path "alloy_primitives::utils::units::Unit"; E ],
                    M.get_trait_method (|
                      "core::convert::TryInto",
                      K,
                      [],
                      [ Ty.path "alloy_primitives::utils::units::Unit" ],
                      "try_into",
                      [],
                      []
                    |),
                    [ M.read (| units |) ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Some
                                (Ty.function
                                  [ Ty.tuple [ Ty.path "alloy_primitives::utils::units::Unit" ] ]
                                  (Ty.path "alloc::string::String")),
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let units := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.path "alloc::string::String",
                                      M.get_associated_function (|
                                        Ty.path "alloy_primitives::utils::units::ParseUnits",
                                        "format_units",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "alloy_primitives::utils::units::ParseUnits",
                                              M.get_trait_method (|
                                                "core::convert::Into",
                                                T,
                                                [],
                                                [
                                                  Ty.path
                                                    "alloy_primitives::utils::units::ParseUnits"
                                                ],
                                                "into",
                                                [],
                                                []
                                              |),
                                              [ M.read (| amount |) ]
                                            |)
                                          |)
                                        |);
                                        M.read (| units |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |);
              M.get_trait_method (|
                "core::convert::From",
                Ty.path "alloy_primitives::utils::units::UnitsError",
                [],
                [ E ],
                "from",
                [],
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_format_units :
      M.IsFunction.C "alloy_primitives::utils::units::format_units" format_units.
    Admitted.
    Global Typeclasses Opaque format_units.
    
    (*
    Enum UnitsError
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "InvalidUnit";
            item := StructTuple [ Ty.path "alloc::string::String" ];
          };
          {
            name := "ParseSigned";
            item := StructTuple [ Ty.path "alloy_primitives::signed::errors::ParseSignedError" ];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_UnitsError_InvalidUnit :
      M.IsDiscriminant "alloy_primitives::utils::units::UnitsError::InvalidUnit" 0.
    Axiom IsDiscriminant_UnitsError_ParseSigned :
      M.IsDiscriminant "alloy_primitives::utils::units::UnitsError::ParseSigned" 1.
    
    Module Impl_core_fmt_Debug_for_alloy_primitives_utils_units_UnitsError.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::UnitsError".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                Some
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ]),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::UnitsError::InvalidUnit",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "InvalidUnit" |) |)
                            |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::UnitsError::ParseSigned",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "ParseSigned" |) |)
                            |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |))
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_alloy_primitives_utils_units_UnitsError.
    
    Module Impl_core_error_Error_for_alloy_primitives_utils_units_UnitsError.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::UnitsError".
      
      (*
          fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
              match self {
                  Self::InvalidUnit(_) => None,
                  Self::ParseSigned(e) => Some(e),
              }
          }
      *)
      Definition source (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Some
                  (Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ] ]),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::UnitsError::InvalidUnit",
                          0
                        |) in
                      M.alloc (| Value.StructTuple "core::option::Option::None" [] |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::UnitsError::ParseSigned",
                          0
                        |) in
                      let e := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| e |) |) |))
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::error::Error"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("source", InstanceField.Method source) ].
    End Impl_core_error_Error_for_alloy_primitives_utils_units_UnitsError.
    
    Module Impl_core_fmt_Display_for_alloy_primitives_utils_units_UnitsError.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::UnitsError".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              match self {
                  Self::InvalidUnit(s) => write!(f, "{s:?} is not a valid unit"),
                  Self::ParseSigned(e) => e.fmt(f),
              }
          }
      *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                Some
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ]),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::UnitsError::InvalidUnit",
                          0
                        |) in
                      let s := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 1
                                ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [ mk_str (| "" |); mk_str (| " is not a valid unit" |) ]
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_debug",
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "alloc::string::String" ]
                                                ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.borrow (| Pointer.Kind.Ref, s |) |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::UnitsError::ParseSigned",
                          0
                        |) in
                      let e := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_trait_method (|
                            "core::fmt::Display",
                            Ty.path "alloy_primitives::signed::errors::ParseSignedError",
                            [],
                            [],
                            "fmt",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| e |) |) |);
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_alloy_primitives_utils_units_UnitsError.
    
    Module Impl_core_convert_From_ruint_string_ParseError_for_alloy_primitives_utils_units_UnitsError.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::UnitsError".
      
      (*
          fn from(value: ruint::ParseError) -> Self {
              Self::ParseSigned(value.into())
          }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::UnitsError::ParseSigned"
              [
                M.call_closure (|
                  Ty.path "alloy_primitives::signed::errors::ParseSignedError",
                  M.get_trait_method (|
                    "core::convert::Into",
                    Ty.path "ruint::string::ParseError",
                    [],
                    [ Ty.path "alloy_primitives::signed::errors::ParseSignedError" ],
                    "into",
                    [],
                    []
                  |),
                  [ M.read (| value |) ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "ruint::string::ParseError" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_ruint_string_ParseError_for_alloy_primitives_utils_units_UnitsError.
    
    Module Impl_core_convert_From_alloy_primitives_signed_errors_ParseSignedError_for_alloy_primitives_utils_units_UnitsError.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::UnitsError".
      
      (*
          fn from(value: ParseSignedError) -> Self {
              Self::ParseSigned(value)
          }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::UnitsError::ParseSigned"
              [ M.read (| value |) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "alloy_primitives::signed::errors::ParseSignedError" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_alloy_primitives_signed_errors_ParseSignedError_for_alloy_primitives_utils_units_UnitsError.
    
    (*
    Enum ParseUnits
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "U256";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    []
                ];
          };
          {
            name := "I256";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "alloy_primitives::signed::int::Signed")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    []
                ];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_ParseUnits_U256 :
      M.IsDiscriminant "alloy_primitives::utils::units::ParseUnits::U256" 0.
    Axiom IsDiscriminant_ParseUnits_I256 :
      M.IsDiscriminant "alloy_primitives::utils::units::ParseUnits::I256" 1.
    
    Module Impl_core_clone_Clone_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        None,
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_marker_Copy_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_fmt_Debug_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                Some
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ]),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::U256",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "U256" |) |) |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::I256",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "I256" |) |) |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |))
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_marker_StructuralPartialEq_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_cmp_PartialEq_alloy_primitives_utils_units_ParseUnits_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "alloy_primitives::utils::units::ParseUnits" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "alloy_primitives::utils::units::ParseUnits" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.alloc (|
                LogicalOp.and (|
                  M.call_closure (|
                    Ty.path "bool",
                    BinOp.eq,
                    [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
                  |),
                  ltac:(M.monadic
                    (M.read (|
                      M.match_operator (|
                        Some (Ty.path "bool"),
                        M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "alloy_primitives::utils::units::ParseUnits::U256",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "alloy_primitives::utils::units::ParseUnits::U256",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            []
                                        ]
                                    ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                    M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "alloy_primitives::utils::units::ParseUnits::I256",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "alloy_primitives::utils::units::ParseUnits::I256",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloy_primitives::signed::int::Signed")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloy_primitives::signed::int::Signed")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            []
                                        ]
                                    ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                    M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    Ty.path "never",
                                    M.get_function (| "core::intrinsics::unreachable", [], [] |),
                                    []
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |)))
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "alloy_primitives::utils::units::ParseUnits" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_alloy_primitives_utils_units_ParseUnits_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_cmp_Eq_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        None,
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_cmp_PartialOrd_alloy_primitives_utils_units_ParseUnits_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (* PartialOrd *)
      Definition partial_cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "alloy_primitives::utils::units::ParseUnits" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "alloy_primitives::utils::units::ParseUnits" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.match_operator (|
                Some
                  (Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "core::cmp::Ordering" ]),
                M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "alloy_primitives::utils::units::ParseUnits::U256",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "alloy_primitives::utils::units::ParseUnits::U256",
                          0
                        |) in
                      let __arg1_0 := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "core::cmp::Ordering" ],
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            [],
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ],
                            "partial_cmp",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __arg1_0 |) |) |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "alloy_primitives::utils::units::ParseUnits::I256",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "alloy_primitives::utils::units::ParseUnits::I256",
                          0
                        |) in
                      let __arg1_0 := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "core::cmp::Ordering" ],
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.apply
                              (Ty.path "alloy_primitives::signed::int::Signed")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            [],
                            [
                              Ty.apply
                                (Ty.path "alloy_primitives::signed::int::Signed")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ],
                            "partial_cmp",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __arg1_0 |) |) |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "core::cmp::Ordering" ],
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "isize",
                            [],
                            [ Ty.path "isize" ],
                            "partial_cmp",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                            |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialOrd"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "alloy_primitives::utils::units::ParseUnits" ]
          Self
          (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
    End Impl_core_cmp_PartialOrd_alloy_primitives_utils_units_ParseUnits_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_cmp_Ord_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (* Ord *)
      Definition cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "alloy_primitives::utils::units::ParseUnits" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "alloy_primitives::utils::units::ParseUnits" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.match_operator (|
                Some (Ty.path "core::cmp::Ordering"),
                M.alloc (|
                  M.call_closure (|
                    Ty.path "core::cmp::Ordering",
                    M.get_trait_method (|
                      "core::cmp::Ord",
                      Ty.path "isize",
                      [],
                      [],
                      "cmp",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let _ := M.is_struct_tuple (| γ, "core::cmp::Ordering::Equal" |) in
                      M.match_operator (|
                        Some (Ty.path "core::cmp::Ordering"),
                        M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "alloy_primitives::utils::units::ParseUnits::U256",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "alloy_primitives::utils::units::ParseUnits::U256",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "core::cmp::Ordering",
                                  M.get_trait_method (|
                                    "core::cmp::Ord",
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    [],
                                    [],
                                    "cmp",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| __self_0 |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| __arg1_0 |) |)
                                    |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "alloy_primitives::utils::units::ParseUnits::I256",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "alloy_primitives::utils::units::ParseUnits::I256",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "core::cmp::Ordering",
                                  M.get_trait_method (|
                                    "core::cmp::Ord",
                                    Ty.apply
                                      (Ty.path "alloy_primitives::signed::int::Signed")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    [],
                                    [],
                                    "cmp",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| __self_0 |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| __arg1_0 |) |)
                                    |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    Ty.path "never",
                                    M.get_function (| "core::intrinsics::unreachable", [], [] |),
                                    []
                                  |)
                                |)
                              |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let cmp := M.copy (| γ |) in
                      cmp))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Ord"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
    End Impl_core_cmp_Ord_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_From_alloy_primitives_utils_units_ParseUnits_for_ruint_Uint_Usize_256_Usize_4.
      Definition Self : Ty.t :=
        Ty.apply
          (Ty.path "ruint::Uint")
          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
          [].
      
      (*
          fn from(value: ParseUnits) -> Self {
              value.get_absolute()
          }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "ruint::Uint")
                [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                [],
              M.get_associated_function (|
                Ty.path "alloy_primitives::utils::units::ParseUnits",
                "get_absolute",
                [],
                []
              |),
              [ M.read (| value |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "alloy_primitives::utils::units::ParseUnits" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_alloy_primitives_utils_units_ParseUnits_for_ruint_Uint_Usize_256_Usize_4.
    
    Module Impl_core_convert_From_alloy_primitives_utils_units_ParseUnits_for_alloy_primitives_signed_int_Signed_Usize_256_Usize_4.
      Definition Self : Ty.t :=
        Ty.apply
          (Ty.path "alloy_primitives::signed::int::Signed")
          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
          [].
      
      (*
          fn from(value: ParseUnits) -> Self {
              value.get_signed()
          }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloy_primitives::signed::int::Signed")
                [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                [],
              M.get_associated_function (|
                Ty.path "alloy_primitives::utils::units::ParseUnits",
                "get_signed",
                [],
                []
              |),
              [ M.read (| value |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "alloy_primitives::utils::units::ParseUnits" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_alloy_primitives_utils_units_ParseUnits_for_alloy_primitives_signed_int_Signed_Usize_256_Usize_4.
    
    Module Impl_core_fmt_Display_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              match self {
                  Self::U256(val) => val.fmt(f),
                  Self::I256(val) => val.fmt(f),
              }
          }
      *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                Some
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ]),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::U256",
                          0
                        |) in
                      let val := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_trait_method (|
                            "core::fmt::Display",
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            [],
                            [],
                            "fmt",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| val |) |) |);
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::I256",
                          0
                        |) in
                      let val := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_trait_method (|
                            "core::fmt::Display",
                            Ty.apply
                              (Ty.path "alloy_primitives::signed::int::Signed")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            [],
                            [],
                            "fmt",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| val |) |) |);
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_From_u8_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
                  fn from(value: $t) -> Self {
                      Self::$convert($convert::try_from(value).unwrap())
                  }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::ParseUnits::U256"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.apply
                          (Ty.path "ruint::from::ToUintError")
                          []
                          [
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              []
                          ]
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::from::ToUintError")
                            []
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "core::convert::TryFrom",
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        [],
                        [ Ty.path "u8" ],
                        "try_from",
                        [],
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "u8" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u8_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_From_u16_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
                  fn from(value: $t) -> Self {
                      Self::$convert($convert::try_from(value).unwrap())
                  }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::ParseUnits::U256"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.apply
                          (Ty.path "ruint::from::ToUintError")
                          []
                          [
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              []
                          ]
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::from::ToUintError")
                            []
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "core::convert::TryFrom",
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        [],
                        [ Ty.path "u16" ],
                        "try_from",
                        [],
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "u16" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u16_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_From_u32_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
                  fn from(value: $t) -> Self {
                      Self::$convert($convert::try_from(value).unwrap())
                  }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::ParseUnits::U256"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.apply
                          (Ty.path "ruint::from::ToUintError")
                          []
                          [
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              []
                          ]
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::from::ToUintError")
                            []
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "core::convert::TryFrom",
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        [],
                        [ Ty.path "u32" ],
                        "try_from",
                        [],
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "u32" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u32_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_From_u64_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
                  fn from(value: $t) -> Self {
                      Self::$convert($convert::try_from(value).unwrap())
                  }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::ParseUnits::U256"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.apply
                          (Ty.path "ruint::from::ToUintError")
                          []
                          [
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              []
                          ]
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::from::ToUintError")
                            []
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "core::convert::TryFrom",
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        [],
                        [ Ty.path "u64" ],
                        "try_from",
                        [],
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "u64" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u64_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_From_u128_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
                  fn from(value: $t) -> Self {
                      Self::$convert($convert::try_from(value).unwrap())
                  }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::ParseUnits::U256"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.apply
                          (Ty.path "ruint::from::ToUintError")
                          []
                          [
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              []
                          ]
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::from::ToUintError")
                            []
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "core::convert::TryFrom",
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        [],
                        [ Ty.path "u128" ],
                        "try_from",
                        [],
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "u128" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u128_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_From_usize_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
                  fn from(value: $t) -> Self {
                      Self::$convert($convert::try_from(value).unwrap())
                  }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::ParseUnits::U256"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.apply
                          (Ty.path "ruint::from::ToUintError")
                          []
                          [
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              []
                          ]
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.apply
                            (Ty.path "ruint::from::ToUintError")
                            []
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "core::convert::TryFrom",
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        [],
                        [ Ty.path "usize" ],
                        "try_from",
                        [],
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "usize" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_usize_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_From_ruint_Uint_Usize_256_Usize_4_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
                  fn from(value: $t) -> Self {
                      Self::$convert($convert::try_from(value).unwrap())
                  }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::ParseUnits::U256"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "core::convert::Infallible"
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "core::convert::Infallible"
                        ],
                      M.get_trait_method (|
                        "core::convert::TryFrom",
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        [],
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            []
                        ],
                        "try_from",
                        [],
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "ruint::Uint")
              [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
              []
          ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_ruint_Uint_Usize_256_Usize_4_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_From_i8_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
                  fn from(value: $t) -> Self {
                      Self::$convert($convert::try_from(value).unwrap())
                  }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::ParseUnits::I256"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloy_primitives::signed::int::Signed")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "alloy_primitives::signed::errors::BigIntConversionError"
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::signed::int::Signed")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "alloy_primitives::signed::errors::BigIntConversionError"
                        ],
                      M.get_trait_method (|
                        "core::convert::TryFrom",
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        [],
                        [ Ty.path "i8" ],
                        "try_from",
                        [],
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "i8" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i8_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_From_i16_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
                  fn from(value: $t) -> Self {
                      Self::$convert($convert::try_from(value).unwrap())
                  }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::ParseUnits::I256"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloy_primitives::signed::int::Signed")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "alloy_primitives::signed::errors::BigIntConversionError"
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::signed::int::Signed")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "alloy_primitives::signed::errors::BigIntConversionError"
                        ],
                      M.get_trait_method (|
                        "core::convert::TryFrom",
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        [],
                        [ Ty.path "i16" ],
                        "try_from",
                        [],
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "i16" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i16_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_From_i32_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
                  fn from(value: $t) -> Self {
                      Self::$convert($convert::try_from(value).unwrap())
                  }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::ParseUnits::I256"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloy_primitives::signed::int::Signed")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "alloy_primitives::signed::errors::BigIntConversionError"
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::signed::int::Signed")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "alloy_primitives::signed::errors::BigIntConversionError"
                        ],
                      M.get_trait_method (|
                        "core::convert::TryFrom",
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        [],
                        [ Ty.path "i32" ],
                        "try_from",
                        [],
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "i32" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i32_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_From_i64_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
                  fn from(value: $t) -> Self {
                      Self::$convert($convert::try_from(value).unwrap())
                  }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::ParseUnits::I256"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloy_primitives::signed::int::Signed")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "alloy_primitives::signed::errors::BigIntConversionError"
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::signed::int::Signed")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "alloy_primitives::signed::errors::BigIntConversionError"
                        ],
                      M.get_trait_method (|
                        "core::convert::TryFrom",
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        [],
                        [ Ty.path "i64" ],
                        "try_from",
                        [],
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "i64" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i64_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_From_i128_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
                  fn from(value: $t) -> Self {
                      Self::$convert($convert::try_from(value).unwrap())
                  }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::ParseUnits::I256"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloy_primitives::signed::int::Signed")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "alloy_primitives::signed::errors::BigIntConversionError"
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::signed::int::Signed")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "alloy_primitives::signed::errors::BigIntConversionError"
                        ],
                      M.get_trait_method (|
                        "core::convert::TryFrom",
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        [],
                        [ Ty.path "i128" ],
                        "try_from",
                        [],
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "i128" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i128_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_From_isize_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
                  fn from(value: $t) -> Self {
                      Self::$convert($convert::try_from(value).unwrap())
                  }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::ParseUnits::I256"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloy_primitives::signed::int::Signed")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "alloy_primitives::signed::errors::BigIntConversionError"
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::signed::int::Signed")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "alloy_primitives::signed::errors::BigIntConversionError"
                        ],
                      M.get_trait_method (|
                        "core::convert::TryFrom",
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        [],
                        [ Ty.path "isize" ],
                        "try_from",
                        [],
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "isize" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_isize_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_From_alloy_primitives_signed_int_Signed_Usize_256_Usize_4_for_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
                  fn from(value: $t) -> Self {
                      Self::$convert($convert::try_from(value).unwrap())
                  }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructTuple
              "alloy_primitives::utils::units::ParseUnits::I256"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloy_primitives::signed::int::Signed")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "core::convert::Infallible"
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::signed::int::Signed")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "core::convert::Infallible"
                        ],
                      M.get_trait_method (|
                        "core::convert::TryFrom",
                        Ty.apply
                          (Ty.path "alloy_primitives::signed::int::Signed")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::signed::int::Signed")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            []
                        ],
                        "try_from",
                        [],
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "alloy_primitives::signed::int::Signed")
              [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
              []
          ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_alloy_primitives_signed_int_Signed_Usize_256_Usize_4_for_alloy_primitives_utils_units_ParseUnits.
    
    Module Impl_core_convert_TryFrom_alloy_primitives_utils_units_ParseUnits_for_u64.
      Definition Self : Ty.t := Ty.path "u64".
      
      (*             type Error = <$t as TryFrom<U256>>::Error; *)
      Definition _Error : Ty.t :=
        Ty.associated_in_trait
          "core::convert::TryFrom"
          []
          [
            Ty.apply
              (Ty.path "ruint::Uint")
              [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
              []
          ]
          (Ty.path "u64")
          "Error".
      
      (*
                  fn try_from(value: ParseUnits) -> Result<Self, Self::Error> {
                      <$t>::try_from(value.get_absolute())
                  }
      *)
      Definition try_from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "u64";
                  Ty.apply (Ty.path "ruint::from::FromUintError") [] [ Ty.path "u64" ]
                ],
              M.get_trait_method (|
                "core::convert::TryFrom",
                Ty.path "u64",
                [],
                [
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    []
                ],
                "try_from",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.path "alloy_primitives::utils::units::ParseUnits",
                    "get_absolute",
                    [],
                    []
                  |),
                  [ M.read (| value |) ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "alloy_primitives::utils::units::ParseUnits" ]
          Self
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_alloy_primitives_utils_units_ParseUnits_for_u64.
    
    Module Impl_core_convert_TryFrom_alloy_primitives_utils_units_ParseUnits_for_u128.
      Definition Self : Ty.t := Ty.path "u128".
      
      (*             type Error = <$t as TryFrom<U256>>::Error; *)
      Definition _Error : Ty.t :=
        Ty.associated_in_trait
          "core::convert::TryFrom"
          []
          [
            Ty.apply
              (Ty.path "ruint::Uint")
              [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
              []
          ]
          (Ty.path "u128")
          "Error".
      
      (*
                  fn try_from(value: ParseUnits) -> Result<Self, Self::Error> {
                      <$t>::try_from(value.get_absolute())
                  }
      *)
      Definition try_from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "u128";
                  Ty.apply (Ty.path "ruint::from::FromUintError") [] [ Ty.path "u128" ]
                ],
              M.get_trait_method (|
                "core::convert::TryFrom",
                Ty.path "u128",
                [],
                [
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    []
                ],
                "try_from",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.path "alloy_primitives::utils::units::ParseUnits",
                    "get_absolute",
                    [],
                    []
                  |),
                  [ M.read (| value |) ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "alloy_primitives::utils::units::ParseUnits" ]
          Self
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_alloy_primitives_utils_units_ParseUnits_for_u128.
    
    Module Impl_alloy_primitives_utils_units_ParseUnits.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::ParseUnits".
      
      (*
          pub fn parse_units(amount: &str, unit: Unit) -> Result<Self, UnitsError> {
              let exponent = unit.get() as usize;
      
              let mut amount = amount.to_string();
              let negative = amount.starts_with('-');
              let dec_len = if let Some(di) = amount.find('.') {
                  amount.remove(di);
                  amount[di..].len()
              } else {
                  0
              };
              let amount = amount.as_str();
      
              if dec_len > exponent {
                  // Truncate the decimal part if it is longer than the exponent
                  let amount = &amount[..(amount.len() - (dec_len - exponent))];
                  if negative {
                      // Edge case: We have removed the entire number and only the negative sign is left.
                      //            Return 0 as a I256 given the input was signed.
                      if amount == "-" {
                          Ok(Self::I256(I256::ZERO))
                      } else {
                          Ok(Self::I256(I256::from_dec_str(amount)?))
                      }
                  } else {
                      Ok(Self::U256(U256::from_str_radix(amount, 10)?))
                  }
              } else if negative {
                  // Edge case: Only a negative sign was given, return 0 as a I256 given the input was
                  // signed.
                  if amount == "-" {
                      Ok(Self::I256(I256::ZERO))
                  } else {
                      let mut n = I256::from_dec_str(amount)?;
                      n *= I256::try_from(10u8)
                          .unwrap()
                          .checked_pow(U256::from(exponent - dec_len))
                          .ok_or(UnitsError::ParseSigned(ParseSignedError::IntegerOverflow))?;
                      Ok(Self::I256(n))
                  }
              } else {
                  let mut a_uint = U256::from_str_radix(amount, 10)?;
                  a_uint *= U256::from(10)
                      .checked_pow(U256::from(exponent - dec_len))
                      .ok_or(UnitsError::ParseSigned(ParseSignedError::IntegerOverflow))?;
                  Ok(Self::U256(a_uint))
              }
          }
      *)
      Definition parse_units (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ amount; unit_ ] =>
          ltac:(M.monadic
            (let amount := M.alloc (| amount |) in
            let unit_ := M.alloc (| unit_ |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ exponent : Ty.path "usize" :=
                    M.alloc (|
                      M.cast
                        (Ty.path "usize")
                        (M.call_closure (|
                          Ty.path "u8",
                          M.get_associated_function (|
                            Ty.path "alloy_primitives::utils::units::Unit",
                            "get",
                            [],
                            []
                          |),
                          [ M.read (| unit_ |) ]
                        |))
                    |) in
                  let~ amount : Ty.path "alloc::string::String" :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "alloc::string::String",
                        M.get_trait_method (|
                          "alloc::string::ToString",
                          Ty.path "str",
                          [],
                          [],
                          "to_string",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| amount |) |) |) ]
                      |)
                    |) in
                  let~ negative : Ty.path "bool" :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_associated_function (|
                          Ty.path "str",
                          "starts_with",
                          [],
                          [ Ty.path "char" ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.path "alloc::string::String",
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, amount |) ]
                              |)
                            |)
                          |);
                          Value.UnicodeChar 45
                        ]
                      |)
                    |) in
                  let~ dec_len : Ty.path "usize" :=
                    M.copy (|
                      M.match_operator (|
                        Some (Ty.path "usize"),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_associated_function (|
                                      Ty.path "str",
                                      "find",
                                      [],
                                      [ Ty.path "char" ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.path "alloc::string::String",
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, amount |) ]
                                          |)
                                        |)
                                      |);
                                      Value.UnicodeChar 46
                                    ]
                                  |)
                                |) in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let di := M.copy (| γ0_0 |) in
                              let~ _ : Ty.path "char" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "char",
                                    M.get_associated_function (|
                                      Ty.path "alloc::string::String",
                                      "remove",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.MutRef, amount |); M.read (| di |) ]
                                  |)
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (| Ty.path "str", "len", [], [] |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                          M.get_trait_method (|
                                            "core::ops::index::Index",
                                            Ty.path "alloc::string::String",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::RangeFrom")
                                                []
                                                [ Ty.path "usize" ]
                                            ],
                                            "index",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (| Pointer.Kind.Ref, amount |);
                                            Value.StructRecord
                                              "core::ops::range::RangeFrom"
                                              [ ("start", M.read (| di |)) ]
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 0 |)))
                        ]
                      |)
                    |) in
                  let~ amount : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_associated_function (|
                          Ty.path "alloc::string::String",
                          "as_str",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, amount |) ]
                      |)
                    |) in
                  M.match_operator (|
                    Some
                      (Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.path "alloy_primitives::utils::units::ParseUnits";
                          Ty.path "alloy_primitives::utils::units::UnitsError"
                        ]),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.gt,
                                  [ M.read (| dec_len |); M.read (| exponent |) ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ amount : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
                            M.alloc (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                    M.get_trait_method (|
                                      "core::ops::index::Index",
                                      Ty.path "str",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::ops::range::RangeTo")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                      "index",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| amount |) |)
                                      |);
                                      Value.StructRecord
                                        "core::ops::range::RangeTo"
                                        [
                                          ("end_",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.sub,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.path "str",
                                                    "len",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| amount |) |)
                                                    |)
                                                  ]
                                                |);
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.sub,
                                                  [ M.read (| dec_len |); M.read (| exponent |) ]
                                                |)
                                              ]
                                            |))
                                        ]
                                    ]
                                  |)
                                |)
                              |)
                            |) in
                          M.match_operator (|
                            Some
                              (Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "alloy_primitives::utils::units::ParseUnits";
                                  Ty.path "alloy_primitives::utils::units::UnitsError"
                                ]),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use negative in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.match_operator (|
                                    Some
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "alloy_primitives::utils::units::ParseUnits";
                                          Ty.path "alloy_primitives::utils::units::UnitsError"
                                        ]),
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_trait_method (|
                                                    "core::cmp::PartialEq",
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                                    [],
                                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                                    "eq",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (| Pointer.Kind.Ref, amount |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (| mk_str (| "-" |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            Value.StructTuple
                                              "core::result::Result::Ok"
                                              [
                                                Value.StructTuple
                                                  "alloy_primitives::utils::units::ParseUnits::I256"
                                                  [
                                                    M.read (|
                                                      get_associated_constant (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloy_primitives::signed::int::Signed")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          [],
                                                        "ZERO",
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloy_primitives::signed::int::Signed")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          []
                                                      |)
                                                    |)
                                                  ]
                                              ]
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            Value.StructTuple
                                              "core::result::Result::Ok"
                                              [
                                                Value.StructTuple
                                                  "alloy_primitives::utils::units::ParseUnits::I256"
                                                  [
                                                    M.read (|
                                                      M.match_operator (|
                                                        Some
                                                          (Ty.apply
                                                            (Ty.path
                                                              "alloy_primitives::signed::int::Signed")
                                                            [
                                                              Value.Integer IntegerKind.Usize 256;
                                                              Value.Integer IntegerKind.Usize 4
                                                            ]
                                                            []),
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::ops::control_flow::ControlFlow")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "alloy_primitives::signed::errors::ParseSignedError"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloy_primitives::signed::int::Signed")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      256;
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      4
                                                                  ]
                                                                  []
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::Try",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "alloy_primitives::signed::int::Signed")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        256;
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        4
                                                                    ]
                                                                    [];
                                                                  Ty.path
                                                                    "alloy_primitives::signed::errors::ParseSignedError"
                                                                ],
                                                              [],
                                                              [],
                                                              "branch",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloy_primitives::signed::int::Signed")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          256;
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          4
                                                                      ]
                                                                      [];
                                                                    Ty.path
                                                                      "alloy_primitives::signed::errors::ParseSignedError"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "alloy_primitives::signed::int::Signed")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        256;
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        4
                                                                    ]
                                                                    [],
                                                                  "from_dec_str",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| amount |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Break",
                                                                  0
                                                                |) in
                                                              let residual := M.copy (| γ0_0 |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    M.return_ (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "alloy_primitives::utils::units::ParseUnits";
                                                                            Ty.path
                                                                              "alloy_primitives::utils::units::UnitsError"
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::try_trait::FromResidual",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "alloy_primitives::utils::units::ParseUnits";
                                                                              Ty.path
                                                                                "alloy_primitives::utils::units::UnitsError"
                                                                            ],
                                                                          [],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "core::convert::Infallible";
                                                                                Ty.path
                                                                                  "alloy_primitives::signed::errors::ParseSignedError"
                                                                              ]
                                                                          ],
                                                                          "from_residual",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [ M.read (| residual |) ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                                  0
                                                                |) in
                                                              let val := M.copy (| γ0_0 |) in
                                                              val))
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                              ]
                                          |)))
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.alloc (|
                                    Value.StructTuple
                                      "core::result::Result::Ok"
                                      [
                                        Value.StructTuple
                                          "alloy_primitives::utils::units::ParseUnits::U256"
                                          [
                                            M.read (|
                                              M.match_operator (|
                                                Some
                                                  (Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    []),
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::ops::control_flow::ControlFlow")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path "ruint::string::ParseError"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "ruint::Uint")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          []
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "ruint::Uint")
                                                            [
                                                              Value.Integer IntegerKind.Usize 256;
                                                              Value.Integer IntegerKind.Usize 4
                                                            ]
                                                            [];
                                                          Ty.path "ruint::string::ParseError"
                                                        ],
                                                      [],
                                                      [],
                                                      "branch",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "ruint::Uint")
                                                              [
                                                                Value.Integer IntegerKind.Usize 256;
                                                                Value.Integer IntegerKind.Usize 4
                                                              ]
                                                              [];
                                                            Ty.path "ruint::string::ParseError"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "ruint::Uint")
                                                            [
                                                              Value.Integer IntegerKind.Usize 256;
                                                              Value.Integer IntegerKind.Usize 4
                                                            ]
                                                            [],
                                                          "from_str_radix",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| amount |) |)
                                                          |);
                                                          Value.Integer IntegerKind.U64 10
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "alloy_primitives::utils::units::ParseUnits";
                                                                    Ty.path
                                                                      "alloy_primitives::utils::units::UnitsError"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "alloy_primitives::utils::units::ParseUnits";
                                                                      Ty.path
                                                                        "alloy_primitives::utils::units::UnitsError"
                                                                    ],
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "ruint::string::ParseError"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  [],
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |)
                                            |)
                                          ]
                                      ]
                                  |)))
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Some
                              (Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "alloy_primitives::utils::units::ParseUnits";
                                  Ty.path "alloy_primitives::utils::units::UnitsError"
                                ]),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use negative in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.match_operator (|
                                    Some
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "alloy_primitives::utils::units::ParseUnits";
                                          Ty.path "alloy_primitives::utils::units::UnitsError"
                                        ]),
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_trait_method (|
                                                    "core::cmp::PartialEq",
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                                    [],
                                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                                    "eq",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (| Pointer.Kind.Ref, amount |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (| mk_str (| "-" |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            Value.StructTuple
                                              "core::result::Result::Ok"
                                              [
                                                Value.StructTuple
                                                  "alloy_primitives::utils::units::ParseUnits::I256"
                                                  [
                                                    M.read (|
                                                      get_associated_constant (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloy_primitives::signed::int::Signed")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          [],
                                                        "ZERO",
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloy_primitives::signed::int::Signed")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          []
                                                      |)
                                                    |)
                                                  ]
                                              ]
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let~ n :
                                              Ty.apply
                                                (Ty.path "alloy_primitives::signed::int::Signed")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                [] :=
                                            M.copy (|
                                              M.match_operator (|
                                                Some
                                                  (Ty.apply
                                                    (Ty.path
                                                      "alloy_primitives::signed::int::Signed")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    []),
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::ops::control_flow::ControlFlow")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "alloy_primitives::signed::errors::ParseSignedError"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloy_primitives::signed::int::Signed")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          []
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloy_primitives::signed::int::Signed")
                                                            [
                                                              Value.Integer IntegerKind.Usize 256;
                                                              Value.Integer IntegerKind.Usize 4
                                                            ]
                                                            [];
                                                          Ty.path
                                                            "alloy_primitives::signed::errors::ParseSignedError"
                                                        ],
                                                      [],
                                                      [],
                                                      "branch",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloy_primitives::signed::int::Signed")
                                                              [
                                                                Value.Integer IntegerKind.Usize 256;
                                                                Value.Integer IntegerKind.Usize 4
                                                              ]
                                                              [];
                                                            Ty.path
                                                              "alloy_primitives::signed::errors::ParseSignedError"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloy_primitives::signed::int::Signed")
                                                            [
                                                              Value.Integer IntegerKind.Usize 256;
                                                              Value.Integer IntegerKind.Usize 4
                                                            ]
                                                            [],
                                                          "from_dec_str",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| amount |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "alloy_primitives::utils::units::ParseUnits";
                                                                    Ty.path
                                                                      "alloy_primitives::utils::units::UnitsError"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "alloy_primitives::utils::units::ParseUnits";
                                                                      Ty.path
                                                                        "alloy_primitives::utils::units::UnitsError"
                                                                    ],
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "alloy_primitives::signed::errors::ParseSignedError"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  [],
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |)
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_trait_method (|
                                                  "core::ops::arith::MulAssign",
                                                  Ty.apply
                                                    (Ty.path
                                                      "alloy_primitives::signed::int::Signed")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    [],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "alloy_primitives::signed::int::Signed")
                                                      [
                                                        Value.Integer IntegerKind.Usize 256;
                                                        Value.Integer IntegerKind.Usize 4
                                                      ]
                                                      []
                                                  ],
                                                  "mul_assign",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (| Pointer.Kind.MutRef, n |);
                                                  M.read (|
                                                    M.match_operator (|
                                                      Some
                                                        (Ty.apply
                                                          (Ty.path
                                                            "alloy_primitives::signed::int::Signed")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          []),
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::ops::control_flow::ControlFlow")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "alloy_primitives::utils::units::UnitsError"
                                                                ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloy_primitives::signed::int::Signed")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                []
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::Try",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloy_primitives::signed::int::Signed")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      256;
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      4
                                                                  ]
                                                                  [];
                                                                Ty.path
                                                                  "alloy_primitives::utils::units::UnitsError"
                                                              ],
                                                            [],
                                                            [],
                                                            "branch",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "alloy_primitives::signed::int::Signed")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        256;
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        4
                                                                    ]
                                                                    [];
                                                                  Ty.path
                                                                    "alloy_primitives::utils::units::UnitsError"
                                                                ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloy_primitives::signed::int::Signed")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          256;
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          4
                                                                      ]
                                                                      []
                                                                  ],
                                                                "ok_or",
                                                                [],
                                                                [
                                                                  Ty.path
                                                                    "alloy_primitives::utils::units::UnitsError"
                                                                ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloy_primitives::signed::int::Signed")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            256;
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            4
                                                                        ]
                                                                        []
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloy_primitives::signed::int::Signed")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          256;
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          4
                                                                      ]
                                                                      [],
                                                                    "checked_pow",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloy_primitives::signed::int::Signed")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            256;
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            4
                                                                        ]
                                                                        [],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloy_primitives::signed::int::Signed")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  256;
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  4
                                                                              ]
                                                                              [];
                                                                            Ty.path
                                                                              "alloy_primitives::signed::errors::BigIntConversionError"
                                                                          ],
                                                                        "unwrap",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloy_primitives::signed::int::Signed")
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    256;
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    4
                                                                                ]
                                                                                [];
                                                                              Ty.path
                                                                                "alloy_primitives::signed::errors::BigIntConversionError"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::convert::TryFrom",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloy_primitives::signed::int::Signed")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  256;
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  4
                                                                              ]
                                                                              [],
                                                                            [],
                                                                            [ Ty.path "u8" ],
                                                                            "try_from",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.U8
                                                                              10
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "ruint::Uint")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            256;
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            4
                                                                        ]
                                                                        [],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "ruint::Uint")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              256;
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              4
                                                                          ]
                                                                          [],
                                                                        "from",
                                                                        [],
                                                                        [ Ty.path "usize" ]
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.sub,
                                                                          [
                                                                            M.read (| exponent |);
                                                                            M.read (| dec_len |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                Value.StructTuple
                                                                  "alloy_primitives::utils::units::UnitsError::ParseSigned"
                                                                  [
                                                                    Value.StructTuple
                                                                      "alloy_primitives::signed::errors::ParseSignedError::IntegerOverflow"
                                                                      []
                                                                  ]
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                0
                                                              |) in
                                                            let residual := M.copy (| γ0_0 |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "alloy_primitives::utils::units::ParseUnits";
                                                                          Ty.path
                                                                            "alloy_primitives::utils::units::UnitsError"
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::FromResidual",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "alloy_primitives::utils::units::ParseUnits";
                                                                            Ty.path
                                                                              "alloy_primitives::utils::units::UnitsError"
                                                                          ],
                                                                        [],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "alloy_primitives::utils::units::UnitsError"
                                                                            ]
                                                                        ],
                                                                        "from_residual",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [ M.read (| residual |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                0
                                                              |) in
                                                            let val := M.copy (| γ0_0 |) in
                                                            val))
                                                      ]
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            Value.StructTuple
                                              "core::result::Result::Ok"
                                              [
                                                Value.StructTuple
                                                  "alloy_primitives::utils::units::ParseUnits::I256"
                                                  [ M.read (| n |) ]
                                              ]
                                          |)))
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let~ a_uint :
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [] :=
                                    M.copy (|
                                      M.match_operator (|
                                        Some
                                          (Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            []),
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::ops::control_flow::ControlFlow")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "ruint::string::ParseError"
                                                  ];
                                                Ty.apply
                                                  (Ty.path "ruint::Uint")
                                                  [
                                                    Value.Integer IntegerKind.Usize 256;
                                                    Value.Integer IntegerKind.Usize 4
                                                  ]
                                                  []
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    [];
                                                  Ty.path "ruint::string::ParseError"
                                                ],
                                              [],
                                              [],
                                              "branch",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [
                                                        Value.Integer IntegerKind.Usize 256;
                                                        Value.Integer IntegerKind.Usize 4
                                                      ]
                                                      [];
                                                    Ty.path "ruint::string::ParseError"
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    [],
                                                  "from_str_radix",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| amount |) |)
                                                  |);
                                                  Value.Integer IntegerKind.U64 10
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path
                                                              "alloy_primitives::utils::units::ParseUnits";
                                                            Ty.path
                                                              "alloy_primitives::utils::units::UnitsError"
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            []
                                                            [
                                                              Ty.path
                                                                "alloy_primitives::utils::units::ParseUnits";
                                                              Ty.path
                                                                "alloy_primitives::utils::units::UnitsError"
                                                            ],
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path "ruint::string::ParseError"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_trait_method (|
                                          "core::ops::arith::MulAssign",
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              []
                                          ],
                                          "mul_assign",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, a_uint |);
                                          M.read (|
                                            M.match_operator (|
                                              Some
                                                (Ty.apply
                                                  (Ty.path "ruint::Uint")
                                                  [
                                                    Value.Integer IntegerKind.Usize 256;
                                                    Value.Integer IntegerKind.Usize 4
                                                  ]
                                                  []),
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "alloy_primitives::utils::units::UnitsError"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "ruint::Uint")
                                                        [
                                                          Value.Integer IntegerKind.Usize 256;
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                        []
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "ruint::Uint")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          [];
                                                        Ty.path
                                                          "alloy_primitives::utils::units::UnitsError"
                                                      ],
                                                    [],
                                                    [],
                                                    "branch",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "ruint::Uint")
                                                            [
                                                              Value.Integer IntegerKind.Usize 256;
                                                              Value.Integer IntegerKind.Usize 4
                                                            ]
                                                            [];
                                                          Ty.path
                                                            "alloy_primitives::utils::units::UnitsError"
                                                        ],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "ruint::Uint")
                                                              [
                                                                Value.Integer IntegerKind.Usize 256;
                                                                Value.Integer IntegerKind.Usize 4
                                                              ]
                                                              []
                                                          ],
                                                        "ok_or",
                                                        [],
                                                        [
                                                          Ty.path
                                                            "alloy_primitives::utils::units::UnitsError"
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                []
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "ruint::Uint")
                                                              [
                                                                Value.Integer IntegerKind.Usize 256;
                                                                Value.Integer IntegerKind.Usize 4
                                                              ]
                                                              [],
                                                            "checked_pow",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                [],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "ruint::Uint")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      256;
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      4
                                                                  ]
                                                                  [],
                                                                "from",
                                                                [],
                                                                [ Ty.path "i32" ]
                                                              |),
                                                              [ Value.Integer IntegerKind.I32 10 ]
                                                            |);
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                [],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "ruint::Uint")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      256;
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      4
                                                                  ]
                                                                  [],
                                                                "from",
                                                                [],
                                                                [ Ty.path "usize" ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.sub,
                                                                  [
                                                                    M.read (| exponent |);
                                                                    M.read (| dec_len |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |);
                                                        Value.StructTuple
                                                          "alloy_primitives::utils::units::UnitsError::ParseSigned"
                                                          [
                                                            Value.StructTuple
                                                              "alloy_primitives::signed::errors::ParseSignedError::IntegerOverflow"
                                                              []
                                                          ]
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "alloy_primitives::utils::units::ParseUnits";
                                                                  Ty.path
                                                                    "alloy_primitives::utils::units::UnitsError"
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "alloy_primitives::utils::units::ParseUnits";
                                                                    Ty.path
                                                                      "alloy_primitives::utils::units::UnitsError"
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "alloy_primitives::utils::units::UnitsError"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                [],
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    |) in
                                  M.alloc (|
                                    Value.StructTuple
                                      "core::result::Result::Ok"
                                      [
                                        Value.StructTuple
                                          "alloy_primitives::utils::units::ParseUnits::U256"
                                          [ M.read (| a_uint |) ]
                                      ]
                                  |)))
                            ]
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_parse_units :
        M.IsAssociatedFunction.C Self "parse_units" parse_units.
      Admitted.
      Global Typeclasses Opaque parse_units.
      
      (*
          pub fn format_units(&self, mut unit: Unit) -> String {
              // Edge case: If the number is signed and the unit is the largest possible unit, we need to
              //            subtract 1 from the unit to avoid overflow.
              if self.is_signed() && unit == Unit::MAX {
                  unit = Unit::new(Unit::MAX.get() - 1).unwrap();
              }
              let units = unit.get() as usize;
              let exp10 = unit.wei();
      
              // TODO: `decimals` are formatted twice because U256 does not support alignment
              // (`:0>width`).
              match *self {
                  Self::U256(amount) => {
                      let integer = amount / exp10;
                      let decimals = (amount % exp10).to_string();
                      format!("{integer}.{decimals:0>units$}")
                  }
                  Self::I256(amount) => {
                      let exp10 = I256::from_raw(exp10);
                      let sign = if amount.is_negative() { "-" } else { "" };
                      let integer = (amount / exp10).twos_complement();
                      let decimals = ((amount % exp10).twos_complement()).to_string();
                      format!("{sign}{integer}.{decimals:0>units$}")
                  }
              }
          }
      *)
      Definition format_units (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; unit_ ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let unit_ := M.alloc (| unit_ |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.and (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.path "alloy_primitives::utils::units::ParseUnits",
                                    "is_signed",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.path "alloy_primitives::utils::units::Unit",
                                      [],
                                      [ Ty.path "alloy_primitives::utils::units::Unit" ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, unit_ |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_associated_constant (|
                                          Ty.path "alloy_primitives::utils::units::Unit",
                                          "MAX",
                                          Ty.path "alloy_primitives::utils::units::Unit"
                                        |)
                                      |)
                                    ]
                                  |)))
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.write (|
                              unit_,
                              M.call_closure (|
                                Ty.path "alloy_primitives::utils::units::Unit",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.path "alloy_primitives::utils::units::Unit" ],
                                  "unwrap",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "alloy_primitives::utils::units::Unit" ],
                                    M.get_associated_function (|
                                      Ty.path "alloy_primitives::utils::units::Unit",
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path "u8",
                                        BinOp.Wrap.sub,
                                        [
                                          M.call_closure (|
                                            Ty.path "u8",
                                            M.get_associated_function (|
                                              Ty.path "alloy_primitives::utils::units::Unit",
                                              "get",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (|
                                                get_associated_constant (|
                                                  Ty.path "alloy_primitives::utils::units::Unit",
                                                  "MAX",
                                                  Ty.path "alloy_primitives::utils::units::Unit"
                                                |)
                                              |)
                                            ]
                                          |);
                                          Value.Integer IntegerKind.U8 1
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ units : Ty.path "usize" :=
                M.alloc (|
                  M.cast
                    (Ty.path "usize")
                    (M.call_closure (|
                      Ty.path "u8",
                      M.get_associated_function (|
                        Ty.path "alloy_primitives::utils::units::Unit",
                        "get",
                        [],
                        []
                      |),
                      [ M.read (| unit_ |) ]
                    |))
                |) in
              let~ exp10 :
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      [],
                    M.get_associated_function (|
                      Ty.path "alloy_primitives::utils::units::Unit",
                      "wei",
                      [],
                      []
                    |),
                    [ M.read (| unit_ |) ]
                  |)
                |) in
              M.match_operator (|
                Some (Ty.path "alloc::string::String"),
                M.deref (| M.read (| self |) |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::U256",
                          0
                        |) in
                      let amount := M.copy (| γ0_0 |) in
                      let~ integer :
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            M.get_trait_method (|
                              "core::ops::arith::Div",
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  []
                              ],
                              "div",
                              [],
                              []
                            |),
                            [ M.read (| amount |); M.read (| exp10 |) ]
                          |)
                        |) in
                      let~ decimals : Ty.path "alloc::string::String" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "alloc::string::String",
                            M.get_trait_method (|
                              "alloc::string::ToString",
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [],
                              [],
                              [],
                              "to_string",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    M.get_trait_method (|
                                      "core::ops::arith::Rem",
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      ],
                                      "rem",
                                      [],
                                      []
                                    |),
                                    [ M.read (| amount |); M.read (| exp10 |) ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "alloc::string::String",
                          M.get_function (|
                            "core::hint::must_use",
                            [],
                            [ Ty.path "alloc::string::String" ]
                          |),
                          [
                            M.read (|
                              let~ res : Ty.path "alloc::string::String" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (| "alloc::fmt::format", [], [] |),
                                    [
                                      M.call_closure (|
                                        Ty.path "core::fmt::Arguments",
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::Arguments",
                                          "new_v1_formatted",
                                          [],
                                          []
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Value.Array
                                                      [ mk_str (| "" |); mk_str (| "." |) ]
                                                  |)
                                                |)
                                              |)
                                            |));
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            "new_display",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                []
                                                            ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  integer
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            "new_display",
                                                            [],
                                                            [ Ty.path "alloc::string::String" ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  decimals
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            "from_usize",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  units
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |));
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::rt::Placeholder",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Placeholder",
                                                            "new",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            Value.Integer IntegerKind.Usize 0;
                                                            Value.UnicodeChar 32;
                                                            Value.StructTuple
                                                              "core::fmt::rt::Alignment::Unknown"
                                                              [];
                                                            Value.Integer IntegerKind.U32 0;
                                                            Value.StructTuple
                                                              "core::fmt::rt::Count::Implied"
                                                              [];
                                                            Value.StructTuple
                                                              "core::fmt::rt::Count::Implied"
                                                              []
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::rt::Placeholder",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Placeholder",
                                                            "new",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            Value.Integer IntegerKind.Usize 1;
                                                            Value.UnicodeChar 48;
                                                            Value.StructTuple
                                                              "core::fmt::rt::Alignment::Right"
                                                              [];
                                                            Value.Integer IntegerKind.U32 0;
                                                            Value.StructTuple
                                                              "core::fmt::rt::Count::Implied"
                                                              [];
                                                            Value.StructTuple
                                                              "core::fmt::rt::Count::Param"
                                                              [ Value.Integer IntegerKind.Usize 2 ]
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |));
                                          M.call_closure (|
                                            Ty.path "core::fmt::rt::UnsafeArg",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::UnsafeArg",
                                              "new",
                                              [],
                                              []
                                            |),
                                            []
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |) in
                              res
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::I256",
                          0
                        |) in
                      let amount := M.copy (| γ0_0 |) in
                      let~ exp10 :
                          Ty.apply
                            (Ty.path "alloy_primitives::signed::int::Signed")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloy_primitives::signed::int::Signed")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloy_primitives::signed::int::Signed")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [],
                              "from_raw",
                              [],
                              []
                            |),
                            [ M.read (| exp10 |) ]
                          |)
                        |) in
                      let~ sign : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
                        M.copy (|
                          M.match_operator (|
                            Some (Ty.apply (Ty.path "&") [] [ Ty.path "str" ]),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloy_primitives::signed::int::Signed")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [],
                                            "is_negative",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, amount |) ]
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (| mk_str (| "-" |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.alloc (|
                                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "" |) |) |)
                                  |)))
                            ]
                          |)
                        |) in
                      let~ integer :
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloy_primitives::signed::int::Signed")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [],
                              "twos_complement",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloy_primitives::signed::int::Signed")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                M.get_trait_method (|
                                  "core::ops::arith::Div",
                                  Ty.apply
                                    (Ty.path "alloy_primitives::signed::int::Signed")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "alloy_primitives::signed::int::Signed")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  ],
                                  "div",
                                  [],
                                  []
                                |),
                                [ M.read (| amount |); M.read (| exp10 |) ]
                              |)
                            ]
                          |)
                        |) in
                      let~ decimals : Ty.path "alloc::string::String" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "alloc::string::String",
                            M.get_trait_method (|
                              "alloc::string::ToString",
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [],
                              [],
                              [],
                              "to_string",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloy_primitives::signed::int::Signed")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [],
                                      "twos_complement",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "alloy_primitives::signed::int::Signed")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [],
                                        M.get_trait_method (|
                                          "core::ops::arith::Rem",
                                          Ty.apply
                                            (Ty.path "alloy_primitives::signed::int::Signed")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "alloy_primitives::signed::int::Signed")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              []
                                          ],
                                          "rem",
                                          [],
                                          []
                                        |),
                                        [ M.read (| amount |); M.read (| exp10 |) ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "alloc::string::String",
                          M.get_function (|
                            "core::hint::must_use",
                            [],
                            [ Ty.path "alloc::string::String" ]
                          |),
                          [
                            M.read (|
                              let~ res : Ty.path "alloc::string::String" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (| "alloc::fmt::format", [], [] |),
                                    [
                                      M.call_closure (|
                                        Ty.path "core::fmt::Arguments",
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::Arguments",
                                          "new_v1_formatted",
                                          [],
                                          []
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        mk_str (| "" |);
                                                        mk_str (| "" |);
                                                        mk_str (| "." |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |));
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            "new_display",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  sign
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            "new_display",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                []
                                                            ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  integer
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            "new_display",
                                                            [],
                                                            [ Ty.path "alloc::string::String" ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  decimals
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            "from_usize",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  units
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |));
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::rt::Placeholder",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Placeholder",
                                                            "new",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            Value.Integer IntegerKind.Usize 0;
                                                            Value.UnicodeChar 32;
                                                            Value.StructTuple
                                                              "core::fmt::rt::Alignment::Unknown"
                                                              [];
                                                            Value.Integer IntegerKind.U32 0;
                                                            Value.StructTuple
                                                              "core::fmt::rt::Count::Implied"
                                                              [];
                                                            Value.StructTuple
                                                              "core::fmt::rt::Count::Implied"
                                                              []
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::rt::Placeholder",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Placeholder",
                                                            "new",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            Value.Integer IntegerKind.Usize 1;
                                                            Value.UnicodeChar 32;
                                                            Value.StructTuple
                                                              "core::fmt::rt::Alignment::Unknown"
                                                              [];
                                                            Value.Integer IntegerKind.U32 0;
                                                            Value.StructTuple
                                                              "core::fmt::rt::Count::Implied"
                                                              [];
                                                            Value.StructTuple
                                                              "core::fmt::rt::Count::Implied"
                                                              []
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::rt::Placeholder",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Placeholder",
                                                            "new",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            Value.Integer IntegerKind.Usize 2;
                                                            Value.UnicodeChar 48;
                                                            Value.StructTuple
                                                              "core::fmt::rt::Alignment::Right"
                                                              [];
                                                            Value.Integer IntegerKind.U32 0;
                                                            Value.StructTuple
                                                              "core::fmt::rt::Count::Implied"
                                                              [];
                                                            Value.StructTuple
                                                              "core::fmt::rt::Count::Param"
                                                              [ Value.Integer IntegerKind.Usize 3 ]
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |));
                                          M.call_closure (|
                                            Ty.path "core::fmt::rt::UnsafeArg",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::UnsafeArg",
                                              "new",
                                              [],
                                              []
                                            |),
                                            []
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |) in
                              res
                            |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_format_units :
        M.IsAssociatedFunction.C Self "format_units" format_units.
      Admitted.
      Global Typeclasses Opaque format_units.
      
      (*
          pub const fn is_signed(&self) -> bool {
              matches!(self, Self::I256(_))
          }
      *)
      Definition is_signed (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Some (Ty.path "bool"),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::I256",
                          0
                        |) in
                      M.alloc (| Value.Bool true |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_signed :
        M.IsAssociatedFunction.C Self "is_signed" is_signed.
      Admitted.
      Global Typeclasses Opaque is_signed.
      
      (*
          pub const fn is_unsigned(&self) -> bool {
              matches!(self, Self::U256(_))
          }
      *)
      Definition is_unsigned (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Some (Ty.path "bool"),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::U256",
                          0
                        |) in
                      M.alloc (| Value.Bool true |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_unsigned :
        M.IsAssociatedFunction.C Self "is_unsigned" is_unsigned.
      Admitted.
      Global Typeclasses Opaque is_unsigned.
      
      (*
          pub const fn is_negative(&self) -> bool {
              match self {
                  Self::U256(_) => false,
                  Self::I256(n) => n.is_negative(),
              }
          }
      *)
      Definition is_negative (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Some (Ty.path "bool"),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::U256",
                          0
                        |) in
                      M.alloc (| Value.Bool false |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::I256",
                          0
                        |) in
                      let n := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "bool",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloy_primitives::signed::int::Signed")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            "is_negative",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| n |) |) |) ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_negative :
        M.IsAssociatedFunction.C Self "is_negative" is_negative.
      Admitted.
      Global Typeclasses Opaque is_negative.
      
      (*
          pub const fn is_positive(&self) -> bool {
              match self {
                  Self::U256(_) => true,
                  Self::I256(n) => n.is_positive(),
              }
          }
      *)
      Definition is_positive (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Some (Ty.path "bool"),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::U256",
                          0
                        |) in
                      M.alloc (| Value.Bool true |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::I256",
                          0
                        |) in
                      let n := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "bool",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloy_primitives::signed::int::Signed")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            "is_positive",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| n |) |) |) ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_positive :
        M.IsAssociatedFunction.C Self "is_positive" is_positive.
      Admitted.
      Global Typeclasses Opaque is_positive.
      
      (*
          pub fn is_zero(&self) -> bool {
              match self {
                  Self::U256(n) => n.is_zero(),
                  Self::I256(n) => n.is_zero(),
              }
          }
      *)
      Definition is_zero (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Some (Ty.path "bool"),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::U256",
                          0
                        |) in
                      let n := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "bool",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            "is_zero",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| n |) |) |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::I256",
                          0
                        |) in
                      let n := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "bool",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloy_primitives::signed::int::Signed")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            "is_zero",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| n |) |) |) ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_zero : M.IsAssociatedFunction.C Self "is_zero" is_zero.
      Admitted.
      Global Typeclasses Opaque is_zero.
      
      (*
          pub const fn get_absolute(self) -> U256 {
              match self {
                  Self::U256(n) => n,
                  Self::I256(n) => n.into_raw(),
              }
          }
      *)
      Definition get_absolute (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Some
                  (Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    []),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::U256",
                          0
                        |) in
                      let n := M.copy (| γ0_0 |) in
                      n));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::I256",
                          0
                        |) in
                      let n := M.copy (| γ0_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloy_primitives::signed::int::Signed")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            "into_raw",
                            [],
                            []
                          |),
                          [ M.read (| n |) ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_absolute :
        M.IsAssociatedFunction.C Self "get_absolute" get_absolute.
      Admitted.
      Global Typeclasses Opaque get_absolute.
      
      (*
          pub const fn get_signed(self) -> I256 {
              match self {
                  Self::U256(n) => I256::from_raw(n),
                  Self::I256(n) => n,
              }
          }
      *)
      Definition get_signed (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Some
                  (Ty.apply
                    (Ty.path "alloy_primitives::signed::int::Signed")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    []),
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::U256",
                          0
                        |) in
                      let n := M.copy (| γ0_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloy_primitives::signed::int::Signed")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloy_primitives::signed::int::Signed")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            "from_raw",
                            [],
                            []
                          |),
                          [ M.read (| n |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "alloy_primitives::utils::units::ParseUnits::I256",
                          0
                        |) in
                      let n := M.copy (| γ0_0 |) in
                      n))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_signed :
        M.IsAssociatedFunction.C Self "get_signed" get_signed.
      Admitted.
      Global Typeclasses Opaque get_signed.
    End Impl_alloy_primitives_utils_units_ParseUnits.
    
    (* StructTuple
      {
        name := "Unit";
        const_params := [];
        ty_params := [];
        fields := [ Ty.path "u8" ];
      } *)
    
    Module Impl_core_clone_Clone_for_alloy_primitives_utils_units_Unit.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::Unit".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_alloy_primitives_utils_units_Unit.
    
    Module Impl_core_marker_Copy_for_alloy_primitives_utils_units_Unit.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::Unit".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_alloy_primitives_utils_units_Unit.
    
    Module Impl_core_fmt_Debug_for_alloy_primitives_utils_units_Unit.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::Unit".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_tuple_field1_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Unit" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_tuple_field (|
                              M.deref (| M.read (| self |) |),
                              "alloy_primitives::utils::units::Unit",
                              0
                            |)
                          |)
                        |)
                      |)
                    |)
                  |))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_alloy_primitives_utils_units_Unit.
    
    Module Impl_core_marker_StructuralPartialEq_for_alloy_primitives_utils_units_Unit.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::Unit".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_alloy_primitives_utils_units_Unit.
    
    Module Impl_core_cmp_PartialEq_alloy_primitives_utils_units_Unit_for_alloy_primitives_utils_units_Unit.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::Unit".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              Ty.path "bool",
              BinOp.eq,
              [
                M.read (|
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "alloy_primitives::utils::units::Unit",
                    0
                  |)
                |);
                M.read (|
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| other |) |),
                    "alloy_primitives::utils::units::Unit",
                    0
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "alloy_primitives::utils::units::Unit" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_alloy_primitives_utils_units_Unit_for_alloy_primitives_utils_units_Unit.
    
    Module Impl_core_cmp_Eq_for_alloy_primitives_utils_units_Unit.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::Unit".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_alloy_primitives_utils_units_Unit.
    
    Module Impl_core_cmp_PartialOrd_alloy_primitives_utils_units_Unit_for_alloy_primitives_utils_units_Unit.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::Unit".
      
      (* PartialOrd *)
      Definition partial_cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "core::cmp::Ordering" ],
              M.get_trait_method (|
                "core::cmp::PartialOrd",
                Ty.path "u8",
                [],
                [ Ty.path "u8" ],
                "partial_cmp",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_tuple_field (|
                        M.deref (| M.read (| self |) |),
                        "alloy_primitives::utils::units::Unit",
                        0
                      |)
                    |)
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_tuple_field (|
                        M.deref (| M.read (| other |) |),
                        "alloy_primitives::utils::units::Unit",
                        0
                      |)
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialOrd"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "alloy_primitives::utils::units::Unit" ]
          Self
          (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
    End Impl_core_cmp_PartialOrd_alloy_primitives_utils_units_Unit_for_alloy_primitives_utils_units_Unit.
    
    Module Impl_core_cmp_Ord_for_alloy_primitives_utils_units_Unit.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::Unit".
      
      (* Ord *)
      Definition cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              Ty.path "core::cmp::Ordering",
              M.get_trait_method (| "core::cmp::Ord", Ty.path "u8", [], [], "cmp", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_tuple_field (|
                        M.deref (| M.read (| self |) |),
                        "alloy_primitives::utils::units::Unit",
                        0
                      |)
                    |)
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_tuple_field (|
                        M.deref (| M.read (| other |) |),
                        "alloy_primitives::utils::units::Unit",
                        0
                      |)
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Ord"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
    End Impl_core_cmp_Ord_for_alloy_primitives_utils_units_Unit.
    
    Module Impl_core_fmt_Display_for_alloy_primitives_utils_units_Unit.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::Unit".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              self.get().fmt(f)
          }
      *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_trait_method (| "core::fmt::Display", Ty.path "u8", [], [], "fmt", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "u8",
                      M.get_associated_function (|
                        Ty.path "alloy_primitives::utils::units::Unit",
                        "get",
                        [],
                        []
                      |),
                      [ M.read (| M.deref (| M.read (| self |) |) |) ]
                    |)
                  |)
                |);
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_alloy_primitives_utils_units_Unit.
    
    Module Impl_core_convert_TryFrom_u8_for_alloy_primitives_utils_units_Unit.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::Unit".
      
      (*     type Error = UnitsError; *)
      Definition _Error : Ty.t := Ty.path "alloy_primitives::utils::units::UnitsError".
      
      (*
          fn try_from(value: u8) -> Result<Self, Self::Error> {
              Self::new(value).ok_or_else(|| UnitsError::InvalidUnit(value.to_string()))
          }
      *)
      Definition try_from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "alloy_primitives::utils::units::Unit";
                  Ty.path "alloy_primitives::utils::units::UnitsError"
                ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.path "alloy_primitives::utils::units::Unit" ],
                "ok_or_else",
                [],
                [
                  Ty.path "alloy_primitives::utils::units::UnitsError";
                  Ty.function [ Ty.tuple [] ] (Ty.path "alloy_primitives::utils::units::UnitsError")
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.path "alloy_primitives::utils::units::Unit" ],
                  M.get_associated_function (|
                    Ty.path "alloy_primitives::utils::units::Unit",
                    "new",
                    [],
                    []
                  |),
                  [ M.read (| value |) ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Some
                              (Ty.function
                                [ Ty.tuple [] ]
                                (Ty.path "alloy_primitives::utils::units::UnitsError")),
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (Value.StructTuple
                                    "alloy_primitives::utils::units::UnitsError::InvalidUnit"
                                    [
                                      M.call_closure (|
                                        Ty.path "alloc::string::String",
                                        M.get_trait_method (|
                                          "alloc::string::ToString",
                                          Ty.path "u8",
                                          [],
                                          [],
                                          "to_string",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, value |) ]
                                      |)
                                    ]))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "u8" ]
          Self
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u8_for_alloy_primitives_utils_units_Unit.
    
    Module Impl_core_convert_TryFrom_alloc_string_String_for_alloy_primitives_utils_units_Unit.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::Unit".
      
      (*     type Error = UnitsError; *)
      Definition _Error : Ty.t := Ty.path "alloy_primitives::utils::units::UnitsError".
      
      (*
          fn try_from(value: String) -> Result<Self, Self::Error> {
              value.parse()
          }
      *)
      Definition try_from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "alloy_primitives::utils::units::Unit";
                  Ty.path "alloy_primitives::utils::units::UnitsError"
                ],
              M.get_associated_function (|
                Ty.path "str",
                "parse",
                [],
                [ Ty.path "alloy_primitives::utils::units::Unit" ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.path "alloc::string::String",
                        [],
                        [],
                        "deref",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, value |) ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "alloc::string::String" ]
          Self
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_alloc_string_String_for_alloy_primitives_utils_units_Unit.
    
    Module Impl_core_convert_TryFrom_ref__alloc_string_String_for_alloy_primitives_utils_units_Unit.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::Unit".
      
      (*     type Error = UnitsError; *)
      Definition _Error : Ty.t := Ty.path "alloy_primitives::utils::units::UnitsError".
      
      (*
          fn try_from(value: &'a String) -> Result<Self, Self::Error> {
              value.parse()
          }
      *)
      Definition try_from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "alloy_primitives::utils::units::Unit";
                  Ty.path "alloy_primitives::utils::units::UnitsError"
                ],
              M.get_associated_function (|
                Ty.path "str",
                "parse",
                [],
                [ Ty.path "alloy_primitives::utils::units::Unit" ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.path "alloc::string::String",
                        [],
                        [],
                        "deref",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |) ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "&") [] [ Ty.path "alloc::string::String" ] ]
          Self
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_ref__alloc_string_String_for_alloy_primitives_utils_units_Unit.
    
    Module Impl_core_convert_TryFrom_ref__str_for_alloy_primitives_utils_units_Unit.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::Unit".
      
      (*     type Error = UnitsError; *)
      Definition _Error : Ty.t := Ty.path "alloy_primitives::utils::units::UnitsError".
      
      (*
          fn try_from(value: &str) -> Result<Self, Self::Error> {
              value.parse()
          }
      *)
      Definition try_from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "alloy_primitives::utils::units::Unit";
                  Ty.path "alloy_primitives::utils::units::UnitsError"
                ],
              M.get_associated_function (|
                Ty.path "str",
                "parse",
                [],
                [ Ty.path "alloy_primitives::utils::units::Unit" ]
              |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
          Self
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_ref__str_for_alloy_primitives_utils_units_Unit.
    
    Module Impl_core_str_traits_FromStr_for_alloy_primitives_utils_units_Unit.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::Unit".
      
      (*     type Err = UnitsError; *)
      Definition _Err : Ty.t := Ty.path "alloy_primitives::utils::units::UnitsError".
      
      (*
          fn from_str(s: &str) -> Result<Self, Self::Err> {
              if let Ok(unit) = crate::U8::from_str(s) {
                  return Self::new(unit.to()).ok_or_else(|| UnitsError::InvalidUnit(s.to_string()));
              }
      
              Ok(match s.to_ascii_lowercase().as_str() {
                  "eth" | "ether" => Self::ETHER,
                  "pwei" | "milli" | "milliether" | "finney" => Self::PWEI,
                  "twei" | "micro" | "microether" | "szabo" => Self::TWEI,
                  "gwei" | "nano" | "nanoether" | "shannon" => Self::GWEI,
                  "mwei" | "pico" | "picoether" | "lovelace" => Self::MWEI,
                  "kwei" | "femto" | "femtoether" | "babbage" => Self::KWEI,
                  "wei" => Self::WEI,
                  _ => return Err(UnitsError::InvalidUnit(s.to_string())),
              })
          }
      *)
      Definition from_str (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ s ] =>
          ltac:(M.monadic
            (let s := M.alloc (| s |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                        [];
                                      Ty.path "ruint::string::ParseError"
                                    ],
                                  M.get_trait_method (|
                                    "core::str::traits::FromStr",
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                      [],
                                    [],
                                    [],
                                    "from_str",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                                |)
                              |) in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::result::Result::Ok",
                                0
                              |) in
                            let unit_ := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "alloy_primitives::utils::units::Unit";
                                          Ty.path "alloy_primitives::utils::units::UnitsError"
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "alloy_primitives::utils::units::Unit" ],
                                        "ok_or_else",
                                        [],
                                        [
                                          Ty.path "alloy_primitives::utils::units::UnitsError";
                                          Ty.function
                                            [ Ty.tuple [] ]
                                            (Ty.path "alloy_primitives::utils::units::UnitsError")
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "alloy_primitives::utils::units::Unit" ],
                                          M.get_associated_function (|
                                            Ty.path "alloy_primitives::utils::units::Unit",
                                            "new",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.path "u8",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "ruint::Uint")
                                                  [
                                                    Value.Integer IntegerKind.Usize 8;
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                  [],
                                                "to",
                                                [],
                                                [ Ty.path "u8" ]
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, unit_ |) ]
                                            |)
                                          ]
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Some
                                                      (Ty.function
                                                        [ Ty.tuple [] ]
                                                        (Ty.path
                                                          "alloy_primitives::utils::units::UnitsError")),
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (Value.StructTuple
                                                            "alloy_primitives::utils::units::UnitsError::InvalidUnit"
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "alloc::string::String",
                                                                M.get_trait_method (|
                                                                  "alloc::string::ToString",
                                                                  Ty.path "str",
                                                                  [],
                                                                  [],
                                                                  "to_string",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| s |) |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      [
                        M.read (|
                          M.match_operator (|
                            Some (Ty.path "alloy_primitives::utils::units::Unit"),
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                M.get_associated_function (|
                                  Ty.path "alloc::string::String",
                                  "as_str",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "alloc::string::String",
                                        M.get_associated_function (|
                                          Ty.path "str",
                                          "to_ascii_lowercase",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| s |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.find_or_pattern (|
                                    γ,
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "eth" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "ether" |)
                                            |) in
                                          Value.Tuple []))
                                    ],
                                    fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [] =>
                                          ltac:(M.monadic
                                            (get_associated_constant (|
                                              Ty.path "alloy_primitives::utils::units::Unit",
                                              "ETHER",
                                              Ty.path "alloy_primitives::utils::units::Unit"
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.find_or_pattern (|
                                    γ,
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "pwei" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "milli" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "milliether" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "finney" |)
                                            |) in
                                          Value.Tuple []))
                                    ],
                                    fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [] =>
                                          ltac:(M.monadic
                                            (get_associated_constant (|
                                              Ty.path "alloy_primitives::utils::units::Unit",
                                              "PWEI",
                                              Ty.path "alloy_primitives::utils::units::Unit"
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.find_or_pattern (|
                                    γ,
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "twei" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "micro" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "microether" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "szabo" |)
                                            |) in
                                          Value.Tuple []))
                                    ],
                                    fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [] =>
                                          ltac:(M.monadic
                                            (get_associated_constant (|
                                              Ty.path "alloy_primitives::utils::units::Unit",
                                              "TWEI",
                                              Ty.path "alloy_primitives::utils::units::Unit"
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.find_or_pattern (|
                                    γ,
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "gwei" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "nano" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "nanoether" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "shannon" |)
                                            |) in
                                          Value.Tuple []))
                                    ],
                                    fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [] =>
                                          ltac:(M.monadic
                                            (get_associated_constant (|
                                              Ty.path "alloy_primitives::utils::units::Unit",
                                              "GWEI",
                                              Ty.path "alloy_primitives::utils::units::Unit"
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.find_or_pattern (|
                                    γ,
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "mwei" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "pico" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "picoether" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "lovelace" |)
                                            |) in
                                          Value.Tuple []))
                                    ],
                                    fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [] =>
                                          ltac:(M.monadic
                                            (get_associated_constant (|
                                              Ty.path "alloy_primitives::utils::units::Unit",
                                              "MWEI",
                                              Ty.path "alloy_primitives::utils::units::Unit"
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.find_or_pattern (|
                                    γ,
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "kwei" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "femto" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "femtoether" |)
                                            |) in
                                          Value.Tuple []));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              mk_str (| "babbage" |)
                                            |) in
                                          Value.Tuple []))
                                    ],
                                    fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [] =>
                                          ltac:(M.monadic
                                            (get_associated_constant (|
                                              Ty.path "alloy_primitives::utils::units::Unit",
                                              "KWEI",
                                              Ty.path "alloy_primitives::utils::units::Unit"
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      mk_str (| "wei" |)
                                    |) in
                                  get_associated_constant (|
                                    Ty.path "alloy_primitives::utils::units::Unit",
                                    "WEI",
                                    Ty.path "alloy_primitives::utils::units::Unit"
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::result::Result::Err"
                                            [
                                              Value.StructTuple
                                                "alloy_primitives::utils::units::UnitsError::InvalidUnit"
                                                [
                                                  M.call_closure (|
                                                    Ty.path "alloc::string::String",
                                                    M.get_trait_method (|
                                                      "alloc::string::ToString",
                                                      Ty.path "str",
                                                      [],
                                                      [],
                                                      "to_string",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| s |) |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)))
                            ]
                          |)
                        |)
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::str::traits::FromStr"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("Err", InstanceField.Ty _Err); ("from_str", InstanceField.Method from_str) ].
    End Impl_core_str_traits_FromStr_for_alloy_primitives_utils_units_Unit.
    
    Module Impl_alloy_primitives_utils_units_Unit.
      Definition Self : Ty.t := Ty.path "alloy_primitives::utils::units::Unit".
      
      (*     pub const WEI: Self = unsafe { Self::new_unchecked(0) }; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_WEI (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "alloy_primitives::utils::units::Unit",
              M.get_associated_function (|
                Ty.path "alloy_primitives::utils::units::Unit",
                "new_unchecked",
                [],
                []
              |),
              [ Value.Integer IntegerKind.U8 0 ]
            |)
          |))).
      
      Global Instance AssociatedConstant_value_WEI : M.IsAssociatedFunction.C Self "WEI" value_WEI.
      Admitted.
      Global Typeclasses Opaque value_WEI.
      
      (*     pub const Wei: Self = Self::WEI; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_Wei (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (get_associated_constant (|
            Ty.path "alloy_primitives::utils::units::Unit",
            "WEI",
            Ty.path "alloy_primitives::utils::units::Unit"
          |))).
      
      Global Instance AssociatedConstant_value_Wei : M.IsAssociatedFunction.C Self "Wei" value_Wei.
      Admitted.
      Global Typeclasses Opaque value_Wei.
      
      (*     pub const KWEI: Self = unsafe { Self::new_unchecked(3) }; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_KWEI (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "alloy_primitives::utils::units::Unit",
              M.get_associated_function (|
                Ty.path "alloy_primitives::utils::units::Unit",
                "new_unchecked",
                [],
                []
              |),
              [ Value.Integer IntegerKind.U8 3 ]
            |)
          |))).
      
      Global Instance AssociatedConstant_value_KWEI :
        M.IsAssociatedFunction.C Self "KWEI" value_KWEI.
      Admitted.
      Global Typeclasses Opaque value_KWEI.
      
      (*     pub const Kwei: Self = Self::KWEI; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_Kwei (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (get_associated_constant (|
            Ty.path "alloy_primitives::utils::units::Unit",
            "KWEI",
            Ty.path "alloy_primitives::utils::units::Unit"
          |))).
      
      Global Instance AssociatedConstant_value_Kwei :
        M.IsAssociatedFunction.C Self "Kwei" value_Kwei.
      Admitted.
      Global Typeclasses Opaque value_Kwei.
      
      (*     pub const MWEI: Self = unsafe { Self::new_unchecked(6) }; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_MWEI (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "alloy_primitives::utils::units::Unit",
              M.get_associated_function (|
                Ty.path "alloy_primitives::utils::units::Unit",
                "new_unchecked",
                [],
                []
              |),
              [ Value.Integer IntegerKind.U8 6 ]
            |)
          |))).
      
      Global Instance AssociatedConstant_value_MWEI :
        M.IsAssociatedFunction.C Self "MWEI" value_MWEI.
      Admitted.
      Global Typeclasses Opaque value_MWEI.
      
      (*     pub const Mwei: Self = Self::MWEI; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_Mwei (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (get_associated_constant (|
            Ty.path "alloy_primitives::utils::units::Unit",
            "MWEI",
            Ty.path "alloy_primitives::utils::units::Unit"
          |))).
      
      Global Instance AssociatedConstant_value_Mwei :
        M.IsAssociatedFunction.C Self "Mwei" value_Mwei.
      Admitted.
      Global Typeclasses Opaque value_Mwei.
      
      (*     pub const GWEI: Self = unsafe { Self::new_unchecked(9) }; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_GWEI (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "alloy_primitives::utils::units::Unit",
              M.get_associated_function (|
                Ty.path "alloy_primitives::utils::units::Unit",
                "new_unchecked",
                [],
                []
              |),
              [ Value.Integer IntegerKind.U8 9 ]
            |)
          |))).
      
      Global Instance AssociatedConstant_value_GWEI :
        M.IsAssociatedFunction.C Self "GWEI" value_GWEI.
      Admitted.
      Global Typeclasses Opaque value_GWEI.
      
      (*     pub const Gwei: Self = Self::GWEI; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_Gwei (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (get_associated_constant (|
            Ty.path "alloy_primitives::utils::units::Unit",
            "GWEI",
            Ty.path "alloy_primitives::utils::units::Unit"
          |))).
      
      Global Instance AssociatedConstant_value_Gwei :
        M.IsAssociatedFunction.C Self "Gwei" value_Gwei.
      Admitted.
      Global Typeclasses Opaque value_Gwei.
      
      (*     pub const TWEI: Self = unsafe { Self::new_unchecked(12) }; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_TWEI (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "alloy_primitives::utils::units::Unit",
              M.get_associated_function (|
                Ty.path "alloy_primitives::utils::units::Unit",
                "new_unchecked",
                [],
                []
              |),
              [ Value.Integer IntegerKind.U8 12 ]
            |)
          |))).
      
      Global Instance AssociatedConstant_value_TWEI :
        M.IsAssociatedFunction.C Self "TWEI" value_TWEI.
      Admitted.
      Global Typeclasses Opaque value_TWEI.
      
      (*     pub const Twei: Self = Self::TWEI; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_Twei (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (get_associated_constant (|
            Ty.path "alloy_primitives::utils::units::Unit",
            "TWEI",
            Ty.path "alloy_primitives::utils::units::Unit"
          |))).
      
      Global Instance AssociatedConstant_value_Twei :
        M.IsAssociatedFunction.C Self "Twei" value_Twei.
      Admitted.
      Global Typeclasses Opaque value_Twei.
      
      (*     pub const PWEI: Self = unsafe { Self::new_unchecked(15) }; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_PWEI (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "alloy_primitives::utils::units::Unit",
              M.get_associated_function (|
                Ty.path "alloy_primitives::utils::units::Unit",
                "new_unchecked",
                [],
                []
              |),
              [ Value.Integer IntegerKind.U8 15 ]
            |)
          |))).
      
      Global Instance AssociatedConstant_value_PWEI :
        M.IsAssociatedFunction.C Self "PWEI" value_PWEI.
      Admitted.
      Global Typeclasses Opaque value_PWEI.
      
      (*     pub const Pwei: Self = Self::PWEI; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_Pwei (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (get_associated_constant (|
            Ty.path "alloy_primitives::utils::units::Unit",
            "PWEI",
            Ty.path "alloy_primitives::utils::units::Unit"
          |))).
      
      Global Instance AssociatedConstant_value_Pwei :
        M.IsAssociatedFunction.C Self "Pwei" value_Pwei.
      Admitted.
      Global Typeclasses Opaque value_Pwei.
      
      (*     pub const ETHER: Self = unsafe { Self::new_unchecked(18) }; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_ETHER (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "alloy_primitives::utils::units::Unit",
              M.get_associated_function (|
                Ty.path "alloy_primitives::utils::units::Unit",
                "new_unchecked",
                [],
                []
              |),
              [ Value.Integer IntegerKind.U8 18 ]
            |)
          |))).
      
      Global Instance AssociatedConstant_value_ETHER :
        M.IsAssociatedFunction.C Self "ETHER" value_ETHER.
      Admitted.
      Global Typeclasses Opaque value_ETHER.
      
      (*     pub const Ether: Self = Self::ETHER; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_Ether (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (get_associated_constant (|
            Ty.path "alloy_primitives::utils::units::Unit",
            "ETHER",
            Ty.path "alloy_primitives::utils::units::Unit"
          |))).
      
      Global Instance AssociatedConstant_value_Ether :
        M.IsAssociatedFunction.C Self "Ether" value_Ether.
      Admitted.
      Global Typeclasses Opaque value_Ether.
      
      (*     pub const MIN: Self = Self::WEI; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_MIN (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (get_associated_constant (|
            Ty.path "alloy_primitives::utils::units::Unit",
            "WEI",
            Ty.path "alloy_primitives::utils::units::Unit"
          |))).
      
      Global Instance AssociatedConstant_value_MIN : M.IsAssociatedFunction.C Self "MIN" value_MIN.
      Admitted.
      Global Typeclasses Opaque value_MIN.
      
      (*     pub const MAX: Self = unsafe { Self::new_unchecked(77) }; *)
      (* Ty.path "alloy_primitives::utils::units::Unit" *)
      Definition value_MAX (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "alloy_primitives::utils::units::Unit",
              M.get_associated_function (|
                Ty.path "alloy_primitives::utils::units::Unit",
                "new_unchecked",
                [],
                []
              |),
              [ Value.Integer IntegerKind.U8 77 ]
            |)
          |))).
      
      Global Instance AssociatedConstant_value_MAX : M.IsAssociatedFunction.C Self "MAX" value_MAX.
      Admitted.
      Global Typeclasses Opaque value_MAX.
      
      (*
          pub const fn new(units: u8) -> Option<Self> {
              if units <= Self::MAX.get() {
                  // SAFETY: `units` is contained in the valid range.
                  Some(unsafe { Self::new_unchecked(units) })
              } else {
                  None
              }
          }
      *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ units ] =>
          ltac:(M.monadic
            (let units := M.alloc (| units |) in
            M.read (|
              M.match_operator (|
                Some
                  (Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.path "alloy_primitives::utils::units::Unit" ]),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.le,
                              [
                                M.read (| units |);
                                M.call_closure (|
                                  Ty.path "u8",
                                  M.get_associated_function (|
                                    Ty.path "alloy_primitives::utils::units::Unit",
                                    "get",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      get_associated_constant (|
                                        Ty.path "alloy_primitives::utils::units::Unit",
                                        "MAX",
                                        Ty.path "alloy_primitives::utils::units::Unit"
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          [
                            M.call_closure (|
                              Ty.path "alloy_primitives::utils::units::Unit",
                              M.get_associated_function (|
                                Ty.path "alloy_primitives::utils::units::Unit",
                                "new_unchecked",
                                [],
                                []
                              |),
                              [ M.read (| units |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub const unsafe fn new_unchecked(x: u8) -> Self {
              Self(x)
          }
      *)
      Definition new_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ x ] =>
          ltac:(M.monadic
            (let x := M.alloc (| x |) in
            Value.StructTuple "alloy_primitives::utils::units::Unit" [ M.read (| x |) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_unchecked :
        M.IsAssociatedFunction.C Self "new_unchecked" new_unchecked.
      Admitted.
      Global Typeclasses Opaque new_unchecked.
      
      (*
          pub fn wei(self) -> U256 {
              if self.get() <= MAX_U64_EXPONENT {
                  self.wei_const()
              } else {
                  U256::from(10u8).pow(U256::from(self.get()))
              }
          }
      *)
      Definition wei (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Some
                  (Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.le,
                              [
                                M.call_closure (|
                                  Ty.path "u8",
                                  M.get_associated_function (|
                                    Ty.path "alloy_primitives::utils::units::Unit",
                                    "get",
                                    [],
                                    []
                                  |),
                                  [ M.read (| self |) ]
                                |);
                                M.read (|
                                  get_constant (|
                                    "alloy_primitives::utils::units::MAX_U64_EXPONENT",
                                    Ty.path "u8"
                                  |)
                                |)
                              ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [],
                          M.get_associated_function (|
                            Ty.path "alloy_primitives::utils::units::Unit",
                            "wei_const",
                            [],
                            []
                          |),
                          [ M.read (| self |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            "pow",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                "from",
                                [],
                                [ Ty.path "u8" ]
                              |),
                              [ Value.Integer IntegerKind.U8 10 ]
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                "from",
                                [],
                                [ Ty.path "u8" ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.path "u8",
                                  M.get_associated_function (|
                                    Ty.path "alloy_primitives::utils::units::Unit",
                                    "get",
                                    [],
                                    []
                                  |),
                                  [ M.read (| self |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_wei : M.IsAssociatedFunction.C Self "wei" wei.
      Admitted.
      Global Typeclasses Opaque wei.
      
      (*
          pub const fn wei_const(self) -> U256 {
              if self.get() > MAX_U64_EXPONENT {
                  panic!("overflow")
              }
              U256::from_limbs([10u64.pow(self.get() as u32), 0, 0, 0])
          }
      *)
      Definition wei_const (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.gt,
                                [
                                  M.call_closure (|
                                    Ty.path "u8",
                                    M.get_associated_function (|
                                      Ty.path "alloy_primitives::utils::units::Unit",
                                      "get",
                                      [],
                                      []
                                    |),
                                    [ M.read (| self |) ]
                                  |);
                                  M.read (|
                                    get_constant (|
                                      "alloy_primitives::utils::units::MAX_U64_EXPONENT",
                                      Ty.path "u8"
                                    |)
                                  |)
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic_fmt", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_const",
                                    [ Value.Integer IntegerKind.Usize 1 ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (| Value.Array [ mk_str (| "overflow" |) ] |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      [],
                    "from_limbs",
                    [],
                    []
                  |),
                  [
                    Value.Array
                      [
                        M.call_closure (|
                          Ty.path "u64",
                          M.get_associated_function (| Ty.path "u64", "pow", [], [] |),
                          [
                            Value.Integer IntegerKind.U64 10;
                            M.cast
                              (Ty.path "u32")
                              (M.call_closure (|
                                Ty.path "u8",
                                M.get_associated_function (|
                                  Ty.path "alloy_primitives::utils::units::Unit",
                                  "get",
                                  [],
                                  []
                                |),
                                [ M.read (| self |) ]
                              |))
                          ]
                        |);
                        Value.Integer IntegerKind.U64 0;
                        Value.Integer IntegerKind.U64 0;
                        Value.Integer IntegerKind.U64 0
                      ]
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_wei_const :
        M.IsAssociatedFunction.C Self "wei_const" wei_const.
      Admitted.
      Global Typeclasses Opaque wei_const.
      
      (*
          pub const fn get(self) -> u8 {
              self.0
          }
      *)
      Definition get (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_tuple_field (|
                self,
                "alloy_primitives::utils::units::Unit",
                0
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get : M.IsAssociatedFunction.C Self "get" get.
      Admitted.
      Global Typeclasses Opaque get.
      
      (*
          pub const fn as_num(&self) -> u8 {
              self.get()
          }
      *)
      Definition as_num (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u8",
              M.get_associated_function (|
                Ty.path "alloy_primitives::utils::units::Unit",
                "get",
                [],
                []
              |),
              [ M.read (| M.deref (| M.read (| self |) |) |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_as_num : M.IsAssociatedFunction.C Self "as_num" as_num.
      Admitted.
      Global Typeclasses Opaque as_num.
    End Impl_alloy_primitives_utils_units_Unit.
  End units.
End utils.
