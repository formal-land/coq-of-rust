(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module buf.
  Module buf_impl.
    (* Trait *)
    Module Buf.
      Definition chunks_vectored
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self; dst ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let dst := M.alloc (| dst |) in
            M.catch_return (Ty.path "usize") (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "std::io::IoSlice" ],
                                      "is_empty",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| dst |) |)
                                      |)
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (| M.return_ (| Value.Integer IntegerKind.Usize 0 |) |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "bytes::buf::buf_impl::Buf",
                                    Self,
                                    [],
                                    [],
                                    "has_remaining",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| dst |) |),
                                  Value.Integer IntegerKind.Usize 0
                                |),
                                M.call_closure (|
                                  Ty.path "std::io::IoSlice",
                                  M.get_associated_function (|
                                    Ty.path "std::io::IoSlice",
                                    "new",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "chunk",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Integer IntegerKind.Usize 1 |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 0 |)))
                    ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_chunks_vectored :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "chunks_vectored" chunks_vectored.
      Definition has_remaining
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "bool",
              BinOp.gt,
              [
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "bytes::buf::buf_impl::Buf",
                    Self,
                    [],
                    [],
                    "remaining",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |);
                Value.Integer IntegerKind.Usize 0
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_has_remaining :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "has_remaining" has_remaining.
      Definition copy_to_slice
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self; dst ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let dst := M.alloc (| dst |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.lt,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_trait_method (|
                                      "bytes::buf::buf_impl::Buf",
                                      Ty.apply (Ty.path "&mut") [] [ Self ],
                                      [],
                                      [],
                                      "remaining",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| dst |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "bytes::panic_advance", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| dst |) |) |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_trait_method (|
                                    "bytes::buf::buf_impl::Buf",
                                    Ty.apply (Ty.path "&mut") [] [ Self ],
                                    [],
                                    [],
                                    "remaining",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.loop (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                ltac:(M.monadic
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                      "is_empty",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| dst |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ src :
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_trait_method (|
                                  "bytes::buf::buf_impl::Buf",
                                  Ty.apply (Ty.path "&mut") [] [ Self ],
                                  [],
                                  [],
                                  "chunk",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, self |) ]
                              |)
                            |) in
                          let~ cnt : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_trait_method (|
                                  "core::cmp::Ord",
                                  Ty.path "usize",
                                  [],
                                  [],
                                  "min",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| src |) |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| dst |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "copy_from_slice",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "core::ops::index::IndexMut",
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeTo")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index_mut",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| dst |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeTo"
                                            [ ("end_", M.read (| cnt |)) ]
                                        ]
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                            M.get_trait_method (|
                                              "core::ops::index::Index",
                                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::RangeTo")
                                                  []
                                                  [ Ty.path "usize" ]
                                              ],
                                              "index",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| src |) |)
                                              |);
                                              Value.StructRecord
                                                "core::ops::range::RangeTo"
                                                [ ("end_", M.read (| cnt |)) ]
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                dst,
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                          M.get_trait_method (|
                                            "core::ops::index::IndexMut",
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::RangeFrom")
                                                []
                                                [ Ty.path "usize" ]
                                            ],
                                            "index_mut",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| dst |) |)
                                            |);
                                            Value.StructRecord
                                              "core::ops::range::RangeFrom"
                                              [ ("start", M.read (| cnt |)) ]
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "bytes::buf::buf_impl::Buf",
                                  Self,
                                  [],
                                  [],
                                  "advance",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| self |) |)
                                  |);
                                  M.read (| cnt |)
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                M.alloc (| Value.Tuple [] |)
                              |)
                            |)
                          |)))
                    ]
                  |)))
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_copy_to_slice :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "copy_to_slice" copy_to_slice.
      Definition get_u8 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.lt,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_trait_method (|
                                      "bytes::buf::buf_impl::Buf",
                                      Ty.apply (Ty.path "&mut") [] [ Self ],
                                      [],
                                      [],
                                      "remaining",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                  |);
                                  Value.Integer IntegerKind.Usize 1
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "bytes::panic_advance", [], [] |),
                              [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 0
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ ret : Ty.apply (Ty.path "*") [] [ Ty.path "u8" ] :=
                M.copy (|
                  M.SubPointer.get_array_field (|
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                        M.get_trait_method (|
                          "bytes::buf::buf_impl::Buf",
                          Ty.apply (Ty.path "&mut") [] [ Self ],
                          [],
                          [],
                          "chunk",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                      |)
                    |),
                    Value.Integer IntegerKind.Usize 0
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "bytes::buf::buf_impl::Buf",
                      Self,
                      [],
                      [],
                      "advance",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      Value.Integer IntegerKind.Usize 1
                    ]
                  |)
                |) in
              ret
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_u8 : M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_u8" get_u8.
      Definition get_i8 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.lt,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_trait_method (|
                                      "bytes::buf::buf_impl::Buf",
                                      Ty.apply (Ty.path "&mut") [] [ Self ],
                                      [],
                                      [],
                                      "remaining",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                  |);
                                  Value.Integer IntegerKind.Usize 1
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "bytes::panic_advance", [], [] |),
                              [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 0
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ ret : Ty.apply (Ty.path "*") [] [ Ty.path "i8" ] :=
                M.alloc (|
                  M.cast
                    (Ty.path "i8")
                    (M.read (|
                      M.SubPointer.get_array_field (|
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            M.get_trait_method (|
                              "bytes::buf::buf_impl::Buf",
                              Ty.apply (Ty.path "&mut") [] [ Self ],
                              [],
                              [],
                              "chunk",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                          |)
                        |),
                        Value.Integer IntegerKind.Usize 0
                      |)
                    |))
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "bytes::buf::buf_impl::Buf",
                      Self,
                      [],
                      [],
                      "advance",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      Value.Integer IntegerKind.Usize 1
                    ]
                  |)
                |) in
              ret
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_i8 : M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_i8" get_i8.
      Definition get_u16 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "u16") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_u16::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u16::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u16" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u16" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "u16";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "u16")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u16::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "u16")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "u16",
                                                  M.get_associated_function (|
                                                    Ty.path "u16",
                                                    "from_be_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 2
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_u16::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 2
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "u16",
                                        M.get_associated_function (|
                                          Ty.path "u16",
                                          "from_be_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_u16 :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_u16" get_u16.
      Definition get_u16_le
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "u16") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_u16_le::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u16_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u16" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u16" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "u16";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "u16")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u16_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "u16")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "u16",
                                                  M.get_associated_function (|
                                                    Ty.path "u16",
                                                    "from_le_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 2
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_u16_le::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 2
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "u16",
                                        M.get_associated_function (|
                                          Ty.path "u16",
                                          "from_le_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_u16_le :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_u16_le" get_u16_le.
      Definition get_u16_ne
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "u16") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_u16_ne::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u16_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u16" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u16" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "u16";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "u16")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u16_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "u16")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "u16",
                                                  M.get_associated_function (|
                                                    Ty.path "u16",
                                                    "from_ne_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 2
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_u16_ne::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 2
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "u16",
                                        M.get_associated_function (|
                                          Ty.path "u16",
                                          "from_ne_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_u16_ne :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_u16_ne" get_u16_ne.
      Definition get_i16 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "i16") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_i16::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i16::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i16" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i16" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "i16";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "i16")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i16::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "i16")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "i16",
                                                  M.get_associated_function (|
                                                    Ty.path "i16",
                                                    "from_be_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 2
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_i16::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 2
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "i16",
                                        M.get_associated_function (|
                                          Ty.path "i16",
                                          "from_be_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_i16 :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_i16" get_i16.
      Definition get_i16_le
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "i16") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_i16_le::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i16_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i16" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i16" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "i16";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "i16")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i16_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "i16")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "i16",
                                                  M.get_associated_function (|
                                                    Ty.path "i16",
                                                    "from_le_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 2
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_i16_le::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 2
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "i16",
                                        M.get_associated_function (|
                                          Ty.path "i16",
                                          "from_le_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_i16_le :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_i16_le" get_i16_le.
      Definition get_i16_ne
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "i16") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_i16_ne::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i16_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i16" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i16" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "i16";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "i16")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i16_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "i16")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "i16",
                                                  M.get_associated_function (|
                                                    Ty.path "i16",
                                                    "from_ne_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 2
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_i16_ne::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 2
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "i16",
                                        M.get_associated_function (|
                                          Ty.path "i16",
                                          "from_ne_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_i16_ne :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_i16_ne" get_i16_ne.
      Definition get_u32 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "u32") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_u32::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u32::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "u32";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "u32")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u32::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "u32")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  M.get_associated_function (|
                                                    Ty.path "u32",
                                                    "from_be_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_u32::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 4
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "u32",
                                        M.get_associated_function (|
                                          Ty.path "u32",
                                          "from_be_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_u32 :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_u32" get_u32.
      Definition get_u32_le
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "u32") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_u32_le::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u32_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "u32";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "u32")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u32_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "u32")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  M.get_associated_function (|
                                                    Ty.path "u32",
                                                    "from_le_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_u32_le::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 4
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "u32",
                                        M.get_associated_function (|
                                          Ty.path "u32",
                                          "from_le_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_u32_le :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_u32_le" get_u32_le.
      Definition get_u32_ne
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "u32") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_u32_ne::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u32_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "u32";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "u32")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u32_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "u32")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  M.get_associated_function (|
                                                    Ty.path "u32",
                                                    "from_ne_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_u32_ne::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 4
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "u32",
                                        M.get_associated_function (|
                                          Ty.path "u32",
                                          "from_ne_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_u32_ne :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_u32_ne" get_u32_ne.
      Definition get_i32 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "i32") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_i32::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i32::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "i32";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "i32")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i32::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "i32")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "i32",
                                                  M.get_associated_function (|
                                                    Ty.path "i32",
                                                    "from_be_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_i32::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 4
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "i32",
                                        M.get_associated_function (|
                                          Ty.path "i32",
                                          "from_be_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_i32 :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_i32" get_i32.
      Definition get_i32_le
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "i32") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_i32_le::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i32_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "i32";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "i32")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i32_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "i32")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "i32",
                                                  M.get_associated_function (|
                                                    Ty.path "i32",
                                                    "from_le_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_i32_le::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 4
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "i32",
                                        M.get_associated_function (|
                                          Ty.path "i32",
                                          "from_le_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_i32_le :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_i32_le" get_i32_le.
      Definition get_i32_ne
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "i32") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_i32_ne::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i32_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "i32";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "i32")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i32_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "i32")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "i32",
                                                  M.get_associated_function (|
                                                    Ty.path "i32",
                                                    "from_ne_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_i32_ne::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 4
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "i32",
                                        M.get_associated_function (|
                                          Ty.path "i32",
                                          "from_ne_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_i32_ne :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_i32_ne" get_i32_ne.
      Definition get_u64 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "u64") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_u64::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u64::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "u64";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "u64")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u64::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "u64")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "u64",
                                                  M.get_associated_function (|
                                                    Ty.path "u64",
                                                    "from_be_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 8
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_u64::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 8 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 8
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "u64",
                                        M.get_associated_function (|
                                          Ty.path "u64",
                                          "from_be_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_u64 :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_u64" get_u64.
      Definition get_u64_le
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "u64") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_u64_le::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u64_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "u64";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "u64")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u64_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "u64")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "u64",
                                                  M.get_associated_function (|
                                                    Ty.path "u64",
                                                    "from_le_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 8
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_u64_le::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 8 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 8
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "u64",
                                        M.get_associated_function (|
                                          Ty.path "u64",
                                          "from_le_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_u64_le :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_u64_le" get_u64_le.
      Definition get_u64_ne
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "u64") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_u64_ne::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u64_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "u64";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "u64")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u64_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "u64")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "u64",
                                                  M.get_associated_function (|
                                                    Ty.path "u64",
                                                    "from_ne_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 8
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_u64_ne::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 8 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 8
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "u64",
                                        M.get_associated_function (|
                                          Ty.path "u64",
                                          "from_ne_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_u64_ne :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_u64_ne" get_u64_ne.
      Definition get_i64 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "i64") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_i64::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i64::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i64" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i64" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "i64";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "i64")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i64::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "i64")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "i64",
                                                  M.get_associated_function (|
                                                    Ty.path "i64",
                                                    "from_be_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 8
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_i64::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 8 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 8
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "i64",
                                        M.get_associated_function (|
                                          Ty.path "i64",
                                          "from_be_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_i64 :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_i64" get_i64.
      Definition get_i64_le
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "i64") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_i64_le::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i64_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i64" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i64" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "i64";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "i64")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i64_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "i64")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "i64",
                                                  M.get_associated_function (|
                                                    Ty.path "i64",
                                                    "from_le_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 8
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_i64_le::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 8 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 8
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "i64",
                                        M.get_associated_function (|
                                          Ty.path "i64",
                                          "from_le_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_i64_le :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_i64_le" get_i64_le.
      Definition get_i64_ne
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "i64") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_i64_ne::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i64_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i64" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i64" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "i64";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "i64")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i64_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "i64")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "i64",
                                                  M.get_associated_function (|
                                                    Ty.path "i64",
                                                    "from_ne_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 8
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_i64_ne::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 8 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 8
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "i64",
                                        M.get_associated_function (|
                                          Ty.path "i64",
                                          "from_ne_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_i64_ne :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_i64_ne" get_i64_ne.
      Definition get_u128 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "u128") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_u128::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u128::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u128" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u128" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "u128";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "u128")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u128::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "u128")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "u128",
                                                  M.get_associated_function (|
                                                    Ty.path "u128",
                                                    "from_be_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 16
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_u128::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 16
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "u128",
                                        M.get_associated_function (|
                                          Ty.path "u128",
                                          "from_be_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_u128 :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_u128" get_u128.
      Definition get_u128_le
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "u128") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_u128_le::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u128_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u128" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u128" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "u128";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "u128")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u128_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "u128")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "u128",
                                                  M.get_associated_function (|
                                                    Ty.path "u128",
                                                    "from_le_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 16
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_u128_le::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 16
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "u128",
                                        M.get_associated_function (|
                                          Ty.path "u128",
                                          "from_le_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_u128_le :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_u128_le" get_u128_le.
      Definition get_u128_ne
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "u128") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_u128_ne::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u128_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u128" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u128" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "u128";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "u128")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_u128_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "u128")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "u128",
                                                  M.get_associated_function (|
                                                    Ty.path "u128",
                                                    "from_ne_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 16
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_u128_ne::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 16
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "u128",
                                        M.get_associated_function (|
                                          Ty.path "u128",
                                          "from_ne_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_u128_ne :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_u128_ne" get_u128_ne.
      Definition get_i128 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "i128") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_i128::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i128::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i128" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i128" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "i128";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "i128")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i128::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "i128")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "i128",
                                                  M.get_associated_function (|
                                                    Ty.path "i128",
                                                    "from_be_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 16
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_i128::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 16
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "i128",
                                        M.get_associated_function (|
                                          Ty.path "i128",
                                          "from_be_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_i128 :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_i128" get_i128.
      Definition get_i128_le
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "i128") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_i128_le::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i128_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i128" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i128" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "i128";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "i128")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i128_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "i128")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "i128",
                                                  M.get_associated_function (|
                                                    Ty.path "i128",
                                                    "from_le_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 16
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_i128_le::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 16
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "i128",
                                        M.get_associated_function (|
                                          Ty.path "i128",
                                          "from_le_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_i128_le :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_i128_le" get_i128_le.
      Definition get_i128_ne
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.path "i128") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "bytes::buf::buf_impl::Buf",
                                              Ty.apply (Ty.path "&mut") [] [ Self ],
                                              [],
                                              [],
                                              "remaining",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "bytes::buf::buf_impl::Buf::get_i128_ne::SIZE",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_advance", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i128_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Ty.apply (Ty.path "&mut") [] [ Self ],
                                            [],
                                            [],
                                            "remaining",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ ret :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i128" ] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i128" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              "map",
                              [],
                              [
                                Ty.path "i128";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ]
                                  ]
                                  (Ty.path "i128")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "get",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ Self ],
                                          [],
                                          [],
                                          "chunk",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                      |)
                                    |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_i128_ne::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "i128")
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let src := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "i128",
                                                  M.get_associated_function (|
                                                    Ty.path "i128",
                                                    "from_ne_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.cast
                                                          (Ty.apply
                                                            (Ty.path "*const")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 16
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ])
                                                          (M.read (|
                                                            M.use
                                                              (M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.ConstPointer,
                                                                  M.deref (| M.read (| src |) |)
                                                                |)
                                                              |))
                                                          |))
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := ret in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let ret := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "advance",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "bytes::buf::buf_impl::Buf::get_i128_ne::SIZE",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (| M.read (| ret |) |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ buf :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [ Ty.path "u8" ]
                                          ] :=
                                      M.alloc (|
                                        repeat (|
                                          Value.Integer IntegerKind.U8 0,
                                          Value.Integer IntegerKind.Usize 16
                                        |)
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_impl::Buf",
                                            Self,
                                            [],
                                            [],
                                            "copy_to_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, buf |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.path "i128",
                                        M.get_associated_function (|
                                          Ty.path "i128",
                                          "from_ne_bytes",
                                          [],
                                          []
                                        |),
                                        [ M.read (| buf |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_i128_ne :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_i128_ne" get_i128_ne.
      Definition get_uint (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.catch_return (Ty.path "u64") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ slice_at : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                      M.copy (|
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                              M.get_associated_function (|
                                Ty.path "usize",
                                "checked_sub",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  get_constant (|
                                    "bytes::buf::buf_impl::Buf::get_uint::SIZE",
                                    Ty.path "usize"
                                  |)
                                |);
                                M.read (| nbytes |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let slice_at := M.copy (| γ0_0 |) in
                                slice_at));
                            fun γ =>
                              ltac:(M.monadic
                                (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_does_not_fit", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_uint::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.read (| nbytes |)
                                      ]
                                    |)
                                  |)
                                |)))
                          ]
                        |)
                      |) in
                    let~ buf :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [ Ty.path "u8" ]
                          ] :=
                      M.alloc (|
                        repeat (|
                          Value.Integer IntegerKind.U8 0,
                          Value.Integer IntegerKind.Usize 8
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "bytes::buf::buf_impl::Buf",
                            Self,
                            [],
                            [],
                            "copy_to_slice",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                      M.get_trait_method (|
                                        "core::ops::index::IndexMut",
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [ Ty.path "u8" ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeFrom")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                        "index_mut",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.MutRef, buf |);
                                        Value.StructRecord
                                          "core::ops::range::RangeFrom"
                                          [ ("start", M.read (| slice_at |)) ]
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      |) in
                    M.return_ (|
                      M.call_closure (|
                        Ty.path "u64",
                        M.get_associated_function (| Ty.path "u64", "from_be_bytes", [], [] |),
                        [ M.read (| buf |) ]
                      |)
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_uint :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_uint" get_uint.
      Definition get_uint_le
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.catch_return (Ty.path "u64") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ buf :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [ Ty.path "u8" ]
                          ] :=
                      M.alloc (|
                        repeat (|
                          Value.Integer IntegerKind.U8 0,
                          Value.Integer IntegerKind.Usize 8
                        |)
                      |) in
                    let~ subslice :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                          ] :=
                      M.copy (|
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                            ],
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                "get_mut",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::RangeTo")
                                    []
                                    [ Ty.path "usize" ]
                                ]
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion (M.borrow (| Pointer.Kind.MutRef, buf |));
                                Value.StructRecord
                                  "core::ops::range::RangeTo"
                                  [ ("end_", M.read (| nbytes |)) ]
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let subslice := M.copy (| γ0_0 |) in
                                subslice));
                            fun γ =>
                              ltac:(M.monadic
                                (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_does_not_fit", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_uint_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.read (| nbytes |)
                                      ]
                                    |)
                                  |)
                                |)))
                          ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "bytes::buf::buf_impl::Buf",
                            Self,
                            [],
                            [],
                            "copy_to_slice",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| subslice |) |) |)
                          ]
                        |)
                      |) in
                    M.return_ (|
                      M.call_closure (|
                        Ty.path "u64",
                        M.get_associated_function (| Ty.path "u64", "from_le_bytes", [], [] |),
                        [ M.read (| buf |) ]
                      |)
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_uint_le :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_uint_le" get_uint_le.
      Definition get_uint_ne
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.read (|
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.path "u64" ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool false |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          M.get_trait_method (|
                            "bytes::buf::buf_impl::Buf",
                            Self,
                            [],
                            [],
                            "get_uint",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                            M.read (| nbytes |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          M.get_trait_method (|
                            "bytes::buf::buf_impl::Buf",
                            Self,
                            [],
                            [],
                            "get_uint_le",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                            M.read (| nbytes |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_uint_ne :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_uint_ne" get_uint_ne.
      Definition get_int (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.catch_return (Ty.path "i64") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ slice_at : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                      M.copy (|
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                              M.get_associated_function (|
                                Ty.path "usize",
                                "checked_sub",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  get_constant (|
                                    "bytes::buf::buf_impl::Buf::get_int::SIZE",
                                    Ty.path "usize"
                                  |)
                                |);
                                M.read (| nbytes |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let slice_at := M.copy (| γ0_0 |) in
                                slice_at));
                            fun γ =>
                              ltac:(M.monadic
                                (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_does_not_fit", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_int::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.read (| nbytes |)
                                      ]
                                    |)
                                  |)
                                |)))
                          ]
                        |)
                      |) in
                    let~ buf :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [ Ty.path "u8" ]
                          ] :=
                      M.alloc (|
                        repeat (|
                          Value.Integer IntegerKind.U8 0,
                          Value.Integer IntegerKind.Usize 8
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "bytes::buf::buf_impl::Buf",
                            Self,
                            [],
                            [],
                            "copy_to_slice",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                      M.get_trait_method (|
                                        "core::ops::index::IndexMut",
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [ Ty.path "u8" ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeFrom")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                        "index_mut",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.MutRef, buf |);
                                        Value.StructRecord
                                          "core::ops::range::RangeFrom"
                                          [ ("start", M.read (| slice_at |)) ]
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      |) in
                    M.return_ (|
                      M.call_closure (|
                        Ty.path "i64",
                        M.get_associated_function (| Ty.path "i64", "from_be_bytes", [], [] |),
                        [ M.read (| buf |) ]
                      |)
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_int :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_int" get_int.
      Definition get_int_le
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.catch_return (Ty.path "i64") (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let~ buf :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [ Ty.path "u8" ]
                          ] :=
                      M.alloc (|
                        repeat (|
                          Value.Integer IntegerKind.U8 0,
                          Value.Integer IntegerKind.Usize 8
                        |)
                      |) in
                    let~ subslice :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                          ] :=
                      M.copy (|
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                            ],
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                "get_mut",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::RangeTo")
                                    []
                                    [ Ty.path "usize" ]
                                ]
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion (M.borrow (| Pointer.Kind.MutRef, buf |));
                                Value.StructRecord
                                  "core::ops::range::RangeTo"
                                  [ ("end_", M.read (| nbytes |)) ]
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let subslice := M.copy (| γ0_0 |) in
                                subslice));
                            fun γ =>
                              ltac:(M.monadic
                                (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "bytes::panic_does_not_fit", [], [] |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "bytes::buf::buf_impl::Buf::get_int_le::SIZE",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        M.read (| nbytes |)
                                      ]
                                    |)
                                  |)
                                |)))
                          ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "bytes::buf::buf_impl::Buf",
                            Self,
                            [],
                            [],
                            "copy_to_slice",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| subslice |) |) |)
                          ]
                        |)
                      |) in
                    M.return_ (|
                      M.call_closure (|
                        Ty.path "i64",
                        M.get_associated_function (| Ty.path "i64", "from_le_bytes", [], [] |),
                        [ M.read (| buf |) ]
                      |)
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_int_le :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_int_le" get_int_le.
      Definition get_int_ne
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.read (|
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.path "i64" ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool false |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "i64",
                          M.get_trait_method (|
                            "bytes::buf::buf_impl::Buf",
                            Self,
                            [],
                            [],
                            "get_int",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                            M.read (| nbytes |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        M.call_closure (|
                          Ty.path "i64",
                          M.get_trait_method (|
                            "bytes::buf::buf_impl::Buf",
                            Self,
                            [],
                            [],
                            "get_int_le",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                            M.read (| nbytes |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_int_ne :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_int_ne" get_int_ne.
      Definition get_f32 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "f32",
              M.get_associated_function (| Ty.path "f32", "from_bits", [], [] |),
              [
                M.call_closure (|
                  Ty.path "u32",
                  M.get_trait_method (|
                    "bytes::buf::buf_impl::Buf",
                    Self,
                    [],
                    [],
                    "get_u32",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_f32 :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_f32" get_f32.
      Definition get_f32_le
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "f32",
              M.get_associated_function (| Ty.path "f32", "from_bits", [], [] |),
              [
                M.call_closure (|
                  Ty.path "u32",
                  M.get_trait_method (|
                    "bytes::buf::buf_impl::Buf",
                    Self,
                    [],
                    [],
                    "get_u32_le",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_f32_le :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_f32_le" get_f32_le.
      Definition get_f32_ne
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "f32",
              M.get_associated_function (| Ty.path "f32", "from_bits", [], [] |),
              [
                M.call_closure (|
                  Ty.path "u32",
                  M.get_trait_method (|
                    "bytes::buf::buf_impl::Buf",
                    Self,
                    [],
                    [],
                    "get_u32_ne",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_f32_ne :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_f32_ne" get_f32_ne.
      Definition get_f64 (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "f64",
              M.get_associated_function (| Ty.path "f64", "from_bits", [], [] |),
              [
                M.call_closure (|
                  Ty.path "u64",
                  M.get_trait_method (|
                    "bytes::buf::buf_impl::Buf",
                    Self,
                    [],
                    [],
                    "get_u64",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_f64 :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_f64" get_f64.
      Definition get_f64_le
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "f64",
              M.get_associated_function (| Ty.path "f64", "from_bits", [], [] |),
              [
                M.call_closure (|
                  Ty.path "u64",
                  M.get_trait_method (|
                    "bytes::buf::buf_impl::Buf",
                    Self,
                    [],
                    [],
                    "get_u64_le",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_f64_le :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_f64_le" get_f64_le.
      Definition get_f64_ne
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "f64",
              M.get_associated_function (| Ty.path "f64", "from_bits", [], [] |),
              [
                M.call_closure (|
                  Ty.path "u64",
                  M.get_trait_method (|
                    "bytes::buf::buf_impl::Buf",
                    Self,
                    [],
                    [],
                    "get_u64_ne",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_get_f64_ne :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "get_f64_ne" get_f64_ne.
      Definition copy_to_bytes
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self; len ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let len := M.alloc (| len |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.lt,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_trait_method (|
                                      "bytes::buf::buf_impl::Buf",
                                      Ty.apply (Ty.path "&mut") [] [ Self ],
                                      [],
                                      [],
                                      "remaining",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                  |);
                                  M.read (| len |)
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "bytes::panic_advance", [], [] |),
                              [
                                M.read (| len |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_trait_method (|
                                    "bytes::buf::buf_impl::Buf",
                                    Ty.apply (Ty.path "&mut") [] [ Self ],
                                    [],
                                    [],
                                    "remaining",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ ret : Ty.apply (Ty.path "*") [] [ Ty.path "bytes::bytes_mut::BytesMut" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "bytes::bytes_mut::BytesMut",
                    M.get_associated_function (|
                      Ty.path "bytes::bytes_mut::BytesMut",
                      "with_capacity",
                      [],
                      []
                    |),
                    [ M.read (| len |) ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "bytes::buf::buf_mut::BufMut",
                      Ty.path "bytes::bytes_mut::BytesMut",
                      [],
                      [],
                      "put",
                      [],
                      [
                        Ty.apply
                          (Ty.path "bytes::buf::take::Take")
                          []
                          [ Ty.apply (Ty.path "&mut") [] [ Self ] ]
                      ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, ret |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "bytes::buf::take::Take")
                          []
                          [ Ty.apply (Ty.path "&mut") [] [ Self ] ],
                        M.get_trait_method (|
                          "bytes::buf::buf_impl::Buf",
                          Ty.apply (Ty.path "&mut") [] [ Self ],
                          [],
                          [],
                          "take",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                          M.read (| len |)
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.path "bytes::bytes::Bytes",
                  M.get_associated_function (|
                    Ty.path "bytes::bytes_mut::BytesMut",
                    "freeze",
                    [],
                    []
                  |),
                  [ M.read (| ret |) ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_copy_to_bytes :
        M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "copy_to_bytes" copy_to_bytes.
      Definition take (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; limit ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let limit := M.alloc (| limit |) in
            M.call_closure (|
              Ty.apply (Ty.path "bytes::buf::take::Take") [] [ Self ],
              M.get_function (| "bytes::buf::take::new", [], [ Self ] |),
              [ M.read (| self |); M.read (| limit |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_take : M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "take" take.
      Definition chain (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ U ], [ self; next ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let next := M.alloc (| next |) in
            M.call_closure (|
              Ty.apply (Ty.path "bytes::buf::chain::Chain") [] [ Self; U ],
              M.get_associated_function (|
                Ty.apply (Ty.path "bytes::buf::chain::Chain") [] [ Self; U ],
                "new",
                [],
                []
              |),
              [ M.read (| self |); M.read (| next |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_chain : M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "chain" chain.
      Definition reader (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.apply (Ty.path "bytes::buf::reader::Reader") [] [ Self ],
              M.get_function (| "bytes::buf::reader::new", [], [ Self ] |),
              [ M.read (| self |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_reader : M.IsProvidedMethod "bytes::buf::buf_impl::Buf" "reader" reader.
    End Buf.
    
    Module Impl_bytes_buf_buf_impl_Buf_where_bytes_buf_buf_impl_Buf_T_where_core_marker_Sized_T_for_ref_mut_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "&mut") [] [ T ].
      
      (*
              fn remaining(&self) -> usize {
                  ( **self).remaining()
              }
      *)
      Definition remaining (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "remaining", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn chunk(&self) -> &[u8] {
                  ( **self).chunk()
              }
      *)
      Definition chunk (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                  M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "chunk", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn chunks_vectored<'b>(&'b self, dst: &mut [IoSlice<'b>]) -> usize {
                  ( **self).chunks_vectored(dst)
              }
      *)
      Definition chunks_vectored
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; dst ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let dst := M.alloc (| dst |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_trait_method (|
                "bytes::buf::buf_impl::Buf",
                T,
                [],
                [],
                "chunks_vectored",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| dst |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn advance(&mut self, cnt: usize) {
                  ( **self).advance(cnt)
              }
      *)
      Definition advance (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; cnt ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let cnt := M.alloc (| cnt |) in
            M.call_closure (|
              Ty.tuple [],
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "advance", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| cnt |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn has_remaining(&self) -> bool {
                  ( **self).has_remaining()
              }
      *)
      Definition has_remaining
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (|
                "bytes::buf::buf_impl::Buf",
                T,
                [],
                [],
                "has_remaining",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn copy_to_slice(&mut self, dst: &mut [u8]) {
                  ( **self).copy_to_slice(dst)
              }
      *)
      Definition copy_to_slice
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; dst ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let dst := M.alloc (| dst |) in
            M.call_closure (|
              Ty.tuple [],
              M.get_trait_method (|
                "bytes::buf::buf_impl::Buf",
                T,
                [],
                [],
                "copy_to_slice",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| dst |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u8(&mut self) -> u8 {
                  ( **self).get_u8()
              }
      *)
      Definition get_u8 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u8",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u8", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i8(&mut self) -> i8 {
                  ( **self).get_i8()
              }
      *)
      Definition get_i8 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i8",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i8", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u16(&mut self) -> u16 {
                  ( **self).get_u16()
              }
      *)
      Definition get_u16 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u16",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u16", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u16_le(&mut self) -> u16 {
                  ( **self).get_u16_le()
              }
      *)
      Definition get_u16_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u16",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u16_le", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u16_ne(&mut self) -> u16 {
                  ( **self).get_u16_ne()
              }
      *)
      Definition get_u16_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u16",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u16_ne", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i16(&mut self) -> i16 {
                  ( **self).get_i16()
              }
      *)
      Definition get_i16 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i16",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i16", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i16_le(&mut self) -> i16 {
                  ( **self).get_i16_le()
              }
      *)
      Definition get_i16_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i16",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i16_le", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i16_ne(&mut self) -> i16 {
                  ( **self).get_i16_ne()
              }
      *)
      Definition get_i16_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i16",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i16_ne", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u32(&mut self) -> u32 {
                  ( **self).get_u32()
              }
      *)
      Definition get_u32 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u32",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u32", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u32_le(&mut self) -> u32 {
                  ( **self).get_u32_le()
              }
      *)
      Definition get_u32_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u32",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u32_le", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u32_ne(&mut self) -> u32 {
                  ( **self).get_u32_ne()
              }
      *)
      Definition get_u32_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u32",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u32_ne", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i32(&mut self) -> i32 {
                  ( **self).get_i32()
              }
      *)
      Definition get_i32 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i32",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i32", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i32_le(&mut self) -> i32 {
                  ( **self).get_i32_le()
              }
      *)
      Definition get_i32_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i32",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i32_le", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i32_ne(&mut self) -> i32 {
                  ( **self).get_i32_ne()
              }
      *)
      Definition get_i32_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i32",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i32_ne", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u64(&mut self) -> u64 {
                  ( **self).get_u64()
              }
      *)
      Definition get_u64 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u64", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u64_le(&mut self) -> u64 {
                  ( **self).get_u64_le()
              }
      *)
      Definition get_u64_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u64_le", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u64_ne(&mut self) -> u64 {
                  ( **self).get_u64_ne()
              }
      *)
      Definition get_u64_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u64_ne", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i64(&mut self) -> i64 {
                  ( **self).get_i64()
              }
      *)
      Definition get_i64 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i64", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i64_le(&mut self) -> i64 {
                  ( **self).get_i64_le()
              }
      *)
      Definition get_i64_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i64_le", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i64_ne(&mut self) -> i64 {
                  ( **self).get_i64_ne()
              }
      *)
      Definition get_i64_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i64_ne", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_uint(&mut self, nbytes: usize) -> u64 {
                  ( **self).get_uint(nbytes)
              }
      *)
      Definition get_uint (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.call_closure (|
              Ty.path "u64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_uint", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| nbytes |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_uint_le(&mut self, nbytes: usize) -> u64 {
                  ( **self).get_uint_le(nbytes)
              }
      *)
      Definition get_uint_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.call_closure (|
              Ty.path "u64",
              M.get_trait_method (|
                "bytes::buf::buf_impl::Buf",
                T,
                [],
                [],
                "get_uint_le",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| nbytes |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_uint_ne(&mut self, nbytes: usize) -> u64 {
                  ( **self).get_uint_ne(nbytes)
              }
      *)
      Definition get_uint_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.call_closure (|
              Ty.path "u64",
              M.get_trait_method (|
                "bytes::buf::buf_impl::Buf",
                T,
                [],
                [],
                "get_uint_ne",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| nbytes |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_int(&mut self, nbytes: usize) -> i64 {
                  ( **self).get_int(nbytes)
              }
      *)
      Definition get_int (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.call_closure (|
              Ty.path "i64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_int", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| nbytes |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_int_le(&mut self, nbytes: usize) -> i64 {
                  ( **self).get_int_le(nbytes)
              }
      *)
      Definition get_int_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.call_closure (|
              Ty.path "i64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_int_le", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| nbytes |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_int_ne(&mut self, nbytes: usize) -> i64 {
                  ( **self).get_int_ne(nbytes)
              }
      *)
      Definition get_int_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.call_closure (|
              Ty.path "i64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_int_ne", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| nbytes |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn copy_to_bytes(&mut self, len: usize) -> crate::Bytes {
                  ( **self).copy_to_bytes(len)
              }
      *)
      Definition copy_to_bytes
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; len ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let len := M.alloc (| len |) in
            M.call_closure (|
              Ty.path "bytes::bytes::Bytes",
              M.get_trait_method (|
                "bytes::buf::buf_impl::Buf",
                T,
                [],
                [],
                "copy_to_bytes",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| len |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "bytes::buf::buf_impl::Buf"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *)
          [
            ("remaining", InstanceField.Method (remaining T));
            ("chunk", InstanceField.Method (chunk T));
            ("chunks_vectored", InstanceField.Method (chunks_vectored T));
            ("advance", InstanceField.Method (advance T));
            ("has_remaining", InstanceField.Method (has_remaining T));
            ("copy_to_slice", InstanceField.Method (copy_to_slice T));
            ("get_u8", InstanceField.Method (get_u8 T));
            ("get_i8", InstanceField.Method (get_i8 T));
            ("get_u16", InstanceField.Method (get_u16 T));
            ("get_u16_le", InstanceField.Method (get_u16_le T));
            ("get_u16_ne", InstanceField.Method (get_u16_ne T));
            ("get_i16", InstanceField.Method (get_i16 T));
            ("get_i16_le", InstanceField.Method (get_i16_le T));
            ("get_i16_ne", InstanceField.Method (get_i16_ne T));
            ("get_u32", InstanceField.Method (get_u32 T));
            ("get_u32_le", InstanceField.Method (get_u32_le T));
            ("get_u32_ne", InstanceField.Method (get_u32_ne T));
            ("get_i32", InstanceField.Method (get_i32 T));
            ("get_i32_le", InstanceField.Method (get_i32_le T));
            ("get_i32_ne", InstanceField.Method (get_i32_ne T));
            ("get_u64", InstanceField.Method (get_u64 T));
            ("get_u64_le", InstanceField.Method (get_u64_le T));
            ("get_u64_ne", InstanceField.Method (get_u64_ne T));
            ("get_i64", InstanceField.Method (get_i64 T));
            ("get_i64_le", InstanceField.Method (get_i64_le T));
            ("get_i64_ne", InstanceField.Method (get_i64_ne T));
            ("get_uint", InstanceField.Method (get_uint T));
            ("get_uint_le", InstanceField.Method (get_uint_le T));
            ("get_uint_ne", InstanceField.Method (get_uint_ne T));
            ("get_int", InstanceField.Method (get_int T));
            ("get_int_le", InstanceField.Method (get_int_le T));
            ("get_int_ne", InstanceField.Method (get_int_ne T));
            ("copy_to_bytes", InstanceField.Method (copy_to_bytes T))
          ].
    End Impl_bytes_buf_buf_impl_Buf_where_bytes_buf_buf_impl_Buf_T_where_core_marker_Sized_T_for_ref_mut_T.
    
    Module Impl_bytes_buf_buf_impl_Buf_where_bytes_buf_buf_impl_Buf_T_where_core_marker_Sized_T_for_alloc_boxed_Box_T_alloc_alloc_Global.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "alloc::boxed::Box") [] [ T; Ty.path "alloc::alloc::Global" ].
      
      (*
              fn remaining(&self) -> usize {
                  ( **self).remaining()
              }
      *)
      Definition remaining (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "remaining", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn chunk(&self) -> &[u8] {
                  ( **self).chunk()
              }
      *)
      Definition chunk (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                  M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "chunk", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn chunks_vectored<'b>(&'b self, dst: &mut [IoSlice<'b>]) -> usize {
                  ( **self).chunks_vectored(dst)
              }
      *)
      Definition chunks_vectored
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; dst ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let dst := M.alloc (| dst |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_trait_method (|
                "bytes::buf::buf_impl::Buf",
                T,
                [],
                [],
                "chunks_vectored",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| dst |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn advance(&mut self, cnt: usize) {
                  ( **self).advance(cnt)
              }
      *)
      Definition advance (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; cnt ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let cnt := M.alloc (| cnt |) in
            M.call_closure (|
              Ty.tuple [],
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "advance", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| cnt |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn has_remaining(&self) -> bool {
                  ( **self).has_remaining()
              }
      *)
      Definition has_remaining
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (|
                "bytes::buf::buf_impl::Buf",
                T,
                [],
                [],
                "has_remaining",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn copy_to_slice(&mut self, dst: &mut [u8]) {
                  ( **self).copy_to_slice(dst)
              }
      *)
      Definition copy_to_slice
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; dst ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let dst := M.alloc (| dst |) in
            M.call_closure (|
              Ty.tuple [],
              M.get_trait_method (|
                "bytes::buf::buf_impl::Buf",
                T,
                [],
                [],
                "copy_to_slice",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| dst |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u8(&mut self) -> u8 {
                  ( **self).get_u8()
              }
      *)
      Definition get_u8 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u8",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u8", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i8(&mut self) -> i8 {
                  ( **self).get_i8()
              }
      *)
      Definition get_i8 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i8",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i8", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u16(&mut self) -> u16 {
                  ( **self).get_u16()
              }
      *)
      Definition get_u16 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u16",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u16", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u16_le(&mut self) -> u16 {
                  ( **self).get_u16_le()
              }
      *)
      Definition get_u16_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u16",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u16_le", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u16_ne(&mut self) -> u16 {
                  ( **self).get_u16_ne()
              }
      *)
      Definition get_u16_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u16",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u16_ne", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i16(&mut self) -> i16 {
                  ( **self).get_i16()
              }
      *)
      Definition get_i16 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i16",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i16", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i16_le(&mut self) -> i16 {
                  ( **self).get_i16_le()
              }
      *)
      Definition get_i16_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i16",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i16_le", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i16_ne(&mut self) -> i16 {
                  ( **self).get_i16_ne()
              }
      *)
      Definition get_i16_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i16",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i16_ne", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u32(&mut self) -> u32 {
                  ( **self).get_u32()
              }
      *)
      Definition get_u32 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u32",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u32", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u32_le(&mut self) -> u32 {
                  ( **self).get_u32_le()
              }
      *)
      Definition get_u32_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u32",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u32_le", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u32_ne(&mut self) -> u32 {
                  ( **self).get_u32_ne()
              }
      *)
      Definition get_u32_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u32",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u32_ne", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i32(&mut self) -> i32 {
                  ( **self).get_i32()
              }
      *)
      Definition get_i32 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i32",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i32", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i32_le(&mut self) -> i32 {
                  ( **self).get_i32_le()
              }
      *)
      Definition get_i32_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i32",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i32_le", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i32_ne(&mut self) -> i32 {
                  ( **self).get_i32_ne()
              }
      *)
      Definition get_i32_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i32",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i32_ne", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u64(&mut self) -> u64 {
                  ( **self).get_u64()
              }
      *)
      Definition get_u64 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u64", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u64_le(&mut self) -> u64 {
                  ( **self).get_u64_le()
              }
      *)
      Definition get_u64_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u64_le", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_u64_ne(&mut self) -> u64 {
                  ( **self).get_u64_ne()
              }
      *)
      Definition get_u64_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "u64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_u64_ne", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i64(&mut self) -> i64 {
                  ( **self).get_i64()
              }
      *)
      Definition get_i64 (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i64", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i64_le(&mut self) -> i64 {
                  ( **self).get_i64_le()
              }
      *)
      Definition get_i64_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i64_le", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_i64_ne(&mut self) -> i64 {
                  ( **self).get_i64_ne()
              }
      *)
      Definition get_i64_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "i64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_i64_ne", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_uint(&mut self, nbytes: usize) -> u64 {
                  ( **self).get_uint(nbytes)
              }
      *)
      Definition get_uint (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.call_closure (|
              Ty.path "u64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_uint", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| nbytes |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_uint_le(&mut self, nbytes: usize) -> u64 {
                  ( **self).get_uint_le(nbytes)
              }
      *)
      Definition get_uint_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.call_closure (|
              Ty.path "u64",
              M.get_trait_method (|
                "bytes::buf::buf_impl::Buf",
                T,
                [],
                [],
                "get_uint_le",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| nbytes |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_uint_ne(&mut self, nbytes: usize) -> u64 {
                  ( **self).get_uint_ne(nbytes)
              }
      *)
      Definition get_uint_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.call_closure (|
              Ty.path "u64",
              M.get_trait_method (|
                "bytes::buf::buf_impl::Buf",
                T,
                [],
                [],
                "get_uint_ne",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| nbytes |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_int(&mut self, nbytes: usize) -> i64 {
                  ( **self).get_int(nbytes)
              }
      *)
      Definition get_int (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.call_closure (|
              Ty.path "i64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_int", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| nbytes |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_int_le(&mut self, nbytes: usize) -> i64 {
                  ( **self).get_int_le(nbytes)
              }
      *)
      Definition get_int_le (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.call_closure (|
              Ty.path "i64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_int_le", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| nbytes |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn get_int_ne(&mut self, nbytes: usize) -> i64 {
                  ( **self).get_int_ne(nbytes)
              }
      *)
      Definition get_int_ne (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; nbytes ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let nbytes := M.alloc (| nbytes |) in
            M.call_closure (|
              Ty.path "i64",
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", T, [], [], "get_int_ne", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| nbytes |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
              fn copy_to_bytes(&mut self, len: usize) -> crate::Bytes {
                  ( **self).copy_to_bytes(len)
              }
      *)
      Definition copy_to_bytes
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; len ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let len := M.alloc (| len |) in
            M.call_closure (|
              Ty.path "bytes::bytes::Bytes",
              M.get_trait_method (|
                "bytes::buf::buf_impl::Buf",
                T,
                [],
                [],
                "copy_to_bytes",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |);
                M.read (| len |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "bytes::buf::buf_impl::Buf"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *)
          [
            ("remaining", InstanceField.Method (remaining T));
            ("chunk", InstanceField.Method (chunk T));
            ("chunks_vectored", InstanceField.Method (chunks_vectored T));
            ("advance", InstanceField.Method (advance T));
            ("has_remaining", InstanceField.Method (has_remaining T));
            ("copy_to_slice", InstanceField.Method (copy_to_slice T));
            ("get_u8", InstanceField.Method (get_u8 T));
            ("get_i8", InstanceField.Method (get_i8 T));
            ("get_u16", InstanceField.Method (get_u16 T));
            ("get_u16_le", InstanceField.Method (get_u16_le T));
            ("get_u16_ne", InstanceField.Method (get_u16_ne T));
            ("get_i16", InstanceField.Method (get_i16 T));
            ("get_i16_le", InstanceField.Method (get_i16_le T));
            ("get_i16_ne", InstanceField.Method (get_i16_ne T));
            ("get_u32", InstanceField.Method (get_u32 T));
            ("get_u32_le", InstanceField.Method (get_u32_le T));
            ("get_u32_ne", InstanceField.Method (get_u32_ne T));
            ("get_i32", InstanceField.Method (get_i32 T));
            ("get_i32_le", InstanceField.Method (get_i32_le T));
            ("get_i32_ne", InstanceField.Method (get_i32_ne T));
            ("get_u64", InstanceField.Method (get_u64 T));
            ("get_u64_le", InstanceField.Method (get_u64_le T));
            ("get_u64_ne", InstanceField.Method (get_u64_ne T));
            ("get_i64", InstanceField.Method (get_i64 T));
            ("get_i64_le", InstanceField.Method (get_i64_le T));
            ("get_i64_ne", InstanceField.Method (get_i64_ne T));
            ("get_uint", InstanceField.Method (get_uint T));
            ("get_uint_le", InstanceField.Method (get_uint_le T));
            ("get_uint_ne", InstanceField.Method (get_uint_ne T));
            ("get_int", InstanceField.Method (get_int T));
            ("get_int_le", InstanceField.Method (get_int_le T));
            ("get_int_ne", InstanceField.Method (get_int_ne T));
            ("copy_to_bytes", InstanceField.Method (copy_to_bytes T))
          ].
    End Impl_bytes_buf_buf_impl_Buf_where_bytes_buf_buf_impl_Buf_T_where_core_marker_Sized_T_for_alloc_boxed_Box_T_alloc_alloc_Global.
    
    Module Impl_bytes_buf_buf_impl_Buf_for_ref__slice_u8.
      Definition Self : Ty.t :=
        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ].
      
      (*
          fn remaining(&self) -> usize {
              self.len()
          }
      *)
      Definition remaining (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                "len",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn chunk(&self) -> &[u8] {
              self
          }
      *)
      Definition chunk (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn advance(&mut self, cnt: usize) {
              if self.len() < cnt {
                  panic_advance(cnt, self.len());
              }
      
              *self = &self[cnt..];
          }
      *)
      Definition advance (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; cnt ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let cnt := M.alloc (| cnt |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.lt,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                                      |)
                                    ]
                                  |);
                                  M.read (| cnt |)
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "bytes::panic_advance", [], [] |),
                              [
                                M.read (| cnt |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.write (|
                    M.deref (| M.read (| self |) |),
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              M.get_trait_method (|
                                "core::ops::index::Index",
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::RangeFrom")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                                "index",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                                |);
                                Value.StructRecord
                                  "core::ops::range::RangeFrom"
                                  [ ("start", M.read (| cnt |)) ]
                              ]
                            |)
                          |)
                        |)
                      |)
                    |)
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn copy_to_slice(&mut self, dst: &mut [u8]) {
              if self.len() < dst.len() {
                  panic_advance(dst.len(), self.len());
              }
      
              dst.copy_from_slice(&self[..dst.len()]);
              self.advance(dst.len());
          }
      *)
      Definition copy_to_slice (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; dst ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let dst := M.alloc (| dst |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.lt,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| dst |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "bytes::panic_advance", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| dst |) |) |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                      "copy_from_slice",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| dst |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_trait_method (|
                                  "core::ops::index::Index",
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ],
                                  "index",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| dst |) |)
                                            |)
                                          ]
                                        |))
                                    ]
                                ]
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "bytes::buf::buf_impl::Buf",
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                      [],
                      [],
                      "advance",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| dst |) |) |) ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "bytes::buf::buf_impl::Buf"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [
            ("remaining", InstanceField.Method remaining);
            ("chunk", InstanceField.Method chunk);
            ("advance", InstanceField.Method advance);
            ("copy_to_slice", InstanceField.Method copy_to_slice)
          ].
    End Impl_bytes_buf_buf_impl_Buf_for_ref__slice_u8.
    
    Module Impl_bytes_buf_buf_impl_Buf_where_core_convert_AsRef_T_slice_u8_for_std_io_cursor_Cursor_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "std::io::cursor::Cursor") [] [ T ].
      
      (*
          fn remaining(&self) -> usize {
              saturating_sub_usize_u64(self.get_ref().as_ref().len(), self.position())
          }
      *)
      Definition remaining (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_function (| "bytes::saturating_sub_usize_u64", [], [] |),
              [
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                    "len",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                          M.get_trait_method (|
                            "core::convert::AsRef",
                            T,
                            [],
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            "as_ref",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "&") [] [ T ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "std::io::cursor::Cursor") [] [ T ],
                                    "get_ref",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |);
                M.call_closure (|
                  Ty.path "u64",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "std::io::cursor::Cursor") [] [ T ],
                    "position",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn chunk(&self) -> &[u8] {
              let slice = self.get_ref().as_ref();
              let pos = min_u64_usize(self.position(), slice.len());
              &slice[pos..]
          }
      *)
      Definition chunk (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ slice :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_trait_method (|
                      "core::convert::AsRef",
                      T,
                      [],
                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                      "as_ref",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ T ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "std::io::cursor::Cursor") [] [ T ],
                              "get_ref",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ pos : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "bytes::min_u64_usize", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "u64",
                        M.get_associated_function (|
                          Ty.apply (Ty.path "std::io::cursor::Cursor") [] [ T ],
                          "position",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |);
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| slice |) |) |) ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                          M.get_trait_method (|
                            "core::ops::index::Index",
                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                            [],
                            [
                              Ty.apply
                                (Ty.path "core::ops::range::RangeFrom")
                                []
                                [ Ty.path "usize" ]
                            ],
                            "index",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| slice |) |) |);
                            Value.StructRecord
                              "core::ops::range::RangeFrom"
                              [ ("start", M.read (| pos |)) ]
                          ]
                        |)
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn advance(&mut self, cnt: usize) {
              let len = self.get_ref().as_ref().len();
              let pos = self.position();
      
              // We intentionally allow `cnt == 0` here even if `pos > len`.
              let max_cnt = saturating_sub_usize_u64(len, pos);
              if cnt > max_cnt {
                  panic_advance(cnt, max_cnt);
              }
      
              // This will not overflow because either `cnt == 0` or the sum is not
              // greater than `len`.
              self.set_position(pos + cnt as u64);
          }
      *)
      Definition advance (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; cnt ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let cnt := M.alloc (| cnt |) in
            M.read (|
              let~ len : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                      "len",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            M.get_trait_method (|
                              "core::convert::AsRef",
                              T,
                              [],
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              "as_ref",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply (Ty.path "&") [] [ T ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "std::io::cursor::Cursor") [] [ T ],
                                      "get_ref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ pos : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "std::io::cursor::Cursor") [] [ T ],
                      "position",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ max_cnt : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "bytes::saturating_sub_usize_u64", [], [] |),
                    [ M.read (| len |); M.read (| pos |) ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.gt,
                                [ M.read (| cnt |); M.read (| max_cnt |) ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "bytes::panic_advance", [], [] |),
                              [ M.read (| cnt |); M.read (| max_cnt |) ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "std::io::cursor::Cursor") [] [ T ],
                      "set_position",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.add,
                        [ M.read (| pos |); M.cast (Ty.path "u64") (M.read (| cnt |)) ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "bytes::buf::buf_impl::Buf"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *)
          [
            ("remaining", InstanceField.Method (remaining T));
            ("chunk", InstanceField.Method (chunk T));
            ("advance", InstanceField.Method (advance T))
          ].
    End Impl_bytes_buf_buf_impl_Buf_where_core_convert_AsRef_T_slice_u8_for_std_io_cursor_Cursor_T.
    
    (* fn _assert_trait_object(_b: &dyn Buf) {} *)
    Definition _assert_trait_object (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ _b ] =>
        ltac:(M.monadic
          (let _b := M.alloc (| _b |) in
          Value.Tuple []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction__assert_trait_object :
      M.IsFunction.C "bytes::buf::buf_impl::_assert_trait_object" _assert_trait_object.
    Admitted.
    Global Typeclasses Opaque _assert_trait_object.
  End buf_impl.
End buf.
