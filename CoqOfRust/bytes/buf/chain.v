(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module buf.
  Module chain.
    (* StructRecord
      {
        name := "Chain";
        const_params := [];
        ty_params := [ "T"; "U" ];
        fields := [ ("a", T); ("b", U) ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_where_core_fmt_Debug_U_for_bytes_buf_chain_Chain_T_U.
      Definition Self (T U : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "bytes::buf::chain::Chain") [] [ T; U ].
      
      (* Debug *)
      Definition fmt (T U : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Chain" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "a" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "bytes::buf::chain::Chain",
                          "a"
                        |)
                      |)
                    |)
                  |));
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "b" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "bytes::buf::chain::Chain",
                              "b"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T U : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T U)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt T U)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_T_where_core_fmt_Debug_U_for_bytes_buf_chain_Chain_T_U.
    
    Module Impl_bytes_buf_chain_Chain_T_U.
      Definition Self (T U : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "bytes::buf::chain::Chain") [] [ T; U ].
      
      (*
          pub(crate) fn new(a: T, b: U) -> Chain<T, U> {
              Chain { a, b }
          }
      *)
      Definition new (T U : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ a; b ] =>
          ltac:(M.monadic
            (let a := M.alloc (| a |) in
            let b := M.alloc (| b |) in
            Value.StructRecord
              "bytes::buf::chain::Chain"
              [ ("a", M.read (| a |)); ("b", M.read (| b |)) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (T U : Ty.t),
        M.IsAssociatedFunction.C (Self T U) "new" (new T U).
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn first_ref(&self) -> &T {
              &self.a
          }
      *)
      Definition first_ref (T U : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "bytes::buf::chain::Chain",
                    "a"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_first_ref :
        forall (T U : Ty.t),
        M.IsAssociatedFunction.C (Self T U) "first_ref" (first_ref T U).
      Admitted.
      Global Typeclasses Opaque first_ref.
      
      (*
          pub fn first_mut(&mut self) -> &mut T {
              &mut self.a
          }
      *)
      Definition first_mut (T U : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "bytes::buf::chain::Chain",
                        "a"
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_first_mut :
        forall (T U : Ty.t),
        M.IsAssociatedFunction.C (Self T U) "first_mut" (first_mut T U).
      Admitted.
      Global Typeclasses Opaque first_mut.
      
      (*
          pub fn last_ref(&self) -> &U {
              &self.b
          }
      *)
      Definition last_ref (T U : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "bytes::buf::chain::Chain",
                    "b"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_last_ref :
        forall (T U : Ty.t),
        M.IsAssociatedFunction.C (Self T U) "last_ref" (last_ref T U).
      Admitted.
      Global Typeclasses Opaque last_ref.
      
      (*
          pub fn last_mut(&mut self) -> &mut U {
              &mut self.b
          }
      *)
      Definition last_mut (T U : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "bytes::buf::chain::Chain",
                        "b"
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_last_mut :
        forall (T U : Ty.t),
        M.IsAssociatedFunction.C (Self T U) "last_mut" (last_mut T U).
      Admitted.
      Global Typeclasses Opaque last_mut.
      
      (*
          pub fn into_inner(self) -> (T, U) {
              (self.a, self.b)
          }
      *)
      Definition into_inner
          (T U : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.Tuple
              [
                M.read (|
                  M.SubPointer.get_struct_record_field (| self, "bytes::buf::chain::Chain", "a" |)
                |);
                M.read (|
                  M.SubPointer.get_struct_record_field (| self, "bytes::buf::chain::Chain", "b" |)
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_into_inner :
        forall (T U : Ty.t),
        M.IsAssociatedFunction.C (Self T U) "into_inner" (into_inner T U).
      Admitted.
      Global Typeclasses Opaque into_inner.
    End Impl_bytes_buf_chain_Chain_T_U.
    
    Module Impl_bytes_buf_buf_impl_Buf_where_bytes_buf_buf_impl_Buf_T_where_bytes_buf_buf_impl_Buf_U_for_bytes_buf_chain_Chain_T_U.
      Definition Self (T U : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "bytes::buf::chain::Chain") [] [ T; U ].
      
      (*
          fn remaining(&self) -> usize {
              self.a.remaining().saturating_add(self.b.remaining())
          }
      *)
      Definition remaining (T U : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (| Ty.path "usize", "saturating_add", [], [] |),
              [
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "bytes::buf::buf_impl::Buf",
                    T,
                    [],
                    [],
                    "remaining",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "bytes::buf::chain::Chain",
                        "a"
                      |)
                    |)
                  ]
                |);
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "bytes::buf::buf_impl::Buf",
                    U,
                    [],
                    [],
                    "remaining",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "bytes::buf::chain::Chain",
                        "b"
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn chunk(&self) -> &[u8] {
              if self.a.has_remaining() {
                  self.a.chunk()
              } else {
                  self.b.chunk()
              }
          }
      *)
      Definition chunk (T U : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Some (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_trait_method (|
                                "bytes::buf::buf_impl::Buf",
                                T,
                                [],
                                [],
                                "has_remaining",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "bytes::buf::chain::Chain",
                                    "a"
                                  |)
                                |)
                              ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              M.get_trait_method (|
                                "bytes::buf::buf_impl::Buf",
                                T,
                                [],
                                [],
                                "chunk",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "bytes::buf::chain::Chain",
                                    "a"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              M.get_trait_method (|
                                "bytes::buf::buf_impl::Buf",
                                U,
                                [],
                                [],
                                "chunk",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "bytes::buf::chain::Chain",
                                    "b"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn advance(&mut self, mut cnt: usize) {
              let a_rem = self.a.remaining();
      
              if a_rem != 0 {
                  if a_rem >= cnt {
                      self.a.advance(cnt);
                      return;
                  }
      
                  // Consume what is left of a
                  self.a.advance(a_rem);
      
                  cnt -= a_rem;
              }
      
              self.b.advance(cnt);
          }
      *)
      Definition advance (T U : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ self; cnt ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let cnt := M.alloc (| cnt |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ a_rem : Ty.path "usize" :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "bytes::buf::buf_impl::Buf",
                          T,
                          [],
                          [],
                          "remaining",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "bytes::buf::chain::Chain",
                              "a"
                            |)
                          |)
                        ]
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ne,
                                    [ M.read (| a_rem |); Value.Integer IntegerKind.Usize 0 ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.ge,
                                              [ M.read (| a_rem |); M.read (| cnt |) ]
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_trait_method (|
                                                    "bytes::buf::buf_impl::Buf",
                                                    T,
                                                    [],
                                                    [],
                                                    "advance",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| self |) |),
                                                        "bytes::buf::chain::Chain",
                                                        "a"
                                                      |)
                                                    |);
                                                    M.read (| cnt |)
                                                  ]
                                                |)
                                              |) in
                                            M.return_ (| Value.Tuple [] |)
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_trait_method (|
                                    "bytes::buf::buf_impl::Buf",
                                    T,
                                    [],
                                    [],
                                    "advance",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "bytes::buf::chain::Chain",
                                        "a"
                                      |)
                                    |);
                                    M.read (| a_rem |)
                                  ]
                                |)
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (|
                                let β := cnt in
                                M.write (|
                                  β,
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.sub,
                                    [ M.read (| β |); M.read (| a_rem |) ]
                                  |)
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "bytes::buf::buf_impl::Buf",
                          U,
                          [],
                          [],
                          "advance",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "bytes::buf::chain::Chain",
                              "b"
                            |)
                          |);
                          M.read (| cnt |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn chunks_vectored<'a>(&'a self, dst: &mut [IoSlice<'a>]) -> usize {
              let mut n = self.a.chunks_vectored(dst);
              n += self.b.chunks_vectored(&mut dst[n..]);
              n
          }
      *)
      Definition chunks_vectored
          (T U : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ self; dst ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let dst := M.alloc (| dst |) in
            M.read (|
              let~ n : Ty.path "usize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "bytes::buf::buf_impl::Buf",
                      T,
                      [],
                      [],
                      "chunks_vectored",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "bytes::buf::chain::Chain",
                          "a"
                        |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| dst |) |) |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  let β := n in
                  M.write (|
                    β,
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.add,
                      [
                        M.read (| β |);
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_trait_method (|
                            "bytes::buf::buf_impl::Buf",
                            U,
                            [],
                            [],
                            "chunks_vectored",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "bytes::buf::chain::Chain",
                                "b"
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [ Ty.path "std::io::IoSlice" ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::index::IndexMut",
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [ Ty.path "std::io::IoSlice" ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeFrom")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                        "index_mut",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| dst |) |)
                                        |);
                                        Value.StructRecord
                                          "core::ops::range::RangeFrom"
                                          [ ("start", M.read (| n |)) ]
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                |) in
              n
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn copy_to_bytes(&mut self, len: usize) -> Bytes {
              let a_rem = self.a.remaining();
              if a_rem >= len {
                  self.a.copy_to_bytes(len)
              } else if a_rem == 0 {
                  self.b.copy_to_bytes(len)
              } else {
                  assert!(
                      len - a_rem <= self.b.remaining(),
                      "`len` greater than remaining"
                  );
                  let mut ret = crate::BytesMut::with_capacity(len);
                  ret.put(&mut self.a);
                  ret.put((&mut self.b).take(len - a_rem));
                  ret.freeze()
              }
          }
      *)
      Definition copy_to_bytes
          (T U : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ self; len ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let len := M.alloc (| len |) in
            M.read (|
              let~ a_rem : Ty.path "usize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "bytes::buf::buf_impl::Buf",
                      T,
                      [],
                      [],
                      "remaining",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "bytes::buf::chain::Chain",
                          "a"
                        |)
                      |)
                    ]
                  |)
                |) in
              M.match_operator (|
                Some (Ty.path "bytes::bytes::Bytes"),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.ge,
                              [ M.read (| a_rem |); M.read (| len |) ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "bytes::bytes::Bytes",
                          M.get_trait_method (|
                            "bytes::buf::buf_impl::Buf",
                            T,
                            [],
                            [],
                            "copy_to_bytes",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "bytes::buf::chain::Chain",
                                "a"
                              |)
                            |);
                            M.read (| len |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Some (Ty.path "bytes::bytes::Bytes"),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.eq,
                                      [ M.read (| a_rem |); Value.Integer IntegerKind.Usize 0 ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "bytes::bytes::Bytes",
                                  M.get_trait_method (|
                                    "bytes::buf::buf_impl::Buf",
                                    U,
                                    [],
                                    [],
                                    "copy_to_bytes",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "bytes::buf::chain::Chain",
                                        "b"
                                      |)
                                    |);
                                    M.read (| len |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.le,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.sub,
                                                      [ M.read (| len |); M.read (| a_rem |) ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_trait_method (|
                                                        "bytes::buf::buf_impl::Buf",
                                                        U,
                                                        [],
                                                        [],
                                                        "remaining",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "bytes::buf::chain::Chain",
                                                            "b"
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.call_closure (|
                                              Ty.path "never",
                                              M.get_function (| "core::panicking::panic", [], [] |),
                                              [ mk_str (| "`len` greater than remaining" |) ]
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              let~ ret : Ty.path "bytes::bytes_mut::BytesMut" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bytes::bytes_mut::BytesMut",
                                    M.get_associated_function (|
                                      Ty.path "bytes::bytes_mut::BytesMut",
                                      "with_capacity",
                                      [],
                                      []
                                    |),
                                    [ M.read (| len |) ]
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_trait_method (|
                                      "bytes::buf::buf_mut::BufMut",
                                      Ty.path "bytes::bytes_mut::BytesMut",
                                      [],
                                      [],
                                      "put",
                                      [],
                                      [ Ty.apply (Ty.path "&mut") [] [ T ] ]
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.MutRef, ret |);
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "bytes::buf::chain::Chain",
                                          "a"
                                        |)
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_trait_method (|
                                      "bytes::buf::buf_mut::BufMut",
                                      Ty.path "bytes::bytes_mut::BytesMut",
                                      [],
                                      [],
                                      "put",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "bytes::buf::take::Take")
                                          []
                                          [ Ty.apply (Ty.path "&mut") [] [ U ] ]
                                      ]
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.MutRef, ret |);
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "bytes::buf::take::Take")
                                          []
                                          [ Ty.apply (Ty.path "&mut") [] [ U ] ],
                                        M.get_trait_method (|
                                          "bytes::buf::buf_impl::Buf",
                                          Ty.apply (Ty.path "&mut") [] [ U ],
                                          [],
                                          [],
                                          "take",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "bytes::buf::chain::Chain",
                                                  "b"
                                                |)
                                              |)
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.sub,
                                            [ M.read (| len |); M.read (| a_rem |) ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "bytes::bytes::Bytes",
                                  M.get_associated_function (|
                                    Ty.path "bytes::bytes_mut::BytesMut",
                                    "freeze",
                                    [],
                                    []
                                  |),
                                  [ M.read (| ret |) ]
                                |)
                              |)))
                        ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T U : Ty.t),
        M.IsTraitInstance
          "bytes::buf::buf_impl::Buf"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T U)
          (* Instance *)
          [
            ("remaining", InstanceField.Method (remaining T U));
            ("chunk", InstanceField.Method (chunk T U));
            ("advance", InstanceField.Method (advance T U));
            ("chunks_vectored", InstanceField.Method (chunks_vectored T U));
            ("copy_to_bytes", InstanceField.Method (copy_to_bytes T U))
          ].
    End Impl_bytes_buf_buf_impl_Buf_where_bytes_buf_buf_impl_Buf_T_where_bytes_buf_buf_impl_Buf_U_for_bytes_buf_chain_Chain_T_U.
    
    Module Impl_bytes_buf_buf_mut_BufMut_where_bytes_buf_buf_mut_BufMut_T_where_bytes_buf_buf_mut_BufMut_U_for_bytes_buf_chain_Chain_T_U.
      Definition Self (T U : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "bytes::buf::chain::Chain") [] [ T; U ].
      
      (*
          fn remaining_mut(&self) -> usize {
              self.a
                  .remaining_mut()
                  .saturating_add(self.b.remaining_mut())
          }
      *)
      Definition remaining_mut
          (T U : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (| Ty.path "usize", "saturating_add", [], [] |),
              [
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "bytes::buf::buf_mut::BufMut",
                    T,
                    [],
                    [],
                    "remaining_mut",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "bytes::buf::chain::Chain",
                        "a"
                      |)
                    |)
                  ]
                |);
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "bytes::buf::buf_mut::BufMut",
                    U,
                    [],
                    [],
                    "remaining_mut",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "bytes::buf::chain::Chain",
                        "b"
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn chunk_mut(&mut self) -> &mut UninitSlice {
              if self.a.has_remaining_mut() {
                  self.a.chunk_mut()
              } else {
                  self.b.chunk_mut()
              }
          }
      *)
      Definition chunk_mut (T U : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.read (|
                      M.match_operator (|
                        Some
                          (Ty.apply
                            (Ty.path "&mut")
                            []
                            [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ]),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "bytes::buf::buf_mut::BufMut",
                                        T,
                                        [],
                                        [],
                                        "has_remaining_mut",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "bytes::buf::chain::Chain",
                                            "a"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                                          M.get_trait_method (|
                                            "bytes::buf::buf_mut::BufMut",
                                            T,
                                            [],
                                            [],
                                            "chunk_mut",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "bytes::buf::chain::Chain",
                                                "a"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                                      M.get_trait_method (|
                                        "bytes::buf::buf_mut::BufMut",
                                        U,
                                        [],
                                        [],
                                        "chunk_mut",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "bytes::buf::chain::Chain",
                                            "b"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          unsafe fn advance_mut(&mut self, mut cnt: usize) {
              let a_rem = self.a.remaining_mut();
      
              if a_rem != 0 {
                  if a_rem >= cnt {
                      self.a.advance_mut(cnt);
                      return;
                  }
      
                  // Consume what is left of a
                  self.a.advance_mut(a_rem);
      
                  cnt -= a_rem;
              }
      
              self.b.advance_mut(cnt);
          }
      *)
      Definition advance_mut
          (T U : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ self; cnt ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let cnt := M.alloc (| cnt |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ a_rem : Ty.path "usize" :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "bytes::buf::buf_mut::BufMut",
                          T,
                          [],
                          [],
                          "remaining_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "bytes::buf::chain::Chain",
                              "a"
                            |)
                          |)
                        ]
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ne,
                                    [ M.read (| a_rem |); Value.Integer IntegerKind.Usize 0 ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.ge,
                                              [ M.read (| a_rem |); M.read (| cnt |) ]
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_trait_method (|
                                                    "bytes::buf::buf_mut::BufMut",
                                                    T,
                                                    [],
                                                    [],
                                                    "advance_mut",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| self |) |),
                                                        "bytes::buf::chain::Chain",
                                                        "a"
                                                      |)
                                                    |);
                                                    M.read (| cnt |)
                                                  ]
                                                |)
                                              |) in
                                            M.return_ (| Value.Tuple [] |)
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_trait_method (|
                                    "bytes::buf::buf_mut::BufMut",
                                    T,
                                    [],
                                    [],
                                    "advance_mut",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "bytes::buf::chain::Chain",
                                        "a"
                                      |)
                                    |);
                                    M.read (| a_rem |)
                                  ]
                                |)
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (|
                                let β := cnt in
                                M.write (|
                                  β,
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.sub,
                                    [ M.read (| β |); M.read (| a_rem |) ]
                                  |)
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "bytes::buf::buf_mut::BufMut",
                          U,
                          [],
                          [],
                          "advance_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "bytes::buf::chain::Chain",
                              "b"
                            |)
                          |);
                          M.read (| cnt |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T U : Ty.t),
        M.IsTraitInstance
          "bytes::buf::buf_mut::BufMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T U)
          (* Instance *)
          [
            ("remaining_mut", InstanceField.Method (remaining_mut T U));
            ("chunk_mut", InstanceField.Method (chunk_mut T U));
            ("advance_mut", InstanceField.Method (advance_mut T U))
          ].
    End Impl_bytes_buf_buf_mut_BufMut_where_bytes_buf_buf_mut_BufMut_T_where_bytes_buf_buf_mut_BufMut_U_for_bytes_buf_chain_Chain_T_U.
    
    Module Impl_core_iter_traits_collect_IntoIterator_where_bytes_buf_buf_impl_Buf_T_where_bytes_buf_buf_impl_Buf_U_for_bytes_buf_chain_Chain_T_U.
      Definition Self (T U : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "bytes::buf::chain::Chain") [] [ T; U ].
      
      (*     type Item = u8; *)
      Definition _Item (T U : Ty.t) : Ty.t := Ty.path "u8".
      
      (*     type IntoIter = IntoIter<Chain<T, U>>; *)
      Definition _IntoIter (T U : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "bytes::buf::iter::IntoIter")
          []
          [ Ty.apply (Ty.path "bytes::buf::chain::Chain") [] [ T; U ] ].
      
      (*
          fn into_iter(self) -> Self::IntoIter {
              IntoIter::new(self)
          }
      *)
      Definition into_iter (T U : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T U in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "bytes::buf::iter::IntoIter")
                []
                [ Ty.apply (Ty.path "bytes::buf::chain::Chain") [] [ T; U ] ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "bytes::buf::iter::IntoIter")
                  []
                  [ Ty.apply (Ty.path "bytes::buf::chain::Chain") [] [ T; U ] ],
                "new",
                [],
                []
              |),
              [ M.read (| self |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T U : Ty.t),
        M.IsTraitInstance
          "core::iter::traits::collect::IntoIterator"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T U)
          (* Instance *)
          [
            ("Item", InstanceField.Ty (_Item T U));
            ("IntoIter", InstanceField.Ty (_IntoIter T U));
            ("into_iter", InstanceField.Method (into_iter T U))
          ].
    End Impl_core_iter_traits_collect_IntoIterator_where_bytes_buf_buf_impl_Buf_T_where_bytes_buf_buf_impl_Buf_U_for_bytes_buf_chain_Chain_T_U.
  End chain.
End buf.
