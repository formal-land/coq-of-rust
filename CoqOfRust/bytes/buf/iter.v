(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module buf.
  Module iter.
    (* StructRecord
      {
        name := "IntoIter";
        const_params := [];
        ty_params := [ "T" ];
        fields := [ ("inner", T) ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_bytes_buf_iter_IntoIter_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "bytes::buf::iter::IntoIter") [] [ T ].
      
      (* Debug *)
      Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "IntoIter" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "bytes::buf::iter::IntoIter",
                              "inner"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_bytes_buf_iter_IntoIter_T.
    
    Module Impl_bytes_buf_iter_IntoIter_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "bytes::buf::iter::IntoIter") [] [ T ].
      
      (*
          pub fn new(inner: T) -> IntoIter<T> {
              IntoIter { inner }
          }
      *)
      Definition new (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ inner ] =>
          ltac:(M.monadic
            (let inner := M.alloc (| inner |) in
            Value.StructRecord
              "bytes::buf::iter::IntoIter"
              []
              [ T ]
              [ ("inner", M.read (| inner |)) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "new" (new T).
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn into_inner(self) -> T {
              self.inner
          }
      *)
      Definition into_inner (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (| self, "bytes::buf::iter::IntoIter", "inner" |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_into_inner :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "into_inner" (into_inner T).
      Admitted.
      Global Typeclasses Opaque into_inner.
      
      (*
          pub fn get_ref(&self) -> &T {
              &self.inner
          }
      *)
      Definition get_ref (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "bytes::buf::iter::IntoIter",
                    "inner"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_ref :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "get_ref" (get_ref T).
      Admitted.
      Global Typeclasses Opaque get_ref.
      
      (*
          pub fn get_mut(&mut self) -> &mut T {
              &mut self.inner
          }
      *)
      Definition get_mut (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "bytes::buf::iter::IntoIter",
                        "inner"
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_mut :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "get_mut" (get_mut T).
      Admitted.
      Global Typeclasses Opaque get_mut.
    End Impl_bytes_buf_iter_IntoIter_T.
    
    Module Impl_core_iter_traits_iterator_Iterator_where_bytes_buf_buf_impl_Buf_T_for_bytes_buf_iter_IntoIter_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "bytes::buf::iter::IntoIter") [] [ T ].
      
      (*     type Item = u8; *)
      Definition _Item (T : Ty.t) : Ty.t := Ty.path "u8".
      
      (*
          fn next(&mut self) -> Option<u8> {
              if !self.inner.has_remaining() {
                  return None;
              }
      
              let b = self.inner.chunk()[0];
              self.inner.advance(1);
      
              Some(b)
          }
      *)
      Definition next (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u8" ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "bytes::buf::buf_impl::Buf",
                                        T,
                                        [],
                                        [],
                                        "has_remaining",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "bytes::buf::iter::IntoIter",
                                            "inner"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.StructTuple
                                      "core::option::Option::None"
                                      []
                                      [ Ty.path "u8" ]
                                      []
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ b : Ty.apply (Ty.path "*") [] [ Ty.path "u8" ] :=
                    M.copy (|
                      M.SubPointer.get_array_field (|
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            M.get_trait_method (|
                              "bytes::buf::buf_impl::Buf",
                              T,
                              [],
                              [],
                              "chunk",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "bytes::buf::iter::IntoIter",
                                  "inner"
                                |)
                              |)
                            ]
                          |)
                        |),
                        Value.Integer IntegerKind.Usize 0
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "bytes::buf::buf_impl::Buf",
                          T,
                          [],
                          [],
                          "advance",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "bytes::buf::iter::IntoIter",
                              "inner"
                            |)
                          |);
                          Value.Integer IntegerKind.Usize 1
                        ]
                      |)
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::option::Option::Some"
                      []
                      [ Ty.path "u8" ]
                      [ M.read (| b |) ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn size_hint(&self) -> (usize, Option<usize>) {
              let rem = self.inner.remaining();
              (rem, Some(rem))
          }
      *)
      Definition size_hint (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ rem : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "bytes::buf::buf_impl::Buf",
                      T,
                      [],
                      [],
                      "remaining",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "bytes::buf::iter::IntoIter",
                          "inner"
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                Value.Tuple
                  [
                    M.read (| rem |);
                    Value.StructTuple
                      "core::option::Option::Some"
                      []
                      [ Ty.path "usize" ]
                      [ M.read (| rem |) ]
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::iter::traits::iterator::Iterator"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *)
          [
            ("Item", InstanceField.Ty (_Item T));
            ("next", InstanceField.Method (next T));
            ("size_hint", InstanceField.Method (size_hint T))
          ].
    End Impl_core_iter_traits_iterator_Iterator_where_bytes_buf_buf_impl_Buf_T_for_bytes_buf_iter_IntoIter_T.
    
    Module Impl_core_iter_traits_exact_size_ExactSizeIterator_where_bytes_buf_buf_impl_Buf_T_for_bytes_buf_iter_IntoIter_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "bytes::buf::iter::IntoIter") [] [ T ].
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::iter::traits::exact_size::ExactSizeIterator"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [].
    End Impl_core_iter_traits_exact_size_ExactSizeIterator_where_bytes_buf_buf_impl_Buf_T_for_bytes_buf_iter_IntoIter_T.
  End iter.
End buf.
