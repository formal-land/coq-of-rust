(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module buf.
  Module reader.
    (* StructRecord
      {
        name := "Reader";
        const_params := [];
        ty_params := [ "B" ];
        fields := [ ("buf", B) ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_B_for_bytes_buf_reader_Reader_B.
      Definition Self (B : Ty.t) : Ty.t := Ty.apply (Ty.path "bytes::buf::reader::Reader") [] [ B ].
      
      (* Debug *)
      Definition fmt (B : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self B in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Reader" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "buf" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "bytes::buf::reader::Reader",
                              "buf"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (B : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self B)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt B)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_B_for_bytes_buf_reader_Reader_B.
    
    (*
    pub fn new<B>(buf: B) -> Reader<B> {
        Reader { buf }
    }
    *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ B ], [ buf ] =>
        ltac:(M.monadic
          (let buf := M.alloc (| buf |) in
          Value.StructRecord "bytes::buf::reader::Reader" [] [ B ] [ ("buf", M.read (| buf |)) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_new : M.IsFunction.C "bytes::buf::reader::new" new.
    Admitted.
    Global Typeclasses Opaque new.
    
    Module Impl_bytes_buf_reader_Reader_B.
      Definition Self (B : Ty.t) : Ty.t := Ty.apply (Ty.path "bytes::buf::reader::Reader") [] [ B ].
      
      (*
          pub fn get_ref(&self) -> &B {
              &self.buf
          }
      *)
      Definition get_ref (B : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self B in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "bytes::buf::reader::Reader",
                    "buf"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_ref :
        forall (B : Ty.t),
        M.IsAssociatedFunction.C (Self B) "get_ref" (get_ref B).
      Admitted.
      Global Typeclasses Opaque get_ref.
      
      (*
          pub fn get_mut(&mut self) -> &mut B {
              &mut self.buf
          }
      *)
      Definition get_mut (B : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self B in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "bytes::buf::reader::Reader",
                        "buf"
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_mut :
        forall (B : Ty.t),
        M.IsAssociatedFunction.C (Self B) "get_mut" (get_mut B).
      Admitted.
      Global Typeclasses Opaque get_mut.
      
      (*
          pub fn into_inner(self) -> B {
              self.buf
          }
      *)
      Definition into_inner (B : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self B in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (| self, "bytes::buf::reader::Reader", "buf" |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_into_inner :
        forall (B : Ty.t),
        M.IsAssociatedFunction.C (Self B) "into_inner" (into_inner B).
      Admitted.
      Global Typeclasses Opaque into_inner.
    End Impl_bytes_buf_reader_Reader_B.
    
    Module Impl_std_io_Read_where_bytes_buf_buf_impl_Buf_B_where_core_marker_Sized_B_for_bytes_buf_reader_Reader_B.
      Definition Self (B : Ty.t) : Ty.t := Ty.apply (Ty.path "bytes::buf::reader::Reader") [] [ B ].
      
      (*
          fn read(&mut self, dst: &mut [u8]) -> io::Result<usize> {
              let len = cmp::min(self.buf.remaining(), dst.len());
      
              Buf::copy_to_slice(&mut self.buf, &mut dst[0..len]);
              Ok(len)
          }
      *)
      Definition read (B : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self B in
        match ε, τ, α with
        | [], [], [ self; dst ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let dst := M.alloc (| dst |) in
            M.read (|
              let~ len : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "core::cmp::min", [], [ Ty.path "usize" ] |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "bytes::buf::buf_impl::Buf",
                          B,
                          [],
                          [],
                          "remaining",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "bytes::buf::reader::Reader",
                              "buf"
                            |)
                          |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| dst |) |) |) ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "bytes::buf::buf_impl::Buf",
                      B,
                      [],
                      [],
                      "copy_to_slice",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "bytes::buf::reader::Reader",
                              "buf"
                            |)
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_trait_method (|
                                  "core::ops::index::IndexMut",
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ]
                                  ],
                                  "index_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| dst |) |)
                                  |);
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    []
                                    [ Ty.path "usize" ]
                                    [
                                      ("start", Value.Integer IntegerKind.Usize 0);
                                      ("end_", M.read (| len |))
                                    ]
                                ]
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructTuple
                  "core::result::Result::Ok"
                  []
                  [ Ty.path "usize"; Ty.path "std::io::error::Error" ]
                  [ M.read (| len |) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (B : Ty.t),
        M.IsTraitInstance
          "std::io::Read"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self B)
          (* Instance *) [ ("read", InstanceField.Method (read B)) ].
    End Impl_std_io_Read_where_bytes_buf_buf_impl_Buf_B_where_core_marker_Sized_B_for_bytes_buf_reader_Reader_B.
    
    Module Impl_std_io_BufRead_where_bytes_buf_buf_impl_Buf_B_where_core_marker_Sized_B_for_bytes_buf_reader_Reader_B.
      Definition Self (B : Ty.t) : Ty.t := Ty.apply (Ty.path "bytes::buf::reader::Reader") [] [ B ].
      
      (*
          fn fill_buf(&mut self) -> io::Result<&[u8]> {
              Ok(self.buf.chunk())
          }
      *)
      Definition fill_buf (B : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self B in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructTuple
              "core::result::Result::Ok"
              []
              [
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                Ty.path "std::io::error::Error"
              ]
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                      M.get_trait_method (|
                        "bytes::buf::buf_impl::Buf",
                        B,
                        [],
                        [],
                        "chunk",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "bytes::buf::reader::Reader",
                            "buf"
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn consume(&mut self, amt: usize) {
              self.buf.advance(amt)
          }
      *)
      Definition consume (B : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self B in
        match ε, τ, α with
        | [], [], [ self; amt ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let amt := M.alloc (| amt |) in
            M.call_closure (|
              Ty.tuple [],
              M.get_trait_method (| "bytes::buf::buf_impl::Buf", B, [], [], "advance", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "bytes::buf::reader::Reader",
                    "buf"
                  |)
                |);
                M.read (| amt |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (B : Ty.t),
        M.IsTraitInstance
          "std::io::BufRead"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self B)
          (* Instance *)
          [
            ("fill_buf", InstanceField.Method (fill_buf B));
            ("consume", InstanceField.Method (consume B))
          ].
    End Impl_std_io_BufRead_where_bytes_buf_buf_impl_Buf_B_where_core_marker_Sized_B_for_bytes_buf_reader_Reader_B.
  End reader.
End buf.
