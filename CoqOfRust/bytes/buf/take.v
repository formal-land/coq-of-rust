(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module buf.
  Module take.
    (* StructRecord
      {
        name := "Take";
        const_params := [];
        ty_params := [ "T" ];
        fields := [ ("inner", T); ("limit", Ty.path "usize") ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_bytes_buf_take_Take_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "bytes::buf::take::Take") [] [ T ].
      
      (* Debug *)
      Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Take" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "bytes::buf::take::Take",
                          "inner"
                        |)
                      |)
                    |)
                  |));
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "limit" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "bytes::buf::take::Take",
                              "limit"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_bytes_buf_take_Take_T.
    
    (*
    pub fn new<T>(inner: T, limit: usize) -> Take<T> {
        Take { inner, limit }
    }
    *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ inner; limit ] =>
        ltac:(M.monadic
          (let inner := M.alloc (| inner |) in
          let limit := M.alloc (| limit |) in
          Value.StructRecord
            "bytes::buf::take::Take"
            [ ("inner", M.read (| inner |)); ("limit", M.read (| limit |)) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_new : M.IsFunction.C "bytes::buf::take::new" new.
    Admitted.
    Global Typeclasses Opaque new.
    
    Module Impl_bytes_buf_take_Take_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "bytes::buf::take::Take") [] [ T ].
      
      (*
          pub fn into_inner(self) -> T {
              self.inner
          }
      *)
      Definition into_inner (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (| self, "bytes::buf::take::Take", "inner" |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_into_inner :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "into_inner" (into_inner T).
      Admitted.
      Global Typeclasses Opaque into_inner.
      
      (*
          pub fn get_ref(&self) -> &T {
              &self.inner
          }
      *)
      Definition get_ref (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "bytes::buf::take::Take",
                    "inner"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_ref :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "get_ref" (get_ref T).
      Admitted.
      Global Typeclasses Opaque get_ref.
      
      (*
          pub fn get_mut(&mut self) -> &mut T {
              &mut self.inner
          }
      *)
      Definition get_mut (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "bytes::buf::take::Take",
                        "inner"
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_mut :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "get_mut" (get_mut T).
      Admitted.
      Global Typeclasses Opaque get_mut.
      
      (*
          pub fn limit(&self) -> usize {
              self.limit
          }
      *)
      Definition limit (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "bytes::buf::take::Take",
                "limit"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_limit :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "limit" (limit T).
      Admitted.
      Global Typeclasses Opaque limit.
      
      (*
          pub fn set_limit(&mut self, lim: usize) {
              self.limit = lim
          }
      *)
      Definition set_limit (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; lim ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let lim := M.alloc (| lim |) in
            M.write (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "bytes::buf::take::Take",
                "limit"
              |),
              M.read (| lim |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set_limit :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "set_limit" (set_limit T).
      Admitted.
      Global Typeclasses Opaque set_limit.
    End Impl_bytes_buf_take_Take_T.
    
    Module Impl_bytes_buf_buf_impl_Buf_where_bytes_buf_buf_impl_Buf_T_for_bytes_buf_take_Take_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "bytes::buf::take::Take") [] [ T ].
      
      (*
          fn remaining(&self) -> usize {
              cmp::min(self.inner.remaining(), self.limit)
          }
      *)
      Definition remaining (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_function (| "core::cmp::min", [], [ Ty.path "usize" ] |),
              [
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "bytes::buf::buf_impl::Buf",
                    T,
                    [],
                    [],
                    "remaining",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "bytes::buf::take::Take",
                        "inner"
                      |)
                    |)
                  ]
                |);
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "bytes::buf::take::Take",
                    "limit"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn chunk(&self) -> &[u8] {
              let bytes = self.inner.chunk();
              &bytes[..cmp::min(bytes.len(), self.limit)]
          }
      *)
      Definition chunk (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ bytes :
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_trait_method (|
                      "bytes::buf::buf_impl::Buf",
                      T,
                      [],
                      [],
                      "chunk",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "bytes::buf::take::Take",
                          "inner"
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                          M.get_trait_method (|
                            "core::ops::index::Index",
                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                            [],
                            [ Ty.apply (Ty.path "core::ops::range::RangeTo") [] [ Ty.path "usize" ]
                            ],
                            "index",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| bytes |) |) |);
                            Value.StructRecord
                              "core::ops::range::RangeTo"
                              [
                                ("end_",
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_function (| "core::cmp::min", [], [ Ty.path "usize" ] |),
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| bytes |) |)
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "bytes::buf::take::Take",
                                          "limit"
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          ]
                        |)
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn advance(&mut self, cnt: usize) {
              assert!(cnt <= self.limit);
              self.inner.advance(cnt);
              self.limit -= cnt;
          }
      *)
      Definition advance (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; cnt ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let cnt := M.alloc (| cnt |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.le,
                                  [
                                    M.read (| cnt |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "bytes::buf::take::Take",
                                        "limit"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic", [], [] |),
                              [ mk_str (| "assertion failed: cnt <= self.limit" |) ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "bytes::buf::buf_impl::Buf",
                      T,
                      [],
                      [],
                      "advance",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "bytes::buf::take::Take",
                          "inner"
                        |)
                      |);
                      M.read (| cnt |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  let β :=
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "bytes::buf::take::Take",
                      "limit"
                    |) in
                  M.write (|
                    β,
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.sub,
                      [ M.read (| β |); M.read (| cnt |) ]
                    |)
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn copy_to_bytes(&mut self, len: usize) -> Bytes {
              assert!(len <= self.remaining(), "`len` greater than remaining");
      
              let r = self.inner.copy_to_bytes(len);
              self.limit -= len;
              r
          }
      *)
      Definition copy_to_bytes
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; len ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let len := M.alloc (| len |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.le,
                                  [
                                    M.read (| len |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_trait_method (|
                                        "bytes::buf::buf_impl::Buf",
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.apply (Ty.path "bytes::buf::take::Take") [] [ T ] ],
                                        [],
                                        [],
                                        "remaining",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                    |)
                                  ]
                                |)
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic", [], [] |),
                              [ mk_str (| "`len` greater than remaining" |) ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ r : Ty.path "bytes::bytes::Bytes" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "bytes::bytes::Bytes",
                    M.get_trait_method (|
                      "bytes::buf::buf_impl::Buf",
                      T,
                      [],
                      [],
                      "copy_to_bytes",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "bytes::buf::take::Take",
                          "inner"
                        |)
                      |);
                      M.read (| len |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  let β :=
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "bytes::buf::take::Take",
                      "limit"
                    |) in
                  M.write (|
                    β,
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.sub,
                      [ M.read (| β |); M.read (| len |) ]
                    |)
                  |)
                |) in
              r
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "bytes::buf::buf_impl::Buf"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *)
          [
            ("remaining", InstanceField.Method (remaining T));
            ("chunk", InstanceField.Method (chunk T));
            ("advance", InstanceField.Method (advance T));
            ("copy_to_bytes", InstanceField.Method (copy_to_bytes T))
          ].
    End Impl_bytes_buf_buf_impl_Buf_where_bytes_buf_buf_impl_Buf_T_for_bytes_buf_take_Take_T.
  End take.
End buf.
