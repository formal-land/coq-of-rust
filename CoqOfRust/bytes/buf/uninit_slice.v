(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module buf.
  Module uninit_slice.
    (* StructTuple
      {
        name := "UninitSlice";
        const_params := [];
        ty_params := [];
        fields :=
          [
            Ty.apply
              (Ty.path "slice")
              []
              [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ Ty.path "u8" ] ]
          ];
      } *)
    
    Module Impl_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*
          pub fn new(slice: &mut [u8]) -> &mut UninitSlice {
              unsafe { &mut *(slice as *mut [u8] as *mut [MaybeUninit<u8>] as *mut UninitSlice) }
          }
      *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ slice ] =>
          ltac:(M.monadic
            (let slice := M.alloc (| slice |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.cast
                              (Ty.apply
                                (Ty.path "*mut")
                                []
                                [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ])
                              (M.cast
                                (Ty.apply
                                  (Ty.path "*mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                          []
                                          [ Ty.path "u8" ]
                                      ]
                                  ])
                                (M.read (|
                                  M.use
                                    (M.alloc (|
                                      M.borrow (|
                                        Pointer.Kind.MutPointer,
                                        M.deref (| M.read (| slice |) |)
                                      |)
                                    |))
                                |)))
                          |)
                        |)
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn uninit(slice: &mut [MaybeUninit<u8>]) -> &mut UninitSlice {
              unsafe { &mut *(slice as *mut [MaybeUninit<u8>] as *mut UninitSlice) }
          }
      *)
      Definition uninit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ slice ] =>
          ltac:(M.monadic
            (let slice := M.alloc (| slice |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.cast
                              (Ty.apply
                                (Ty.path "*mut")
                                []
                                [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ])
                              (M.read (|
                                M.use
                                  (M.alloc (|
                                    M.borrow (|
                                      Pointer.Kind.MutPointer,
                                      M.deref (| M.read (| slice |) |)
                                    |)
                                  |))
                              |))
                          |)
                        |)
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_uninit : M.IsAssociatedFunction.C Self "uninit" uninit.
      Admitted.
      Global Typeclasses Opaque uninit.
      
      (*
          fn uninit_ref(slice: &[MaybeUninit<u8>]) -> &UninitSlice {
              unsafe { &*(slice as *const [MaybeUninit<u8>] as *const UninitSlice) }
          }
      *)
      Definition uninit_ref (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ slice ] =>
          ltac:(M.monadic
            (let slice := M.alloc (| slice |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.cast
                      (Ty.apply
                        (Ty.path "*const")
                        []
                        [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ])
                      (M.read (|
                        M.use
                          (M.alloc (|
                            M.borrow (|
                              Pointer.Kind.ConstPointer,
                              M.deref (| M.read (| slice |) |)
                            |)
                          |))
                      |))
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_uninit_ref :
        M.IsAssociatedFunction.C Self "uninit_ref" uninit_ref.
      Admitted.
      Global Typeclasses Opaque uninit_ref.
      
      (*
          pub unsafe fn from_raw_parts_mut<'a>(ptr: *mut u8, len: usize) -> &'a mut UninitSlice {
              let maybe_init: &mut [MaybeUninit<u8>] =
                  core::slice::from_raw_parts_mut(ptr as *mut _, len);
              Self::uninit(maybe_init)
          }
      *)
      Definition from_raw_parts_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ ptr; len ] =>
          ltac:(M.monadic
            (let ptr := M.alloc (| ptr |) in
            let len := M.alloc (| len |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.read (|
                  let~ maybe_init :
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                []
                                [ Ty.path "u8" ]
                            ]
                        ] :=
                    M.alloc (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                      []
                                      [ Ty.path "u8" ]
                                  ]
                              ],
                            M.get_function (|
                              "core::slice::raw::from_raw_parts_mut",
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                  []
                                  [ Ty.path "u8" ]
                              ]
                            |),
                            [
                              M.cast
                                (Ty.apply
                                  (Ty.path "*mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                      []
                                      [ Ty.path "u8" ]
                                  ])
                                (M.read (| ptr |));
                              M.read (| len |)
                            ]
                          |)
                        |)
                      |)
                    |) in
                  M.alloc (|
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                          M.get_associated_function (|
                            Ty.path "bytes::buf::uninit_slice::UninitSlice",
                            "uninit",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (| M.read (| maybe_init |) |)
                            |)
                          ]
                        |)
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_raw_parts_mut :
        M.IsAssociatedFunction.C Self "from_raw_parts_mut" from_raw_parts_mut.
      Admitted.
      Global Typeclasses Opaque from_raw_parts_mut.
      
      (*
          pub fn write_byte(&mut self, index: usize, byte: u8) {
              assert!(index < self.len());
      
              unsafe { self[index..].as_mut_ptr().write(byte) }
          }
      *)
      Definition write_byte (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index; byte ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            let byte := M.alloc (| byte |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.lt,
                                  [
                                    M.read (| index |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.path "bytes::buf::uninit_slice::UninitSlice",
                                        "len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic", [], [] |),
                              [ mk_str (| "assertion failed: index < self.len()" |) ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                    "write",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                      M.get_associated_function (|
                        Ty.path "bytes::buf::uninit_slice::UninitSlice",
                        "as_mut_ptr",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                              M.get_trait_method (|
                                "core::ops::index::IndexMut",
                                Ty.path "bytes::buf::uninit_slice::UninitSlice",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::RangeFrom")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                                "index_mut",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                                Value.StructRecord
                                  "core::ops::range::RangeFrom"
                                  [ ("start", M.read (| index |)) ]
                              ]
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.read (| byte |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_write_byte :
        M.IsAssociatedFunction.C Self "write_byte" write_byte.
      Admitted.
      Global Typeclasses Opaque write_byte.
      
      (*
          pub fn copy_from_slice(&mut self, src: &[u8]) {
              use core::ptr;
      
              assert_eq!(self.len(), src.len());
      
              unsafe {
                  ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
              }
          }
      *)
      Definition copy_from_slice (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; src ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let src := M.alloc (| src |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (|
                    Value.Tuple
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.path "bytes::buf::uninit_slice::UninitSlice",
                                "len",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                "len",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| src |) |) |) ]
                            |)
                          |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.eq,
                                          [
                                            M.read (| M.deref (| M.read (| left_val |) |) |);
                                            M.read (| M.deref (| M.read (| right_val |) |) |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let~ kind : Ty.path "core::panicking::AssertKind" :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [],
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| left_val |) |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| right_val |) |)
                                                |)
                                              |)
                                            |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_function (|
                      "core::intrinsics::copy_nonoverlapping",
                      [],
                      [ Ty.path "u8" ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                          "as_ptr",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| src |) |) |) ]
                      |);
                      M.call_closure (|
                        Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                        M.get_associated_function (|
                          Ty.path "bytes::buf::uninit_slice::UninitSlice",
                          "as_mut_ptr",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                      |);
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.path "bytes::buf::uninit_slice::UninitSlice",
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_copy_from_slice :
        M.IsAssociatedFunction.C Self "copy_from_slice" copy_from_slice.
      Admitted.
      Global Typeclasses Opaque copy_from_slice.
      
      (*
          pub fn as_mut_ptr(&mut self) -> *mut u8 {
              self.0.as_mut_ptr() as *mut _
          }
      *)
      Definition as_mut_ptr (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.cast
              (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
              (M.call_closure (|
                Ty.apply
                  (Ty.path "*mut")
                  []
                  [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ Ty.path "u8" ] ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "slice")
                    []
                    [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ Ty.path "u8" ]
                    ],
                  "as_mut_ptr",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| self |) |),
                      "bytes::buf::uninit_slice::UninitSlice",
                      0
                    |)
                  |)
                ]
              |))))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_as_mut_ptr :
        M.IsAssociatedFunction.C Self "as_mut_ptr" as_mut_ptr.
      Admitted.
      Global Typeclasses Opaque as_mut_ptr.
      
      (*
          pub unsafe fn as_uninit_slice_mut(&mut self) -> &mut [MaybeUninit<u8>] {
              &mut self.0
          }
      *)
      Definition as_uninit_slice_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_tuple_field (|
                        M.deref (| M.read (| self |) |),
                        "bytes::buf::uninit_slice::UninitSlice",
                        0
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_as_uninit_slice_mut :
        M.IsAssociatedFunction.C Self "as_uninit_slice_mut" as_uninit_slice_mut.
      Admitted.
      Global Typeclasses Opaque as_uninit_slice_mut.
      
      (*
          pub fn len(&self) -> usize {
              self.0.len()
          }
      *)
      Definition len (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "slice")
                  []
                  [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ Ty.path "u8" ] ],
                "len",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "bytes::buf::uninit_slice::UninitSlice",
                    0
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_len : M.IsAssociatedFunction.C Self "len" len.
      Admitted.
      Global Typeclasses Opaque len.
    End Impl_bytes_buf_uninit_slice_UninitSlice.
    
    Module Impl_core_fmt_Debug_for_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*
          fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
              fmt.debug_struct("UninitSlice[...]").finish()
          }
      *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; fmt ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let fmt := M.alloc (| fmt |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::builders::DebugStruct",
                "finish",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "core::fmt::builders::DebugStruct",
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "debug_struct",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| fmt |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "UninitSlice[...]" |) |)
                        |)
                      ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_bytes_buf_uninit_slice_UninitSlice.
    
    Module Impl_core_convert_From_ref_mut_slice_u8_for_ref_mut_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t :=
        Ty.apply (Ty.path "&mut") [] [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ].
      
      (*
          fn from(slice: &'a mut [u8]) -> Self {
              UninitSlice::new(slice)
          }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ slice ] =>
          ltac:(M.monadic
            (let slice := M.alloc (| slice |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                      M.get_associated_function (|
                        Ty.path "bytes::buf::uninit_slice::UninitSlice",
                        "new",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| slice |) |) |) ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_ref_mut_slice_u8_for_ref_mut_bytes_buf_uninit_slice_UninitSlice.
    
    Module Impl_core_convert_From_ref_mut_slice_core_mem_maybe_uninit_MaybeUninit_u8_for_ref_mut_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t :=
        Ty.apply (Ty.path "&mut") [] [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ].
      
      (*
          fn from(slice: &'a mut [MaybeUninit<u8>]) -> Self {
              UninitSlice::uninit(slice)
          }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ slice ] =>
          ltac:(M.monadic
            (let slice := M.alloc (| slice |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                      M.get_associated_function (|
                        Ty.path "bytes::buf::uninit_slice::UninitSlice",
                        "uninit",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| slice |) |) |) ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "&mut")
              []
              [
                Ty.apply
                  (Ty.path "slice")
                  []
                  [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ Ty.path "u8" ] ]
              ]
          ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_ref_mut_slice_core_mem_maybe_uninit_MaybeUninit_u8_for_ref_mut_bytes_buf_uninit_slice_UninitSlice.
    
    Module Impl_core_ops_index_Index_core_ops_range_Range_usize_for_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*                 type Output = UninitSlice; *)
      Definition _Output : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*
                      fn index(&self, index: $t) -> &UninitSlice {
                          UninitSlice::uninit_ref(&self.0[index])
                      }
      *)
      Definition index (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                  M.get_associated_function (|
                    Ty.path "bytes::buf::uninit_slice::UninitSlice",
                    "uninit_ref",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                        []
                                        [ Ty.path "u8" ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::index::Index",
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                      []
                                      [ Ty.path "u8" ]
                                  ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                                "index",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_tuple_field (|
                                    M.deref (| M.read (| self |) |),
                                    "bytes::buf::uninit_slice::UninitSlice",
                                    0
                                  |)
                                |);
                                M.read (| index |)
                              ]
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::index::Index"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ]
          Self
          (* Instance *)
          [ ("Output", InstanceField.Ty _Output); ("index", InstanceField.Method index) ].
    End Impl_core_ops_index_Index_core_ops_range_Range_usize_for_bytes_buf_uninit_slice_UninitSlice.
    
    Module Impl_core_ops_index_IndexMut_core_ops_range_Range_usize_for_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*
                      fn index_mut(&mut self, index: $t) -> &mut UninitSlice {
                          UninitSlice::uninit(&mut self.0[index])
                      }
      *)
      Definition index_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                      M.get_associated_function (|
                        Ty.path "bytes::buf::uninit_slice::UninitSlice",
                        "uninit",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                            []
                                            [ Ty.path "u8" ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::index::IndexMut",
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                          []
                                          [ Ty.path "u8" ]
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                    "index_mut",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_struct_tuple_field (|
                                        M.deref (| M.read (| self |) |),
                                        "bytes::buf::uninit_slice::UninitSlice",
                                        0
                                      |)
                                    |);
                                    M.read (| index |)
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::index::IndexMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ]
          Self
          (* Instance *) [ ("index_mut", InstanceField.Method index_mut) ].
    End Impl_core_ops_index_IndexMut_core_ops_range_Range_usize_for_bytes_buf_uninit_slice_UninitSlice.
    
    Module Impl_core_ops_index_Index_core_ops_range_RangeFrom_usize_for_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*                 type Output = UninitSlice; *)
      Definition _Output : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*
                      fn index(&self, index: $t) -> &UninitSlice {
                          UninitSlice::uninit_ref(&self.0[index])
                      }
      *)
      Definition index (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                  M.get_associated_function (|
                    Ty.path "bytes::buf::uninit_slice::UninitSlice",
                    "uninit_ref",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                        []
                                        [ Ty.path "u8" ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::index::Index",
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                      []
                                      [ Ty.path "u8" ]
                                  ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::RangeFrom")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                                "index",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_tuple_field (|
                                    M.deref (| M.read (| self |) |),
                                    "bytes::buf::uninit_slice::UninitSlice",
                                    0
                                  |)
                                |);
                                M.read (| index |)
                              ]
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::index::Index"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "core::ops::range::RangeFrom") [] [ Ty.path "usize" ] ]
          Self
          (* Instance *)
          [ ("Output", InstanceField.Ty _Output); ("index", InstanceField.Method index) ].
    End Impl_core_ops_index_Index_core_ops_range_RangeFrom_usize_for_bytes_buf_uninit_slice_UninitSlice.
    
    Module Impl_core_ops_index_IndexMut_core_ops_range_RangeFrom_usize_for_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*
                      fn index_mut(&mut self, index: $t) -> &mut UninitSlice {
                          UninitSlice::uninit(&mut self.0[index])
                      }
      *)
      Definition index_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                      M.get_associated_function (|
                        Ty.path "bytes::buf::uninit_slice::UninitSlice",
                        "uninit",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                            []
                                            [ Ty.path "u8" ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::index::IndexMut",
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                          []
                                          [ Ty.path "u8" ]
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::RangeFrom")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                    "index_mut",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_struct_tuple_field (|
                                        M.deref (| M.read (| self |) |),
                                        "bytes::buf::uninit_slice::UninitSlice",
                                        0
                                      |)
                                    |);
                                    M.read (| index |)
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::index::IndexMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "core::ops::range::RangeFrom") [] [ Ty.path "usize" ] ]
          Self
          (* Instance *) [ ("index_mut", InstanceField.Method index_mut) ].
    End Impl_core_ops_index_IndexMut_core_ops_range_RangeFrom_usize_for_bytes_buf_uninit_slice_UninitSlice.
    
    Module Impl_core_ops_index_Index_core_ops_range_RangeFull_for_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*                 type Output = UninitSlice; *)
      Definition _Output : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*
                      fn index(&self, index: $t) -> &UninitSlice {
                          UninitSlice::uninit_ref(&self.0[index])
                      }
      *)
      Definition index (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                  M.get_associated_function (|
                    Ty.path "bytes::buf::uninit_slice::UninitSlice",
                    "uninit_ref",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                        []
                                        [ Ty.path "u8" ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::index::Index",
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                      []
                                      [ Ty.path "u8" ]
                                  ],
                                [],
                                [ Ty.path "core::ops::range::RangeFull" ],
                                "index",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_tuple_field (|
                                    M.deref (| M.read (| self |) |),
                                    "bytes::buf::uninit_slice::UninitSlice",
                                    0
                                  |)
                                |);
                                M.read (| index |)
                              ]
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::index::Index"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "core::ops::range::RangeFull" ]
          Self
          (* Instance *)
          [ ("Output", InstanceField.Ty _Output); ("index", InstanceField.Method index) ].
    End Impl_core_ops_index_Index_core_ops_range_RangeFull_for_bytes_buf_uninit_slice_UninitSlice.
    
    Module Impl_core_ops_index_IndexMut_core_ops_range_RangeFull_for_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*
                      fn index_mut(&mut self, index: $t) -> &mut UninitSlice {
                          UninitSlice::uninit(&mut self.0[index])
                      }
      *)
      Definition index_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                      M.get_associated_function (|
                        Ty.path "bytes::buf::uninit_slice::UninitSlice",
                        "uninit",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                            []
                                            [ Ty.path "u8" ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::index::IndexMut",
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                          []
                                          [ Ty.path "u8" ]
                                      ],
                                    [],
                                    [ Ty.path "core::ops::range::RangeFull" ],
                                    "index_mut",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_struct_tuple_field (|
                                        M.deref (| M.read (| self |) |),
                                        "bytes::buf::uninit_slice::UninitSlice",
                                        0
                                      |)
                                    |);
                                    M.read (| index |)
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::index::IndexMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "core::ops::range::RangeFull" ]
          Self
          (* Instance *) [ ("index_mut", InstanceField.Method index_mut) ].
    End Impl_core_ops_index_IndexMut_core_ops_range_RangeFull_for_bytes_buf_uninit_slice_UninitSlice.
    
    Module Impl_core_ops_index_Index_core_ops_range_RangeInclusive_usize_for_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*                 type Output = UninitSlice; *)
      Definition _Output : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*
                      fn index(&self, index: $t) -> &UninitSlice {
                          UninitSlice::uninit_ref(&self.0[index])
                      }
      *)
      Definition index (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                  M.get_associated_function (|
                    Ty.path "bytes::buf::uninit_slice::UninitSlice",
                    "uninit_ref",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                        []
                                        [ Ty.path "u8" ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::index::Index",
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                      []
                                      [ Ty.path "u8" ]
                                  ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::RangeInclusive")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                                "index",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_tuple_field (|
                                    M.deref (| M.read (| self |) |),
                                    "bytes::buf::uninit_slice::UninitSlice",
                                    0
                                  |)
                                |);
                                M.read (| index |)
                              ]
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::index::Index"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ Ty.path "usize" ] ]
          Self
          (* Instance *)
          [ ("Output", InstanceField.Ty _Output); ("index", InstanceField.Method index) ].
    End Impl_core_ops_index_Index_core_ops_range_RangeInclusive_usize_for_bytes_buf_uninit_slice_UninitSlice.
    
    Module Impl_core_ops_index_IndexMut_core_ops_range_RangeInclusive_usize_for_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*
                      fn index_mut(&mut self, index: $t) -> &mut UninitSlice {
                          UninitSlice::uninit(&mut self.0[index])
                      }
      *)
      Definition index_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                      M.get_associated_function (|
                        Ty.path "bytes::buf::uninit_slice::UninitSlice",
                        "uninit",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                            []
                                            [ Ty.path "u8" ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::index::IndexMut",
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                          []
                                          [ Ty.path "u8" ]
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::RangeInclusive")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                    "index_mut",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_struct_tuple_field (|
                                        M.deref (| M.read (| self |) |),
                                        "bytes::buf::uninit_slice::UninitSlice",
                                        0
                                      |)
                                    |);
                                    M.read (| index |)
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::index::IndexMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ Ty.path "usize" ] ]
          Self
          (* Instance *) [ ("index_mut", InstanceField.Method index_mut) ].
    End Impl_core_ops_index_IndexMut_core_ops_range_RangeInclusive_usize_for_bytes_buf_uninit_slice_UninitSlice.
    
    Module Impl_core_ops_index_Index_core_ops_range_RangeTo_usize_for_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*                 type Output = UninitSlice; *)
      Definition _Output : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*
                      fn index(&self, index: $t) -> &UninitSlice {
                          UninitSlice::uninit_ref(&self.0[index])
                      }
      *)
      Definition index (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                  M.get_associated_function (|
                    Ty.path "bytes::buf::uninit_slice::UninitSlice",
                    "uninit_ref",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                        []
                                        [ Ty.path "u8" ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::index::Index",
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                      []
                                      [ Ty.path "u8" ]
                                  ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::RangeTo")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                                "index",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_tuple_field (|
                                    M.deref (| M.read (| self |) |),
                                    "bytes::buf::uninit_slice::UninitSlice",
                                    0
                                  |)
                                |);
                                M.read (| index |)
                              ]
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::index::Index"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "core::ops::range::RangeTo") [] [ Ty.path "usize" ] ]
          Self
          (* Instance *)
          [ ("Output", InstanceField.Ty _Output); ("index", InstanceField.Method index) ].
    End Impl_core_ops_index_Index_core_ops_range_RangeTo_usize_for_bytes_buf_uninit_slice_UninitSlice.
    
    Module Impl_core_ops_index_IndexMut_core_ops_range_RangeTo_usize_for_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*
                      fn index_mut(&mut self, index: $t) -> &mut UninitSlice {
                          UninitSlice::uninit(&mut self.0[index])
                      }
      *)
      Definition index_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                      M.get_associated_function (|
                        Ty.path "bytes::buf::uninit_slice::UninitSlice",
                        "uninit",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                            []
                                            [ Ty.path "u8" ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::index::IndexMut",
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                          []
                                          [ Ty.path "u8" ]
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::RangeTo")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                    "index_mut",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_struct_tuple_field (|
                                        M.deref (| M.read (| self |) |),
                                        "bytes::buf::uninit_slice::UninitSlice",
                                        0
                                      |)
                                    |);
                                    M.read (| index |)
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::index::IndexMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "core::ops::range::RangeTo") [] [ Ty.path "usize" ] ]
          Self
          (* Instance *) [ ("index_mut", InstanceField.Method index_mut) ].
    End Impl_core_ops_index_IndexMut_core_ops_range_RangeTo_usize_for_bytes_buf_uninit_slice_UninitSlice.
    
    Module Impl_core_ops_index_Index_core_ops_range_RangeToInclusive_usize_for_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*                 type Output = UninitSlice; *)
      Definition _Output : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*
                      fn index(&self, index: $t) -> &UninitSlice {
                          UninitSlice::uninit_ref(&self.0[index])
                      }
      *)
      Definition index (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                  M.get_associated_function (|
                    Ty.path "bytes::buf::uninit_slice::UninitSlice",
                    "uninit_ref",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                        []
                                        [ Ty.path "u8" ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::index::Index",
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                      []
                                      [ Ty.path "u8" ]
                                  ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::RangeToInclusive")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                                "index",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_tuple_field (|
                                    M.deref (| M.read (| self |) |),
                                    "bytes::buf::uninit_slice::UninitSlice",
                                    0
                                  |)
                                |);
                                M.read (| index |)
                              ]
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::index::Index"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "core::ops::range::RangeToInclusive") [] [ Ty.path "usize" ] ]
          Self
          (* Instance *)
          [ ("Output", InstanceField.Ty _Output); ("index", InstanceField.Method index) ].
    End Impl_core_ops_index_Index_core_ops_range_RangeToInclusive_usize_for_bytes_buf_uninit_slice_UninitSlice.
    
    Module Impl_core_ops_index_IndexMut_core_ops_range_RangeToInclusive_usize_for_bytes_buf_uninit_slice_UninitSlice.
      Definition Self : Ty.t := Ty.path "bytes::buf::uninit_slice::UninitSlice".
      
      (*
                      fn index_mut(&mut self, index: $t) -> &mut UninitSlice {
                          UninitSlice::uninit(&mut self.0[index])
                      }
      *)
      Definition index_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [ Ty.path "bytes::buf::uninit_slice::UninitSlice" ],
                      M.get_associated_function (|
                        Ty.path "bytes::buf::uninit_slice::UninitSlice",
                        "uninit",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                            []
                                            [ Ty.path "u8" ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::index::IndexMut",
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                          []
                                          [ Ty.path "u8" ]
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::RangeToInclusive")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                    "index_mut",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_struct_tuple_field (|
                                        M.deref (| M.read (| self |) |),
                                        "bytes::buf::uninit_slice::UninitSlice",
                                        0
                                      |)
                                    |);
                                    M.read (| index |)
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::index::IndexMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "core::ops::range::RangeToInclusive") [] [ Ty.path "usize" ] ]
          Self
          (* Instance *) [ ("index_mut", InstanceField.Method index_mut) ].
    End Impl_core_ops_index_IndexMut_core_ops_range_RangeToInclusive_usize_for_bytes_buf_uninit_slice_UninitSlice.
  End uninit_slice.
End buf.
