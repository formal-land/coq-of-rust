(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module buf.
  Module writer.
    (* StructRecord
      {
        name := "Writer";
        const_params := [];
        ty_params := [ "B" ];
        fields := [ ("buf", B) ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_B_for_bytes_buf_writer_Writer_B.
      Definition Self (B : Ty.t) : Ty.t := Ty.apply (Ty.path "bytes::buf::writer::Writer") [] [ B ].
      
      (* Debug *)
      Definition fmt (B : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self B in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Writer" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "buf" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "bytes::buf::writer::Writer",
                              "buf"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (B : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self B)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt B)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_B_for_bytes_buf_writer_Writer_B.
    
    (*
    pub fn new<B>(buf: B) -> Writer<B> {
        Writer { buf }
    }
    *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ B ], [ buf ] =>
        ltac:(M.monadic
          (let buf := M.alloc (| buf |) in
          Value.StructRecord "bytes::buf::writer::Writer" [] [ B ] [ ("buf", M.read (| buf |)) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_new : M.IsFunction.C "bytes::buf::writer::new" new.
    Admitted.
    Global Typeclasses Opaque new.
    
    Module Impl_bytes_buf_writer_Writer_B.
      Definition Self (B : Ty.t) : Ty.t := Ty.apply (Ty.path "bytes::buf::writer::Writer") [] [ B ].
      
      (*
          pub fn get_ref(&self) -> &B {
              &self.buf
          }
      *)
      Definition get_ref (B : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self B in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "bytes::buf::writer::Writer",
                    "buf"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_ref :
        forall (B : Ty.t),
        M.IsAssociatedFunction.C (Self B) "get_ref" (get_ref B).
      Admitted.
      Global Typeclasses Opaque get_ref.
      
      (*
          pub fn get_mut(&mut self) -> &mut B {
              &mut self.buf
          }
      *)
      Definition get_mut (B : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self B in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "bytes::buf::writer::Writer",
                        "buf"
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_mut :
        forall (B : Ty.t),
        M.IsAssociatedFunction.C (Self B) "get_mut" (get_mut B).
      Admitted.
      Global Typeclasses Opaque get_mut.
      
      (*
          pub fn into_inner(self) -> B {
              self.buf
          }
      *)
      Definition into_inner (B : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self B in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (| self, "bytes::buf::writer::Writer", "buf" |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_into_inner :
        forall (B : Ty.t),
        M.IsAssociatedFunction.C (Self B) "into_inner" (into_inner B).
      Admitted.
      Global Typeclasses Opaque into_inner.
    End Impl_bytes_buf_writer_Writer_B.
    
    Module Impl_std_io_Write_where_bytes_buf_buf_mut_BufMut_B_where_core_marker_Sized_B_for_bytes_buf_writer_Writer_B.
      Definition Self (B : Ty.t) : Ty.t := Ty.apply (Ty.path "bytes::buf::writer::Writer") [] [ B ].
      
      (*
          fn write(&mut self, src: &[u8]) -> io::Result<usize> {
              let n = cmp::min(self.buf.remaining_mut(), src.len());
      
              self.buf.put(&src[0..n]);
              Ok(n)
          }
      *)
      Definition write (B : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self B in
        match ε, τ, α with
        | [], [], [ self; src ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let src := M.alloc (| src |) in
            M.read (|
              let~ n : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "core::cmp::min", [], [ Ty.path "usize" ] |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "bytes::buf::buf_mut::BufMut",
                          B,
                          [],
                          [],
                          "remaining_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "bytes::buf::writer::Writer",
                              "buf"
                            |)
                          |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| src |) |) |) ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "bytes::buf::buf_mut::BufMut",
                      B,
                      [],
                      [],
                      "put",
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "bytes::buf::writer::Writer",
                          "buf"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            M.get_trait_method (|
                              "core::ops::index::Index",
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                              [],
                              [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ]
                              ],
                              "index",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| src |) |) |);
                              Value.StructRecord
                                "core::ops::range::Range"
                                []
                                [ Ty.path "usize" ]
                                [
                                  ("start", Value.Integer IntegerKind.Usize 0);
                                  ("end_", M.read (| n |))
                                ]
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructTuple
                  "core::result::Result::Ok"
                  []
                  [ Ty.path "usize"; Ty.path "std::io::error::Error" ]
                  [ M.read (| n |) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn flush(&mut self) -> io::Result<()> {
              Ok(())
          }
      *)
      Definition flush (B : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self B in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructTuple
              "core::result::Result::Ok"
              []
              [ Ty.tuple []; Ty.path "std::io::error::Error" ]
              [ Value.Tuple [] ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (B : Ty.t),
        M.IsTraitInstance
          "std::io::Write"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self B)
          (* Instance *)
          [ ("write", InstanceField.Method (write B)); ("flush", InstanceField.Method (flush B)) ].
    End Impl_std_io_Write_where_bytes_buf_buf_mut_BufMut_B_where_core_marker_Sized_B_for_bytes_buf_writer_Writer_B.
  End writer.
End buf.
