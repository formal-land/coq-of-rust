(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module array.
  Module ascii.
    Module Impl_array_N_u8.
      Definition Self (N : Value.t) : Ty.t := Ty.apply (Ty.path "array") [ N ] [ Ty.path "u8" ].
      
      (*
          pub const fn as_ascii(&self) -> Option<&[ascii::Char; N]> {
              if self.is_ascii() {
                  // SAFETY: Just checked that it's ASCII
                  Some(unsafe { self.as_ascii_unchecked() })
              } else {
                  None
              }
          }
      *)
      Definition as_ascii (N : Value.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self N in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ N ]
                              [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                          ]
                      ]
                  ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                "is_ascii",
                                [],
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |))
                              ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ N ]
                                  [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                              ]
                          ]
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ N ]
                                        [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "array") [ N ] [ Ty.path "u8" ],
                                    "as_ascii_unchecked",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::option::Option::None"
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ N ]
                                  [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                              ]
                          ]
                          []
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_as_ascii :
        forall (N : Value.t),
        M.IsAssociatedFunction.C (Self N) "as_ascii" (as_ascii N).
      Admitted.
      Global Typeclasses Opaque as_ascii.
      
      (*
          pub const unsafe fn as_ascii_unchecked(&self) -> &[ascii::Char; N] {
              let byte_ptr: *const [u8; N] = self;
              let ascii_ptr = byte_ptr as *const [ascii::Char; N];
              // SAFETY: The caller promised all the bytes are ASCII
              unsafe { &*ascii_ptr }
          }
      *)
      Definition as_ascii_unchecked
          (N : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self N in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ byte_ptr :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "*const")
                        []
                        [ Ty.apply (Ty.path "array") [ N ] [ Ty.path "u8" ] ]
                    ] :=
                M.alloc (|
                  M.borrow (| Pointer.Kind.ConstPointer, M.deref (| M.read (| self |) |) |)
                |) in
              let~ ascii_ptr :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "*const")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ N ]
                            [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                        ]
                    ] :=
                M.alloc (|
                  M.cast
                    (Ty.apply
                      (Ty.path "*const")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ N ]
                          [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                      ])
                    (M.read (| byte_ptr |))
                |) in
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| ascii_ptr |) |) |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_as_ascii_unchecked :
        forall (N : Value.t),
        M.IsAssociatedFunction.C (Self N) "as_ascii_unchecked" (as_ascii_unchecked N).
      Admitted.
      Global Typeclasses Opaque as_ascii_unchecked.
    End Impl_array_N_u8.
  End ascii.
End array.
