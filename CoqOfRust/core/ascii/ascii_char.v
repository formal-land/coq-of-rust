(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module ascii.
  Module ascii_char.
    (*
    Enum AsciiChar
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "Null";
            item := StructTuple [];
          };
          {
            name := "StartOfHeading";
            item := StructTuple [];
          };
          {
            name := "StartOfText";
            item := StructTuple [];
          };
          {
            name := "EndOfText";
            item := StructTuple [];
          };
          {
            name := "EndOfTransmission";
            item := StructTuple [];
          };
          {
            name := "Enquiry";
            item := StructTuple [];
          };
          {
            name := "Acknowledge";
            item := StructTuple [];
          };
          {
            name := "Bell";
            item := StructTuple [];
          };
          {
            name := "Backspace";
            item := StructTuple [];
          };
          {
            name := "CharacterTabulation";
            item := StructTuple [];
          };
          {
            name := "LineFeed";
            item := StructTuple [];
          };
          {
            name := "LineTabulation";
            item := StructTuple [];
          };
          {
            name := "FormFeed";
            item := StructTuple [];
          };
          {
            name := "CarriageReturn";
            item := StructTuple [];
          };
          {
            name := "ShiftOut";
            item := StructTuple [];
          };
          {
            name := "ShiftIn";
            item := StructTuple [];
          };
          {
            name := "DataLinkEscape";
            item := StructTuple [];
          };
          {
            name := "DeviceControlOne";
            item := StructTuple [];
          };
          {
            name := "DeviceControlTwo";
            item := StructTuple [];
          };
          {
            name := "DeviceControlThree";
            item := StructTuple [];
          };
          {
            name := "DeviceControlFour";
            item := StructTuple [];
          };
          {
            name := "NegativeAcknowledge";
            item := StructTuple [];
          };
          {
            name := "SynchronousIdle";
            item := StructTuple [];
          };
          {
            name := "EndOfTransmissionBlock";
            item := StructTuple [];
          };
          {
            name := "Cancel";
            item := StructTuple [];
          };
          {
            name := "EndOfMedium";
            item := StructTuple [];
          };
          {
            name := "Substitute";
            item := StructTuple [];
          };
          {
            name := "Escape";
            item := StructTuple [];
          };
          {
            name := "InformationSeparatorFour";
            item := StructTuple [];
          };
          {
            name := "InformationSeparatorThree";
            item := StructTuple [];
          };
          {
            name := "InformationSeparatorTwo";
            item := StructTuple [];
          };
          {
            name := "InformationSeparatorOne";
            item := StructTuple [];
          };
          {
            name := "Space";
            item := StructTuple [];
          };
          {
            name := "ExclamationMark";
            item := StructTuple [];
          };
          {
            name := "QuotationMark";
            item := StructTuple [];
          };
          {
            name := "NumberSign";
            item := StructTuple [];
          };
          {
            name := "DollarSign";
            item := StructTuple [];
          };
          {
            name := "PercentSign";
            item := StructTuple [];
          };
          {
            name := "Ampersand";
            item := StructTuple [];
          };
          {
            name := "Apostrophe";
            item := StructTuple [];
          };
          {
            name := "LeftParenthesis";
            item := StructTuple [];
          };
          {
            name := "RightParenthesis";
            item := StructTuple [];
          };
          {
            name := "Asterisk";
            item := StructTuple [];
          };
          {
            name := "PlusSign";
            item := StructTuple [];
          };
          {
            name := "Comma";
            item := StructTuple [];
          };
          {
            name := "HyphenMinus";
            item := StructTuple [];
          };
          {
            name := "FullStop";
            item := StructTuple [];
          };
          {
            name := "Solidus";
            item := StructTuple [];
          };
          {
            name := "Digit0";
            item := StructTuple [];
          };
          {
            name := "Digit1";
            item := StructTuple [];
          };
          {
            name := "Digit2";
            item := StructTuple [];
          };
          {
            name := "Digit3";
            item := StructTuple [];
          };
          {
            name := "Digit4";
            item := StructTuple [];
          };
          {
            name := "Digit5";
            item := StructTuple [];
          };
          {
            name := "Digit6";
            item := StructTuple [];
          };
          {
            name := "Digit7";
            item := StructTuple [];
          };
          {
            name := "Digit8";
            item := StructTuple [];
          };
          {
            name := "Digit9";
            item := StructTuple [];
          };
          {
            name := "Colon";
            item := StructTuple [];
          };
          {
            name := "Semicolon";
            item := StructTuple [];
          };
          {
            name := "LessThanSign";
            item := StructTuple [];
          };
          {
            name := "EqualsSign";
            item := StructTuple [];
          };
          {
            name := "GreaterThanSign";
            item := StructTuple [];
          };
          {
            name := "QuestionMark";
            item := StructTuple [];
          };
          {
            name := "CommercialAt";
            item := StructTuple [];
          };
          {
            name := "CapitalA";
            item := StructTuple [];
          };
          {
            name := "CapitalB";
            item := StructTuple [];
          };
          {
            name := "CapitalC";
            item := StructTuple [];
          };
          {
            name := "CapitalD";
            item := StructTuple [];
          };
          {
            name := "CapitalE";
            item := StructTuple [];
          };
          {
            name := "CapitalF";
            item := StructTuple [];
          };
          {
            name := "CapitalG";
            item := StructTuple [];
          };
          {
            name := "CapitalH";
            item := StructTuple [];
          };
          {
            name := "CapitalI";
            item := StructTuple [];
          };
          {
            name := "CapitalJ";
            item := StructTuple [];
          };
          {
            name := "CapitalK";
            item := StructTuple [];
          };
          {
            name := "CapitalL";
            item := StructTuple [];
          };
          {
            name := "CapitalM";
            item := StructTuple [];
          };
          {
            name := "CapitalN";
            item := StructTuple [];
          };
          {
            name := "CapitalO";
            item := StructTuple [];
          };
          {
            name := "CapitalP";
            item := StructTuple [];
          };
          {
            name := "CapitalQ";
            item := StructTuple [];
          };
          {
            name := "CapitalR";
            item := StructTuple [];
          };
          {
            name := "CapitalS";
            item := StructTuple [];
          };
          {
            name := "CapitalT";
            item := StructTuple [];
          };
          {
            name := "CapitalU";
            item := StructTuple [];
          };
          {
            name := "CapitalV";
            item := StructTuple [];
          };
          {
            name := "CapitalW";
            item := StructTuple [];
          };
          {
            name := "CapitalX";
            item := StructTuple [];
          };
          {
            name := "CapitalY";
            item := StructTuple [];
          };
          {
            name := "CapitalZ";
            item := StructTuple [];
          };
          {
            name := "LeftSquareBracket";
            item := StructTuple [];
          };
          {
            name := "ReverseSolidus";
            item := StructTuple [];
          };
          {
            name := "RightSquareBracket";
            item := StructTuple [];
          };
          {
            name := "CircumflexAccent";
            item := StructTuple [];
          };
          {
            name := "LowLine";
            item := StructTuple [];
          };
          {
            name := "GraveAccent";
            item := StructTuple [];
          };
          {
            name := "SmallA";
            item := StructTuple [];
          };
          {
            name := "SmallB";
            item := StructTuple [];
          };
          {
            name := "SmallC";
            item := StructTuple [];
          };
          {
            name := "SmallD";
            item := StructTuple [];
          };
          {
            name := "SmallE";
            item := StructTuple [];
          };
          {
            name := "SmallF";
            item := StructTuple [];
          };
          {
            name := "SmallG";
            item := StructTuple [];
          };
          {
            name := "SmallH";
            item := StructTuple [];
          };
          {
            name := "SmallI";
            item := StructTuple [];
          };
          {
            name := "SmallJ";
            item := StructTuple [];
          };
          {
            name := "SmallK";
            item := StructTuple [];
          };
          {
            name := "SmallL";
            item := StructTuple [];
          };
          {
            name := "SmallM";
            item := StructTuple [];
          };
          {
            name := "SmallN";
            item := StructTuple [];
          };
          {
            name := "SmallO";
            item := StructTuple [];
          };
          {
            name := "SmallP";
            item := StructTuple [];
          };
          {
            name := "SmallQ";
            item := StructTuple [];
          };
          {
            name := "SmallR";
            item := StructTuple [];
          };
          {
            name := "SmallS";
            item := StructTuple [];
          };
          {
            name := "SmallT";
            item := StructTuple [];
          };
          {
            name := "SmallU";
            item := StructTuple [];
          };
          {
            name := "SmallV";
            item := StructTuple [];
          };
          {
            name := "SmallW";
            item := StructTuple [];
          };
          {
            name := "SmallX";
            item := StructTuple [];
          };
          {
            name := "SmallY";
            item := StructTuple [];
          };
          {
            name := "SmallZ";
            item := StructTuple [];
          };
          {
            name := "LeftCurlyBracket";
            item := StructTuple [];
          };
          {
            name := "VerticalLine";
            item := StructTuple [];
          };
          {
            name := "RightCurlyBracket";
            item := StructTuple [];
          };
          {
            name := "Tilde";
            item := StructTuple [];
          };
          {
            name := "Delete";
            item := StructTuple [];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_AsciiChar_Null :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Null" 0.
    Axiom IsDiscriminant_AsciiChar_StartOfHeading :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::StartOfHeading" 1.
    Axiom IsDiscriminant_AsciiChar_StartOfText :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::StartOfText" 2.
    Axiom IsDiscriminant_AsciiChar_EndOfText :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::EndOfText" 3.
    Axiom IsDiscriminant_AsciiChar_EndOfTransmission :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::EndOfTransmission" 4.
    Axiom IsDiscriminant_AsciiChar_Enquiry :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Enquiry" 5.
    Axiom IsDiscriminant_AsciiChar_Acknowledge :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Acknowledge" 6.
    Axiom IsDiscriminant_AsciiChar_Bell :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Bell" 7.
    Axiom IsDiscriminant_AsciiChar_Backspace :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Backspace" 8.
    Axiom IsDiscriminant_AsciiChar_CharacterTabulation :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CharacterTabulation" 9.
    Axiom IsDiscriminant_AsciiChar_LineFeed :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::LineFeed" 10.
    Axiom IsDiscriminant_AsciiChar_LineTabulation :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::LineTabulation" 11.
    Axiom IsDiscriminant_AsciiChar_FormFeed :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::FormFeed" 12.
    Axiom IsDiscriminant_AsciiChar_CarriageReturn :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CarriageReturn" 13.
    Axiom IsDiscriminant_AsciiChar_ShiftOut :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::ShiftOut" 14.
    Axiom IsDiscriminant_AsciiChar_ShiftIn :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::ShiftIn" 15.
    Axiom IsDiscriminant_AsciiChar_DataLinkEscape :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::DataLinkEscape" 16.
    Axiom IsDiscriminant_AsciiChar_DeviceControlOne :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::DeviceControlOne" 17.
    Axiom IsDiscriminant_AsciiChar_DeviceControlTwo :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::DeviceControlTwo" 18.
    Axiom IsDiscriminant_AsciiChar_DeviceControlThree :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::DeviceControlThree" 19.
    Axiom IsDiscriminant_AsciiChar_DeviceControlFour :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::DeviceControlFour" 20.
    Axiom IsDiscriminant_AsciiChar_NegativeAcknowledge :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::NegativeAcknowledge" 21.
    Axiom IsDiscriminant_AsciiChar_SynchronousIdle :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SynchronousIdle" 22.
    Axiom IsDiscriminant_AsciiChar_EndOfTransmissionBlock :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::EndOfTransmissionBlock" 23.
    Axiom IsDiscriminant_AsciiChar_Cancel :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Cancel" 24.
    Axiom IsDiscriminant_AsciiChar_EndOfMedium :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::EndOfMedium" 25.
    Axiom IsDiscriminant_AsciiChar_Substitute :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Substitute" 26.
    Axiom IsDiscriminant_AsciiChar_Escape :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Escape" 27.
    Axiom IsDiscriminant_AsciiChar_InformationSeparatorFour :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::InformationSeparatorFour" 28.
    Axiom IsDiscriminant_AsciiChar_InformationSeparatorThree :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::InformationSeparatorThree" 29.
    Axiom IsDiscriminant_AsciiChar_InformationSeparatorTwo :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::InformationSeparatorTwo" 30.
    Axiom IsDiscriminant_AsciiChar_InformationSeparatorOne :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::InformationSeparatorOne" 31.
    Axiom IsDiscriminant_AsciiChar_Space :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Space" 32.
    Axiom IsDiscriminant_AsciiChar_ExclamationMark :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::ExclamationMark" 33.
    Axiom IsDiscriminant_AsciiChar_QuotationMark :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::QuotationMark" 34.
    Axiom IsDiscriminant_AsciiChar_NumberSign :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::NumberSign" 35.
    Axiom IsDiscriminant_AsciiChar_DollarSign :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::DollarSign" 36.
    Axiom IsDiscriminant_AsciiChar_PercentSign :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::PercentSign" 37.
    Axiom IsDiscriminant_AsciiChar_Ampersand :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Ampersand" 38.
    Axiom IsDiscriminant_AsciiChar_Apostrophe :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Apostrophe" 39.
    Axiom IsDiscriminant_AsciiChar_LeftParenthesis :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::LeftParenthesis" 40.
    Axiom IsDiscriminant_AsciiChar_RightParenthesis :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::RightParenthesis" 41.
    Axiom IsDiscriminant_AsciiChar_Asterisk :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Asterisk" 42.
    Axiom IsDiscriminant_AsciiChar_PlusSign :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::PlusSign" 43.
    Axiom IsDiscriminant_AsciiChar_Comma :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Comma" 44.
    Axiom IsDiscriminant_AsciiChar_HyphenMinus :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::HyphenMinus" 45.
    Axiom IsDiscriminant_AsciiChar_FullStop :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::FullStop" 46.
    Axiom IsDiscriminant_AsciiChar_Solidus :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Solidus" 47.
    Axiom IsDiscriminant_AsciiChar_Digit0 :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Digit0" 48.
    Axiom IsDiscriminant_AsciiChar_Digit1 :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Digit1" 49.
    Axiom IsDiscriminant_AsciiChar_Digit2 :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Digit2" 50.
    Axiom IsDiscriminant_AsciiChar_Digit3 :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Digit3" 51.
    Axiom IsDiscriminant_AsciiChar_Digit4 :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Digit4" 52.
    Axiom IsDiscriminant_AsciiChar_Digit5 :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Digit5" 53.
    Axiom IsDiscriminant_AsciiChar_Digit6 :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Digit6" 54.
    Axiom IsDiscriminant_AsciiChar_Digit7 :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Digit7" 55.
    Axiom IsDiscriminant_AsciiChar_Digit8 :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Digit8" 56.
    Axiom IsDiscriminant_AsciiChar_Digit9 :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Digit9" 57.
    Axiom IsDiscriminant_AsciiChar_Colon :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Colon" 58.
    Axiom IsDiscriminant_AsciiChar_Semicolon :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Semicolon" 59.
    Axiom IsDiscriminant_AsciiChar_LessThanSign :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::LessThanSign" 60.
    Axiom IsDiscriminant_AsciiChar_EqualsSign :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::EqualsSign" 61.
    Axiom IsDiscriminant_AsciiChar_GreaterThanSign :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::GreaterThanSign" 62.
    Axiom IsDiscriminant_AsciiChar_QuestionMark :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::QuestionMark" 63.
    Axiom IsDiscriminant_AsciiChar_CommercialAt :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CommercialAt" 64.
    Axiom IsDiscriminant_AsciiChar_CapitalA :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalA" 65.
    Axiom IsDiscriminant_AsciiChar_CapitalB :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalB" 66.
    Axiom IsDiscriminant_AsciiChar_CapitalC :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalC" 67.
    Axiom IsDiscriminant_AsciiChar_CapitalD :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalD" 68.
    Axiom IsDiscriminant_AsciiChar_CapitalE :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalE" 69.
    Axiom IsDiscriminant_AsciiChar_CapitalF :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalF" 70.
    Axiom IsDiscriminant_AsciiChar_CapitalG :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalG" 71.
    Axiom IsDiscriminant_AsciiChar_CapitalH :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalH" 72.
    Axiom IsDiscriminant_AsciiChar_CapitalI :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalI" 73.
    Axiom IsDiscriminant_AsciiChar_CapitalJ :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalJ" 74.
    Axiom IsDiscriminant_AsciiChar_CapitalK :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalK" 75.
    Axiom IsDiscriminant_AsciiChar_CapitalL :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalL" 76.
    Axiom IsDiscriminant_AsciiChar_CapitalM :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalM" 77.
    Axiom IsDiscriminant_AsciiChar_CapitalN :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalN" 78.
    Axiom IsDiscriminant_AsciiChar_CapitalO :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalO" 79.
    Axiom IsDiscriminant_AsciiChar_CapitalP :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalP" 80.
    Axiom IsDiscriminant_AsciiChar_CapitalQ :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalQ" 81.
    Axiom IsDiscriminant_AsciiChar_CapitalR :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalR" 82.
    Axiom IsDiscriminant_AsciiChar_CapitalS :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalS" 83.
    Axiom IsDiscriminant_AsciiChar_CapitalT :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalT" 84.
    Axiom IsDiscriminant_AsciiChar_CapitalU :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalU" 85.
    Axiom IsDiscriminant_AsciiChar_CapitalV :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalV" 86.
    Axiom IsDiscriminant_AsciiChar_CapitalW :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalW" 87.
    Axiom IsDiscriminant_AsciiChar_CapitalX :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalX" 88.
    Axiom IsDiscriminant_AsciiChar_CapitalY :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalY" 89.
    Axiom IsDiscriminant_AsciiChar_CapitalZ :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CapitalZ" 90.
    Axiom IsDiscriminant_AsciiChar_LeftSquareBracket :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::LeftSquareBracket" 91.
    Axiom IsDiscriminant_AsciiChar_ReverseSolidus :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::ReverseSolidus" 92.
    Axiom IsDiscriminant_AsciiChar_RightSquareBracket :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::RightSquareBracket" 93.
    Axiom IsDiscriminant_AsciiChar_CircumflexAccent :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::CircumflexAccent" 94.
    Axiom IsDiscriminant_AsciiChar_LowLine :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::LowLine" 95.
    Axiom IsDiscriminant_AsciiChar_GraveAccent :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::GraveAccent" 96.
    Axiom IsDiscriminant_AsciiChar_SmallA :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallA" 97.
    Axiom IsDiscriminant_AsciiChar_SmallB :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallB" 98.
    Axiom IsDiscriminant_AsciiChar_SmallC :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallC" 99.
    Axiom IsDiscriminant_AsciiChar_SmallD :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallD" 100.
    Axiom IsDiscriminant_AsciiChar_SmallE :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallE" 101.
    Axiom IsDiscriminant_AsciiChar_SmallF :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallF" 102.
    Axiom IsDiscriminant_AsciiChar_SmallG :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallG" 103.
    Axiom IsDiscriminant_AsciiChar_SmallH :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallH" 104.
    Axiom IsDiscriminant_AsciiChar_SmallI :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallI" 105.
    Axiom IsDiscriminant_AsciiChar_SmallJ :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallJ" 106.
    Axiom IsDiscriminant_AsciiChar_SmallK :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallK" 107.
    Axiom IsDiscriminant_AsciiChar_SmallL :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallL" 108.
    Axiom IsDiscriminant_AsciiChar_SmallM :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallM" 109.
    Axiom IsDiscriminant_AsciiChar_SmallN :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallN" 110.
    Axiom IsDiscriminant_AsciiChar_SmallO :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallO" 111.
    Axiom IsDiscriminant_AsciiChar_SmallP :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallP" 112.
    Axiom IsDiscriminant_AsciiChar_SmallQ :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallQ" 113.
    Axiom IsDiscriminant_AsciiChar_SmallR :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallR" 114.
    Axiom IsDiscriminant_AsciiChar_SmallS :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallS" 115.
    Axiom IsDiscriminant_AsciiChar_SmallT :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallT" 116.
    Axiom IsDiscriminant_AsciiChar_SmallU :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallU" 117.
    Axiom IsDiscriminant_AsciiChar_SmallV :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallV" 118.
    Axiom IsDiscriminant_AsciiChar_SmallW :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallW" 119.
    Axiom IsDiscriminant_AsciiChar_SmallX :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallX" 120.
    Axiom IsDiscriminant_AsciiChar_SmallY :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallY" 121.
    Axiom IsDiscriminant_AsciiChar_SmallZ :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::SmallZ" 122.
    Axiom IsDiscriminant_AsciiChar_LeftCurlyBracket :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::LeftCurlyBracket" 123.
    Axiom IsDiscriminant_AsciiChar_VerticalLine :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::VerticalLine" 124.
    Axiom IsDiscriminant_AsciiChar_RightCurlyBracket :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::RightCurlyBracket" 125.
    Axiom IsDiscriminant_AsciiChar_Tilde :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Tilde" 126.
    Axiom IsDiscriminant_AsciiChar_Delete :
      M.IsDiscriminant "core::ascii::ascii_char::AsciiChar::Delete" 127.
    
    Module Impl_core_marker_Copy_for_core_ascii_ascii_char_AsciiChar.
      Definition Self : Ty.t := Ty.path "core::ascii::ascii_char::AsciiChar".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_core_ascii_ascii_char_AsciiChar.
    
    Module Impl_core_clone_Clone_for_core_ascii_ascii_char_AsciiChar.
      Definition Self : Ty.t := Ty.path "core::ascii::ascii_char::AsciiChar".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (| M.deref (| M.read (| self |) |) |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_core_ascii_ascii_char_AsciiChar.
    
    Module Impl_core_cmp_Eq_for_core_ascii_ascii_char_AsciiChar.
      Definition Self : Ty.t := Ty.path "core::ascii::ascii_char::AsciiChar".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.Tuple []))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_core_ascii_ascii_char_AsciiChar.
    
    Module Impl_core_marker_StructuralPartialEq_for_core_ascii_ascii_char_AsciiChar.
      Definition Self : Ty.t := Ty.path "core::ascii::ascii_char::AsciiChar".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_core_ascii_ascii_char_AsciiChar.
    
    Module Impl_core_cmp_PartialEq_for_core_ascii_ascii_char_AsciiChar.
      Definition Self : Ty.t := Ty.path "core::ascii::ascii_char::AsciiChar".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.path "u8" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u8",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.path "u8" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u8",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.alloc (| BinOp.eq (| M.read (| __self_discr |), M.read (| __arg1_discr |) |) |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_core_ascii_ascii_char_AsciiChar.
    
    Module Impl_core_cmp_Ord_for_core_ascii_ascii_char_AsciiChar.
      Definition Self : Ty.t := Ty.path "core::ascii::ascii_char::AsciiChar".
      
      (* Ord *)
      Definition cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.path "u8" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u8",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.path "u8" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u8",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.path "core::cmp::Ordering",
                  M.get_trait_method (| "core::cmp::Ord", Ty.path "u8", [], [], "cmp", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Ord"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
    End Impl_core_cmp_Ord_for_core_ascii_ascii_char_AsciiChar.
    
    Module Impl_core_cmp_PartialOrd_for_core_ascii_ascii_char_AsciiChar.
      Definition Self : Ty.t := Ty.path "core::ascii::ascii_char::AsciiChar".
      
      (* PartialOrd *)
      Definition partial_cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.path "u8" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u8",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.path "u8" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u8",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "core::cmp::Ordering" ],
                  M.get_trait_method (|
                    "core::cmp::PartialOrd",
                    Ty.path "u8",
                    [],
                    [ Ty.path "u8" ],
                    "partial_cmp",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialOrd"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
    End Impl_core_cmp_PartialOrd_for_core_ascii_ascii_char_AsciiChar.
    
    Module Impl_core_hash_Hash_for_core_ascii_ascii_char_AsciiChar.
      Definition Self : Ty.t := Ty.path "core::ascii::ascii_char::AsciiChar".
      
      (* Hash *)
      Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.read (|
              let~ __self_discr : Ty.path "u8" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u8",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.path "u8",
                    [],
                    [],
                    "hash",
                    [],
                    [ __H ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_core_ascii_ascii_char_AsciiChar.
    
    Module Impl_core_ascii_ascii_char_AsciiChar.
      Definition Self : Ty.t := Ty.path "core::ascii::ascii_char::AsciiChar".
      
      (*
          pub const fn from_u8(b: u8) -> Option<Self> {
              if b <= 127 {
                  // SAFETY: Just checked that `b` is in-range
                  Some(unsafe { Self::from_u8_unchecked(b) })
              } else {
                  None
              }
          }
      *)
      Definition from_u8 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ b ] =>
          ltac:(M.monadic
            (let b := M.alloc (| b |) in
            M.read (|
              M.match_operator (|
                Some
                  (Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.path "core::ascii::ascii_char::AsciiChar" ]),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.le (| M.read (| b |), Value.Integer IntegerKind.U8 127 |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          [
                            M.call_closure (|
                              Ty.path "core::ascii::ascii_char::AsciiChar",
                              M.get_associated_function (|
                                Ty.path "core::ascii::ascii_char::AsciiChar",
                                "from_u8_unchecked",
                                [],
                                []
                              |),
                              [ M.read (| b |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_u8 :
        M.IsAssociatedFunction.Trait Self "from_u8" from_u8.
      Admitted.
      Global Typeclasses Opaque from_u8.
      
      (*
          pub const unsafe fn from_u8_unchecked(b: u8) -> Self {
              // SAFETY: Our safety precondition is that `b` is in-range.
              unsafe { transmute(b) }
          }
      *)
      Definition from_u8_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ b ] =>
          ltac:(M.monadic
            (let b := M.alloc (| b |) in
            M.call_closure (|
              Ty.path "core::ascii::ascii_char::AsciiChar",
              M.get_function (|
                "core::intrinsics::transmute",
                [],
                [ Ty.path "u8"; Ty.path "core::ascii::ascii_char::AsciiChar" ]
              |),
              [ M.read (| b |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_u8_unchecked :
        M.IsAssociatedFunction.Trait Self "from_u8_unchecked" from_u8_unchecked.
      Admitted.
      Global Typeclasses Opaque from_u8_unchecked.
      
      (*
          pub const fn digit(d: u8) -> Option<Self> {
              if d < 10 {
                  // SAFETY: Just checked it's in-range.
                  Some(unsafe { Self::digit_unchecked(d) })
              } else {
                  None
              }
          }
      *)
      Definition digit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ d ] =>
          ltac:(M.monadic
            (let d := M.alloc (| d |) in
            M.read (|
              M.match_operator (|
                Some
                  (Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.path "core::ascii::ascii_char::AsciiChar" ]),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.lt (| M.read (| d |), Value.Integer IntegerKind.U8 10 |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          [
                            M.call_closure (|
                              Ty.path "core::ascii::ascii_char::AsciiChar",
                              M.get_associated_function (|
                                Ty.path "core::ascii::ascii_char::AsciiChar",
                                "digit_unchecked",
                                [],
                                []
                              |),
                              [ M.read (| d |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_digit : M.IsAssociatedFunction.Trait Self "digit" digit.
      Admitted.
      Global Typeclasses Opaque digit.
      
      (*
          pub const unsafe fn digit_unchecked(d: u8) -> Self {
              assert_unsafe_precondition!(
                  check_language_ub,
                  "`AsciiChar::digit_unchecked` input cannot exceed 9.",
                  (d: u8 = d) => d < 10
              );
      
              // SAFETY: `'0'` through `'9'` are U+00030 through U+0039,
              // so because `d` must be 64 or less the addition can return at most
              // 112 (0x70), which doesn't overflow and is within the ASCII range.
              unsafe {
                  let byte = b'0'.unchecked_add(d);
                  Self::from_u8_unchecked(byte)
              }
          }
      *)
      Definition digit_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ d ] =>
          ltac:(M.monadic
            (let d := M.alloc (| d |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_function (| "core::ub_checks::check_language_ub", [], [] |),
                                []
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Self,
                                "precondition_check.digit_unchecked",
                                [],
                                []
                              |),
                              [ M.read (| d |) ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ byte : Ty.path "u8" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u8",
                    M.get_associated_function (| Ty.path "u8", "unchecked_add", [], [] |),
                    [ M.read (| UnsupportedLiteral |); M.read (| d |) ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.path "core::ascii::ascii_char::AsciiChar",
                  M.get_associated_function (|
                    Ty.path "core::ascii::ascii_char::AsciiChar",
                    "from_u8_unchecked",
                    [],
                    []
                  |),
                  [ M.read (| byte |) ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_digit_unchecked :
        M.IsAssociatedFunction.Trait Self "digit_unchecked" digit_unchecked.
      Admitted.
      Global Typeclasses Opaque digit_unchecked.
      
      (*
          pub const fn to_u8(self) -> u8 {
              self as u8
          }
      *)
      Definition to_u8 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.cast (Ty.path "u8") (M.read (| self |))))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_to_u8 : M.IsAssociatedFunction.Trait Self "to_u8" to_u8.
      Admitted.
      Global Typeclasses Opaque to_u8.
      
      (*
          pub const fn to_char(self) -> char {
              self as u8 as char
          }
      *)
      Definition to_char (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.cast (Ty.path "char") (M.cast (Ty.path "u8") (M.read (| self |)))))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_to_char :
        M.IsAssociatedFunction.Trait Self "to_char" to_char.
      Admitted.
      Global Typeclasses Opaque to_char.
      
      (*
          pub const fn as_str(&self) -> &str {
              crate::slice::from_ref(self).as_str()
          }
      *)
      Definition as_str (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ Ty.path "core::ascii::ascii_char::AsciiChar" ],
                    "as_str",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                            ],
                          M.get_function (|
                            "core::slice::raw::from_ref",
                            [],
                            [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_as_str : M.IsAssociatedFunction.Trait Self "as_str" as_str.
      Admitted.
      Global Typeclasses Opaque as_str.
    End Impl_core_ascii_ascii_char_AsciiChar.
    
    Module Impl_core_convert_From_core_ascii_ascii_char_AsciiChar_for_u8.
      Definition Self : Ty.t := Ty.path "u8".
      
      (*
                      fn from(chr: AsciiChar) -> $ty {
                          chr as u8 as $ty
                      }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ chr ] =>
          ltac:(M.monadic
            (let chr := M.alloc (| chr |) in
            M.read (| M.use (M.alloc (| M.cast (Ty.path "u8") (M.read (| chr |)) |)) |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_ascii_ascii_char_AsciiChar_for_u8.
    
    Module Impl_core_convert_From_core_ascii_ascii_char_AsciiChar_for_u16.
      Definition Self : Ty.t := Ty.path "u16".
      
      (*
                      fn from(chr: AsciiChar) -> $ty {
                          chr as u8 as $ty
                      }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ chr ] =>
          ltac:(M.monadic
            (let chr := M.alloc (| chr |) in
            M.cast (Ty.path "u16") (M.cast (Ty.path "u8") (M.read (| chr |)))))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_ascii_ascii_char_AsciiChar_for_u16.
    
    Module Impl_core_convert_From_core_ascii_ascii_char_AsciiChar_for_u32.
      Definition Self : Ty.t := Ty.path "u32".
      
      (*
                      fn from(chr: AsciiChar) -> $ty {
                          chr as u8 as $ty
                      }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ chr ] =>
          ltac:(M.monadic
            (let chr := M.alloc (| chr |) in
            M.cast (Ty.path "u32") (M.cast (Ty.path "u8") (M.read (| chr |)))))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_ascii_ascii_char_AsciiChar_for_u32.
    
    Module Impl_core_convert_From_core_ascii_ascii_char_AsciiChar_for_u64.
      Definition Self : Ty.t := Ty.path "u64".
      
      (*
                      fn from(chr: AsciiChar) -> $ty {
                          chr as u8 as $ty
                      }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ chr ] =>
          ltac:(M.monadic
            (let chr := M.alloc (| chr |) in
            M.cast (Ty.path "u64") (M.cast (Ty.path "u8") (M.read (| chr |)))))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_ascii_ascii_char_AsciiChar_for_u64.
    
    Module Impl_core_convert_From_core_ascii_ascii_char_AsciiChar_for_u128.
      Definition Self : Ty.t := Ty.path "u128".
      
      (*
                      fn from(chr: AsciiChar) -> $ty {
                          chr as u8 as $ty
                      }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ chr ] =>
          ltac:(M.monadic
            (let chr := M.alloc (| chr |) in
            M.cast (Ty.path "u128") (M.cast (Ty.path "u8") (M.read (| chr |)))))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_ascii_ascii_char_AsciiChar_for_u128.
    
    Module Impl_core_convert_From_core_ascii_ascii_char_AsciiChar_for_char.
      Definition Self : Ty.t := Ty.path "char".
      
      (*
                      fn from(chr: AsciiChar) -> $ty {
                          chr as u8 as $ty
                      }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ chr ] =>
          ltac:(M.monadic
            (let chr := M.alloc (| chr |) in
            M.cast (Ty.path "char") (M.cast (Ty.path "u8") (M.read (| chr |)))))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_ascii_ascii_char_AsciiChar_for_char.
    
    Module Impl_slice_core_ascii_ascii_char_AsciiChar.
      Definition Self : Ty.t :=
        Ty.apply (Ty.path "slice") [] [ Ty.path "core::ascii::ascii_char::AsciiChar" ].
      
      (*
          pub const fn as_str(&self) -> &str {
              let ascii_ptr: *const Self = self;
              let str_ptr = ascii_ptr as *const str;
              // SAFETY: Each ASCII codepoint in UTF-8 is encoded as one single-byte
              // code unit having the same value as the ASCII byte.
              unsafe { &*str_ptr }
          }
      *)
      Definition as_str (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ ascii_ptr :
                  Ty.apply
                    (Ty.path "*const")
                    []
                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                    ] :=
                M.alloc (|
                  M.borrow (| Pointer.Kind.ConstPointer, M.deref (| M.read (| self |) |) |)
                |) in
              let~ str_ptr : Ty.apply (Ty.path "*const") [] [ Ty.path "str" ] :=
                M.alloc (|
                  M.cast (Ty.apply (Ty.path "*const") [] [ Ty.path "str" ]) (M.read (| ascii_ptr |))
                |) in
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| str_ptr |) |) |) |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_as_str : M.IsAssociatedFunction.Trait Self "as_str" as_str.
      Admitted.
      Global Typeclasses Opaque as_str.
      
      (*
          pub const fn as_bytes(&self) -> &[u8] {
              self.as_str().as_bytes()
          }
      *)
      Definition as_bytes (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                  M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.path "core::ascii::ascii_char::AsciiChar" ],
                            "as_str",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_as_bytes :
        M.IsAssociatedFunction.Trait Self "as_bytes" as_bytes.
      Admitted.
      Global Typeclasses Opaque as_bytes.
    End Impl_slice_core_ascii_ascii_char_AsciiChar.
    
    Module Impl_core_fmt_Display_for_core_ascii_ascii_char_AsciiChar.
      Definition Self : Ty.t := Ty.path "core::ascii::ascii_char::AsciiChar".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              <str as fmt::Display>::fmt(self.as_str(), f)
          }
      *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_trait_method (| "core::fmt::Display", Ty.path "str", [], [], "fmt", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                      M.get_associated_function (|
                        Ty.path "core::ascii::ascii_char::AsciiChar",
                        "as_str",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |)
                |);
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_core_ascii_ascii_char_AsciiChar.
    
    Module Impl_core_fmt_Debug_for_core_ascii_ascii_char_AsciiChar.
      Definition Self : Ty.t := Ty.path "core::ascii::ascii_char::AsciiChar".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              use AsciiChar::{Apostrophe, Null, ReverseSolidus as Backslash};
      
              fn backslash(a: AsciiChar) -> ([AsciiChar; 6], usize) {
                  ([Apostrophe, Backslash, a, Apostrophe, Null, Null], 4)
              }
      
              let (buf, len) = match self {
                  AsciiChar::Null => backslash(AsciiChar::Digit0),
                  AsciiChar::CharacterTabulation => backslash(AsciiChar::SmallT),
                  AsciiChar::CarriageReturn => backslash(AsciiChar::SmallR),
                  AsciiChar::LineFeed => backslash(AsciiChar::SmallN),
                  AsciiChar::ReverseSolidus => backslash(AsciiChar::ReverseSolidus),
                  AsciiChar::Apostrophe => backslash(AsciiChar::Apostrophe),
                  _ if self.to_u8().is_ascii_control() => {
                      const HEX_DIGITS: [AsciiChar; 16] = *b"0123456789abcdef".as_ascii().unwrap();
      
                      let byte = self.to_u8();
                      let hi = HEX_DIGITS[usize::from(byte >> 4)];
                      let lo = HEX_DIGITS[usize::from(byte & 0xf)];
                      ([Apostrophe, Backslash, AsciiChar::SmallX, hi, lo, Apostrophe], 6)
                  }
                  _ => ([Apostrophe, *self, Apostrophe, Null, Null, Null], 3),
              };
      
              f.write_str(buf[..len].as_str())
          }
      *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                None,
                M.match_operator (|
                  Some
                    (Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 6 ]
                          [ Ty.path "core::ascii::ascii_char::AsciiChar" ];
                        Ty.path "usize"
                      ]),
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (| γ, "core::ascii::ascii_char::AsciiChar::Null" |) in
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 6 ]
                                  [ Ty.path "core::ascii::ascii_char::AsciiChar" ];
                                Ty.path "usize"
                              ],
                            M.get_associated_function (| Self, "backslash.fmt", [], [] |),
                            [ Value.StructTuple "core::ascii::ascii_char::AsciiChar::Digit0" [] ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "core::ascii::ascii_char::AsciiChar::CharacterTabulation"
                          |) in
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 6 ]
                                  [ Ty.path "core::ascii::ascii_char::AsciiChar" ];
                                Ty.path "usize"
                              ],
                            M.get_associated_function (| Self, "backslash.fmt", [], [] |),
                            [ Value.StructTuple "core::ascii::ascii_char::AsciiChar::SmallT" [] ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "core::ascii::ascii_char::AsciiChar::CarriageReturn"
                          |) in
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 6 ]
                                  [ Ty.path "core::ascii::ascii_char::AsciiChar" ];
                                Ty.path "usize"
                              ],
                            M.get_associated_function (| Self, "backslash.fmt", [], [] |),
                            [ Value.StructTuple "core::ascii::ascii_char::AsciiChar::SmallR" [] ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "core::ascii::ascii_char::AsciiChar::LineFeed"
                          |) in
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 6 ]
                                  [ Ty.path "core::ascii::ascii_char::AsciiChar" ];
                                Ty.path "usize"
                              ],
                            M.get_associated_function (| Self, "backslash.fmt", [], [] |),
                            [ Value.StructTuple "core::ascii::ascii_char::AsciiChar::SmallN" [] ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "core::ascii::ascii_char::AsciiChar::ReverseSolidus"
                          |) in
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 6 ]
                                  [ Ty.path "core::ascii::ascii_char::AsciiChar" ];
                                Ty.path "usize"
                              ],
                            M.get_associated_function (| Self, "backslash.fmt", [], [] |),
                            [
                              Value.StructTuple
                                "core::ascii::ascii_char::AsciiChar::ReverseSolidus"
                                []
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "core::ascii::ascii_char::AsciiChar::Apostrophe"
                          |) in
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 6 ]
                                  [ Ty.path "core::ascii::ascii_char::AsciiChar" ];
                                Ty.path "usize"
                              ],
                            M.get_associated_function (| Self, "backslash.fmt", [], [] |),
                            [ Value.StructTuple "core::ascii::ascii_char::AsciiChar::Apostrophe" []
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_associated_function (|
                                Ty.path "u8",
                                "is_ascii_control",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "u8",
                                      M.get_associated_function (|
                                        Ty.path "core::ascii::ascii_char::AsciiChar",
                                        "to_u8",
                                        [],
                                        []
                                      |),
                                      [ M.read (| M.deref (| M.read (| self |) |) |) ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ byte : Ty.path "u8" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "u8",
                              M.get_associated_function (|
                                Ty.path "core::ascii::ascii_char::AsciiChar",
                                "to_u8",
                                [],
                                []
                              |),
                              [ M.read (| M.deref (| M.read (| self |) |) |) ]
                            |)
                          |) in
                        let~ hi : Ty.path "core::ascii::ascii_char::AsciiChar" :=
                          M.copy (|
                            M.SubPointer.get_array_field (|
                              M.get_constant "core::ascii::ascii_char::fmt::HEX_DIGITS",
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_trait_method (|
                                  "core::convert::From",
                                  Ty.path "usize",
                                  [],
                                  [ Ty.path "u8" ],
                                  "from",
                                  [],
                                  []
                                |),
                                [
                                  BinOp.Wrap.shr (|
                                    M.read (| byte |),
                                    Value.Integer IntegerKind.I32 4
                                  |)
                                ]
                              |)
                            |)
                          |) in
                        let~ lo : Ty.path "core::ascii::ascii_char::AsciiChar" :=
                          M.copy (|
                            M.SubPointer.get_array_field (|
                              M.get_constant "core::ascii::ascii_char::fmt::HEX_DIGITS",
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_trait_method (|
                                  "core::convert::From",
                                  Ty.path "usize",
                                  [],
                                  [ Ty.path "u8" ],
                                  "from",
                                  [],
                                  []
                                |),
                                [
                                  BinOp.bit_and
                                    (M.read (| byte |))
                                    (Value.Integer IntegerKind.U8 15)
                                ]
                              |)
                            |)
                          |) in
                        M.alloc (|
                          Value.Tuple
                            [
                              Value.Array
                                [
                                  Value.StructTuple
                                    "core::ascii::ascii_char::AsciiChar::Apostrophe"
                                    [];
                                  Value.StructTuple
                                    "core::ascii::ascii_char::AsciiChar::ReverseSolidus"
                                    [];
                                  Value.StructTuple "core::ascii::ascii_char::AsciiChar::SmallX" [];
                                  M.read (| hi |);
                                  M.read (| lo |);
                                  Value.StructTuple
                                    "core::ascii::ascii_char::AsciiChar::Apostrophe"
                                    []
                                ];
                              Value.Integer IntegerKind.Usize 6
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.Tuple
                            [
                              Value.Array
                                [
                                  Value.StructTuple
                                    "core::ascii::ascii_char::AsciiChar::Apostrophe"
                                    [];
                                  M.read (| M.deref (| M.read (| self |) |) |);
                                  Value.StructTuple
                                    "core::ascii::ascii_char::AsciiChar::Apostrophe"
                                    [];
                                  Value.StructTuple "core::ascii::ascii_char::AsciiChar::Null" [];
                                  Value.StructTuple "core::ascii::ascii_char::AsciiChar::Null" [];
                                  Value.StructTuple "core::ascii::ascii_char::AsciiChar::Null" []
                                ];
                              Value.Integer IntegerKind.Usize 3
                            ]
                        |)))
                  ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let buf := M.copy (| γ0_0 |) in
                      let len := M.copy (| γ0_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_str",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [ Ty.path "core::ascii::ascii_char::AsciiChar" ],
                                    "as_str",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [ Ty.path "core::ascii::ascii_char::AsciiChar" ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::index::Index",
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 6 ]
                                              [ Ty.path "core::ascii::ascii_char::AsciiChar" ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::RangeTo")
                                                []
                                                [ Ty.path "usize" ]
                                            ],
                                            "index",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (| Pointer.Kind.Ref, buf |);
                                            Value.StructRecord
                                              "core::ops::range::RangeTo"
                                              [ ("end_", M.read (| len |)) ]
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_core_ascii_ascii_char_AsciiChar.
  End ascii_char.
End ascii.
