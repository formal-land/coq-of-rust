(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module cell.
  Module once.
    (* StructRecord
      {
        name := "OnceCell";
        const_params := [];
        ty_params := [ "T" ];
        fields :=
          [
            ("inner",
              Ty.apply
                (Ty.path "core::cell::UnsafeCell")
                []
                [ Ty.apply (Ty.path "core::option::Option") [] [ T ] ])
          ];
      } *)
    
    Module Impl_core_cell_once_OnceCell_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ].
      
      (*
          pub const fn new() -> OnceCell<T> {
              OnceCell { inner: UnsafeCell::new(None) }
          }
      *)
      Definition new (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.StructRecord
              "core::cell::once::OnceCell"
              []
              [ T ]
              [
                ("inner",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::cell::UnsafeCell")
                      []
                      [ Ty.apply (Ty.path "core::option::Option") [] [ T ] ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::cell::UnsafeCell")
                        []
                        [ Ty.apply (Ty.path "core::option::Option") [] [ T ] ],
                      "new",
                      [],
                      []
                    |),
                    [ Value.StructTuple "core::option::Option::None" [] [ T ] [] ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "new" (new T).
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn get(&self) -> Option<&T> {
              // SAFETY: Safe due to `inner`'s invariant
              unsafe { &*self.inner.get() }.as_ref()
          }
      *)
      Definition get (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.apply (Ty.path "&") [] [ T ] ],
              M.get_associated_function (|
                Ty.apply (Ty.path "core::option::Option") [] [ T ],
                "as_ref",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "*mut")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ T ] ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::cell::UnsafeCell")
                              []
                              [ Ty.apply (Ty.path "core::option::Option") [] [ T ] ],
                            "get",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "core::cell::once::OnceCell",
                                "inner"
                              |)
                            |)
                          ]
                        |)
                      |)
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "get" (get T).
      Admitted.
      Global Typeclasses Opaque get.
      
      (*
          pub fn get_mut(&mut self) -> Option<&mut T> {
              self.inner.get_mut().as_mut()
          }
      *)
      Definition get_mut (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.apply (Ty.path "&mut") [] [ T ] ],
              M.get_associated_function (|
                Ty.apply (Ty.path "core::option::Option") [] [ T ],
                "as_mut",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [ Ty.apply (Ty.path "core::option::Option") [] [ T ] ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::cell::UnsafeCell")
                          []
                          [ Ty.apply (Ty.path "core::option::Option") [] [ T ] ],
                        "get_mut",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::cell::once::OnceCell",
                            "inner"
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_mut :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "get_mut" (get_mut T).
      Admitted.
      Global Typeclasses Opaque get_mut.
      
      (*
          pub fn set(&self, value: T) -> Result<(), T> {
              match self.try_insert(value) {
                  Ok(_) => Ok(()),
                  Err((_, value)) => Err(value),
              }
          }
      *)
      Definition set (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let value := M.alloc (| value |) in
            M.read (|
              M.match_operator (|
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; T ] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply (Ty.path "&") [] [ T ];
                        Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ]; T ]
                      ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                      "try_insert",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| value |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::result::Result::Ok",
                          0
                        |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          []
                          [ Ty.tuple []; T ]
                          [ Value.Tuple [] ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::result::Result::Err",
                          0
                        |) in
                      let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                      let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                      let value := M.copy (| γ1_1 |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          []
                          [ Ty.tuple []; T ]
                          [ M.read (| value |) ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "set" (set T).
      Admitted.
      Global Typeclasses Opaque set.
      
      (*
          pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {
              if let Some(old) = self.get() {
                  return Err((old, value));
              }
      
              // SAFETY: This is the only place where we set the slot, no races
              // due to reentrancy/concurrency are possible, and we've
              // checked that slot is currently `None`, so this write
              // maintains the `inner`'s invariant.
              let slot = unsafe { &mut *self.inner.get() };
              Ok(slot.insert(value))
          }
      *)
      Definition try_insert (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let value := M.alloc (| value |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.apply (Ty.path "&") [] [ T ]; Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ]; T ]
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.apply (Ty.path "&") [] [ T ] ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                                    "get",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |)
                              |) in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let old := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.StructTuple
                                      "core::result::Result::Err"
                                      []
                                      [
                                        Ty.apply (Ty.path "&") [] [ T ];
                                        Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ]; T ]
                                      ]
                                      [
                                        Value.Tuple
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| old |) |)
                                            |);
                                            M.read (| value |)
                                          ]
                                      ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ slot :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ T ] ]
                        ] :=
                    M.alloc (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "*mut")
                                  []
                                  [ Ty.apply (Ty.path "core::option::Option") [] [ T ] ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::cell::UnsafeCell")
                                    []
                                    [ Ty.apply (Ty.path "core::option::Option") [] [ T ] ],
                                  "get",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "core::cell::once::OnceCell",
                                      "inner"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        |)
                      |)
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply (Ty.path "&") [] [ T ];
                        Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ]; T ]
                      ]
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&mut") [] [ T ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "core::option::Option") [] [ T ],
                                "insert",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| slot |) |) |);
                                M.read (| value |)
                              ]
                            |)
                          |)
                        |)
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_try_insert :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "try_insert" (try_insert T).
      Admitted.
      Global Typeclasses Opaque try_insert.
      
      (*
          pub fn get_or_init<F>(&self, f: F) -> &T
          where
              F: FnOnce() -> T,
          {
              match self.get_or_try_init(|| Ok::<T, !>(f())) {
                  Ok(val) => val,
              }
          }
      *)
      Definition get_or_init (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [ F ], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "&") [] [ T ] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.apply (Ty.path "&") [] [ T ]; Ty.path "never" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                      "get_or_try_init",
                      [],
                      [
                        Ty.function
                          [ Ty.tuple [] ]
                          (Ty.apply (Ty.path "core::result::Result") [] [ T; Ty.path "never" ]);
                        Ty.path "never"
                      ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ T; Ty.path "never" ])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (Value.StructTuple
                                          "core::result::Result::Ok"
                                          []
                                          [ T; Ty.path "never" ]
                                          [
                                            M.call_closure (|
                                              T,
                                              M.get_trait_method (|
                                                "core::ops::function::FnOnce",
                                                F,
                                                [],
                                                [ Ty.tuple [] ],
                                                "call_once",
                                                [],
                                                []
                                              |),
                                              [ M.read (| f |); Value.Tuple [] ]
                                            |)
                                          ]))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::result::Result::Ok",
                          0
                        |) in
                      let val := M.copy (| γ0_0 |) in
                      M.alloc (|
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| val |) |) |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_or_init :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "get_or_init" (get_or_init T).
      Admitted.
      Global Typeclasses Opaque get_or_init.
      
      (*
          pub fn get_mut_or_init<F>(&mut self, f: F) -> &mut T
          where
              F: FnOnce() -> T,
          {
              match self.get_mut_or_try_init(|| Ok::<T, !>(f())) {
                  Ok(val) => val,
              }
          }
      *)
      Definition get_mut_or_init
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [ F ], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.read (|
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "&mut") [] [ T ] ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.apply (Ty.path "&mut") [] [ T ]; Ty.path "never" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                              "get_mut_or_try_init",
                              [],
                              [
                                Ty.function
                                  [ Ty.tuple [] ]
                                  (Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [ T; Ty.path "never" ]);
                                Ty.path "never"
                              ]
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [ Ty.tuple [] ]
                                                (Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [ T; Ty.path "never" ])
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (Value.StructTuple
                                                  "core::result::Result::Ok"
                                                  []
                                                  [ T; Ty.path "never" ]
                                                  [
                                                    M.call_closure (|
                                                      T,
                                                      M.get_trait_method (|
                                                        "core::ops::function::FnOnce",
                                                        F,
                                                        [],
                                                        [ Ty.tuple [] ],
                                                        "call_once",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.read (| f |); Value.Tuple [] ]
                                                    |)
                                                  ]))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::result::Result::Ok",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| val |) |) |)
                              |)))
                        ]
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_mut_or_init :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "get_mut_or_init" (get_mut_or_init T).
      Admitted.
      Global Typeclasses Opaque get_mut_or_init.
      
      (*
          pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
          where
              F: FnOnce() -> Result<T, E>,
          {
              if let Some(val) = self.get() {
                  return Ok(val);
              }
              self.try_init(f)
          }
      *)
      Definition get_or_try_init
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [ F; E ], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.apply (Ty.path "&") [] [ T ]; E ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.apply (Ty.path "&") [] [ T ] ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                                    "get",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |)
                              |) in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.StructTuple
                                      "core::result::Result::Ok"
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ T ]; E ]
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| val |) |)
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.apply (Ty.path "&") [] [ T ]; E ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                        "try_init",
                        [],
                        [ F; E ]
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.read (| f |)
                      ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_or_try_init :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "get_or_try_init" (get_or_try_init T).
      Admitted.
      Global Typeclasses Opaque get_or_try_init.
      
      (*
          pub fn get_mut_or_try_init<F, E>(&mut self, f: F) -> Result<&mut T, E>
          where
              F: FnOnce() -> Result<T, E>,
          {
              if self.get().is_none() {
                  self.try_init(f)?;
              }
              Ok(self.get_mut().unwrap())
          }
      *)
      Definition get_mut_or_try_init
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [ F; E ], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.apply (Ty.path "&mut") [] [ T ]; E ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ T ] ],
                                      "is_none",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.apply (Ty.path "&") [] [ T ] ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::cell::once::OnceCell")
                                                []
                                                [ T ],
                                              "get",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| self |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ :
                                Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "&") [] [ T ] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "&") [] [ T ] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.path "core::convert::Infallible"; E ];
                                        Ty.apply (Ty.path "&") [] [ T ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ T ]; E ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.apply (Ty.path "&") [] [ T ]; E ],
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                                          "try_init",
                                          [],
                                          [ F; E ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| self |) |)
                                          |);
                                          M.read (| f |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [ Ty.apply (Ty.path "&mut") [] [ T ]; E ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [ Ty.apply (Ty.path "&mut") [] [ T ]; E ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [ Ty.path "core::convert::Infallible"; E ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [ Ty.apply (Ty.path "&mut") [] [ T ]; E ]
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&mut") [] [ T ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.apply (Ty.path "&mut") [] [ T ] ],
                                "unwrap",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.apply (Ty.path "&mut") [] [ T ] ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                                    "get_mut",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| self |) |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_mut_or_try_init :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "get_mut_or_try_init" (get_mut_or_try_init T).
      Admitted.
      Global Typeclasses Opaque get_mut_or_try_init.
      
      (*
          fn try_init<F, E>(&self, f: F) -> Result<&T, E>
          where
              F: FnOnce() -> Result<T, E>,
          {
              let val = f()?;
              // Note that *some* forms of reentrant initialization might lead to
              // UB (see `reentrant_init` test). I believe that just removing this
              // `panic`, while keeping `try_insert` would be sound, but it seems
              // better to panic, rather than to silently use an old value.
              if let Ok(val) = self.try_insert(val) { Ok(val) } else { panic!("reentrant init") }
          }
      *)
      Definition try_init (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [ F; E ], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.apply (Ty.path "&") [] [ T ]; E ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ val : Ty.apply (Ty.path "*") [] [ T ] :=
                    M.copy (|
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ T ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "core::convert::Infallible"; E ];
                                T
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply (Ty.path "core::result::Result") [] [ T; E ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "core::result::Result") [] [ T; E ],
                                M.get_trait_method (|
                                  "core::ops::function::FnOnce",
                                  F,
                                  [],
                                  [ Ty.tuple [] ],
                                  "call_once",
                                  [],
                                  []
                                |),
                                [ M.read (| f |); Value.Tuple [] ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.apply (Ty.path "&") [] [ T ]; E ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [ Ty.apply (Ty.path "&") [] [ T ]; E ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [ Ty.path "core::convert::Infallible"; E ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "*")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.apply (Ty.path "&") [] [ T ]; E ]
                      ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.apply (Ty.path "&") [] [ T ];
                                    Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ]; T ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                                  "try_insert",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                                  M.read (| val |)
                                ]
                              |)
                            |) in
                          let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::result::Result::Ok",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              []
                              [ Ty.apply (Ty.path "&") [] [ T ]; E ]
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| val |) |) |) ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                [
                                  M.call_closure (|
                                    Ty.path "core::fmt::Arguments",
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_const",
                                      [ Value.Integer IntegerKind.Usize 1 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.Array [ mk_str (| "reentrant init" |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_try_init :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "try_init" (try_init T).
      Admitted.
      Global Typeclasses Opaque try_init.
      
      (*
          pub const fn into_inner(self) -> Option<T> {
              // Because `into_inner` takes `self` by value, the compiler statically verifies
              // that it is not currently borrowed. So it is safe to move out `Option<T>`.
              self.inner.into_inner()
          }
      *)
      Definition into_inner (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.apply (Ty.path "core::option::Option") [] [ T ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::cell::UnsafeCell")
                  []
                  [ Ty.apply (Ty.path "core::option::Option") [] [ T ] ],
                "into_inner",
                [],
                []
              |),
              [
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "core::cell::once::OnceCell",
                    "inner"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_into_inner :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "into_inner" (into_inner T).
      Admitted.
      Global Typeclasses Opaque into_inner.
      
      (*
          pub fn take(&mut self) -> Option<T> {
              mem::take(self).into_inner()
          }
      *)
      Definition take (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.apply (Ty.path "core::option::Option") [] [ T ],
              M.get_associated_function (|
                Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                "into_inner",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                  M.get_function (|
                    "core::mem::take",
                    [],
                    [ Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ] ]
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_take :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "take" (take T).
      Admitted.
      Global Typeclasses Opaque take.
    End Impl_core_cell_once_OnceCell_T.
    
    Module Impl_core_default_Default_for_core_cell_once_OnceCell_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ].
      
      (*
          fn default() -> Self {
              Self::new()
          }
      *)
      Definition default (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
              M.get_associated_function (|
                Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                "new",
                [],
                []
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [ ("default", InstanceField.Method (default T)) ].
    End Impl_core_default_Default_for_core_cell_once_OnceCell_T.
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_core_cell_once_OnceCell_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ].
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              let mut d = f.debug_tuple("OnceCell");
              match self.get() {
                  Some(v) => d.field(v),
                  None => d.field(&format_args!("<uninit>")),
              };
              d.finish()
          }
      *)
      Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              let~ d : Ty.apply (Ty.path "*") [] [ Ty.path "core::fmt::builders::DebugTuple" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "core::fmt::builders::DebugTuple",
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "debug_tuple",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "OnceCell" |) |) |)
                    ]
                  |)
                |) in
              let~ _ :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::builders::DebugTuple" ]
                    ] :=
                M.match_operator (|
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::builders::DebugTuple" ] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "&") [] [ T ] ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                        "get",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let v := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.path "core::fmt::builders::DebugTuple" ],
                            M.get_associated_function (|
                              Ty.path "core::fmt::builders::DebugTuple",
                              "field",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, d |);
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| v |) |) |))
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.path "core::fmt::builders::DebugTuple" ],
                                M.get_associated_function (|
                                  Ty.path "core::fmt::builders::DebugTuple",
                                  "field",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, d |);
                                  (* Unsize *)
                                  M.pointer_coercion
                                    (M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "core::fmt::Arguments",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_const",
                                                [ Value.Integer IntegerKind.Usize 1 ],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Value.Array [ mk_str (| "<uninit>" |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |))
                                ]
                              |)
                            |)
                          |)
                        |)))
                  ]
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::builders::DebugTuple",
                    "finish",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, d |) ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_core_cell_once_OnceCell_T.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_core_cell_once_OnceCell_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ].
      
      (*
          fn clone(&self) -> OnceCell<T> {
              let res = OnceCell::new();
              if let Some(value) = self.get() {
                  match res.set(value.clone()) {
                      Ok(()) => (),
                      Err(_) => unreachable!(),
                  }
              }
              res
          }
      *)
      Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ res :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.apply (Ty.path "&") [] [ T ] ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                                "get",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          |) in
                        let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let value := M.copy (| γ0_0 |) in
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; T ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                                "set",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, res |);
                                M.call_closure (|
                                  T,
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    T,
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| value |) |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::result::Result::Ok",
                                    0
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::result::Result::Err",
                                    0
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic", [], [] |),
                                      [ mk_str (| "internal error: entered unreachable code" |) ]
                                    |)
                                  |)
                                |)))
                          ]
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              res
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_T_for_core_cell_once_OnceCell_T.
    
    Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_T_core_cell_once_OnceCell_T_for_core_cell_once_OnceCell_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ].
      
      (*
          fn eq(&self, other: &Self) -> bool {
              self.get() == other.get()
          }
      *)
      Definition eq (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.apply (Ty.path "&") [] [ T ] ],
                [],
                [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.apply (Ty.path "&") [] [ T ] ]
                ],
                "eq",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "&") [] [ T ] ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                        "get",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "&") [] [ T ] ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ],
                        "get",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ] ]
          (Self T)
          (* Instance *) [ ("eq", InstanceField.Method (eq T)) ].
    End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_T_core_cell_once_OnceCell_T_for_core_cell_once_OnceCell_T.
    
    Module Impl_core_cmp_Eq_where_core_cmp_Eq_T_for_core_cell_once_OnceCell_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ].
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [].
    End Impl_core_cmp_Eq_where_core_cmp_Eq_T_for_core_cell_once_OnceCell_T.
    
    Module Impl_core_convert_From_T_for_core_cell_once_OnceCell_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ].
      
      (*
          fn from(value: T) -> Self {
              OnceCell { inner: UnsafeCell::new(Some(value)) }
          }
      *)
      Definition from (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            Value.StructRecord
              "core::cell::once::OnceCell"
              []
              [ T ]
              [
                ("inner",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::cell::UnsafeCell")
                      []
                      [ Ty.apply (Ty.path "core::option::Option") [] [ T ] ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::cell::UnsafeCell")
                        []
                        [ Ty.apply (Ty.path "core::option::Option") [] [ T ] ],
                      "new",
                      [],
                      []
                    |),
                    [ Value.StructTuple "core::option::Option::Some" [] [ T ] [ M.read (| value |) ]
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ T ]
          (Self T)
          (* Instance *) [ ("from", InstanceField.Method (from T)) ].
    End Impl_core_convert_From_T_for_core_cell_once_OnceCell_T.
    
    Module Impl_core_marker_Sync_for_core_cell_once_OnceCell_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::cell::once::OnceCell") [] [ T ].
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::marker::Sync"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [].
    End Impl_core_marker_Sync_for_core_cell_once_OnceCell_T.
  End once.
End cell.
