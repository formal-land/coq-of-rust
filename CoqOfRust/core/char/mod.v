(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module char.
  Definition value_TAG_CONT : Value.t := M.run ltac:(M.monadic (M.alloc (| Value.Integer 128 |))).
  
  Definition value_TAG_TWO_B : Value.t := M.run ltac:(M.monadic (M.alloc (| Value.Integer 192 |))).
  
  Definition value_TAG_THREE_B : Value.t :=
    M.run ltac:(M.monadic (M.alloc (| Value.Integer 224 |))).
  
  Definition value_TAG_FOUR_B : Value.t := M.run ltac:(M.monadic (M.alloc (| Value.Integer 240 |))).
  
  Definition value_MAX_ONE_B : Value.t := M.run ltac:(M.monadic (M.alloc (| Value.Integer 128 |))).
  
  Definition value_MAX_TWO_B : Value.t := M.run ltac:(M.monadic (M.alloc (| Value.Integer 2048 |))).
  
  Definition value_MAX_THREE_B : Value.t :=
    M.run ltac:(M.monadic (M.alloc (| Value.Integer 65536 |))).
  
  Definition value_MAX : Value.t :=
    M.run ltac:(M.monadic (M.get_constant (| "core::char::methods::MAX" |))).
  
  Definition value_REPLACEMENT_CHARACTER : Value.t :=
    M.run ltac:(M.monadic (M.get_constant (| "core::char::methods::REPLACEMENT_CHARACTER" |))).
  
  Definition value_UNICODE_VERSION : Value.t :=
    M.run ltac:(M.monadic (M.get_constant (| "core::char::methods::UNICODE_VERSION" |))).
  
  (*
  pub fn decode_utf16<I: IntoIterator<Item = u16>>(iter: I) -> DecodeUtf16<I::IntoIter> {
      self::decode::decode_utf16(iter)
  }
  *)
  Definition decode_utf16 (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ _ as I ], [ iter ] =>
      ltac:(M.monadic
        (let iter := M.alloc (| iter |) in
        M.call_closure (|
          M.get_function (| "core::char::decode::decode_utf16", [ I ] |),
          [ M.read (| iter |) ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Function_decode_utf16 : M.IsFunction "core::char::decode_utf16" decode_utf16.
  
  (*
  pub const fn from_u32(i: u32) -> Option<char> {
      self::convert::from_u32(i)
  }
  *)
  Definition from_u32 (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ i ] =>
      ltac:(M.monadic
        (let i := M.alloc (| i |) in
        M.call_closure (|
          M.get_function (| "core::char::convert::from_u32", [] |),
          [ M.read (| i |) ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Function_from_u32 : M.IsFunction "core::char::from_u32" from_u32.
  
  (*
  pub const unsafe fn from_u32_unchecked(i: u32) -> char {
      // SAFETY: the safety contract must be upheld by the caller.
      unsafe { self::convert::from_u32_unchecked(i) }
  }
  *)
  Definition from_u32_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ i ] =>
      ltac:(M.monadic
        (let i := M.alloc (| i |) in
        M.call_closure (|
          M.get_function (| "core::char::convert::from_u32_unchecked", [] |),
          [ M.read (| i |) ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Function_from_u32_unchecked :
    M.IsFunction "core::char::from_u32_unchecked" from_u32_unchecked.
  
  (*
  pub const fn from_digit(num: u32, radix: u32) -> Option<char> {
      self::convert::from_digit(num, radix)
  }
  *)
  Definition from_digit (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ num; radix ] =>
      ltac:(M.monadic
        (let num := M.alloc (| num |) in
        let radix := M.alloc (| radix |) in
        M.call_closure (|
          M.get_function (| "core::char::convert::from_digit", [] |),
          [ M.read (| num |); M.read (| radix |) ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Function_from_digit : M.IsFunction "core::char::from_digit" from_digit.
  
  (* StructTuple
    {
      name := "EscapeUnicode";
      ty_params := [];
      fields := [ Ty.path "core::escape::EscapeIterInner" ];
    } *)
  
  Module Impl_core_clone_Clone_for_core_char_EscapeUnicode.
    Definition Self : Ty.t := Ty.path "core::char::EscapeUnicode".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::char::EscapeUnicode"
            [
              M.call_closure (|
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.path "core::escape::EscapeIterInner",
                  [],
                  "clone",
                  []
                |),
                [
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "core::char::EscapeUnicode",
                    0
                  |)
                ]
              |)
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_char_EscapeUnicode.
  
  Module Impl_core_fmt_Debug_for_core_char_EscapeUnicode.
    Definition Self : Ty.t := Ty.path "core::char::EscapeUnicode".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_tuple_field1_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "EscapeUnicode" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "core::char::EscapeUnicode",
                    0
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_core_char_EscapeUnicode.
  
  Module Impl_core_char_EscapeUnicode.
    Definition Self : Ty.t := Ty.path "core::char::EscapeUnicode".
    
    (*
        fn new(chr: char) -> Self {
            let mut data = [ascii::Char::Null; 10];
            let range = escape::escape_unicode_into(&mut data, chr);
            Self(escape::EscapeIterInner::new(data, range))
        }
    *)
    Definition new (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ chr ] =>
        ltac:(M.monadic
          (let chr := M.alloc (| chr |) in
          M.read (|
            let data :=
              M.alloc (|
                repeat (Value.StructTuple "core::ascii::ascii_char::AsciiChar::Null" []) 10
              |) in
            let range :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (| "core::escape::escape_unicode_into", [] |),
                  [ data; M.read (| chr |) ]
                |)
              |) in
            M.alloc (|
              Value.StructTuple
                "core::char::EscapeUnicode"
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "core::escape::EscapeIterInner",
                      "new",
                      []
                    |),
                    [ M.read (| data |); M.read (| range |) ]
                  |)
                ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  End Impl_core_char_EscapeUnicode.
  
  Module Impl_core_iter_traits_iterator_Iterator_for_core_char_EscapeUnicode.
    Definition Self : Ty.t := Ty.path "core::char::EscapeUnicode".
    
    (*     type Item = char; *)
    Definition _Item : Ty.t := Ty.path "char".
    
    (*
        fn next(&mut self) -> Option<char> {
            self.0.next().map(char::from)
        }
    *)
    Definition next (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "core::option::Option") [ Ty.path "u8" ],
              "map",
              [ Ty.path "char"; Ty.function [ Ty.path "u8" ] (Ty.path "char") ]
            |),
            [
              M.call_closure (|
                M.get_associated_function (| Ty.path "core::escape::EscapeIterInner", "next", [] |),
                [
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "core::char::EscapeUnicode",
                    0
                  |)
                ]
              |);
              M.get_trait_method (|
                "core::convert::From",
                Ty.path "char",
                [ Ty.path "u8" ],
                "from",
                []
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn size_hint(&self) -> (usize, Option<usize>) {
            let n = self.0.len();
            (n, Some(n))
        }
    *)
    Definition size_hint (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let n :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::escape::EscapeIterInner",
                    "len",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "core::char::EscapeUnicode",
                      0
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              Value.Tuple
                [ M.read (| n |); Value.StructTuple "core::option::Option::Some" [ M.read (| n |) ]
                ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn count(self) -> usize {
            self.0.len()
        }
    *)
    Definition count (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::escape::EscapeIterInner", "len", [] |),
            [ M.SubPointer.get_struct_tuple_field (| self, "core::char::EscapeUnicode", 0 |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn last(mut self) -> Option<char> {
            self.0.next_back().map(char::from)
        }
    *)
    Definition last (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "core::option::Option") [ Ty.path "u8" ],
              "map",
              [ Ty.path "char"; Ty.function [ Ty.path "u8" ] (Ty.path "char") ]
            |),
            [
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::escape::EscapeIterInner",
                  "next_back",
                  []
                |),
                [ M.SubPointer.get_struct_tuple_field (| self, "core::char::EscapeUnicode", 0 |) ]
              |);
              M.get_trait_method (|
                "core::convert::From",
                Ty.path "char",
                [ Ty.path "u8" ],
                "from",
                []
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {
            self.0.advance_by(n)
        }
    *)
    Definition advance_by (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; n ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let n := M.alloc (| n |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::escape::EscapeIterInner",
              "advance_by",
              []
            |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "core::char::EscapeUnicode",
                0
              |);
              M.read (| n |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::iterator::Iterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("Item", InstanceField.Ty _Item);
          ("next", InstanceField.Method next);
          ("size_hint", InstanceField.Method size_hint);
          ("count", InstanceField.Method count);
          ("last", InstanceField.Method last);
          ("advance_by", InstanceField.Method advance_by)
        ].
  End Impl_core_iter_traits_iterator_Iterator_for_core_char_EscapeUnicode.
  
  Module Impl_core_iter_traits_exact_size_ExactSizeIterator_for_core_char_EscapeUnicode.
    Definition Self : Ty.t := Ty.path "core::char::EscapeUnicode".
    
    (*
        fn len(&self) -> usize {
            self.0.len()
        }
    *)
    Definition len (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::escape::EscapeIterInner", "len", [] |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "core::char::EscapeUnicode",
                0
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::exact_size::ExactSizeIterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("len", InstanceField.Method len) ].
  End Impl_core_iter_traits_exact_size_ExactSizeIterator_for_core_char_EscapeUnicode.
  
  Module Impl_core_iter_traits_marker_FusedIterator_for_core_char_EscapeUnicode.
    Definition Self : Ty.t := Ty.path "core::char::EscapeUnicode".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::marker::FusedIterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_iter_traits_marker_FusedIterator_for_core_char_EscapeUnicode.
  
  Module Impl_core_fmt_Display_for_core_char_EscapeUnicode.
    Definition Self : Ty.t := Ty.path "core::char::EscapeUnicode".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.write_str(self.0.as_str())
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
            [
              M.read (| f |);
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::escape::EscapeIterInner",
                  "as_str",
                  []
                |),
                [
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "core::char::EscapeUnicode",
                    0
                  |)
                ]
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_core_char_EscapeUnicode.
  
  (* StructTuple
    {
      name := "EscapeDefault";
      ty_params := [];
      fields := [ Ty.path "core::escape::EscapeIterInner" ];
    } *)
  
  Module Impl_core_clone_Clone_for_core_char_EscapeDefault.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDefault".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::char::EscapeDefault"
            [
              M.call_closure (|
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.path "core::escape::EscapeIterInner",
                  [],
                  "clone",
                  []
                |),
                [
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "core::char::EscapeDefault",
                    0
                  |)
                ]
              |)
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_char_EscapeDefault.
  
  Module Impl_core_fmt_Debug_for_core_char_EscapeDefault.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDefault".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_tuple_field1_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "EscapeDefault" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "core::char::EscapeDefault",
                    0
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_core_char_EscapeDefault.
  
  Module Impl_core_char_EscapeDefault.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDefault".
    
    (*
        fn printable(chr: ascii::Char) -> Self {
            let data = [chr];
            Self(escape::EscapeIterInner::from_array(data))
        }
    *)
    Definition printable (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ chr ] =>
        ltac:(M.monadic
          (let chr := M.alloc (| chr |) in
          M.read (|
            let data := M.alloc (| Value.Array [ M.read (| chr |) ] |) in
            M.alloc (|
              Value.StructTuple
                "core::char::EscapeDefault"
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "core::escape::EscapeIterInner",
                      "from_array",
                      []
                    |),
                    [ M.read (| data |) ]
                  |)
                ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_printable : M.IsAssociatedFunction Self "printable" printable.
    
    (*
        fn backslash(chr: ascii::Char) -> Self {
            let data = [ascii::Char::ReverseSolidus, chr];
            Self(escape::EscapeIterInner::from_array(data))
        }
    *)
    Definition backslash (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ chr ] =>
        ltac:(M.monadic
          (let chr := M.alloc (| chr |) in
          M.read (|
            let data :=
              M.alloc (|
                Value.Array
                  [
                    Value.StructTuple "core::ascii::ascii_char::AsciiChar::ReverseSolidus" [];
                    M.read (| chr |)
                  ]
              |) in
            M.alloc (|
              Value.StructTuple
                "core::char::EscapeDefault"
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "core::escape::EscapeIterInner",
                      "from_array",
                      []
                    |),
                    [ M.read (| data |) ]
                  |)
                ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_backslash : M.IsAssociatedFunction Self "backslash" backslash.
    
    (*
        fn from_unicode(esc: EscapeUnicode) -> Self {
            Self(esc.0)
        }
    *)
    Definition from_unicode (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ esc ] =>
        ltac:(M.monadic
          (let esc := M.alloc (| esc |) in
          Value.StructTuple
            "core::char::EscapeDefault"
            [
              M.read (|
                M.SubPointer.get_struct_tuple_field (| esc, "core::char::EscapeUnicode", 0 |)
              |)
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_from_unicode : M.IsAssociatedFunction Self "from_unicode" from_unicode.
  End Impl_core_char_EscapeDefault.
  
  Module Impl_core_iter_traits_iterator_Iterator_for_core_char_EscapeDefault.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDefault".
    
    (*     type Item = char; *)
    Definition _Item : Ty.t := Ty.path "char".
    
    (*
        fn next(&mut self) -> Option<char> {
            self.0.next().map(char::from)
        }
    *)
    Definition next (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "core::option::Option") [ Ty.path "u8" ],
              "map",
              [ Ty.path "char"; Ty.function [ Ty.path "u8" ] (Ty.path "char") ]
            |),
            [
              M.call_closure (|
                M.get_associated_function (| Ty.path "core::escape::EscapeIterInner", "next", [] |),
                [
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "core::char::EscapeDefault",
                    0
                  |)
                ]
              |);
              M.get_trait_method (|
                "core::convert::From",
                Ty.path "char",
                [ Ty.path "u8" ],
                "from",
                []
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn size_hint(&self) -> (usize, Option<usize>) {
            let n = self.0.len();
            (n, Some(n))
        }
    *)
    Definition size_hint (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let n :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::escape::EscapeIterInner",
                    "len",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "core::char::EscapeDefault",
                      0
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              Value.Tuple
                [ M.read (| n |); Value.StructTuple "core::option::Option::Some" [ M.read (| n |) ]
                ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn count(self) -> usize {
            self.0.len()
        }
    *)
    Definition count (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::escape::EscapeIterInner", "len", [] |),
            [ M.SubPointer.get_struct_tuple_field (| self, "core::char::EscapeDefault", 0 |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn last(mut self) -> Option<char> {
            self.0.next_back().map(char::from)
        }
    *)
    Definition last (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "core::option::Option") [ Ty.path "u8" ],
              "map",
              [ Ty.path "char"; Ty.function [ Ty.path "u8" ] (Ty.path "char") ]
            |),
            [
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::escape::EscapeIterInner",
                  "next_back",
                  []
                |),
                [ M.SubPointer.get_struct_tuple_field (| self, "core::char::EscapeDefault", 0 |) ]
              |);
              M.get_trait_method (|
                "core::convert::From",
                Ty.path "char",
                [ Ty.path "u8" ],
                "from",
                []
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {
            self.0.advance_by(n)
        }
    *)
    Definition advance_by (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; n ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let n := M.alloc (| n |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::escape::EscapeIterInner",
              "advance_by",
              []
            |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "core::char::EscapeDefault",
                0
              |);
              M.read (| n |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::iterator::Iterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("Item", InstanceField.Ty _Item);
          ("next", InstanceField.Method next);
          ("size_hint", InstanceField.Method size_hint);
          ("count", InstanceField.Method count);
          ("last", InstanceField.Method last);
          ("advance_by", InstanceField.Method advance_by)
        ].
  End Impl_core_iter_traits_iterator_Iterator_for_core_char_EscapeDefault.
  
  Module Impl_core_iter_traits_exact_size_ExactSizeIterator_for_core_char_EscapeDefault.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDefault".
    
    (*
        fn len(&self) -> usize {
            self.0.len()
        }
    *)
    Definition len (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::escape::EscapeIterInner", "len", [] |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "core::char::EscapeDefault",
                0
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::exact_size::ExactSizeIterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("len", InstanceField.Method len) ].
  End Impl_core_iter_traits_exact_size_ExactSizeIterator_for_core_char_EscapeDefault.
  
  Module Impl_core_iter_traits_marker_FusedIterator_for_core_char_EscapeDefault.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDefault".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::marker::FusedIterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_iter_traits_marker_FusedIterator_for_core_char_EscapeDefault.
  
  Module Impl_core_fmt_Display_for_core_char_EscapeDefault.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDefault".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.write_str(self.0.as_str())
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
            [
              M.read (| f |);
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::escape::EscapeIterInner",
                  "as_str",
                  []
                |),
                [
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "core::char::EscapeDefault",
                    0
                  |)
                ]
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_core_char_EscapeDefault.
  
  (* StructTuple
    {
      name := "EscapeDebug";
      ty_params := [];
      fields := [ Ty.path "core::char::EscapeDebugInner" ];
    } *)
  
  Module Impl_core_clone_Clone_for_core_char_EscapeDebug.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDebug".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::char::EscapeDebug"
            [
              M.call_closure (|
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.path "core::char::EscapeDebugInner",
                  [],
                  "clone",
                  []
                |),
                [
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "core::char::EscapeDebug",
                    0
                  |)
                ]
              |)
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_char_EscapeDebug.
  
  Module Impl_core_fmt_Debug_for_core_char_EscapeDebug.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDebug".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_tuple_field1_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "EscapeDebug" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "core::char::EscapeDebug",
                    0
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_core_char_EscapeDebug.
  
  (*
  Enum EscapeDebugInner
  {
    ty_params := [];
    variants :=
      [
        {
          name := "Bytes";
          item := StructTuple [ Ty.path "core::escape::EscapeIterInner" ];
          discriminant := None;
        };
        {
          name := "Char";
          item := StructTuple [ Ty.path "char" ];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_clone_Clone_for_core_char_EscapeDebugInner.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDebugInner".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::EscapeDebugInner::Bytes",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::char::EscapeDebugInner::Bytes"
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path "core::escape::EscapeIterInner",
                              [],
                              "clone",
                              []
                            |),
                            [ M.read (| __self_0 |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::EscapeDebugInner::Char",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::char::EscapeDebugInner::Char"
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path "char",
                              [],
                              "clone",
                              []
                            |),
                            [ M.read (| __self_0 |) ]
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_char_EscapeDebugInner.
  
  Module Impl_core_fmt_Debug_for_core_char_EscapeDebugInner.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDebugInner".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::EscapeDebugInner::Bytes",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Bytes" |);
                          (* Unsize *) M.pointer_coercion __self_0
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::EscapeDebugInner::Char",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Char" |);
                          (* Unsize *) M.pointer_coercion __self_0
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_core_char_EscapeDebugInner.
  
  Module Impl_core_char_EscapeDebug.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDebug".
    
    (*
        fn printable(chr: char) -> Self {
            Self(EscapeDebugInner::Char(chr))
        }
    *)
    Definition printable (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ chr ] =>
        ltac:(M.monadic
          (let chr := M.alloc (| chr |) in
          Value.StructTuple
            "core::char::EscapeDebug"
            [ Value.StructTuple "core::char::EscapeDebugInner::Char" [ M.read (| chr |) ] ]))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_printable : M.IsAssociatedFunction Self "printable" printable.
    
    (*
        fn backslash(chr: ascii::Char) -> Self {
            let data = [ascii::Char::ReverseSolidus, chr];
            let iter = escape::EscapeIterInner::from_array(data);
            Self(EscapeDebugInner::Bytes(iter))
        }
    *)
    Definition backslash (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ chr ] =>
        ltac:(M.monadic
          (let chr := M.alloc (| chr |) in
          M.read (|
            let data :=
              M.alloc (|
                Value.Array
                  [
                    Value.StructTuple "core::ascii::ascii_char::AsciiChar::ReverseSolidus" [];
                    M.read (| chr |)
                  ]
              |) in
            let iter :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::escape::EscapeIterInner",
                    "from_array",
                    []
                  |),
                  [ M.read (| data |) ]
                |)
              |) in
            M.alloc (|
              Value.StructTuple
                "core::char::EscapeDebug"
                [ Value.StructTuple "core::char::EscapeDebugInner::Bytes" [ M.read (| iter |) ] ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_backslash : M.IsAssociatedFunction Self "backslash" backslash.
    
    (*
        fn from_unicode(esc: EscapeUnicode) -> Self {
            Self(EscapeDebugInner::Bytes(esc.0))
        }
    *)
    Definition from_unicode (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ esc ] =>
        ltac:(M.monadic
          (let esc := M.alloc (| esc |) in
          Value.StructTuple
            "core::char::EscapeDebug"
            [
              Value.StructTuple
                "core::char::EscapeDebugInner::Bytes"
                [
                  M.read (|
                    M.SubPointer.get_struct_tuple_field (| esc, "core::char::EscapeUnicode", 0 |)
                  |)
                ]
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_from_unicode : M.IsAssociatedFunction Self "from_unicode" from_unicode.
    
    (*
        fn clear(&mut self) {
            let bytes = escape::EscapeIterInner::from_array([]);
            self.0 = EscapeDebugInner::Bytes(bytes);
        }
    *)
    Definition clear (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let bytes :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::escape::EscapeIterInner",
                    "from_array",
                    []
                  |),
                  [ Value.Array [] ]
                |)
              |) in
            let _ :=
              M.write (|
                M.SubPointer.get_struct_tuple_field (|
                  M.read (| self |),
                  "core::char::EscapeDebug",
                  0
                |),
                Value.StructTuple "core::char::EscapeDebugInner::Bytes" [ M.read (| bytes |) ]
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_clear : M.IsAssociatedFunction Self "clear" clear.
  End Impl_core_char_EscapeDebug.
  
  Module Impl_core_iter_traits_iterator_Iterator_for_core_char_EscapeDebug.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDebug".
    
    (*     type Item = char; *)
    Definition _Item : Ty.t := Ty.path "char".
    
    (*
        fn next(&mut self) -> Option<char> {
            match self.0 {
                EscapeDebugInner::Bytes(ref mut bytes) => bytes.next().map(char::from),
                EscapeDebugInner::Char(chr) => {
                    self.clear();
                    Some(chr)
                }
            }
        }
    *)
    Definition next (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "core::char::EscapeDebug",
                0
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::EscapeDebugInner::Bytes",
                        0
                      |) in
                    let bytes := M.alloc (| γ0_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "core::option::Option") [ Ty.path "u8" ],
                          "map",
                          [ Ty.path "char"; Ty.function [ Ty.path "u8" ] (Ty.path "char") ]
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::escape::EscapeIterInner",
                              "next",
                              []
                            |),
                            [ M.read (| bytes |) ]
                          |);
                          M.get_trait_method (|
                            "core::convert::From",
                            Ty.path "char",
                            [ Ty.path "u8" ],
                            "from",
                            []
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::EscapeDebugInner::Char",
                        0
                      |) in
                    let chr := M.copy (| γ0_0 |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::char::EscapeDebug",
                            "clear",
                            []
                          |),
                          [ M.read (| self |) ]
                        |)
                      |) in
                    M.alloc (|
                      Value.StructTuple "core::option::Option::Some" [ M.read (| chr |) ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn size_hint(&self) -> (usize, Option<usize>) {
            let n = self.len();
            (n, Some(n))
        }
    *)
    Definition size_hint (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let n :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::exact_size::ExactSizeIterator",
                    Ty.path "core::char::EscapeDebug",
                    [],
                    "len",
                    []
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            M.alloc (|
              Value.Tuple
                [ M.read (| n |); Value.StructTuple "core::option::Option::Some" [ M.read (| n |) ]
                ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn count(self) -> usize {
            self.len()
        }
    *)
    Definition count (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::iter::traits::exact_size::ExactSizeIterator",
              Ty.path "core::char::EscapeDebug",
              [],
              "len",
              []
            |),
            [ self ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::iterator::Iterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("Item", InstanceField.Ty _Item);
          ("next", InstanceField.Method next);
          ("size_hint", InstanceField.Method size_hint);
          ("count", InstanceField.Method count)
        ].
  End Impl_core_iter_traits_iterator_Iterator_for_core_char_EscapeDebug.
  
  Module Impl_core_iter_traits_exact_size_ExactSizeIterator_for_core_char_EscapeDebug.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDebug".
    
    (*
        fn len(&self) -> usize {
            match &self.0 {
                EscapeDebugInner::Bytes(bytes) => bytes.len(),
                EscapeDebugInner::Char(_) => 1,
            }
        }
    *)
    Definition len (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              M.alloc (|
                M.SubPointer.get_struct_tuple_field (|
                  M.read (| self |),
                  "core::char::EscapeDebug",
                  0
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::EscapeDebugInner::Bytes",
                        0
                      |) in
                    let bytes := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::escape::EscapeIterInner",
                          "len",
                          []
                        |),
                        [ M.read (| bytes |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::EscapeDebugInner::Char",
                        0
                      |) in
                    M.alloc (| Value.Integer 1 |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::exact_size::ExactSizeIterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("len", InstanceField.Method len) ].
  End Impl_core_iter_traits_exact_size_ExactSizeIterator_for_core_char_EscapeDebug.
  
  Module Impl_core_iter_traits_marker_FusedIterator_for_core_char_EscapeDebug.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDebug".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::marker::FusedIterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_iter_traits_marker_FusedIterator_for_core_char_EscapeDebug.
  
  Module Impl_core_fmt_Display_for_core_char_EscapeDebug.
    Definition Self : Ty.t := Ty.path "core::char::EscapeDebug".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            match &self.0 {
                EscapeDebugInner::Bytes(bytes) => f.write_str(bytes.as_str()),
                EscapeDebugInner::Char(chr) => f.write_char( *chr),
            }
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              M.alloc (|
                M.SubPointer.get_struct_tuple_field (|
                  M.read (| self |),
                  "core::char::EscapeDebug",
                  0
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::EscapeDebugInner::Bytes",
                        0
                      |) in
                    let bytes := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::escape::EscapeIterInner",
                              "as_str",
                              []
                            |),
                            [ M.read (| bytes |) ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::EscapeDebugInner::Char",
                        0
                      |) in
                    let chr := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::fmt::Write",
                          Ty.path "core::fmt::Formatter",
                          [],
                          "write_char",
                          []
                        |),
                        [ M.read (| f |); M.read (| M.read (| chr |) |) ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_core_char_EscapeDebug.
  
  (* StructTuple
    {
      name := "ToLowercase";
      ty_params := [];
      fields := [ Ty.path "core::char::CaseMappingIter" ];
    } *)
  
  Module Impl_core_fmt_Debug_for_core_char_ToLowercase.
    Definition Self : Ty.t := Ty.path "core::char::ToLowercase".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_tuple_field1_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "ToLowercase" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "core::char::ToLowercase",
                    0
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_core_char_ToLowercase.
  
  Module Impl_core_clone_Clone_for_core_char_ToLowercase.
    Definition Self : Ty.t := Ty.path "core::char::ToLowercase".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::char::ToLowercase"
            [
              M.call_closure (|
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.path "core::char::CaseMappingIter",
                  [],
                  "clone",
                  []
                |),
                [
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "core::char::ToLowercase",
                    0
                  |)
                ]
              |)
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_char_ToLowercase.
  
  Module Impl_core_iter_traits_iterator_Iterator_for_core_char_ToLowercase.
    Definition Self : Ty.t := Ty.path "core::char::ToLowercase".
    
    (*     type Item = char; *)
    Definition _Item : Ty.t := Ty.path "char".
    
    (*
        fn next(&mut self) -> Option<char> {
            self.0.next()
        }
    *)
    Definition next (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.path "core::char::CaseMappingIter",
              [],
              "next",
              []
            |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "core::char::ToLowercase",
                0
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn size_hint(&self) -> (usize, Option<usize>) {
            self.0.size_hint()
        }
    *)
    Definition size_hint (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.path "core::char::CaseMappingIter",
              [],
              "size_hint",
              []
            |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "core::char::ToLowercase",
                0
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::iterator::Iterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("Item", InstanceField.Ty _Item);
          ("next", InstanceField.Method next);
          ("size_hint", InstanceField.Method size_hint)
        ].
  End Impl_core_iter_traits_iterator_Iterator_for_core_char_ToLowercase.
  
  Module Impl_core_iter_traits_double_ended_DoubleEndedIterator_for_core_char_ToLowercase.
    Definition Self : Ty.t := Ty.path "core::char::ToLowercase".
    
    (*
        fn next_back(&mut self) -> Option<char> {
            self.0.next_back()
        }
    *)
    Definition next_back (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::iter::traits::double_ended::DoubleEndedIterator",
              Ty.path "core::char::CaseMappingIter",
              [],
              "next_back",
              []
            |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "core::char::ToLowercase",
                0
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::double_ended::DoubleEndedIterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("next_back", InstanceField.Method next_back) ].
  End Impl_core_iter_traits_double_ended_DoubleEndedIterator_for_core_char_ToLowercase.
  
  Module Impl_core_iter_traits_marker_FusedIterator_for_core_char_ToLowercase.
    Definition Self : Ty.t := Ty.path "core::char::ToLowercase".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::marker::FusedIterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_iter_traits_marker_FusedIterator_for_core_char_ToLowercase.
  
  Module Impl_core_iter_traits_exact_size_ExactSizeIterator_for_core_char_ToLowercase.
    Definition Self : Ty.t := Ty.path "core::char::ToLowercase".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::exact_size::ExactSizeIterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_iter_traits_exact_size_ExactSizeIterator_for_core_char_ToLowercase.
  
  (* StructTuple
    {
      name := "ToUppercase";
      ty_params := [];
      fields := [ Ty.path "core::char::CaseMappingIter" ];
    } *)
  
  Module Impl_core_fmt_Debug_for_core_char_ToUppercase.
    Definition Self : Ty.t := Ty.path "core::char::ToUppercase".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_tuple_field1_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "ToUppercase" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "core::char::ToUppercase",
                    0
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_core_char_ToUppercase.
  
  Module Impl_core_clone_Clone_for_core_char_ToUppercase.
    Definition Self : Ty.t := Ty.path "core::char::ToUppercase".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::char::ToUppercase"
            [
              M.call_closure (|
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.path "core::char::CaseMappingIter",
                  [],
                  "clone",
                  []
                |),
                [
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "core::char::ToUppercase",
                    0
                  |)
                ]
              |)
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_char_ToUppercase.
  
  Module Impl_core_iter_traits_iterator_Iterator_for_core_char_ToUppercase.
    Definition Self : Ty.t := Ty.path "core::char::ToUppercase".
    
    (*     type Item = char; *)
    Definition _Item : Ty.t := Ty.path "char".
    
    (*
        fn next(&mut self) -> Option<char> {
            self.0.next()
        }
    *)
    Definition next (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.path "core::char::CaseMappingIter",
              [],
              "next",
              []
            |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "core::char::ToUppercase",
                0
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn size_hint(&self) -> (usize, Option<usize>) {
            self.0.size_hint()
        }
    *)
    Definition size_hint (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.path "core::char::CaseMappingIter",
              [],
              "size_hint",
              []
            |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "core::char::ToUppercase",
                0
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::iterator::Iterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("Item", InstanceField.Ty _Item);
          ("next", InstanceField.Method next);
          ("size_hint", InstanceField.Method size_hint)
        ].
  End Impl_core_iter_traits_iterator_Iterator_for_core_char_ToUppercase.
  
  Module Impl_core_iter_traits_double_ended_DoubleEndedIterator_for_core_char_ToUppercase.
    Definition Self : Ty.t := Ty.path "core::char::ToUppercase".
    
    (*
        fn next_back(&mut self) -> Option<char> {
            self.0.next_back()
        }
    *)
    Definition next_back (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::iter::traits::double_ended::DoubleEndedIterator",
              Ty.path "core::char::CaseMappingIter",
              [],
              "next_back",
              []
            |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "core::char::ToUppercase",
                0
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::double_ended::DoubleEndedIterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("next_back", InstanceField.Method next_back) ].
  End Impl_core_iter_traits_double_ended_DoubleEndedIterator_for_core_char_ToUppercase.
  
  Module Impl_core_iter_traits_marker_FusedIterator_for_core_char_ToUppercase.
    Definition Self : Ty.t := Ty.path "core::char::ToUppercase".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::marker::FusedIterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_iter_traits_marker_FusedIterator_for_core_char_ToUppercase.
  
  Module Impl_core_iter_traits_exact_size_ExactSizeIterator_for_core_char_ToUppercase.
    Definition Self : Ty.t := Ty.path "core::char::ToUppercase".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::exact_size::ExactSizeIterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_iter_traits_exact_size_ExactSizeIterator_for_core_char_ToUppercase.
  
  (*
  Enum CaseMappingIter
  {
    ty_params := [];
    variants :=
      [
        {
          name := "Three";
          item := StructTuple [ Ty.path "char"; Ty.path "char"; Ty.path "char" ];
          discriminant := None;
        };
        {
          name := "Two";
          item := StructTuple [ Ty.path "char"; Ty.path "char" ];
          discriminant := None;
        };
        {
          name := "One";
          item := StructTuple [ Ty.path "char" ];
          discriminant := None;
        };
        {
          name := "Zero";
          item := StructTuple [];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_fmt_Debug_for_core_char_CaseMappingIter.
    Definition Self : Ty.t := Ty.path "core::char::CaseMappingIter".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Three",
                        0
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Three",
                        1
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Three",
                        2
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field3_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Three" |);
                          (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                          (* Unsize *) M.pointer_coercion (M.read (| __self_1 |));
                          (* Unsize *) M.pointer_coercion __self_2
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Two",
                        0
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Two",
                        1
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field2_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Two" |);
                          (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                          (* Unsize *) M.pointer_coercion __self_1
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::One",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "One" |);
                          (* Unsize *) M.pointer_coercion __self_0
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "Zero" |) ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_core_char_CaseMappingIter.
  
  Module Impl_core_clone_Clone_for_core_char_CaseMappingIter.
    Definition Self : Ty.t := Ty.path "core::char::CaseMappingIter".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Three",
                        0
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Three",
                        1
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Three",
                        2
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::char::CaseMappingIter::Three"
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path "char",
                              [],
                              "clone",
                              []
                            |),
                            [ M.read (| __self_0 |) ]
                          |);
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path "char",
                              [],
                              "clone",
                              []
                            |),
                            [ M.read (| __self_1 |) ]
                          |);
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path "char",
                              [],
                              "clone",
                              []
                            |),
                            [ M.read (| __self_2 |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Two",
                        0
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Two",
                        1
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::char::CaseMappingIter::Two"
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path "char",
                              [],
                              "clone",
                              []
                            |),
                            [ M.read (| __self_0 |) ]
                          |);
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path "char",
                              [],
                              "clone",
                              []
                            |),
                            [ M.read (| __self_1 |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::One",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::char::CaseMappingIter::One"
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path "char",
                              [],
                              "clone",
                              []
                            |),
                            [ M.read (| __self_0 |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    M.alloc (| Value.StructTuple "core::char::CaseMappingIter::Zero" [] |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_char_CaseMappingIter.
  
  Module Impl_core_char_CaseMappingIter.
    Definition Self : Ty.t := Ty.path "core::char::CaseMappingIter".
    
    (*
        fn new(chars: [char; 3]) -> CaseMappingIter {
            if chars[2] == '\0' {
                if chars[1] == '\0' {
                    CaseMappingIter::One(chars[0]) // Including if chars[0] == '\0'
                } else {
                    CaseMappingIter::Two(chars[0], chars[1])
                }
            } else {
                CaseMappingIter::Three(chars[0], chars[1], chars[2])
            }
        }
    *)
    Definition new (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ chars ] =>
        ltac:(M.monadic
          (let chars := M.alloc (| chars |) in
          M.read (|
            M.match_operator (|
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          BinOp.Pure.eq
                            (M.read (|
                              M.SubPointer.get_array_field (|
                                chars,
                                M.alloc (| Value.Integer 2 |)
                              |)
                            |))
                            (Value.UnicodeChar 0)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  BinOp.Pure.eq
                                    (M.read (|
                                      M.SubPointer.get_array_field (|
                                        chars,
                                        M.alloc (| Value.Integer 1 |)
                                      |)
                                    |))
                                    (Value.UnicodeChar 0)
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              Value.StructTuple
                                "core::char::CaseMappingIter::One"
                                [
                                  M.read (|
                                    M.SubPointer.get_array_field (|
                                      chars,
                                      M.alloc (| Value.Integer 0 |)
                                    |)
                                  |)
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructTuple
                                "core::char::CaseMappingIter::Two"
                                [
                                  M.read (|
                                    M.SubPointer.get_array_field (|
                                      chars,
                                      M.alloc (| Value.Integer 0 |)
                                    |)
                                  |);
                                  M.read (|
                                    M.SubPointer.get_array_field (|
                                      chars,
                                      M.alloc (| Value.Integer 1 |)
                                    |)
                                  |)
                                ]
                            |)))
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple
                        "core::char::CaseMappingIter::Three"
                        [
                          M.read (|
                            M.SubPointer.get_array_field (| chars, M.alloc (| Value.Integer 0 |) |)
                          |);
                          M.read (|
                            M.SubPointer.get_array_field (| chars, M.alloc (| Value.Integer 1 |) |)
                          |);
                          M.read (|
                            M.SubPointer.get_array_field (| chars, M.alloc (| Value.Integer 2 |) |)
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  End Impl_core_char_CaseMappingIter.
  
  Module Impl_core_iter_traits_iterator_Iterator_for_core_char_CaseMappingIter.
    Definition Self : Ty.t := Ty.path "core::char::CaseMappingIter".
    
    (*     type Item = char; *)
    Definition _Item : Ty.t := Ty.path "char".
    
    (*
        fn next(&mut self) -> Option<char> {
            match *self {
                CaseMappingIter::Three(a, b, c) => {
                    *self = CaseMappingIter::Two(b, c);
                    Some(a)
                }
                CaseMappingIter::Two(b, c) => {
                    *self = CaseMappingIter::One(c);
                    Some(b)
                }
                CaseMappingIter::One(c) => {
                    *self = CaseMappingIter::Zero;
                    Some(c)
                }
                CaseMappingIter::Zero => None,
            }
        }
    *)
    Definition next (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              M.read (| self |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Three",
                        0
                      |) in
                    let γ0_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Three",
                        1
                      |) in
                    let γ0_2 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Three",
                        2
                      |) in
                    let a := M.copy (| γ0_0 |) in
                    let b := M.copy (| γ0_1 |) in
                    let c := M.copy (| γ0_2 |) in
                    let _ :=
                      M.write (|
                        M.read (| self |),
                        Value.StructTuple
                          "core::char::CaseMappingIter::Two"
                          [ M.read (| b |); M.read (| c |) ]
                      |) in
                    M.alloc (|
                      Value.StructTuple "core::option::Option::Some" [ M.read (| a |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Two",
                        0
                      |) in
                    let γ0_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Two",
                        1
                      |) in
                    let b := M.copy (| γ0_0 |) in
                    let c := M.copy (| γ0_1 |) in
                    let _ :=
                      M.write (|
                        M.read (| self |),
                        Value.StructTuple "core::char::CaseMappingIter::One" [ M.read (| c |) ]
                      |) in
                    M.alloc (|
                      Value.StructTuple "core::option::Option::Some" [ M.read (| b |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::One",
                        0
                      |) in
                    let c := M.copy (| γ0_0 |) in
                    let _ :=
                      M.write (|
                        M.read (| self |),
                        Value.StructTuple "core::char::CaseMappingIter::Zero" []
                      |) in
                    M.alloc (|
                      Value.StructTuple "core::option::Option::Some" [ M.read (| c |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn size_hint(&self) -> (usize, Option<usize>) {
            let size = match self {
                CaseMappingIter::Three(..) => 3,
                CaseMappingIter::Two(..) => 2,
                CaseMappingIter::One(_) => 1,
                CaseMappingIter::Zero => 0,
            };
            (size, Some(size))
        }
    *)
    Definition size_hint (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let size :=
              M.copy (|
                M.match_operator (|
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        M.alloc (| Value.Integer 3 |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        M.alloc (| Value.Integer 2 |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::char::CaseMappingIter::One",
                            0
                          |) in
                        M.alloc (| Value.Integer 1 |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        M.alloc (| Value.Integer 0 |)))
                  ]
                |)
              |) in
            M.alloc (|
              Value.Tuple
                [
                  M.read (| size |);
                  Value.StructTuple "core::option::Option::Some" [ M.read (| size |) ]
                ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::iterator::Iterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("Item", InstanceField.Ty _Item);
          ("next", InstanceField.Method next);
          ("size_hint", InstanceField.Method size_hint)
        ].
  End Impl_core_iter_traits_iterator_Iterator_for_core_char_CaseMappingIter.
  
  Module Impl_core_iter_traits_double_ended_DoubleEndedIterator_for_core_char_CaseMappingIter.
    Definition Self : Ty.t := Ty.path "core::char::CaseMappingIter".
    
    (*
        fn next_back(&mut self) -> Option<char> {
            match *self {
                CaseMappingIter::Three(a, b, c) => {
                    *self = CaseMappingIter::Two(a, b);
                    Some(c)
                }
                CaseMappingIter::Two(b, c) => {
                    *self = CaseMappingIter::One(b);
                    Some(c)
                }
                CaseMappingIter::One(c) => {
                    *self = CaseMappingIter::Zero;
                    Some(c)
                }
                CaseMappingIter::Zero => None,
            }
        }
    *)
    Definition next_back (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              M.read (| self |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Three",
                        0
                      |) in
                    let γ0_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Three",
                        1
                      |) in
                    let γ0_2 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Three",
                        2
                      |) in
                    let a := M.copy (| γ0_0 |) in
                    let b := M.copy (| γ0_1 |) in
                    let c := M.copy (| γ0_2 |) in
                    let _ :=
                      M.write (|
                        M.read (| self |),
                        Value.StructTuple
                          "core::char::CaseMappingIter::Two"
                          [ M.read (| a |); M.read (| b |) ]
                      |) in
                    M.alloc (|
                      Value.StructTuple "core::option::Option::Some" [ M.read (| c |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Two",
                        0
                      |) in
                    let γ0_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::Two",
                        1
                      |) in
                    let b := M.copy (| γ0_0 |) in
                    let c := M.copy (| γ0_1 |) in
                    let _ :=
                      M.write (|
                        M.read (| self |),
                        Value.StructTuple "core::char::CaseMappingIter::One" [ M.read (| b |) ]
                      |) in
                    M.alloc (|
                      Value.StructTuple "core::option::Option::Some" [ M.read (| c |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::char::CaseMappingIter::One",
                        0
                      |) in
                    let c := M.copy (| γ0_0 |) in
                    let _ :=
                      M.write (|
                        M.read (| self |),
                        Value.StructTuple "core::char::CaseMappingIter::Zero" []
                      |) in
                    M.alloc (|
                      Value.StructTuple "core::option::Option::Some" [ M.read (| c |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::iter::traits::double_ended::DoubleEndedIterator"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("next_back", InstanceField.Method next_back) ].
  End Impl_core_iter_traits_double_ended_DoubleEndedIterator_for_core_char_CaseMappingIter.
  
  Module Impl_core_fmt_Display_for_core_char_CaseMappingIter.
    Definition Self : Ty.t := Ty.path "core::char::CaseMappingIter".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            match *self {
                CaseMappingIter::Three(a, b, c) => {
                    f.write_char(a)?;
                    f.write_char(b)?;
                    f.write_char(c)
                }
                CaseMappingIter::Two(b, c) => {
                    f.write_char(b)?;
                    f.write_char(c)
                }
                CaseMappingIter::One(c) => f.write_char(c),
                CaseMappingIter::Zero => Ok(()),
            }
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  M.read (| self |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::char::CaseMappingIter::Three",
                            0
                          |) in
                        let γ0_1 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::char::CaseMappingIter::Three",
                            1
                          |) in
                        let γ0_2 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::char::CaseMappingIter::Three",
                            2
                          |) in
                        let a := M.copy (| γ0_0 |) in
                        let b := M.copy (| γ0_1 |) in
                        let c := M.copy (| γ0_2 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::fmt::Write",
                                      Ty.path "core::fmt::Formatter",
                                      [],
                                      "write_char",
                                      []
                                    |),
                                    [ M.read (| f |); M.read (| a |) ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "core::fmt::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::fmt::Write",
                                      Ty.path "core::fmt::Formatter",
                                      [],
                                      "write_char",
                                      []
                                    |),
                                    [ M.read (| f |); M.read (| b |) ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "core::fmt::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::fmt::Write",
                              Ty.path "core::fmt::Formatter",
                              [],
                              "write_char",
                              []
                            |),
                            [ M.read (| f |); M.read (| c |) ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::char::CaseMappingIter::Two",
                            0
                          |) in
                        let γ0_1 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::char::CaseMappingIter::Two",
                            1
                          |) in
                        let b := M.copy (| γ0_0 |) in
                        let c := M.copy (| γ0_1 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::fmt::Write",
                                      Ty.path "core::fmt::Formatter",
                                      [],
                                      "write_char",
                                      []
                                    |),
                                    [ M.read (| f |); M.read (| b |) ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "core::fmt::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::fmt::Write",
                              Ty.path "core::fmt::Formatter",
                              [],
                              "write_char",
                              []
                            |),
                            [ M.read (| f |); M.read (| c |) ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::char::CaseMappingIter::One",
                            0
                          |) in
                        let c := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::fmt::Write",
                              Ty.path "core::fmt::Formatter",
                              [],
                              "write_char",
                              []
                            |),
                            [ M.read (| f |); M.read (| c |) ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_core_char_CaseMappingIter.
  
  Module Impl_core_fmt_Display_for_core_char_ToLowercase.
    Definition Self : Ty.t := Ty.path "core::char::ToLowercase".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            fmt::Display::fmt(&self.0, f)
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::fmt::Display",
              Ty.path "core::char::CaseMappingIter",
              [],
              "fmt",
              []
            |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "core::char::ToLowercase",
                0
              |);
              M.read (| f |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_core_char_ToLowercase.
  
  Module Impl_core_fmt_Display_for_core_char_ToUppercase.
    Definition Self : Ty.t := Ty.path "core::char::ToUppercase".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            fmt::Display::fmt(&self.0, f)
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::fmt::Display",
              Ty.path "core::char::CaseMappingIter",
              [],
              "fmt",
              []
            |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "core::char::ToUppercase",
                0
              |);
              M.read (| f |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_core_char_ToUppercase.
  
  (* StructTuple
    {
      name := "TryFromCharError";
      ty_params := [];
      fields := [ Ty.tuple [] ];
    } *)
  
  Module Impl_core_fmt_Debug_for_core_char_TryFromCharError.
    Definition Self : Ty.t := Ty.path "core::char::TryFromCharError".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_tuple_field1_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "TryFromCharError" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "core::char::TryFromCharError",
                    0
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_core_char_TryFromCharError.
  
  Module Impl_core_marker_Copy_for_core_char_TryFromCharError.
    Definition Self : Ty.t := Ty.path "core::char::TryFromCharError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_core_char_TryFromCharError.
  
  Module Impl_core_clone_Clone_for_core_char_TryFromCharError.
    Definition Self : Ty.t := Ty.path "core::char::TryFromCharError".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.read (| self |))) ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_char_TryFromCharError.
  
  Module Impl_core_marker_StructuralPartialEq_for_core_char_TryFromCharError.
    Definition Self : Ty.t := Ty.path "core::char::TryFromCharError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_core_char_TryFromCharError.
  
  Module Impl_core_cmp_PartialEq_for_core_char_TryFromCharError.
    Definition Self : Ty.t := Ty.path "core::char::TryFromCharError".
    
    (* PartialEq *)
    Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            M.get_trait_method (| "core::cmp::PartialEq", Ty.tuple [], [ Ty.tuple [] ], "eq", [] |),
            [
              M.SubPointer.get_struct_tuple_field (|
                M.read (| self |),
                "core::char::TryFromCharError",
                0
              |);
              M.SubPointer.get_struct_tuple_field (|
                M.read (| other |),
                "core::char::TryFromCharError",
                0
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_core_char_TryFromCharError.
  
  Module Impl_core_marker_StructuralEq_for_core_char_TryFromCharError.
    Definition Self : Ty.t := Ty.path "core::char::TryFromCharError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralEq_for_core_char_TryFromCharError.
  
  Module Impl_core_cmp_Eq_for_core_char_TryFromCharError.
    Definition Self : Ty.t := Ty.path "core::char::TryFromCharError".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_core_char_TryFromCharError.
  
  Module Impl_core_fmt_Display_for_core_char_TryFromCharError.
    Definition Self : Ty.t := Ty.path "core::char::TryFromCharError".
    
    (*
        fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
            "unicode code point out of range".fmt(fmt)
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; fmt ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let fmt := M.alloc (| fmt |) in
          M.call_closure (|
            M.get_trait_method (| "core::fmt::Display", Ty.path "str", [], "fmt", [] |),
            [ M.read (| Value.String "unicode code point out of range" |); M.read (| fmt |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_core_char_TryFromCharError.
  
  Module Impl_core_error_Error_for_core_char_TryFromCharError.
    Definition Self : Ty.t := Ty.path "core::char::TryFromCharError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::error::Error"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_error_Error_for_core_char_TryFromCharError.
End char.
