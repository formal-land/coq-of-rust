(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module convert.
  Module num.
    Module private.
      (* Trait *)
      (* Empty module 'Sealed' *)
    End private.
    
    (* Trait *)
    (* Empty module 'FloatToInt' *)
    
    Module Impl_core_convert_num_private_Sealed_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::private::Sealed"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_convert_num_private_Sealed_for_f32.
    
    Module Impl_core_convert_num_FloatToInt_u8_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f32"; Ty.path "u8" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "u8" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_u8_for_f32.
    
    Module Impl_core_convert_num_FloatToInt_u16_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f32"; Ty.path "u16" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "u16" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_u16_for_f32.
    
    Module Impl_core_convert_num_FloatToInt_u32_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f32"; Ty.path "u32" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "u32" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_u32_for_f32.
    
    Module Impl_core_convert_num_FloatToInt_u64_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f32"; Ty.path "u64" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "u64" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_u64_for_f32.
    
    Module Impl_core_convert_num_FloatToInt_u128_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f32"; Ty.path "u128" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "u128" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_u128_for_f32.
    
    Module Impl_core_convert_num_FloatToInt_usize_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f32"; Ty.path "usize" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "usize" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_usize_for_f32.
    
    Module Impl_core_convert_num_FloatToInt_i8_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f32"; Ty.path "i8" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "i8" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_i8_for_f32.
    
    Module Impl_core_convert_num_FloatToInt_i16_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f32"; Ty.path "i16" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "i16" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_i16_for_f32.
    
    Module Impl_core_convert_num_FloatToInt_i32_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f32"; Ty.path "i32" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "i32" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_i32_for_f32.
    
    Module Impl_core_convert_num_FloatToInt_i64_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f32"; Ty.path "i64" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "i64" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_i64_for_f32.
    
    Module Impl_core_convert_num_FloatToInt_i128_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f32"; Ty.path "i128" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "i128" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_i128_for_f32.
    
    Module Impl_core_convert_num_FloatToInt_isize_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f32"; Ty.path "isize" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "isize" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_isize_for_f32.
    
    Module Impl_core_convert_num_private_Sealed_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::private::Sealed"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_convert_num_private_Sealed_for_f64.
    
    Module Impl_core_convert_num_FloatToInt_u8_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f64"; Ty.path "u8" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "u8" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_u8_for_f64.
    
    Module Impl_core_convert_num_FloatToInt_u16_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f64"; Ty.path "u16" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "u16" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_u16_for_f64.
    
    Module Impl_core_convert_num_FloatToInt_u32_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f64"; Ty.path "u32" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "u32" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_u32_for_f64.
    
    Module Impl_core_convert_num_FloatToInt_u64_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f64"; Ty.path "u64" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "u64" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_u64_for_f64.
    
    Module Impl_core_convert_num_FloatToInt_u128_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f64"; Ty.path "u128" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "u128" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_u128_for_f64.
    
    Module Impl_core_convert_num_FloatToInt_usize_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f64"; Ty.path "usize" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "usize" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_usize_for_f64.
    
    Module Impl_core_convert_num_FloatToInt_i8_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f64"; Ty.path "i8" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "i8" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_i8_for_f64.
    
    Module Impl_core_convert_num_FloatToInt_i16_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f64"; Ty.path "i16" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "i16" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_i16_for_f64.
    
    Module Impl_core_convert_num_FloatToInt_i32_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f64"; Ty.path "i32" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "i32" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_i32_for_f64.
    
    Module Impl_core_convert_num_FloatToInt_i64_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f64"; Ty.path "i64" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "i64" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_i64_for_f64.
    
    Module Impl_core_convert_num_FloatToInt_i128_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f64"; Ty.path "i128" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "i128" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_i128_for_f64.
    
    Module Impl_core_convert_num_FloatToInt_isize_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                      unsafe fn to_int_unchecked(self) -> $Int {
                          // SAFETY: the safety contract must be upheld by the caller.
                          unsafe { crate::intrinsics::float_to_int_unchecked(self) }
                      }
      *)
      Definition to_int_unchecked (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (|
                "core::intrinsics::float_to_int_unchecked",
                [ Ty.path "f64"; Ty.path "isize" ]
              |),
              [ M.read (| self |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::num::FloatToInt"
          Self
          (* Trait polymorphic types *) [ (* Int *) Ty.path "isize" ]
          (* Instance *) [ ("to_int_unchecked", InstanceField.Method to_int_unchecked) ].
    End Impl_core_convert_num_FloatToInt_isize_for_f64.
    
    Module Impl_core_convert_From_bool_for_u8.
      Definition Self : Ty.t := Ty.path "u8".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "bool" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_bool_for_u8.
    
    Module Impl_core_convert_From_bool_for_u16.
      Definition Self : Ty.t := Ty.path "u16".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "bool" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_bool_for_u16.
    
    Module Impl_core_convert_From_bool_for_u32.
      Definition Self : Ty.t := Ty.path "u32".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "bool" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_bool_for_u32.
    
    Module Impl_core_convert_From_bool_for_u64.
      Definition Self : Ty.t := Ty.path "u64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "bool" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_bool_for_u64.
    
    Module Impl_core_convert_From_bool_for_u128.
      Definition Self : Ty.t := Ty.path "u128".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "bool" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_bool_for_u128.
    
    Module Impl_core_convert_From_bool_for_usize.
      Definition Self : Ty.t := Ty.path "usize".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "bool" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_bool_for_usize.
    
    Module Impl_core_convert_From_bool_for_i8.
      Definition Self : Ty.t := Ty.path "i8".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "bool" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_bool_for_i8.
    
    Module Impl_core_convert_From_bool_for_i16.
      Definition Self : Ty.t := Ty.path "i16".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "bool" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_bool_for_i16.
    
    Module Impl_core_convert_From_bool_for_i32.
      Definition Self : Ty.t := Ty.path "i32".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "bool" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_bool_for_i32.
    
    Module Impl_core_convert_From_bool_for_i64.
      Definition Self : Ty.t := Ty.path "i64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "bool" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_bool_for_i64.
    
    Module Impl_core_convert_From_bool_for_i128.
      Definition Self : Ty.t := Ty.path "i128".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "bool" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_bool_for_i128.
    
    Module Impl_core_convert_From_bool_for_isize.
      Definition Self : Ty.t := Ty.path "isize".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "bool" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_bool_for_isize.
    
    Module Impl_core_convert_From_u8_for_u16.
      Definition Self : Ty.t := Ty.path "u16".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u8_for_u16.
    
    Module Impl_core_convert_From_u8_for_u32.
      Definition Self : Ty.t := Ty.path "u32".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u8_for_u32.
    
    Module Impl_core_convert_From_u8_for_u64.
      Definition Self : Ty.t := Ty.path "u64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u8_for_u64.
    
    Module Impl_core_convert_From_u8_for_u128.
      Definition Self : Ty.t := Ty.path "u128".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u8_for_u128.
    
    Module Impl_core_convert_From_u8_for_usize.
      Definition Self : Ty.t := Ty.path "usize".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u8_for_usize.
    
    Module Impl_core_convert_From_u16_for_u32.
      Definition Self : Ty.t := Ty.path "u32".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u16_for_u32.
    
    Module Impl_core_convert_From_u16_for_u64.
      Definition Self : Ty.t := Ty.path "u64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u16_for_u64.
    
    Module Impl_core_convert_From_u16_for_u128.
      Definition Self : Ty.t := Ty.path "u128".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u16_for_u128.
    
    Module Impl_core_convert_From_u32_for_u64.
      Definition Self : Ty.t := Ty.path "u64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u32" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u32_for_u64.
    
    Module Impl_core_convert_From_u32_for_u128.
      Definition Self : Ty.t := Ty.path "u128".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u32" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u32_for_u128.
    
    Module Impl_core_convert_From_u64_for_u128.
      Definition Self : Ty.t := Ty.path "u128".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u64" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u64_for_u128.
    
    Module Impl_core_convert_From_i8_for_i16.
      Definition Self : Ty.t := Ty.path "i16".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i8_for_i16.
    
    Module Impl_core_convert_From_i8_for_i32.
      Definition Self : Ty.t := Ty.path "i32".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i8_for_i32.
    
    Module Impl_core_convert_From_i8_for_i64.
      Definition Self : Ty.t := Ty.path "i64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i8_for_i64.
    
    Module Impl_core_convert_From_i8_for_i128.
      Definition Self : Ty.t := Ty.path "i128".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i8_for_i128.
    
    Module Impl_core_convert_From_i8_for_isize.
      Definition Self : Ty.t := Ty.path "isize".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i8_for_isize.
    
    Module Impl_core_convert_From_i16_for_i32.
      Definition Self : Ty.t := Ty.path "i32".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i16_for_i32.
    
    Module Impl_core_convert_From_i16_for_i64.
      Definition Self : Ty.t := Ty.path "i64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i16_for_i64.
    
    Module Impl_core_convert_From_i16_for_i128.
      Definition Self : Ty.t := Ty.path "i128".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i16_for_i128.
    
    Module Impl_core_convert_From_i32_for_i64.
      Definition Self : Ty.t := Ty.path "i64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i32" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i32_for_i64.
    
    Module Impl_core_convert_From_i32_for_i128.
      Definition Self : Ty.t := Ty.path "i128".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i32" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i32_for_i128.
    
    Module Impl_core_convert_From_i64_for_i128.
      Definition Self : Ty.t := Ty.path "i128".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i64" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i64_for_i128.
    
    Module Impl_core_convert_From_u8_for_i16.
      Definition Self : Ty.t := Ty.path "i16".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u8_for_i16.
    
    Module Impl_core_convert_From_u8_for_i32.
      Definition Self : Ty.t := Ty.path "i32".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u8_for_i32.
    
    Module Impl_core_convert_From_u8_for_i64.
      Definition Self : Ty.t := Ty.path "i64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u8_for_i64.
    
    Module Impl_core_convert_From_u8_for_i128.
      Definition Self : Ty.t := Ty.path "i128".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u8_for_i128.
    
    Module Impl_core_convert_From_u16_for_i32.
      Definition Self : Ty.t := Ty.path "i32".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u16_for_i32.
    
    Module Impl_core_convert_From_u16_for_i64.
      Definition Self : Ty.t := Ty.path "i64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u16_for_i64.
    
    Module Impl_core_convert_From_u16_for_i128.
      Definition Self : Ty.t := Ty.path "i128".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u16_for_i128.
    
    Module Impl_core_convert_From_u32_for_i64.
      Definition Self : Ty.t := Ty.path "i64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u32" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u32_for_i64.
    
    Module Impl_core_convert_From_u32_for_i128.
      Definition Self : Ty.t := Ty.path "i128".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u32" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u32_for_i128.
    
    Module Impl_core_convert_From_u64_for_i128.
      Definition Self : Ty.t := Ty.path "i128".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u64" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u64_for_i128.
    
    Module Impl_core_convert_From_u16_for_usize.
      Definition Self : Ty.t := Ty.path "usize".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u16_for_usize.
    
    Module Impl_core_convert_From_u8_for_isize.
      Definition Self : Ty.t := Ty.path "isize".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u8_for_isize.
    
    Module Impl_core_convert_From_i16_for_isize.
      Definition Self : Ty.t := Ty.path "isize".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i16_for_isize.
    
    Module Impl_core_convert_From_i8_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i8_for_f32.
    
    Module Impl_core_convert_From_i8_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i8_for_f64.
    
    Module Impl_core_convert_From_i16_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i16_for_f32.
    
    Module Impl_core_convert_From_i16_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i16_for_f64.
    
    Module Impl_core_convert_From_i32_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i32" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_i32_for_f64.
    
    Module Impl_core_convert_From_u8_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u8_for_f32.
    
    Module Impl_core_convert_From_u8_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u8_for_f64.
    
    Module Impl_core_convert_From_u16_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u16_for_f32.
    
    Module Impl_core_convert_From_u16_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u16_for_f64.
    
    Module Impl_core_convert_From_u32_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u32" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_u32_for_f64.
    
    Module Impl_core_convert_From_f32_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
                  fn from(small: $Small) -> Self {
                      small as Self
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.read (| small |))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "f32" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_f32_for_f64.
    
    Module Impl_core_convert_From_bool_for_f32.
      Definition Self : Ty.t := Ty.path "f32".
      
      (*
          fn from(small: bool) -> Self {
              small as u8 as Self
          }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.rust_cast (M.read (| small |)))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "bool" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_bool_for_f32.
    
    Module Impl_core_convert_From_bool_for_f64.
      Definition Self : Ty.t := Ty.path "f64".
      
      (*
          fn from(small: bool) -> Self {
              small as u8 as Self
          }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.rust_cast (M.rust_cast (M.read (| small |)))))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "bool" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_bool_for_f64.
    
    Module Impl_core_convert_TryFrom_u16_for_u8.
      Definition Self : Ty.t := Ty.path "u8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u16_for_u8.
    
    Module Impl_core_convert_TryFrom_u32_for_u16.
      Definition Self : Ty.t := Ty.path "u16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u32_for_u16.
    
    Module Impl_core_convert_TryFrom_u32_for_u8.
      Definition Self : Ty.t := Ty.path "u8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u32_for_u8.
    
    Module Impl_core_convert_TryFrom_u64_for_u32.
      Definition Self : Ty.t := Ty.path "u32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u64_for_u32.
    
    Module Impl_core_convert_TryFrom_u64_for_u16.
      Definition Self : Ty.t := Ty.path "u16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u64_for_u16.
    
    Module Impl_core_convert_TryFrom_u64_for_u8.
      Definition Self : Ty.t := Ty.path "u8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u64_for_u8.
    
    Module Impl_core_convert_TryFrom_u128_for_u64.
      Definition Self : Ty.t := Ty.path "u64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u128_for_u64.
    
    Module Impl_core_convert_TryFrom_u128_for_u32.
      Definition Self : Ty.t := Ty.path "u32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u128_for_u32.
    
    Module Impl_core_convert_TryFrom_u128_for_u16.
      Definition Self : Ty.t := Ty.path "u16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u128_for_u16.
    
    Module Impl_core_convert_TryFrom_u128_for_u8.
      Definition Self : Ty.t := Ty.path "u8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u128_for_u8.
    
    Module Impl_core_convert_TryFrom_i16_for_i8.
      Definition Self : Ty.t := Ty.path "i8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i16_for_i8.
    
    Module Impl_core_convert_TryFrom_i32_for_i16.
      Definition Self : Ty.t := Ty.path "i16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i32_for_i16.
    
    Module Impl_core_convert_TryFrom_i32_for_i8.
      Definition Self : Ty.t := Ty.path "i8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i32_for_i8.
    
    Module Impl_core_convert_TryFrom_i64_for_i32.
      Definition Self : Ty.t := Ty.path "i32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i64_for_i32.
    
    Module Impl_core_convert_TryFrom_i64_for_i16.
      Definition Self : Ty.t := Ty.path "i16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i64_for_i16.
    
    Module Impl_core_convert_TryFrom_i64_for_i8.
      Definition Self : Ty.t := Ty.path "i8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i64_for_i8.
    
    Module Impl_core_convert_TryFrom_i128_for_i64.
      Definition Self : Ty.t := Ty.path "i64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i128_for_i64.
    
    Module Impl_core_convert_TryFrom_i128_for_i32.
      Definition Self : Ty.t := Ty.path "i32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i128_for_i32.
    
    Module Impl_core_convert_TryFrom_i128_for_i16.
      Definition Self : Ty.t := Ty.path "i16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i128_for_i16.
    
    Module Impl_core_convert_TryFrom_i128_for_i8.
      Definition Self : Ty.t := Ty.path "i8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i128_for_i8.
    
    Module Impl_core_convert_TryFrom_u8_for_i8.
      Definition Self : Ty.t := Ty.path "i8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u8_for_i8.
    
    Module Impl_core_convert_TryFrom_u16_for_i8.
      Definition Self : Ty.t := Ty.path "i8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u16_for_i8.
    
    Module Impl_core_convert_TryFrom_u16_for_i16.
      Definition Self : Ty.t := Ty.path "i16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u16_for_i16.
    
    Module Impl_core_convert_TryFrom_u32_for_i8.
      Definition Self : Ty.t := Ty.path "i8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u32_for_i8.
    
    Module Impl_core_convert_TryFrom_u32_for_i16.
      Definition Self : Ty.t := Ty.path "i16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u32_for_i16.
    
    Module Impl_core_convert_TryFrom_u32_for_i32.
      Definition Self : Ty.t := Ty.path "i32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u32_for_i32.
    
    Module Impl_core_convert_TryFrom_u64_for_i8.
      Definition Self : Ty.t := Ty.path "i8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u64_for_i8.
    
    Module Impl_core_convert_TryFrom_u64_for_i16.
      Definition Self : Ty.t := Ty.path "i16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u64_for_i16.
    
    Module Impl_core_convert_TryFrom_u64_for_i32.
      Definition Self : Ty.t := Ty.path "i32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u64_for_i32.
    
    Module Impl_core_convert_TryFrom_u64_for_i64.
      Definition Self : Ty.t := Ty.path "i64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u64_for_i64.
    
    Module Impl_core_convert_TryFrom_u128_for_i8.
      Definition Self : Ty.t := Ty.path "i8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u128_for_i8.
    
    Module Impl_core_convert_TryFrom_u128_for_i16.
      Definition Self : Ty.t := Ty.path "i16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u128_for_i16.
    
    Module Impl_core_convert_TryFrom_u128_for_i32.
      Definition Self : Ty.t := Ty.path "i32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u128_for_i32.
    
    Module Impl_core_convert_TryFrom_u128_for_i64.
      Definition Self : Ty.t := Ty.path "i64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u128_for_i64.
    
    Module Impl_core_convert_TryFrom_u128_for_i128.
      Definition Self : Ty.t := Ty.path "i128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u128_for_i128.
    
    Module Impl_core_convert_TryFrom_i8_for_u8.
      Definition Self : Ty.t := Ty.path "u8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i8" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i8_for_u8.
    
    Module Impl_core_convert_TryFrom_i8_for_u16.
      Definition Self : Ty.t := Ty.path "u16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i8" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i8_for_u16.
    
    Module Impl_core_convert_TryFrom_i8_for_u32.
      Definition Self : Ty.t := Ty.path "u32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i8" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i8_for_u32.
    
    Module Impl_core_convert_TryFrom_i8_for_u64.
      Definition Self : Ty.t := Ty.path "u64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i8" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i8_for_u64.
    
    Module Impl_core_convert_TryFrom_i8_for_u128.
      Definition Self : Ty.t := Ty.path "u128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i8" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i8_for_u128.
    
    Module Impl_core_convert_TryFrom_i16_for_u16.
      Definition Self : Ty.t := Ty.path "u16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i16_for_u16.
    
    Module Impl_core_convert_TryFrom_i16_for_u32.
      Definition Self : Ty.t := Ty.path "u32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i16_for_u32.
    
    Module Impl_core_convert_TryFrom_i16_for_u64.
      Definition Self : Ty.t := Ty.path "u64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i16_for_u64.
    
    Module Impl_core_convert_TryFrom_i16_for_u128.
      Definition Self : Ty.t := Ty.path "u128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i16_for_u128.
    
    Module Impl_core_convert_TryFrom_i32_for_u32.
      Definition Self : Ty.t := Ty.path "u32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i32_for_u32.
    
    Module Impl_core_convert_TryFrom_i32_for_u64.
      Definition Self : Ty.t := Ty.path "u64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i32_for_u64.
    
    Module Impl_core_convert_TryFrom_i32_for_u128.
      Definition Self : Ty.t := Ty.path "u128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i32_for_u128.
    
    Module Impl_core_convert_TryFrom_i64_for_u64.
      Definition Self : Ty.t := Ty.path "u64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i64_for_u64.
    
    Module Impl_core_convert_TryFrom_i64_for_u128.
      Definition Self : Ty.t := Ty.path "u128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i64_for_u128.
    
    Module Impl_core_convert_TryFrom_i128_for_u128.
      Definition Self : Ty.t := Ty.path "u128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i128_for_u128.
    
    Module Impl_core_convert_TryFrom_i16_for_u8.
      Definition Self : Ty.t := Ty.path "u8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i16_for_u8.
    
    Module Impl_core_convert_TryFrom_i32_for_u16.
      Definition Self : Ty.t := Ty.path "u16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i32_for_u16.
    
    Module Impl_core_convert_TryFrom_i32_for_u8.
      Definition Self : Ty.t := Ty.path "u8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i32_for_u8.
    
    Module Impl_core_convert_TryFrom_i64_for_u32.
      Definition Self : Ty.t := Ty.path "u32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i64_for_u32.
    
    Module Impl_core_convert_TryFrom_i64_for_u16.
      Definition Self : Ty.t := Ty.path "u16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i64_for_u16.
    
    Module Impl_core_convert_TryFrom_i64_for_u8.
      Definition Self : Ty.t := Ty.path "u8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i64_for_u8.
    
    Module Impl_core_convert_TryFrom_i128_for_u64.
      Definition Self : Ty.t := Ty.path "u64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i128_for_u64.
    
    Module Impl_core_convert_TryFrom_i128_for_u32.
      Definition Self : Ty.t := Ty.path "u32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i128_for_u32.
    
    Module Impl_core_convert_TryFrom_i128_for_u16.
      Definition Self : Ty.t := Ty.path "u16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i128_for_u16.
    
    Module Impl_core_convert_TryFrom_i128_for_u8.
      Definition Self : Ty.t := Ty.path "u8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      let min = Self::MIN as $source;
                      let max = Self::MAX as $source;
                      if u < min || u > max {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              let~ min :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
              let~ max :=
                M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            LogicalOp.or (|
                              BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                              ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i128_for_u8.
    
    Module Impl_core_convert_TryFrom_usize_for_isize.
      Definition Self : Ty.t := Ty.path "isize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u > (Self::MAX as $source) {
                          Err(TryFromIntError(()))
                      } else {
                          Ok(u as Self)
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.gt
                              (M.read (| u |))
                              (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "usize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_usize_for_isize.
    
    Module Impl_core_convert_TryFrom_isize_for_usize.
      Definition Self : Ty.t := Ty.path "usize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(u: $source) -> Result<Self, Self::Error> {
                      if u >= 0 {
                          Ok(u as Self)
                      } else {
                          Err(TryFromIntError(()))
                      }
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ u ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [ M.rust_cast (M.read (| u |)) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [ Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "isize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_isize_for_usize.
    
    Module ptr_try_from_impls.
      Module Impl_core_convert_TryFrom_usize_for_u8.
        Definition Self : Ty.t := Ty.path "u8".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u > (Self::MAX as $source) {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.Pure.gt
                                (M.read (| u |))
                                (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "usize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_usize_for_u8.
      
      Module Impl_core_convert_TryFrom_usize_for_u16.
        Definition Self : Ty.t := Ty.path "u16".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u > (Self::MAX as $source) {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.Pure.gt
                                (M.read (| u |))
                                (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "usize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_usize_for_u16.
      
      Module Impl_core_convert_TryFrom_usize_for_u32.
        Definition Self : Ty.t := Ty.path "u32".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u > (Self::MAX as $source) {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.Pure.gt
                                (M.read (| u |))
                                (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "usize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_usize_for_u32.
      
      Module Impl_core_convert_TryFrom_usize_for_u64.
        Definition Self : Ty.t := Ty.path "u64".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(value: $source) -> Result<Self, Self::Error> {
                        Ok(value as Self)
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ value ] =>
            ltac:(M.monadic
              (let value := M.alloc (| value |) in
              Value.StructTuple "core::result::Result::Ok" [ M.rust_cast (M.read (| value |)) ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "usize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_usize_for_u64.
      
      Module Impl_core_convert_TryFrom_usize_for_u128.
        Definition Self : Ty.t := Ty.path "u128".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(value: $source) -> Result<Self, Self::Error> {
                        Ok(value as Self)
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ value ] =>
            ltac:(M.monadic
              (let value := M.alloc (| value |) in
              Value.StructTuple "core::result::Result::Ok" [ M.rust_cast (M.read (| value |)) ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "usize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_usize_for_u128.
      
      Module Impl_core_convert_TryFrom_usize_for_i8.
        Definition Self : Ty.t := Ty.path "i8".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u > (Self::MAX as $source) {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.Pure.gt
                                (M.read (| u |))
                                (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "usize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_usize_for_i8.
      
      Module Impl_core_convert_TryFrom_usize_for_i16.
        Definition Self : Ty.t := Ty.path "i16".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u > (Self::MAX as $source) {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.Pure.gt
                                (M.read (| u |))
                                (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "usize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_usize_for_i16.
      
      Module Impl_core_convert_TryFrom_usize_for_i32.
        Definition Self : Ty.t := Ty.path "i32".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u > (Self::MAX as $source) {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.Pure.gt
                                (M.read (| u |))
                                (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "usize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_usize_for_i32.
      
      Module Impl_core_convert_TryFrom_usize_for_i64.
        Definition Self : Ty.t := Ty.path "i64".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u > (Self::MAX as $source) {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.Pure.gt
                                (M.read (| u |))
                                (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "usize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_usize_for_i64.
      
      Module Impl_core_convert_TryFrom_usize_for_i128.
        Definition Self : Ty.t := Ty.path "i128".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(value: $source) -> Result<Self, Self::Error> {
                        Ok(value as Self)
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ value ] =>
            ltac:(M.monadic
              (let value := M.alloc (| value |) in
              Value.StructTuple "core::result::Result::Ok" [ M.rust_cast (M.read (| value |)) ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "usize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_usize_for_i128.
      
      Module Impl_core_convert_TryFrom_isize_for_u8.
        Definition Self : Ty.t := Ty.path "u8".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        let min = Self::MIN as $source;
                        let max = Self::MAX as $source;
                        if u < min || u > max {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                let~ min :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
                let~ max :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                                ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "isize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_isize_for_u8.
      
      Module Impl_core_convert_TryFrom_isize_for_u16.
        Definition Self : Ty.t := Ty.path "u16".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        let min = Self::MIN as $source;
                        let max = Self::MAX as $source;
                        if u < min || u > max {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                let~ min :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
                let~ max :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                                ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "isize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_isize_for_u16.
      
      Module Impl_core_convert_TryFrom_isize_for_u32.
        Definition Self : Ty.t := Ty.path "u32".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        let min = Self::MIN as $source;
                        let max = Self::MAX as $source;
                        if u < min || u > max {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                let~ min :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
                let~ max :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                                ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "isize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_isize_for_u32.
      
      Module Impl_core_convert_TryFrom_isize_for_u64.
        Definition Self : Ty.t := Ty.path "u64".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u >= 0 {
                            Ok(u as Self)
                        } else {
                            Err(TryFromIntError(()))
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "isize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_isize_for_u64.
      
      Module Impl_core_convert_TryFrom_isize_for_u128.
        Definition Self : Ty.t := Ty.path "u128".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u >= 0 {
                            Ok(u as Self)
                        } else {
                            Err(TryFromIntError(()))
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "isize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_isize_for_u128.
      
      Module Impl_core_convert_TryFrom_isize_for_i8.
        Definition Self : Ty.t := Ty.path "i8".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        let min = Self::MIN as $source;
                        let max = Self::MAX as $source;
                        if u < min || u > max {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                let~ min :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
                let~ max :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                                ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "isize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_isize_for_i8.
      
      Module Impl_core_convert_TryFrom_isize_for_i16.
        Definition Self : Ty.t := Ty.path "i16".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        let min = Self::MIN as $source;
                        let max = Self::MAX as $source;
                        if u < min || u > max {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                let~ min :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
                let~ max :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                                ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "isize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_isize_for_i16.
      
      Module Impl_core_convert_TryFrom_isize_for_i32.
        Definition Self : Ty.t := Ty.path "i32".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        let min = Self::MIN as $source;
                        let max = Self::MAX as $source;
                        if u < min || u > max {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                let~ min :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
                let~ max :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                                ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "isize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_isize_for_i32.
      
      Module Impl_core_convert_TryFrom_isize_for_i64.
        Definition Self : Ty.t := Ty.path "i64".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(value: $source) -> Result<Self, Self::Error> {
                        Ok(value as Self)
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ value ] =>
            ltac:(M.monadic
              (let value := M.alloc (| value |) in
              Value.StructTuple "core::result::Result::Ok" [ M.rust_cast (M.read (| value |)) ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "isize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_isize_for_i64.
      
      Module Impl_core_convert_TryFrom_isize_for_i128.
        Definition Self : Ty.t := Ty.path "i128".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(value: $source) -> Result<Self, Self::Error> {
                        Ok(value as Self)
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ value ] =>
            ltac:(M.monadic
              (let value := M.alloc (| value |) in
              Value.StructTuple "core::result::Result::Ok" [ M.rust_cast (M.read (| value |)) ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "isize" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_isize_for_i128.
      
      Module Impl_core_convert_TryFrom_u32_for_usize.
        Definition Self : Ty.t := Ty.path "usize".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(value: $source) -> Result<Self, Self::Error> {
                        Ok(value as Self)
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ value ] =>
            ltac:(M.monadic
              (let value := M.alloc (| value |) in
              Value.StructTuple "core::result::Result::Ok" [ M.rust_cast (M.read (| value |)) ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "u32" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_u32_for_usize.
      
      Module Impl_core_convert_TryFrom_u64_for_usize.
        Definition Self : Ty.t := Ty.path "usize".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(value: $source) -> Result<Self, Self::Error> {
                        Ok(value as Self)
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ value ] =>
            ltac:(M.monadic
              (let value := M.alloc (| value |) in
              Value.StructTuple "core::result::Result::Ok" [ M.rust_cast (M.read (| value |)) ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "u64" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_u64_for_usize.
      
      Module Impl_core_convert_TryFrom_u128_for_usize.
        Definition Self : Ty.t := Ty.path "usize".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u > (Self::MAX as $source) {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.Pure.gt
                                (M.read (| u |))
                                (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "u128" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_u128_for_usize.
      
      Module Impl_core_convert_TryFrom_i8_for_usize.
        Definition Self : Ty.t := Ty.path "usize".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u >= 0 {
                            Ok(u as Self)
                        } else {
                            Err(TryFromIntError(()))
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "i8" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_i8_for_usize.
      
      Module Impl_core_convert_TryFrom_i16_for_usize.
        Definition Self : Ty.t := Ty.path "usize".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u >= 0 {
                            Ok(u as Self)
                        } else {
                            Err(TryFromIntError(()))
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "i16" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_i16_for_usize.
      
      Module Impl_core_convert_TryFrom_i32_for_usize.
        Definition Self : Ty.t := Ty.path "usize".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u >= 0 {
                            Ok(u as Self)
                        } else {
                            Err(TryFromIntError(()))
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "i32" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_i32_for_usize.
      
      Module Impl_core_convert_TryFrom_i64_for_usize.
        Definition Self : Ty.t := Ty.path "usize".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u >= 0 {
                            Ok(u as Self)
                        } else {
                            Err(TryFromIntError(()))
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use (M.alloc (| BinOp.Pure.ge (M.read (| u |)) (Value.Integer 0) |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "i64" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_i64_for_usize.
      
      Module Impl_core_convert_TryFrom_i128_for_usize.
        Definition Self : Ty.t := Ty.path "usize".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        let min = Self::MIN as $source;
                        let max = Self::MAX as $source;
                        if u < min || u > max {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                let~ min :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
                let~ max :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                                ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "i128" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_i128_for_usize.
      
      Module Impl_core_convert_TryFrom_u16_for_isize.
        Definition Self : Ty.t := Ty.path "isize".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(value: $source) -> Result<Self, Self::Error> {
                        Ok(value as Self)
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ value ] =>
            ltac:(M.monadic
              (let value := M.alloc (| value |) in
              Value.StructTuple "core::result::Result::Ok" [ M.rust_cast (M.read (| value |)) ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "u16" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_u16_for_isize.
      
      Module Impl_core_convert_TryFrom_u32_for_isize.
        Definition Self : Ty.t := Ty.path "isize".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(value: $source) -> Result<Self, Self::Error> {
                        Ok(value as Self)
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ value ] =>
            ltac:(M.monadic
              (let value := M.alloc (| value |) in
              Value.StructTuple "core::result::Result::Ok" [ M.rust_cast (M.read (| value |)) ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "u32" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_u32_for_isize.
      
      Module Impl_core_convert_TryFrom_u64_for_isize.
        Definition Self : Ty.t := Ty.path "isize".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u > (Self::MAX as $source) {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.Pure.gt
                                (M.read (| u |))
                                (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "u64" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_u64_for_isize.
      
      Module Impl_core_convert_TryFrom_u128_for_isize.
        Definition Self : Ty.t := Ty.path "isize".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        if u > (Self::MAX as $source) {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.Pure.gt
                                (M.read (| u |))
                                (M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "u128" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_u128_for_isize.
      
      Module Impl_core_convert_TryFrom_i32_for_isize.
        Definition Self : Ty.t := Ty.path "isize".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(value: $source) -> Result<Self, Self::Error> {
                        Ok(value as Self)
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ value ] =>
            ltac:(M.monadic
              (let value := M.alloc (| value |) in
              Value.StructTuple "core::result::Result::Ok" [ M.rust_cast (M.read (| value |)) ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "i32" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_i32_for_isize.
      
      Module Impl_core_convert_TryFrom_i64_for_isize.
        Definition Self : Ty.t := Ty.path "isize".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(value: $source) -> Result<Self, Self::Error> {
                        Ok(value as Self)
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ value ] =>
            ltac:(M.monadic
              (let value := M.alloc (| value |) in
              Value.StructTuple "core::result::Result::Ok" [ M.rust_cast (M.read (| value |)) ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "i64" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_i64_for_isize.
      
      Module Impl_core_convert_TryFrom_i128_for_isize.
        Definition Self : Ty.t := Ty.path "isize".
        
        (*             type Error = TryFromIntError; *)
        Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
        
        (*
                    fn try_from(u: $source) -> Result<Self, Self::Error> {
                        let min = Self::MIN as $source;
                        let max = Self::MAX as $source;
                        if u < min || u > max {
                            Err(TryFromIntError(()))
                        } else {
                            Ok(u as Self)
                        }
                    }
        *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ u ] =>
            ltac:(M.monadic
              (let u := M.alloc (| u |) in
              M.read (|
                let~ min :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MIN" |) |)) |) in
                let~ max :=
                  M.alloc (| M.rust_cast (M.read (| M.get_constant (| "core::num::MAX" |) |)) |) in
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                BinOp.Pure.lt (M.read (| u |)) (M.read (| min |)),
                                ltac:(M.monadic (BinOp.Pure.gt (M.read (| u |)) (M.read (| max |))))
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "core::num::error::TryFromIntError"
                                [ Value.Tuple [] ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ M.rust_cast (M.read (| u |)) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "i128" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_i128_for_isize.
    End ptr_try_from_impls.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroU16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU16".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroU16",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "u16",
                    [ Ty.path "u8" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU8",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroU16.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroU32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU32".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroU32",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "u32",
                    [ Ty.path "u8" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU8",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroU32.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroU64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU64".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroU64",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "u64",
                    [ Ty.path "u8" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU8",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroU64.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroU128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU128".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroU128",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "u128",
                    [ Ty.path "u8" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU8",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroU128.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroUsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroUsize".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroUsize",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "usize",
                    [ Ty.path "u8" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU8",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroUsize.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroU32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU32".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroU32",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "u32",
                    [ Ty.path "u16" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU16",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroU32.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroU64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU64".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroU64",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "u64",
                    [ Ty.path "u16" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU16",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroU64.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroU128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU128".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroU128",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "u128",
                    [ Ty.path "u16" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU16",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroU128.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroUsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroUsize".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroUsize",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "usize",
                    [ Ty.path "u16" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU16",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroUsize.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroU64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU64".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroU64",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "u64",
                    [ Ty.path "u32" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU32",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU32" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroU64.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroU128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU128".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroU128",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "u128",
                    [ Ty.path "u32" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU32",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU32" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroU128.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroU128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU128".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroU128",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "u128",
                    [ Ty.path "u64" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU64",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU64" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroU128.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroI16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI16".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI16",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i16",
                    [ Ty.path "i8" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI8",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroI16.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroI32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI32".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI32",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i32",
                    [ Ty.path "i8" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI8",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroI32.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroI64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI64".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI64",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i64",
                    [ Ty.path "i8" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI8",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroI64.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroI128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI128".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI128",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i128",
                    [ Ty.path "i8" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI8",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroI128.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroIsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroIsize".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroIsize",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "isize",
                    [ Ty.path "i8" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI8",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroIsize.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroI32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI32".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI32",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i32",
                    [ Ty.path "i16" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI16",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroI32.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroI64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI64".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI64",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i64",
                    [ Ty.path "i16" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI16",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroI64.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroI128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI128".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI128",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i128",
                    [ Ty.path "i16" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI16",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroI128.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroIsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroIsize".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroIsize",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "isize",
                    [ Ty.path "i16" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI16",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroIsize.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroI64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI64".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI64",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i64",
                    [ Ty.path "i32" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI32",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI32" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroI64.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroI128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI128".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI128",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i128",
                    [ Ty.path "i32" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI32",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI32" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroI128.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroI128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI128".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI128",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i128",
                    [ Ty.path "i64" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI64",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI64" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroI128.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroI16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI16".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI16",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i16",
                    [ Ty.path "u8" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU8",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroI16.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroI32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI32".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI32",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i32",
                    [ Ty.path "u8" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU8",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroI32.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroI64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI64".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI64",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i64",
                    [ Ty.path "u8" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU8",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroI64.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroI128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI128".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI128",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i128",
                    [ Ty.path "u8" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU8",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroI128.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroIsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroIsize".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroIsize",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "isize",
                    [ Ty.path "u8" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU8",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU8" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroIsize.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroI32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI32".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI32",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i32",
                    [ Ty.path "u16" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU16",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroI32.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroI64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI64".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI64",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i64",
                    [ Ty.path "u16" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU16",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroI64.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroI128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI128".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI128",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i128",
                    [ Ty.path "u16" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU16",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU16" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroI128.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroI64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI64".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI64",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i64",
                    [ Ty.path "u32" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU32",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU32" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroI64.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroI128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI128".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI128",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i128",
                    [ Ty.path "u32" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU32",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU32" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroI128.
    
    Module Impl_core_convert_From_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroI128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI128".
      
      (*
                  fn from(small: $Small) -> Self {
                      // SAFETY: input type guarantees the value is non-zero
                      unsafe {
                          Self::new_unchecked(From::from(small.get()))
                      }
                  }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ small ] =>
          ltac:(M.monadic
            (let small := M.alloc (| small |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::num::nonzero::NonZeroI128",
                "new_unchecked",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "i128",
                    [ Ty.path "u64" ],
                    "from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU64",
                        "get",
                        []
                      |),
                      [ M.read (| small |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU64" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroI128.
    
    Module Impl_core_convert_TryFrom_u8_for_core_num_nonzero_NonZeroU8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $Int) -> Result<Self, Self::Error> {
                      Self::new(value).ok_or(TryFromIntError(()))
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.path "core::num::nonzero::NonZeroU8" ],
                "ok_or",
                [ Ty.path "core::num::error::TryFromIntError" ]
              |),
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::num::nonzero::NonZeroU8",
                    "new",
                    []
                  |),
                  [ M.read (| value |) ]
                |);
                Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u8_for_core_num_nonzero_NonZeroU8.
    
    Module Impl_core_convert_TryFrom_u16_for_core_num_nonzero_NonZeroU16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $Int) -> Result<Self, Self::Error> {
                      Self::new(value).ok_or(TryFromIntError(()))
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.path "core::num::nonzero::NonZeroU16" ],
                "ok_or",
                [ Ty.path "core::num::error::TryFromIntError" ]
              |),
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::num::nonzero::NonZeroU16",
                    "new",
                    []
                  |),
                  [ M.read (| value |) ]
                |);
                Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u16_for_core_num_nonzero_NonZeroU16.
    
    Module Impl_core_convert_TryFrom_u32_for_core_num_nonzero_NonZeroU32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $Int) -> Result<Self, Self::Error> {
                      Self::new(value).ok_or(TryFromIntError(()))
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.path "core::num::nonzero::NonZeroU32" ],
                "ok_or",
                [ Ty.path "core::num::error::TryFromIntError" ]
              |),
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::num::nonzero::NonZeroU32",
                    "new",
                    []
                  |),
                  [ M.read (| value |) ]
                |);
                Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u32_for_core_num_nonzero_NonZeroU32.
    
    Module Impl_core_convert_TryFrom_u64_for_core_num_nonzero_NonZeroU64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $Int) -> Result<Self, Self::Error> {
                      Self::new(value).ok_or(TryFromIntError(()))
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.path "core::num::nonzero::NonZeroU64" ],
                "ok_or",
                [ Ty.path "core::num::error::TryFromIntError" ]
              |),
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::num::nonzero::NonZeroU64",
                    "new",
                    []
                  |),
                  [ M.read (| value |) ]
                |);
                Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u64_for_core_num_nonzero_NonZeroU64.
    
    Module Impl_core_convert_TryFrom_u128_for_core_num_nonzero_NonZeroU128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $Int) -> Result<Self, Self::Error> {
                      Self::new(value).ok_or(TryFromIntError(()))
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.path "core::num::nonzero::NonZeroU128" ],
                "ok_or",
                [ Ty.path "core::num::error::TryFromIntError" ]
              |),
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::num::nonzero::NonZeroU128",
                    "new",
                    []
                  |),
                  [ M.read (| value |) ]
                |);
                Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "u128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_u128_for_core_num_nonzero_NonZeroU128.
    
    Module Impl_core_convert_TryFrom_usize_for_core_num_nonzero_NonZeroUsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroUsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $Int) -> Result<Self, Self::Error> {
                      Self::new(value).ok_or(TryFromIntError(()))
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.path "core::num::nonzero::NonZeroUsize" ],
                "ok_or",
                [ Ty.path "core::num::error::TryFromIntError" ]
              |),
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::num::nonzero::NonZeroUsize",
                    "new",
                    []
                  |),
                  [ M.read (| value |) ]
                |);
                Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "usize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_usize_for_core_num_nonzero_NonZeroUsize.
    
    Module Impl_core_convert_TryFrom_i8_for_core_num_nonzero_NonZeroI8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $Int) -> Result<Self, Self::Error> {
                      Self::new(value).ok_or(TryFromIntError(()))
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.path "core::num::nonzero::NonZeroI8" ],
                "ok_or",
                [ Ty.path "core::num::error::TryFromIntError" ]
              |),
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::num::nonzero::NonZeroI8",
                    "new",
                    []
                  |),
                  [ M.read (| value |) ]
                |);
                Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i8" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i8_for_core_num_nonzero_NonZeroI8.
    
    Module Impl_core_convert_TryFrom_i16_for_core_num_nonzero_NonZeroI16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $Int) -> Result<Self, Self::Error> {
                      Self::new(value).ok_or(TryFromIntError(()))
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.path "core::num::nonzero::NonZeroI16" ],
                "ok_or",
                [ Ty.path "core::num::error::TryFromIntError" ]
              |),
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::num::nonzero::NonZeroI16",
                    "new",
                    []
                  |),
                  [ M.read (| value |) ]
                |);
                Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i16_for_core_num_nonzero_NonZeroI16.
    
    Module Impl_core_convert_TryFrom_i32_for_core_num_nonzero_NonZeroI32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $Int) -> Result<Self, Self::Error> {
                      Self::new(value).ok_or(TryFromIntError(()))
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.path "core::num::nonzero::NonZeroI32" ],
                "ok_or",
                [ Ty.path "core::num::error::TryFromIntError" ]
              |),
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::num::nonzero::NonZeroI32",
                    "new",
                    []
                  |),
                  [ M.read (| value |) ]
                |);
                Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i32_for_core_num_nonzero_NonZeroI32.
    
    Module Impl_core_convert_TryFrom_i64_for_core_num_nonzero_NonZeroI64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $Int) -> Result<Self, Self::Error> {
                      Self::new(value).ok_or(TryFromIntError(()))
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.path "core::num::nonzero::NonZeroI64" ],
                "ok_or",
                [ Ty.path "core::num::error::TryFromIntError" ]
              |),
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::num::nonzero::NonZeroI64",
                    "new",
                    []
                  |),
                  [ M.read (| value |) ]
                |);
                Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i64_for_core_num_nonzero_NonZeroI64.
    
    Module Impl_core_convert_TryFrom_i128_for_core_num_nonzero_NonZeroI128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $Int) -> Result<Self, Self::Error> {
                      Self::new(value).ok_or(TryFromIntError(()))
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.path "core::num::nonzero::NonZeroI128" ],
                "ok_or",
                [ Ty.path "core::num::error::TryFromIntError" ]
              |),
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::num::nonzero::NonZeroI128",
                    "new",
                    []
                  |),
                  [ M.read (| value |) ]
                |);
                Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "i128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_i128_for_core_num_nonzero_NonZeroI128.
    
    Module Impl_core_convert_TryFrom_isize_for_core_num_nonzero_NonZeroIsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroIsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $Int) -> Result<Self, Self::Error> {
                      Self::new(value).ok_or(TryFromIntError(()))
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.path "core::num::nonzero::NonZeroIsize" ],
                "ok_or",
                [ Ty.path "core::num::error::TryFromIntError" ]
              |),
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::num::nonzero::NonZeroIsize",
                    "new",
                    []
                  |),
                  [ M.read (| value |) ]
                |);
                Value.StructTuple "core::num::error::TryFromIntError" [ Value.Tuple [] ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "isize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_isize_for_core_num_nonzero_NonZeroIsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroU8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u8",
                    [ Ty.path "i8" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI8",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI8" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroU8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroU8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u8",
                    [ Ty.path "u16" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU16",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroU8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroU8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u8",
                    [ Ty.path "i16" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI16",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroU8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroU8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u8",
                    [ Ty.path "u32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroU8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroU8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u8",
                    [ Ty.path "i32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroU8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroU8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u8",
                    [ Ty.path "u64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroU8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroU8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u8",
                    [ Ty.path "i64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroU8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroU8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u8",
                    [ Ty.path "u128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroU8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroU8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u8",
                    [ Ty.path "i128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroU8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroU8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u8",
                    [ Ty.path "usize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroUsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroUsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroU8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroU8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u8",
                    [ Ty.path "isize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroIsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroIsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroU8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroU16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u16",
                    [ Ty.path "i8" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI8",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI8" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroU16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroU16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u16",
                    [ Ty.path "i16" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI16",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroU16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroU16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u16",
                    [ Ty.path "u32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroU16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroU16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u16",
                    [ Ty.path "i32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroU16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroU16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u16",
                    [ Ty.path "u64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroU16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroU16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u16",
                    [ Ty.path "i64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroU16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroU16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u16",
                    [ Ty.path "u128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroU16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroU16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u16",
                    [ Ty.path "i128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroU16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroU16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u16",
                    [ Ty.path "usize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroUsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroUsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroU16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroU16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u16",
                    [ Ty.path "isize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroIsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroIsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroU16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroU32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u32",
                    [ Ty.path "i8" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI8",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI8" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroU32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroU32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u32",
                    [ Ty.path "i16" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI16",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroU32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroU32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u32",
                    [ Ty.path "i32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroU32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroU32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u32",
                    [ Ty.path "u64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroU32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroU32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u32",
                    [ Ty.path "i64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroU32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroU32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u32",
                    [ Ty.path "u128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroU32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroU32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u32",
                    [ Ty.path "i128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroU32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroU32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u32",
                    [ Ty.path "usize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroUsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroUsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroU32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroU32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u32",
                    [ Ty.path "isize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroIsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroIsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroU32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroU64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u64"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU64";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u64" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU64")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u64",
                    [ Ty.path "i8" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI8",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU64",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI8" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroU64.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroU64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u64"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU64";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u64" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU64")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u64",
                    [ Ty.path "i16" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI16",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU64",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroU64.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroU64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u64"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU64";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u64" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU64")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u64",
                    [ Ty.path "i32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU64",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroU64.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroU64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u64"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU64";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u64" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU64")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u64",
                    [ Ty.path "i64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU64",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroU64.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroU64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u64"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU64";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u64" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU64")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u64",
                    [ Ty.path "u128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU64",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroU64.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroU64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u64"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU64";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u64" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU64")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u64",
                    [ Ty.path "i128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU64",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroU64.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroU64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u64"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU64";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u64" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU64")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u64",
                    [ Ty.path "usize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroUsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU64",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroUsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroU64.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroU64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u64"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU64";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u64" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU64")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u64",
                    [ Ty.path "isize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroIsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU64",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroIsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroU64.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroU128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u128"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU128";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u128" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU128")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u128",
                    [ Ty.path "i8" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI8",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU128",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI8" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroU128.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroU128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u128"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU128";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u128" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU128")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u128",
                    [ Ty.path "i16" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI16",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU128",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroU128.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroU128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u128"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU128";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u128" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU128")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u128",
                    [ Ty.path "i32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU128",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroU128.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroU128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u128"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU128";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u128" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU128")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u128",
                    [ Ty.path "i64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU128",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroU128.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroU128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u128"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU128";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u128" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU128")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u128",
                    [ Ty.path "i128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU128",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroU128.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroU128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u128"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU128";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u128" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU128")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u128",
                    [ Ty.path "usize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroUsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU128",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroUsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroU128.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroU128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroU128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "u128"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroU128";
                  Ty.function
                    [ Ty.tuple [ Ty.path "u128" ] ]
                    (Ty.path "core::num::nonzero::NonZeroU128")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "u128",
                    [ Ty.path "isize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroIsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroU128",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroIsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroU128.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroUsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroUsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroUsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "usize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroUsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "usize",
                    [ Ty.path "i8" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI8",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroUsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI8" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI8_for_core_num_nonzero_NonZeroUsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroUsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroUsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroUsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "usize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroUsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "usize",
                    [ Ty.path "i16" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI16",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroUsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroUsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroUsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroUsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroUsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "usize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroUsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "usize",
                    [ Ty.path "u32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroUsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroUsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroUsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroUsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroUsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "usize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroUsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "usize",
                    [ Ty.path "i32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroUsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroUsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroUsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroUsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroUsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "usize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroUsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "usize",
                    [ Ty.path "u64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroUsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroUsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroUsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroUsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroUsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "usize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroUsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "usize",
                    [ Ty.path "i64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroUsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroUsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroUsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroUsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroUsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "usize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroUsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "usize",
                    [ Ty.path "u128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroUsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroUsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroUsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroUsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroUsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "usize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroUsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "usize",
                    [ Ty.path "i128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroUsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroUsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroUsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroUsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "usize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroUsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "usize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroUsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "usize",
                    [ Ty.path "isize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroIsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroUsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroIsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroUsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroI8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i8",
                    [ Ty.path "u8" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU8",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU8" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU8_for_core_num_nonzero_NonZeroI8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroI8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i8",
                    [ Ty.path "u16" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU16",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroI8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroI8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i8",
                    [ Ty.path "i16" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI16",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI16_for_core_num_nonzero_NonZeroI8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroI8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i8",
                    [ Ty.path "u32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroI8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroI8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i8",
                    [ Ty.path "i32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroI8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroI8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i8",
                    [ Ty.path "u64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroI8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroI8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i8",
                    [ Ty.path "i64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroI8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroI8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i8",
                    [ Ty.path "u128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroI8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroI8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i8",
                    [ Ty.path "i128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroI8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroI8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i8",
                    [ Ty.path "usize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroUsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroUsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroI8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroI8.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI8".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i8"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI8";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i8" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI8")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i8",
                    [ Ty.path "isize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroIsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI8",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroIsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroI8.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroI16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i16",
                    [ Ty.path "u16" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU16",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroI16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroI16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i16",
                    [ Ty.path "u32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroI16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroI16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i16",
                    [ Ty.path "i32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroI16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroI16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i16",
                    [ Ty.path "u64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroI16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroI16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i16",
                    [ Ty.path "i64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroI16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroI16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i16",
                    [ Ty.path "u128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroI16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroI16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i16",
                    [ Ty.path "i128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroI16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroI16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i16",
                    [ Ty.path "usize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroUsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroUsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroI16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroI16.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI16".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i16"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI16";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i16" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI16")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i16",
                    [ Ty.path "isize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroIsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI16",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroIsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroI16.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroI32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i32",
                    [ Ty.path "u32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroI32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroI32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i32",
                    [ Ty.path "u64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroI32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroI32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i32",
                    [ Ty.path "i64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroI32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroI32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i32",
                    [ Ty.path "u128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroI32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroI32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i32",
                    [ Ty.path "i128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroI32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroI32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i32",
                    [ Ty.path "usize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroUsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroUsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroI32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroI32.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI32".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i32"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI32";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i32" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI32")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i32",
                    [ Ty.path "isize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroIsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI32",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroIsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroI32.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroI64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i64"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI64";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i64" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI64")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i64",
                    [ Ty.path "u64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI64",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroI64.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroI64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i64"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI64";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i64" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI64")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i64",
                    [ Ty.path "u128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI64",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroI64.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroI64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i64"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI64";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i64" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI64")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i64",
                    [ Ty.path "i128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI64",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroI64.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroI64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i64"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI64";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i64" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI64")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i64",
                    [ Ty.path "usize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroUsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI64",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroUsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroI64.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroI64.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI64".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i64"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI64";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i64" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI64")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i64",
                    [ Ty.path "isize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroIsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI64",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroIsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroI64.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroI128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i128"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI128";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i128" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI128")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i128",
                    [ Ty.path "u128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI128",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroI128.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroI128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i128"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI128";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i128" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI128")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i128",
                    [ Ty.path "usize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroUsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI128",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroUsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroI128.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroI128.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroI128".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "i128"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroI128";
                  Ty.function
                    [ Ty.tuple [ Ty.path "i128" ] ]
                    (Ty.path "core::num::nonzero::NonZeroI128")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "i128",
                    [ Ty.path "isize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroIsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroI128",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroIsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroIsize_for_core_num_nonzero_NonZeroI128.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroIsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroIsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "isize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroIsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "isize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroIsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "isize",
                    [ Ty.path "u16" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU16",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroIsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU16" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU16_for_core_num_nonzero_NonZeroIsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroIsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroIsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "isize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroIsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "isize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroIsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "isize",
                    [ Ty.path "u32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroIsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU32_for_core_num_nonzero_NonZeroIsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroIsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroIsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "isize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroIsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "isize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroIsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "isize",
                    [ Ty.path "i32" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI32",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroIsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI32" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI32_for_core_num_nonzero_NonZeroIsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroIsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroIsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "isize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroIsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "isize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroIsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "isize",
                    [ Ty.path "u64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroIsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU64_for_core_num_nonzero_NonZeroIsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroIsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroIsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "isize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroIsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "isize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroIsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "isize",
                    [ Ty.path "i64" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI64",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroIsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI64" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI64_for_core_num_nonzero_NonZeroIsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroIsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroIsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "isize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroIsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "isize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroIsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "isize",
                    [ Ty.path "u128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroU128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroIsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroU128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroU128_for_core_num_nonzero_NonZeroIsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroIsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroIsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "isize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroIsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "isize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroIsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "isize",
                    [ Ty.path "i128" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroI128",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroIsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroI128" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroI128_for_core_num_nonzero_NonZeroIsize.
    
    Module Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroIsize.
      Definition Self : Ty.t := Ty.path "core::num::nonzero::NonZeroIsize".
      
      (*             type Error = TryFromIntError; *)
      Definition _Error : Ty.t := Ty.path "core::num::error::TryFromIntError".
      
      (*
                  fn try_from(value: $From) -> Result<Self, Self::Error> {
                      TryFrom::try_from(value.get()).map(|v| {
                          // SAFETY: $From is a NonZero type, so v is not zero.
                          unsafe { Self::new_unchecked(v) }
                      })
                  }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  [ Ty.path "isize"; Ty.path "core::num::error::TryFromIntError" ],
                "map",
                [
                  Ty.path "core::num::nonzero::NonZeroIsize";
                  Ty.function
                    [ Ty.tuple [ Ty.path "isize" ] ]
                    (Ty.path "core::num::nonzero::NonZeroIsize")
                ]
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::TryFrom",
                    Ty.path "isize",
                    [ Ty.path "usize" ],
                    "try_from",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::num::nonzero::NonZeroUsize",
                        "get",
                        []
                      |),
                      [ M.read (| value |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let v := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::num::nonzero::NonZeroIsize",
                                    "new_unchecked",
                                    []
                                  |),
                                  [ M.read (| v |) ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::nonzero::NonZeroUsize" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_core_num_nonzero_NonZeroUsize_for_core_num_nonzero_NonZeroIsize.
  End num.
End convert.
