(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module ffi.
  Axiom c_char : (Ty.path "core::ffi::c_char") = (Ty.path "i8").
  
  Axiom NonZero_c_char :
    (Ty.path "core::ffi::NonZero_c_char") = (Ty.path "core::num::nonzero::NonZeroI8").
  
  Axiom c_schar : (Ty.path "core::ffi::c_schar") = (Ty.path "i8").
  
  Axiom NonZero_c_schar :
    (Ty.path "core::ffi::NonZero_c_schar") = (Ty.path "core::num::nonzero::NonZeroI8").
  
  Axiom c_uchar : (Ty.path "core::ffi::c_uchar") = (Ty.path "u8").
  
  Axiom NonZero_c_uchar :
    (Ty.path "core::ffi::NonZero_c_uchar") = (Ty.path "core::num::nonzero::NonZeroU8").
  
  Axiom c_short : (Ty.path "core::ffi::c_short") = (Ty.path "i16").
  
  Axiom NonZero_c_short :
    (Ty.path "core::ffi::NonZero_c_short") = (Ty.path "core::num::nonzero::NonZeroI16").
  
  Axiom c_ushort : (Ty.path "core::ffi::c_ushort") = (Ty.path "u16").
  
  Axiom NonZero_c_ushort :
    (Ty.path "core::ffi::NonZero_c_ushort") = (Ty.path "core::num::nonzero::NonZeroU16").
  
  Axiom c_int : (Ty.path "core::ffi::c_int") = (Ty.path "i32").
  
  Axiom NonZero_c_int :
    (Ty.path "core::ffi::NonZero_c_int") = (Ty.path "core::num::nonzero::NonZeroI32").
  
  Axiom c_uint : (Ty.path "core::ffi::c_uint") = (Ty.path "u32").
  
  Axiom NonZero_c_uint :
    (Ty.path "core::ffi::NonZero_c_uint") = (Ty.path "core::num::nonzero::NonZeroU32").
  
  Axiom c_long : (Ty.path "core::ffi::c_long") = (Ty.path "i64").
  
  Axiom NonZero_c_long :
    (Ty.path "core::ffi::NonZero_c_long") = (Ty.path "core::num::nonzero::NonZeroI64").
  
  Axiom c_ulong : (Ty.path "core::ffi::c_ulong") = (Ty.path "u64").
  
  Axiom NonZero_c_ulong :
    (Ty.path "core::ffi::NonZero_c_ulong") = (Ty.path "core::num::nonzero::NonZeroU64").
  
  Axiom c_longlong : (Ty.path "core::ffi::c_longlong") = (Ty.path "i64").
  
  Axiom NonZero_c_longlong :
    (Ty.path "core::ffi::NonZero_c_longlong") = (Ty.path "core::num::nonzero::NonZeroI64").
  
  Axiom c_ulonglong : (Ty.path "core::ffi::c_ulonglong") = (Ty.path "u64").
  
  Axiom NonZero_c_ulonglong :
    (Ty.path "core::ffi::NonZero_c_ulonglong") = (Ty.path "core::num::nonzero::NonZeroU64").
  
  Axiom c_float : (Ty.path "core::ffi::c_float") = (Ty.path "f32").
  
  Axiom c_double : (Ty.path "core::ffi::c_double") = (Ty.path "f64").
  
  Axiom c_size_t : (Ty.path "core::ffi::c_size_t") = (Ty.path "usize").
  
  Axiom c_ptrdiff_t : (Ty.path "core::ffi::c_ptrdiff_t") = (Ty.path "isize").
  
  Axiom c_ssize_t : (Ty.path "core::ffi::c_ssize_t") = (Ty.path "isize").
  
  Module c_char_definition.
    Axiom c_char : (Ty.path "core::ffi::c_char_definition::c_char") = (Ty.path "i8").
    
    Axiom NonZero_c_char :
      (Ty.path "core::ffi::c_char_definition::NonZero_c_char") =
        (Ty.path "core::num::nonzero::NonZeroI8").
  End c_char_definition.
  
  Module c_int_definition.
    Axiom c_int : (Ty.path "core::ffi::c_int_definition::c_int") = (Ty.path "i32").
    
    Axiom NonZero_c_int :
      (Ty.path "core::ffi::c_int_definition::NonZero_c_int") =
        (Ty.path "core::num::nonzero::NonZeroI32").
    
    Axiom c_uint : (Ty.path "core::ffi::c_int_definition::c_uint") = (Ty.path "u32").
    
    Axiom NonZero_c_uint :
      (Ty.path "core::ffi::c_int_definition::NonZero_c_uint") =
        (Ty.path "core::num::nonzero::NonZeroU32").
  End c_int_definition.
  
  Module c_long_definition.
    Axiom c_long : (Ty.path "core::ffi::c_long_definition::c_long") = (Ty.path "i64").
    
    Axiom NonZero_c_long :
      (Ty.path "core::ffi::c_long_definition::NonZero_c_long") =
        (Ty.path "core::num::nonzero::NonZeroI64").
    
    Axiom c_ulong : (Ty.path "core::ffi::c_long_definition::c_ulong") = (Ty.path "u64").
    
    Axiom NonZero_c_ulong :
      (Ty.path "core::ffi::c_long_definition::NonZero_c_ulong") =
        (Ty.path "core::num::nonzero::NonZeroU64").
  End c_long_definition.
  
  (*
  Enum c_void
  {
    ty_params := [];
    variants :=
      [
        {
          name := "__variant1";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "__variant2";
          item := StructTuple [];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_fmt_Debug_for_core_ffi_c_void.
    Definition Self : Ty.t := Ty.path "core::ffi::c_void".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("c_void").finish()
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::builders::DebugStruct",
              "finish",
              []
            |),
            [
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct",
                    []
                  |),
                  [ M.read (| f |); M.read (| Value.String "c_void" |) ]
                |)
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_core_ffi_c_void.
  
  (* StructRecord
    {
      name := "VaListImpl";
      ty_params := [];
      fields :=
        [
          ("gp_offset", Ty.path "i32");
          ("fp_offset", Ty.path "i32");
          ("overflow_arg_area", Ty.apply (Ty.path "*mut") [ Ty.path "core::ffi::c_void" ]);
          ("reg_save_area", Ty.apply (Ty.path "*mut") [ Ty.path "core::ffi::c_void" ]);
          ("_marker",
            Ty.apply
              (Ty.path "core::marker::PhantomData")
              [ Ty.apply (Ty.path "&mut") [ Ty.apply (Ty.path "&") [ Ty.path "core::ffi::c_void" ] ]
              ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_for_core_ffi_VaListImpl.
    Definition Self : Ty.t := Ty.path "core::ffi::VaListImpl".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field5_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "VaListImpl" |);
              M.read (| Value.String "gp_offset" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "core::ffi::VaListImpl",
                  "gp_offset"
                |));
              M.read (| Value.String "fp_offset" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "core::ffi::VaListImpl",
                  "fp_offset"
                |));
              M.read (| Value.String "overflow_arg_area" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "core::ffi::VaListImpl",
                  "overflow_arg_area"
                |));
              M.read (| Value.String "reg_save_area" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "core::ffi::VaListImpl",
                  "reg_save_area"
                |));
              M.read (| Value.String "_marker" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "core::ffi::VaListImpl",
                    "_marker"
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_core_ffi_VaListImpl.
  
  (* StructRecord
    {
      name := "VaList";
      ty_params := [];
      fields :=
        [
          ("inner", Ty.apply (Ty.path "&mut") [ Ty.path "core::ffi::VaListImpl" ]);
          ("_marker",
            Ty.apply
              (Ty.path "core::marker::PhantomData")
              [ Ty.apply (Ty.path "&mut") [ Ty.path "core::ffi::VaListImpl" ] ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_for_core_ffi_VaList.
    Definition Self : Ty.t := Ty.path "core::ffi::VaList".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "VaList" |);
              M.read (| Value.String "inner" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "core::ffi::VaList",
                  "inner"
                |));
              M.read (| Value.String "_marker" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "core::ffi::VaList",
                    "_marker"
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_core_ffi_VaList.
  
  Module Impl_core_ffi_VaListImpl.
    Definition Self : Ty.t := Ty.path "core::ffi::VaListImpl".
    
    (*
        pub fn as_va_list<'a>(&'a mut self) -> VaList<'a, 'f> {
            VaList { inner: self, _marker: PhantomData }
        }
    *)
    Definition as_va_list (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "core::ffi::VaList"
            [
              ("inner", M.read (| self |));
              ("_marker", Value.StructTuple "core::marker::PhantomData" [])
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_as_va_list : M.IsAssociatedFunction Self "as_va_list" as_va_list.
    (*
        pub unsafe fn arg<T: sealed_trait::VaArgSafe>(&mut self) -> T {
            // SAFETY: the caller must uphold the safety contract for `va_arg`.
            unsafe { va_arg(self) }
        }
    *)
    Definition arg (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ T ], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_function (| "core::ffi::va_arg", [ T ] |),
            [ M.read (| self |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_arg : M.IsAssociatedFunction Self "arg" arg.
    
    (*
        pub unsafe fn with_copy<F, R>(&self, f: F) -> R
        where
            F: for<'copy> FnOnce(VaList<'copy, 'f>) -> R,
        {
            let mut ap = self.clone();
            let ret = f(ap.as_va_list());
            // SAFETY: the caller must uphold the safety contract for `va_end`.
            unsafe {
                va_end(&mut ap);
            }
            ret
        }
    *)
    Definition with_copy (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ F; R ], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            let ap :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "core::ffi::VaListImpl",
                    [],
                    "clone",
                    []
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let ret :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::ops::function::FnOnce",
                    F,
                    [ Ty.tuple [ Ty.path "core::ffi::VaList" ] ],
                    "call_once",
                    []
                  |),
                  [
                    M.read (| f |);
                    Value.Tuple
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::ffi::VaListImpl",
                            "as_va_list",
                            []
                          |),
                          [ ap ]
                        |)
                      ]
                  ]
                |)
              |) in
            let _ :=
              let _ :=
                M.alloc (|
                  M.call_closure (| M.get_function (| "core::ffi::va_end", [] |), [ ap ] |)
                |) in
              M.alloc (| Value.Tuple [] |) in
            ret
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_with_copy : M.IsAssociatedFunction Self "with_copy" with_copy.
  End Impl_core_ffi_VaListImpl.
  
  Module Impl_core_ops_deref_Deref_for_core_ffi_VaList.
    Definition Self : Ty.t := Ty.path "core::ffi::VaList".
    
    (*     type Target = VaListImpl<'f>; *)
    Definition _Target : Ty.t := Ty.path "core::ffi::VaListImpl".
    
    (*
        fn deref(&self) -> &VaListImpl<'f> {
            &self.inner
        }
    *)
    Definition deref (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "core::ffi::VaList",
              "inner"
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::deref::Deref"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("Target", InstanceField.Ty _Target); ("deref", InstanceField.Method deref) ].
  End Impl_core_ops_deref_Deref_for_core_ffi_VaList.
  
  Module Impl_core_ops_deref_DerefMut_for_core_ffi_VaList.
    Definition Self : Ty.t := Ty.path "core::ffi::VaList".
    
    (*
        fn deref_mut(&mut self) -> &mut VaListImpl<'f> {
            &mut self.inner
        }
    *)
    Definition deref_mut (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "core::ffi::VaList",
              "inner"
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::deref::DerefMut"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("deref_mut", InstanceField.Method deref_mut) ].
  End Impl_core_ops_deref_DerefMut_for_core_ffi_VaList.
  
  Module sealed_trait.
    (* Trait *)
    (* Empty module 'VaArgSafe' *)
  End sealed_trait.
  
  Module Impl_core_ffi_sealed_trait_VaArgSafe_for_i8.
    Definition Self : Ty.t := Ty.path "i8".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ffi::sealed_trait::VaArgSafe"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_ffi_sealed_trait_VaArgSafe_for_i8.
  
  Module Impl_core_ffi_sealed_trait_VaArgSafe_for_i16.
    Definition Self : Ty.t := Ty.path "i16".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ffi::sealed_trait::VaArgSafe"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_ffi_sealed_trait_VaArgSafe_for_i16.
  
  Module Impl_core_ffi_sealed_trait_VaArgSafe_for_i32.
    Definition Self : Ty.t := Ty.path "i32".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ffi::sealed_trait::VaArgSafe"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_ffi_sealed_trait_VaArgSafe_for_i32.
  
  Module Impl_core_ffi_sealed_trait_VaArgSafe_for_i64.
    Definition Self : Ty.t := Ty.path "i64".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ffi::sealed_trait::VaArgSafe"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_ffi_sealed_trait_VaArgSafe_for_i64.
  
  Module Impl_core_ffi_sealed_trait_VaArgSafe_for_usize.
    Definition Self : Ty.t := Ty.path "usize".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ffi::sealed_trait::VaArgSafe"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_ffi_sealed_trait_VaArgSafe_for_usize.
  
  Module Impl_core_ffi_sealed_trait_VaArgSafe_for_u8.
    Definition Self : Ty.t := Ty.path "u8".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ffi::sealed_trait::VaArgSafe"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_ffi_sealed_trait_VaArgSafe_for_u8.
  
  Module Impl_core_ffi_sealed_trait_VaArgSafe_for_u16.
    Definition Self : Ty.t := Ty.path "u16".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ffi::sealed_trait::VaArgSafe"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_ffi_sealed_trait_VaArgSafe_for_u16.
  
  Module Impl_core_ffi_sealed_trait_VaArgSafe_for_u32.
    Definition Self : Ty.t := Ty.path "u32".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ffi::sealed_trait::VaArgSafe"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_ffi_sealed_trait_VaArgSafe_for_u32.
  
  Module Impl_core_ffi_sealed_trait_VaArgSafe_for_u64.
    Definition Self : Ty.t := Ty.path "u64".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ffi::sealed_trait::VaArgSafe"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_ffi_sealed_trait_VaArgSafe_for_u64.
  
  Module Impl_core_ffi_sealed_trait_VaArgSafe_for_isize.
    Definition Self : Ty.t := Ty.path "isize".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ffi::sealed_trait::VaArgSafe"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_ffi_sealed_trait_VaArgSafe_for_isize.
  
  Module Impl_core_ffi_sealed_trait_VaArgSafe_for_f64.
    Definition Self : Ty.t := Ty.path "f64".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ffi::sealed_trait::VaArgSafe"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_ffi_sealed_trait_VaArgSafe_for_f64.
  
  Module Impl_core_ffi_sealed_trait_VaArgSafe_for_pointer_mut_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "*mut") [ T ].
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ffi::sealed_trait::VaArgSafe"
        (Self T)
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_ffi_sealed_trait_VaArgSafe_for_pointer_mut_T.
  
  Module Impl_core_ffi_sealed_trait_VaArgSafe_for_pointer_const_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "*const") [ T ].
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ffi::sealed_trait::VaArgSafe"
        (Self T)
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_ffi_sealed_trait_VaArgSafe_for_pointer_const_T.
  
  
  Module Impl_core_clone_Clone_for_core_ffi_VaListImpl.
    Definition Self : Ty.t := Ty.path "core::ffi::VaListImpl".
    
    (*
        fn clone(&self) -> Self {
            let mut dest = crate::mem::MaybeUninit::uninit();
            // SAFETY: we write to the `MaybeUninit`, thus it is initialized and `assume_init` is legal
            unsafe {
                va_copy(dest.as_mut_ptr(), self);
                dest.assume_init()
            }
        }
    *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let dest :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                      [ Ty.path "core::ffi::VaListImpl" ],
                    "uninit",
                    []
                  |),
                  []
                |)
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (| "core::ffi::va_copy", [] |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                          [ Ty.path "core::ffi::VaListImpl" ],
                        "as_mut_ptr",
                        []
                      |),
                      [ dest ]
                    |);
                    M.read (| self |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                    [ Ty.path "core::ffi::VaListImpl" ],
                  "assume_init",
                  []
                |),
                [ M.read (| dest |) ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_ffi_VaListImpl.
  
  Module Impl_core_ops_drop_Drop_for_core_ffi_VaListImpl.
    Definition Self : Ty.t := Ty.path "core::ffi::VaListImpl".
    
    (*
        fn drop(&mut self) {
            // FIXME: this should call `va_end`, but there's no clean way to
            // guarantee that `drop` always gets inlined into its caller,
            // so the `va_end` would get directly called from the same function as
            // the corresponding `va_copy`. `man va_end` states that C requires this,
            // and LLVM basically follows the C semantics, so we need to make sure
            // that `va_end` is always called from the same function as `va_copy`.
            // For more details, see https://github.com/rust-lang/rust/pull/59625
            // and https://llvm.org/docs/LangRef.html#llvm-va-end-intrinsic.
            //
            // This works for now, since `va_end` is a no-op on all current LLVM targets.
        }
    *)
    Definition drop (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple []))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::drop::Drop"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("drop", InstanceField.Method drop) ].
  End Impl_core_ops_drop_Drop_for_core_ffi_VaListImpl.
  
  (* Unhandled foreign module here *)
End ffi.
