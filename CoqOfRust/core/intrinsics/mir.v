(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module intrinsics.
  Module mir.
    (*
    Enum BasicBlock
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "Normal";
            item := StructTuple [];
          };
          {
            name := "Cleanup";
            item := StructTuple [];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_BasicBlock_Normal :
      M.IsDiscriminant "core::intrinsics::mir::BasicBlock::Normal" 0.
    Axiom IsDiscriminant_BasicBlock_Cleanup :
      M.IsDiscriminant "core::intrinsics::mir::BasicBlock::Cleanup" 1.
    
    (*
    Enum UnwindTerminateReason
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "Abi";
            item := StructTuple [];
          };
          {
            name := "InCleanup";
            item := StructTuple [];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_UnwindTerminateReason_Abi :
      M.IsDiscriminant "core::intrinsics::mir::UnwindTerminateReason::Abi" 0.
    Axiom IsDiscriminant_UnwindTerminateReason_InCleanup :
      M.IsDiscriminant "core::intrinsics::mir::UnwindTerminateReason::InCleanup" 1.
    
    (* StructTuple
      {
        name := "UnwindActionArg";
        const_params := [];
        ty_params := [];
        fields := [];
      } *)
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_UnwindContinue (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::mir::UnwindContinue.panic_cold_explicit",
                [],
                []
              |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_UnwindContinue :
      M.IsFunction.C "core::intrinsics::mir::UnwindContinue" value_UnwindContinue.
    Admitted.
    Global Typeclasses Opaque value_UnwindContinue.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_UnwindUnreachable (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::mir::UnwindUnreachable.panic_cold_explicit",
                [],
                []
              |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_UnwindUnreachable :
      M.IsFunction.C "core::intrinsics::mir::UnwindUnreachable" value_UnwindUnreachable.
    Admitted.
    Global Typeclasses Opaque value_UnwindUnreachable.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_UnwindTerminate (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ reason ] =>
        ltac:(M.monadic
          (let reason := M.alloc (| reason |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::mir::UnwindTerminate.panic_cold_explicit",
                [],
                []
              |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_UnwindTerminate :
      M.IsFunction.C "core::intrinsics::mir::UnwindTerminate" value_UnwindTerminate.
    Admitted.
    Global Typeclasses Opaque value_UnwindTerminate.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_UnwindCleanup (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ goto ] =>
        ltac:(M.monadic
          (let goto := M.alloc (| goto |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::mir::UnwindCleanup.panic_cold_explicit",
                [],
                []
              |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_UnwindCleanup :
      M.IsFunction.C "core::intrinsics::mir::UnwindCleanup" value_UnwindCleanup.
    Admitted.
    Global Typeclasses Opaque value_UnwindCleanup.
    
    (* StructTuple
      {
        name := "ReturnToArg";
        const_params := [];
        ty_params := [];
        fields := [];
      } *)
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_ReturnTo (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ goto ] =>
        ltac:(M.monadic
          (let goto := M.alloc (| goto |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::ReturnTo.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_ReturnTo :
      M.IsFunction.C "core::intrinsics::mir::ReturnTo" value_ReturnTo.
    Admitted.
    Global Typeclasses Opaque value_ReturnTo.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Return (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::Return.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Return :
      M.IsFunction.C "core::intrinsics::mir::Return" value_Return.
    Admitted.
    Global Typeclasses Opaque value_Return.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Goto (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ destination ] =>
        ltac:(M.monadic
          (let destination := M.alloc (| destination |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::Goto.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Goto :
      M.IsFunction.C "core::intrinsics::mir::Goto" value_Goto.
    Admitted.
    Global Typeclasses Opaque value_Goto.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Unreachable (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::Unreachable.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Unreachable :
      M.IsFunction.C "core::intrinsics::mir::Unreachable" value_Unreachable.
    Admitted.
    Global Typeclasses Opaque value_Unreachable.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Drop (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ place; goto; unwind_action ] =>
        ltac:(M.monadic
          (let place := M.alloc (| place |) in
          let goto := M.alloc (| goto |) in
          let unwind_action := M.alloc (| unwind_action |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::Drop.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Drop :
      M.IsFunction.C "core::intrinsics::mir::Drop" value_Drop.
    Admitted.
    Global Typeclasses Opaque value_Drop.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Call (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ call; goto; unwind_action ] =>
        ltac:(M.monadic
          (let call := M.alloc (| call |) in
          let goto := M.alloc (| goto |) in
          let unwind_action := M.alloc (| unwind_action |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::Call.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Call :
      M.IsFunction.C "core::intrinsics::mir::Call" value_Call.
    Admitted.
    Global Typeclasses Opaque value_Call.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_TailCall (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ call ] =>
        ltac:(M.monadic
          (let call := M.alloc (| call |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::TailCall.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_TailCall :
      M.IsFunction.C "core::intrinsics::mir::TailCall" value_TailCall.
    Admitted.
    Global Typeclasses Opaque value_TailCall.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_UnwindResume (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::mir::UnwindResume.panic_cold_explicit",
                [],
                []
              |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_UnwindResume :
      M.IsFunction.C "core::intrinsics::mir::UnwindResume" value_UnwindResume.
    Admitted.
    Global Typeclasses Opaque value_UnwindResume.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_StorageLive (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ local ] =>
        ltac:(M.monadic
          (let local := M.alloc (| local |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::StorageLive.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_StorageLive :
      M.IsFunction.C "core::intrinsics::mir::StorageLive" value_StorageLive.
    Admitted.
    Global Typeclasses Opaque value_StorageLive.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_StorageDead (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ local ] =>
        ltac:(M.monadic
          (let local := M.alloc (| local |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::StorageDead.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_StorageDead :
      M.IsFunction.C "core::intrinsics::mir::StorageDead" value_StorageDead.
    Admitted.
    Global Typeclasses Opaque value_StorageDead.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Assume (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ operand ] =>
        ltac:(M.monadic
          (let operand := M.alloc (| operand |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::Assume.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Assume :
      M.IsFunction.C "core::intrinsics::mir::Assume" value_Assume.
    Admitted.
    Global Typeclasses Opaque value_Assume.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Deinit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ place ] =>
        ltac:(M.monadic
          (let place := M.alloc (| place |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::Deinit.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Deinit :
      M.IsFunction.C "core::intrinsics::mir::Deinit" value_Deinit.
    Admitted.
    Global Typeclasses Opaque value_Deinit.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Checked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ binop ] =>
        ltac:(M.monadic
          (let binop := M.alloc (| binop |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::Checked.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Checked :
      M.IsFunction.C "core::intrinsics::mir::Checked" value_Checked.
    Admitted.
    Global Typeclasses Opaque value_Checked.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Len (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ place ] =>
        ltac:(M.monadic
          (let place := M.alloc (| place |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::Len.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Len :
      M.IsFunction.C "core::intrinsics::mir::Len" value_Len.
    Admitted.
    Global Typeclasses Opaque value_Len.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_PtrMetadata (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ place ] =>
        ltac:(M.monadic
          (let place := M.alloc (| place |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::PtrMetadata.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_PtrMetadata :
      M.IsFunction.C "core::intrinsics::mir::PtrMetadata" value_PtrMetadata.
    Admitted.
    Global Typeclasses Opaque value_PtrMetadata.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_CopyForDeref (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ place ] =>
        ltac:(M.monadic
          (let place := M.alloc (| place |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::mir::CopyForDeref.panic_cold_explicit",
                [],
                []
              |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_CopyForDeref :
      M.IsFunction.C "core::intrinsics::mir::CopyForDeref" value_CopyForDeref.
    Admitted.
    Global Typeclasses Opaque value_CopyForDeref.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Retag (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ place ] =>
        ltac:(M.monadic
          (let place := M.alloc (| place |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::Retag.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Retag :
      M.IsFunction.C "core::intrinsics::mir::Retag" value_Retag.
    Admitted.
    Global Typeclasses Opaque value_Retag.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Move (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ place ] =>
        ltac:(M.monadic
          (let place := M.alloc (| place |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::Move.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Move :
      M.IsFunction.C "core::intrinsics::mir::Move" value_Move.
    Admitted.
    Global Typeclasses Opaque value_Move.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Static (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ s ] =>
        ltac:(M.monadic
          (let s := M.alloc (| s |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::Static.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Static :
      M.IsFunction.C "core::intrinsics::mir::Static" value_Static.
    Admitted.
    Global Typeclasses Opaque value_Static.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_StaticMut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ s ] =>
        ltac:(M.monadic
          (let s := M.alloc (| s |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::StaticMut.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_StaticMut :
      M.IsFunction.C "core::intrinsics::mir::StaticMut" value_StaticMut.
    Admitted.
    Global Typeclasses Opaque value_StaticMut.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Discriminant (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ place ] =>
        ltac:(M.monadic
          (let place := M.alloc (| place |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::mir::Discriminant.panic_cold_explicit",
                [],
                []
              |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Discriminant :
      M.IsFunction.C "core::intrinsics::mir::Discriminant" value_Discriminant.
    Admitted.
    Global Typeclasses Opaque value_Discriminant.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_SetDiscriminant (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ place; index ] =>
        ltac:(M.monadic
          (let place := M.alloc (| place |) in
          let index := M.alloc (| index |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::mir::SetDiscriminant.panic_cold_explicit",
                [],
                []
              |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_SetDiscriminant :
      M.IsFunction.C "core::intrinsics::mir::SetDiscriminant" value_SetDiscriminant.
    Admitted.
    Global Typeclasses Opaque value_SetDiscriminant.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Offset (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T; U ], [ ptr; count ] =>
        ltac:(M.monadic
          (let ptr := M.alloc (| ptr |) in
          let count := M.alloc (| count |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::Offset.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Offset :
      M.IsFunction.C "core::intrinsics::mir::Offset" value_Offset.
    Admitted.
    Global Typeclasses Opaque value_Offset.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Field (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ F ], [ place; field ] =>
        ltac:(M.monadic
          (let place := M.alloc (| place |) in
          let field := M.alloc (| field |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::Field.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Field :
      M.IsFunction.C "core::intrinsics::mir::Field" value_Field.
    Admitted.
    Global Typeclasses Opaque value_Field.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_Variant (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ place; index ] =>
        ltac:(M.monadic
          (let place := M.alloc (| place |) in
          let index := M.alloc (| index |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::Variant.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_Variant :
      M.IsFunction.C "core::intrinsics::mir::Variant" value_Variant.
    Admitted.
    Global Typeclasses Opaque value_Variant.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_CastTransmute (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T; U ], [ operand ] =>
        ltac:(M.monadic
          (let operand := M.alloc (| operand |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::mir::CastTransmute.panic_cold_explicit",
                [],
                []
              |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_CastTransmute :
      M.IsFunction.C "core::intrinsics::mir::CastTransmute" value_CastTransmute.
    Admitted.
    Global Typeclasses Opaque value_CastTransmute.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition value_CastPtrToPtr (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T; U ], [ operand ] =>
        ltac:(M.monadic
          (let operand := M.alloc (| operand |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::mir::CastPtrToPtr.panic_cold_explicit",
                [],
                []
              |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_value_CastPtrToPtr :
      M.IsFunction.C "core::intrinsics::mir::CastPtrToPtr" value_CastPtrToPtr.
    Admitted.
    Global Typeclasses Opaque value_CastPtrToPtr.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition __internal_make_place (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ place ] =>
        ltac:(M.monadic
          (let place := M.alloc (| place |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::mir::__internal_make_place.panic_cold_explicit",
                [],
                []
              |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction___internal_make_place :
      M.IsFunction.C "core::intrinsics::mir::__internal_make_place" __internal_make_place.
    Admitted.
    Global Typeclasses Opaque __internal_make_place.
    
    (*         pub fn $($sig)* { panic!() } *)
    Definition __debuginfo (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ name; s ] =>
        ltac:(M.monadic
          (let name := M.alloc (| name |) in
          let s := M.alloc (| s |) in
          M.never_to_any (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::intrinsics::mir::__debuginfo.panic_cold_explicit", [], [] |),
              []
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction___debuginfo :
      M.IsFunction.C "core::intrinsics::mir::__debuginfo" __debuginfo.
    Admitted.
    Global Typeclasses Opaque __debuginfo.
  End mir.
End intrinsics.
