(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module iter.
  Module adapters.
    Module inspect.
      (* StructRecord
        {
          name := "Inspect";
          const_params := [];
          ty_params := [ "I"; "F" ];
          fields := [ ("iter", I); ("f", F) ];
        } *)
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_I_where_core_clone_Clone_F_for_core_iter_adapters_inspect_Inspect_I_F.
        Definition Self (I F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::inspect::Inspect") [] [ I; F ].
        
        (* Clone *)
        Definition clone (I F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "core::iter::adapters::inspect::Inspect"
                [
                  ("iter",
                    M.call_closure (|
                      I,
                      M.get_trait_method (| "core::clone::Clone", I, [], [], "clone", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "core::iter::adapters::inspect::Inspect",
                                "iter"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("f",
                    M.call_closure (|
                      F,
                      M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "core::iter::adapters::inspect::Inspect",
                                "f"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (I F : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I F)
            (* Instance *) [ ("clone", InstanceField.Method (clone I F)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_I_where_core_clone_Clone_F_for_core_iter_adapters_inspect_Inspect_I_F.
      
      Module Impl_core_iter_adapters_inspect_Inspect_I_F.
        Definition Self (I F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::inspect::Inspect") [] [ I; F ].
        
        (*
            pub(in crate::iter) fn new(iter: I, f: F) -> Inspect<I, F> {
                Inspect { iter, f }
            }
        *)
        Definition new (I F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I F in
          match ε, τ, α with
          | [], [], [ iter; f ] =>
            ltac:(M.monadic
              (let iter := M.alloc (| iter |) in
              let f := M.alloc (| f |) in
              Value.StructRecord
                "core::iter::adapters::inspect::Inspect"
                [ ("iter", M.read (| iter |)); ("f", M.read (| f |)) ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (I F : Ty.t),
          M.IsAssociatedFunction.C (Self I F) "new" (new I F).
        Admitted.
        Global Typeclasses Opaque new.
        (*
            fn do_inspect(&mut self, elt: Option<I::Item>) -> Option<I::Item> {
                if let Some(ref a) = elt {
                    (self.f)(a);
                }
        
                elt
            }
        *)
        Definition do_inspect
            (I F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self I F in
          match ε, τ, α with
          | [], [], [ self; elt ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let elt := M.alloc (| elt |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := elt in
                          let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::option::Option::Some",
                              0
                            |) in
                          let a := M.alloc (| γ0_0 |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "core::ops::function::FnMut",
                                  F,
                                  [],
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "core::iter::traits::iterator::Iterator"
                                              []
                                              []
                                              I
                                              "Item"
                                          ]
                                      ]
                                  ],
                                  "call_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "core::iter::adapters::inspect::Inspect",
                                      "f"
                                    |)
                                  |);
                                  Value.Tuple
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| a |) |) |)
                                    ]
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                elt
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_do_inspect :
          forall (I F : Ty.t),
          M.IsAssociatedFunction.C (Self I F) "do_inspect" (do_inspect I F).
        Admitted.
        Global Typeclasses Opaque do_inspect.
      End Impl_core_iter_adapters_inspect_Inspect_I_F.
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_I_for_core_iter_adapters_inspect_Inspect_I_F.
        Definition Self (I F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::inspect::Inspect") [] [ I; F ].
        
        (*
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                f.debug_struct("Inspect").field("iter", &self.iter).finish()
            }
        *)
        Definition fmt (I F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::builders::DebugStruct",
                  "finish",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::builders::DebugStruct" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::builders::DebugStruct",
                          "field",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "core::fmt::builders::DebugStruct",
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Formatter",
                                  "debug_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| mk_str (| "Inspect" |) |)
                                  |)
                                ]
                              |)
                            |)
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "iter" |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "core::iter::adapters::inspect::Inspect",
                                  "iter"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (I F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt I F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_I_for_core_iter_adapters_inspect_Inspect_I_F.
      
      
      (*
      fn inspect_fold<T, Acc>(
          mut f: impl FnMut(&T),
          mut fold: impl FnMut(Acc, T) -> Acc,
      ) -> impl FnMut(Acc, T) -> Acc {
          move |acc, item| {
              f(&item);
              fold(acc, item)
          }
      }
      *)
      Definition inspect_fold (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ T; Acc; impl_FnMut__T_; impl_FnMut_Acc__T__arrow_Acc ], [ f; fold ] =>
          ltac:(M.monadic
            (let f := M.alloc (| f |) in
            let fold := M.alloc (| fold |) in
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0; α1 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Some (Ty.function [ Ty.tuple [ Acc; T ] ] Acc),
                        M.alloc (| α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let acc := M.copy (| γ |) in
                              M.match_operator (|
                                Some (Ty.function [ Ty.tuple [ Acc; T ] ] Acc),
                                M.alloc (| α1 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let item := M.copy (| γ |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_trait_method (|
                                                "core::ops::function::FnMut",
                                                impl_FnMut__T_,
                                                [],
                                                [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ] ] ],
                                                "call_mut",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (| Pointer.Kind.MutRef, f |);
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (| Pointer.Kind.Ref, item |)
                                                      |)
                                                    |)
                                                  ]
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Acc,
                                            M.get_trait_method (|
                                              "core::ops::function::FnMut",
                                              impl_FnMut_Acc__T__arrow_Acc,
                                              [],
                                              [ Ty.tuple [ Acc; T ] ],
                                              "call_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, fold |);
                                              Value.Tuple [ M.read (| acc |); M.read (| item |) ]
                                            ]
                                          |)
                                        |)
                                      |)))
                                ]
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_inspect_fold :
        M.IsFunction.C "core::iter::adapters::inspect::inspect_fold" inspect_fold.
      Admitted.
      Global Typeclasses Opaque inspect_fold.
      
      (*
      fn inspect_try_fold<'a, T, Acc, R>(
          f: &'a mut impl FnMut(&T),
          mut fold: impl FnMut(Acc, T) -> R + 'a,
      ) -> impl FnMut(Acc, T) -> R + 'a {
          move |acc, item| {
              f(&item);
              fold(acc, item)
          }
      }
      *)
      Definition inspect_try_fold (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ T; Acc; R; impl_FnMut__T_; impl_FnMut_Acc__T__arrow_R__plus__'a ], [ f; fold ] =>
          ltac:(M.monadic
            (let f := M.alloc (| f |) in
            let fold := M.alloc (| fold |) in
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0; α1 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Some (Ty.function [ Ty.tuple [ Acc; T ] ] R),
                        M.alloc (| α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let acc := M.copy (| γ |) in
                              M.match_operator (|
                                Some (Ty.function [ Ty.tuple [ Acc; T ] ] R),
                                M.alloc (| α1 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let item := M.copy (| γ |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_trait_method (|
                                                "core::ops::function::FnMut",
                                                impl_FnMut__T_,
                                                [],
                                                [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ] ] ],
                                                "call_mut",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| f |) |)
                                                |);
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (| Pointer.Kind.Ref, item |)
                                                      |)
                                                    |)
                                                  ]
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            R,
                                            M.get_trait_method (|
                                              "core::ops::function::FnMut",
                                              impl_FnMut_Acc__T__arrow_R__plus__'a,
                                              [],
                                              [ Ty.tuple [ Acc; T ] ],
                                              "call_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, fold |);
                                              Value.Tuple [ M.read (| acc |); M.read (| item |) ]
                                            ]
                                          |)
                                        |)
                                      |)))
                                ]
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_inspect_try_fold :
        M.IsFunction.C "core::iter::adapters::inspect::inspect_try_fold" inspect_try_fold.
      Admitted.
      Global Typeclasses Opaque inspect_try_fold.
      
      Module Impl_core_iter_traits_iterator_Iterator_where_core_iter_traits_iterator_Iterator_I_where_core_ops_function_FnMut_F_Tuple_ref__associated_in_trait_core_iter_traits_iterator_Iterator___I_Item__for_core_iter_adapters_inspect_Inspect_I_F.
        Definition Self (I F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::inspect::Inspect") [] [ I; F ].
        
        (*     type Item = I::Item; *)
        Definition _Item (I F : Ty.t) : Ty.t :=
          Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item".
        
        (*
            fn next(&mut self) -> Option<I::Item> {
                let next = self.iter.next();
                self.do_inspect(next)
            }
        *)
        Definition next (I F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                let~ next :
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          I
                          "Item"
                      ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            I
                            "Item"
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        I,
                        [],
                        [],
                        "next",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::iter::adapters::inspect::Inspect",
                            "iter"
                          |)
                        |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          I
                          "Item"
                      ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::iter::adapters::inspect::Inspect") [] [ I; F ],
                      "do_inspect",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      M.read (| next |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn size_hint(&self) -> (usize, Option<usize>) {
                self.iter.size_hint()
            }
        *)
        Definition size_hint
            (I F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self I F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.tuple
                  [
                    Ty.path "usize";
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ]
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  I,
                  [],
                  [],
                  "size_hint",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::iter::adapters::inspect::Inspect",
                      "iter"
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R
            where
                Self: Sized,
                Fold: FnMut(Acc, Self::Item) -> R,
                R: Try<Output = Acc>,
            {
                self.iter.try_fold(init, inspect_try_fold(&mut self.f, fold))
            }
        *)
        Definition try_fold
            (I F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self I F in
          match ε, τ, α with
          | [], [ Acc; Fold; R ], [ self; init; fold ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let init := M.alloc (| init |) in
              let fold := M.alloc (| fold |) in
              M.call_closure (|
                R,
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  I,
                  [],
                  [],
                  "try_fold",
                  [],
                  [ Acc; Ty.associated_unknown; R ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::iter::adapters::inspect::Inspect",
                      "iter"
                    |)
                  |);
                  M.read (| init |);
                  M.call_closure (|
                    Ty.associated_unknown,
                    M.get_function (|
                      "core::iter::adapters::inspect::inspect_try_fold",
                      [],
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          I
                          "Item";
                        Acc;
                        R;
                        F;
                        Fold
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "core::iter::adapters::inspect::Inspect",
                              "f"
                            |)
                          |)
                        |)
                      |);
                      M.read (| fold |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc
            where
                Fold: FnMut(Acc, Self::Item) -> Acc,
            {
                self.iter.fold(init, inspect_fold(self.f, fold))
            }
        *)
        Definition fold (I F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I F in
          match ε, τ, α with
          | [], [ Acc; Fold ], [ self; init; fold ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let init := M.alloc (| init |) in
              let fold := M.alloc (| fold |) in
              M.call_closure (|
                Acc,
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  I,
                  [],
                  [],
                  "fold",
                  [],
                  [ Acc; Ty.associated_unknown ]
                |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "core::iter::adapters::inspect::Inspect",
                      "iter"
                    |)
                  |);
                  M.read (| init |);
                  M.call_closure (|
                    Ty.associated_unknown,
                    M.get_function (|
                      "core::iter::adapters::inspect::inspect_fold",
                      [],
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          I
                          "Item";
                        Acc;
                        F;
                        Fold
                      ]
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "core::iter::adapters::inspect::Inspect",
                          "f"
                        |)
                      |);
                      M.read (| fold |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (I F : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::iterator::Iterator"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I F)
            (* Instance *)
            [
              ("Item", InstanceField.Ty (_Item I F));
              ("next", InstanceField.Method (next I F));
              ("size_hint", InstanceField.Method (size_hint I F));
              ("try_fold", InstanceField.Method (try_fold I F));
              ("fold", InstanceField.Method (fold I F))
            ].
      End Impl_core_iter_traits_iterator_Iterator_where_core_iter_traits_iterator_Iterator_I_where_core_ops_function_FnMut_F_Tuple_ref__associated_in_trait_core_iter_traits_iterator_Iterator___I_Item__for_core_iter_adapters_inspect_Inspect_I_F.
      
      Module Impl_core_iter_traits_double_ended_DoubleEndedIterator_where_core_iter_traits_double_ended_DoubleEndedIterator_I_where_core_ops_function_FnMut_F_Tuple_ref__associated_in_trait_core_iter_traits_iterator_Iterator___I_Item__for_core_iter_adapters_inspect_Inspect_I_F.
        Definition Self (I F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::inspect::Inspect") [] [ I; F ].
        
        (*
            fn next_back(&mut self) -> Option<I::Item> {
                let next = self.iter.next_back();
                self.do_inspect(next)
            }
        *)
        Definition next_back
            (I F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self I F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                let~ next :
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          I
                          "Item"
                      ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            I
                            "Item"
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::double_ended::DoubleEndedIterator",
                        I,
                        [],
                        [],
                        "next_back",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::iter::adapters::inspect::Inspect",
                            "iter"
                          |)
                        |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          I
                          "Item"
                      ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::iter::adapters::inspect::Inspect") [] [ I; F ],
                      "do_inspect",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      M.read (| next |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R
            where
                Self: Sized,
                Fold: FnMut(Acc, Self::Item) -> R,
                R: Try<Output = Acc>,
            {
                self.iter.try_rfold(init, inspect_try_fold(&mut self.f, fold))
            }
        *)
        Definition try_rfold
            (I F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self I F in
          match ε, τ, α with
          | [], [ Acc; Fold; R ], [ self; init; fold ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let init := M.alloc (| init |) in
              let fold := M.alloc (| fold |) in
              M.call_closure (|
                R,
                M.get_trait_method (|
                  "core::iter::traits::double_ended::DoubleEndedIterator",
                  I,
                  [],
                  [],
                  "try_rfold",
                  [],
                  [ Acc; Ty.associated_unknown; R ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::iter::adapters::inspect::Inspect",
                      "iter"
                    |)
                  |);
                  M.read (| init |);
                  M.call_closure (|
                    Ty.associated_unknown,
                    M.get_function (|
                      "core::iter::adapters::inspect::inspect_try_fold",
                      [],
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          I
                          "Item";
                        Acc;
                        R;
                        F;
                        Fold
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "core::iter::adapters::inspect::Inspect",
                              "f"
                            |)
                          |)
                        |)
                      |);
                      M.read (| fold |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc
            where
                Fold: FnMut(Acc, Self::Item) -> Acc,
            {
                self.iter.rfold(init, inspect_fold(self.f, fold))
            }
        *)
        Definition rfold (I F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I F in
          match ε, τ, α with
          | [], [ Acc; Fold ], [ self; init; fold ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let init := M.alloc (| init |) in
              let fold := M.alloc (| fold |) in
              M.call_closure (|
                Acc,
                M.get_trait_method (|
                  "core::iter::traits::double_ended::DoubleEndedIterator",
                  I,
                  [],
                  [],
                  "rfold",
                  [],
                  [ Acc; Ty.associated_unknown ]
                |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "core::iter::adapters::inspect::Inspect",
                      "iter"
                    |)
                  |);
                  M.read (| init |);
                  M.call_closure (|
                    Ty.associated_unknown,
                    M.get_function (|
                      "core::iter::adapters::inspect::inspect_fold",
                      [],
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          I
                          "Item";
                        Acc;
                        F;
                        Fold
                      ]
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "core::iter::adapters::inspect::Inspect",
                          "f"
                        |)
                      |);
                      M.read (| fold |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (I F : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::double_ended::DoubleEndedIterator"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I F)
            (* Instance *)
            [
              ("next_back", InstanceField.Method (next_back I F));
              ("try_rfold", InstanceField.Method (try_rfold I F));
              ("rfold", InstanceField.Method (rfold I F))
            ].
      End Impl_core_iter_traits_double_ended_DoubleEndedIterator_where_core_iter_traits_double_ended_DoubleEndedIterator_I_where_core_ops_function_FnMut_F_Tuple_ref__associated_in_trait_core_iter_traits_iterator_Iterator___I_Item__for_core_iter_adapters_inspect_Inspect_I_F.
      
      Module Impl_core_iter_traits_exact_size_ExactSizeIterator_where_core_iter_traits_exact_size_ExactSizeIterator_I_where_core_ops_function_FnMut_F_Tuple_ref__associated_in_trait_core_iter_traits_iterator_Iterator___I_Item__for_core_iter_adapters_inspect_Inspect_I_F.
        Definition Self (I F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::inspect::Inspect") [] [ I; F ].
        
        (*
            fn len(&self) -> usize {
                self.iter.len()
            }
        *)
        Definition len (I F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "core::iter::traits::exact_size::ExactSizeIterator",
                  I,
                  [],
                  [],
                  "len",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::iter::adapters::inspect::Inspect",
                      "iter"
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn is_empty(&self) -> bool {
                self.iter.is_empty()
            }
        *)
        Definition is_empty
            (I F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self I F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "core::iter::traits::exact_size::ExactSizeIterator",
                  I,
                  [],
                  [],
                  "is_empty",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::iter::adapters::inspect::Inspect",
                      "iter"
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (I F : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::exact_size::ExactSizeIterator"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I F)
            (* Instance *)
            [
              ("len", InstanceField.Method (len I F));
              ("is_empty", InstanceField.Method (is_empty I F))
            ].
      End Impl_core_iter_traits_exact_size_ExactSizeIterator_where_core_iter_traits_exact_size_ExactSizeIterator_I_where_core_ops_function_FnMut_F_Tuple_ref__associated_in_trait_core_iter_traits_iterator_Iterator___I_Item__for_core_iter_adapters_inspect_Inspect_I_F.
      
      Module Impl_core_iter_traits_marker_FusedIterator_where_core_iter_traits_marker_FusedIterator_I_where_core_ops_function_FnMut_F_Tuple_ref__associated_in_trait_core_iter_traits_iterator_Iterator___I_Item__for_core_iter_adapters_inspect_Inspect_I_F.
        Definition Self (I F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::inspect::Inspect") [] [ I; F ].
        
        Axiom Implements :
          forall (I F : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::marker::FusedIterator"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I F)
            (* Instance *) [].
      End Impl_core_iter_traits_marker_FusedIterator_where_core_iter_traits_marker_FusedIterator_I_where_core_ops_function_FnMut_F_Tuple_ref__associated_in_trait_core_iter_traits_iterator_Iterator___I_Item__for_core_iter_adapters_inspect_Inspect_I_F.
      
      Module Impl_core_iter_traits_marker_TrustedFused_where_core_iter_traits_marker_TrustedFused_I_for_core_iter_adapters_inspect_Inspect_I_F.
        Definition Self (I F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::inspect::Inspect") [] [ I; F ].
        
        Axiom Implements :
          forall (I F : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::marker::TrustedFused"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I F)
            (* Instance *) [].
      End Impl_core_iter_traits_marker_TrustedFused_where_core_iter_traits_marker_TrustedFused_I_for_core_iter_adapters_inspect_Inspect_I_F.
      
      Module Impl_core_iter_adapters_SourceIter_where_core_iter_adapters_SourceIter_I_for_core_iter_adapters_inspect_Inspect_I_F.
        Definition Self (I F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::inspect::Inspect") [] [ I; F ].
        
        (*     type Source = I::Source; *)
        Definition _Source (I F : Ty.t) : Ty.t :=
          Ty.associated_in_trait "core::iter::adapters::SourceIter" [] [] I "Source".
        
        (*
            unsafe fn as_inner(&mut self) -> &mut I::Source {
                // SAFETY: unsafe function forwarding to unsafe function with the same requirements
                unsafe { SourceIter::as_inner(&mut self.iter) }
            }
        *)
        Definition as_inner
            (I F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self I F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.associated_in_trait
                                  "core::iter::adapters::SourceIter"
                                  []
                                  []
                                  I
                                  "Source"
                              ],
                            M.get_trait_method (|
                              "core::iter::adapters::SourceIter",
                              I,
                              [],
                              [],
                              "as_inner",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "core::iter::adapters::inspect::Inspect",
                                      "iter"
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    |)
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (I F : Ty.t),
          M.IsTraitInstance
            "core::iter::adapters::SourceIter"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I F)
            (* Instance *)
            [
              ("Source", InstanceField.Ty (_Source I F));
              ("as_inner", InstanceField.Method (as_inner I F))
            ].
      End Impl_core_iter_adapters_SourceIter_where_core_iter_adapters_SourceIter_I_for_core_iter_adapters_inspect_Inspect_I_F.
      
      Module Impl_core_iter_traits_marker_InPlaceIterable_where_core_iter_traits_marker_InPlaceIterable_I_for_core_iter_adapters_inspect_Inspect_I_F.
        Definition Self (I F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::inspect::Inspect") [] [ I; F ].
        
        (*     const EXPAND_BY: Option<NonZero<usize>> = I::EXPAND_BY; *)
        (* Ty.apply
          (Ty.path "core::option::Option")
          []
          [ Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ] ] *)
        Definition value_EXPAND_BY
            (I F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self I F in
          ltac:(M.monadic
            (get_constant (|
              "core::iter::traits::marker::InPlaceIterable::EXPAND_BY",
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ] ]
            |))).
        
        (*     const MERGE_BY: Option<NonZero<usize>> = I::MERGE_BY; *)
        (* Ty.apply
          (Ty.path "core::option::Option")
          []
          [ Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ] ] *)
        Definition value_MERGE_BY
            (I F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self I F in
          ltac:(M.monadic
            (get_constant (|
              "core::iter::traits::marker::InPlaceIterable::MERGE_BY",
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ] ]
            |))).
        
        Axiom Implements :
          forall (I F : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::marker::InPlaceIterable"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I F)
            (* Instance *)
            [
              ("value_EXPAND_BY", InstanceField.Method (value_EXPAND_BY I F));
              ("value_MERGE_BY", InstanceField.Method (value_MERGE_BY I F))
            ].
      End Impl_core_iter_traits_marker_InPlaceIterable_where_core_iter_traits_marker_InPlaceIterable_I_for_core_iter_adapters_inspect_Inspect_I_F.
    End inspect.
  End adapters.
End iter.
