(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module iter.
  Module adapters.
    Module intersperse.
      (* StructRecord
        {
          name := "Intersperse";
          ty_params := [ "I" ];
          fields :=
            [
              ("separator", Ty.associated);
              ("iter", Ty.apply (Ty.path "core::iter::adapters::peekable::Peekable") [ I ]);
              ("needs_sep", Ty.path "bool")
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_I_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_associated_type_where_core_fmt_Debug_associated_type_for_core_iter_adapters_intersperse_Intersperse_I.
        Definition Self (I : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::Intersperse") [ I ].
        
        (* Debug *)
        Definition fmt (I : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I in
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field3_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "Intersperse" |);
                  M.read (| Value.String "separator" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "core::iter::adapters::intersperse::Intersperse",
                      "separator"
                    |));
                  M.read (| Value.String "iter" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "core::iter::adapters::intersperse::Intersperse",
                      "iter"
                    |));
                  M.read (| Value.String "needs_sep" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "core::iter::adapters::intersperse::Intersperse",
                        "needs_sep"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (I : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (Self I)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method (fmt I)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_I_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_associated_type_where_core_fmt_Debug_associated_type_for_core_iter_adapters_intersperse_Intersperse_I.
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_I_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_for_core_iter_adapters_intersperse_Intersperse_I.
        Definition Self (I : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::Intersperse") [ I ].
        
        (* Clone *)
        Definition clone (I : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "core::iter::adapters::intersperse::Intersperse"
                [
                  ("separator",
                    M.call_closure (|
                      M.get_trait_method (| "core::clone::Clone", Ty.associated, [], "clone", [] |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "core::iter::adapters::intersperse::Intersperse",
                          "separator"
                        |)
                      ]
                    |));
                  ("iter",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply (Ty.path "core::iter::adapters::peekable::Peekable") [ I ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "core::iter::adapters::intersperse::Intersperse",
                          "iter"
                        |)
                      ]
                    |));
                  ("needs_sep",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "bool",
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "core::iter::adapters::intersperse::Intersperse",
                          "needs_sep"
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (I : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (Self I)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method (clone I)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_I_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_for_core_iter_adapters_intersperse_Intersperse_I.
      
      Module Impl_core_iter_adapters_intersperse_Intersperse_I.
        Definition Self (I : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::Intersperse") [ I ].
        
        (*
            pub(in crate::iter) fn new(iter: I, separator: I::Item) -> Self {
                Self { iter: iter.peekable(), separator, needs_sep: false }
            }
        *)
        Definition new (I : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I in
          match τ, α with
          | [], [ iter; separator ] =>
            ltac:(M.monadic
              (let iter := M.alloc (| iter |) in
              let separator := M.alloc (| separator |) in
              Value.StructRecord
                "core::iter::adapters::intersperse::Intersperse"
                [
                  ("iter",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        I,
                        [],
                        "peekable",
                        []
                      |),
                      [ M.read (| iter |) ]
                    |));
                  ("separator", M.read (| separator |));
                  ("needs_sep", Value.Bool false)
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_new :
          forall (I : Ty.t),
          M.IsAssociatedFunction (Self I) "new" (new I).
      End Impl_core_iter_adapters_intersperse_Intersperse_I.
      
      Module Impl_core_iter_traits_iterator_Iterator_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_associated_type_for_core_iter_adapters_intersperse_Intersperse_I.
        Definition Self (I : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::Intersperse") [ I ].
        
        (*     type Item = I::Item; *)
        Definition _Item (I : Ty.t) : Ty.t := Ty.associated.
        
        (*
            fn next(&mut self) -> Option<I::Item> {
                if self.needs_sep && self.iter.peek().is_some() {
                    self.needs_sep = false;
                    Some(self.separator.clone())
                } else {
                    self.needs_sep = true;
                    self.iter.next()
                }
            }
        *)
        Definition next (I : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.and (|
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "core::iter::adapters::intersperse::Intersperse",
                                    "needs_sep"
                                  |)
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                      "is_some",
                                      []
                                    |),
                                    [
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::peekable::Peekable")
                                              [ I ],
                                            "peek",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "core::iter::adapters::intersperse::Intersperse",
                                              "iter"
                                            |)
                                          ]
                                        |)
                                      |)
                                    ]
                                  |)))
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let _ :=
                          M.write (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "core::iter::adapters::intersperse::Intersperse",
                              "needs_sep"
                            |),
                            Value.Bool false
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::option::Option::Some"
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.associated,
                                  [],
                                  "clone",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "core::iter::adapters::intersperse::Intersperse",
                                    "separator"
                                  |)
                                ]
                              |)
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let _ :=
                          M.write (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "core::iter::adapters::intersperse::Intersperse",
                              "needs_sep"
                            |),
                            Value.Bool true
                          |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::iter::adapters::peekable::Peekable") [ I ],
                              [],
                              "next",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "core::iter::adapters::intersperse::Intersperse",
                                "iter"
                              |)
                            ]
                          |)
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn fold<B, F>(self, init: B, f: F) -> B
            where
                Self: Sized,
                F: FnMut(B, Self::Item) -> B,
            {
                let separator = self.separator;
                intersperse_fold(self.iter, init, f, move || separator.clone(), self.needs_sep)
            }
        *)
        Definition fold (I : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I in
          match τ, α with
          | [ B; F ], [ self; init; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let init := M.alloc (| init |) in
              let f := M.alloc (| f |) in
              M.read (|
                let separator :=
                  M.copy (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "core::iter::adapters::intersperse::Intersperse",
                      "separator"
                    |)
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::iter::adapters::intersperse::intersperse_fold",
                      [
                        Ty.apply (Ty.path "core::iter::adapters::peekable::Peekable") [ I ];
                        B;
                        F;
                        Ty.function [ Ty.tuple [] ] Ty.associated
                      ]
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "core::iter::adapters::intersperse::Intersperse",
                          "iter"
                        |)
                      |);
                      M.read (| init |);
                      M.read (| f |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.associated,
                                          [],
                                          "clone",
                                          []
                                        |),
                                        [ separator ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end));
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "core::iter::adapters::intersperse::Intersperse",
                          "needs_sep"
                        |)
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn size_hint(&self) -> (usize, Option<usize>) {
                intersperse_size_hint(&self.iter, self.needs_sep)
            }
        *)
        Definition size_hint (I : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_function (|
                  "core::iter::adapters::intersperse::intersperse_size_hint",
                  [ Ty.apply (Ty.path "core::iter::adapters::peekable::Peekable") [ I ] ]
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "core::iter::adapters::intersperse::Intersperse",
                    "iter"
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "core::iter::adapters::intersperse::Intersperse",
                      "needs_sep"
                    |)
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (I : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::iterator::Iterator"
            (Self I)
            (* Trait polymorphic types *) []
            (* Instance *)
            [
              ("Item", InstanceField.Ty (_Item I));
              ("next", InstanceField.Method (next I));
              ("fold", InstanceField.Method (fold I));
              ("size_hint", InstanceField.Method (size_hint I))
            ].
      End Impl_core_iter_traits_iterator_Iterator_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_associated_type_for_core_iter_adapters_intersperse_Intersperse_I.
      
      (* StructRecord
        {
          name := "IntersperseWith";
          ty_params := [ "I"; "G" ];
          fields :=
            [
              ("separator", G);
              ("iter", Ty.apply (Ty.path "core::iter::adapters::peekable::Peekable") [ I ]);
              ("needs_sep", Ty.path "bool")
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_iter_traits_iterator_Iterator_I_where_core_fmt_Debug_I_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_G_for_core_iter_adapters_intersperse_IntersperseWith_I_G.
        Definition Self (I G : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::IntersperseWith") [ I; G ].
        
        (*
            fn fmt(&self, f: &mut crate::fmt::Formatter<'_>) -> crate::fmt::Result {
                f.debug_struct("IntersperseWith")
                    .field("separator", &self.separator)
                    .field("iter", &self.iter)
                    .field("needs_sep", &self.needs_sep)
                    .finish()
            }
        *)
        Definition fmt (I G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I G in
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::builders::DebugStruct",
                  "finish",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "core::fmt::builders::DebugStruct",
                      "field",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::builders::DebugStruct",
                          "field",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::builders::DebugStruct",
                              "field",
                              []
                            |),
                            [
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Formatter",
                                    "debug_struct",
                                    []
                                  |),
                                  [ M.read (| f |); M.read (| Value.String "IntersperseWith" |) ]
                                |)
                              |);
                              M.read (| Value.String "separator" |);
                              (* Unsize *)
                              M.pointer_coercion
                                (M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "core::iter::adapters::intersperse::IntersperseWith",
                                  "separator"
                                |))
                            ]
                          |);
                          M.read (| Value.String "iter" |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "core::iter::adapters::intersperse::IntersperseWith",
                              "iter"
                            |))
                        ]
                      |);
                      M.read (| Value.String "needs_sep" |);
                      (* Unsize *)
                      M.pointer_coercion
                        (M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "core::iter::adapters::intersperse::IntersperseWith",
                          "needs_sep"
                        |))
                    ]
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (I G : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (Self I G)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method (fmt I G)) ].
      End Impl_core_fmt_Debug_where_core_iter_traits_iterator_Iterator_I_where_core_fmt_Debug_I_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_G_for_core_iter_adapters_intersperse_IntersperseWith_I_G.
      
      Module Impl_core_clone_Clone_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_I_where_core_clone_Clone_associated_type_where_core_clone_Clone_G_for_core_iter_adapters_intersperse_IntersperseWith_I_G.
        Definition Self (I G : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::IntersperseWith") [ I; G ].
        
        (*
            fn clone(&self) -> Self {
                IntersperseWith {
                    separator: self.separator.clone(),
                    iter: self.iter.clone(),
                    needs_sep: self.needs_sep.clone(),
                }
            }
        *)
        Definition clone (I G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I G in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "core::iter::adapters::intersperse::IntersperseWith"
                [
                  ("separator",
                    M.call_closure (|
                      M.get_trait_method (| "core::clone::Clone", G, [], "clone", [] |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "core::iter::adapters::intersperse::IntersperseWith",
                          "separator"
                        |)
                      ]
                    |));
                  ("iter",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply (Ty.path "core::iter::adapters::peekable::Peekable") [ I ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "core::iter::adapters::intersperse::IntersperseWith",
                          "iter"
                        |)
                      ]
                    |));
                  ("needs_sep",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "bool",
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "core::iter::adapters::intersperse::IntersperseWith",
                          "needs_sep"
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (I G : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (Self I G)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method (clone I G)) ].
      End Impl_core_clone_Clone_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_I_where_core_clone_Clone_associated_type_where_core_clone_Clone_G_for_core_iter_adapters_intersperse_IntersperseWith_I_G.
      
      Module Impl_core_iter_adapters_intersperse_IntersperseWith_I_G.
        Definition Self (I G : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::IntersperseWith") [ I; G ].
        
        (*
            pub(in crate::iter) fn new(iter: I, separator: G) -> Self {
                Self { iter: iter.peekable(), separator, needs_sep: false }
            }
        *)
        Definition new (I G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I G in
          match τ, α with
          | [], [ iter; separator ] =>
            ltac:(M.monadic
              (let iter := M.alloc (| iter |) in
              let separator := M.alloc (| separator |) in
              Value.StructRecord
                "core::iter::adapters::intersperse::IntersperseWith"
                [
                  ("iter",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        I,
                        [],
                        "peekable",
                        []
                      |),
                      [ M.read (| iter |) ]
                    |));
                  ("separator", M.read (| separator |));
                  ("needs_sep", Value.Bool false)
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_new :
          forall (I G : Ty.t),
          M.IsAssociatedFunction (Self I G) "new" (new I G).
      End Impl_core_iter_adapters_intersperse_IntersperseWith_I_G.
      
      Module Impl_core_iter_traits_iterator_Iterator_where_core_iter_traits_iterator_Iterator_I_where_core_ops_function_FnMut_G_Tuple__for_core_iter_adapters_intersperse_IntersperseWith_I_G.
        Definition Self (I G : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::IntersperseWith") [ I; G ].
        
        (*     type Item = I::Item; *)
        Definition _Item (I G : Ty.t) : Ty.t := Ty.associated.
        
        (*
            fn next(&mut self) -> Option<I::Item> {
                if self.needs_sep && self.iter.peek().is_some() {
                    self.needs_sep = false;
                    Some((self.separator)())
                } else {
                    self.needs_sep = true;
                    self.iter.next()
                }
            }
        *)
        Definition next (I G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I G in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.and (|
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "core::iter::adapters::intersperse::IntersperseWith",
                                    "needs_sep"
                                  |)
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                      "is_some",
                                      []
                                    |),
                                    [
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::peekable::Peekable")
                                              [ I ],
                                            "peek",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "core::iter::adapters::intersperse::IntersperseWith",
                                              "iter"
                                            |)
                                          ]
                                        |)
                                      |)
                                    ]
                                  |)))
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let _ :=
                          M.write (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "core::iter::adapters::intersperse::IntersperseWith",
                              "needs_sep"
                            |),
                            Value.Bool false
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::option::Option::Some"
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::function::FnMut",
                                  G,
                                  [ Ty.tuple [] ],
                                  "call_mut",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "core::iter::adapters::intersperse::IntersperseWith",
                                    "separator"
                                  |);
                                  Value.Tuple []
                                ]
                              |)
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let _ :=
                          M.write (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "core::iter::adapters::intersperse::IntersperseWith",
                              "needs_sep"
                            |),
                            Value.Bool true
                          |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::iter::adapters::peekable::Peekable") [ I ],
                              [],
                              "next",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "core::iter::adapters::intersperse::IntersperseWith",
                                "iter"
                              |)
                            ]
                          |)
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn fold<B, F>(self, init: B, f: F) -> B
            where
                Self: Sized,
                F: FnMut(B, Self::Item) -> B,
            {
                intersperse_fold(self.iter, init, f, self.separator, self.needs_sep)
            }
        *)
        Definition fold (I G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I G in
          match τ, α with
          | [ B; F ], [ self; init; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let init := M.alloc (| init |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_function (|
                  "core::iter::adapters::intersperse::intersperse_fold",
                  [ Ty.apply (Ty.path "core::iter::adapters::peekable::Peekable") [ I ]; B; F; G ]
                |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "core::iter::adapters::intersperse::IntersperseWith",
                      "iter"
                    |)
                  |);
                  M.read (| init |);
                  M.read (| f |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "core::iter::adapters::intersperse::IntersperseWith",
                      "separator"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "core::iter::adapters::intersperse::IntersperseWith",
                      "needs_sep"
                    |)
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn size_hint(&self) -> (usize, Option<usize>) {
                intersperse_size_hint(&self.iter, self.needs_sep)
            }
        *)
        Definition size_hint (I G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I G in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_function (|
                  "core::iter::adapters::intersperse::intersperse_size_hint",
                  [ Ty.apply (Ty.path "core::iter::adapters::peekable::Peekable") [ I ] ]
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "core::iter::adapters::intersperse::IntersperseWith",
                    "iter"
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "core::iter::adapters::intersperse::IntersperseWith",
                      "needs_sep"
                    |)
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (I G : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::iterator::Iterator"
            (Self I G)
            (* Trait polymorphic types *) []
            (* Instance *)
            [
              ("Item", InstanceField.Ty (_Item I G));
              ("next", InstanceField.Method (next I G));
              ("fold", InstanceField.Method (fold I G));
              ("size_hint", InstanceField.Method (size_hint I G))
            ].
      End Impl_core_iter_traits_iterator_Iterator_where_core_iter_traits_iterator_Iterator_I_where_core_ops_function_FnMut_G_Tuple__for_core_iter_adapters_intersperse_IntersperseWith_I_G.
      
      (*
      fn intersperse_size_hint<I>(iter: &I, needs_sep: bool) -> (usize, Option<usize>)
      where
          I: Iterator,
      {
          let (lo, hi) = iter.size_hint();
          let next_is_elem = !needs_sep;
          (
              lo.saturating_sub(next_is_elem as usize).saturating_add(lo),
              hi.and_then(|hi| hi.saturating_sub(next_is_elem as usize).checked_add(hi)),
          )
      }
      *)
      Definition intersperse_size_hint (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ _ as I ], [ iter; needs_sep ] =>
          ltac:(M.monadic
            (let iter := M.alloc (| iter |) in
            let needs_sep := M.alloc (| needs_sep |) in
            M.read (|
              M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      I,
                      [],
                      "size_hint",
                      []
                    |),
                    [ M.read (| iter |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let lo := M.copy (| γ0_0 |) in
                      let hi := M.copy (| γ0_1 |) in
                      let next_is_elem := M.alloc (| UnOp.Pure.not (M.read (| needs_sep |)) |) in
                      M.alloc (|
                        Value.Tuple
                          [
                            M.call_closure (|
                              M.get_associated_function (| Ty.path "usize", "saturating_add", [] |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "usize",
                                    "saturating_sub",
                                    []
                                  |),
                                  [ M.read (| lo |); M.rust_cast (M.read (| next_is_elem |)) ]
                                |);
                                M.read (| lo |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ],
                                "and_then",
                                [
                                  Ty.path "usize";
                                  Ty.function
                                    [ Ty.tuple [ Ty.path "usize" ] ]
                                    (Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ])
                                ]
                              |),
                              [
                                M.read (| hi |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let hi := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "usize",
                                                    "checked_add",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path "usize",
                                                        "saturating_sub",
                                                        []
                                                      |),
                                                      [
                                                        M.read (| hi |);
                                                        M.rust_cast (M.read (| next_is_elem |))
                                                      ]
                                                    |);
                                                    M.read (| hi |)
                                                  ]
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |)
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      (*
      fn intersperse_fold<I, B, F, G>(
          mut iter: I,
          init: B,
          mut f: F,
          mut separator: G,
          needs_sep: bool,
      ) -> B
      where
          I: Iterator,
          F: FnMut(B, I::Item) -> B,
          G: FnMut() -> I::Item,
      {
          let mut accum = init;
      
          if !needs_sep {
              if let Some(x) = iter.next() {
                  accum = f(accum, x);
              } else {
                  return accum;
              }
          }
      
          iter.fold(accum, |mut accum, x| {
              accum = f(accum, separator());
              accum = f(accum, x);
              accum
          })
      }
      *)
      Definition intersperse_fold (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ _ as I; B; F; G ], [ iter; init; f; separator; needs_sep ] =>
          ltac:(M.monadic
            (let iter := M.alloc (| iter |) in
            let init := M.alloc (| init |) in
            let f := M.alloc (| f |) in
            let separator := M.alloc (| separator |) in
            let needs_sep := M.alloc (| needs_sep |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let accum := M.copy (| init |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use (M.alloc (| UnOp.Pure.not (M.read (| needs_sep |)) |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            I,
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let x := M.copy (| γ0_0 |) in
                                    let _ :=
                                      M.write (|
                                        accum,
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::function::FnMut",
                                            F,
                                            [ Ty.tuple [ B; Ty.associated ] ],
                                            "call_mut",
                                            []
                                          |),
                                          [ f; Value.Tuple [ M.read (| accum |); M.read (| x |) ] ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.read (| M.return_ (| M.read (| accum |) |) |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        I,
                        [],
                        "fold",
                        [ B; Ty.function [ Ty.tuple [ B; Ty.associated ] ] B ]
                      |),
                      [
                        M.read (| iter |);
                        M.read (| accum |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0; α1 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let accum := M.copy (| γ |) in
                                        M.match_operator (|
                                          M.alloc (| α1 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let x := M.copy (| γ |) in
                                                M.read (|
                                                  let _ :=
                                                    M.write (|
                                                      accum,
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::function::FnMut",
                                                          F,
                                                          [ Ty.tuple [ B; Ty.associated ] ],
                                                          "call_mut",
                                                          []
                                                        |),
                                                        [
                                                          f;
                                                          Value.Tuple
                                                            [
                                                              M.read (| accum |);
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::function::FnMut",
                                                                  G,
                                                                  [ Ty.tuple [] ],
                                                                  "call_mut",
                                                                  []
                                                                |),
                                                                [ separator; Value.Tuple [] ]
                                                              |)
                                                            ]
                                                        ]
                                                      |)
                                                    |) in
                                                  let _ :=
                                                    M.write (|
                                                      accum,
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::function::FnMut",
                                                          F,
                                                          [ Ty.tuple [ B; Ty.associated ] ],
                                                          "call_mut",
                                                          []
                                                        |),
                                                        [
                                                          f;
                                                          Value.Tuple
                                                            [ M.read (| accum |); M.read (| x |) ]
                                                        ]
                                                      |)
                                                    |) in
                                                  accum
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
    End intersperse.
  End adapters.
End iter.
