(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module iter.
  Module adapters.
    Module intersperse.
      (* StructRecord
        {
          name := "Intersperse";
          const_params := [];
          ty_params := [ "I" ];
          fields :=
            [
              ("started", Ty.path "bool");
              ("separator",
                Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item");
              ("next_item",
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item"
                  ]);
              ("iter", Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_I_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_where_core_fmt_Debug_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_where_core_fmt_Debug_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_for_core_iter_adapters_intersperse_Intersperse_I.
        Definition Self (I : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::Intersperse") [] [ I ].
        
        (* Debug *)
        Definition fmt (I : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "core::iter::adapters::intersperse::Intersperse") [] [ I ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field4_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Intersperse" |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "started" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.path "bool" ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "core::iter::adapters::intersperse::Intersperse",
                              "started"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "separator" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            I
                            "Item"
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "core::iter::adapters::intersperse::Intersperse",
                              "separator"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "next_item" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.associated_in_trait
                                "core::iter::traits::iterator::Iterator"
                                []
                                []
                                I
                                "Item"
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "core::iter::adapters::intersperse::Intersperse",
                              "next_item"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "iter" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ] ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ] ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "core::iter::adapters::intersperse::Intersperse",
                                  "iter"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (I : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt I)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_I_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_where_core_fmt_Debug_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_where_core_fmt_Debug_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_for_core_iter_adapters_intersperse_Intersperse_I.
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_I_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_where_core_clone_Clone_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_where_core_clone_Clone_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_for_core_iter_adapters_intersperse_Intersperse_I.
        Definition Self (I : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::Intersperse") [] [ I ].
        
        (* Clone *)
        Definition clone (I : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "core::iter::adapters::intersperse::Intersperse") [] [ I ]
                    ],
                  self
                |) in
              Value.mkStructRecord
                "core::iter::adapters::intersperse::Intersperse"
                []
                [ I ]
                [
                  ("started",
                    M.call_closure (|
                      Ty.path "bool",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "bool",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "core::iter::adapters::intersperse::Intersperse",
                                "started"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("separator",
                    M.call_closure (|
                      Ty.associated_in_trait
                        "core::iter::traits::iterator::Iterator"
                        []
                        []
                        I
                        "Item",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          I
                          "Item",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "core::iter::adapters::intersperse::Intersperse",
                                "separator"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("next_item",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            I
                            "Item"
                        ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.associated_in_trait
                              "core::iter::traits::iterator::Iterator"
                              []
                              []
                              I
                              "Item"
                          ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "core::iter::adapters::intersperse::Intersperse",
                                "next_item"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("iter",
                    M.call_closure (|
                      Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "core::iter::adapters::intersperse::Intersperse",
                                "iter"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (I : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I)
            (* Instance *) [ ("clone", InstanceField.Method (clone I)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_I_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_where_core_clone_Clone_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_where_core_clone_Clone_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_for_core_iter_adapters_intersperse_Intersperse_I.
      
      Module Impl_core_iter_traits_marker_FusedIterator_where_core_iter_traits_marker_FusedIterator_I_where_core_clone_Clone_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_for_core_iter_adapters_intersperse_Intersperse_I.
        Definition Self (I : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::Intersperse") [] [ I ].
        
        Axiom Implements :
          forall (I : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::marker::FusedIterator"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I)
            (* Instance *) [].
      End Impl_core_iter_traits_marker_FusedIterator_where_core_iter_traits_marker_FusedIterator_I_where_core_clone_Clone_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_for_core_iter_adapters_intersperse_Intersperse_I.
      
      Module Impl_core_iter_adapters_intersperse_Intersperse_I.
        Definition Self (I : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::Intersperse") [] [ I ].
        
        (*
            pub(in crate::iter) fn new(iter: I, separator: I::Item) -> Self {
                Self { started: false, separator, next_item: None, iter: iter.fuse() }
            }
        *)
        Definition new (I : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I in
          match ε, τ, α with
          | [], [], [ iter; separator ] =>
            ltac:(M.monadic
              (let iter := M.alloc (| I, iter |) in
              let separator :=
                M.alloc (|
                  Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item",
                  separator
                |) in
              Value.mkStructRecord
                "core::iter::adapters::intersperse::Intersperse"
                []
                [ I ]
                [
                  ("started", Value.Bool false);
                  ("separator", M.read (| separator |));
                  ("next_item",
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          I
                          "Item"
                      ]
                      []);
                  ("iter",
                    M.call_closure (|
                      Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        I,
                        [],
                        [],
                        "fuse",
                        [],
                        []
                      |),
                      [ M.read (| iter |) ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (I : Ty.t),
          M.IsAssociatedFunction.C (Self I) "new" (new I).
        Admitted.
        Global Typeclasses Opaque new.
      End Impl_core_iter_adapters_intersperse_Intersperse_I.
      
      Module Impl_core_iter_traits_iterator_Iterator_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_for_core_iter_adapters_intersperse_Intersperse_I.
        Definition Self (I : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::Intersperse") [] [ I ].
        
        (*     type Item = I::Item; *)
        Definition _Item (I : Ty.t) : Ty.t :=
          Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item".
        
        (*
            fn next(&mut self) -> Option<Self::Item> {
                if self.started {
                    if let Some(v) = self.next_item.take() {
                        Some(v)
                    } else {
                        let next_item = self.iter.next();
                        if next_item.is_some() {
                            self.next_item = next_item;
                            Some(self.separator.clone())
                        } else {
                            None
                        }
                    }
                } else {
                    self.started = true;
                    self.iter.next()
                }
            }
        *)
        Definition next (I : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [ Ty.apply (Ty.path "core::iter::adapters::intersperse::Intersperse") [] [ I ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item"
                  ],
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::iter::adapters::intersperse::Intersperse",
                            "started"
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.associated_in_trait
                              "core::iter::traits::iterator::Iterator"
                              []
                              []
                              I
                              "Item"
                          ],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "core::iter::traits::iterator::Iterator"
                                        []
                                        []
                                        I
                                        "Item"
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::iterator::Iterator"
                                          []
                                          []
                                          I
                                          "Item"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "core::iter::traits::iterator::Iterator"
                                            []
                                            []
                                            I
                                            "Item"
                                        ],
                                      "take",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "core::iter::adapters::intersperse::Intersperse",
                                          "next_item"
                                        |)
                                      |)
                                    ]
                                  |)
                                |) in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let v :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "core::iter::traits::iterator::Iterator"
                                    []
                                    []
                                    I
                                    "Item",
                                  γ0_0
                                |) in
                              Value.StructTuple
                                "core::option::Option::Some"
                                []
                                [
                                  Ty.associated_in_trait
                                    "core::iter::traits::iterator::Iterator"
                                    []
                                    []
                                    I
                                    "Item"
                                ]
                                [ M.read (| v |) ]));
                          fun γ =>
                            ltac:(M.monadic
                              (M.read (|
                                let~ next_item :
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::iterator::Iterator"
                                          []
                                          []
                                          I
                                          "Item"
                                      ] :=
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::iterator::Iterator"
                                          []
                                          []
                                          I
                                          "Item"
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::fuse::Fuse")
                                        []
                                        [ I ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "core::iter::adapters::intersperse::Intersperse",
                                          "iter"
                                        |)
                                      |)
                                    ]
                                  |) in
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "core::iter::traits::iterator::Iterator"
                                        []
                                        []
                                        I
                                        "Item"
                                    ],
                                  M.match_operator (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::iterator::Iterator"
                                          []
                                          []
                                          I
                                          "Item"
                                      ],
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                Ty.path "bool",
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "core::iter::traits::iterator::Iterator"
                                                          []
                                                          []
                                                          I
                                                          "Item"
                                                      ],
                                                    "is_some",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, next_item |) ]
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.write (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "core::iter::adapters::intersperse::Intersperse",
                                                  "next_item"
                                                |),
                                                M.read (| next_item |)
                                              |) in
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "core::iter::traits::iterator::Iterator"
                                                    []
                                                    []
                                                    I
                                                    "Item"
                                                ],
                                              Value.StructTuple
                                                "core::option::Option::Some"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "core::iter::traits::iterator::Iterator"
                                                    []
                                                    []
                                                    I
                                                    "Item"
                                                ]
                                                [
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "core::iter::traits::iterator::Iterator"
                                                      []
                                                      []
                                                      I
                                                      "Item",
                                                    M.get_trait_method (|
                                                      "core::clone::Clone",
                                                      Ty.associated_in_trait
                                                        "core::iter::traits::iterator::Iterator"
                                                        []
                                                        []
                                                        I
                                                        "Item",
                                                      [],
                                                      [],
                                                      "clone",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| self |) |),
                                                          "core::iter::adapters::intersperse::Intersperse",
                                                          "separator"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (Value.StructTuple
                                            "core::option::Option::None"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "core::iter::traits::iterator::Iterator"
                                                []
                                                []
                                                I
                                                "Item"
                                            ]
                                            []))
                                    ]
                                  |)
                                |)
                              |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.read (|
                        let~ _ : Ty.tuple [] :=
                          M.write (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "core::iter::adapters::intersperse::Intersperse",
                              "started"
                            |),
                            Value.Bool true
                          |) in
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.associated_in_trait
                                "core::iter::traits::iterator::Iterator"
                                []
                                []
                                I
                                "Item"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.associated_in_trait
                                  "core::iter::traits::iterator::Iterator"
                                  []
                                  []
                                  I
                                  "Item"
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ],
                              [],
                              [],
                              "next",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "core::iter::adapters::intersperse::Intersperse",
                                  "iter"
                                |)
                              |)
                            ]
                          |)
                        |)
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn size_hint(&self) -> (usize, Option<usize>) {
                intersperse_size_hint(&self.iter, self.started, self.next_item.is_some())
            }
        *)
        Definition size_hint (I : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "core::iter::adapters::intersperse::Intersperse") [] [ I ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.tuple
                  [
                    Ty.path "usize";
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ]
                  ],
                M.get_function (|
                  "core::iter::adapters::intersperse::intersperse_size_hint",
                  [],
                  [ Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ] ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "core::iter::adapters::intersperse::Intersperse",
                          "iter"
                        |)
                      |)
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::iter::adapters::intersperse::Intersperse",
                      "started"
                    |)
                  |);
                  M.call_closure (|
                    Ty.path "bool",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            I
                            "Item"
                        ],
                      "is_some",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "core::iter::adapters::intersperse::Intersperse",
                          "next_item"
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn fold<B, F>(self, init: B, f: F) -> B
            where
                Self: Sized,
                F: FnMut(B, Self::Item) -> B,
            {
                let separator = self.separator;
                intersperse_fold(
                    self.iter,
                    init,
                    f,
                    move || separator.clone(),
                    self.started,
                    self.next_item,
                )
            }
        *)
        Definition fold (I : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I in
          match ε, τ, α with
          | [], [ B; F ], [ self; init; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply (Ty.path "core::iter::adapters::intersperse::Intersperse") [] [ I ],
                  self
                |) in
              let init := M.alloc (| B, init |) in
              let f := M.alloc (| F, f |) in
              M.read (|
                let~ separator :
                    Ty.associated_in_trait
                      "core::iter::traits::iterator::Iterator"
                      []
                      []
                      I
                      "Item" :=
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "core::iter::adapters::intersperse::Intersperse",
                      "separator"
                    |)
                  |) in
                M.alloc (|
                  B,
                  M.call_closure (|
                    B,
                    M.get_function (|
                      "core::iter::adapters::intersperse::intersperse_fold",
                      [],
                      [
                        Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ];
                        B;
                        F;
                        Ty.function
                          []
                          (Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            I
                            "Item")
                      ]
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "core::iter::adapters::intersperse::Intersperse",
                          "iter"
                        |)
                      |);
                      M.read (| init |);
                      M.read (| f |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.associated_in_trait
                                    "core::iter::traits::iterator::Iterator"
                                    []
                                    []
                                    I
                                    "Item",
                                  M.alloc (| Ty.tuple [], α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.call_closure (|
                                          Ty.associated_in_trait
                                            "core::iter::traits::iterator::Iterator"
                                            []
                                            []
                                            I
                                            "Item",
                                          M.get_trait_method (|
                                            "core::clone::Clone",
                                            Ty.associated_in_trait
                                              "core::iter::traits::iterator::Iterator"
                                              []
                                              []
                                              I
                                              "Item",
                                            [],
                                            [],
                                            "clone",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, separator |) ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end));
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "core::iter::adapters::intersperse::Intersperse",
                          "started"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "core::iter::adapters::intersperse::Intersperse",
                          "next_item"
                        |)
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (I : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::iterator::Iterator"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I)
            (* Instance *)
            [
              ("Item", InstanceField.Ty (_Item I));
              ("next", InstanceField.Method (next I));
              ("size_hint", InstanceField.Method (size_hint I));
              ("fold", InstanceField.Method (fold I))
            ].
      End Impl_core_iter_traits_iterator_Iterator_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_for_core_iter_adapters_intersperse_Intersperse_I.
      
      (* StructRecord
        {
          name := "IntersperseWith";
          const_params := [];
          ty_params := [ "I"; "G" ];
          fields :=
            [
              ("started", Ty.path "bool");
              ("separator", G);
              ("next_item",
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item"
                  ]);
              ("iter", Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ])
            ];
        } *)
      
      Module Impl_core_iter_traits_marker_FusedIterator_where_core_iter_traits_marker_FusedIterator_I_where_core_ops_function_FnMut_G_Tuple__for_core_iter_adapters_intersperse_IntersperseWith_I_G.
        Definition Self (I G : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::IntersperseWith") [] [ I; G ].
        
        Axiom Implements :
          forall (I G : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::marker::FusedIterator"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I G)
            (* Instance *) [].
      End Impl_core_iter_traits_marker_FusedIterator_where_core_iter_traits_marker_FusedIterator_I_where_core_ops_function_FnMut_G_Tuple__for_core_iter_adapters_intersperse_IntersperseWith_I_G.
      
      Module Impl_core_fmt_Debug_where_core_iter_traits_iterator_Iterator_I_where_core_fmt_Debug_I_where_core_fmt_Debug_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_where_core_fmt_Debug_G_for_core_iter_adapters_intersperse_IntersperseWith_I_G.
        Definition Self (I G : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::IntersperseWith") [] [ I; G ].
        
        (*
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                f.debug_struct("IntersperseWith")
                    .field("started", &self.started)
                    .field("separator", &self.separator)
                    .field("iter", &self.iter)
                    .field("next_item", &self.next_item)
                    .finish()
            }
        *)
        Definition fmt (I G : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I G in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::intersperse::IntersperseWith")
                        []
                        [ I; G ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::builders::DebugStruct",
                  "finish",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::builders::DebugStruct" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::builders::DebugStruct",
                          "field",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.path "core::fmt::builders::DebugStruct" ],
                                M.get_associated_function (|
                                  Ty.path "core::fmt::builders::DebugStruct",
                                  "field",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.path "core::fmt::builders::DebugStruct" ],
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::builders::DebugStruct",
                                          "field",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [ Ty.path "core::fmt::builders::DebugStruct" ],
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::builders::DebugStruct",
                                                  "field",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.alloc (|
                                                      Ty.path "core::fmt::builders::DebugStruct",
                                                      M.call_closure (|
                                                        Ty.path "core::fmt::builders::DebugStruct",
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::Formatter",
                                                          "debug_struct",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (| M.read (| f |) |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              mk_str (| "IntersperseWith" |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| mk_str (| "started" |) |)
                                                  |);
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ]
                                                      ],
                                                    M.pointer_coercion
                                                      M.PointerCoercion.Unsize
                                                      (Ty.apply (Ty.path "&") [] [ Ty.path "bool" ])
                                                      (Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ]
                                                        ]),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| self |) |),
                                                              "core::iter::adapters::intersperse::IntersperseWith",
                                                              "started"
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| mk_str (| "separator" |) |)
                                          |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                            M.pointer_coercion
                                              M.PointerCoercion.Unsize
                                              (Ty.apply (Ty.path "&") [] [ G ])
                                              (Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| self |) |),
                                                      "core::iter::adapters::intersperse::IntersperseWith",
                                                      "separator"
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| mk_str (| "iter" |) |)
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::fuse::Fuse")
                                            []
                                            [ I ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "core::iter::adapters::intersperse::IntersperseWith",
                                              "iter"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "next_item" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "core::iter::traits::iterator::Iterator"
                                        []
                                        []
                                        I
                                        "Item"
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "core::iter::adapters::intersperse::IntersperseWith",
                                      "next_item"
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (I G : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I G)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt I G)) ].
      End Impl_core_fmt_Debug_where_core_iter_traits_iterator_Iterator_I_where_core_fmt_Debug_I_where_core_fmt_Debug_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_where_core_fmt_Debug_G_for_core_iter_adapters_intersperse_IntersperseWith_I_G.
      
      Module Impl_core_clone_Clone_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_I_where_core_clone_Clone_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_where_core_clone_Clone_G_for_core_iter_adapters_intersperse_IntersperseWith_I_G.
        Definition Self (I G : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::IntersperseWith") [] [ I; G ].
        
        (*
            fn clone(&self) -> Self {
                Self {
                    started: self.started,
                    separator: self.separator.clone(),
                    iter: self.iter.clone(),
                    next_item: self.next_item.clone(),
                }
            }
        *)
        Definition clone (I G : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I G in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::intersperse::IntersperseWith")
                        []
                        [ I; G ]
                    ],
                  self
                |) in
              Value.mkStructRecord
                "core::iter::adapters::intersperse::IntersperseWith"
                []
                [ I; G ]
                [
                  ("started",
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "core::iter::adapters::intersperse::IntersperseWith",
                        "started"
                      |)
                    |));
                  ("separator",
                    M.call_closure (|
                      G,
                      M.get_trait_method (| "core::clone::Clone", G, [], [], "clone", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::iter::adapters::intersperse::IntersperseWith",
                            "separator"
                          |)
                        |)
                      ]
                    |));
                  ("iter",
                    M.call_closure (|
                      Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::iter::adapters::intersperse::IntersperseWith",
                            "iter"
                          |)
                        |)
                      ]
                    |));
                  ("next_item",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            I
                            "Item"
                        ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.associated_in_trait
                              "core::iter::traits::iterator::Iterator"
                              []
                              []
                              I
                              "Item"
                          ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::iter::adapters::intersperse::IntersperseWith",
                            "next_item"
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (I G : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I G)
            (* Instance *) [ ("clone", InstanceField.Method (clone I G)) ].
      End Impl_core_clone_Clone_where_core_iter_traits_iterator_Iterator_I_where_core_clone_Clone_I_where_core_clone_Clone_associated_in_trait_core_iter_traits_iterator_Iterator___I_Item_where_core_clone_Clone_G_for_core_iter_adapters_intersperse_IntersperseWith_I_G.
      
      Module Impl_core_iter_adapters_intersperse_IntersperseWith_I_G.
        Definition Self (I G : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::IntersperseWith") [] [ I; G ].
        
        (*
            pub(in crate::iter) fn new(iter: I, separator: G) -> Self {
                Self { started: false, separator, next_item: None, iter: iter.fuse() }
            }
        *)
        Definition new (I G : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I G in
          match ε, τ, α with
          | [], [], [ iter; separator ] =>
            ltac:(M.monadic
              (let iter := M.alloc (| I, iter |) in
              let separator := M.alloc (| G, separator |) in
              Value.mkStructRecord
                "core::iter::adapters::intersperse::IntersperseWith"
                []
                [ I; G ]
                [
                  ("started", Value.Bool false);
                  ("separator", M.read (| separator |));
                  ("next_item",
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          I
                          "Item"
                      ]
                      []);
                  ("iter",
                    M.call_closure (|
                      Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        I,
                        [],
                        [],
                        "fuse",
                        [],
                        []
                      |),
                      [ M.read (| iter |) ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (I G : Ty.t),
          M.IsAssociatedFunction.C (Self I G) "new" (new I G).
        Admitted.
        Global Typeclasses Opaque new.
      End Impl_core_iter_adapters_intersperse_IntersperseWith_I_G.
      
      Module Impl_core_iter_traits_iterator_Iterator_where_core_iter_traits_iterator_Iterator_I_where_core_ops_function_FnMut_G_Tuple__for_core_iter_adapters_intersperse_IntersperseWith_I_G.
        Definition Self (I G : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::intersperse::IntersperseWith") [] [ I; G ].
        
        (*     type Item = I::Item; *)
        Definition _Item (I G : Ty.t) : Ty.t :=
          Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item".
        
        (*
            fn next(&mut self) -> Option<Self::Item> {
                if self.started {
                    if let Some(v) = self.next_item.take() {
                        Some(v)
                    } else {
                        let next_item = self.iter.next();
                        if next_item.is_some() {
                            self.next_item = next_item;
                            Some((self.separator)())
                        } else {
                            None
                        }
                    }
                } else {
                    self.started = true;
                    self.iter.next()
                }
            }
        *)
        Definition next (I G : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I G in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::intersperse::IntersperseWith")
                        []
                        [ I; G ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item"
                  ],
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::iter::adapters::intersperse::IntersperseWith",
                            "started"
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.associated_in_trait
                              "core::iter::traits::iterator::Iterator"
                              []
                              []
                              I
                              "Item"
                          ],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "core::iter::traits::iterator::Iterator"
                                        []
                                        []
                                        I
                                        "Item"
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::iterator::Iterator"
                                          []
                                          []
                                          I
                                          "Item"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "core::iter::traits::iterator::Iterator"
                                            []
                                            []
                                            I
                                            "Item"
                                        ],
                                      "take",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "core::iter::adapters::intersperse::IntersperseWith",
                                          "next_item"
                                        |)
                                      |)
                                    ]
                                  |)
                                |) in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let v :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "core::iter::traits::iterator::Iterator"
                                    []
                                    []
                                    I
                                    "Item",
                                  γ0_0
                                |) in
                              Value.StructTuple
                                "core::option::Option::Some"
                                []
                                [
                                  Ty.associated_in_trait
                                    "core::iter::traits::iterator::Iterator"
                                    []
                                    []
                                    I
                                    "Item"
                                ]
                                [ M.read (| v |) ]));
                          fun γ =>
                            ltac:(M.monadic
                              (M.read (|
                                let~ next_item :
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::iterator::Iterator"
                                          []
                                          []
                                          I
                                          "Item"
                                      ] :=
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::iterator::Iterator"
                                          []
                                          []
                                          I
                                          "Item"
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::fuse::Fuse")
                                        []
                                        [ I ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "core::iter::adapters::intersperse::IntersperseWith",
                                          "iter"
                                        |)
                                      |)
                                    ]
                                  |) in
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "core::iter::traits::iterator::Iterator"
                                        []
                                        []
                                        I
                                        "Item"
                                    ],
                                  M.match_operator (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::iterator::Iterator"
                                          []
                                          []
                                          I
                                          "Item"
                                      ],
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                Ty.path "bool",
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "core::iter::traits::iterator::Iterator"
                                                          []
                                                          []
                                                          I
                                                          "Item"
                                                      ],
                                                    "is_some",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, next_item |) ]
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.write (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "core::iter::adapters::intersperse::IntersperseWith",
                                                  "next_item"
                                                |),
                                                M.read (| next_item |)
                                              |) in
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "core::iter::traits::iterator::Iterator"
                                                    []
                                                    []
                                                    I
                                                    "Item"
                                                ],
                                              Value.StructTuple
                                                "core::option::Option::Some"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "core::iter::traits::iterator::Iterator"
                                                    []
                                                    []
                                                    I
                                                    "Item"
                                                ]
                                                [
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "core::iter::traits::iterator::Iterator"
                                                      []
                                                      []
                                                      I
                                                      "Item",
                                                    M.get_trait_method (|
                                                      "core::ops::function::FnMut",
                                                      G,
                                                      [],
                                                      [ Ty.tuple [] ],
                                                      "call_mut",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| self |) |),
                                                          "core::iter::adapters::intersperse::IntersperseWith",
                                                          "separator"
                                                        |)
                                                      |);
                                                      Value.Tuple []
                                                    ]
                                                  |)
                                                ]
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (Value.StructTuple
                                            "core::option::Option::None"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "core::iter::traits::iterator::Iterator"
                                                []
                                                []
                                                I
                                                "Item"
                                            ]
                                            []))
                                    ]
                                  |)
                                |)
                              |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.read (|
                        let~ _ : Ty.tuple [] :=
                          M.write (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "core::iter::adapters::intersperse::IntersperseWith",
                              "started"
                            |),
                            Value.Bool true
                          |) in
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.associated_in_trait
                                "core::iter::traits::iterator::Iterator"
                                []
                                []
                                I
                                "Item"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.associated_in_trait
                                  "core::iter::traits::iterator::Iterator"
                                  []
                                  []
                                  I
                                  "Item"
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ],
                              [],
                              [],
                              "next",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "core::iter::adapters::intersperse::IntersperseWith",
                                  "iter"
                                |)
                              |)
                            ]
                          |)
                        |)
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn size_hint(&self) -> (usize, Option<usize>) {
                intersperse_size_hint(&self.iter, self.started, self.next_item.is_some())
            }
        *)
        Definition size_hint
            (I G : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self I G in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::intersperse::IntersperseWith")
                        []
                        [ I; G ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.tuple
                  [
                    Ty.path "usize";
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ]
                  ],
                M.get_function (|
                  "core::iter::adapters::intersperse::intersperse_size_hint",
                  [],
                  [ Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ] ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "core::iter::adapters::intersperse::IntersperseWith",
                          "iter"
                        |)
                      |)
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::iter::adapters::intersperse::IntersperseWith",
                      "started"
                    |)
                  |);
                  M.call_closure (|
                    Ty.path "bool",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            I
                            "Item"
                        ],
                      "is_some",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "core::iter::adapters::intersperse::IntersperseWith",
                          "next_item"
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn fold<B, F>(self, init: B, f: F) -> B
            where
                Self: Sized,
                F: FnMut(B, Self::Item) -> B,
            {
                intersperse_fold(self.iter, init, f, self.separator, self.started, self.next_item)
            }
        *)
        Definition fold (I G : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I G in
          match ε, τ, α with
          | [], [ B; F ], [ self; init; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::intersperse::IntersperseWith")
                    []
                    [ I; G ],
                  self
                |) in
              let init := M.alloc (| B, init |) in
              let f := M.alloc (| F, f |) in
              M.call_closure (|
                B,
                M.get_function (|
                  "core::iter::adapters::intersperse::intersperse_fold",
                  [],
                  [ Ty.apply (Ty.path "core::iter::adapters::fuse::Fuse") [] [ I ]; B; F; G ]
                |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "core::iter::adapters::intersperse::IntersperseWith",
                      "iter"
                    |)
                  |);
                  M.read (| init |);
                  M.read (| f |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "core::iter::adapters::intersperse::IntersperseWith",
                      "separator"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "core::iter::adapters::intersperse::IntersperseWith",
                      "started"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "core::iter::adapters::intersperse::IntersperseWith",
                      "next_item"
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (I G : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::iterator::Iterator"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self I G)
            (* Instance *)
            [
              ("Item", InstanceField.Ty (_Item I G));
              ("next", InstanceField.Method (next I G));
              ("size_hint", InstanceField.Method (size_hint I G));
              ("fold", InstanceField.Method (fold I G))
            ].
      End Impl_core_iter_traits_iterator_Iterator_where_core_iter_traits_iterator_Iterator_I_where_core_ops_function_FnMut_G_Tuple__for_core_iter_adapters_intersperse_IntersperseWith_I_G.
      
      (*
      fn intersperse_size_hint<I>(iter: &I, started: bool, next_is_some: bool) -> (usize, Option<usize>)
      where
          I: Iterator,
      {
          let (lo, hi) = iter.size_hint();
          (
              lo.saturating_sub(!started as usize)
                  .saturating_add(next_is_some as usize)
                  .saturating_add(lo),
              hi.and_then(|hi| {
                  hi.saturating_sub(!started as usize)
                      .saturating_add(next_is_some as usize)
                      .checked_add(hi)
              }),
          )
      }
      *)
      Definition intersperse_size_hint (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ _ as I ], [ iter; started; next_is_some ] =>
          ltac:(M.monadic
            (let iter := M.alloc (| Ty.apply (Ty.path "&") [] [ I ], iter |) in
            let started := M.alloc (| Ty.path "bool", started |) in
            let next_is_some := M.alloc (| Ty.path "bool", next_is_some |) in
            M.match_operator (|
              Ty.tuple
                [ Ty.path "usize"; Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ]
                ],
              M.alloc (|
                Ty.tuple
                  [
                    Ty.path "usize";
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ]
                  ],
                M.call_closure (|
                  Ty.tuple
                    [
                      Ty.path "usize";
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ]
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    I,
                    [],
                    [],
                    "size_hint",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| iter |) |) |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let lo := M.copy (| Ty.path "usize", γ0_0 |) in
                    let hi :=
                      M.copy (|
                        Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                        γ0_1
                      |) in
                    Value.Tuple
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (| Ty.path "usize", "saturating_add", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.path "usize",
                                "saturating_add",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.path "usize",
                                    "saturating_sub",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| lo |);
                                    M.cast (Ty.path "usize") (UnOp.not (| M.read (| started |) |))
                                  ]
                                |);
                                M.cast (Ty.path "usize") (M.read (| next_is_some |))
                              ]
                            |);
                            M.read (| lo |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                            "and_then",
                            [],
                            [
                              Ty.path "usize";
                              Ty.function
                                [ Ty.path "usize" ]
                                (Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ])
                            ]
                          |),
                          [
                            M.read (| hi |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.alloc (| Ty.path "usize", α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let hi := M.copy (| Ty.path "usize", γ |) in
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.path "usize" ],
                                                M.get_associated_function (|
                                                  Ty.path "usize",
                                                  "checked_add",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_associated_function (|
                                                      Ty.path "usize",
                                                      "saturating_add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_associated_function (|
                                                          Ty.path "usize",
                                                          "saturating_sub",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (| hi |);
                                                          M.cast
                                                            (Ty.path "usize")
                                                            (UnOp.not (| M.read (| started |) |))
                                                        ]
                                                      |);
                                                      M.cast
                                                        (Ty.path "usize")
                                                        (M.read (| next_is_some |))
                                                    ]
                                                  |);
                                                  M.read (| hi |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_intersperse_size_hint :
        M.IsFunction.C
          "core::iter::adapters::intersperse::intersperse_size_hint"
          intersperse_size_hint.
      Admitted.
      Global Typeclasses Opaque intersperse_size_hint.
      
      (*
      fn intersperse_fold<I, B, F, G>(
          mut iter: I,
          init: B,
          mut f: F,
          mut separator: G,
          started: bool,
          mut next_item: Option<I::Item>,
      ) -> B
      where
          I: Iterator,
          F: FnMut(B, I::Item) -> B,
          G: FnMut() -> I::Item,
      {
          let mut accum = init;
      
          let first = if started { next_item.take() } else { iter.next() };
          if let Some(x) = first {
              accum = f(accum, x);
          }
      
          iter.fold(accum, |mut accum, x| {
              accum = f(accum, separator());
              accum = f(accum, x);
              accum
          })
      }
      *)
      Definition intersperse_fold (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ _ as I; B; F; G ], [ iter; init; f; separator; started; next_item ] =>
          ltac:(M.monadic
            (let iter := M.alloc (| I, iter |) in
            let init := M.alloc (| B, init |) in
            let f := M.alloc (| F, f |) in
            let separator := M.alloc (| G, separator |) in
            let started := M.alloc (| Ty.path "bool", started |) in
            let next_item :=
              M.alloc (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item"
                  ],
                next_item
              |) in
            M.read (|
              let~ accum : B := M.read (| init |) in
              let~ first :
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item"
                    ] :=
                M.match_operator (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item"
                    ],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use started in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.associated_in_trait
                                "core::iter::traits::iterator::Iterator"
                                []
                                []
                                I
                                "Item"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.associated_in_trait
                                  "core::iter::traits::iterator::Iterator"
                                  []
                                  []
                                  I
                                  "Item"
                              ],
                            "take",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, next_item |) ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.associated_in_trait
                                "core::iter::traits::iterator::Iterator"
                                []
                                []
                                I
                                "Item"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            I,
                            [],
                            [],
                            "next",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, iter |) ]
                        |)))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := first in
                        let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let x :=
                          M.copy (|
                            Ty.associated_in_trait
                              "core::iter::traits::iterator::Iterator"
                              []
                              []
                              I
                              "Item",
                            γ0_0
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.write (|
                              accum,
                              M.call_closure (|
                                B,
                                M.get_trait_method (|
                                  "core::ops::function::FnMut",
                                  F,
                                  [],
                                  [
                                    Ty.tuple
                                      [
                                        B;
                                        Ty.associated_in_trait
                                          "core::iter::traits::iterator::Iterator"
                                          []
                                          []
                                          I
                                          "Item"
                                      ]
                                  ],
                                  "call_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, f |);
                                  Value.Tuple [ M.read (| accum |); M.read (| x |) ]
                                ]
                              |)
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                B,
                M.call_closure (|
                  B,
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    I,
                    [],
                    [],
                    "fold",
                    [],
                    [
                      B;
                      Ty.function
                        [
                          B;
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            I
                            "Item"
                        ]
                        B
                    ]
                  |),
                  [
                    M.read (| iter |);
                    M.read (| accum |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0; α1 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                B,
                                M.alloc (| B, α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let accum := M.copy (| B, γ |) in
                                      M.match_operator (|
                                        B,
                                        M.alloc (|
                                          Ty.associated_in_trait
                                            "core::iter::traits::iterator::Iterator"
                                            []
                                            []
                                            I
                                            "Item",
                                          α1
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x :=
                                                M.copy (|
                                                  Ty.associated_in_trait
                                                    "core::iter::traits::iterator::Iterator"
                                                    []
                                                    []
                                                    I
                                                    "Item",
                                                  γ
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.write (|
                                                    accum,
                                                    M.call_closure (|
                                                      B,
                                                      M.get_trait_method (|
                                                        "core::ops::function::FnMut",
                                                        F,
                                                        [],
                                                        [
                                                          Ty.tuple
                                                            [
                                                              B;
                                                              Ty.associated_in_trait
                                                                "core::iter::traits::iterator::Iterator"
                                                                []
                                                                []
                                                                I
                                                                "Item"
                                                            ]
                                                        ],
                                                        "call_mut",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, f |);
                                                        Value.Tuple
                                                          [
                                                            M.read (| accum |);
                                                            M.call_closure (|
                                                              Ty.associated_in_trait
                                                                "core::iter::traits::iterator::Iterator"
                                                                []
                                                                []
                                                                I
                                                                "Item",
                                                              M.get_trait_method (|
                                                                "core::ops::function::FnMut",
                                                                G,
                                                                [],
                                                                [ Ty.tuple [] ],
                                                                "call_mut",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  separator
                                                                |);
                                                                Value.Tuple []
                                                              ]
                                                            |)
                                                          ]
                                                      ]
                                                    |)
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.write (|
                                                    accum,
                                                    M.call_closure (|
                                                      B,
                                                      M.get_trait_method (|
                                                        "core::ops::function::FnMut",
                                                        F,
                                                        [],
                                                        [
                                                          Ty.tuple
                                                            [
                                                              B;
                                                              Ty.associated_in_trait
                                                                "core::iter::traits::iterator::Iterator"
                                                                []
                                                                []
                                                                I
                                                                "Item"
                                                            ]
                                                        ],
                                                        "call_mut",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, f |);
                                                        Value.Tuple
                                                          [ M.read (| accum |); M.read (| x |) ]
                                                      ]
                                                    |)
                                                  |) in
                                                accum
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_intersperse_fold :
        M.IsFunction.C "core::iter::adapters::intersperse::intersperse_fold" intersperse_fold.
      Admitted.
      Global Typeclasses Opaque intersperse_fold.
    End intersperse.
  End adapters.
End iter.
