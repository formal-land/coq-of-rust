(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module iter.
  Module adapters.
    Module skip_while.
      (* StructRecord
        {
          name := "SkipWhile";
          ty_params := [ "I"; "P" ];
          fields := [ ("iter", I); ("flag", Ty.path "bool"); ("predicate", P) ];
        } *)
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_I_where_core_clone_Clone_P_for_core_iter_adapters_skip_while_SkipWhile_I_P.
        Definition Self (I P : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::skip_while::SkipWhile") [ I; P ].
        
        (* Clone *)
        Definition clone (I P : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I P in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "core::iter::adapters::skip_while::SkipWhile"
                [
                  ("iter",
                    M.call_closure (|
                      M.get_trait_method (| "core::clone::Clone", I, [], "clone", [] |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "core::iter::adapters::skip_while::SkipWhile",
                          "iter"
                        |)
                      ]
                    |));
                  ("flag",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "bool",
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "core::iter::adapters::skip_while::SkipWhile",
                          "flag"
                        |)
                      ]
                    |));
                  ("predicate",
                    M.call_closure (|
                      M.get_trait_method (| "core::clone::Clone", P, [], "clone", [] |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "core::iter::adapters::skip_while::SkipWhile",
                          "predicate"
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (I P : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (Self I P)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method (clone I P)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_I_where_core_clone_Clone_P_for_core_iter_adapters_skip_while_SkipWhile_I_P.
      
      Module Impl_core_iter_adapters_skip_while_SkipWhile_I_P.
        Definition Self (I P : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::skip_while::SkipWhile") [ I; P ].
        
        (*
            pub(in crate::iter) fn new(iter: I, predicate: P) -> SkipWhile<I, P> {
                SkipWhile { iter, flag: false, predicate }
            }
        *)
        Definition new (I P : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I P in
          match τ, α with
          | [], [ iter; predicate ] =>
            ltac:(M.monadic
              (let iter := M.alloc (| iter |) in
              let predicate := M.alloc (| predicate |) in
              Value.StructRecord
                "core::iter::adapters::skip_while::SkipWhile"
                [
                  ("iter", M.read (| iter |));
                  ("flag", Value.Bool false);
                  ("predicate", M.read (| predicate |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_new :
          forall (I P : Ty.t),
          M.IsAssociatedFunction (Self I P) "new" (new I P).
      End Impl_core_iter_adapters_skip_while_SkipWhile_I_P.
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_I_for_core_iter_adapters_skip_while_SkipWhile_I_P.
        Definition Self (I P : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::skip_while::SkipWhile") [ I; P ].
        
        (*
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                f.debug_struct("SkipWhile").field("iter", &self.iter).field("flag", &self.flag).finish()
            }
        *)
        Definition fmt (I P : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I P in
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::builders::DebugStruct",
                  "finish",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "core::fmt::builders::DebugStruct",
                      "field",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::builders::DebugStruct",
                          "field",
                          []
                        |),
                        [
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Formatter",
                                "debug_struct",
                                []
                              |),
                              [ M.read (| f |); M.read (| Value.String "SkipWhile" |) ]
                            |)
                          |);
                          M.read (| Value.String "iter" |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "core::iter::adapters::skip_while::SkipWhile",
                              "iter"
                            |))
                        ]
                      |);
                      M.read (| Value.String "flag" |);
                      (* Unsize *)
                      M.pointer_coercion
                        (M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "core::iter::adapters::skip_while::SkipWhile",
                          "flag"
                        |))
                    ]
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (I P : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (Self I P)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method (fmt I P)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_I_for_core_iter_adapters_skip_while_SkipWhile_I_P.
      
      Module Impl_core_iter_traits_iterator_Iterator_where_core_iter_traits_iterator_Iterator_I_where_core_ops_function_FnMut_P_Tuple_ref__associated_type__for_core_iter_adapters_skip_while_SkipWhile_I_P.
        Definition Self (I P : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::skip_while::SkipWhile") [ I; P ].
        
        (*     type Item = I::Item; *)
        Definition _Item (I P : Ty.t) : Ty.t := Ty.associated.
        
        (*
            fn next(&mut self) -> Option<I::Item> {
                fn check<'a, T>(
                    flag: &'a mut bool,
                    pred: &'a mut impl FnMut(&T) -> bool,
                ) -> impl FnMut(&T) -> bool + 'a {
                    move |x| {
                        if *flag || !pred(x) {
                            *flag = true;
                            true
                        } else {
                            false
                        }
                    }
                }
        
                let flag = &mut self.flag;
                let pred = &mut self.predicate;
                self.iter.find(check(flag, pred))
            }
        *)
        Definition next (I P : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I P in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                let~ flag :=
                  M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "core::iter::adapters::skip_while::SkipWhile",
                      "flag"
                    |)
                  |) in
                let~ pred :=
                  M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "core::iter::adapters::skip_while::SkipWhile",
                      "predicate"
                    |)
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      I,
                      [],
                      "find",
                      [ Ty.associated ]
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "core::iter::adapters::skip_while::SkipWhile",
                        "iter"
                      |);
                      M.call_closure (|
                        M.get_associated_function (| Self, "check.next", [] |),
                        [ M.read (| flag |); M.read (| pred |) ]
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn size_hint(&self) -> (usize, Option<usize>) {
                let (_, upper) = self.iter.size_hint();
                (0, upper) // can't know a lower bound, due to the predicate
            }
        *)
        Definition size_hint (I P : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I P in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        I,
                        [],
                        "size_hint",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "core::iter::adapters::skip_while::SkipWhile",
                          "iter"
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let upper := M.copy (| γ0_1 |) in
                        M.alloc (| Value.Tuple [ Value.Integer 0; M.read (| upper |) ] |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn try_fold<Acc, Fold, R>(&mut self, mut init: Acc, mut fold: Fold) -> R
            where
                Self: Sized,
                Fold: FnMut(Acc, Self::Item) -> R,
                R: Try<Output = Acc>,
            {
                if !self.flag {
                    match self.next() {
                        Some(v) => init = fold(init, v)?,
                        None => return try { init },
                    }
                }
                self.iter.try_fold(init, fold)
            }
        *)
        Definition try_fold (I P : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I P in
          match τ, α with
          | [ Acc; Fold; R ], [ self; init; fold ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let init := M.alloc (| init |) in
              let fold := M.alloc (| fold |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let~ _ :=
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.Pure.not
                                      (M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "core::iter::adapters::skip_while::SkipWhile",
                                          "flag"
                                        |)
                                      |))
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::skip_while::SkipWhile")
                                        [ I; P ],
                                      [],
                                      "next",
                                      []
                                    |),
                                    [ M.read (| self |) ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let v := M.copy (| γ0_0 |) in
                                      M.write (|
                                        init,
                                        M.read (|
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  R,
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::function::FnMut",
                                                      Fold,
                                                      [ Ty.tuple [ Acc; Ty.associated ] ],
                                                      "call_mut",
                                                      []
                                                    |),
                                                    [
                                                      fold;
                                                      Value.Tuple
                                                        [ M.read (| init |); M.read (| v |) ]
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              R,
                                                              [ Ty.associated ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  R,
                                                  [],
                                                  "from_output",
                                                  []
                                                |),
                                                [ M.read (| init |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)))
                                ]
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          I,
                          [],
                          "try_fold",
                          [ Acc; Fold; R ]
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "core::iter::adapters::skip_while::SkipWhile",
                            "iter"
                          |);
                          M.read (| init |);
                          M.read (| fold |)
                        ]
                      |)
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn fold<Acc, Fold>(mut self, mut init: Acc, mut fold: Fold) -> Acc
            where
                Fold: FnMut(Acc, Self::Item) -> Acc,
            {
                if !self.flag {
                    match self.next() {
                        Some(v) => init = fold(init, v),
                        None => return init,
                    }
                }
                self.iter.fold(init, fold)
            }
        *)
        Definition fold (I P : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self I P in
          match τ, α with
          | [ Acc; Fold ], [ self; init; fold ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let init := M.alloc (| init |) in
              let fold := M.alloc (| fold |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let~ _ :=
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.Pure.not
                                      (M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          self,
                                          "core::iter::adapters::skip_while::SkipWhile",
                                          "flag"
                                        |)
                                      |))
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::skip_while::SkipWhile")
                                        [ I; P ],
                                      [],
                                      "next",
                                      []
                                    |),
                                    [ self ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let v := M.copy (| γ0_0 |) in
                                      M.write (|
                                        init,
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::function::FnMut",
                                            Fold,
                                            [ Ty.tuple [ Acc; Ty.associated ] ],
                                            "call_mut",
                                            []
                                          |),
                                          [ fold; Value.Tuple [ M.read (| init |); M.read (| v |) ]
                                          ]
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (| M.return_ (| M.read (| init |) |) |)
                                        |)
                                      |)))
                                ]
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          I,
                          [],
                          "fold",
                          [ Acc; Fold ]
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "core::iter::adapters::skip_while::SkipWhile",
                              "iter"
                            |)
                          |);
                          M.read (| init |);
                          M.read (| fold |)
                        ]
                      |)
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (I P : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::iterator::Iterator"
            (Self I P)
            (* Trait polymorphic types *) []
            (* Instance *)
            [
              ("Item", InstanceField.Ty (_Item I P));
              ("next", InstanceField.Method (next I P));
              ("size_hint", InstanceField.Method (size_hint I P));
              ("try_fold", InstanceField.Method (try_fold I P));
              ("fold", InstanceField.Method (fold I P))
            ].
      End Impl_core_iter_traits_iterator_Iterator_where_core_iter_traits_iterator_Iterator_I_where_core_ops_function_FnMut_P_Tuple_ref__associated_type__for_core_iter_adapters_skip_while_SkipWhile_I_P.
      
      Module Impl_core_iter_traits_marker_FusedIterator_where_core_iter_traits_marker_FusedIterator_I_where_core_ops_function_FnMut_P_Tuple_ref__associated_type__for_core_iter_adapters_skip_while_SkipWhile_I_P.
        Definition Self (I P : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::skip_while::SkipWhile") [ I; P ].
        
        Axiom Implements :
          forall (I P : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::marker::FusedIterator"
            (Self I P)
            (* Trait polymorphic types *) []
            (* Instance *) [].
      End Impl_core_iter_traits_marker_FusedIterator_where_core_iter_traits_marker_FusedIterator_I_where_core_ops_function_FnMut_P_Tuple_ref__associated_type__for_core_iter_adapters_skip_while_SkipWhile_I_P.
      
      Module Impl_core_iter_traits_marker_TrustedFused_where_core_iter_traits_marker_TrustedFused_I_for_core_iter_adapters_skip_while_SkipWhile_I_P.
        Definition Self (I P : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::skip_while::SkipWhile") [ I; P ].
        
        Axiom Implements :
          forall (I P : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::marker::TrustedFused"
            (Self I P)
            (* Trait polymorphic types *) []
            (* Instance *) [].
      End Impl_core_iter_traits_marker_TrustedFused_where_core_iter_traits_marker_TrustedFused_I_for_core_iter_adapters_skip_while_SkipWhile_I_P.
      
      Module Impl_core_iter_adapters_SourceIter_where_core_iter_adapters_SourceIter_I_for_core_iter_adapters_skip_while_SkipWhile_I_P.
        Definition Self (P I : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::skip_while::SkipWhile") [ I; P ].
        
        (*     type Source = I::Source; *)
        Definition _Source (P I : Ty.t) : Ty.t := Ty.associated.
        
        (*
            unsafe fn as_inner(&mut self) -> &mut I::Source {
                // SAFETY: unsafe function forwarding to unsafe function with the same requirements
                unsafe { SourceIter::as_inner(&mut self.iter) }
            }
        *)
        Definition as_inner (P I : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self P I in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_trait_method (| "core::iter::adapters::SourceIter", I, [], "as_inner", [] |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "core::iter::adapters::skip_while::SkipWhile",
                    "iter"
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (P I : Ty.t),
          M.IsTraitInstance
            "core::iter::adapters::SourceIter"
            (Self P I)
            (* Trait polymorphic types *) []
            (* Instance *)
            [
              ("Source", InstanceField.Ty (_Source P I));
              ("as_inner", InstanceField.Method (as_inner P I))
            ].
      End Impl_core_iter_adapters_SourceIter_where_core_iter_adapters_SourceIter_I_for_core_iter_adapters_skip_while_SkipWhile_I_P.
      
      Module Impl_core_iter_traits_marker_InPlaceIterable_where_core_iter_traits_marker_InPlaceIterable_I_for_core_iter_adapters_skip_while_SkipWhile_I_F.
        Definition Self (I F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "core::iter::adapters::skip_while::SkipWhile") [ I; F ].
        
        (*     const EXPAND_BY: Option<NonZeroUsize> = I::EXPAND_BY; *)
        (* Ty.apply
          (Ty.path "core::option::Option")
          [ Ty.path "core::num::nonzero::NonZeroUsize" ] *)
        Definition value_EXPAND_BY (I F : Ty.t) : Value.t :=
          let Self : Ty.t := Self I F in
          M.run
            ltac:(M.monadic
              (M.get_constant (| "core::iter::traits::marker::InPlaceIterable::EXPAND_BY" |))).
        
        (*     const MERGE_BY: Option<NonZeroUsize> = I::MERGE_BY; *)
        (* Ty.apply
          (Ty.path "core::option::Option")
          [ Ty.path "core::num::nonzero::NonZeroUsize" ] *)
        Definition value_MERGE_BY (I F : Ty.t) : Value.t :=
          let Self : Ty.t := Self I F in
          M.run
            ltac:(M.monadic
              (M.get_constant (| "core::iter::traits::marker::InPlaceIterable::MERGE_BY" |))).
        
        Axiom Implements :
          forall (I F : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::marker::InPlaceIterable"
            (Self I F)
            (* Trait polymorphic types *) []
            (* Instance *)
            [
              ("value_EXPAND_BY", InstanceField.Constant (value_EXPAND_BY I F));
              ("value_MERGE_BY", InstanceField.Constant (value_MERGE_BY I F))
            ].
      End Impl_core_iter_traits_marker_InPlaceIterable_where_core_iter_traits_marker_InPlaceIterable_I_for_core_iter_adapters_skip_while_SkipWhile_I_F.
    End skip_while.
  End adapters.
End iter.
