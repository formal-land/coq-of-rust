(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module num.
  Module dec2flt.
    Module parse.
      Definition value_MIN_19DIGIT_INT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 1000000000000000000 |))).
      
      Global Instance Instance_IsConstant_value_MIN_19DIGIT_INT :
        M.IsFunction.C "core::num::dec2flt::parse::MIN_19DIGIT_INT" value_MIN_19DIGIT_INT.
      Admitted.
      Global Typeclasses Opaque value_MIN_19DIGIT_INT.
      
      (*
      fn parse_8digits(mut v: u64) -> u64 {
          const MASK: u64 = 0x0000_00FF_0000_00FF;
          const MUL1: u64 = 0x000F_4240_0000_0064;
          const MUL2: u64 = 0x0000_2710_0000_0001;
          v -= 0x3030_3030_3030_3030;
          v = (v * 10) + (v >> 8); // will not overflow, fits in 63 bits
          let v1 = (v & MASK).wrapping_mul(MUL1);
          let v2 = ((v >> 16) & MASK).wrapping_mul(MUL2);
          ((v1.wrapping_add(v2) >> 32) as u32) as u64
      }
      *)
      Definition parse_8digits (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ v ] =>
          ltac:(M.monadic
            (let v := M.alloc (| v |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  let β := v in
                  M.write (|
                    β,
                    M.call_closure (|
                      Ty.path "u64",
                      BinOp.Wrap.sub,
                      [ M.read (| β |); Value.Integer IntegerKind.U64 3472328296227680304 ]
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  M.write (|
                    v,
                    M.call_closure (|
                      Ty.path "u64",
                      BinOp.Wrap.add,
                      [
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.mul,
                          [ M.read (| v |); Value.Integer IntegerKind.U64 10 ]
                        |);
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.shr,
                          [ M.read (| v |); Value.Integer IntegerKind.I32 8 ]
                        |)
                      ]
                    |)
                  |)
                |) in
              let~ v1 : Ty.path "u64" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_associated_function (| Ty.path "u64", "wrapping_mul", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.bit_and,
                        [
                          M.read (| v |);
                          M.read (|
                            get_constant (|
                              "core::num::dec2flt::parse::parse_8digits::MASK",
                              Ty.path "u64"
                            |)
                          |)
                        ]
                      |);
                      M.read (|
                        get_constant (|
                          "core::num::dec2flt::parse::parse_8digits::MUL1",
                          Ty.path "u64"
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ v2 : Ty.path "u64" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_associated_function (| Ty.path "u64", "wrapping_mul", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.bit_and,
                        [
                          M.call_closure (|
                            Ty.path "u64",
                            BinOp.Wrap.shr,
                            [ M.read (| v |); Value.Integer IntegerKind.I32 16 ]
                          |);
                          M.read (|
                            get_constant (|
                              "core::num::dec2flt::parse::parse_8digits::MASK",
                              Ty.path "u64"
                            |)
                          |)
                        ]
                      |);
                      M.read (|
                        get_constant (|
                          "core::num::dec2flt::parse::parse_8digits::MUL2",
                          Ty.path "u64"
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                M.cast
                  (Ty.path "u64")
                  (M.cast
                    (Ty.path "u32")
                    (M.call_closure (|
                      Ty.path "u64",
                      BinOp.Wrap.shr,
                      [
                        M.call_closure (|
                          Ty.path "u64",
                          M.get_associated_function (| Ty.path "u64", "wrapping_add", [], [] |),
                          [ M.read (| v1 |); M.read (| v2 |) ]
                        |);
                        Value.Integer IntegerKind.I32 32
                      ]
                    |)))
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_parse_8digits :
        M.IsFunction.C "core::num::dec2flt::parse::parse_8digits" parse_8digits.
      Admitted.
      Global Typeclasses Opaque parse_8digits.
      
      Module parse_8digits.
        Definition value_MASK (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 1095216660735 |))).
        
        Global Instance Instance_IsConstant_value_MASK :
          M.IsFunction.C "core::num::dec2flt::parse::parse_8digits::MASK" value_MASK.
        Admitted.
        Global Typeclasses Opaque value_MASK.
        
        Definition value_MUL1 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 4294967296000100 |))).
        
        Global Instance Instance_IsConstant_value_MUL1 :
          M.IsFunction.C "core::num::dec2flt::parse::parse_8digits::MUL1" value_MUL1.
        Admitted.
        Global Typeclasses Opaque value_MUL1.
        
        Definition value_MUL2 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 42949672960001 |))).
        
        Global Instance Instance_IsConstant_value_MUL2 :
          M.IsFunction.C "core::num::dec2flt::parse::parse_8digits::MUL2" value_MUL2.
        Admitted.
        Global Typeclasses Opaque value_MUL2.
      End parse_8digits.
      
      (*
      fn try_parse_digits(mut s: &[u8], mut x: u64) -> (&[u8], u64) {
          // may cause overflows, to be handled later
      
          while s.len() >= 8 {
              let num = s.read_u64();
              if is_8digits(num) {
                  x = x.wrapping_mul(1_0000_0000).wrapping_add(parse_8digits(num));
                  s = &s[8..];
              } else {
                  break;
              }
          }
      
          s = s.parse_digits(|digit| {
              x = x.wrapping_mul(10).wrapping_add(digit as _);
          });
      
          (s, x)
      }
      *)
      Definition try_parse_digits (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ s; x ] =>
          ltac:(M.monadic
            (let s := M.alloc (| s |) in
            let x := M.alloc (| x |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.loop (|
                  Ty.tuple [],
                  ltac:(M.monadic
                    (M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ge,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| s |) |)
                                          |)
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ num : Ty.path "u64" :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "u64",
                                  M.get_trait_method (|
                                    "core::num::dec2flt::common::ByteSlice",
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    [],
                                    [],
                                    "read_u64",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                                |)
                              |) in
                            M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_function (|
                                              "core::num::dec2flt::common::is_8digits",
                                              [],
                                              []
                                            |),
                                            [ M.read (| num |) ]
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.write (|
                                          x,
                                          M.call_closure (|
                                            Ty.path "u64",
                                            M.get_associated_function (|
                                              Ty.path "u64",
                                              "wrapping_add",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "u64",
                                                M.get_associated_function (|
                                                  Ty.path "u64",
                                                  "wrapping_mul",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.read (| x |);
                                                  Value.Integer IntegerKind.U64 100000000
                                                ]
                                              |);
                                              M.call_closure (|
                                                Ty.path "u64",
                                                M.get_function (|
                                                  "core::num::dec2flt::parse::parse_8digits",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| num |) ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.write (|
                                          s,
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "u8" ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::index::Index",
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [ Ty.path "u8" ],
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::RangeFrom")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ],
                                                      "index",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| s |) |)
                                                      |);
                                                      Value.StructRecord
                                                        "core::ops::range::RangeFrom"
                                                        [
                                                          ("start",
                                                            Value.Integer IntegerKind.Usize 8)
                                                        ]
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                  M.alloc (| Value.Tuple [] |)
                                |)
                              |)
                            |)))
                      ]
                    |)))
                |) in
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  M.write (|
                    s,
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                          M.get_trait_method (|
                            "core::num::dec2flt::common::ByteSlice",
                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                            [],
                            [],
                            "parse_digits",
                            [],
                            [ Ty.function [ Ty.tuple [ Ty.path "u8" ] ] (Ty.tuple []) ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Some
                                          (Ty.function [ Ty.tuple [ Ty.path "u8" ] ] (Ty.tuple [])),
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let digit := M.copy (| γ |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.write (|
                                                      x,
                                                      M.call_closure (|
                                                        Ty.path "u64",
                                                        M.get_associated_function (|
                                                          Ty.path "u64",
                                                          "wrapping_add",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "u64",
                                                            M.get_associated_function (|
                                                              Ty.path "u64",
                                                              "wrapping_mul",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.read (| x |);
                                                              Value.Integer IntegerKind.U64 10
                                                            ]
                                                          |);
                                                          M.cast
                                                            (Ty.path "u64")
                                                            (M.read (| digit |))
                                                        ]
                                                      |)
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      |)
                    |)
                  |)
                |) in
              M.alloc (| Value.Tuple [ M.read (| s |); M.read (| x |) ] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_try_parse_digits :
        M.IsFunction.C "core::num::dec2flt::parse::try_parse_digits" try_parse_digits.
      Admitted.
      Global Typeclasses Opaque try_parse_digits.
      
      (*
      fn try_parse_19digits(s_ref: &mut &[u8], x: &mut u64) {
          let mut s = *s_ref;
      
          while *x < MIN_19DIGIT_INT {
              if let Some((c, s_next)) = s.split_first() {
                  let digit = c.wrapping_sub(b'0');
      
                  if digit < 10 {
                      *x = ( *x * 10) + digit as u64; // no overflows here
                      s = s_next;
                  } else {
                      break;
                  }
              } else {
                  break;
              }
          }
      
          *s_ref = s;
      }
      *)
      Definition try_parse_19digits (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ s_ref; x ] =>
          ltac:(M.monadic
            (let s_ref := M.alloc (| s_ref |) in
            let x := M.alloc (| x |) in
            M.read (|
              let~ s :
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] :=
                M.copy (| M.deref (| M.read (| s_ref |) |) |) in
              let~ _ : Ty.tuple [] :=
                M.loop (|
                  Ty.tuple [],
                  ltac:(M.monadic
                    (M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.lt,
                                    [
                                      M.read (| M.deref (| M.read (| x |) |) |);
                                      M.read (|
                                        get_constant (|
                                          "core::num::dec2flt::parse::MIN_19DIGIT_INT",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "u8" ];
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ]
                                                    ]
                                                ]
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                            "split_first",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| s |) |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                    let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                    let c := M.copy (| γ1_0 |) in
                                    let s_next := M.copy (| γ1_1 |) in
                                    let~ digit : Ty.path "u8" :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "u8",
                                          M.get_associated_function (|
                                            Ty.path "u8",
                                            "wrapping_sub",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| M.deref (| M.read (| c |) |) |);
                                            M.read (| UnsupportedLiteral |)
                                          ]
                                        |)
                                      |) in
                                    M.match_operator (|
                                      Some (Ty.tuple []),
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.lt,
                                                    [
                                                      M.read (| digit |);
                                                      Value.Integer IntegerKind.U8 10
                                                    ]
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.alloc (|
                                                M.write (|
                                                  M.deref (| M.read (| x |) |),
                                                  M.call_closure (|
                                                    Ty.path "u64",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "u64",
                                                        BinOp.Wrap.mul,
                                                        [
                                                          M.read (| M.deref (| M.read (| x |) |) |);
                                                          Value.Integer IntegerKind.U64 10
                                                        ]
                                                      |);
                                                      M.cast (Ty.path "u64") (M.read (| digit |))
                                                    ]
                                                  |)
                                                |)
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.alloc (|
                                                M.write (|
                                                  s,
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| s_next |) |)
                                                  |)
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)))
                                      ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                  M.alloc (| Value.Tuple [] |)
                                |)
                              |)
                            |)))
                      ]
                    |)))
                |) in
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  M.write (|
                    M.deref (| M.read (| s_ref |) |),
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |)
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_try_parse_19digits :
        M.IsFunction.C "core::num::dec2flt::parse::try_parse_19digits" try_parse_19digits.
      Admitted.
      Global Typeclasses Opaque try_parse_19digits.
      
      (*
      fn parse_scientific(s_ref: &mut &[u8]) -> Option<i64> {
          let mut exponent = 0i64;
          let mut negative = false;
      
          let mut s = *s_ref;
      
          if let Some((&c, s_next)) = s.split_first() {
              negative = c == b'-';
              if c == b'-' || c == b'+' {
                  s = s_next;
              }
          }
      
          if matches!(s.first(), Some(&x) if x.is_ascii_digit()) {
              *s_ref = s.parse_digits(|digit| {
                  // no overflows here, saturate well before overflow
                  if exponent < 0x10000 {
                      exponent = 10 * exponent + digit as i64;
                  }
              });
              if negative { Some(-exponent) } else { Some(exponent) }
          } else {
              *s_ref = s;
              None
          }
      }
      *)
      Definition parse_scientific (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ s_ref ] =>
          ltac:(M.monadic
            (let s_ref := M.alloc (| s_ref |) in
            M.read (|
              let~ exponent : Ty.path "i64" := M.alloc (| Value.Integer IntegerKind.I64 0 |) in
              let~ negative : Ty.path "bool" := M.alloc (| Value.Bool false |) in
              let~ s :
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] :=
                M.copy (| M.deref (| M.read (| s_ref |) |) |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply (Ty.path "&") [] [ Ty.path "u8" ];
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                    ]
                                ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                "split_first",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                            |)
                          |) in
                        let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let γ1_0 := M.read (| γ1_0 |) in
                        let c := M.copy (| γ1_0 |) in
                        let s_next := M.copy (| γ1_1 |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.write (|
                              negative,
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.eq,
                                [ M.read (| c |); M.read (| UnsupportedLiteral |) ]
                              |)
                            |)
                          |) in
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      LogicalOp.or (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.eq,
                                          [ M.read (| c |); M.read (| UnsupportedLiteral |) ]
                                        |),
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.eq,
                                            [ M.read (| c |); M.read (| UnsupportedLiteral |) ]
                                          |)))
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.write (|
                                      s,
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| s_next |) |)
                                      |)
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.match_operator (|
                Some (Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i64" ]),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.match_operator (|
                            Some (Ty.path "bool"),
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "first",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let γ0_0 := M.read (| γ0_0 |) in
                                  let x := M.copy (| γ0_0 |) in
                                  let γ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.path "u8",
                                          "is_ascii_digit",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, x |) ]
                                      |)
                                    |) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (| Value.Bool true |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
                            ]
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          M.write (|
                            M.deref (| M.read (| s_ref |) |),
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                  M.get_trait_method (|
                                    "core::num::dec2flt::common::ByteSlice",
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    [],
                                    [],
                                    "parse_digits",
                                    [],
                                    [ Ty.function [ Ty.tuple [ Ty.path "u8" ] ] (Ty.tuple []) ]
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Some
                                                  (Ty.function
                                                    [ Ty.tuple [ Ty.path "u8" ] ]
                                                    (Ty.tuple [])),
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let digit := M.copy (| γ |) in
                                                      M.read (|
                                                        M.match_operator (|
                                                          Some (Ty.tuple []),
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.path "bool",
                                                                        BinOp.lt,
                                                                        [
                                                                          M.read (| exponent |);
                                                                          Value.Integer
                                                                            IntegerKind.I64
                                                                            65536
                                                                        ]
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.alloc (|
                                                                    M.write (|
                                                                      exponent,
                                                                      M.call_closure (|
                                                                        Ty.path "i64",
                                                                        BinOp.Wrap.add,
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "i64",
                                                                            BinOp.Wrap.mul,
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.I64
                                                                                10;
                                                                              M.read (| exponent |)
                                                                            ]
                                                                          |);
                                                                          M.cast
                                                                            (Ty.path "i64")
                                                                            (M.read (| digit |))
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |)
                                                      |)))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |) in
                      M.match_operator (|
                        Some (Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i64" ]),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use negative in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                Value.StructTuple
                                  "core::option::Option::Some"
                                  [ UnOp.neg (| M.read (| exponent |) |) ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                Value.StructTuple
                                  "core::option::Option::Some"
                                  [ M.read (| exponent |) ]
                              |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          M.write (|
                            M.deref (| M.read (| s_ref |) |),
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |)
                          |)
                        |) in
                      M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_parse_scientific :
        M.IsFunction.C "core::num::dec2flt::parse::parse_scientific" parse_scientific.
      Admitted.
      Global Typeclasses Opaque parse_scientific.
      
      (*
      fn parse_partial_number(mut s: &[u8]) -> Option<(Number, usize)> {
          debug_assert!(!s.is_empty());
      
          // parse initial digits before dot
          let mut mantissa = 0_u64;
          let start = s;
          let tmp = try_parse_digits(s, mantissa);
          s = tmp.0;
          mantissa = tmp.1;
          let mut n_digits = s.offset_from(start);
      
          // handle dot with the following digits
          let mut n_after_dot = 0;
          let mut exponent = 0_i64;
          let int_end = s;
      
          if let Some((&b'.', s_next)) = s.split_first() {
              s = s_next;
              let before = s;
              let tmp = try_parse_digits(s, mantissa);
              s = tmp.0;
              mantissa = tmp.1;
              n_after_dot = s.offset_from(before);
              exponent = -n_after_dot as i64;
          }
      
          n_digits += n_after_dot;
          if n_digits == 0 {
              return None;
          }
      
          // handle scientific format
          let mut exp_number = 0_i64;
          if let Some((&c, s_next)) = s.split_first() {
              if c == b'e' || c == b'E' {
                  s = s_next;
                  // If None, we have no trailing digits after exponent, or an invalid float.
                  exp_number = parse_scientific(&mut s)?;
                  exponent += exp_number;
              }
          }
      
          let len = s.offset_from(start) as _;
      
          // handle uncommon case with many digits
          if n_digits <= 19 {
              return Some((Number { exponent, mantissa, negative: false, many_digits: false }, len));
          }
      
          n_digits -= 19;
          let mut many_digits = false;
          let mut p = start;
          while let Some((&c, p_next)) = p.split_first() {
              if c == b'.' || c == b'0' {
                  n_digits -= c.saturating_sub(b'0' - 1) as isize;
                  p = p_next;
              } else {
                  break;
              }
          }
          if n_digits > 0 {
              // at this point we have more than 19 significant digits, let's try again
              many_digits = true;
              mantissa = 0;
              let mut s = start;
              try_parse_19digits(&mut s, &mut mantissa);
              exponent = if mantissa >= MIN_19DIGIT_INT {
                  // big int
                  int_end.offset_from(s)
              } else {
                  s = &s[1..];
                  let before = s;
                  try_parse_19digits(&mut s, &mut mantissa);
                  -s.offset_from(before)
              } as i64;
              // add back the explicit part
              exponent += exp_number;
          }
      
          Some((Number { exponent, mantissa, negative: false, many_digits }, len))
      }
      *)
      Definition parse_partial_number (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ s ] =>
          ltac:(M.monadic
            (let s := M.alloc (| s |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            UnOp.not (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                                    "is_empty",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| s |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.call_closure (|
                                            Ty.path "never",
                                            M.get_function (| "core::panicking::panic", [], [] |),
                                            [ mk_str (| "assertion failed: !s.is_empty()" |) ]
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ mantissa : Ty.path "u64" := M.alloc (| Value.Integer IntegerKind.U64 0 |) in
                  let~ start :
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] :=
                    M.copy (| s |) in
                  let~ tmp :
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                          Ty.path "u64"
                        ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                            Ty.path "u64"
                          ],
                        M.get_function (| "core::num::dec2flt::parse::try_parse_digits", [], [] |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |);
                          M.read (| mantissa |)
                        ]
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.alloc (|
                      M.write (|
                        s,
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.read (| M.SubPointer.get_tuple_field (| tmp, 0 |) |) |)
                        |)
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.alloc (|
                      M.write (| mantissa, M.read (| M.SubPointer.get_tuple_field (| tmp, 1 |) |) |)
                    |) in
                  let~ n_digits : Ty.path "isize" :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "isize",
                        M.get_trait_method (|
                          "core::num::dec2flt::common::ByteSlice",
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                          [],
                          [],
                          "offset_from",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| start |) |) |)
                        ]
                      |)
                    |) in
                  let~ n_after_dot : Ty.path "isize" :=
                    M.alloc (| Value.Integer IntegerKind.Isize 0 |) in
                  let~ exponent : Ty.path "i64" := M.alloc (| Value.Integer IntegerKind.I64 0 |) in
                  let~ int_end :
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] :=
                    M.copy (| s |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply (Ty.path "&") [] [ Ty.path "u8" ];
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    "split_first",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                                |)
                              |) in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                            let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                            let γ1_0 := M.read (| γ1_0 |) in
                            let _ :=
                              is_constant_or_break_match (|
                                M.read (| γ1_0 |),
                                Value.Integer IntegerKind.U8 46
                              |) in
                            let s_next := M.copy (| γ1_1 |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (|
                                M.write (|
                                  s,
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s_next |) |) |)
                                |)
                              |) in
                            let~ before :
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] :=
                              M.copy (| s |) in
                            let~ tmp :
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                                    Ty.path "u64"
                                  ] :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                                      Ty.path "u64"
                                    ],
                                  M.get_function (|
                                    "core::num::dec2flt::parse::try_parse_digits",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |);
                                    M.read (| mantissa |)
                                  ]
                                |)
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (|
                                M.write (|
                                  s,
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.read (| M.SubPointer.get_tuple_field (| tmp, 0 |) |)
                                    |)
                                  |)
                                |)
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (|
                                M.write (|
                                  mantissa,
                                  M.read (| M.SubPointer.get_tuple_field (| tmp, 1 |) |)
                                |)
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (|
                                M.write (|
                                  n_after_dot,
                                  M.call_closure (|
                                    Ty.path "isize",
                                    M.get_trait_method (|
                                      "core::num::dec2flt::common::ByteSlice",
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                      [],
                                      [],
                                      "offset_from",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| before |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (|
                                M.write (|
                                  exponent,
                                  M.cast (Ty.path "i64") (UnOp.neg (| M.read (| n_after_dot |) |))
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.alloc (|
                      let β := n_digits in
                      M.write (|
                        β,
                        M.call_closure (|
                          Ty.path "isize",
                          BinOp.Wrap.add,
                          [ M.read (| β |); M.read (| n_after_dot |) ]
                        |)
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.eq,
                                    [ M.read (| n_digits |); Value.Integer IntegerKind.Isize 0 ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ exp_number : Ty.path "i64" :=
                    M.alloc (| Value.Integer IntegerKind.I64 0 |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply (Ty.path "&") [] [ Ty.path "u8" ];
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    "split_first",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                                |)
                              |) in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                            let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                            let γ1_0 := M.read (| γ1_0 |) in
                            let c := M.copy (| γ1_0 |) in
                            let s_next := M.copy (| γ1_1 |) in
                            M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          LogicalOp.or (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.eq,
                                              [ M.read (| c |); M.read (| UnsupportedLiteral |) ]
                                            |),
                                            ltac:(M.monadic
                                              (M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.eq,
                                                [ M.read (| c |); M.read (| UnsupportedLiteral |) ]
                                              |)))
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.write (|
                                          s,
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| s_next |) |)
                                          |)
                                        |)
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.write (|
                                          exp_number,
                                          M.read (|
                                            M.match_operator (|
                                              Some (Ty.path "i64"),
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ Ty.path "core::convert::Infallible" ];
                                                      Ty.path "i64"
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "i64" ],
                                                    [],
                                                    [],
                                                    "branch",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ Ty.path "i64" ],
                                                      M.get_function (|
                                                        "core::num::dec2flt::parse::parse_scientific",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.deref (|
                                                            M.borrow (| Pointer.Kind.MutRef, s |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path
                                                                        "core::num::dec2flt::number::Number";
                                                                      Ty.path "usize"
                                                                    ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path
                                                                          "core::num::dec2flt::number::Number";
                                                                        Ty.path "usize"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                [],
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |)
                                          |)
                                        |)
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        let β := exponent in
                                        M.write (|
                                          β,
                                          M.call_closure (|
                                            Ty.path "i64",
                                            BinOp.Wrap.add,
                                            [ M.read (| β |); M.read (| exp_number |) ]
                                          |)
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ len : Ty.path "usize" :=
                    M.alloc (|
                      M.cast
                        (Ty.path "usize")
                        (M.call_closure (|
                          Ty.path "isize",
                          M.get_trait_method (|
                            "core::num::dec2flt::common::ByteSlice",
                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                            [],
                            [],
                            "offset_from",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| start |) |) |)
                          ]
                        |))
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.le,
                                    [ M.read (| n_digits |); Value.Integer IntegerKind.Isize 19 ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.StructTuple
                                      "core::option::Option::Some"
                                      [
                                        Value.Tuple
                                          [
                                            Value.StructRecord
                                              "core::num::dec2flt::number::Number"
                                              [
                                                ("exponent", M.read (| exponent |));
                                                ("mantissa", M.read (| mantissa |));
                                                ("negative", Value.Bool false);
                                                ("many_digits", Value.Bool false)
                                              ];
                                            M.read (| len |)
                                          ]
                                      ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.alloc (|
                      let β := n_digits in
                      M.write (|
                        β,
                        M.call_closure (|
                          Ty.path "isize",
                          BinOp.Wrap.sub,
                          [ M.read (| β |); Value.Integer IntegerKind.Isize 19 ]
                        |)
                      |)
                    |) in
                  let~ many_digits : Ty.path "bool" := M.alloc (| Value.Bool false |) in
                  let~ p :
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] :=
                    M.copy (| start |) in
                  let~ _ : Ty.tuple [] :=
                    M.loop (|
                      Ty.tuple [],
                      ltac:(M.monadic
                        (M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u8" ];
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                            ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                        "split_first",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| p |) |)
                                        |)
                                      ]
                                    |)
                                  |) in
                                let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                let γ1_0 := M.read (| γ1_0 |) in
                                let c := M.copy (| γ1_0 |) in
                                let p_next := M.copy (| γ1_1 |) in
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              LogicalOp.or (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.eq,
                                                  [ M.read (| c |); M.read (| UnsupportedLiteral |)
                                                  ]
                                                |),
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.eq,
                                                    [
                                                      M.read (| c |);
                                                      M.read (| UnsupportedLiteral |)
                                                    ]
                                                  |)))
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            let β := n_digits in
                                            M.write (|
                                              β,
                                              M.call_closure (|
                                                Ty.path "isize",
                                                BinOp.Wrap.sub,
                                                [
                                                  M.read (| β |);
                                                  M.cast
                                                    (Ty.path "isize")
                                                    (M.call_closure (|
                                                      Ty.path "u8",
                                                      M.get_associated_function (|
                                                        Ty.path "u8",
                                                        "saturating_sub",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.read (| c |);
                                                        M.call_closure (|
                                                          Ty.path "u8",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            M.read (| UnsupportedLiteral |);
                                                            Value.Integer IntegerKind.U8 1
                                                          ]
                                                        |)
                                                      ]
                                                    |))
                                                ]
                                              |)
                                            |)
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.write (|
                                              p,
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| p_next |) |)
                                              |)
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)))
                                  ]
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)
                                    |)
                                  |)
                                |)))
                          ]
                        |)))
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.gt,
                                    [ M.read (| n_digits |); Value.Integer IntegerKind.Isize 0 ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (| M.write (| many_digits, Value.Bool true |) |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (|
                                M.write (| mantissa, Value.Integer IntegerKind.U64 0 |)
                              |) in
                            let~ s :
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] :=
                              M.copy (| start |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_function (|
                                    "core::num::dec2flt::parse::try_parse_19digits",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, s |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, mantissa |) |)
                                    |)
                                  ]
                                |)
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (|
                                M.write (|
                                  exponent,
                                  M.cast
                                    (Ty.path "i64")
                                    (M.read (|
                                      M.match_operator (|
                                        Some (Ty.path "isize"),
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.ge,
                                                      [
                                                        M.read (| mantissa |);
                                                        M.read (|
                                                          get_constant (|
                                                            "core::num::dec2flt::parse::MIN_19DIGIT_INT",
                                                            Ty.path "u64"
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "isize",
                                                  M.get_trait_method (|
                                                    "core::num::dec2flt::common::ByteSlice",
                                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                                    [],
                                                    [],
                                                    "offset_from",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| int_end |) |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| s |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let~ _ : Ty.tuple [] :=
                                                M.alloc (|
                                                  M.write (|
                                                    s,
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Ty.path "u8" ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::index::Index",
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [ Ty.path "u8" ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::RangeFrom")
                                                                    []
                                                                    [ Ty.path "usize" ]
                                                                ],
                                                                "index",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| s |) |)
                                                                |);
                                                                Value.StructRecord
                                                                  "core::ops::range::RangeFrom"
                                                                  [
                                                                    ("start",
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1)
                                                                  ]
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |) in
                                              let~ before :
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ]
                                                    ] :=
                                                M.copy (| s |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_function (|
                                                      "core::num::dec2flt::parse::try_parse_19digits",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (|
                                                          M.borrow (| Pointer.Kind.MutRef, s |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            mantissa
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (|
                                                UnOp.neg (|
                                                  M.call_closure (|
                                                    Ty.path "isize",
                                                    M.get_trait_method (|
                                                      "core::num::dec2flt::common::ByteSlice",
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [ Ty.path "u8" ],
                                                      [],
                                                      [],
                                                      "offset_from",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| s |) |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| before |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)))
                                        ]
                                      |)
                                    |))
                                |)
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (|
                                let β := exponent in
                                M.write (|
                                  β,
                                  M.call_closure (|
                                    Ty.path "i64",
                                    BinOp.Wrap.add,
                                    [ M.read (| β |); M.read (| exp_number |) ]
                                  |)
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::option::Option::Some"
                      [
                        Value.Tuple
                          [
                            Value.StructRecord
                              "core::num::dec2flt::number::Number"
                              [
                                ("exponent", M.read (| exponent |));
                                ("mantissa", M.read (| mantissa |));
                                ("negative", Value.Bool false);
                                ("many_digits", M.read (| many_digits |))
                              ];
                            M.read (| len |)
                          ]
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_parse_partial_number :
        M.IsFunction.C "core::num::dec2flt::parse::parse_partial_number" parse_partial_number.
      Admitted.
      Global Typeclasses Opaque parse_partial_number.
      
      (*
      pub fn parse_number(s: &[u8]) -> Option<Number> {
          if let Some((float, rest)) = parse_partial_number(s) {
              if rest == s.len() {
                  return Some(float);
              }
          }
          None
      }
      *)
      Definition parse_number (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ s ] =>
          ltac:(M.monadic
            (let s := M.alloc (| s |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "core::num::dec2flt::number::Number";
                                          Ty.path "usize"
                                        ]
                                    ],
                                  M.get_function (|
                                    "core::num::dec2flt::parse::parse_partial_number",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                                |)
                              |) in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                            let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                            let float := M.copy (| γ1_0 |) in
                            let rest := M.copy (| γ1_1 |) in
                            M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.eq,
                                            [
                                              M.read (| rest |);
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| s |) |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            Value.StructTuple
                                              "core::option::Option::Some"
                                              [ M.read (| float |) ]
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.alloc (| Value.StructTuple "core::option::Option::None" [] |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_parse_number :
        M.IsFunction.C "core::num::dec2flt::parse::parse_number" parse_number.
      Admitted.
      Global Typeclasses Opaque parse_number.
      
      (*
      pub(crate) fn parse_inf_nan<F: RawFloat>(s: &[u8], negative: bool) -> Option<F> {
          // Since a valid string has at most the length 8, we can load
          // all relevant characters into a u64 and work from there.
          // This also generates much better code.
      
          let mut register;
          let len: usize;
      
          // All valid strings are either of length 8 or 3.
          if s.len() == 8 {
              register = s.read_u64();
              len = 8;
          } else if s.len() == 3 {
              let a = s[0] as u64;
              let b = s[1] as u64;
              let c = s[2] as u64;
              register = (c << 16) | (b << 8) | a;
              len = 3;
          } else {
              return None;
          }
      
          // Clear out the bits which turn ASCII uppercase characters into
          // lowercase characters. The resulting string is all uppercase.
          // What happens to other characters is irrelevant.
          register &= 0xDFDFDFDFDFDFDFDF;
      
          // u64 values corresponding to relevant cases
          const INF_3: u64 = 0x464E49; // "INF"
          const INF_8: u64 = 0x5954494E49464E49; // "INFINITY"
          const NAN: u64 = 0x4E414E; // "NAN"
      
          // Match register value to constant to parse string.
          // Also match on the string length to catch edge cases
          // like "inf\0\0\0\0\0".
          let float = match (register, len) {
              (INF_3, 3) => F::INFINITY,
              (INF_8, 8) => F::INFINITY,
              (NAN, 3) => F::NAN,
              _ => return None,
          };
      
          if negative { Some(-float) } else { Some(float) }
      }
      *)
      Definition parse_inf_nan (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ F ], [ s; negative ] =>
          ltac:(M.monadic
            (let s := M.alloc (| s |) in
            let negative := M.alloc (| negative |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let register := M.copy (| Value.DeclaredButUndefined |) in
                  let len := M.copy (| Value.DeclaredButUndefined |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.eq,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| s |) |)
                                          |)
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (|
                                M.write (|
                                  register,
                                  M.call_closure (|
                                    Ty.path "u64",
                                    M.get_trait_method (|
                                      "core::num::dec2flt::common::ByteSlice",
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                      [],
                                      [],
                                      "read_u64",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |)
                                    ]
                                  |)
                                |)
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (| M.write (| len, Value.Integer IntegerKind.Usize 8 |) |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.eq,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| s |) |)
                                                  |)
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 3
                                            ]
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    let~ a : Ty.path "u64" :=
                                      M.alloc (|
                                        M.cast
                                          (Ty.path "u64")
                                          (M.read (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| s |) |),
                                              Value.Integer IntegerKind.Usize 0
                                            |)
                                          |))
                                      |) in
                                    let~ b : Ty.path "u64" :=
                                      M.alloc (|
                                        M.cast
                                          (Ty.path "u64")
                                          (M.read (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| s |) |),
                                              Value.Integer IntegerKind.Usize 1
                                            |)
                                          |))
                                      |) in
                                    let~ c : Ty.path "u64" :=
                                      M.alloc (|
                                        M.cast
                                          (Ty.path "u64")
                                          (M.read (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| s |) |),
                                              Value.Integer IntegerKind.Usize 2
                                            |)
                                          |))
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.write (|
                                          register,
                                          M.call_closure (|
                                            Ty.path "u64",
                                            BinOp.Wrap.bit_or,
                                            [
                                              M.call_closure (|
                                                Ty.path "u64",
                                                BinOp.Wrap.bit_or,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "u64",
                                                    BinOp.Wrap.shl,
                                                    [
                                                      M.read (| c |);
                                                      Value.Integer IntegerKind.I32 16
                                                    ]
                                                  |);
                                                  M.call_closure (|
                                                    Ty.path "u64",
                                                    BinOp.Wrap.shl,
                                                    [
                                                      M.read (| b |);
                                                      Value.Integer IntegerKind.I32 8
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.read (| a |)
                                            ]
                                          |)
                                        |)
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.write (| len, Value.Integer IntegerKind.Usize 3 |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            Value.StructTuple "core::option::Option::None" []
                                          |)
                                        |)
                                      |)
                                    |)))
                              ]
                            |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.alloc (|
                      let β := register in
                      M.write (|
                        β,
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.bit_and,
                          [ M.read (| β |); Value.Integer IntegerKind.U64 16131858542891098079 ]
                        |)
                      |)
                    |) in
                  let~ float : F :=
                    M.copy (|
                      M.match_operator (|
                        Some F,
                        M.alloc (| Value.Tuple [ M.read (| register |); M.read (| len |) ] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let _ :=
                                is_constant_or_break_match (|
                                  M.read (| γ0_0 |),
                                  Value.Integer IntegerKind.U64 4607561
                                |) in
                              let _ :=
                                is_constant_or_break_match (|
                                  M.read (| γ0_1 |),
                                  Value.Integer IntegerKind.Usize 3
                                |) in
                              get_constant (|
                                "core::num::dec2flt::float::RawFloat::INFINITY",
                                F
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let _ :=
                                is_constant_or_break_match (|
                                  M.read (| γ0_0 |),
                                  Value.Integer IntegerKind.U64 6436850368004902473
                                |) in
                              let _ :=
                                is_constant_or_break_match (|
                                  M.read (| γ0_1 |),
                                  Value.Integer IntegerKind.Usize 8
                                |) in
                              get_constant (|
                                "core::num::dec2flt::float::RawFloat::INFINITY",
                                F
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let _ :=
                                is_constant_or_break_match (|
                                  M.read (| γ0_0 |),
                                  Value.Integer IntegerKind.U64 5128526
                                |) in
                              let _ :=
                                is_constant_or_break_match (|
                                  M.read (| γ0_1 |),
                                  Value.Integer IntegerKind.Usize 3
                                |) in
                              get_constant (| "core::num::dec2flt::float::RawFloat::NAN", F |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.StructTuple "core::option::Option::None" []
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |) in
                  M.match_operator (|
                    Some (Ty.apply (Ty.path "core::option::Option") [] [ F ]),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use negative in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                M.call_closure (|
                                  F,
                                  M.get_trait_method (|
                                    "core::ops::arith::Neg",
                                    F,
                                    [],
                                    [],
                                    "neg",
                                    [],
                                    []
                                  |),
                                  [ M.read (| float |) ]
                                |)
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple "core::option::Option::Some" [ M.read (| float |) ]
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_parse_inf_nan :
        M.IsFunction.C "core::num::dec2flt::parse::parse_inf_nan" parse_inf_nan.
      Admitted.
      Global Typeclasses Opaque parse_inf_nan.
      
      Module parse_inf_nan.
        Definition value_INF_3 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 4607561 |))).
        
        Global Instance Instance_IsConstant_value_INF_3 :
          M.IsFunction.C "core::num::dec2flt::parse::parse_inf_nan::INF_3" value_INF_3.
        Admitted.
        Global Typeclasses Opaque value_INF_3.
        
        Definition value_INF_8 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 6436850368004902473 |))).
        
        Global Instance Instance_IsConstant_value_INF_8 :
          M.IsFunction.C "core::num::dec2flt::parse::parse_inf_nan::INF_8" value_INF_8.
        Admitted.
        Global Typeclasses Opaque value_INF_8.
        
        Definition value_NAN (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 5128526 |))).
        
        Global Instance Instance_IsConstant_value_NAN :
          M.IsFunction.C "core::num::dec2flt::parse::parse_inf_nan::NAN" value_NAN.
        Admitted.
        Global Typeclasses Opaque value_NAN.
      End parse_inf_nan.
    End parse.
  End dec2flt.
End num.
