(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module num.
  Module int_sqrt.
    Definition value_U8_ISQRT_WITH_REMAINDER
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic
        (let~ result :
            Ty.apply
              (Ty.path "array")
              [ Value.Integer IntegerKind.Usize 256 ]
              [ Ty.tuple [ Ty.path "u8"; Ty.path "u8" ] ] :=
          M.alloc (|
            repeat (|
              Value.Tuple [ Value.Integer IntegerKind.U8 0; Value.Integer IntegerKind.U8 0 ],
              Value.Integer IntegerKind.Usize 256
            |)
          |) in
        let~ n : Ty.path "usize" := M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
        let~ isqrt_n : Ty.path "usize" := M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
        let~ _ : Ty.tuple [] :=
          M.loop (|
            Ty.tuple [],
            ltac:(M.monadic
              (M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.lt,
                              [
                                M.read (| n |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [ Ty.tuple [ Ty.path "u8"; Ty.path "u8" ] ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion (M.borrow (| Pointer.Kind.Ref, result |))
                                  ]
                                |)
                              ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          M.write (|
                            M.SubPointer.get_array_field (| result, M.read (| n |) |),
                            Value.Tuple
                              [
                                M.cast (Ty.path "u8") (M.read (| isqrt_n |));
                                M.cast
                                  (Ty.path "u8")
                                  (M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.sub,
                                    [
                                      M.read (| n |);
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.path "usize",
                                          "pow",
                                          [],
                                          []
                                        |),
                                        [ M.read (| isqrt_n |); Value.Integer IntegerKind.U32 2 ]
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          let β := n in
                          M.write (|
                            β,
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.add,
                              [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                            |)
                          |)
                        |) in
                      M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.eq,
                                      [
                                        M.read (| n |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.path "usize",
                                            "pow",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.read (| isqrt_n |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |);
                                            Value.Integer IntegerKind.U32 2
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  let β := isqrt_n in
                                  M.write (|
                                    β,
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                    |)
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        M.never_to_any (|
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                            M.alloc (| Value.Tuple [] |)
                          |)
                        |)
                      |)))
                ]
              |)))
          |) in
        result)).
    
    Global Instance Instance_IsConstant_value_U8_ISQRT_WITH_REMAINDER :
      M.IsFunction.C "core::num::int_sqrt::U8_ISQRT_WITH_REMAINDER" value_U8_ISQRT_WITH_REMAINDER.
    Admitted.
    Global Typeclasses Opaque value_U8_ISQRT_WITH_REMAINDER.
    
    (*
    pub const fn u8(n: u8) -> u8 {
        U8_ISQRT_WITH_REMAINDER[n as usize].0
    }
    *)
    Definition u8 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ n ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          M.read (|
            M.SubPointer.get_tuple_field (|
              M.SubPointer.get_array_field (|
                get_constant (|
                  "core::num::int_sqrt::U8_ISQRT_WITH_REMAINDER",
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 256 ]
                    [ Ty.tuple [ Ty.path "u8"; Ty.path "u8" ] ]
                |),
                M.cast (Ty.path "usize") (M.read (| n |))
              |),
              0
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_u8 : M.IsFunction.C "core::num::int_sqrt::u8" u8.
    Admitted.
    Global Typeclasses Opaque u8.
    
    (*
            pub const unsafe fn $SignedT(n: $SignedT) -> $SignedT {
                debug_assert!(n >= 0, "Negative input inside `isqrt`.");
                $UnsignedT(n as $UnsignedT) as $SignedT
            }
    *)
    Definition i8 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ n ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.ge,
                                          [ M.read (| n |); Value.Integer IntegerKind.I8 0 ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::Arguments",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::Arguments",
                                            "new_const",
                                            [ Value.Integer IntegerKind.Usize 1 ],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        mk_str (|
                                                          "Negative input inside `isqrt`."
                                                        |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.cast
                (Ty.path "i8")
                (M.call_closure (|
                  Ty.path "u8",
                  M.get_function (| "core::num::int_sqrt::u8", [], [] |),
                  [ M.cast (Ty.path "u8") (M.read (| n |)) ]
                |))
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_i8 : M.IsFunction.C "core::num::int_sqrt::i8" i8.
    Admitted.
    Global Typeclasses Opaque i8.
    
    (*
            pub const unsafe fn $SignedT(n: $SignedT) -> $SignedT {
                debug_assert!(n >= 0, "Negative input inside `isqrt`.");
                $UnsignedT(n as $UnsignedT) as $SignedT
            }
    *)
    Definition i16 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ n ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.ge,
                                          [ M.read (| n |); Value.Integer IntegerKind.I16 0 ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::Arguments",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::Arguments",
                                            "new_const",
                                            [ Value.Integer IntegerKind.Usize 1 ],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        mk_str (|
                                                          "Negative input inside `isqrt`."
                                                        |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.cast
                (Ty.path "i16")
                (M.call_closure (|
                  Ty.path "u16",
                  M.get_function (| "core::num::int_sqrt::u16", [], [] |),
                  [ M.cast (Ty.path "u16") (M.read (| n |)) ]
                |))
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_i16 : M.IsFunction.C "core::num::int_sqrt::i16" i16.
    Admitted.
    Global Typeclasses Opaque i16.
    
    (*
            pub const unsafe fn $SignedT(n: $SignedT) -> $SignedT {
                debug_assert!(n >= 0, "Negative input inside `isqrt`.");
                $UnsignedT(n as $UnsignedT) as $SignedT
            }
    *)
    Definition i32 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ n ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.ge,
                                          [ M.read (| n |); Value.Integer IntegerKind.I32 0 ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::Arguments",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::Arguments",
                                            "new_const",
                                            [ Value.Integer IntegerKind.Usize 1 ],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        mk_str (|
                                                          "Negative input inside `isqrt`."
                                                        |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.cast
                (Ty.path "i32")
                (M.call_closure (|
                  Ty.path "u32",
                  M.get_function (| "core::num::int_sqrt::u32", [], [] |),
                  [ M.cast (Ty.path "u32") (M.read (| n |)) ]
                |))
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_i32 : M.IsFunction.C "core::num::int_sqrt::i32" i32.
    Admitted.
    Global Typeclasses Opaque i32.
    
    (*
            pub const unsafe fn $SignedT(n: $SignedT) -> $SignedT {
                debug_assert!(n >= 0, "Negative input inside `isqrt`.");
                $UnsignedT(n as $UnsignedT) as $SignedT
            }
    *)
    Definition i64 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ n ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.ge,
                                          [ M.read (| n |); Value.Integer IntegerKind.I64 0 ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::Arguments",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::Arguments",
                                            "new_const",
                                            [ Value.Integer IntegerKind.Usize 1 ],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        mk_str (|
                                                          "Negative input inside `isqrt`."
                                                        |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.cast
                (Ty.path "i64")
                (M.call_closure (|
                  Ty.path "u64",
                  M.get_function (| "core::num::int_sqrt::u64", [], [] |),
                  [ M.cast (Ty.path "u64") (M.read (| n |)) ]
                |))
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_i64 : M.IsFunction.C "core::num::int_sqrt::i64" i64.
    Admitted.
    Global Typeclasses Opaque i64.
    
    (*
            pub const unsafe fn $SignedT(n: $SignedT) -> $SignedT {
                debug_assert!(n >= 0, "Negative input inside `isqrt`.");
                $UnsignedT(n as $UnsignedT) as $SignedT
            }
    *)
    Definition i128 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ n ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.ge,
                                          [ M.read (| n |); Value.Integer IntegerKind.I128 0 ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::Arguments",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::Arguments",
                                            "new_const",
                                            [ Value.Integer IntegerKind.Usize 1 ],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        mk_str (|
                                                          "Negative input inside `isqrt`."
                                                        |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.cast
                (Ty.path "i128")
                (M.call_closure (|
                  Ty.path "u128",
                  M.get_function (| "core::num::int_sqrt::u128", [], [] |),
                  [ M.cast (Ty.path "u128") (M.read (| n |)) ]
                |))
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_i128 : M.IsFunction.C "core::num::int_sqrt::i128" i128.
    Admitted.
    Global Typeclasses Opaque i128.
    
    (*
    const fn u16_stages(n: u16) -> u16 {
        let (s, r) = first_stage!(16, n);
        last_stage!(u16, n, s, r)
    }
    *)
    Definition u16_stages (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ n ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          M.read (|
            M.match_operator (|
              None,
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ne,
                                            [ M.read (| n |); Value.Integer IntegerKind.U16 0 ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::Arguments",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_const",
                                              [ Value.Integer IntegerKind.Usize 1 ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          mk_str (|
                                                            "`$n` is  zero in `first_stage!`."
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ n : Ty.path "u16" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u16",
                    BinOp.Wrap.shr,
                    [
                      M.read (| n |);
                      M.read (|
                        get_constant (| "core::num::int_sqrt::u16_stages::N_SHIFT", Ty.path "u32" |)
                      |)
                    ]
                  |)
                |) in
              M.match_operator (|
                None,
                M.SubPointer.get_array_field (|
                  get_constant (|
                    "core::num::int_sqrt::U8_ISQRT_WITH_REMAINDER",
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 256 ]
                      [ Ty.tuple [ Ty.path "u8"; Ty.path "u8" ] ]
                  |),
                  M.cast (Ty.path "usize") (M.read (| n |))
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let s := M.copy (| γ0_0 |) in
                      let r := M.copy (| γ0_1 |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_function (| "core::hint::assert_unchecked", [], [] |),
                            [
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ne,
                                [ M.read (| s |); Value.Integer IntegerKind.U8 0 ]
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [ M.read (| s |); M.read (| r |) ] |)))
                ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let s := M.copy (| γ0_0 |) in
                    let r := M.copy (| γ0_1 |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.ne,
                                                  [ M.read (| s |); Value.Integer IntegerKind.U8 0 ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.call_closure (|
                                              Ty.path "never",
                                              M.get_function (|
                                                "core::panicking::panic_fmt",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_const",
                                                    [ Value.Integer IntegerKind.Usize 1 ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (|
                                                                  "`$s` is  zero in `last_stage!`."
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let~ lo : Ty.path "u16" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u16",
                          BinOp.Wrap.bit_and,
                          [
                            M.read (| n |);
                            M.read (|
                              get_constant (|
                                "core::num::int_sqrt::u16_stages::LOWER_HALF_1_BITS",
                                Ty.path "u16"
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ numerator : Ty.path "u16" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u16",
                          BinOp.Wrap.bit_or,
                          [
                            M.call_closure (|
                              Ty.path "u16",
                              BinOp.Wrap.shl,
                              [
                                M.cast (Ty.path "u16") (M.read (| r |));
                                M.read (|
                                  get_constant (|
                                    "core::num::int_sqrt::u16_stages::QUARTER_BITS",
                                    Ty.path "u32"
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.path "u16",
                              BinOp.Wrap.shr,
                              [
                                M.read (| lo |);
                                M.read (|
                                  get_constant (|
                                    "core::num::int_sqrt::u16_stages::QUARTER_BITS",
                                    Ty.path "u32"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |) in
                    let~ denominator : Ty.path "u16" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u16",
                          BinOp.Wrap.shl,
                          [ M.cast (Ty.path "u16") (M.read (| s |)); Value.Integer IntegerKind.I32 1
                          ]
                        |)
                      |) in
                    let~ q : Ty.path "u16" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u16",
                          BinOp.Wrap.div,
                          [ M.read (| numerator |); M.read (| denominator |) ]
                        |)
                      |) in
                    let~ s : Ty.path "u16" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u16",
                          BinOp.Wrap.add,
                          [
                            M.cast
                              (Ty.path "u16")
                              (M.call_closure (|
                                Ty.path "u8",
                                BinOp.Wrap.shl,
                                [
                                  M.read (| s |);
                                  M.read (|
                                    get_constant (|
                                      "core::num::int_sqrt::u16_stages::QUARTER_BITS",
                                      Ty.path "u32"
                                    |)
                                  |)
                                ]
                              |));
                            M.read (| q |)
                          ]
                        |)
                      |) in
                    M.match_operator (|
                      None,
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [ Ty.path "u16"; Ty.path "bool" ],
                          M.get_associated_function (| Ty.path "u16", "overflowing_mul", [], [] |),
                          [ M.read (| s |); M.read (| s |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let s_squared := M.copy (| γ0_0 |) in
                            let overflow := M.copy (| γ0_1 |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            LogicalOp.or (|
                                              M.read (| overflow |),
                                              ltac:(M.monadic
                                                (M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.gt,
                                                  [ M.read (| s_squared |); M.read (| n |) ]
                                                |)))
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          let β := s in
                                          M.write (|
                                            β,
                                            M.call_closure (|
                                              Ty.path "u16",
                                              BinOp.Wrap.sub,
                                              [ M.read (| β |); Value.Integer IntegerKind.U16 1 ]
                                            |)
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            s))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_u16_stages :
      M.IsFunction.C "core::num::int_sqrt::u16_stages" u16_stages.
    Admitted.
    Global Typeclasses Opaque u16_stages.
    
    Module u16_stages.
      Definition value_N_SHIFT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.sub,
              [ Value.Integer IntegerKind.U32 16; Value.Integer IntegerKind.U32 8 ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_N_SHIFT :
        M.IsFunction.C "core::num::int_sqrt::u16_stages::N_SHIFT" value_N_SHIFT.
      Admitted.
      Global Typeclasses Opaque value_N_SHIFT.
      
      Definition value_HALF_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u16", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_HALF_BITS :
        M.IsFunction.C "core::num::int_sqrt::u16_stages::HALF_BITS" value_HALF_BITS.
      Admitted.
      Global Typeclasses Opaque value_HALF_BITS.
      
      Definition value_QUARTER_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u16", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 2
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_QUARTER_BITS :
        M.IsFunction.C "core::num::int_sqrt::u16_stages::QUARTER_BITS" value_QUARTER_BITS.
      Admitted.
      Global Typeclasses Opaque value_QUARTER_BITS.
      
      Definition value_LOWER_HALF_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u16",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u16",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U16 1;
                    M.read (|
                      get_constant (| "core::num::int_sqrt::u16_stages::HALF_BITS", Ty.path "u32" |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U16 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWER_HALF_1_BITS :
        M.IsFunction.C "core::num::int_sqrt::u16_stages::LOWER_HALF_1_BITS" value_LOWER_HALF_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWER_HALF_1_BITS.
    End u16_stages.
    
    (*
    const fn u32_stages(n: u32) -> u32 {
        let (s, r) = first_stage!(32, n);
        let (s, r) = middle_stage!(32, u16, n, s, r);
        last_stage!(u32, n, s, r)
    }
    *)
    Definition u32_stages (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ n ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          M.read (|
            M.match_operator (|
              None,
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ne,
                                            [ M.read (| n |); Value.Integer IntegerKind.U32 0 ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::Arguments",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_const",
                                              [ Value.Integer IntegerKind.Usize 1 ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          mk_str (|
                                                            "`$n` is  zero in `first_stage!`."
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ n : Ty.path "u32" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.shr,
                    [
                      M.read (| n |);
                      M.read (|
                        get_constant (| "core::num::int_sqrt::u32_stages::N_SHIFT", Ty.path "u32" |)
                      |)
                    ]
                  |)
                |) in
              M.match_operator (|
                None,
                M.SubPointer.get_array_field (|
                  get_constant (|
                    "core::num::int_sqrt::U8_ISQRT_WITH_REMAINDER",
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 256 ]
                      [ Ty.tuple [ Ty.path "u8"; Ty.path "u8" ] ]
                  |),
                  M.cast (Ty.path "usize") (M.read (| n |))
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let s := M.copy (| γ0_0 |) in
                      let r := M.copy (| γ0_1 |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_function (| "core::hint::assert_unchecked", [], [] |),
                            [
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ne,
                                [ M.read (| s |); Value.Integer IntegerKind.U8 0 ]
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [ M.read (| s |); M.read (| r |) ] |)))
                ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let s := M.copy (| γ0_0 |) in
                    let r := M.copy (| γ0_1 |) in
                    M.match_operator (|
                      None,
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.ne,
                                                    [ M.read (| s |); Value.Integer IntegerKind.U8 0
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.call_closure (|
                                                Ty.path "never",
                                                M.get_function (|
                                                  "core::panicking::panic_fmt",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.path "core::fmt::Arguments",
                                                    M.get_associated_function (|
                                                      Ty.path "core::fmt::Arguments",
                                                      "new_const",
                                                      [ Value.Integer IntegerKind.Usize 1 ],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  mk_str (|
                                                                    "`$s` is  zero in `middle_stage!`."
                                                                  |)
                                                                ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ n : Ty.path "u16" :=
                        M.alloc (|
                          M.cast
                            (Ty.path "u16")
                            (M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.shr,
                              [
                                M.read (| n |);
                                M.read (|
                                  get_constant (|
                                    "core::num::int_sqrt::u32_stages::N_SHIFT'1",
                                    Ty.path "u32"
                                  |)
                                |)
                              ]
                            |))
                        |) in
                      let~ lo : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.bit_and,
                            [
                              M.read (| n |);
                              M.read (|
                                get_constant (|
                                  "core::num::int_sqrt::u32_stages::LOWER_HALF_1_BITS",
                                  Ty.path "u16"
                                |)
                              |)
                            ]
                          |)
                        |) in
                      let~ numerator : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.bit_or,
                            [
                              M.call_closure (|
                                Ty.path "u16",
                                BinOp.Wrap.shl,
                                [
                                  M.cast (Ty.path "u16") (M.read (| r |));
                                  M.read (|
                                    get_constant (|
                                      "core::num::int_sqrt::u32_stages::QUARTER_BITS",
                                      Ty.path "u32"
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.path "u16",
                                BinOp.Wrap.shr,
                                [
                                  M.read (| lo |);
                                  M.read (|
                                    get_constant (|
                                      "core::num::int_sqrt::u32_stages::QUARTER_BITS",
                                      Ty.path "u32"
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |) in
                      let~ denominator : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.shl,
                            [
                              M.cast (Ty.path "u16") (M.read (| s |));
                              Value.Integer IntegerKind.I32 1
                            ]
                          |)
                        |) in
                      let~ q : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.div,
                            [ M.read (| numerator |); M.read (| denominator |) ]
                          |)
                        |) in
                      let~ u : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.rem,
                            [ M.read (| numerator |); M.read (| denominator |) ]
                          |)
                        |) in
                      let~ s : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.add,
                            [
                              M.cast
                                (Ty.path "u16")
                                (M.call_closure (|
                                  Ty.path "u8",
                                  BinOp.Wrap.shl,
                                  [
                                    M.read (| s |);
                                    M.read (|
                                      get_constant (|
                                        "core::num::int_sqrt::u32_stages::QUARTER_BITS",
                                        Ty.path "u32"
                                      |)
                                    |)
                                  ]
                                |));
                              M.read (| q |)
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        None,
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [ Ty.path "u16"; Ty.path "bool" ],
                            M.get_associated_function (|
                              Ty.path "u16",
                              "overflowing_sub",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.path "u16",
                                BinOp.Wrap.bit_or,
                                [
                                  M.call_closure (|
                                    Ty.path "u16",
                                    BinOp.Wrap.shl,
                                    [
                                      M.read (| u |);
                                      M.read (|
                                        get_constant (|
                                          "core::num::int_sqrt::u32_stages::QUARTER_BITS",
                                          Ty.path "u32"
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "u16",
                                    BinOp.Wrap.bit_and,
                                    [
                                      M.read (| lo |);
                                      M.read (|
                                        get_constant (|
                                          "core::num::int_sqrt::u32_stages::LOWEST_QUARTER_1_BITS",
                                          Ty.path "u16"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.path "u16",
                                BinOp.Wrap.mul,
                                [ M.read (| q |); M.read (| q |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let r := M.copy (| γ0_0 |) in
                              let overflow := M.copy (| γ0_1 |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.use overflow in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.write (|
                                              r,
                                              M.call_closure (|
                                                Ty.path "u16",
                                                M.get_associated_function (|
                                                  Ty.path "u16",
                                                  "wrapping_add",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.read (| r |);
                                                  M.call_closure (|
                                                    Ty.path "u16",
                                                    BinOp.Wrap.sub,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "u16",
                                                        BinOp.Wrap.mul,
                                                        [
                                                          Value.Integer IntegerKind.U16 2;
                                                          M.read (| s |)
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.U16 1
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            let β := s in
                                            M.write (|
                                              β,
                                              M.call_closure (|
                                                Ty.path "u16",
                                                BinOp.Wrap.sub,
                                                [ M.read (| β |); Value.Integer IntegerKind.U16 1 ]
                                              |)
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_function (| "core::hint::assert_unchecked", [], [] |),
                                    [
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.ne,
                                        [ M.read (| s |); Value.Integer IntegerKind.U16 0 ]
                                      |)
                                    ]
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [ M.read (| s |); M.read (| r |) ] |)))
                        ]
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let s := M.copy (| γ0_0 |) in
                            let r := M.copy (| γ0_1 |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Some (Ty.tuple []),
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.ne,
                                                          [
                                                            M.read (| s |);
                                                            Value.Integer IntegerKind.U16 0
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.call_closure (|
                                                      Ty.path "never",
                                                      M.get_function (|
                                                        "core::panicking::panic_fmt",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::Arguments",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::Arguments",
                                                            "new_const",
                                                            [ Value.Integer IntegerKind.Usize 1 ],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        mk_str (|
                                                                          "`$s` is  zero in `last_stage!`."
                                                                        |)
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            let~ lo : Ty.path "u32" :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "u32",
                                  BinOp.Wrap.bit_and,
                                  [
                                    M.read (| n |);
                                    M.read (|
                                      get_constant (|
                                        "core::num::int_sqrt::u32_stages::LOWER_HALF_1_BITS'1",
                                        Ty.path "u32"
                                      |)
                                    |)
                                  ]
                                |)
                              |) in
                            let~ numerator : Ty.path "u32" :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "u32",
                                  BinOp.Wrap.bit_or,
                                  [
                                    M.call_closure (|
                                      Ty.path "u32",
                                      BinOp.Wrap.shl,
                                      [
                                        M.cast (Ty.path "u32") (M.read (| r |));
                                        M.read (|
                                          get_constant (|
                                            "core::num::int_sqrt::u32_stages::QUARTER_BITS'1",
                                            Ty.path "u32"
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.path "u32",
                                      BinOp.Wrap.shr,
                                      [
                                        M.read (| lo |);
                                        M.read (|
                                          get_constant (|
                                            "core::num::int_sqrt::u32_stages::QUARTER_BITS'1",
                                            Ty.path "u32"
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            let~ denominator : Ty.path "u32" :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "u32",
                                  BinOp.Wrap.shl,
                                  [
                                    M.cast (Ty.path "u32") (M.read (| s |));
                                    Value.Integer IntegerKind.I32 1
                                  ]
                                |)
                              |) in
                            let~ q : Ty.path "u32" :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "u32",
                                  BinOp.Wrap.div,
                                  [ M.read (| numerator |); M.read (| denominator |) ]
                                |)
                              |) in
                            let~ s : Ty.path "u32" :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "u32",
                                  BinOp.Wrap.add,
                                  [
                                    M.cast
                                      (Ty.path "u32")
                                      (M.call_closure (|
                                        Ty.path "u16",
                                        BinOp.Wrap.shl,
                                        [
                                          M.read (| s |);
                                          M.read (|
                                            get_constant (|
                                              "core::num::int_sqrt::u32_stages::QUARTER_BITS'1",
                                              Ty.path "u32"
                                            |)
                                          |)
                                        ]
                                      |));
                                    M.read (| q |)
                                  ]
                                |)
                              |) in
                            M.match_operator (|
                              None,
                              M.alloc (|
                                M.call_closure (|
                                  Ty.tuple [ Ty.path "u32"; Ty.path "bool" ],
                                  M.get_associated_function (|
                                    Ty.path "u32",
                                    "overflowing_mul",
                                    [],
                                    []
                                  |),
                                  [ M.read (| s |); M.read (| s |) ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let s_squared := M.copy (| γ0_0 |) in
                                    let overflow := M.copy (| γ0_1 |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Some (Ty.tuple []),
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    LogicalOp.or (|
                                                      M.read (| overflow |),
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.gt,
                                                          [ M.read (| s_squared |); M.read (| n |) ]
                                                        |)))
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.alloc (|
                                                  let β := s in
                                                  M.write (|
                                                    β,
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.sub,
                                                      [
                                                        M.read (| β |);
                                                        Value.Integer IntegerKind.U32 1
                                                      ]
                                                    |)
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    s))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_u32_stages :
      M.IsFunction.C "core::num::int_sqrt::u32_stages" u32_stages.
    Admitted.
    Global Typeclasses Opaque u32_stages.
    
    Module u32_stages.
      Definition value_N_SHIFT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.sub,
              [ Value.Integer IntegerKind.U32 32; Value.Integer IntegerKind.U32 8 ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_N_SHIFT :
        M.IsFunction.C "core::num::int_sqrt::u32_stages::N_SHIFT" value_N_SHIFT.
      Admitted.
      Global Typeclasses Opaque value_N_SHIFT.
      
      Definition value_N_SHIFT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.sub,
              [
                Value.Integer IntegerKind.U32 32;
                M.read (| get_associated_constant (| Ty.path "u16", "BITS", Ty.path "u32" |) |)
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_N_SHIFT :
        M.IsFunction.C "core::num::int_sqrt::u32_stages::N_SHIFT'1" value_N_SHIFT.
      Admitted.
      Global Typeclasses Opaque value_N_SHIFT.
      
      Definition value_HALF_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u16", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_HALF_BITS :
        M.IsFunction.C "core::num::int_sqrt::u32_stages::HALF_BITS" value_HALF_BITS.
      Admitted.
      Global Typeclasses Opaque value_HALF_BITS.
      
      Definition value_QUARTER_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u16", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 2
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_QUARTER_BITS :
        M.IsFunction.C "core::num::int_sqrt::u32_stages::QUARTER_BITS" value_QUARTER_BITS.
      Admitted.
      Global Typeclasses Opaque value_QUARTER_BITS.
      
      Definition value_LOWER_HALF_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u16",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u16",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U16 1;
                    M.read (|
                      get_constant (| "core::num::int_sqrt::u32_stages::HALF_BITS", Ty.path "u32" |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U16 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWER_HALF_1_BITS :
        M.IsFunction.C "core::num::int_sqrt::u32_stages::LOWER_HALF_1_BITS" value_LOWER_HALF_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWER_HALF_1_BITS.
      
      Definition value_LOWEST_QUARTER_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u16",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u16",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U16 1;
                    M.read (|
                      get_constant (|
                        "core::num::int_sqrt::u32_stages::QUARTER_BITS",
                        Ty.path "u32"
                      |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U16 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWEST_QUARTER_1_BITS :
        M.IsFunction.C
          "core::num::int_sqrt::u32_stages::LOWEST_QUARTER_1_BITS"
          value_LOWEST_QUARTER_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWEST_QUARTER_1_BITS.
      
      Definition value_HALF_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u32", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_HALF_BITS :
        M.IsFunction.C "core::num::int_sqrt::u32_stages::HALF_BITS'1" value_HALF_BITS.
      Admitted.
      Global Typeclasses Opaque value_HALF_BITS.
      
      Definition value_QUARTER_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u32", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 2
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_QUARTER_BITS :
        M.IsFunction.C "core::num::int_sqrt::u32_stages::QUARTER_BITS'1" value_QUARTER_BITS.
      Admitted.
      Global Typeclasses Opaque value_QUARTER_BITS.
      
      Definition value_LOWER_HALF_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U32 1;
                    M.read (|
                      get_constant (|
                        "core::num::int_sqrt::u32_stages::HALF_BITS'1",
                        Ty.path "u32"
                      |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U32 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWER_HALF_1_BITS :
        M.IsFunction.C
          "core::num::int_sqrt::u32_stages::LOWER_HALF_1_BITS'1"
          value_LOWER_HALF_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWER_HALF_1_BITS.
    End u32_stages.
    
    (*
    const fn u64_stages(n: u64) -> u64 {
        let (s, r) = first_stage!(64, n);
        let (s, r) = middle_stage!(64, u16, n, s, r);
        let (s, r) = middle_stage!(64, u32, n, s, r);
        last_stage!(u64, n, s, r)
    }
    *)
    Definition u64_stages (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ n ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          M.read (|
            M.match_operator (|
              None,
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ne,
                                            [ M.read (| n |); Value.Integer IntegerKind.U64 0 ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::Arguments",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_const",
                                              [ Value.Integer IntegerKind.Usize 1 ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          mk_str (|
                                                            "`$n` is  zero in `first_stage!`."
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ n : Ty.path "u64" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u64",
                    BinOp.Wrap.shr,
                    [
                      M.read (| n |);
                      M.read (|
                        get_constant (| "core::num::int_sqrt::u64_stages::N_SHIFT", Ty.path "u32" |)
                      |)
                    ]
                  |)
                |) in
              M.match_operator (|
                None,
                M.SubPointer.get_array_field (|
                  get_constant (|
                    "core::num::int_sqrt::U8_ISQRT_WITH_REMAINDER",
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 256 ]
                      [ Ty.tuple [ Ty.path "u8"; Ty.path "u8" ] ]
                  |),
                  M.cast (Ty.path "usize") (M.read (| n |))
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let s := M.copy (| γ0_0 |) in
                      let r := M.copy (| γ0_1 |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_function (| "core::hint::assert_unchecked", [], [] |),
                            [
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ne,
                                [ M.read (| s |); Value.Integer IntegerKind.U8 0 ]
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [ M.read (| s |); M.read (| r |) ] |)))
                ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let s := M.copy (| γ0_0 |) in
                    let r := M.copy (| γ0_1 |) in
                    M.match_operator (|
                      None,
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.ne,
                                                    [ M.read (| s |); Value.Integer IntegerKind.U8 0
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.call_closure (|
                                                Ty.path "never",
                                                M.get_function (|
                                                  "core::panicking::panic_fmt",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.path "core::fmt::Arguments",
                                                    M.get_associated_function (|
                                                      Ty.path "core::fmt::Arguments",
                                                      "new_const",
                                                      [ Value.Integer IntegerKind.Usize 1 ],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  mk_str (|
                                                                    "`$s` is  zero in `middle_stage!`."
                                                                  |)
                                                                ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ n : Ty.path "u16" :=
                        M.alloc (|
                          M.cast
                            (Ty.path "u16")
                            (M.call_closure (|
                              Ty.path "u64",
                              BinOp.Wrap.shr,
                              [
                                M.read (| n |);
                                M.read (|
                                  get_constant (|
                                    "core::num::int_sqrt::u64_stages::N_SHIFT'1",
                                    Ty.path "u32"
                                  |)
                                |)
                              ]
                            |))
                        |) in
                      let~ lo : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.bit_and,
                            [
                              M.read (| n |);
                              M.read (|
                                get_constant (|
                                  "core::num::int_sqrt::u64_stages::LOWER_HALF_1_BITS",
                                  Ty.path "u16"
                                |)
                              |)
                            ]
                          |)
                        |) in
                      let~ numerator : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.bit_or,
                            [
                              M.call_closure (|
                                Ty.path "u16",
                                BinOp.Wrap.shl,
                                [
                                  M.cast (Ty.path "u16") (M.read (| r |));
                                  M.read (|
                                    get_constant (|
                                      "core::num::int_sqrt::u64_stages::QUARTER_BITS",
                                      Ty.path "u32"
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.path "u16",
                                BinOp.Wrap.shr,
                                [
                                  M.read (| lo |);
                                  M.read (|
                                    get_constant (|
                                      "core::num::int_sqrt::u64_stages::QUARTER_BITS",
                                      Ty.path "u32"
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |) in
                      let~ denominator : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.shl,
                            [
                              M.cast (Ty.path "u16") (M.read (| s |));
                              Value.Integer IntegerKind.I32 1
                            ]
                          |)
                        |) in
                      let~ q : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.div,
                            [ M.read (| numerator |); M.read (| denominator |) ]
                          |)
                        |) in
                      let~ u : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.rem,
                            [ M.read (| numerator |); M.read (| denominator |) ]
                          |)
                        |) in
                      let~ s : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.add,
                            [
                              M.cast
                                (Ty.path "u16")
                                (M.call_closure (|
                                  Ty.path "u8",
                                  BinOp.Wrap.shl,
                                  [
                                    M.read (| s |);
                                    M.read (|
                                      get_constant (|
                                        "core::num::int_sqrt::u64_stages::QUARTER_BITS",
                                        Ty.path "u32"
                                      |)
                                    |)
                                  ]
                                |));
                              M.read (| q |)
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        None,
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [ Ty.path "u16"; Ty.path "bool" ],
                            M.get_associated_function (|
                              Ty.path "u16",
                              "overflowing_sub",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.path "u16",
                                BinOp.Wrap.bit_or,
                                [
                                  M.call_closure (|
                                    Ty.path "u16",
                                    BinOp.Wrap.shl,
                                    [
                                      M.read (| u |);
                                      M.read (|
                                        get_constant (|
                                          "core::num::int_sqrt::u64_stages::QUARTER_BITS",
                                          Ty.path "u32"
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "u16",
                                    BinOp.Wrap.bit_and,
                                    [
                                      M.read (| lo |);
                                      M.read (|
                                        get_constant (|
                                          "core::num::int_sqrt::u64_stages::LOWEST_QUARTER_1_BITS",
                                          Ty.path "u16"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.path "u16",
                                BinOp.Wrap.mul,
                                [ M.read (| q |); M.read (| q |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let r := M.copy (| γ0_0 |) in
                              let overflow := M.copy (| γ0_1 |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.use overflow in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.write (|
                                              r,
                                              M.call_closure (|
                                                Ty.path "u16",
                                                M.get_associated_function (|
                                                  Ty.path "u16",
                                                  "wrapping_add",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.read (| r |);
                                                  M.call_closure (|
                                                    Ty.path "u16",
                                                    BinOp.Wrap.sub,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "u16",
                                                        BinOp.Wrap.mul,
                                                        [
                                                          Value.Integer IntegerKind.U16 2;
                                                          M.read (| s |)
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.U16 1
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            let β := s in
                                            M.write (|
                                              β,
                                              M.call_closure (|
                                                Ty.path "u16",
                                                BinOp.Wrap.sub,
                                                [ M.read (| β |); Value.Integer IntegerKind.U16 1 ]
                                              |)
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_function (| "core::hint::assert_unchecked", [], [] |),
                                    [
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.ne,
                                        [ M.read (| s |); Value.Integer IntegerKind.U16 0 ]
                                      |)
                                    ]
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [ M.read (| s |); M.read (| r |) ] |)))
                        ]
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let s := M.copy (| γ0_0 |) in
                            let r := M.copy (| γ0_1 |) in
                            M.match_operator (|
                              None,
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Some (Ty.tuple []),
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            BinOp.ne,
                                                            [
                                                              M.read (| s |);
                                                              Value.Integer IntegerKind.U16 0
                                                            ]
                                                          |)
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "`$s` is  zero in `middle_stage!`."
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              let~ n : Ty.path "u32" :=
                                M.alloc (|
                                  M.cast
                                    (Ty.path "u32")
                                    (M.call_closure (|
                                      Ty.path "u64",
                                      BinOp.Wrap.shr,
                                      [
                                        M.read (| n |);
                                        M.read (|
                                          get_constant (|
                                            "core::num::int_sqrt::u64_stages::N_SHIFT'2",
                                            Ty.path "u32"
                                          |)
                                        |)
                                      ]
                                    |))
                                |) in
                              let~ lo : Ty.path "u32" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u32",
                                    BinOp.Wrap.bit_and,
                                    [
                                      M.read (| n |);
                                      M.read (|
                                        get_constant (|
                                          "core::num::int_sqrt::u64_stages::LOWER_HALF_1_BITS'1",
                                          Ty.path "u32"
                                        |)
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ numerator : Ty.path "u32" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u32",
                                    BinOp.Wrap.bit_or,
                                    [
                                      M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.shl,
                                        [
                                          M.cast (Ty.path "u32") (M.read (| r |));
                                          M.read (|
                                            get_constant (|
                                              "core::num::int_sqrt::u64_stages::QUARTER_BITS'1",
                                              Ty.path "u32"
                                            |)
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.shr,
                                        [
                                          M.read (| lo |);
                                          M.read (|
                                            get_constant (|
                                              "core::num::int_sqrt::u64_stages::QUARTER_BITS'1",
                                              Ty.path "u32"
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ denominator : Ty.path "u32" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u32",
                                    BinOp.Wrap.shl,
                                    [
                                      M.cast (Ty.path "u32") (M.read (| s |));
                                      Value.Integer IntegerKind.I32 1
                                    ]
                                  |)
                                |) in
                              let~ q : Ty.path "u32" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u32",
                                    BinOp.Wrap.div,
                                    [ M.read (| numerator |); M.read (| denominator |) ]
                                  |)
                                |) in
                              let~ u : Ty.path "u32" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u32",
                                    BinOp.Wrap.rem,
                                    [ M.read (| numerator |); M.read (| denominator |) ]
                                  |)
                                |) in
                              let~ s : Ty.path "u32" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u32",
                                    BinOp.Wrap.add,
                                    [
                                      M.cast
                                        (Ty.path "u32")
                                        (M.call_closure (|
                                          Ty.path "u16",
                                          BinOp.Wrap.shl,
                                          [
                                            M.read (| s |);
                                            M.read (|
                                              get_constant (|
                                                "core::num::int_sqrt::u64_stages::QUARTER_BITS'1",
                                                Ty.path "u32"
                                              |)
                                            |)
                                          ]
                                        |));
                                      M.read (| q |)
                                    ]
                                  |)
                                |) in
                              M.match_operator (|
                                None,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.tuple [ Ty.path "u32"; Ty.path "bool" ],
                                    M.get_associated_function (|
                                      Ty.path "u32",
                                      "overflowing_sub",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.bit_or,
                                        [
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.shl,
                                            [
                                              M.read (| u |);
                                              M.read (|
                                                get_constant (|
                                                  "core::num::int_sqrt::u64_stages::QUARTER_BITS'1",
                                                  Ty.path "u32"
                                                |)
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.bit_and,
                                            [
                                              M.read (| lo |);
                                              M.read (|
                                                get_constant (|
                                                  "core::num::int_sqrt::u64_stages::LOWEST_QUARTER_1_BITS'1",
                                                  Ty.path "u32"
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.mul,
                                        [ M.read (| q |); M.read (| q |) ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let r := M.copy (| γ0_0 |) in
                                      let overflow := M.copy (| γ0_1 |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Some (Ty.tuple []),
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.use overflow in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.write (|
                                                      r,
                                                      M.call_closure (|
                                                        Ty.path "u32",
                                                        M.get_associated_function (|
                                                          Ty.path "u32",
                                                          "wrapping_add",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (| r |);
                                                          M.call_closure (|
                                                            Ty.path "u32",
                                                            BinOp.Wrap.sub,
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "u32",
                                                                BinOp.Wrap.mul,
                                                                [
                                                                  Value.Integer IntegerKind.U32 2;
                                                                  M.read (| s |)
                                                                ]
                                                              |);
                                                              Value.Integer IntegerKind.U32 1
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    let β := s in
                                                    M.write (|
                                                      β,
                                                      M.call_closure (|
                                                        Ty.path "u32",
                                                        BinOp.Wrap.sub,
                                                        [
                                                          M.read (| β |);
                                                          Value.Integer IntegerKind.U32 1
                                                        ]
                                                      |)
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_function (|
                                              "core::hint::assert_unchecked",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.ne,
                                                [ M.read (| s |); Value.Integer IntegerKind.U32 0 ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [ M.read (| s |); M.read (| r |) ] |)))
                                ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let s := M.copy (| γ0_0 |) in
                                    let r := M.copy (| γ0_1 |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Some (Ty.tuple []),
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Some (Ty.tuple []),
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.ne,
                                                                  [
                                                                    M.read (| s |);
                                                                    Value.Integer IntegerKind.U32 0
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::panic_fmt",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::Arguments",
                                                                  M.get_associated_function (|
                                                                    Ty.path "core::fmt::Arguments",
                                                                    "new_const",
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (|
                                                                            Value.Array
                                                                              [
                                                                                mk_str (|
                                                                                  "`$s` is  zero in `last_stage!`."
                                                                                |)
                                                                              ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    let~ lo : Ty.path "u64" :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "u64",
                                          BinOp.Wrap.bit_and,
                                          [
                                            M.read (| n |);
                                            M.read (|
                                              get_constant (|
                                                "core::num::int_sqrt::u64_stages::LOWER_HALF_1_BITS'2",
                                                Ty.path "u64"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let~ numerator : Ty.path "u64" :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "u64",
                                          BinOp.Wrap.bit_or,
                                          [
                                            M.call_closure (|
                                              Ty.path "u64",
                                              BinOp.Wrap.shl,
                                              [
                                                M.cast (Ty.path "u64") (M.read (| r |));
                                                M.read (|
                                                  get_constant (|
                                                    "core::num::int_sqrt::u64_stages::QUARTER_BITS'2",
                                                    Ty.path "u32"
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.call_closure (|
                                              Ty.path "u64",
                                              BinOp.Wrap.shr,
                                              [
                                                M.read (| lo |);
                                                M.read (|
                                                  get_constant (|
                                                    "core::num::int_sqrt::u64_stages::QUARTER_BITS'2",
                                                    Ty.path "u32"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let~ denominator : Ty.path "u64" :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "u64",
                                          BinOp.Wrap.shl,
                                          [
                                            M.cast (Ty.path "u64") (M.read (| s |));
                                            Value.Integer IntegerKind.I32 1
                                          ]
                                        |)
                                      |) in
                                    let~ q : Ty.path "u64" :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "u64",
                                          BinOp.Wrap.div,
                                          [ M.read (| numerator |); M.read (| denominator |) ]
                                        |)
                                      |) in
                                    let~ s : Ty.path "u64" :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "u64",
                                          BinOp.Wrap.add,
                                          [
                                            M.cast
                                              (Ty.path "u64")
                                              (M.call_closure (|
                                                Ty.path "u32",
                                                BinOp.Wrap.shl,
                                                [
                                                  M.read (| s |);
                                                  M.read (|
                                                    get_constant (|
                                                      "core::num::int_sqrt::u64_stages::QUARTER_BITS'2",
                                                      Ty.path "u32"
                                                    |)
                                                  |)
                                                ]
                                              |));
                                            M.read (| q |)
                                          ]
                                        |)
                                      |) in
                                    M.match_operator (|
                                      None,
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [ Ty.path "u64"; Ty.path "bool" ],
                                          M.get_associated_function (|
                                            Ty.path "u64",
                                            "overflowing_mul",
                                            [],
                                            []
                                          |),
                                          [ M.read (| s |); M.read (| s |) ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let s_squared := M.copy (| γ0_0 |) in
                                            let overflow := M.copy (| γ0_1 |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Some (Ty.tuple []),
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            LogicalOp.or (|
                                                              M.read (| overflow |),
                                                              ltac:(M.monadic
                                                                (M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.gt,
                                                                  [
                                                                    M.read (| s_squared |);
                                                                    M.read (| n |)
                                                                  ]
                                                                |)))
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      let~ _ : Ty.tuple [] :=
                                                        M.alloc (|
                                                          let β := s in
                                                          M.write (|
                                                            β,
                                                            M.call_closure (|
                                                              Ty.path "u64",
                                                              BinOp.Wrap.sub,
                                                              [
                                                                M.read (| β |);
                                                                Value.Integer IntegerKind.U64 1
                                                              ]
                                                            |)
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            s))
                                      ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_u64_stages :
      M.IsFunction.C "core::num::int_sqrt::u64_stages" u64_stages.
    Admitted.
    Global Typeclasses Opaque u64_stages.
    
    Module u64_stages.
      Definition value_N_SHIFT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.sub,
              [ Value.Integer IntegerKind.U32 64; Value.Integer IntegerKind.U32 8 ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_N_SHIFT :
        M.IsFunction.C "core::num::int_sqrt::u64_stages::N_SHIFT" value_N_SHIFT.
      Admitted.
      Global Typeclasses Opaque value_N_SHIFT.
      
      Definition value_N_SHIFT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.sub,
              [
                Value.Integer IntegerKind.U32 64;
                M.read (| get_associated_constant (| Ty.path "u16", "BITS", Ty.path "u32" |) |)
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_N_SHIFT :
        M.IsFunction.C "core::num::int_sqrt::u64_stages::N_SHIFT'1" value_N_SHIFT.
      Admitted.
      Global Typeclasses Opaque value_N_SHIFT.
      
      Definition value_HALF_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u16", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_HALF_BITS :
        M.IsFunction.C "core::num::int_sqrt::u64_stages::HALF_BITS" value_HALF_BITS.
      Admitted.
      Global Typeclasses Opaque value_HALF_BITS.
      
      Definition value_QUARTER_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u16", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 2
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_QUARTER_BITS :
        M.IsFunction.C "core::num::int_sqrt::u64_stages::QUARTER_BITS" value_QUARTER_BITS.
      Admitted.
      Global Typeclasses Opaque value_QUARTER_BITS.
      
      Definition value_LOWER_HALF_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u16",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u16",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U16 1;
                    M.read (|
                      get_constant (| "core::num::int_sqrt::u64_stages::HALF_BITS", Ty.path "u32" |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U16 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWER_HALF_1_BITS :
        M.IsFunction.C "core::num::int_sqrt::u64_stages::LOWER_HALF_1_BITS" value_LOWER_HALF_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWER_HALF_1_BITS.
      
      Definition value_LOWEST_QUARTER_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u16",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u16",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U16 1;
                    M.read (|
                      get_constant (|
                        "core::num::int_sqrt::u64_stages::QUARTER_BITS",
                        Ty.path "u32"
                      |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U16 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWEST_QUARTER_1_BITS :
        M.IsFunction.C
          "core::num::int_sqrt::u64_stages::LOWEST_QUARTER_1_BITS"
          value_LOWEST_QUARTER_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWEST_QUARTER_1_BITS.
      
      Definition value_N_SHIFT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.sub,
              [
                Value.Integer IntegerKind.U32 64;
                M.read (| get_associated_constant (| Ty.path "u32", "BITS", Ty.path "u32" |) |)
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_N_SHIFT :
        M.IsFunction.C "core::num::int_sqrt::u64_stages::N_SHIFT'2" value_N_SHIFT.
      Admitted.
      Global Typeclasses Opaque value_N_SHIFT.
      
      Definition value_HALF_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u32", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_HALF_BITS :
        M.IsFunction.C "core::num::int_sqrt::u64_stages::HALF_BITS'1" value_HALF_BITS.
      Admitted.
      Global Typeclasses Opaque value_HALF_BITS.
      
      Definition value_QUARTER_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u32", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 2
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_QUARTER_BITS :
        M.IsFunction.C "core::num::int_sqrt::u64_stages::QUARTER_BITS'1" value_QUARTER_BITS.
      Admitted.
      Global Typeclasses Opaque value_QUARTER_BITS.
      
      Definition value_LOWER_HALF_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U32 1;
                    M.read (|
                      get_constant (|
                        "core::num::int_sqrt::u64_stages::HALF_BITS'1",
                        Ty.path "u32"
                      |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U32 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWER_HALF_1_BITS :
        M.IsFunction.C
          "core::num::int_sqrt::u64_stages::LOWER_HALF_1_BITS'1"
          value_LOWER_HALF_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWER_HALF_1_BITS.
      
      Definition value_LOWEST_QUARTER_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U32 1;
                    M.read (|
                      get_constant (|
                        "core::num::int_sqrt::u64_stages::QUARTER_BITS'1",
                        Ty.path "u32"
                      |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U32 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWEST_QUARTER_1_BITS :
        M.IsFunction.C
          "core::num::int_sqrt::u64_stages::LOWEST_QUARTER_1_BITS'1"
          value_LOWEST_QUARTER_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWEST_QUARTER_1_BITS.
      
      Definition value_HALF_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u64", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_HALF_BITS :
        M.IsFunction.C "core::num::int_sqrt::u64_stages::HALF_BITS'2" value_HALF_BITS.
      Admitted.
      Global Typeclasses Opaque value_HALF_BITS.
      
      Definition value_QUARTER_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u64", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 2
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_QUARTER_BITS :
        M.IsFunction.C "core::num::int_sqrt::u64_stages::QUARTER_BITS'2" value_QUARTER_BITS.
      Admitted.
      Global Typeclasses Opaque value_QUARTER_BITS.
      
      Definition value_LOWER_HALF_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u64",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u64",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U64 1;
                    M.read (|
                      get_constant (|
                        "core::num::int_sqrt::u64_stages::HALF_BITS'2",
                        Ty.path "u32"
                      |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U64 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWER_HALF_1_BITS :
        M.IsFunction.C
          "core::num::int_sqrt::u64_stages::LOWER_HALF_1_BITS'2"
          value_LOWER_HALF_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWER_HALF_1_BITS.
    End u64_stages.
    
    (*
    const fn u128_stages(n: u128) -> u128 {
        let (s, r) = first_stage!(128, n);
        let (s, r) = middle_stage!(128, u16, n, s, r);
        let (s, r) = middle_stage!(128, u32, n, s, r);
        let (s, r) = middle_stage!(128, u64, n, s, r);
        last_stage!(u128, n, s, r)
    }
    *)
    Definition u128_stages (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ n ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          M.read (|
            M.match_operator (|
              None,
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ne,
                                            [ M.read (| n |); Value.Integer IntegerKind.U128 0 ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::Arguments",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_const",
                                              [ Value.Integer IntegerKind.Usize 1 ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          mk_str (|
                                                            "`$n` is  zero in `first_stage!`."
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ n : Ty.path "u128" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u128",
                    BinOp.Wrap.shr,
                    [
                      M.read (| n |);
                      M.read (|
                        get_constant (|
                          "core::num::int_sqrt::u128_stages::N_SHIFT",
                          Ty.path "u32"
                        |)
                      |)
                    ]
                  |)
                |) in
              M.match_operator (|
                None,
                M.SubPointer.get_array_field (|
                  get_constant (|
                    "core::num::int_sqrt::U8_ISQRT_WITH_REMAINDER",
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 256 ]
                      [ Ty.tuple [ Ty.path "u8"; Ty.path "u8" ] ]
                  |),
                  M.cast (Ty.path "usize") (M.read (| n |))
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let s := M.copy (| γ0_0 |) in
                      let r := M.copy (| γ0_1 |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_function (| "core::hint::assert_unchecked", [], [] |),
                            [
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ne,
                                [ M.read (| s |); Value.Integer IntegerKind.U8 0 ]
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [ M.read (| s |); M.read (| r |) ] |)))
                ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let s := M.copy (| γ0_0 |) in
                    let r := M.copy (| γ0_1 |) in
                    M.match_operator (|
                      None,
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.ne,
                                                    [ M.read (| s |); Value.Integer IntegerKind.U8 0
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.call_closure (|
                                                Ty.path "never",
                                                M.get_function (|
                                                  "core::panicking::panic_fmt",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.path "core::fmt::Arguments",
                                                    M.get_associated_function (|
                                                      Ty.path "core::fmt::Arguments",
                                                      "new_const",
                                                      [ Value.Integer IntegerKind.Usize 1 ],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  mk_str (|
                                                                    "`$s` is  zero in `middle_stage!`."
                                                                  |)
                                                                ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ n : Ty.path "u16" :=
                        M.alloc (|
                          M.cast
                            (Ty.path "u16")
                            (M.call_closure (|
                              Ty.path "u128",
                              BinOp.Wrap.shr,
                              [
                                M.read (| n |);
                                M.read (|
                                  get_constant (|
                                    "core::num::int_sqrt::u128_stages::N_SHIFT'1",
                                    Ty.path "u32"
                                  |)
                                |)
                              ]
                            |))
                        |) in
                      let~ lo : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.bit_and,
                            [
                              M.read (| n |);
                              M.read (|
                                get_constant (|
                                  "core::num::int_sqrt::u128_stages::LOWER_HALF_1_BITS",
                                  Ty.path "u16"
                                |)
                              |)
                            ]
                          |)
                        |) in
                      let~ numerator : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.bit_or,
                            [
                              M.call_closure (|
                                Ty.path "u16",
                                BinOp.Wrap.shl,
                                [
                                  M.cast (Ty.path "u16") (M.read (| r |));
                                  M.read (|
                                    get_constant (|
                                      "core::num::int_sqrt::u128_stages::QUARTER_BITS",
                                      Ty.path "u32"
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.path "u16",
                                BinOp.Wrap.shr,
                                [
                                  M.read (| lo |);
                                  M.read (|
                                    get_constant (|
                                      "core::num::int_sqrt::u128_stages::QUARTER_BITS",
                                      Ty.path "u32"
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |) in
                      let~ denominator : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.shl,
                            [
                              M.cast (Ty.path "u16") (M.read (| s |));
                              Value.Integer IntegerKind.I32 1
                            ]
                          |)
                        |) in
                      let~ q : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.div,
                            [ M.read (| numerator |); M.read (| denominator |) ]
                          |)
                        |) in
                      let~ u : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.rem,
                            [ M.read (| numerator |); M.read (| denominator |) ]
                          |)
                        |) in
                      let~ s : Ty.path "u16" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.add,
                            [
                              M.cast
                                (Ty.path "u16")
                                (M.call_closure (|
                                  Ty.path "u8",
                                  BinOp.Wrap.shl,
                                  [
                                    M.read (| s |);
                                    M.read (|
                                      get_constant (|
                                        "core::num::int_sqrt::u128_stages::QUARTER_BITS",
                                        Ty.path "u32"
                                      |)
                                    |)
                                  ]
                                |));
                              M.read (| q |)
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        None,
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [ Ty.path "u16"; Ty.path "bool" ],
                            M.get_associated_function (|
                              Ty.path "u16",
                              "overflowing_sub",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.path "u16",
                                BinOp.Wrap.bit_or,
                                [
                                  M.call_closure (|
                                    Ty.path "u16",
                                    BinOp.Wrap.shl,
                                    [
                                      M.read (| u |);
                                      M.read (|
                                        get_constant (|
                                          "core::num::int_sqrt::u128_stages::QUARTER_BITS",
                                          Ty.path "u32"
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "u16",
                                    BinOp.Wrap.bit_and,
                                    [
                                      M.read (| lo |);
                                      M.read (|
                                        get_constant (|
                                          "core::num::int_sqrt::u128_stages::LOWEST_QUARTER_1_BITS",
                                          Ty.path "u16"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.path "u16",
                                BinOp.Wrap.mul,
                                [ M.read (| q |); M.read (| q |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let r := M.copy (| γ0_0 |) in
                              let overflow := M.copy (| γ0_1 |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.use overflow in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.write (|
                                              r,
                                              M.call_closure (|
                                                Ty.path "u16",
                                                M.get_associated_function (|
                                                  Ty.path "u16",
                                                  "wrapping_add",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.read (| r |);
                                                  M.call_closure (|
                                                    Ty.path "u16",
                                                    BinOp.Wrap.sub,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "u16",
                                                        BinOp.Wrap.mul,
                                                        [
                                                          Value.Integer IntegerKind.U16 2;
                                                          M.read (| s |)
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.U16 1
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            let β := s in
                                            M.write (|
                                              β,
                                              M.call_closure (|
                                                Ty.path "u16",
                                                BinOp.Wrap.sub,
                                                [ M.read (| β |); Value.Integer IntegerKind.U16 1 ]
                                              |)
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_function (| "core::hint::assert_unchecked", [], [] |),
                                    [
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.ne,
                                        [ M.read (| s |); Value.Integer IntegerKind.U16 0 ]
                                      |)
                                    ]
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [ M.read (| s |); M.read (| r |) ] |)))
                        ]
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let s := M.copy (| γ0_0 |) in
                            let r := M.copy (| γ0_1 |) in
                            M.match_operator (|
                              None,
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Some (Ty.tuple []),
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            BinOp.ne,
                                                            [
                                                              M.read (| s |);
                                                              Value.Integer IntegerKind.U16 0
                                                            ]
                                                          |)
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "`$s` is  zero in `middle_stage!`."
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              let~ n : Ty.path "u32" :=
                                M.alloc (|
                                  M.cast
                                    (Ty.path "u32")
                                    (M.call_closure (|
                                      Ty.path "u128",
                                      BinOp.Wrap.shr,
                                      [
                                        M.read (| n |);
                                        M.read (|
                                          get_constant (|
                                            "core::num::int_sqrt::u128_stages::N_SHIFT'2",
                                            Ty.path "u32"
                                          |)
                                        |)
                                      ]
                                    |))
                                |) in
                              let~ lo : Ty.path "u32" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u32",
                                    BinOp.Wrap.bit_and,
                                    [
                                      M.read (| n |);
                                      M.read (|
                                        get_constant (|
                                          "core::num::int_sqrt::u128_stages::LOWER_HALF_1_BITS'1",
                                          Ty.path "u32"
                                        |)
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ numerator : Ty.path "u32" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u32",
                                    BinOp.Wrap.bit_or,
                                    [
                                      M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.shl,
                                        [
                                          M.cast (Ty.path "u32") (M.read (| r |));
                                          M.read (|
                                            get_constant (|
                                              "core::num::int_sqrt::u128_stages::QUARTER_BITS'1",
                                              Ty.path "u32"
                                            |)
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.shr,
                                        [
                                          M.read (| lo |);
                                          M.read (|
                                            get_constant (|
                                              "core::num::int_sqrt::u128_stages::QUARTER_BITS'1",
                                              Ty.path "u32"
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ denominator : Ty.path "u32" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u32",
                                    BinOp.Wrap.shl,
                                    [
                                      M.cast (Ty.path "u32") (M.read (| s |));
                                      Value.Integer IntegerKind.I32 1
                                    ]
                                  |)
                                |) in
                              let~ q : Ty.path "u32" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u32",
                                    BinOp.Wrap.div,
                                    [ M.read (| numerator |); M.read (| denominator |) ]
                                  |)
                                |) in
                              let~ u : Ty.path "u32" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u32",
                                    BinOp.Wrap.rem,
                                    [ M.read (| numerator |); M.read (| denominator |) ]
                                  |)
                                |) in
                              let~ s : Ty.path "u32" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u32",
                                    BinOp.Wrap.add,
                                    [
                                      M.cast
                                        (Ty.path "u32")
                                        (M.call_closure (|
                                          Ty.path "u16",
                                          BinOp.Wrap.shl,
                                          [
                                            M.read (| s |);
                                            M.read (|
                                              get_constant (|
                                                "core::num::int_sqrt::u128_stages::QUARTER_BITS'1",
                                                Ty.path "u32"
                                              |)
                                            |)
                                          ]
                                        |));
                                      M.read (| q |)
                                    ]
                                  |)
                                |) in
                              M.match_operator (|
                                None,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.tuple [ Ty.path "u32"; Ty.path "bool" ],
                                    M.get_associated_function (|
                                      Ty.path "u32",
                                      "overflowing_sub",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.bit_or,
                                        [
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.shl,
                                            [
                                              M.read (| u |);
                                              M.read (|
                                                get_constant (|
                                                  "core::num::int_sqrt::u128_stages::QUARTER_BITS'1",
                                                  Ty.path "u32"
                                                |)
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.bit_and,
                                            [
                                              M.read (| lo |);
                                              M.read (|
                                                get_constant (|
                                                  "core::num::int_sqrt::u128_stages::LOWEST_QUARTER_1_BITS'1",
                                                  Ty.path "u32"
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.mul,
                                        [ M.read (| q |); M.read (| q |) ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let r := M.copy (| γ0_0 |) in
                                      let overflow := M.copy (| γ0_1 |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Some (Ty.tuple []),
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.use overflow in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.write (|
                                                      r,
                                                      M.call_closure (|
                                                        Ty.path "u32",
                                                        M.get_associated_function (|
                                                          Ty.path "u32",
                                                          "wrapping_add",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (| r |);
                                                          M.call_closure (|
                                                            Ty.path "u32",
                                                            BinOp.Wrap.sub,
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "u32",
                                                                BinOp.Wrap.mul,
                                                                [
                                                                  Value.Integer IntegerKind.U32 2;
                                                                  M.read (| s |)
                                                                ]
                                                              |);
                                                              Value.Integer IntegerKind.U32 1
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    let β := s in
                                                    M.write (|
                                                      β,
                                                      M.call_closure (|
                                                        Ty.path "u32",
                                                        BinOp.Wrap.sub,
                                                        [
                                                          M.read (| β |);
                                                          Value.Integer IntegerKind.U32 1
                                                        ]
                                                      |)
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_function (|
                                              "core::hint::assert_unchecked",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.ne,
                                                [ M.read (| s |); Value.Integer IntegerKind.U32 0 ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [ M.read (| s |); M.read (| r |) ] |)))
                                ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let s := M.copy (| γ0_0 |) in
                                    let r := M.copy (| γ0_1 |) in
                                    M.match_operator (|
                                      None,
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Some (Ty.tuple []),
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.ne,
                                                                    [
                                                                      M.read (| s |);
                                                                      Value.Integer
                                                                        IntegerKind.U32
                                                                        0
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.call_closure (|
                                                                Ty.path "never",
                                                                M.get_function (|
                                                                  "core::panicking::panic_fmt",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "core::fmt::Arguments",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "core::fmt::Arguments",
                                                                      "new_const",
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.alloc (|
                                                                              Value.Array
                                                                                [
                                                                                  mk_str (|
                                                                                    "`$s` is  zero in `middle_stage!`."
                                                                                  |)
                                                                                ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      let~ n : Ty.path "u64" :=
                                        M.alloc (|
                                          M.cast
                                            (Ty.path "u64")
                                            (M.call_closure (|
                                              Ty.path "u128",
                                              BinOp.Wrap.shr,
                                              [
                                                M.read (| n |);
                                                M.read (|
                                                  get_constant (|
                                                    "core::num::int_sqrt::u128_stages::N_SHIFT'3",
                                                    Ty.path "u32"
                                                  |)
                                                |)
                                              ]
                                            |))
                                        |) in
                                      let~ lo : Ty.path "u64" :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "u64",
                                            BinOp.Wrap.bit_and,
                                            [
                                              M.read (| n |);
                                              M.read (|
                                                get_constant (|
                                                  "core::num::int_sqrt::u128_stages::LOWER_HALF_1_BITS'2",
                                                  Ty.path "u64"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ numerator : Ty.path "u64" :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "u64",
                                            BinOp.Wrap.bit_or,
                                            [
                                              M.call_closure (|
                                                Ty.path "u64",
                                                BinOp.Wrap.shl,
                                                [
                                                  M.cast (Ty.path "u64") (M.read (| r |));
                                                  M.read (|
                                                    get_constant (|
                                                      "core::num::int_sqrt::u128_stages::QUARTER_BITS'2",
                                                      Ty.path "u32"
                                                    |)
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                Ty.path "u64",
                                                BinOp.Wrap.shr,
                                                [
                                                  M.read (| lo |);
                                                  M.read (|
                                                    get_constant (|
                                                      "core::num::int_sqrt::u128_stages::QUARTER_BITS'2",
                                                      Ty.path "u32"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ denominator : Ty.path "u64" :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "u64",
                                            BinOp.Wrap.shl,
                                            [
                                              M.cast (Ty.path "u64") (M.read (| s |));
                                              Value.Integer IntegerKind.I32 1
                                            ]
                                          |)
                                        |) in
                                      let~ q : Ty.path "u64" :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "u64",
                                            BinOp.Wrap.div,
                                            [ M.read (| numerator |); M.read (| denominator |) ]
                                          |)
                                        |) in
                                      let~ u : Ty.path "u64" :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "u64",
                                            BinOp.Wrap.rem,
                                            [ M.read (| numerator |); M.read (| denominator |) ]
                                          |)
                                        |) in
                                      let~ s : Ty.path "u64" :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "u64",
                                            BinOp.Wrap.add,
                                            [
                                              M.cast
                                                (Ty.path "u64")
                                                (M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.shl,
                                                  [
                                                    M.read (| s |);
                                                    M.read (|
                                                      get_constant (|
                                                        "core::num::int_sqrt::u128_stages::QUARTER_BITS'2",
                                                        Ty.path "u32"
                                                      |)
                                                    |)
                                                  ]
                                                |));
                                              M.read (| q |)
                                            ]
                                          |)
                                        |) in
                                      M.match_operator (|
                                        None,
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [ Ty.path "u64"; Ty.path "bool" ],
                                            M.get_associated_function (|
                                              Ty.path "u64",
                                              "overflowing_sub",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "u64",
                                                BinOp.Wrap.bit_or,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "u64",
                                                    BinOp.Wrap.shl,
                                                    [
                                                      M.read (| u |);
                                                      M.read (|
                                                        get_constant (|
                                                          "core::num::int_sqrt::u128_stages::QUARTER_BITS'2",
                                                          Ty.path "u32"
                                                        |)
                                                      |)
                                                    ]
                                                  |);
                                                  M.call_closure (|
                                                    Ty.path "u64",
                                                    BinOp.Wrap.bit_and,
                                                    [
                                                      M.read (| lo |);
                                                      M.read (|
                                                        get_constant (|
                                                          "core::num::int_sqrt::u128_stages::LOWEST_QUARTER_1_BITS'2",
                                                          Ty.path "u64"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                Ty.path "u64",
                                                BinOp.Wrap.mul,
                                                [ M.read (| q |); M.read (| q |) ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let r := M.copy (| γ0_0 |) in
                                              let overflow := M.copy (| γ0_1 |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Some (Ty.tuple []),
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ := M.use overflow in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        let~ _ : Ty.tuple [] :=
                                                          M.alloc (|
                                                            M.write (|
                                                              r,
                                                              M.call_closure (|
                                                                Ty.path "u64",
                                                                M.get_associated_function (|
                                                                  Ty.path "u64",
                                                                  "wrapping_add",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| r |);
                                                                  M.call_closure (|
                                                                    Ty.path "u64",
                                                                    BinOp.Wrap.sub,
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.path "u64",
                                                                        BinOp.Wrap.mul,
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.U64
                                                                            2;
                                                                          M.read (| s |)
                                                                        ]
                                                                      |);
                                                                      Value.Integer
                                                                        IntegerKind.U64
                                                                        1
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |) in
                                                        let~ _ : Ty.tuple [] :=
                                                          M.alloc (|
                                                            let β := s in
                                                            M.write (|
                                                              β,
                                                              M.call_closure (|
                                                                Ty.path "u64",
                                                                BinOp.Wrap.sub,
                                                                [
                                                                  M.read (| β |);
                                                                  Value.Integer IntegerKind.U64 1
                                                                ]
                                                              |)
                                                            |)
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_function (|
                                                      "core::hint::assert_unchecked",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.ne,
                                                        [
                                                          M.read (| s |);
                                                          Value.Integer IntegerKind.U64 0
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (|
                                                Value.Tuple [ M.read (| s |); M.read (| r |) ]
                                              |)))
                                        ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let s := M.copy (| γ0_0 |) in
                                            let r := M.copy (| γ0_1 |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Some (Ty.tuple []),
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use (M.alloc (| Value.Bool true |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      let~ _ : Ty.tuple [] :=
                                                        M.match_operator (|
                                                          Some (Ty.tuple []),
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      UnOp.not (|
                                                                        M.call_closure (|
                                                                          Ty.path "bool",
                                                                          BinOp.ne,
                                                                          [
                                                                            M.read (| s |);
                                                                            Value.Integer
                                                                              IntegerKind.U64
                                                                              0
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.call_closure (|
                                                                      Ty.path "never",
                                                                      M.get_function (|
                                                                        "core::panicking::panic_fmt",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.path
                                                                            "core::fmt::Arguments",
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::Arguments",
                                                                            "new_const",
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.alloc (|
                                                                                    Value.Array
                                                                                      [
                                                                                        mk_str (|
                                                                                          "`$s` is  zero in `last_stage!`."
                                                                                        |)
                                                                                      ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            let~ lo : Ty.path "u128" :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "u128",
                                                  BinOp.Wrap.bit_and,
                                                  [
                                                    M.read (| n |);
                                                    M.read (|
                                                      get_constant (|
                                                        "core::num::int_sqrt::u128_stages::LOWER_HALF_1_BITS'3",
                                                        Ty.path "u128"
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let~ numerator : Ty.path "u128" :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "u128",
                                                  BinOp.Wrap.bit_or,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u128",
                                                      BinOp.Wrap.shl,
                                                      [
                                                        M.cast (Ty.path "u128") (M.read (| r |));
                                                        M.read (|
                                                          get_constant (|
                                                            "core::num::int_sqrt::u128_stages::QUARTER_BITS'3",
                                                            Ty.path "u32"
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "u128",
                                                      BinOp.Wrap.shr,
                                                      [
                                                        M.read (| lo |);
                                                        M.read (|
                                                          get_constant (|
                                                            "core::num::int_sqrt::u128_stages::QUARTER_BITS'3",
                                                            Ty.path "u32"
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let~ denominator : Ty.path "u128" :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "u128",
                                                  BinOp.Wrap.shl,
                                                  [
                                                    M.cast (Ty.path "u128") (M.read (| s |));
                                                    Value.Integer IntegerKind.I32 1
                                                  ]
                                                |)
                                              |) in
                                            let~ q : Ty.path "u128" :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "u128",
                                                  BinOp.Wrap.div,
                                                  [ M.read (| numerator |); M.read (| denominator |)
                                                  ]
                                                |)
                                              |) in
                                            let~ s : Ty.path "u128" :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "u128",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.cast
                                                      (Ty.path "u128")
                                                      (M.call_closure (|
                                                        Ty.path "u64",
                                                        BinOp.Wrap.shl,
                                                        [
                                                          M.read (| s |);
                                                          M.read (|
                                                            get_constant (|
                                                              "core::num::int_sqrt::u128_stages::QUARTER_BITS'3",
                                                              Ty.path "u32"
                                                            |)
                                                          |)
                                                        ]
                                                      |));
                                                    M.read (| q |)
                                                  ]
                                                |)
                                              |) in
                                            M.match_operator (|
                                              None,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.tuple [ Ty.path "u128"; Ty.path "bool" ],
                                                  M.get_associated_function (|
                                                    Ty.path "u128",
                                                    "overflowing_mul",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| s |); M.read (| s |) ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let s_squared := M.copy (| γ0_0 |) in
                                                    let overflow := M.copy (| γ0_1 |) in
                                                    let~ _ : Ty.tuple [] :=
                                                      M.match_operator (|
                                                        Some (Ty.tuple []),
                                                        M.alloc (| Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    LogicalOp.or (|
                                                                      M.read (| overflow |),
                                                                      ltac:(M.monadic
                                                                        (M.call_closure (|
                                                                          Ty.path "bool",
                                                                          BinOp.gt,
                                                                          [
                                                                            M.read (| s_squared |);
                                                                            M.read (| n |)
                                                                          ]
                                                                        |)))
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              let~ _ : Ty.tuple [] :=
                                                                M.alloc (|
                                                                  let β := s in
                                                                  M.write (|
                                                                    β,
                                                                    M.call_closure (|
                                                                      Ty.path "u128",
                                                                      BinOp.Wrap.sub,
                                                                      [
                                                                        M.read (| β |);
                                                                        Value.Integer
                                                                          IntegerKind.U128
                                                                          1
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.alloc (| Value.Tuple [] |)))
                                                        ]
                                                      |) in
                                                    s))
                                              ]
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_u128_stages :
      M.IsFunction.C "core::num::int_sqrt::u128_stages" u128_stages.
    Admitted.
    Global Typeclasses Opaque u128_stages.
    
    Module u128_stages.
      Definition value_N_SHIFT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.sub,
              [ Value.Integer IntegerKind.U32 128; Value.Integer IntegerKind.U32 8 ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_N_SHIFT :
        M.IsFunction.C "core::num::int_sqrt::u128_stages::N_SHIFT" value_N_SHIFT.
      Admitted.
      Global Typeclasses Opaque value_N_SHIFT.
      
      Definition value_N_SHIFT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.sub,
              [
                Value.Integer IntegerKind.U32 128;
                M.read (| get_associated_constant (| Ty.path "u16", "BITS", Ty.path "u32" |) |)
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_N_SHIFT :
        M.IsFunction.C "core::num::int_sqrt::u128_stages::N_SHIFT'1" value_N_SHIFT.
      Admitted.
      Global Typeclasses Opaque value_N_SHIFT.
      
      Definition value_HALF_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u16", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_HALF_BITS :
        M.IsFunction.C "core::num::int_sqrt::u128_stages::HALF_BITS" value_HALF_BITS.
      Admitted.
      Global Typeclasses Opaque value_HALF_BITS.
      
      Definition value_QUARTER_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u16", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 2
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_QUARTER_BITS :
        M.IsFunction.C "core::num::int_sqrt::u128_stages::QUARTER_BITS" value_QUARTER_BITS.
      Admitted.
      Global Typeclasses Opaque value_QUARTER_BITS.
      
      Definition value_LOWER_HALF_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u16",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u16",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U16 1;
                    M.read (|
                      get_constant (|
                        "core::num::int_sqrt::u128_stages::HALF_BITS",
                        Ty.path "u32"
                      |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U16 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWER_HALF_1_BITS :
        M.IsFunction.C
          "core::num::int_sqrt::u128_stages::LOWER_HALF_1_BITS"
          value_LOWER_HALF_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWER_HALF_1_BITS.
      
      Definition value_LOWEST_QUARTER_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u16",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u16",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U16 1;
                    M.read (|
                      get_constant (|
                        "core::num::int_sqrt::u128_stages::QUARTER_BITS",
                        Ty.path "u32"
                      |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U16 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWEST_QUARTER_1_BITS :
        M.IsFunction.C
          "core::num::int_sqrt::u128_stages::LOWEST_QUARTER_1_BITS"
          value_LOWEST_QUARTER_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWEST_QUARTER_1_BITS.
      
      Definition value_N_SHIFT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.sub,
              [
                Value.Integer IntegerKind.U32 128;
                M.read (| get_associated_constant (| Ty.path "u32", "BITS", Ty.path "u32" |) |)
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_N_SHIFT :
        M.IsFunction.C "core::num::int_sqrt::u128_stages::N_SHIFT'2" value_N_SHIFT.
      Admitted.
      Global Typeclasses Opaque value_N_SHIFT.
      
      Definition value_HALF_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u32", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_HALF_BITS :
        M.IsFunction.C "core::num::int_sqrt::u128_stages::HALF_BITS'1" value_HALF_BITS.
      Admitted.
      Global Typeclasses Opaque value_HALF_BITS.
      
      Definition value_QUARTER_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u32", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 2
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_QUARTER_BITS :
        M.IsFunction.C "core::num::int_sqrt::u128_stages::QUARTER_BITS'1" value_QUARTER_BITS.
      Admitted.
      Global Typeclasses Opaque value_QUARTER_BITS.
      
      Definition value_LOWER_HALF_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U32 1;
                    M.read (|
                      get_constant (|
                        "core::num::int_sqrt::u128_stages::HALF_BITS'1",
                        Ty.path "u32"
                      |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U32 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWER_HALF_1_BITS :
        M.IsFunction.C
          "core::num::int_sqrt::u128_stages::LOWER_HALF_1_BITS'1"
          value_LOWER_HALF_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWER_HALF_1_BITS.
      
      Definition value_LOWEST_QUARTER_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U32 1;
                    M.read (|
                      get_constant (|
                        "core::num::int_sqrt::u128_stages::QUARTER_BITS'1",
                        Ty.path "u32"
                      |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U32 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWEST_QUARTER_1_BITS :
        M.IsFunction.C
          "core::num::int_sqrt::u128_stages::LOWEST_QUARTER_1_BITS'1"
          value_LOWEST_QUARTER_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWEST_QUARTER_1_BITS.
      
      Definition value_N_SHIFT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.sub,
              [
                Value.Integer IntegerKind.U32 128;
                M.read (| get_associated_constant (| Ty.path "u64", "BITS", Ty.path "u32" |) |)
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_N_SHIFT :
        M.IsFunction.C "core::num::int_sqrt::u128_stages::N_SHIFT'3" value_N_SHIFT.
      Admitted.
      Global Typeclasses Opaque value_N_SHIFT.
      
      Definition value_HALF_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u64", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_HALF_BITS :
        M.IsFunction.C "core::num::int_sqrt::u128_stages::HALF_BITS'2" value_HALF_BITS.
      Admitted.
      Global Typeclasses Opaque value_HALF_BITS.
      
      Definition value_QUARTER_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u64", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 2
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_QUARTER_BITS :
        M.IsFunction.C "core::num::int_sqrt::u128_stages::QUARTER_BITS'2" value_QUARTER_BITS.
      Admitted.
      Global Typeclasses Opaque value_QUARTER_BITS.
      
      Definition value_LOWER_HALF_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u64",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u64",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U64 1;
                    M.read (|
                      get_constant (|
                        "core::num::int_sqrt::u128_stages::HALF_BITS'2",
                        Ty.path "u32"
                      |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U64 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWER_HALF_1_BITS :
        M.IsFunction.C
          "core::num::int_sqrt::u128_stages::LOWER_HALF_1_BITS'2"
          value_LOWER_HALF_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWER_HALF_1_BITS.
      
      Definition value_LOWEST_QUARTER_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u64",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u64",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U64 1;
                    M.read (|
                      get_constant (|
                        "core::num::int_sqrt::u128_stages::QUARTER_BITS'2",
                        Ty.path "u32"
                      |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U64 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWEST_QUARTER_1_BITS :
        M.IsFunction.C
          "core::num::int_sqrt::u128_stages::LOWEST_QUARTER_1_BITS'2"
          value_LOWEST_QUARTER_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWEST_QUARTER_1_BITS.
      
      Definition value_HALF_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u128", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_HALF_BITS :
        M.IsFunction.C "core::num::int_sqrt::u128_stages::HALF_BITS'3" value_HALF_BITS.
      Admitted.
      Global Typeclasses Opaque value_HALF_BITS.
      
      Definition value_QUARTER_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.read (| get_associated_constant (| Ty.path "u128", "BITS", Ty.path "u32" |) |);
                Value.Integer IntegerKind.I32 2
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_QUARTER_BITS :
        M.IsFunction.C "core::num::int_sqrt::u128_stages::QUARTER_BITS'3" value_QUARTER_BITS.
      Admitted.
      Global Typeclasses Opaque value_QUARTER_BITS.
      
      Definition value_LOWER_HALF_1_BITS
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u128",
              BinOp.Wrap.sub,
              [
                M.call_closure (|
                  Ty.path "u128",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U128 1;
                    M.read (|
                      get_constant (|
                        "core::num::int_sqrt::u128_stages::HALF_BITS'3",
                        Ty.path "u32"
                      |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U128 1
              ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LOWER_HALF_1_BITS :
        M.IsFunction.C
          "core::num::int_sqrt::u128_stages::LOWER_HALF_1_BITS'3"
          value_LOWER_HALF_1_BITS.
      Admitted.
      Global Typeclasses Opaque value_LOWER_HALF_1_BITS.
    End u128_stages.
    
    (*
            pub const fn $UnsignedT(mut n: $UnsignedT) -> $UnsignedT {
                if n <= <$HalfBitsT>::MAX as $UnsignedT {
                    $HalfBitsT(n as $HalfBitsT) as $UnsignedT
                } else {
                    // The normalization shift satisfies the Karatsuba square root
                    // algorithm precondition "a₃ ≥ b/4" where a₃ is the most
                    // significant quarter of `n`'s bits and b is the number of
                    // values that can be represented by that quarter of the bits.
                    //
                    // b/4 would then be all 0s except the second most significant
                    // bit (010...0) in binary. Since a₃ must be at least b/4, a₃'s
                    // most significant bit or its neighbor must be a 1. Since a₃'s
                    // most significant bits are `n`'s most significant bits, the
                    // same applies to `n`.
                    //
                    // The reason to shift by an even number of bits is because an
                    // even number of bits produces the square root shifted to the
                    // left by half of the normalization shift:
                    //
                    // sqrt(n << (2 * p))
                    // sqrt(2.pow(2 * p) * n)
                    // sqrt(2.pow(2 * p)) * sqrt(n)
                    // 2.pow(p) * sqrt(n)
                    // sqrt(n) << p
                    //
                    // Shifting by an odd number of bits leaves an ugly sqrt(2)
                    // multiplied in:
                    //
                    // sqrt(n << (2 * p + 1))
                    // sqrt(2.pow(2 * p + 1) * n)
                    // sqrt(2 * 2.pow(2 * p) * n)
                    // sqrt(2) * sqrt(2.pow(2 * p)) * sqrt(n)
                    // sqrt(2) * 2.pow(p) * sqrt(n)
                    // sqrt(2) * (sqrt(n) << p)
                    const EVEN_MAKING_BITMASK: u32 = !1;
                    let normalization_shift = n.leading_zeros() & EVEN_MAKING_BITMASK;
                    n <<= normalization_shift;
    
                    let s = $stages(n);
    
                    let denormalization_shift = normalization_shift >> 1;
                    s >> denormalization_shift
                }
            }
    *)
    Definition u16 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ n ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          M.read (|
            M.match_operator (|
              Some (Ty.path "u16"),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.le,
                            [
                              M.read (| n |);
                              M.cast
                                (Ty.path "u16")
                                (M.read (|
                                  get_associated_constant (| Ty.path "u8", "MAX", Ty.path "u8" |)
                                |))
                            ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.cast
                        (Ty.path "u16")
                        (M.call_closure (|
                          Ty.path "u8",
                          M.get_function (| "core::num::int_sqrt::u8", [], [] |),
                          [ M.cast (Ty.path "u8") (M.read (| n |)) ]
                        |))
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let~ normalization_shift : Ty.path "u32" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.bit_and,
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              M.get_associated_function (|
                                Ty.path "u16",
                                "leading_zeros",
                                [],
                                []
                              |),
                              [ M.read (| n |) ]
                            |);
                            M.read (|
                              get_constant (|
                                "core::num::int_sqrt::u16::EVEN_MAKING_BITMASK",
                                Ty.path "u32"
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.alloc (|
                        let β := n in
                        M.write (|
                          β,
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.shl,
                            [ M.read (| β |); M.read (| normalization_shift |) ]
                          |)
                        |)
                      |) in
                    let~ s : Ty.path "u16" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u16",
                          M.get_function (| "core::num::int_sqrt::u16_stages", [], [] |),
                          [ M.read (| n |) ]
                        |)
                      |) in
                    let~ denormalization_shift : Ty.path "u32" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.shr,
                          [ M.read (| normalization_shift |); Value.Integer IntegerKind.I32 1 ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u16",
                        BinOp.Wrap.shr,
                        [ M.read (| s |); M.read (| denormalization_shift |) ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_u16 : M.IsFunction.C "core::num::int_sqrt::u16" u16.
    Admitted.
    Global Typeclasses Opaque u16.
    
    Module u16.
      Definition value_EVEN_MAKING_BITMASK
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic (M.alloc (| UnOp.not (| Value.Integer IntegerKind.U32 1 |) |))).
      
      Global Instance Instance_IsConstant_value_EVEN_MAKING_BITMASK :
        M.IsFunction.C "core::num::int_sqrt::u16::EVEN_MAKING_BITMASK" value_EVEN_MAKING_BITMASK.
      Admitted.
      Global Typeclasses Opaque value_EVEN_MAKING_BITMASK.
    End u16.
    
    (*
            pub const fn $UnsignedT(mut n: $UnsignedT) -> $UnsignedT {
                if n <= <$HalfBitsT>::MAX as $UnsignedT {
                    $HalfBitsT(n as $HalfBitsT) as $UnsignedT
                } else {
                    // The normalization shift satisfies the Karatsuba square root
                    // algorithm precondition "a₃ ≥ b/4" where a₃ is the most
                    // significant quarter of `n`'s bits and b is the number of
                    // values that can be represented by that quarter of the bits.
                    //
                    // b/4 would then be all 0s except the second most significant
                    // bit (010...0) in binary. Since a₃ must be at least b/4, a₃'s
                    // most significant bit or its neighbor must be a 1. Since a₃'s
                    // most significant bits are `n`'s most significant bits, the
                    // same applies to `n`.
                    //
                    // The reason to shift by an even number of bits is because an
                    // even number of bits produces the square root shifted to the
                    // left by half of the normalization shift:
                    //
                    // sqrt(n << (2 * p))
                    // sqrt(2.pow(2 * p) * n)
                    // sqrt(2.pow(2 * p)) * sqrt(n)
                    // 2.pow(p) * sqrt(n)
                    // sqrt(n) << p
                    //
                    // Shifting by an odd number of bits leaves an ugly sqrt(2)
                    // multiplied in:
                    //
                    // sqrt(n << (2 * p + 1))
                    // sqrt(2.pow(2 * p + 1) * n)
                    // sqrt(2 * 2.pow(2 * p) * n)
                    // sqrt(2) * sqrt(2.pow(2 * p)) * sqrt(n)
                    // sqrt(2) * 2.pow(p) * sqrt(n)
                    // sqrt(2) * (sqrt(n) << p)
                    const EVEN_MAKING_BITMASK: u32 = !1;
                    let normalization_shift = n.leading_zeros() & EVEN_MAKING_BITMASK;
                    n <<= normalization_shift;
    
                    let s = $stages(n);
    
                    let denormalization_shift = normalization_shift >> 1;
                    s >> denormalization_shift
                }
            }
    *)
    Definition u32 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ n ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          M.read (|
            M.match_operator (|
              Some (Ty.path "u32"),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.le,
                            [
                              M.read (| n |);
                              M.cast
                                (Ty.path "u32")
                                (M.read (|
                                  get_associated_constant (| Ty.path "u16", "MAX", Ty.path "u16" |)
                                |))
                            ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.cast
                        (Ty.path "u32")
                        (M.call_closure (|
                          Ty.path "u16",
                          M.get_function (| "core::num::int_sqrt::u16", [], [] |),
                          [ M.cast (Ty.path "u16") (M.read (| n |)) ]
                        |))
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let~ normalization_shift : Ty.path "u32" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.bit_and,
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              M.get_associated_function (|
                                Ty.path "u32",
                                "leading_zeros",
                                [],
                                []
                              |),
                              [ M.read (| n |) ]
                            |);
                            M.read (|
                              get_constant (|
                                "core::num::int_sqrt::u32::EVEN_MAKING_BITMASK",
                                Ty.path "u32"
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.alloc (|
                        let β := n in
                        M.write (|
                          β,
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.shl,
                            [ M.read (| β |); M.read (| normalization_shift |) ]
                          |)
                        |)
                      |) in
                    let~ s : Ty.path "u32" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u32",
                          M.get_function (| "core::num::int_sqrt::u32_stages", [], [] |),
                          [ M.read (| n |) ]
                        |)
                      |) in
                    let~ denormalization_shift : Ty.path "u32" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.shr,
                          [ M.read (| normalization_shift |); Value.Integer IntegerKind.I32 1 ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.shr,
                        [ M.read (| s |); M.read (| denormalization_shift |) ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_u32 : M.IsFunction.C "core::num::int_sqrt::u32" u32.
    Admitted.
    Global Typeclasses Opaque u32.
    
    Module u32.
      Definition value_EVEN_MAKING_BITMASK
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic (M.alloc (| UnOp.not (| Value.Integer IntegerKind.U32 1 |) |))).
      
      Global Instance Instance_IsConstant_value_EVEN_MAKING_BITMASK :
        M.IsFunction.C "core::num::int_sqrt::u32::EVEN_MAKING_BITMASK" value_EVEN_MAKING_BITMASK.
      Admitted.
      Global Typeclasses Opaque value_EVEN_MAKING_BITMASK.
    End u32.
    
    (*
            pub const fn $UnsignedT(mut n: $UnsignedT) -> $UnsignedT {
                if n <= <$HalfBitsT>::MAX as $UnsignedT {
                    $HalfBitsT(n as $HalfBitsT) as $UnsignedT
                } else {
                    // The normalization shift satisfies the Karatsuba square root
                    // algorithm precondition "a₃ ≥ b/4" where a₃ is the most
                    // significant quarter of `n`'s bits and b is the number of
                    // values that can be represented by that quarter of the bits.
                    //
                    // b/4 would then be all 0s except the second most significant
                    // bit (010...0) in binary. Since a₃ must be at least b/4, a₃'s
                    // most significant bit or its neighbor must be a 1. Since a₃'s
                    // most significant bits are `n`'s most significant bits, the
                    // same applies to `n`.
                    //
                    // The reason to shift by an even number of bits is because an
                    // even number of bits produces the square root shifted to the
                    // left by half of the normalization shift:
                    //
                    // sqrt(n << (2 * p))
                    // sqrt(2.pow(2 * p) * n)
                    // sqrt(2.pow(2 * p)) * sqrt(n)
                    // 2.pow(p) * sqrt(n)
                    // sqrt(n) << p
                    //
                    // Shifting by an odd number of bits leaves an ugly sqrt(2)
                    // multiplied in:
                    //
                    // sqrt(n << (2 * p + 1))
                    // sqrt(2.pow(2 * p + 1) * n)
                    // sqrt(2 * 2.pow(2 * p) * n)
                    // sqrt(2) * sqrt(2.pow(2 * p)) * sqrt(n)
                    // sqrt(2) * 2.pow(p) * sqrt(n)
                    // sqrt(2) * (sqrt(n) << p)
                    const EVEN_MAKING_BITMASK: u32 = !1;
                    let normalization_shift = n.leading_zeros() & EVEN_MAKING_BITMASK;
                    n <<= normalization_shift;
    
                    let s = $stages(n);
    
                    let denormalization_shift = normalization_shift >> 1;
                    s >> denormalization_shift
                }
            }
    *)
    Definition u64 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ n ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          M.read (|
            M.match_operator (|
              Some (Ty.path "u64"),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.le,
                            [
                              M.read (| n |);
                              M.cast
                                (Ty.path "u64")
                                (M.read (|
                                  get_associated_constant (| Ty.path "u32", "MAX", Ty.path "u32" |)
                                |))
                            ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.cast
                        (Ty.path "u64")
                        (M.call_closure (|
                          Ty.path "u32",
                          M.get_function (| "core::num::int_sqrt::u32", [], [] |),
                          [ M.cast (Ty.path "u32") (M.read (| n |)) ]
                        |))
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let~ normalization_shift : Ty.path "u32" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.bit_and,
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              M.get_associated_function (|
                                Ty.path "u64",
                                "leading_zeros",
                                [],
                                []
                              |),
                              [ M.read (| n |) ]
                            |);
                            M.read (|
                              get_constant (|
                                "core::num::int_sqrt::u64::EVEN_MAKING_BITMASK",
                                Ty.path "u32"
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.alloc (|
                        let β := n in
                        M.write (|
                          β,
                          M.call_closure (|
                            Ty.path "u64",
                            BinOp.Wrap.shl,
                            [ M.read (| β |); M.read (| normalization_shift |) ]
                          |)
                        |)
                      |) in
                    let~ s : Ty.path "u64" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          M.get_function (| "core::num::int_sqrt::u64_stages", [], [] |),
                          [ M.read (| n |) ]
                        |)
                      |) in
                    let~ denormalization_shift : Ty.path "u32" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.shr,
                          [ M.read (| normalization_shift |); Value.Integer IntegerKind.I32 1 ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.shr,
                        [ M.read (| s |); M.read (| denormalization_shift |) ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_u64 : M.IsFunction.C "core::num::int_sqrt::u64" u64.
    Admitted.
    Global Typeclasses Opaque u64.
    
    Module u64.
      Definition value_EVEN_MAKING_BITMASK
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic (M.alloc (| UnOp.not (| Value.Integer IntegerKind.U32 1 |) |))).
      
      Global Instance Instance_IsConstant_value_EVEN_MAKING_BITMASK :
        M.IsFunction.C "core::num::int_sqrt::u64::EVEN_MAKING_BITMASK" value_EVEN_MAKING_BITMASK.
      Admitted.
      Global Typeclasses Opaque value_EVEN_MAKING_BITMASK.
    End u64.
    
    (*
            pub const fn $UnsignedT(mut n: $UnsignedT) -> $UnsignedT {
                if n <= <$HalfBitsT>::MAX as $UnsignedT {
                    $HalfBitsT(n as $HalfBitsT) as $UnsignedT
                } else {
                    // The normalization shift satisfies the Karatsuba square root
                    // algorithm precondition "a₃ ≥ b/4" where a₃ is the most
                    // significant quarter of `n`'s bits and b is the number of
                    // values that can be represented by that quarter of the bits.
                    //
                    // b/4 would then be all 0s except the second most significant
                    // bit (010...0) in binary. Since a₃ must be at least b/4, a₃'s
                    // most significant bit or its neighbor must be a 1. Since a₃'s
                    // most significant bits are `n`'s most significant bits, the
                    // same applies to `n`.
                    //
                    // The reason to shift by an even number of bits is because an
                    // even number of bits produces the square root shifted to the
                    // left by half of the normalization shift:
                    //
                    // sqrt(n << (2 * p))
                    // sqrt(2.pow(2 * p) * n)
                    // sqrt(2.pow(2 * p)) * sqrt(n)
                    // 2.pow(p) * sqrt(n)
                    // sqrt(n) << p
                    //
                    // Shifting by an odd number of bits leaves an ugly sqrt(2)
                    // multiplied in:
                    //
                    // sqrt(n << (2 * p + 1))
                    // sqrt(2.pow(2 * p + 1) * n)
                    // sqrt(2 * 2.pow(2 * p) * n)
                    // sqrt(2) * sqrt(2.pow(2 * p)) * sqrt(n)
                    // sqrt(2) * 2.pow(p) * sqrt(n)
                    // sqrt(2) * (sqrt(n) << p)
                    const EVEN_MAKING_BITMASK: u32 = !1;
                    let normalization_shift = n.leading_zeros() & EVEN_MAKING_BITMASK;
                    n <<= normalization_shift;
    
                    let s = $stages(n);
    
                    let denormalization_shift = normalization_shift >> 1;
                    s >> denormalization_shift
                }
            }
    *)
    Definition u128 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ n ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          M.read (|
            M.match_operator (|
              Some (Ty.path "u128"),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.le,
                            [
                              M.read (| n |);
                              M.cast
                                (Ty.path "u128")
                                (M.read (|
                                  get_associated_constant (| Ty.path "u64", "MAX", Ty.path "u64" |)
                                |))
                            ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.cast
                        (Ty.path "u128")
                        (M.call_closure (|
                          Ty.path "u64",
                          M.get_function (| "core::num::int_sqrt::u64", [], [] |),
                          [ M.cast (Ty.path "u64") (M.read (| n |)) ]
                        |))
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let~ normalization_shift : Ty.path "u32" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.bit_and,
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              M.get_associated_function (|
                                Ty.path "u128",
                                "leading_zeros",
                                [],
                                []
                              |),
                              [ M.read (| n |) ]
                            |);
                            M.read (|
                              get_constant (|
                                "core::num::int_sqrt::u128::EVEN_MAKING_BITMASK",
                                Ty.path "u32"
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.alloc (|
                        let β := n in
                        M.write (|
                          β,
                          M.call_closure (|
                            Ty.path "u128",
                            BinOp.Wrap.shl,
                            [ M.read (| β |); M.read (| normalization_shift |) ]
                          |)
                        |)
                      |) in
                    let~ s : Ty.path "u128" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u128",
                          M.get_function (| "core::num::int_sqrt::u128_stages", [], [] |),
                          [ M.read (| n |) ]
                        |)
                      |) in
                    let~ denormalization_shift : Ty.path "u32" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.shr,
                          [ M.read (| normalization_shift |); Value.Integer IntegerKind.I32 1 ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u128",
                        BinOp.Wrap.shr,
                        [ M.read (| s |); M.read (| denormalization_shift |) ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_u128 : M.IsFunction.C "core::num::int_sqrt::u128" u128.
    Admitted.
    Global Typeclasses Opaque u128.
    
    Module u128.
      Definition value_EVEN_MAKING_BITMASK
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic (M.alloc (| UnOp.not (| Value.Integer IntegerKind.U32 1 |) |))).
      
      Global Instance Instance_IsConstant_value_EVEN_MAKING_BITMASK :
        M.IsFunction.C "core::num::int_sqrt::u128::EVEN_MAKING_BITMASK" value_EVEN_MAKING_BITMASK.
      Admitted.
      Global Typeclasses Opaque value_EVEN_MAKING_BITMASK.
    End u128.
    
    (*
    pub const fn panic_for_negative_argument() -> ! {
        panic!("argument of integer square root cannot be negative")
    }
    *)
    Definition panic_for_negative_argument
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.call_closure (|
            Ty.path "never",
            M.get_function (| "core::panicking::panic_fmt", [], [] |),
            [
              M.call_closure (|
                Ty.path "core::fmt::Arguments",
                M.get_associated_function (|
                  Ty.path "core::fmt::Arguments",
                  "new_const",
                  [ Value.Integer IntegerKind.Usize 1 ],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Value.Array
                            [ mk_str (| "argument of integer square root cannot be negative" |) ]
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_panic_for_negative_argument :
      M.IsFunction.C "core::num::int_sqrt::panic_for_negative_argument" panic_for_negative_argument.
    Admitted.
    Global Typeclasses Opaque panic_for_negative_argument.
  End int_sqrt.
End num.
