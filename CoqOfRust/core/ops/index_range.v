(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module ops.
  Module index_range.
    (* StructRecord
      {
        name := "IndexRange";
        const_params := [];
        ty_params := [];
        fields := [ ("start", Ty.path "usize"); ("end_", Ty.path "usize") ];
      } *)
    
    Module Impl_core_clone_Clone_for_core_ops_index_range_IndexRange.
      Definition Self : Ty.t := Ty.path "core::ops::index_range::IndexRange".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "core::ops::index_range::IndexRange"
              []
              []
              [
                ("start",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "usize",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "core::ops::index_range::IndexRange",
                              "start"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("end_",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "usize",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "core::ops::index_range::IndexRange",
                              "end"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_core_ops_index_range_IndexRange.
    
    Module Impl_core_fmt_Debug_for_core_ops_index_range_IndexRange.
      Definition Self : Ty.t := Ty.path "core::ops::index_range::IndexRange".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "IndexRange" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "start" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "core::ops::index_range::IndexRange",
                          "start"
                        |)
                      |)
                    |)
                  |));
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "end" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "core::ops::index_range::IndexRange",
                              "end"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_core_ops_index_range_IndexRange.
    
    Module Impl_core_marker_StructuralPartialEq_for_core_ops_index_range_IndexRange.
      Definition Self : Ty.t := Ty.path "core::ops::index_range::IndexRange".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_core_ops_index_range_IndexRange.
    
    Module Impl_core_cmp_PartialEq_core_ops_index_range_IndexRange_for_core_ops_index_range_IndexRange.
      Definition Self : Ty.t := Ty.path "core::ops::index_range::IndexRange".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::ops::index_range::IndexRange",
                      "start"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "core::ops::index_range::IndexRange",
                      "start"
                    |)
                  |)
                ]
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "bool",
                  BinOp.eq,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "core::ops::index_range::IndexRange",
                        "end"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "core::ops::index_range::IndexRange",
                        "end"
                      |)
                    |)
                  ]
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "core::ops::index_range::IndexRange" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_core_ops_index_range_IndexRange_for_core_ops_index_range_IndexRange.
    
    Module Impl_core_cmp_Eq_for_core_ops_index_range_IndexRange.
      Definition Self : Ty.t := Ty.path "core::ops::index_range::IndexRange".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_core_ops_index_range_IndexRange.
    
    Module Impl_core_ops_index_range_IndexRange.
      Definition Self : Ty.t := Ty.path "core::ops::index_range::IndexRange".
      
      (*
          pub const unsafe fn new_unchecked(start: usize, end: usize) -> Self {
              ub_checks::assert_unsafe_precondition!(
                  check_library_ub,
                  "IndexRange::new_unchecked requires `start <= end`",
                  (start: usize = start, end: usize = end) => start <= end,
              );
              IndexRange { start, end }
          }
      *)
      Definition new_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ start; end_ ] =>
          ltac:(M.monadic
            (let start := M.alloc (| start |) in
            let end_ := M.alloc (| end_ |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_function (| "core::intrinsics::ub_checks", [], [] |),
                                []
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Self,
                                "precondition_check.new_unchecked",
                                [],
                                []
                              |),
                              [ M.read (| start |); M.read (| end_ |) ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (|
                Value.StructRecord
                  "core::ops::index_range::IndexRange"
                  []
                  []
                  [ ("start", M.read (| start |)); ("end_", M.read (| end_ |)) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_unchecked :
        M.IsAssociatedFunction.C Self "new_unchecked" new_unchecked.
      Admitted.
      Global Typeclasses Opaque new_unchecked.
      
      (*
          pub const fn zero_to(end: usize) -> Self {
              IndexRange { start: 0, end }
          }
      *)
      Definition zero_to (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ end_ ] =>
          ltac:(M.monadic
            (let end_ := M.alloc (| end_ |) in
            Value.StructRecord
              "core::ops::index_range::IndexRange"
              []
              []
              [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", M.read (| end_ |)) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_zero_to : M.IsAssociatedFunction.C Self "zero_to" zero_to.
      Admitted.
      Global Typeclasses Opaque zero_to.
      
      (*
          pub const fn start(&self) -> usize {
              self.start
          }
      *)
      Definition start (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "core::ops::index_range::IndexRange",
                "start"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_start : M.IsAssociatedFunction.C Self "start" start.
      Admitted.
      Global Typeclasses Opaque start.
      
      (*
          pub const fn end(&self) -> usize {
              self.end
          }
      *)
      Definition end_ (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "core::ops::index_range::IndexRange",
                "end"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_end_ : M.IsAssociatedFunction.C Self "end" end_.
      Admitted.
      Global Typeclasses Opaque end_.
      
      (*
          pub const fn len(&self) -> usize {
              // SAFETY: By invariant, this cannot wrap
              // Using the intrinsic because a UB check here impedes LLVM optimization. (#131563)
              unsafe { crate::intrinsics::unchecked_sub(self.end, self.start) }
          }
      *)
      Definition len (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_function (| "core::intrinsics::unchecked_sub", [], [ Ty.path "usize" ] |),
              [
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "core::ops::index_range::IndexRange",
                    "end"
                  |)
                |);
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "core::ops::index_range::IndexRange",
                    "start"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_len : M.IsAssociatedFunction.C Self "len" len.
      Admitted.
      Global Typeclasses Opaque len.
      
      (*
          unsafe fn next_unchecked(&mut self) -> usize {
              debug_assert!(self.start < self.end);
      
              let value = self.start;
              // SAFETY: The range isn't empty, so this cannot overflow
              self.start = unsafe { value.unchecked_add(1) };
              value
          }
      *)
      Definition next_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.lt,
                                            [
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "core::ops::index_range::IndexRange",
                                                  "start"
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "core::ops::index_range::IndexRange",
                                                  "end"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [ mk_str (| "assertion failed: self.start < self.end" |) ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ value : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.copy (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "core::ops::index_range::IndexRange",
                    "start"
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::ops::index_range::IndexRange",
                      "start"
                    |),
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (| Ty.path "usize", "unchecked_add", [], [] |),
                      [ M.read (| value |); Value.Integer IntegerKind.Usize 1 ]
                    |)
                  |)
                |) in
              value
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_next_unchecked :
        M.IsAssociatedFunction.C Self "next_unchecked" next_unchecked.
      Admitted.
      Global Typeclasses Opaque next_unchecked.
      
      (*
          unsafe fn next_back_unchecked(&mut self) -> usize {
              debug_assert!(self.start < self.end);
      
              // SAFETY: The range isn't empty, so this cannot overflow
              let value = unsafe { self.end.unchecked_sub(1) };
              self.end = value;
              value
          }
      *)
      Definition next_back_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.lt,
                                            [
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "core::ops::index_range::IndexRange",
                                                  "start"
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "core::ops::index_range::IndexRange",
                                                  "end"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [ mk_str (| "assertion failed: self.start < self.end" |) ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ value : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (| Ty.path "usize", "unchecked_sub", [], [] |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "core::ops::index_range::IndexRange",
                          "end"
                        |)
                      |);
                      Value.Integer IntegerKind.Usize 1
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::ops::index_range::IndexRange",
                      "end"
                    |),
                    M.read (| value |)
                  |)
                |) in
              value
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_next_back_unchecked :
        M.IsAssociatedFunction.C Self "next_back_unchecked" next_back_unchecked.
      Admitted.
      Global Typeclasses Opaque next_back_unchecked.
      
      (*
          pub fn take_prefix(&mut self, n: usize) -> Self {
              let mid = if n <= self.len() {
                  // SAFETY: We just checked that this will be between start and end,
                  // and thus the addition cannot overflow.
                  // Using the intrinsic avoids a superfluous UB check.
                  unsafe { crate::intrinsics::unchecked_add(self.start, n) }
              } else {
                  self.end
              };
              let prefix = Self { start: self.start, end: mid };
              self.start = mid;
              prefix
          }
      *)
      Definition take_prefix (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; n ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let n := M.alloc (| n |) in
            M.read (|
              let~ mid : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.copy (|
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.le,
                                  [
                                    M.read (| n |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_trait_method (|
                                        "core::iter::traits::exact_size::ExactSizeIterator",
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.path "core::ops::index_range::IndexRange" ],
                                        [],
                                        [],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_function (|
                                "core::intrinsics::unchecked_add",
                                [],
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "core::ops::index_range::IndexRange",
                                    "start"
                                  |)
                                |);
                                M.read (| n |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::ops::index_range::IndexRange",
                            "end"
                          |)))
                    ]
                  |)
                |) in
              let~ prefix :
                  Ty.apply (Ty.path "*") [] [ Ty.path "core::ops::index_range::IndexRange" ] :=
                M.alloc (|
                  Value.StructRecord
                    "core::ops::index_range::IndexRange"
                    []
                    []
                    [
                      ("start",
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::ops::index_range::IndexRange",
                            "start"
                          |)
                        |));
                      ("end_", M.read (| mid |))
                    ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::ops::index_range::IndexRange",
                      "start"
                    |),
                    M.read (| mid |)
                  |)
                |) in
              prefix
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_take_prefix :
        M.IsAssociatedFunction.C Self "take_prefix" take_prefix.
      Admitted.
      Global Typeclasses Opaque take_prefix.
      
      (*
          pub fn take_suffix(&mut self, n: usize) -> Self {
              let mid = if n <= self.len() {
                  // SAFETY: We just checked that this will be between start and end,
                  // and thus the subtraction cannot overflow.
                  // Using the intrinsic avoids a superfluous UB check.
                  unsafe { crate::intrinsics::unchecked_sub(self.end, n) }
              } else {
                  self.start
              };
              let suffix = Self { start: mid, end: self.end };
              self.end = mid;
              suffix
          }
      *)
      Definition take_suffix (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; n ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let n := M.alloc (| n |) in
            M.read (|
              let~ mid : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.copy (|
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.le,
                                  [
                                    M.read (| n |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_trait_method (|
                                        "core::iter::traits::exact_size::ExactSizeIterator",
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.path "core::ops::index_range::IndexRange" ],
                                        [],
                                        [],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_function (|
                                "core::intrinsics::unchecked_sub",
                                [],
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "core::ops::index_range::IndexRange",
                                    "end"
                                  |)
                                |);
                                M.read (| n |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::ops::index_range::IndexRange",
                            "start"
                          |)))
                    ]
                  |)
                |) in
              let~ suffix :
                  Ty.apply (Ty.path "*") [] [ Ty.path "core::ops::index_range::IndexRange" ] :=
                M.alloc (|
                  Value.StructRecord
                    "core::ops::index_range::IndexRange"
                    []
                    []
                    [
                      ("start", M.read (| mid |));
                      ("end_",
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::ops::index_range::IndexRange",
                            "end"
                          |)
                        |))
                    ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::ops::index_range::IndexRange",
                      "end"
                    |),
                    M.read (| mid |)
                  |)
                |) in
              suffix
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_take_suffix :
        M.IsAssociatedFunction.C Self "take_suffix" take_suffix.
      Admitted.
      Global Typeclasses Opaque take_suffix.
    End Impl_core_ops_index_range_IndexRange.
    
    Module Impl_core_iter_traits_iterator_Iterator_for_core_ops_index_range_IndexRange.
      Definition Self : Ty.t := Ty.path "core::ops::index_range::IndexRange".
      
      (*     type Item = usize; *)
      Definition _Item : Ty.t := Ty.path "usize".
      
      (*
          fn next(&mut self) -> Option<usize> {
              if self.len() > 0 {
                  // SAFETY: We just checked that the range is non-empty
                  unsafe { Some(self.next_unchecked()) }
              } else {
                  None
              }
          }
      *)
      Definition next (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.gt,
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_trait_method (|
                                    "core::iter::traits::exact_size::ExactSizeIterator",
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.path "core::ops::index_range::IndexRange" ],
                                    [],
                                    [],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                |);
                                Value.Integer IntegerKind.Usize 0
                              ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          []
                          [ Ty.path "usize" ]
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.path "core::ops::index_range::IndexRange",
                                "next_unchecked",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |)
                              ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple "core::option::Option::None" [] [ Ty.path "usize" ] []
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn size_hint(&self) -> (usize, Option<usize>) {
              let len = self.len();
              (len, Some(len))
          }
      *)
      Definition size_hint (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ len : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.path "core::ops::index_range::IndexRange",
                      "len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              M.alloc (|
                Value.Tuple
                  [
                    M.read (| len |);
                    Value.StructTuple
                      "core::option::Option::Some"
                      []
                      [ Ty.path "usize" ]
                      [ M.read (| len |) ]
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn advance_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {
              let taken = self.take_prefix(n);
              NonZero::new(n - taken.len()).map_or(Ok(()), Err)
          }
      *)
      Definition advance_by (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; n ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let n := M.alloc (| n |) in
            M.read (|
              let~ taken :
                  Ty.apply (Ty.path "*") [] [ Ty.path "core::ops::index_range::IndexRange" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "core::ops::index_range::IndexRange",
                    M.get_associated_function (|
                      Ty.path "core::ops::index_range::IndexRange",
                      "take_prefix",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      M.read (| n |)
                    ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.tuple [];
                      Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ] ],
                    "map_or",
                    [],
                    [
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.tuple [];
                          Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ]
                        ];
                      Ty.function
                        [ Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ] ]
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.tuple [];
                            Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ]
                          ])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ] ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ],
                        "new",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [
                            M.read (| n |);
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.path "core::ops::index_range::IndexRange",
                                "len",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, taken |) ]
                            |)
                          ]
                        |)
                      ]
                    |);
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.tuple [];
                        Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ]
                      ]
                      [ Value.Tuple [] ];
                    M.constructor_as_closure
                      "core::result::Result::Err"
                      []
                      [
                        Ty.tuple [];
                        Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ]
                      ]
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::iter::traits::iterator::Iterator"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [
            ("Item", InstanceField.Ty _Item);
            ("next", InstanceField.Method next);
            ("size_hint", InstanceField.Method size_hint);
            ("advance_by", InstanceField.Method advance_by)
          ].
    End Impl_core_iter_traits_iterator_Iterator_for_core_ops_index_range_IndexRange.
    
    Module Impl_core_iter_traits_double_ended_DoubleEndedIterator_for_core_ops_index_range_IndexRange.
      Definition Self : Ty.t := Ty.path "core::ops::index_range::IndexRange".
      
      (*
          fn next_back(&mut self) -> Option<usize> {
              if self.len() > 0 {
                  // SAFETY: We just checked that the range is non-empty
                  unsafe { Some(self.next_back_unchecked()) }
              } else {
                  None
              }
          }
      *)
      Definition next_back (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.gt,
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_trait_method (|
                                    "core::iter::traits::exact_size::ExactSizeIterator",
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.path "core::ops::index_range::IndexRange" ],
                                    [],
                                    [],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                |);
                                Value.Integer IntegerKind.Usize 0
                              ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          []
                          [ Ty.path "usize" ]
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.path "core::ops::index_range::IndexRange",
                                "next_back_unchecked",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |)
                              ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple "core::option::Option::None" [] [ Ty.path "usize" ] []
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn advance_back_by(&mut self, n: usize) -> Result<(), NonZero<usize>> {
              let taken = self.take_suffix(n);
              NonZero::new(n - taken.len()).map_or(Ok(()), Err)
          }
      *)
      Definition advance_back_by (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; n ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let n := M.alloc (| n |) in
            M.read (|
              let~ taken :
                  Ty.apply (Ty.path "*") [] [ Ty.path "core::ops::index_range::IndexRange" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "core::ops::index_range::IndexRange",
                    M.get_associated_function (|
                      Ty.path "core::ops::index_range::IndexRange",
                      "take_suffix",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      M.read (| n |)
                    ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.tuple [];
                      Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ] ],
                    "map_or",
                    [],
                    [
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.tuple [];
                          Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ]
                        ];
                      Ty.function
                        [ Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ] ]
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.tuple [];
                            Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ]
                          ])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ] ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ],
                        "new",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [
                            M.read (| n |);
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.path "core::ops::index_range::IndexRange",
                                "len",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, taken |) ]
                            |)
                          ]
                        |)
                      ]
                    |);
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.tuple [];
                        Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ]
                      ]
                      [ Value.Tuple [] ];
                    M.constructor_as_closure
                      "core::result::Result::Err"
                      []
                      [
                        Ty.tuple [];
                        Ty.apply (Ty.path "core::num::nonzero::NonZero") [] [ Ty.path "usize" ]
                      ]
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::iter::traits::double_ended::DoubleEndedIterator"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [
            ("next_back", InstanceField.Method next_back);
            ("advance_back_by", InstanceField.Method advance_back_by)
          ].
    End Impl_core_iter_traits_double_ended_DoubleEndedIterator_for_core_ops_index_range_IndexRange.
    
    Module Impl_core_iter_traits_exact_size_ExactSizeIterator_for_core_ops_index_range_IndexRange.
      Definition Self : Ty.t := Ty.path "core::ops::index_range::IndexRange".
      
      (*
          fn len(&self) -> usize {
              self.len()
          }
      *)
      Definition len (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.path "core::ops::index_range::IndexRange",
                "len",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::iter::traits::exact_size::ExactSizeIterator"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("len", InstanceField.Method len) ].
    End Impl_core_iter_traits_exact_size_ExactSizeIterator_for_core_ops_index_range_IndexRange.
    
    Module Impl_core_iter_traits_marker_TrustedLen_for_core_ops_index_range_IndexRange.
      Definition Self : Ty.t := Ty.path "core::ops::index_range::IndexRange".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::iter::traits::marker::TrustedLen"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_iter_traits_marker_TrustedLen_for_core_ops_index_range_IndexRange.
    
    Module Impl_core_iter_traits_marker_FusedIterator_for_core_ops_index_range_IndexRange.
      Definition Self : Ty.t := Ty.path "core::ops::index_range::IndexRange".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::iter::traits::marker::FusedIterator"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_iter_traits_marker_FusedIterator_for_core_ops_index_range_IndexRange.
  End index_range.
End ops.
