(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module intrinsics.
  Module mir.
    Module UnwindContinue.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End UnwindContinue.
    
    Module UnwindUnreachable.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End UnwindUnreachable.
    
    Module UnwindTerminate.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End UnwindTerminate.
    
    Module UnwindCleanup.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End UnwindCleanup.
    
    Module Return.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End Return.
    
    Module Goto.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End Goto.
    
    Module Unreachable.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End Unreachable.
    
    Module Drop.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End Drop.
    
    Module Call.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End Call.
    
    Module UnwindResume.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End UnwindResume.
    
    Module StorageLive.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End StorageLive.
    
    Module StorageDead.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End StorageDead.
    
    Module Deinit.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End Deinit.
    
    Module Checked.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End Checked.
    
    Module Len.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End Len.
    
    Module CopyForDeref.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End CopyForDeref.
    
    Module Retag.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End Retag.
    
    Module Move.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End Move.
    
    Module Static.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End Static.
    
    Module StaticMut.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End StaticMut.
    
    Module Discriminant.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End Discriminant.
    
    Module SetDiscriminant.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End SetDiscriminant.
    
    Module Offset.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End Offset.
    
    Module Field.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End Field.
    
    Module Variant.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End Variant.
    
    Module CastTransmute.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End CastTransmute.
    
    Module __internal_make_place.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End __internal_make_place.
    
    Module __debuginfo.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (| M.get_function (| "core::panicking::panic_explicit", [] |), [] |)))
        | _, _ => M.impossible
        end.
    End __debuginfo.
  End mir.
End intrinsics.

Module panic.
  (* Trait *)
  (* Empty module 'PanicPayload' *)
End panic.
