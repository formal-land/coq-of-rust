(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module num.
  Module from_str_radix_panic.
    (*
            const fn do_panic($($arg: $ty),* ) -> ! {
                $crate::intrinsics::const_eval_select!(
                    @capture { $($arg: $ty = $arg),* } -> !:
                    #[noinline]
                    if const #[track_caller] #[inline] { // Inline this, to prevent codegen
                        $crate::panic!($const_msg)
                    } else #[track_caller] { // Do not inline this, it makes perf worse
                        $crate::panic!($runtime_msg)
                    }
                )
            }
    *)
    Definition do_panic (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ radix ] =>
        ltac:(M.monadic
          (let radix := M.alloc (| radix |) in
          M.call_closure (|
            Ty.path "never",
            M.get_function (|
              "core::intrinsics::const_eval_select",
              [],
              [
                Ty.tuple [ Ty.path "u32" ];
                Ty.function [ Ty.path "u32" ] (Ty.path "never");
                Ty.function [ Ty.path "u32" ] (Ty.path "never");
                Ty.path "never"
              ]
            |),
            [
              Value.Tuple [ M.read (| radix |) ];
              M.get_function (| "core::num::from_str_radix_panic::do_panic.compiletime", [], [] |);
              M.get_function (| "core::num::from_str_radix_panic::do_panic.runtime", [], [] |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_do_panic :
      M.IsFunction.C "core::num::from_str_radix_panic::do_panic" do_panic.
    Admitted.
    Global Typeclasses Opaque do_panic.
  End from_str_radix_panic.
End num.

Module intrinsics.
  Module mir.
    Module UnwindContinue.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::UnwindContinue::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End UnwindContinue.
    
    Module UnwindUnreachable.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::UnwindUnreachable::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End UnwindUnreachable.
    
    Module UnwindTerminate.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::UnwindTerminate::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End UnwindTerminate.
    
    Module UnwindCleanup.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::UnwindCleanup::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End UnwindCleanup.
    
    Module ReturnTo.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::ReturnTo::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End ReturnTo.
    
    Module Return.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::Return::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Return.
    
    Module Goto.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::Goto::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Goto.
    
    Module Unreachable.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::Unreachable::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Unreachable.
    
    Module Drop.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::Drop::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Drop.
    
    Module Call.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::Call::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Call.
    
    Module TailCall.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::TailCall::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End TailCall.
    
    Module UnwindResume.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::UnwindResume::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End UnwindResume.
    
    Module StorageLive.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::StorageLive::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End StorageLive.
    
    Module StorageDead.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::StorageDead::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End StorageDead.
    
    Module Assume.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::Assume::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Assume.
    
    Module Deinit.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::Deinit::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Deinit.
    
    Module Checked.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::Checked::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Checked.
    
    Module Len.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::Len::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Len.
    
    Module PtrMetadata.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::PtrMetadata::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End PtrMetadata.
    
    Module CopyForDeref.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::CopyForDeref::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End CopyForDeref.
    
    Module Retag.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::Retag::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Retag.
    
    Module Move.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::Move::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Move.
    
    Module Static.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::Static::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Static.
    
    Module StaticMut.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::StaticMut::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End StaticMut.
    
    Module Discriminant.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::Discriminant::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Discriminant.
    
    Module SetDiscriminant.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::SetDiscriminant::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End SetDiscriminant.
    
    Module Offset.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::Offset::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Offset.
    
    Module Field.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::Field::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Field.
    
    Module Variant.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C "core::intrinsics::mir::Variant::panic_cold_explicit" panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End Variant.
    
    Module CastTransmute.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::CastTransmute::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End CastTransmute.
    
    Module CastPtrToPtr.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::CastPtrToPtr::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End CastPtrToPtr.
    
    Module __internal_make_place.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::__internal_make_place::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End __internal_make_place.
    
    Module __debuginfo.
      (*
              const fn panic_cold_explicit() -> ! {
                  $crate::panicking::panic_explicit()
              }
      *)
      Definition panic_cold_explicit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_explicit", [], [] |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_panic_cold_explicit :
        M.IsFunction.C
          "core::intrinsics::mir::__debuginfo::panic_cold_explicit"
          panic_cold_explicit.
      Admitted.
      Global Typeclasses Opaque panic_cold_explicit.
    End __debuginfo.
  End mir.
End intrinsics.

Module char.
  Module methods.
    Module encode_utf8_raw.
      (*
              const fn do_panic($($arg: $ty),* ) -> ! {
                  $crate::intrinsics::const_eval_select!(
                      @capture { $($arg: $ty = $arg),* } -> !:
                      #[noinline]
                      if const #[track_caller] #[inline] { // Inline this, to prevent codegen
                          $crate::panic!($const_msg)
                      } else #[track_caller] { // Do not inline this, it makes perf worse
                          $crate::panic!($runtime_msg)
                      }
                  )
              }
      *)
      Definition do_panic (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ code; len; dst_len ] =>
          ltac:(M.monadic
            (let code := M.alloc (| code |) in
            let len := M.alloc (| len |) in
            let dst_len := M.alloc (| dst_len |) in
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::const_eval_select",
                [],
                [
                  Ty.tuple [ Ty.path "u32"; Ty.path "usize"; Ty.path "usize" ];
                  Ty.function [ Ty.path "u32"; Ty.path "usize"; Ty.path "usize" ] (Ty.path "never");
                  Ty.function [ Ty.path "u32"; Ty.path "usize"; Ty.path "usize" ] (Ty.path "never");
                  Ty.path "never"
                ]
              |),
              [
                Value.Tuple [ M.read (| code |); M.read (| len |); M.read (| dst_len |) ];
                M.get_function (|
                  "core::char::methods::encode_utf8_raw::do_panic.compiletime",
                  [],
                  []
                |);
                M.get_function (|
                  "core::char::methods::encode_utf8_raw::do_panic.runtime",
                  [],
                  []
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_do_panic :
        M.IsFunction.C "core::char::methods::encode_utf8_raw::do_panic" do_panic.
      Admitted.
      Global Typeclasses Opaque do_panic.
    End encode_utf8_raw.
    
    Module encode_utf16_raw.
      (*
              const fn do_panic($($arg: $ty),* ) -> ! {
                  $crate::intrinsics::const_eval_select!(
                      @capture { $($arg: $ty = $arg),* } -> !:
                      #[noinline]
                      if const #[track_caller] #[inline] { // Inline this, to prevent codegen
                          $crate::panic!($const_msg)
                      } else #[track_caller] { // Do not inline this, it makes perf worse
                          $crate::panic!($runtime_msg)
                      }
                  )
              }
      *)
      Definition do_panic (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ code; len; dst_len ] =>
          ltac:(M.monadic
            (let code := M.alloc (| code |) in
            let len := M.alloc (| len |) in
            let dst_len := M.alloc (| dst_len |) in
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::const_eval_select",
                [],
                [
                  Ty.tuple [ Ty.path "u32"; Ty.path "usize"; Ty.path "usize" ];
                  Ty.function [ Ty.path "u32"; Ty.path "usize"; Ty.path "usize" ] (Ty.path "never");
                  Ty.function [ Ty.path "u32"; Ty.path "usize"; Ty.path "usize" ] (Ty.path "never");
                  Ty.path "never"
                ]
              |),
              [
                Value.Tuple [ M.read (| code |); M.read (| len |); M.read (| dst_len |) ];
                M.get_function (|
                  "core::char::methods::encode_utf16_raw::do_panic.compiletime",
                  [],
                  []
                |);
                M.get_function (|
                  "core::char::methods::encode_utf16_raw::do_panic.runtime",
                  [],
                  []
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_do_panic :
        M.IsFunction.C "core::char::methods::encode_utf16_raw::do_panic" do_panic.
      Admitted.
      Global Typeclasses Opaque do_panic.
    End encode_utf16_raw.
  End methods.
End char.

Module panic.
  (*
  pub fn abort_unwind<F: FnOnce() -> R, R>(f: F) -> R {
      f()
  }
  *)
  Definition abort_unwind (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; R ], [ f ] =>
      ltac:(M.monadic
        (let f := M.alloc (| f |) in
        M.call_closure (|
          R,
          M.get_trait_method (|
            "core::ops::function::FnOnce",
            F,
            [],
            [ Ty.tuple [] ],
            "call_once",
            [],
            []
          |),
          [ M.read (| f |); Value.Tuple [] ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_abort_unwind :
    M.IsFunction.C "core::panic::abort_unwind" abort_unwind.
  Admitted.
  Global Typeclasses Opaque abort_unwind.
  
  (* Trait *)
  Module PanicPayload.
    Definition as_str (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "core::option::Option::None" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_as_str : M.IsProvidedMethod "core::panic::PanicPayload" "as_str" as_str.
  End PanicPayload.
End panic.

Module slice.
  Module index.
    Module slice_start_index_len_fail.
      (*
              const fn do_panic($($arg: $ty),* ) -> ! {
                  $crate::intrinsics::const_eval_select!(
                      @capture { $($arg: $ty = $arg),* } -> !:
                      #[noinline]
                      if const #[track_caller] #[inline] { // Inline this, to prevent codegen
                          $crate::panic!($const_msg)
                      } else #[track_caller] { // Do not inline this, it makes perf worse
                          $crate::panic!($runtime_msg)
                      }
                  )
              }
      *)
      Definition do_panic (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ index; len ] =>
          ltac:(M.monadic
            (let index := M.alloc (| index |) in
            let len := M.alloc (| len |) in
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::const_eval_select",
                [],
                [
                  Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                  Ty.function [ Ty.path "usize"; Ty.path "usize" ] (Ty.path "never");
                  Ty.function [ Ty.path "usize"; Ty.path "usize" ] (Ty.path "never");
                  Ty.path "never"
                ]
              |),
              [
                Value.Tuple [ M.read (| index |); M.read (| len |) ];
                M.get_function (|
                  "core::slice::index::slice_start_index_len_fail::do_panic.compiletime",
                  [],
                  []
                |);
                M.get_function (|
                  "core::slice::index::slice_start_index_len_fail::do_panic.runtime",
                  [],
                  []
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_do_panic :
        M.IsFunction.C "core::slice::index::slice_start_index_len_fail::do_panic" do_panic.
      Admitted.
      Global Typeclasses Opaque do_panic.
    End slice_start_index_len_fail.
    
    Module slice_end_index_len_fail.
      (*
              const fn do_panic($($arg: $ty),* ) -> ! {
                  $crate::intrinsics::const_eval_select!(
                      @capture { $($arg: $ty = $arg),* } -> !:
                      #[noinline]
                      if const #[track_caller] #[inline] { // Inline this, to prevent codegen
                          $crate::panic!($const_msg)
                      } else #[track_caller] { // Do not inline this, it makes perf worse
                          $crate::panic!($runtime_msg)
                      }
                  )
              }
      *)
      Definition do_panic (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ index; len ] =>
          ltac:(M.monadic
            (let index := M.alloc (| index |) in
            let len := M.alloc (| len |) in
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::const_eval_select",
                [],
                [
                  Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                  Ty.function [ Ty.path "usize"; Ty.path "usize" ] (Ty.path "never");
                  Ty.function [ Ty.path "usize"; Ty.path "usize" ] (Ty.path "never");
                  Ty.path "never"
                ]
              |),
              [
                Value.Tuple [ M.read (| index |); M.read (| len |) ];
                M.get_function (|
                  "core::slice::index::slice_end_index_len_fail::do_panic.compiletime",
                  [],
                  []
                |);
                M.get_function (|
                  "core::slice::index::slice_end_index_len_fail::do_panic.runtime",
                  [],
                  []
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_do_panic :
        M.IsFunction.C "core::slice::index::slice_end_index_len_fail::do_panic" do_panic.
      Admitted.
      Global Typeclasses Opaque do_panic.
    End slice_end_index_len_fail.
    
    Module slice_index_order_fail.
      (*
              const fn do_panic($($arg: $ty),* ) -> ! {
                  $crate::intrinsics::const_eval_select!(
                      @capture { $($arg: $ty = $arg),* } -> !:
                      #[noinline]
                      if const #[track_caller] #[inline] { // Inline this, to prevent codegen
                          $crate::panic!($const_msg)
                      } else #[track_caller] { // Do not inline this, it makes perf worse
                          $crate::panic!($runtime_msg)
                      }
                  )
              }
      *)
      Definition do_panic (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ index; end_ ] =>
          ltac:(M.monadic
            (let index := M.alloc (| index |) in
            let end_ := M.alloc (| end_ |) in
            M.call_closure (|
              Ty.path "never",
              M.get_function (|
                "core::intrinsics::const_eval_select",
                [],
                [
                  Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                  Ty.function [ Ty.path "usize"; Ty.path "usize" ] (Ty.path "never");
                  Ty.function [ Ty.path "usize"; Ty.path "usize" ] (Ty.path "never");
                  Ty.path "never"
                ]
              |),
              [
                Value.Tuple [ M.read (| index |); M.read (| end_ |) ];
                M.get_function (|
                  "core::slice::index::slice_index_order_fail::do_panic.compiletime",
                  [],
                  []
                |);
                M.get_function (|
                  "core::slice::index::slice_index_order_fail::do_panic.runtime",
                  [],
                  []
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_do_panic :
        M.IsFunction.C "core::slice::index::slice_index_order_fail::do_panic" do_panic.
      Admitted.
      Global Typeclasses Opaque do_panic.
    End slice_index_order_fail.
  End index.
End slice.
