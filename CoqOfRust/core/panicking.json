[
  {
    "file_name": "core/src/panicking.rs",
    "item": {
      "type": "Module",
      "name": "panicking",
      "body": [
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "panic_fmt",
            "path": [
              "core",
              "panicking",
              "panic_fmt"
            ],
            "snippet": [
              "pub const fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {",
              "    if cfg!(feature = \"panic_immediate_abort\") {",
              "        super::intrinsics::abort()",
              "    }",
              "",
              "    // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call",
              "    // that gets resolved to the `#[panic_handler]` function.",
              "    extern \"Rust\" {",
              "        #[lang = \"panic_impl\"]",
              "        fn panic_impl(pi: &PanicInfo<'_>) -> !;",
              "    }",
              "",
              "    let pi = PanicInfo::new(",
              "        fmt,",
              "        Location::caller(),",
              "        /* can_unwind */ true,",
              "        /* force_no_backtrace */ false,",
              "    );",
              "",
              "    // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.",
              "    unsafe { panic_impl(&pi) }",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [],
              "signature_and_body": {
                "args": [
                  [
                    "fmt",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "core",
                          "fmt",
                          "Arguments"
                        ]
                      },
                      "consts": [],
                      "tys": []
                    },
                    null
                  ]
                ],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Let": {
                    "name": "fmt",
                    "is_user": false,
                    "init": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.alloc"
                        },
                        "args": [
                          {
                            "LocalVar": "fmt"
                          }
                        ],
                        "kind": "Effectful"
                      }
                    },
                    "body": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.read"
                        },
                        "args": [
                          {
                            "Let": {
                              "name": null,
                              "is_user": true,
                              "init": {
                                "Match": {
                                  "scrutinee": {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Tuple": {
                                            "elements": []
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  },
                                  "arms": [
                                    {
                                      "Lambda": {
                                        "args": [
                                          [
                                            "γ",
                                            null
                                          ]
                                        ],
                                        "body": {
                                          "Let": {
                                            "name": "γ",
                                            "is_user": false,
                                            "init": {
                                              "Use": {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.alloc"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "Bool": false
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            },
                                            "body": {
                                              "Let": {
                                                "name": null,
                                                "is_user": false,
                                                "init": {
                                                  "Call": {
                                                    "func": {
                                                      "LocalVar": "M.is_constant_or_break_match"
                                                    },
                                                    "args": [
                                                      {
                                                        "Call": {
                                                          "func": {
                                                            "LocalVar": "M.read"
                                                          },
                                                          "args": [
                                                            {
                                                              "LocalVar": "γ"
                                                            }
                                                          ],
                                                          "kind": "Effectful"
                                                        }
                                                      },
                                                      {
                                                        "Literal": {
                                                          "Bool": true
                                                        }
                                                      }
                                                    ],
                                                    "kind": "Effectful"
                                                  }
                                                },
                                                "body": {
                                                  "Call": {
                                                    "func": {
                                                      "LocalVar": "M.alloc"
                                                    },
                                                    "args": [
                                                      {
                                                        "Call": {
                                                          "func": {
                                                            "LocalVar": "M.never_to_any"
                                                          },
                                                          "args": [
                                                            {
                                                              "Call": {
                                                                "func": {
                                                                  "GetFunction": {
                                                                    "func": [
                                                                      "core",
                                                                      "intrinsics",
                                                                      "abort"
                                                                    ],
                                                                    "generic_tys": []
                                                                  }
                                                                },
                                                                "args": [],
                                                                "kind": "Closure"
                                                              }
                                                            }
                                                          ],
                                                          "kind": "Effectful"
                                                        }
                                                      }
                                                    ],
                                                    "kind": "Effectful"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "is_for_match": true,
                                        "is_internal": true
                                      }
                                    },
                                    {
                                      "Lambda": {
                                        "args": [
                                          [
                                            "γ",
                                            null
                                          ]
                                        ],
                                        "body": {
                                          "Call": {
                                            "func": {
                                              "LocalVar": "M.alloc"
                                            },
                                            "args": [
                                              {
                                                "Tuple": {
                                                  "elements": []
                                                }
                                              }
                                            ],
                                            "kind": "Effectful"
                                          }
                                        },
                                        "is_for_match": true,
                                        "is_internal": true
                                      }
                                    }
                                  ]
                                }
                              },
                              "body": {
                                "Let": {
                                  "name": "pi",
                                  "is_user": true,
                                  "init": {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Call": {
                                            "func": {
                                              "GetAssociatedFunction": {
                                                "ty": {
                                                  "type": "Application",
                                                  "func": {
                                                    "type": "Path",
                                                    "path": [
                                                      "core",
                                                      "panic",
                                                      "panic_info",
                                                      "PanicInfo"
                                                    ]
                                                  },
                                                  "consts": [],
                                                  "tys": []
                                                },
                                                "func": "new",
                                                "generic_tys": []
                                              }
                                            },
                                            "args": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "LocalVar": "fmt"
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              },
                                              {
                                                "Call": {
                                                  "func": {
                                                    "GetAssociatedFunction": {
                                                      "ty": {
                                                        "type": "Application",
                                                        "func": {
                                                          "type": "Path",
                                                          "path": [
                                                            "core",
                                                            "panic",
                                                            "location",
                                                            "Location"
                                                          ]
                                                        },
                                                        "consts": [],
                                                        "tys": []
                                                      },
                                                      "func": "caller",
                                                      "generic_tys": []
                                                    }
                                                  },
                                                  "args": [],
                                                  "kind": "Closure"
                                                }
                                              },
                                              {
                                                "Literal": {
                                                  "Bool": true
                                                }
                                              },
                                              {
                                                "Literal": {
                                                  "Bool": false
                                                }
                                              }
                                            ],
                                            "kind": "Closure"
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  },
                                  "body": {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Call": {
                                            "func": {
                                              "GetFunction": {
                                                "func": [
                                                  "core",
                                                  "panicking",
                                                  "panic_fmt",
                                                  "panic_impl"
                                                ],
                                                "generic_tys": []
                                              }
                                            },
                                            "args": [
                                              {
                                                "LocalVar": "pi"
                                              }
                                            ],
                                            "kind": "Closure"
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ],
                        "kind": "Effectful"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Module",
            "name": "panic_fmt",
            "body": [
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_impl",
                  "path": [
                    "core",
                    "panicking",
                    "panic_fmt",
                    "panic_impl"
                  ],
                  "snippet": null,
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": null,
                      "ret_ty": null,
                      "body": null
                    }
                  }
                }
              }
            ]
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "panic_nounwind_fmt",
            "path": [
              "core",
              "panicking",
              "panic_nounwind_fmt"
            ],
            "snippet": [
              "pub const fn panic_nounwind_fmt(fmt: fmt::Arguments<'_>, force_no_backtrace: bool) -> ! {",
              "    #[inline] // this should always be inlined into `panic_nounwind_fmt`",
              "    #[track_caller]",
              "    fn runtime(fmt: fmt::Arguments<'_>, force_no_backtrace: bool) -> ! {",
              "        if cfg!(feature = \"panic_immediate_abort\") {",
              "            super::intrinsics::abort()",
              "        }",
              "",
              "        // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call",
              "        // that gets resolved to the `#[panic_handler]` function.",
              "        extern \"Rust\" {",
              "            #[lang = \"panic_impl\"]",
              "            fn panic_impl(pi: &PanicInfo<'_>) -> !;",
              "        }",
              "",
              "        // PanicInfo with the `can_unwind` flag set to false forces an abort.",
              "        let pi = PanicInfo::new(",
              "            fmt,",
              "            Location::caller(),",
              "            /* can_unwind */ false,",
              "            force_no_backtrace,",
              "        );",
              "",
              "        // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.",
              "        unsafe { panic_impl(&pi) }",
              "    }",
              "",
              "    #[inline]",
              "    #[track_caller]",
              "    const fn comptime(fmt: fmt::Arguments<'_>, _force_no_backtrace: bool) -> ! {",
              "        // We don't unwind anyway at compile-time so we can call the regular `panic_fmt`.",
              "        panic_fmt(fmt);",
              "    }",
              "",
              "    super::intrinsics::const_eval_select((fmt, force_no_backtrace), comptime, runtime);",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [],
              "signature_and_body": {
                "args": [
                  [
                    "fmt",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "core",
                          "fmt",
                          "Arguments"
                        ]
                      },
                      "consts": [],
                      "tys": []
                    },
                    null
                  ],
                  [
                    "force_no_backtrace",
                    {
                      "type": "Path",
                      "path": [
                        "bool"
                      ]
                    },
                    null
                  ]
                ],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Let": {
                    "name": "fmt",
                    "is_user": false,
                    "init": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.alloc"
                        },
                        "args": [
                          {
                            "LocalVar": "fmt"
                          }
                        ],
                        "kind": "Effectful"
                      }
                    },
                    "body": {
                      "Let": {
                        "name": "force_no_backtrace",
                        "is_user": false,
                        "init": {
                          "Call": {
                            "func": {
                              "LocalVar": "M.alloc"
                            },
                            "args": [
                              {
                                "LocalVar": "force_no_backtrace"
                              }
                            ],
                            "kind": "Effectful"
                          }
                        },
                        "body": {
                          "Call": {
                            "func": {
                              "GetFunction": {
                                "func": [
                                  "core",
                                  "intrinsics",
                                  "const_eval_select"
                                ],
                                "generic_tys": [
                                  {
                                    "type": "Tuple",
                                    "tys": [
                                      {
                                        "type": "Application",
                                        "func": {
                                          "type": "Path",
                                          "path": [
                                            "core",
                                            "fmt",
                                            "Arguments"
                                          ]
                                        },
                                        "consts": [],
                                        "tys": []
                                      },
                                      {
                                        "type": "Path",
                                        "path": [
                                          "bool"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "type": "Function",
                                    "args": [
                                      {
                                        "type": "Application",
                                        "func": {
                                          "type": "Path",
                                          "path": [
                                            "core",
                                            "fmt",
                                            "Arguments"
                                          ]
                                        },
                                        "consts": [],
                                        "tys": []
                                      },
                                      {
                                        "type": "Path",
                                        "path": [
                                          "bool"
                                        ]
                                      }
                                    ],
                                    "ret": {
                                      "type": "Path",
                                      "path": [
                                        "never"
                                      ]
                                    }
                                  },
                                  {
                                    "type": "Function",
                                    "args": [
                                      {
                                        "type": "Application",
                                        "func": {
                                          "type": "Path",
                                          "path": [
                                            "core",
                                            "fmt",
                                            "Arguments"
                                          ]
                                        },
                                        "consts": [],
                                        "tys": []
                                      },
                                      {
                                        "type": "Path",
                                        "path": [
                                          "bool"
                                        ]
                                      }
                                    ],
                                    "ret": {
                                      "type": "Path",
                                      "path": [
                                        "never"
                                      ]
                                    }
                                  },
                                  {
                                    "type": "Path",
                                    "path": [
                                      "never"
                                    ]
                                  }
                                ]
                              }
                            },
                            "args": [
                              {
                                "Tuple": {
                                  "elements": [
                                    {
                                      "Call": {
                                        "func": {
                                          "LocalVar": "M.read"
                                        },
                                        "args": [
                                          {
                                            "LocalVar": "fmt"
                                          }
                                        ],
                                        "kind": "Effectful"
                                      }
                                    },
                                    {
                                      "Call": {
                                        "func": {
                                          "LocalVar": "M.read"
                                        },
                                        "args": [
                                          {
                                            "LocalVar": "force_no_backtrace"
                                          }
                                        ],
                                        "kind": "Effectful"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "GetFunction": {
                                  "func": [
                                    "core",
                                    "panicking",
                                    "panic_nounwind_fmt.comptime"
                                  ],
                                  "generic_tys": []
                                }
                              },
                              {
                                "GetFunction": {
                                  "func": [
                                    "core",
                                    "panicking",
                                    "panic_nounwind_fmt.runtime"
                                  ],
                                  "generic_tys": []
                                }
                              }
                            ],
                            "kind": "Closure"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Module",
            "name": "panic_nounwind_fmt",
            "body": [
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "runtime",
                  "path": [
                    "core",
                    "panicking",
                    "panic_nounwind_fmt",
                    "runtime"
                  ],
                  "snippet": [
                    "    fn runtime(fmt: fmt::Arguments<'_>, force_no_backtrace: bool) -> ! {",
                    "        if cfg!(feature = \"panic_immediate_abort\") {",
                    "            super::intrinsics::abort()",
                    "        }",
                    "",
                    "        // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call",
                    "        // that gets resolved to the `#[panic_handler]` function.",
                    "        extern \"Rust\" {",
                    "            #[lang = \"panic_impl\"]",
                    "            fn panic_impl(pi: &PanicInfo<'_>) -> !;",
                    "        }",
                    "",
                    "        // PanicInfo with the `can_unwind` flag set to false forces an abort.",
                    "        let pi = PanicInfo::new(",
                    "            fmt,",
                    "            Location::caller(),",
                    "            /* can_unwind */ false,",
                    "            force_no_backtrace,",
                    "        );",
                    "",
                    "        // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.",
                    "        unsafe { panic_impl(&pi) }",
                    "    }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [
                        [
                          "fmt",
                          {
                            "type": "Application",
                            "func": {
                              "type": "Path",
                              "path": [
                                "core",
                                "fmt",
                                "Arguments"
                              ]
                            },
                            "consts": [],
                            "tys": []
                          },
                          null
                        ],
                        [
                          "force_no_backtrace",
                          {
                            "type": "Path",
                            "path": [
                              "bool"
                            ]
                          },
                          null
                        ]
                      ],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Let": {
                          "name": "fmt",
                          "is_user": false,
                          "init": {
                            "Call": {
                              "func": {
                                "LocalVar": "M.alloc"
                              },
                              "args": [
                                {
                                  "LocalVar": "fmt"
                                }
                              ],
                              "kind": "Effectful"
                            }
                          },
                          "body": {
                            "Let": {
                              "name": "force_no_backtrace",
                              "is_user": false,
                              "init": {
                                "Call": {
                                  "func": {
                                    "LocalVar": "M.alloc"
                                  },
                                  "args": [
                                    {
                                      "LocalVar": "force_no_backtrace"
                                    }
                                  ],
                                  "kind": "Effectful"
                                }
                              },
                              "body": {
                                "Call": {
                                  "func": {
                                    "LocalVar": "M.read"
                                  },
                                  "args": [
                                    {
                                      "Let": {
                                        "name": null,
                                        "is_user": true,
                                        "init": {
                                          "Match": {
                                            "scrutinee": {
                                              "Call": {
                                                "func": {
                                                  "LocalVar": "M.alloc"
                                                },
                                                "args": [
                                                  {
                                                    "Tuple": {
                                                      "elements": []
                                                    }
                                                  }
                                                ],
                                                "kind": "Effectful"
                                              }
                                            },
                                            "arms": [
                                              {
                                                "Lambda": {
                                                  "args": [
                                                    [
                                                      "γ",
                                                      null
                                                    ]
                                                  ],
                                                  "body": {
                                                    "Let": {
                                                      "name": "γ",
                                                      "is_user": false,
                                                      "init": {
                                                        "Use": {
                                                          "Call": {
                                                            "func": {
                                                              "LocalVar": "M.alloc"
                                                            },
                                                            "args": [
                                                              {
                                                                "Literal": {
                                                                  "Bool": false
                                                                }
                                                              }
                                                            ],
                                                            "kind": "Effectful"
                                                          }
                                                        }
                                                      },
                                                      "body": {
                                                        "Let": {
                                                          "name": null,
                                                          "is_user": false,
                                                          "init": {
                                                            "Call": {
                                                              "func": {
                                                                "LocalVar": "M.is_constant_or_break_match"
                                                              },
                                                              "args": [
                                                                {
                                                                  "Call": {
                                                                    "func": {
                                                                      "LocalVar": "M.read"
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "LocalVar": "γ"
                                                                      }
                                                                    ],
                                                                    "kind": "Effectful"
                                                                  }
                                                                },
                                                                {
                                                                  "Literal": {
                                                                    "Bool": true
                                                                  }
                                                                }
                                                              ],
                                                              "kind": "Effectful"
                                                            }
                                                          },
                                                          "body": {
                                                            "Call": {
                                                              "func": {
                                                                "LocalVar": "M.alloc"
                                                              },
                                                              "args": [
                                                                {
                                                                  "Call": {
                                                                    "func": {
                                                                      "LocalVar": "M.never_to_any"
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "Call": {
                                                                          "func": {
                                                                            "GetFunction": {
                                                                              "func": [
                                                                                "core",
                                                                                "intrinsics",
                                                                                "abort"
                                                                              ],
                                                                              "generic_tys": []
                                                                            }
                                                                          },
                                                                          "args": [],
                                                                          "kind": "Closure"
                                                                        }
                                                                      }
                                                                    ],
                                                                    "kind": "Effectful"
                                                                  }
                                                                }
                                                              ],
                                                              "kind": "Effectful"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "is_for_match": true,
                                                  "is_internal": true
                                                }
                                              },
                                              {
                                                "Lambda": {
                                                  "args": [
                                                    [
                                                      "γ",
                                                      null
                                                    ]
                                                  ],
                                                  "body": {
                                                    "Call": {
                                                      "func": {
                                                        "LocalVar": "M.alloc"
                                                      },
                                                      "args": [
                                                        {
                                                          "Tuple": {
                                                            "elements": []
                                                          }
                                                        }
                                                      ],
                                                      "kind": "Effectful"
                                                    }
                                                  },
                                                  "is_for_match": true,
                                                  "is_internal": true
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        "body": {
                                          "Let": {
                                            "name": "pi",
                                            "is_user": true,
                                            "init": {
                                              "Call": {
                                                "func": {
                                                  "LocalVar": "M.alloc"
                                                },
                                                "args": [
                                                  {
                                                    "Call": {
                                                      "func": {
                                                        "GetAssociatedFunction": {
                                                          "ty": {
                                                            "type": "Application",
                                                            "func": {
                                                              "type": "Path",
                                                              "path": [
                                                                "core",
                                                                "panic",
                                                                "panic_info",
                                                                "PanicInfo"
                                                              ]
                                                            },
                                                            "consts": [],
                                                            "tys": []
                                                          },
                                                          "func": "new",
                                                          "generic_tys": []
                                                        }
                                                      },
                                                      "args": [
                                                        {
                                                          "Call": {
                                                            "func": {
                                                              "LocalVar": "M.read"
                                                            },
                                                            "args": [
                                                              {
                                                                "LocalVar": "fmt"
                                                              }
                                                            ],
                                                            "kind": "Effectful"
                                                          }
                                                        },
                                                        {
                                                          "Call": {
                                                            "func": {
                                                              "GetAssociatedFunction": {
                                                                "ty": {
                                                                  "type": "Application",
                                                                  "func": {
                                                                    "type": "Path",
                                                                    "path": [
                                                                      "core",
                                                                      "panic",
                                                                      "location",
                                                                      "Location"
                                                                    ]
                                                                  },
                                                                  "consts": [],
                                                                  "tys": []
                                                                },
                                                                "func": "caller",
                                                                "generic_tys": []
                                                              }
                                                            },
                                                            "args": [],
                                                            "kind": "Closure"
                                                          }
                                                        },
                                                        {
                                                          "Literal": {
                                                            "Bool": false
                                                          }
                                                        },
                                                        {
                                                          "Call": {
                                                            "func": {
                                                              "LocalVar": "M.read"
                                                            },
                                                            "args": [
                                                              {
                                                                "LocalVar": "force_no_backtrace"
                                                              }
                                                            ],
                                                            "kind": "Effectful"
                                                          }
                                                        }
                                                      ],
                                                      "kind": "Closure"
                                                    }
                                                  }
                                                ],
                                                "kind": "Effectful"
                                              }
                                            },
                                            "body": {
                                              "Call": {
                                                "func": {
                                                  "LocalVar": "M.alloc"
                                                },
                                                "args": [
                                                  {
                                                    "Call": {
                                                      "func": {
                                                        "GetFunction": {
                                                          "func": [
                                                            "core",
                                                            "panicking",
                                                            "panic_nounwind_fmt",
                                                            "runtime",
                                                            "panic_impl"
                                                          ],
                                                          "generic_tys": []
                                                        }
                                                      },
                                                      "args": [
                                                        {
                                                          "LocalVar": "pi"
                                                        }
                                                      ],
                                                      "kind": "Closure"
                                                    }
                                                  }
                                                ],
                                                "kind": "Effectful"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "kind": "Effectful"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Module",
                  "name": "runtime",
                  "body": [
                    {
                      "file_name": "core/src/panicking.rs",
                      "item": {
                        "type": "Definition",
                        "name": "panic_impl",
                        "path": [
                          "core",
                          "panicking",
                          "panic_nounwind_fmt",
                          "runtime",
                          "panic_impl"
                        ],
                        "snippet": null,
                        "definition": {
                          "const_params": [],
                          "ty_params": [],
                          "signature_and_body": {
                            "args": null,
                            "ret_ty": null,
                            "body": null
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "comptime",
                  "path": [
                    "core",
                    "panicking",
                    "panic_nounwind_fmt",
                    "comptime"
                  ],
                  "snippet": [
                    "    const fn comptime(fmt: fmt::Arguments<'_>, _force_no_backtrace: bool) -> ! {",
                    "        // We don't unwind anyway at compile-time so we can call the regular `panic_fmt`.",
                    "        panic_fmt(fmt);",
                    "    }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [
                        [
                          "fmt",
                          {
                            "type": "Application",
                            "func": {
                              "type": "Path",
                              "path": [
                                "core",
                                "fmt",
                                "Arguments"
                              ]
                            },
                            "consts": [],
                            "tys": []
                          },
                          null
                        ],
                        [
                          "_force_no_backtrace",
                          {
                            "type": "Path",
                            "path": [
                              "bool"
                            ]
                          },
                          null
                        ]
                      ],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Let": {
                          "name": "fmt",
                          "is_user": false,
                          "init": {
                            "Call": {
                              "func": {
                                "LocalVar": "M.alloc"
                              },
                              "args": [
                                {
                                  "LocalVar": "fmt"
                                }
                              ],
                              "kind": "Effectful"
                            }
                          },
                          "body": {
                            "Let": {
                              "name": "_force_no_backtrace",
                              "is_user": false,
                              "init": {
                                "Call": {
                                  "func": {
                                    "LocalVar": "M.alloc"
                                  },
                                  "args": [
                                    {
                                      "LocalVar": "_force_no_backtrace"
                                    }
                                  ],
                                  "kind": "Effectful"
                                }
                              },
                              "body": {
                                "Call": {
                                  "func": {
                                    "GetFunction": {
                                      "func": [
                                        "core",
                                        "panicking",
                                        "panic_fmt"
                                      ],
                                      "generic_tys": []
                                    }
                                  },
                                  "args": [
                                    {
                                      "Call": {
                                        "func": {
                                          "LocalVar": "M.read"
                                        },
                                        "args": [
                                          {
                                            "LocalVar": "fmt"
                                          }
                                        ],
                                        "kind": "Effectful"
                                      }
                                    }
                                  ],
                                  "kind": "Closure"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "panic",
            "path": [
              "core",
              "panicking",
              "panic"
            ],
            "snippet": [
              "pub const fn panic(expr: &'static str) -> ! {",
              "    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
              "    // reduce size overhead. The format_args! macro uses str's Display trait to",
              "    // write expr, which calls Formatter::pad, which must accommodate string",
              "    // truncation and padding (even though none is used here). Using",
              "    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
              "    // output binary, saving up to a few kilobytes.",
              "    // However, this optimization only works for `'static` strings: `new_const` also makes this",
              "    // message return `Some` from `Arguments::as_str`, which means it can become part of the panic",
              "    // payload without any allocation or copying. Shorter-lived strings would become invalid as",
              "    // stack frames get popped during unwinding, and couldn't be directly referenced from the",
              "    // payload.",
              "    panic_fmt(fmt::Arguments::new_const(&[expr]));",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [],
              "signature_and_body": {
                "args": [
                  [
                    "expr",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "&"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Path",
                          "path": [
                            "str"
                          ]
                        }
                      ]
                    },
                    null
                  ]
                ],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Let": {
                    "name": "expr",
                    "is_user": false,
                    "init": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.alloc"
                        },
                        "args": [
                          {
                            "LocalVar": "expr"
                          }
                        ],
                        "kind": "Effectful"
                      }
                    },
                    "body": {
                      "Call": {
                        "func": {
                          "GetFunction": {
                            "func": [
                              "core",
                              "panicking",
                              "panic_fmt"
                            ],
                            "generic_tys": []
                          }
                        },
                        "args": [
                          {
                            "Call": {
                              "func": {
                                "GetAssociatedFunction": {
                                  "ty": {
                                    "type": "Application",
                                    "func": {
                                      "type": "Path",
                                      "path": [
                                        "core",
                                        "fmt",
                                        "Arguments"
                                      ]
                                    },
                                    "consts": [],
                                    "tys": []
                                  },
                                  "func": "new_const",
                                  "generic_tys": []
                                }
                              },
                              "args": [
                                {
                                  "Call": {
                                    "func": {
                                      "LocalVar": "M.alloc"
                                    },
                                    "args": [
                                      {
                                        "Array": {
                                          "elements": [
                                            {
                                              "Call": {
                                                "func": {
                                                  "LocalVar": "M.read"
                                                },
                                                "args": [
                                                  {
                                                    "LocalVar": "expr"
                                                  }
                                                ],
                                                "kind": "Effectful"
                                              }
                                            }
                                          ],
                                          "is_internal": false
                                        }
                                      }
                                    ],
                                    "kind": "Effectful"
                                  }
                                }
                              ],
                              "kind": "Closure"
                            }
                          }
                        ],
                        "kind": "Closure"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Module",
            "name": "panic_const",
            "body": [
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_add_overflow",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_add_overflow"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "attempt to add with overflow"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_sub_overflow",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_sub_overflow"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "attempt to subtract with overflow"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_mul_overflow",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_mul_overflow"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "attempt to multiply with overflow"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_div_overflow",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_div_overflow"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "attempt to divide with overflow"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_rem_overflow",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_rem_overflow"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "attempt to calculate the remainder with overflow"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_neg_overflow",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_neg_overflow"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "attempt to negate with overflow"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_shr_overflow",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_shr_overflow"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "attempt to shift right with overflow"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_shl_overflow",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_shl_overflow"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "attempt to shift left with overflow"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_div_by_zero",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_div_by_zero"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "attempt to divide by zero"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_rem_by_zero",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_rem_by_zero"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "attempt to calculate the remainder with a divisor of zero"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_coroutine_resumed",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_coroutine_resumed"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "coroutine resumed after completion"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_async_fn_resumed",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_async_fn_resumed"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "`async fn` resumed after completion"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_async_gen_fn_resumed",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_async_gen_fn_resumed"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "`async gen fn` resumed after completion"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_gen_fn_none",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_gen_fn_none"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "`gen fn` should just keep returning `None` after completion"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_coroutine_resumed_panic",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_coroutine_resumed_panic"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "coroutine resumed after panicking"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_async_fn_resumed_panic",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_async_fn_resumed_panic"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "`async fn` resumed after panicking"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_async_gen_fn_resumed_panic",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_async_gen_fn_resumed_panic"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "`async gen fn` resumed after panicking"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "Definition",
                  "name": "panic_const_gen_fn_none_panic",
                  "path": [
                    "core",
                    "panicking",
                    "panic_const",
                    "panic_const_gen_fn_none_panic"
                  ],
                  "snippet": [
                    "                pub const fn $lang() -> ! {",
                    "                    // Use Arguments::new_const instead of format_args!(\"{expr}\") to potentially",
                    "                    // reduce size overhead. The format_args! macro uses str's Display trait to",
                    "                    // write expr, which calls Formatter::pad, which must accommodate string",
                    "                    // truncation and padding (even though none is used here). Using",
                    "                    // Arguments::new_const may allow the compiler to omit Formatter::pad from the",
                    "                    // output binary, saving up to a few kilobytes.",
                    "                    panic_fmt(fmt::Arguments::new_const(&[$message]));",
                    "                }"
                  ],
                  "definition": {
                    "const_params": [],
                    "ty_params": [],
                    "signature_and_body": {
                      "args": [],
                      "ret_ty": {
                        "type": "Path",
                        "path": [
                          "never"
                        ]
                      },
                      "body": {
                        "Call": {
                          "func": {
                            "GetFunction": {
                              "func": [
                                "core",
                                "panicking",
                                "panic_fmt"
                              ],
                              "generic_tys": []
                            }
                          },
                          "args": [
                            {
                              "Call": {
                                "func": {
                                  "GetAssociatedFunction": {
                                    "ty": {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Arguments"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    },
                                    "func": "new_const",
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Array": {
                                            "elements": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Literal": {
                                                        "String": "`gen fn` should just keep returning `None` after panicking"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "is_internal": false
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          ],
                          "kind": "Closure"
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "panic_nounwind",
            "path": [
              "core",
              "panicking",
              "panic_nounwind"
            ],
            "snippet": [
              "pub const fn panic_nounwind(expr: &'static str) -> ! {",
              "    panic_nounwind_fmt(fmt::Arguments::new_const(&[expr]), /* force_no_backtrace */ false);",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [],
              "signature_and_body": {
                "args": [
                  [
                    "expr",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "&"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Path",
                          "path": [
                            "str"
                          ]
                        }
                      ]
                    },
                    null
                  ]
                ],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Let": {
                    "name": "expr",
                    "is_user": false,
                    "init": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.alloc"
                        },
                        "args": [
                          {
                            "LocalVar": "expr"
                          }
                        ],
                        "kind": "Effectful"
                      }
                    },
                    "body": {
                      "Call": {
                        "func": {
                          "GetFunction": {
                            "func": [
                              "core",
                              "panicking",
                              "panic_nounwind_fmt"
                            ],
                            "generic_tys": []
                          }
                        },
                        "args": [
                          {
                            "Call": {
                              "func": {
                                "GetAssociatedFunction": {
                                  "ty": {
                                    "type": "Application",
                                    "func": {
                                      "type": "Path",
                                      "path": [
                                        "core",
                                        "fmt",
                                        "Arguments"
                                      ]
                                    },
                                    "consts": [],
                                    "tys": []
                                  },
                                  "func": "new_const",
                                  "generic_tys": []
                                }
                              },
                              "args": [
                                {
                                  "Call": {
                                    "func": {
                                      "LocalVar": "M.alloc"
                                    },
                                    "args": [
                                      {
                                        "Array": {
                                          "elements": [
                                            {
                                              "Call": {
                                                "func": {
                                                  "LocalVar": "M.read"
                                                },
                                                "args": [
                                                  {
                                                    "LocalVar": "expr"
                                                  }
                                                ],
                                                "kind": "Effectful"
                                              }
                                            }
                                          ],
                                          "is_internal": false
                                        }
                                      }
                                    ],
                                    "kind": "Effectful"
                                  }
                                }
                              ],
                              "kind": "Closure"
                            }
                          },
                          {
                            "Literal": {
                              "Bool": false
                            }
                          }
                        ],
                        "kind": "Closure"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "panic_nounwind_nobacktrace",
            "path": [
              "core",
              "panicking",
              "panic_nounwind_nobacktrace"
            ],
            "snippet": [
              "pub fn panic_nounwind_nobacktrace(expr: &'static str) -> ! {",
              "    panic_nounwind_fmt(fmt::Arguments::new_const(&[expr]), /* force_no_backtrace */ true);",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [],
              "signature_and_body": {
                "args": [
                  [
                    "expr",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "&"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Path",
                          "path": [
                            "str"
                          ]
                        }
                      ]
                    },
                    null
                  ]
                ],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Let": {
                    "name": "expr",
                    "is_user": false,
                    "init": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.alloc"
                        },
                        "args": [
                          {
                            "LocalVar": "expr"
                          }
                        ],
                        "kind": "Effectful"
                      }
                    },
                    "body": {
                      "Call": {
                        "func": {
                          "GetFunction": {
                            "func": [
                              "core",
                              "panicking",
                              "panic_nounwind_fmt"
                            ],
                            "generic_tys": []
                          }
                        },
                        "args": [
                          {
                            "Call": {
                              "func": {
                                "GetAssociatedFunction": {
                                  "ty": {
                                    "type": "Application",
                                    "func": {
                                      "type": "Path",
                                      "path": [
                                        "core",
                                        "fmt",
                                        "Arguments"
                                      ]
                                    },
                                    "consts": [],
                                    "tys": []
                                  },
                                  "func": "new_const",
                                  "generic_tys": []
                                }
                              },
                              "args": [
                                {
                                  "Call": {
                                    "func": {
                                      "LocalVar": "M.alloc"
                                    },
                                    "args": [
                                      {
                                        "Array": {
                                          "elements": [
                                            {
                                              "Call": {
                                                "func": {
                                                  "LocalVar": "M.read"
                                                },
                                                "args": [
                                                  {
                                                    "LocalVar": "expr"
                                                  }
                                                ],
                                                "kind": "Effectful"
                                              }
                                            }
                                          ],
                                          "is_internal": false
                                        }
                                      }
                                    ],
                                    "kind": "Effectful"
                                  }
                                }
                              ],
                              "kind": "Closure"
                            }
                          },
                          {
                            "Literal": {
                              "Bool": true
                            }
                          }
                        ],
                        "kind": "Closure"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "panic_explicit",
            "path": [
              "core",
              "panicking",
              "panic_explicit"
            ],
            "snippet": [
              "pub const fn panic_explicit() -> ! {",
              "    panic_display(&\"explicit panic\");",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [],
              "signature_and_body": {
                "args": [],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Call": {
                    "func": {
                      "GetFunction": {
                        "func": [
                          "core",
                          "panicking",
                          "panic_display"
                        ],
                        "generic_tys": [
                          {
                            "type": "Application",
                            "func": {
                              "type": "Path",
                              "path": [
                                "&"
                              ]
                            },
                            "consts": [],
                            "tys": [
                              {
                                "type": "Path",
                                "path": [
                                  "str"
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "args": [
                      {
                        "Literal": {
                          "String": "explicit panic"
                        }
                      }
                    ],
                    "kind": "Closure"
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "unreachable_display",
            "path": [
              "core",
              "panicking",
              "unreachable_display"
            ],
            "snippet": [
              "pub fn unreachable_display<T: fmt::Display>(x: &T) -> ! {",
              "    panic_fmt(format_args!(\"internal error: entered unreachable code: {}\", *x));",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [
                "T"
              ],
              "signature_and_body": {
                "args": [
                  [
                    "x",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "&"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Var",
                          "name": "T"
                        }
                      ]
                    },
                    null
                  ]
                ],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Let": {
                    "name": "x",
                    "is_user": false,
                    "init": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.alloc"
                        },
                        "args": [
                          {
                            "LocalVar": "x"
                          }
                        ],
                        "kind": "Effectful"
                      }
                    },
                    "body": {
                      "Call": {
                        "func": {
                          "GetFunction": {
                            "func": [
                              "core",
                              "panicking",
                              "panic_fmt"
                            ],
                            "generic_tys": []
                          }
                        },
                        "args": [
                          {
                            "Call": {
                              "func": {
                                "GetAssociatedFunction": {
                                  "ty": {
                                    "type": "Application",
                                    "func": {
                                      "type": "Path",
                                      "path": [
                                        "core",
                                        "fmt",
                                        "Arguments"
                                      ]
                                    },
                                    "consts": [],
                                    "tys": []
                                  },
                                  "func": "new_v1",
                                  "generic_tys": []
                                }
                              },
                              "args": [
                                {
                                  "Call": {
                                    "func": {
                                      "LocalVar": "M.alloc"
                                    },
                                    "args": [
                                      {
                                        "Array": {
                                          "elements": [
                                            {
                                              "Call": {
                                                "func": {
                                                  "LocalVar": "M.read"
                                                },
                                                "args": [
                                                  {
                                                    "Literal": {
                                                      "String": "internal error: entered unreachable code: "
                                                    }
                                                  }
                                                ],
                                                "kind": "Effectful"
                                              }
                                            }
                                          ],
                                          "is_internal": false
                                        }
                                      }
                                    ],
                                    "kind": "Effectful"
                                  }
                                },
                                {
                                  "Call": {
                                    "func": {
                                      "LocalVar": "M.alloc"
                                    },
                                    "args": [
                                      {
                                        "Array": {
                                          "elements": [
                                            {
                                              "Call": {
                                                "func": {
                                                  "GetAssociatedFunction": {
                                                    "ty": {
                                                      "type": "Application",
                                                      "func": {
                                                        "type": "Path",
                                                        "path": [
                                                          "core",
                                                          "fmt",
                                                          "rt",
                                                          "Argument"
                                                        ]
                                                      },
                                                      "consts": [],
                                                      "tys": []
                                                    },
                                                    "func": "new_display",
                                                    "generic_tys": [
                                                      {
                                                        "type": "Var",
                                                        "name": "T"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "args": [
                                                  {
                                                    "Call": {
                                                      "func": {
                                                        "LocalVar": "M.read"
                                                      },
                                                      "args": [
                                                        {
                                                          "LocalVar": "x"
                                                        }
                                                      ],
                                                      "kind": "Effectful"
                                                    }
                                                  }
                                                ],
                                                "kind": "Closure"
                                              }
                                            }
                                          ],
                                          "is_internal": false
                                        }
                                      }
                                    ],
                                    "kind": "Effectful"
                                  }
                                }
                              ],
                              "kind": "Closure"
                            }
                          }
                        ],
                        "kind": "Closure"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "panic_str_2015",
            "path": [
              "core",
              "panicking",
              "panic_str_2015"
            ],
            "snippet": [
              "pub const fn panic_str_2015(expr: &str) -> ! {",
              "    panic_display(&expr);",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [],
              "signature_and_body": {
                "args": [
                  [
                    "expr",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "&"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Path",
                          "path": [
                            "str"
                          ]
                        }
                      ]
                    },
                    null
                  ]
                ],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Let": {
                    "name": "expr",
                    "is_user": false,
                    "init": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.alloc"
                        },
                        "args": [
                          {
                            "LocalVar": "expr"
                          }
                        ],
                        "kind": "Effectful"
                      }
                    },
                    "body": {
                      "Call": {
                        "func": {
                          "GetFunction": {
                            "func": [
                              "core",
                              "panicking",
                              "panic_display"
                            ],
                            "generic_tys": [
                              {
                                "type": "Application",
                                "func": {
                                  "type": "Path",
                                  "path": [
                                    "&"
                                  ]
                                },
                                "consts": [],
                                "tys": [
                                  {
                                    "type": "Path",
                                    "path": [
                                      "str"
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "args": [
                          {
                            "LocalVar": "expr"
                          }
                        ],
                        "kind": "Closure"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "panic_display",
            "path": [
              "core",
              "panicking",
              "panic_display"
            ],
            "snippet": [
              "pub const fn panic_display<T: fmt::Display>(x: &T) -> ! {",
              "    panic_fmt(format_args!(\"{}\", *x));",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [
                "T"
              ],
              "signature_and_body": {
                "args": [
                  [
                    "x",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "&"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Var",
                          "name": "T"
                        }
                      ]
                    },
                    null
                  ]
                ],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Let": {
                    "name": "x",
                    "is_user": false,
                    "init": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.alloc"
                        },
                        "args": [
                          {
                            "LocalVar": "x"
                          }
                        ],
                        "kind": "Effectful"
                      }
                    },
                    "body": {
                      "Call": {
                        "func": {
                          "GetFunction": {
                            "func": [
                              "core",
                              "panicking",
                              "panic_fmt"
                            ],
                            "generic_tys": []
                          }
                        },
                        "args": [
                          {
                            "Call": {
                              "func": {
                                "GetAssociatedFunction": {
                                  "ty": {
                                    "type": "Application",
                                    "func": {
                                      "type": "Path",
                                      "path": [
                                        "core",
                                        "fmt",
                                        "Arguments"
                                      ]
                                    },
                                    "consts": [],
                                    "tys": []
                                  },
                                  "func": "new_v1",
                                  "generic_tys": []
                                }
                              },
                              "args": [
                                {
                                  "Call": {
                                    "func": {
                                      "LocalVar": "M.alloc"
                                    },
                                    "args": [
                                      {
                                        "Array": {
                                          "elements": [
                                            {
                                              "Call": {
                                                "func": {
                                                  "LocalVar": "M.read"
                                                },
                                                "args": [
                                                  {
                                                    "Literal": {
                                                      "String": ""
                                                    }
                                                  }
                                                ],
                                                "kind": "Effectful"
                                              }
                                            }
                                          ],
                                          "is_internal": false
                                        }
                                      }
                                    ],
                                    "kind": "Effectful"
                                  }
                                },
                                {
                                  "Call": {
                                    "func": {
                                      "LocalVar": "M.alloc"
                                    },
                                    "args": [
                                      {
                                        "Array": {
                                          "elements": [
                                            {
                                              "Call": {
                                                "func": {
                                                  "GetAssociatedFunction": {
                                                    "ty": {
                                                      "type": "Application",
                                                      "func": {
                                                        "type": "Path",
                                                        "path": [
                                                          "core",
                                                          "fmt",
                                                          "rt",
                                                          "Argument"
                                                        ]
                                                      },
                                                      "consts": [],
                                                      "tys": []
                                                    },
                                                    "func": "new_display",
                                                    "generic_tys": [
                                                      {
                                                        "type": "Var",
                                                        "name": "T"
                                                      }
                                                    ]
                                                  }
                                                },
                                                "args": [
                                                  {
                                                    "Call": {
                                                      "func": {
                                                        "LocalVar": "M.read"
                                                      },
                                                      "args": [
                                                        {
                                                          "LocalVar": "x"
                                                        }
                                                      ],
                                                      "kind": "Effectful"
                                                    }
                                                  }
                                                ],
                                                "kind": "Closure"
                                              }
                                            }
                                          ],
                                          "is_internal": false
                                        }
                                      }
                                    ],
                                    "kind": "Effectful"
                                  }
                                }
                              ],
                              "kind": "Closure"
                            }
                          }
                        ],
                        "kind": "Closure"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "panic_bounds_check",
            "path": [
              "core",
              "panicking",
              "panic_bounds_check"
            ],
            "snippet": [
              "fn panic_bounds_check(index: usize, len: usize) -> ! {",
              "    if cfg!(feature = \"panic_immediate_abort\") {",
              "        super::intrinsics::abort()",
              "    }",
              "",
              "    panic!(\"index out of bounds: the len is {len} but the index is {index}\")",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [],
              "signature_and_body": {
                "args": [
                  [
                    "index",
                    {
                      "type": "Path",
                      "path": [
                        "usize"
                      ]
                    },
                    null
                  ],
                  [
                    "len",
                    {
                      "type": "Path",
                      "path": [
                        "usize"
                      ]
                    },
                    null
                  ]
                ],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Let": {
                    "name": "index",
                    "is_user": false,
                    "init": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.alloc"
                        },
                        "args": [
                          {
                            "LocalVar": "index"
                          }
                        ],
                        "kind": "Effectful"
                      }
                    },
                    "body": {
                      "Let": {
                        "name": "len",
                        "is_user": false,
                        "init": {
                          "Call": {
                            "func": {
                              "LocalVar": "M.alloc"
                            },
                            "args": [
                              {
                                "LocalVar": "len"
                              }
                            ],
                            "kind": "Effectful"
                          }
                        },
                        "body": {
                          "Call": {
                            "func": {
                              "LocalVar": "M.read"
                            },
                            "args": [
                              {
                                "Let": {
                                  "name": null,
                                  "is_user": true,
                                  "init": {
                                    "Match": {
                                      "scrutinee": {
                                        "Call": {
                                          "func": {
                                            "LocalVar": "M.alloc"
                                          },
                                          "args": [
                                            {
                                              "Tuple": {
                                                "elements": []
                                              }
                                            }
                                          ],
                                          "kind": "Effectful"
                                        }
                                      },
                                      "arms": [
                                        {
                                          "Lambda": {
                                            "args": [
                                              [
                                                "γ",
                                                null
                                              ]
                                            ],
                                            "body": {
                                              "Let": {
                                                "name": "γ",
                                                "is_user": false,
                                                "init": {
                                                  "Use": {
                                                    "Call": {
                                                      "func": {
                                                        "LocalVar": "M.alloc"
                                                      },
                                                      "args": [
                                                        {
                                                          "Literal": {
                                                            "Bool": false
                                                          }
                                                        }
                                                      ],
                                                      "kind": "Effectful"
                                                    }
                                                  }
                                                },
                                                "body": {
                                                  "Let": {
                                                    "name": null,
                                                    "is_user": false,
                                                    "init": {
                                                      "Call": {
                                                        "func": {
                                                          "LocalVar": "M.is_constant_or_break_match"
                                                        },
                                                        "args": [
                                                          {
                                                            "Call": {
                                                              "func": {
                                                                "LocalVar": "M.read"
                                                              },
                                                              "args": [
                                                                {
                                                                  "LocalVar": "γ"
                                                                }
                                                              ],
                                                              "kind": "Effectful"
                                                            }
                                                          },
                                                          {
                                                            "Literal": {
                                                              "Bool": true
                                                            }
                                                          }
                                                        ],
                                                        "kind": "Effectful"
                                                      }
                                                    },
                                                    "body": {
                                                      "Call": {
                                                        "func": {
                                                          "LocalVar": "M.alloc"
                                                        },
                                                        "args": [
                                                          {
                                                            "Call": {
                                                              "func": {
                                                                "LocalVar": "M.never_to_any"
                                                              },
                                                              "args": [
                                                                {
                                                                  "Call": {
                                                                    "func": {
                                                                      "GetFunction": {
                                                                        "func": [
                                                                          "core",
                                                                          "intrinsics",
                                                                          "abort"
                                                                        ],
                                                                        "generic_tys": []
                                                                      }
                                                                    },
                                                                    "args": [],
                                                                    "kind": "Closure"
                                                                  }
                                                                }
                                                              ],
                                                              "kind": "Effectful"
                                                            }
                                                          }
                                                        ],
                                                        "kind": "Effectful"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "is_for_match": true,
                                            "is_internal": true
                                          }
                                        },
                                        {
                                          "Lambda": {
                                            "args": [
                                              [
                                                "γ",
                                                null
                                              ]
                                            ],
                                            "body": {
                                              "Call": {
                                                "func": {
                                                  "LocalVar": "M.alloc"
                                                },
                                                "args": [
                                                  {
                                                    "Tuple": {
                                                      "elements": []
                                                    }
                                                  }
                                                ],
                                                "kind": "Effectful"
                                              }
                                            },
                                            "is_for_match": true,
                                            "is_internal": true
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "body": {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Call": {
                                            "func": {
                                              "GetFunction": {
                                                "func": [
                                                  "core",
                                                  "panicking",
                                                  "panic_fmt"
                                                ],
                                                "generic_tys": []
                                              }
                                            },
                                            "args": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "GetAssociatedFunction": {
                                                      "ty": {
                                                        "type": "Application",
                                                        "func": {
                                                          "type": "Path",
                                                          "path": [
                                                            "core",
                                                            "fmt",
                                                            "Arguments"
                                                          ]
                                                        },
                                                        "consts": [],
                                                        "tys": []
                                                      },
                                                      "func": "new_v1",
                                                      "generic_tys": []
                                                    }
                                                  },
                                                  "args": [
                                                    {
                                                      "Call": {
                                                        "func": {
                                                          "LocalVar": "M.alloc"
                                                        },
                                                        "args": [
                                                          {
                                                            "Array": {
                                                              "elements": [
                                                                {
                                                                  "Call": {
                                                                    "func": {
                                                                      "LocalVar": "M.read"
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "Literal": {
                                                                          "String": "index out of bounds: the len is "
                                                                        }
                                                                      }
                                                                    ],
                                                                    "kind": "Effectful"
                                                                  }
                                                                },
                                                                {
                                                                  "Call": {
                                                                    "func": {
                                                                      "LocalVar": "M.read"
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "Literal": {
                                                                          "String": " but the index is "
                                                                        }
                                                                      }
                                                                    ],
                                                                    "kind": "Effectful"
                                                                  }
                                                                }
                                                              ],
                                                              "is_internal": false
                                                            }
                                                          }
                                                        ],
                                                        "kind": "Effectful"
                                                      }
                                                    },
                                                    {
                                                      "Call": {
                                                        "func": {
                                                          "LocalVar": "M.alloc"
                                                        },
                                                        "args": [
                                                          {
                                                            "Array": {
                                                              "elements": [
                                                                {
                                                                  "Call": {
                                                                    "func": {
                                                                      "GetAssociatedFunction": {
                                                                        "ty": {
                                                                          "type": "Application",
                                                                          "func": {
                                                                            "type": "Path",
                                                                            "path": [
                                                                              "core",
                                                                              "fmt",
                                                                              "rt",
                                                                              "Argument"
                                                                            ]
                                                                          },
                                                                          "consts": [],
                                                                          "tys": []
                                                                        },
                                                                        "func": "new_display",
                                                                        "generic_tys": [
                                                                          {
                                                                            "type": "Path",
                                                                            "path": [
                                                                              "usize"
                                                                            ]
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "LocalVar": "len"
                                                                      }
                                                                    ],
                                                                    "kind": "Closure"
                                                                  }
                                                                },
                                                                {
                                                                  "Call": {
                                                                    "func": {
                                                                      "GetAssociatedFunction": {
                                                                        "ty": {
                                                                          "type": "Application",
                                                                          "func": {
                                                                            "type": "Path",
                                                                            "path": [
                                                                              "core",
                                                                              "fmt",
                                                                              "rt",
                                                                              "Argument"
                                                                            ]
                                                                          },
                                                                          "consts": [],
                                                                          "tys": []
                                                                        },
                                                                        "func": "new_display",
                                                                        "generic_tys": [
                                                                          {
                                                                            "type": "Path",
                                                                            "path": [
                                                                              "usize"
                                                                            ]
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "LocalVar": "index"
                                                                      }
                                                                    ],
                                                                    "kind": "Closure"
                                                                  }
                                                                }
                                                              ],
                                                              "is_internal": false
                                                            }
                                                          }
                                                        ],
                                                        "kind": "Effectful"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Closure"
                                                }
                                              }
                                            ],
                                            "kind": "Closure"
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                }
                              }
                            ],
                            "kind": "Effectful"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "panic_misaligned_pointer_dereference",
            "path": [
              "core",
              "panicking",
              "panic_misaligned_pointer_dereference"
            ],
            "snippet": [
              "fn panic_misaligned_pointer_dereference(required: usize, found: usize) -> ! {",
              "    if cfg!(feature = \"panic_immediate_abort\") {",
              "        super::intrinsics::abort()",
              "    }",
              "",
              "    panic_nounwind_fmt(",
              "        format_args!(",
              "            \"misaligned pointer dereference: address must be a multiple of {required:#x} but is {found:#x}\"",
              "        ),",
              "        /* force_no_backtrace */ false,",
              "    )",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [],
              "signature_and_body": {
                "args": [
                  [
                    "required",
                    {
                      "type": "Path",
                      "path": [
                        "usize"
                      ]
                    },
                    null
                  ],
                  [
                    "found",
                    {
                      "type": "Path",
                      "path": [
                        "usize"
                      ]
                    },
                    null
                  ]
                ],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Let": {
                    "name": "required",
                    "is_user": false,
                    "init": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.alloc"
                        },
                        "args": [
                          {
                            "LocalVar": "required"
                          }
                        ],
                        "kind": "Effectful"
                      }
                    },
                    "body": {
                      "Let": {
                        "name": "found",
                        "is_user": false,
                        "init": {
                          "Call": {
                            "func": {
                              "LocalVar": "M.alloc"
                            },
                            "args": [
                              {
                                "LocalVar": "found"
                              }
                            ],
                            "kind": "Effectful"
                          }
                        },
                        "body": {
                          "Call": {
                            "func": {
                              "LocalVar": "M.read"
                            },
                            "args": [
                              {
                                "Let": {
                                  "name": null,
                                  "is_user": true,
                                  "init": {
                                    "Match": {
                                      "scrutinee": {
                                        "Call": {
                                          "func": {
                                            "LocalVar": "M.alloc"
                                          },
                                          "args": [
                                            {
                                              "Tuple": {
                                                "elements": []
                                              }
                                            }
                                          ],
                                          "kind": "Effectful"
                                        }
                                      },
                                      "arms": [
                                        {
                                          "Lambda": {
                                            "args": [
                                              [
                                                "γ",
                                                null
                                              ]
                                            ],
                                            "body": {
                                              "Let": {
                                                "name": "γ",
                                                "is_user": false,
                                                "init": {
                                                  "Use": {
                                                    "Call": {
                                                      "func": {
                                                        "LocalVar": "M.alloc"
                                                      },
                                                      "args": [
                                                        {
                                                          "Literal": {
                                                            "Bool": false
                                                          }
                                                        }
                                                      ],
                                                      "kind": "Effectful"
                                                    }
                                                  }
                                                },
                                                "body": {
                                                  "Let": {
                                                    "name": null,
                                                    "is_user": false,
                                                    "init": {
                                                      "Call": {
                                                        "func": {
                                                          "LocalVar": "M.is_constant_or_break_match"
                                                        },
                                                        "args": [
                                                          {
                                                            "Call": {
                                                              "func": {
                                                                "LocalVar": "M.read"
                                                              },
                                                              "args": [
                                                                {
                                                                  "LocalVar": "γ"
                                                                }
                                                              ],
                                                              "kind": "Effectful"
                                                            }
                                                          },
                                                          {
                                                            "Literal": {
                                                              "Bool": true
                                                            }
                                                          }
                                                        ],
                                                        "kind": "Effectful"
                                                      }
                                                    },
                                                    "body": {
                                                      "Call": {
                                                        "func": {
                                                          "LocalVar": "M.alloc"
                                                        },
                                                        "args": [
                                                          {
                                                            "Call": {
                                                              "func": {
                                                                "LocalVar": "M.never_to_any"
                                                              },
                                                              "args": [
                                                                {
                                                                  "Call": {
                                                                    "func": {
                                                                      "GetFunction": {
                                                                        "func": [
                                                                          "core",
                                                                          "intrinsics",
                                                                          "abort"
                                                                        ],
                                                                        "generic_tys": []
                                                                      }
                                                                    },
                                                                    "args": [],
                                                                    "kind": "Closure"
                                                                  }
                                                                }
                                                              ],
                                                              "kind": "Effectful"
                                                            }
                                                          }
                                                        ],
                                                        "kind": "Effectful"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "is_for_match": true,
                                            "is_internal": true
                                          }
                                        },
                                        {
                                          "Lambda": {
                                            "args": [
                                              [
                                                "γ",
                                                null
                                              ]
                                            ],
                                            "body": {
                                              "Call": {
                                                "func": {
                                                  "LocalVar": "M.alloc"
                                                },
                                                "args": [
                                                  {
                                                    "Tuple": {
                                                      "elements": []
                                                    }
                                                  }
                                                ],
                                                "kind": "Effectful"
                                              }
                                            },
                                            "is_for_match": true,
                                            "is_internal": true
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "body": {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "Call": {
                                            "func": {
                                              "GetFunction": {
                                                "func": [
                                                  "core",
                                                  "panicking",
                                                  "panic_nounwind_fmt"
                                                ],
                                                "generic_tys": []
                                              }
                                            },
                                            "args": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "GetAssociatedFunction": {
                                                      "ty": {
                                                        "type": "Application",
                                                        "func": {
                                                          "type": "Path",
                                                          "path": [
                                                            "core",
                                                            "fmt",
                                                            "Arguments"
                                                          ]
                                                        },
                                                        "consts": [],
                                                        "tys": []
                                                      },
                                                      "func": "new_v1_formatted",
                                                      "generic_tys": []
                                                    }
                                                  },
                                                  "args": [
                                                    {
                                                      "Call": {
                                                        "func": {
                                                          "LocalVar": "M.alloc"
                                                        },
                                                        "args": [
                                                          {
                                                            "Array": {
                                                              "elements": [
                                                                {
                                                                  "Call": {
                                                                    "func": {
                                                                      "LocalVar": "M.read"
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "Literal": {
                                                                          "String": "misaligned pointer dereference: address must be a multiple of "
                                                                        }
                                                                      }
                                                                    ],
                                                                    "kind": "Effectful"
                                                                  }
                                                                },
                                                                {
                                                                  "Call": {
                                                                    "func": {
                                                                      "LocalVar": "M.read"
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "Literal": {
                                                                          "String": " but is "
                                                                        }
                                                                      }
                                                                    ],
                                                                    "kind": "Effectful"
                                                                  }
                                                                }
                                                              ],
                                                              "is_internal": false
                                                            }
                                                          }
                                                        ],
                                                        "kind": "Effectful"
                                                      }
                                                    },
                                                    {
                                                      "Call": {
                                                        "func": {
                                                          "LocalVar": "M.alloc"
                                                        },
                                                        "args": [
                                                          {
                                                            "Array": {
                                                              "elements": [
                                                                {
                                                                  "Call": {
                                                                    "func": {
                                                                      "GetAssociatedFunction": {
                                                                        "ty": {
                                                                          "type": "Application",
                                                                          "func": {
                                                                            "type": "Path",
                                                                            "path": [
                                                                              "core",
                                                                              "fmt",
                                                                              "rt",
                                                                              "Argument"
                                                                            ]
                                                                          },
                                                                          "consts": [],
                                                                          "tys": []
                                                                        },
                                                                        "func": "new_lower_hex",
                                                                        "generic_tys": [
                                                                          {
                                                                            "type": "Path",
                                                                            "path": [
                                                                              "usize"
                                                                            ]
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "LocalVar": "required"
                                                                      }
                                                                    ],
                                                                    "kind": "Closure"
                                                                  }
                                                                },
                                                                {
                                                                  "Call": {
                                                                    "func": {
                                                                      "GetAssociatedFunction": {
                                                                        "ty": {
                                                                          "type": "Application",
                                                                          "func": {
                                                                            "type": "Path",
                                                                            "path": [
                                                                              "core",
                                                                              "fmt",
                                                                              "rt",
                                                                              "Argument"
                                                                            ]
                                                                          },
                                                                          "consts": [],
                                                                          "tys": []
                                                                        },
                                                                        "func": "new_lower_hex",
                                                                        "generic_tys": [
                                                                          {
                                                                            "type": "Path",
                                                                            "path": [
                                                                              "usize"
                                                                            ]
                                                                          }
                                                                        ]
                                                                      }
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "LocalVar": "found"
                                                                      }
                                                                    ],
                                                                    "kind": "Closure"
                                                                  }
                                                                }
                                                              ],
                                                              "is_internal": false
                                                            }
                                                          }
                                                        ],
                                                        "kind": "Effectful"
                                                      }
                                                    },
                                                    {
                                                      "Call": {
                                                        "func": {
                                                          "LocalVar": "M.alloc"
                                                        },
                                                        "args": [
                                                          {
                                                            "Array": {
                                                              "elements": [
                                                                {
                                                                  "Call": {
                                                                    "func": {
                                                                      "GetAssociatedFunction": {
                                                                        "ty": {
                                                                          "type": "Application",
                                                                          "func": {
                                                                            "type": "Path",
                                                                            "path": [
                                                                              "core",
                                                                              "fmt",
                                                                              "rt",
                                                                              "Placeholder"
                                                                            ]
                                                                          },
                                                                          "consts": [],
                                                                          "tys": []
                                                                        },
                                                                        "func": "new",
                                                                        "generic_tys": []
                                                                      }
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "Literal": {
                                                                          "Integer": {
                                                                            "kind": "Usize",
                                                                            "negative_sign": false,
                                                                            "value": 0
                                                                          }
                                                                        }
                                                                      },
                                                                      {
                                                                        "Literal": {
                                                                          "Char": " "
                                                                        }
                                                                      },
                                                                      {
                                                                        "StructTuple": {
                                                                          "path": [
                                                                            "core",
                                                                            "fmt",
                                                                            "rt",
                                                                            "Alignment",
                                                                            "Unknown"
                                                                          ],
                                                                          "fields": []
                                                                        }
                                                                      },
                                                                      {
                                                                        "Literal": {
                                                                          "Integer": {
                                                                            "kind": "U32",
                                                                            "negative_sign": false,
                                                                            "value": 4
                                                                          }
                                                                        }
                                                                      },
                                                                      {
                                                                        "StructTuple": {
                                                                          "path": [
                                                                            "core",
                                                                            "fmt",
                                                                            "rt",
                                                                            "Count",
                                                                            "Implied"
                                                                          ],
                                                                          "fields": []
                                                                        }
                                                                      },
                                                                      {
                                                                        "StructTuple": {
                                                                          "path": [
                                                                            "core",
                                                                            "fmt",
                                                                            "rt",
                                                                            "Count",
                                                                            "Implied"
                                                                          ],
                                                                          "fields": []
                                                                        }
                                                                      }
                                                                    ],
                                                                    "kind": "Closure"
                                                                  }
                                                                },
                                                                {
                                                                  "Call": {
                                                                    "func": {
                                                                      "GetAssociatedFunction": {
                                                                        "ty": {
                                                                          "type": "Application",
                                                                          "func": {
                                                                            "type": "Path",
                                                                            "path": [
                                                                              "core",
                                                                              "fmt",
                                                                              "rt",
                                                                              "Placeholder"
                                                                            ]
                                                                          },
                                                                          "consts": [],
                                                                          "tys": []
                                                                        },
                                                                        "func": "new",
                                                                        "generic_tys": []
                                                                      }
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "Literal": {
                                                                          "Integer": {
                                                                            "kind": "Usize",
                                                                            "negative_sign": false,
                                                                            "value": 1
                                                                          }
                                                                        }
                                                                      },
                                                                      {
                                                                        "Literal": {
                                                                          "Char": " "
                                                                        }
                                                                      },
                                                                      {
                                                                        "StructTuple": {
                                                                          "path": [
                                                                            "core",
                                                                            "fmt",
                                                                            "rt",
                                                                            "Alignment",
                                                                            "Unknown"
                                                                          ],
                                                                          "fields": []
                                                                        }
                                                                      },
                                                                      {
                                                                        "Literal": {
                                                                          "Integer": {
                                                                            "kind": "U32",
                                                                            "negative_sign": false,
                                                                            "value": 4
                                                                          }
                                                                        }
                                                                      },
                                                                      {
                                                                        "StructTuple": {
                                                                          "path": [
                                                                            "core",
                                                                            "fmt",
                                                                            "rt",
                                                                            "Count",
                                                                            "Implied"
                                                                          ],
                                                                          "fields": []
                                                                        }
                                                                      },
                                                                      {
                                                                        "StructTuple": {
                                                                          "path": [
                                                                            "core",
                                                                            "fmt",
                                                                            "rt",
                                                                            "Count",
                                                                            "Implied"
                                                                          ],
                                                                          "fields": []
                                                                        }
                                                                      }
                                                                    ],
                                                                    "kind": "Closure"
                                                                  }
                                                                }
                                                              ],
                                                              "is_internal": false
                                                            }
                                                          }
                                                        ],
                                                        "kind": "Effectful"
                                                      }
                                                    },
                                                    {
                                                      "Call": {
                                                        "func": {
                                                          "GetAssociatedFunction": {
                                                            "ty": {
                                                              "type": "Application",
                                                              "func": {
                                                                "type": "Path",
                                                                "path": [
                                                                  "core",
                                                                  "fmt",
                                                                  "rt",
                                                                  "UnsafeArg"
                                                                ]
                                                              },
                                                              "consts": [],
                                                              "tys": []
                                                            },
                                                            "func": "new",
                                                            "generic_tys": []
                                                          }
                                                        },
                                                        "args": [],
                                                        "kind": "Closure"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Closure"
                                                }
                                              },
                                              {
                                                "Literal": {
                                                  "Bool": false
                                                }
                                              }
                                            ],
                                            "kind": "Closure"
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                }
                              }
                            ],
                            "kind": "Effectful"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "panic_cannot_unwind",
            "path": [
              "core",
              "panicking",
              "panic_cannot_unwind"
            ],
            "snippet": [
              "fn panic_cannot_unwind() -> ! {",
              "    // Keep the text in sync with `UnwindTerminateReason::as_str` in `rustc_middle`.",
              "    panic_nounwind(\"panic in a function that cannot unwind\")",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [],
              "signature_and_body": {
                "args": [],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Call": {
                    "func": {
                      "GetFunction": {
                        "func": [
                          "core",
                          "panicking",
                          "panic_nounwind"
                        ],
                        "generic_tys": []
                      }
                    },
                    "args": [
                      {
                        "Call": {
                          "func": {
                            "LocalVar": "M.read"
                          },
                          "args": [
                            {
                              "Literal": {
                                "String": "panic in a function that cannot unwind"
                              }
                            }
                          ],
                          "kind": "Effectful"
                        }
                      }
                    ],
                    "kind": "Closure"
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "panic_in_cleanup",
            "path": [
              "core",
              "panicking",
              "panic_in_cleanup"
            ],
            "snippet": [
              "fn panic_in_cleanup() -> ! {",
              "    // Keep the text in sync with `UnwindTerminateReason::as_str` in `rustc_middle`.",
              "    panic_nounwind_nobacktrace(\"panic in a destructor during cleanup\")",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [],
              "signature_and_body": {
                "args": [],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Call": {
                    "func": {
                      "GetFunction": {
                        "func": [
                          "core",
                          "panicking",
                          "panic_nounwind_nobacktrace"
                        ],
                        "generic_tys": []
                      }
                    },
                    "args": [
                      {
                        "Call": {
                          "func": {
                            "LocalVar": "M.read"
                          },
                          "args": [
                            {
                              "Literal": {
                                "String": "panic in a destructor during cleanup"
                              }
                            }
                          ],
                          "kind": "Effectful"
                        }
                      }
                    ],
                    "kind": "Closure"
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "const_panic_fmt",
            "path": [
              "core",
              "panicking",
              "const_panic_fmt"
            ],
            "snippet": [
              "pub const fn const_panic_fmt(fmt: fmt::Arguments<'_>) -> ! {",
              "    if let Some(msg) = fmt.as_str() {",
              "        // The panic_display function is hooked by const eval.",
              "        panic_display(&msg);",
              "    } else {",
              "        // SAFETY: This is only evaluated at compile time, which reliably",
              "        // handles this UB (in case this branch turns out to be reachable",
              "        // somehow).",
              "        unsafe { crate::hint::unreachable_unchecked() };",
              "    }",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [],
              "signature_and_body": {
                "args": [
                  [
                    "fmt",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "core",
                          "fmt",
                          "Arguments"
                        ]
                      },
                      "consts": [],
                      "tys": []
                    },
                    null
                  ]
                ],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Let": {
                    "name": "fmt",
                    "is_user": false,
                    "init": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.alloc"
                        },
                        "args": [
                          {
                            "LocalVar": "fmt"
                          }
                        ],
                        "kind": "Effectful"
                      }
                    },
                    "body": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.read"
                        },
                        "args": [
                          {
                            "Match": {
                              "scrutinee": {
                                "Call": {
                                  "func": {
                                    "LocalVar": "M.alloc"
                                  },
                                  "args": [
                                    {
                                      "Tuple": {
                                        "elements": []
                                      }
                                    }
                                  ],
                                  "kind": "Effectful"
                                }
                              },
                              "arms": [
                                {
                                  "Lambda": {
                                    "args": [
                                      [
                                        "γ",
                                        null
                                      ]
                                    ],
                                    "body": {
                                      "Let": {
                                        "name": "γ",
                                        "is_user": false,
                                        "init": {
                                          "Call": {
                                            "func": {
                                              "LocalVar": "M.alloc"
                                            },
                                            "args": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "GetAssociatedFunction": {
                                                      "ty": {
                                                        "type": "Application",
                                                        "func": {
                                                          "type": "Path",
                                                          "path": [
                                                            "core",
                                                            "fmt",
                                                            "Arguments"
                                                          ]
                                                        },
                                                        "consts": [],
                                                        "tys": []
                                                      },
                                                      "func": "as_str",
                                                      "generic_tys": []
                                                    }
                                                  },
                                                  "args": [
                                                    {
                                                      "LocalVar": "fmt"
                                                    }
                                                  ],
                                                  "kind": "Closure"
                                                }
                                              }
                                            ],
                                            "kind": "Effectful"
                                          }
                                        },
                                        "body": {
                                          "Let": {
                                            "name": "γ0_0",
                                            "is_user": false,
                                            "init": {
                                              "Call": {
                                                "func": {
                                                  "LocalVar": "M.SubPointer.get_struct_tuple_field"
                                                },
                                                "args": [
                                                  {
                                                    "LocalVar": "γ"
                                                  },
                                                  {
                                                    "InternalString": "core::option::Option::Some"
                                                  },
                                                  {
                                                    "InternalInteger": 0
                                                  }
                                                ],
                                                "kind": "Effectful"
                                              }
                                            },
                                            "body": {
                                              "Let": {
                                                "name": "msg",
                                                "is_user": false,
                                                "init": {
                                                  "Call": {
                                                    "func": {
                                                      "LocalVar": "M.copy"
                                                    },
                                                    "args": [
                                                      {
                                                        "LocalVar": "γ0_0"
                                                      }
                                                    ],
                                                    "kind": "Effectful"
                                                  }
                                                },
                                                "body": {
                                                  "Call": {
                                                    "func": {
                                                      "LocalVar": "M.alloc"
                                                    },
                                                    "args": [
                                                      {
                                                        "Call": {
                                                          "func": {
                                                            "GetFunction": {
                                                              "func": [
                                                                "core",
                                                                "panicking",
                                                                "panic_display"
                                                              ],
                                                              "generic_tys": [
                                                                {
                                                                  "type": "Application",
                                                                  "func": {
                                                                    "type": "Path",
                                                                    "path": [
                                                                      "&"
                                                                    ]
                                                                  },
                                                                  "consts": [],
                                                                  "tys": [
                                                                    {
                                                                      "type": "Path",
                                                                      "path": [
                                                                        "str"
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          "args": [
                                                            {
                                                              "LocalVar": "msg"
                                                            }
                                                          ],
                                                          "kind": "Closure"
                                                        }
                                                      }
                                                    ],
                                                    "kind": "Effectful"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "is_for_match": true,
                                    "is_internal": true
                                  }
                                },
                                {
                                  "Lambda": {
                                    "args": [
                                      [
                                        "γ",
                                        null
                                      ]
                                    ],
                                    "body": {
                                      "Let": {
                                        "name": null,
                                        "is_user": true,
                                        "init": {
                                          "Call": {
                                            "func": {
                                              "LocalVar": "M.alloc"
                                            },
                                            "args": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.never_to_any"
                                                  },
                                                  "args": [
                                                    {
                                                      "Call": {
                                                        "func": {
                                                          "GetFunction": {
                                                            "func": [
                                                              "core",
                                                              "hint",
                                                              "unreachable_unchecked"
                                                            ],
                                                            "generic_tys": []
                                                          }
                                                        },
                                                        "args": [],
                                                        "kind": "Closure"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "kind": "Effectful"
                                          }
                                        },
                                        "body": {
                                          "Call": {
                                            "func": {
                                              "LocalVar": "M.alloc"
                                            },
                                            "args": [
                                              {
                                                "Tuple": {
                                                  "elements": []
                                                }
                                              }
                                            ],
                                            "kind": "Effectful"
                                          }
                                        }
                                      }
                                    },
                                    "is_for_match": true,
                                    "is_internal": true
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "Effectful"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "TypeEnum",
            "name": "AssertKind",
            "const_params": [],
            "ty_params": [],
            "variants": [
              {
                "name": "Eq",
                "item": {
                  "type": "Tuple",
                  "tys": []
                },
                "discriminant": null
              },
              {
                "name": "Ne",
                "item": {
                  "type": "Tuple",
                  "tys": []
                },
                "discriminant": null
              },
              {
                "name": "Match",
                "item": {
                  "type": "Tuple",
                  "tys": []
                },
                "discriminant": null
              }
            ]
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "TraitImpl",
            "generic_consts": [],
            "generic_tys": [],
            "predicates": [],
            "self_ty": {
              "type": "Application",
              "func": {
                "type": "Path",
                "path": [
                  "core",
                  "panicking",
                  "AssertKind"
                ]
              },
              "consts": [],
              "tys": []
            },
            "of_trait": [
              "core",
              "fmt",
              "Debug"
            ],
            "trait_ty_params": [],
            "items": [
              {
                "name": "fmt",
                "snippet": [
                  "Debug"
                ],
                "kind": {
                  "RequiredValue": {
                    "Definition": {
                      "definition": {
                        "const_params": [],
                        "ty_params": [],
                        "signature_and_body": {
                          "args": [
                            [
                              "self",
                              {
                                "type": "Application",
                                "func": {
                                  "type": "Path",
                                  "path": [
                                    "&"
                                  ]
                                },
                                "consts": [],
                                "tys": [
                                  {
                                    "type": "Application",
                                    "func": {
                                      "type": "Path",
                                      "path": [
                                        "core",
                                        "panicking",
                                        "AssertKind"
                                      ]
                                    },
                                    "consts": [],
                                    "tys": []
                                  }
                                ]
                              },
                              null
                            ],
                            [
                              "f",
                              {
                                "type": "Application",
                                "func": {
                                  "type": "Path",
                                  "path": [
                                    "&mut"
                                  ]
                                },
                                "consts": [],
                                "tys": [
                                  {
                                    "type": "Application",
                                    "func": {
                                      "type": "Path",
                                      "path": [
                                        "core",
                                        "fmt",
                                        "Formatter"
                                      ]
                                    },
                                    "consts": [],
                                    "tys": []
                                  }
                                ]
                              },
                              null
                            ]
                          ],
                          "ret_ty": {
                            "type": "Application",
                            "func": {
                              "type": "Path",
                              "path": [
                                "core",
                                "result",
                                "Result"
                              ]
                            },
                            "consts": [],
                            "tys": [
                              {
                                "type": "Tuple",
                                "tys": []
                              },
                              {
                                "type": "Application",
                                "func": {
                                  "type": "Path",
                                  "path": [
                                    "core",
                                    "fmt",
                                    "Error"
                                  ]
                                },
                                "consts": [],
                                "tys": []
                              }
                            ]
                          },
                          "body": {
                            "Let": {
                              "name": "self",
                              "is_user": false,
                              "init": {
                                "Call": {
                                  "func": {
                                    "LocalVar": "M.alloc"
                                  },
                                  "args": [
                                    {
                                      "LocalVar": "self"
                                    }
                                  ],
                                  "kind": "Effectful"
                                }
                              },
                              "body": {
                                "Let": {
                                  "name": "f",
                                  "is_user": false,
                                  "init": {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "LocalVar": "f"
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  },
                                  "body": {
                                    "Call": {
                                      "func": {
                                        "GetAssociatedFunction": {
                                          "ty": {
                                            "type": "Application",
                                            "func": {
                                              "type": "Path",
                                              "path": [
                                                "core",
                                                "fmt",
                                                "Formatter"
                                              ]
                                            },
                                            "consts": [],
                                            "tys": []
                                          },
                                          "func": "write_str",
                                          "generic_tys": []
                                        }
                                      },
                                      "args": [
                                        {
                                          "Call": {
                                            "func": {
                                              "LocalVar": "M.read"
                                            },
                                            "args": [
                                              {
                                                "LocalVar": "f"
                                              }
                                            ],
                                            "kind": "Effectful"
                                          }
                                        },
                                        {
                                          "Call": {
                                            "func": {
                                              "LocalVar": "M.read"
                                            },
                                            "args": [
                                              {
                                                "Match": {
                                                  "scrutinee": {
                                                    "LocalVar": "self"
                                                  },
                                                  "arms": [
                                                    {
                                                      "Lambda": {
                                                        "args": [
                                                          [
                                                            "γ",
                                                            null
                                                          ]
                                                        ],
                                                        "body": {
                                                          "Let": {
                                                            "name": "γ",
                                                            "is_user": false,
                                                            "init": {
                                                              "Call": {
                                                                "func": {
                                                                  "LocalVar": "M.read"
                                                                },
                                                                "args": [
                                                                  {
                                                                    "LocalVar": "γ"
                                                                  }
                                                                ],
                                                                "kind": "Effectful"
                                                              }
                                                            },
                                                            "body": {
                                                              "Let": {
                                                                "name": null,
                                                                "is_user": false,
                                                                "init": {
                                                                  "Call": {
                                                                    "func": {
                                                                      "LocalVar": "M.is_struct_tuple"
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "LocalVar": "γ"
                                                                      },
                                                                      {
                                                                        "InternalString": "core::panicking::AssertKind::Eq"
                                                                      }
                                                                    ],
                                                                    "kind": "Effectful"
                                                                  }
                                                                },
                                                                "body": {
                                                                  "Call": {
                                                                    "func": {
                                                                      "LocalVar": "M.alloc"
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "Call": {
                                                                          "func": {
                                                                            "LocalVar": "M.read"
                                                                          },
                                                                          "args": [
                                                                            {
                                                                              "Literal": {
                                                                                "String": "Eq"
                                                                              }
                                                                            }
                                                                          ],
                                                                          "kind": "Effectful"
                                                                        }
                                                                      }
                                                                    ],
                                                                    "kind": "Effectful"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "is_for_match": true,
                                                        "is_internal": true
                                                      }
                                                    },
                                                    {
                                                      "Lambda": {
                                                        "args": [
                                                          [
                                                            "γ",
                                                            null
                                                          ]
                                                        ],
                                                        "body": {
                                                          "Let": {
                                                            "name": "γ",
                                                            "is_user": false,
                                                            "init": {
                                                              "Call": {
                                                                "func": {
                                                                  "LocalVar": "M.read"
                                                                },
                                                                "args": [
                                                                  {
                                                                    "LocalVar": "γ"
                                                                  }
                                                                ],
                                                                "kind": "Effectful"
                                                              }
                                                            },
                                                            "body": {
                                                              "Let": {
                                                                "name": null,
                                                                "is_user": false,
                                                                "init": {
                                                                  "Call": {
                                                                    "func": {
                                                                      "LocalVar": "M.is_struct_tuple"
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "LocalVar": "γ"
                                                                      },
                                                                      {
                                                                        "InternalString": "core::panicking::AssertKind::Ne"
                                                                      }
                                                                    ],
                                                                    "kind": "Effectful"
                                                                  }
                                                                },
                                                                "body": {
                                                                  "Call": {
                                                                    "func": {
                                                                      "LocalVar": "M.alloc"
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "Call": {
                                                                          "func": {
                                                                            "LocalVar": "M.read"
                                                                          },
                                                                          "args": [
                                                                            {
                                                                              "Literal": {
                                                                                "String": "Ne"
                                                                              }
                                                                            }
                                                                          ],
                                                                          "kind": "Effectful"
                                                                        }
                                                                      }
                                                                    ],
                                                                    "kind": "Effectful"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "is_for_match": true,
                                                        "is_internal": true
                                                      }
                                                    },
                                                    {
                                                      "Lambda": {
                                                        "args": [
                                                          [
                                                            "γ",
                                                            null
                                                          ]
                                                        ],
                                                        "body": {
                                                          "Let": {
                                                            "name": "γ",
                                                            "is_user": false,
                                                            "init": {
                                                              "Call": {
                                                                "func": {
                                                                  "LocalVar": "M.read"
                                                                },
                                                                "args": [
                                                                  {
                                                                    "LocalVar": "γ"
                                                                  }
                                                                ],
                                                                "kind": "Effectful"
                                                              }
                                                            },
                                                            "body": {
                                                              "Let": {
                                                                "name": null,
                                                                "is_user": false,
                                                                "init": {
                                                                  "Call": {
                                                                    "func": {
                                                                      "LocalVar": "M.is_struct_tuple"
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "LocalVar": "γ"
                                                                      },
                                                                      {
                                                                        "InternalString": "core::panicking::AssertKind::Match"
                                                                      }
                                                                    ],
                                                                    "kind": "Effectful"
                                                                  }
                                                                },
                                                                "body": {
                                                                  "Call": {
                                                                    "func": {
                                                                      "LocalVar": "M.alloc"
                                                                    },
                                                                    "args": [
                                                                      {
                                                                        "Call": {
                                                                          "func": {
                                                                            "LocalVar": "M.read"
                                                                          },
                                                                          "args": [
                                                                            {
                                                                              "Literal": {
                                                                                "String": "Match"
                                                                              }
                                                                            }
                                                                          ],
                                                                          "kind": "Effectful"
                                                                        }
                                                                      }
                                                                    ],
                                                                    "kind": "Effectful"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "is_for_match": true,
                                                        "is_internal": true
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ],
                                            "kind": "Effectful"
                                          }
                                        }
                                      ],
                                      "kind": "Closure"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "assert_failed",
            "path": [
              "core",
              "panicking",
              "assert_failed"
            ],
            "snippet": [
              "pub fn assert_failed<T, U>(",
              "    kind: AssertKind,",
              "    left: &T,",
              "    right: &U,",
              "    args: Option<fmt::Arguments<'_>>,",
              ") -> !",
              "where",
              "    T: fmt::Debug + ?Sized,",
              "    U: fmt::Debug + ?Sized,",
              "{",
              "    assert_failed_inner(kind, &left, &right, args)",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [
                "T",
                "U"
              ],
              "signature_and_body": {
                "args": [
                  [
                    "kind",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "core",
                          "panicking",
                          "AssertKind"
                        ]
                      },
                      "consts": [],
                      "tys": []
                    },
                    null
                  ],
                  [
                    "left",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "&"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Var",
                          "name": "T"
                        }
                      ]
                    },
                    null
                  ],
                  [
                    "right",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "&"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Var",
                          "name": "U"
                        }
                      ]
                    },
                    null
                  ],
                  [
                    "args",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "core",
                          "option",
                          "Option"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Application",
                          "func": {
                            "type": "Path",
                            "path": [
                              "core",
                              "fmt",
                              "Arguments"
                            ]
                          },
                          "consts": [],
                          "tys": []
                        }
                      ]
                    },
                    null
                  ]
                ],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Let": {
                    "name": "kind",
                    "is_user": false,
                    "init": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.alloc"
                        },
                        "args": [
                          {
                            "LocalVar": "kind"
                          }
                        ],
                        "kind": "Effectful"
                      }
                    },
                    "body": {
                      "Let": {
                        "name": "left",
                        "is_user": false,
                        "init": {
                          "Call": {
                            "func": {
                              "LocalVar": "M.alloc"
                            },
                            "args": [
                              {
                                "LocalVar": "left"
                              }
                            ],
                            "kind": "Effectful"
                          }
                        },
                        "body": {
                          "Let": {
                            "name": "right",
                            "is_user": false,
                            "init": {
                              "Call": {
                                "func": {
                                  "LocalVar": "M.alloc"
                                },
                                "args": [
                                  {
                                    "LocalVar": "right"
                                  }
                                ],
                                "kind": "Effectful"
                              }
                            },
                            "body": {
                              "Let": {
                                "name": "args",
                                "is_user": false,
                                "init": {
                                  "Call": {
                                    "func": {
                                      "LocalVar": "M.alloc"
                                    },
                                    "args": [
                                      {
                                        "LocalVar": "args"
                                      }
                                    ],
                                    "kind": "Effectful"
                                  }
                                },
                                "body": {
                                  "Call": {
                                    "func": {
                                      "GetFunction": {
                                        "func": [
                                          "core",
                                          "panicking",
                                          "assert_failed_inner"
                                        ],
                                        "generic_tys": []
                                      }
                                    },
                                    "args": [
                                      {
                                        "Call": {
                                          "func": {
                                            "LocalVar": "M.read"
                                          },
                                          "args": [
                                            {
                                              "LocalVar": "kind"
                                            }
                                          ],
                                          "kind": "Effectful"
                                        }
                                      },
                                      {
                                        "LocalVar": "left"
                                      },
                                      {
                                        "LocalVar": "right"
                                      },
                                      {
                                        "Call": {
                                          "func": {
                                            "LocalVar": "M.read"
                                          },
                                          "args": [
                                            {
                                              "LocalVar": "args"
                                            }
                                          ],
                                          "kind": "Effectful"
                                        }
                                      }
                                    ],
                                    "kind": "Closure"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "assert_matches_failed",
            "path": [
              "core",
              "panicking",
              "assert_matches_failed"
            ],
            "snippet": [
              "pub fn assert_matches_failed<T: fmt::Debug + ?Sized>(",
              "    left: &T,",
              "    right: &str,",
              "    args: Option<fmt::Arguments<'_>>,",
              ") -> ! {",
              "    // The pattern is a string so it can be displayed directly.",
              "    struct Pattern<'a>(&'a str);",
              "    impl fmt::Debug for Pattern<'_> {",
              "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
              "            f.write_str(self.0)",
              "        }",
              "    }",
              "    assert_failed_inner(AssertKind::Match, &left, &Pattern(right), args);",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [
                "T"
              ],
              "signature_and_body": {
                "args": [
                  [
                    "left",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "&"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Var",
                          "name": "T"
                        }
                      ]
                    },
                    null
                  ],
                  [
                    "right",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "&"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Path",
                          "path": [
                            "str"
                          ]
                        }
                      ]
                    },
                    null
                  ],
                  [
                    "args",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "core",
                          "option",
                          "Option"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Application",
                          "func": {
                            "type": "Path",
                            "path": [
                              "core",
                              "fmt",
                              "Arguments"
                            ]
                          },
                          "consts": [],
                          "tys": []
                        }
                      ]
                    },
                    null
                  ]
                ],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Let": {
                    "name": "left",
                    "is_user": false,
                    "init": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.alloc"
                        },
                        "args": [
                          {
                            "LocalVar": "left"
                          }
                        ],
                        "kind": "Effectful"
                      }
                    },
                    "body": {
                      "Let": {
                        "name": "right",
                        "is_user": false,
                        "init": {
                          "Call": {
                            "func": {
                              "LocalVar": "M.alloc"
                            },
                            "args": [
                              {
                                "LocalVar": "right"
                              }
                            ],
                            "kind": "Effectful"
                          }
                        },
                        "body": {
                          "Let": {
                            "name": "args",
                            "is_user": false,
                            "init": {
                              "Call": {
                                "func": {
                                  "LocalVar": "M.alloc"
                                },
                                "args": [
                                  {
                                    "LocalVar": "args"
                                  }
                                ],
                                "kind": "Effectful"
                              }
                            },
                            "body": {
                              "Call": {
                                "func": {
                                  "GetFunction": {
                                    "func": [
                                      "core",
                                      "panicking",
                                      "assert_failed_inner"
                                    ],
                                    "generic_tys": []
                                  }
                                },
                                "args": [
                                  {
                                    "StructTuple": {
                                      "path": [
                                        "core",
                                        "panicking",
                                        "AssertKind",
                                        "Match"
                                      ],
                                      "fields": []
                                    }
                                  },
                                  {
                                    "LocalVar": "left"
                                  },
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.alloc"
                                      },
                                      "args": [
                                        {
                                          "StructTuple": {
                                            "path": [
                                              "core",
                                              "panicking",
                                              "assert_matches_failed",
                                              "Pattern"
                                            ],
                                            "fields": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "LocalVar": "right"
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  },
                                  {
                                    "Call": {
                                      "func": {
                                        "LocalVar": "M.read"
                                      },
                                      "args": [
                                        {
                                          "LocalVar": "args"
                                        }
                                      ],
                                      "kind": "Effectful"
                                    }
                                  }
                                ],
                                "kind": "Closure"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Module",
            "name": "assert_matches_failed",
            "body": [
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "TypeStructTuple",
                  "name": "Pattern",
                  "const_params": [],
                  "ty_params": [],
                  "fields": [
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "&"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Path",
                          "path": [
                            "str"
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "file_name": "core/src/panicking.rs",
                "item": {
                  "type": "TraitImpl",
                  "generic_consts": [],
                  "generic_tys": [],
                  "predicates": [],
                  "self_ty": {
                    "type": "Application",
                    "func": {
                      "type": "Path",
                      "path": [
                        "core",
                        "panicking",
                        "assert_matches_failed",
                        "Pattern"
                      ]
                    },
                    "consts": [],
                    "tys": []
                  },
                  "of_trait": [
                    "core",
                    "fmt",
                    "Debug"
                  ],
                  "trait_ty_params": [],
                  "items": [
                    {
                      "name": "fmt",
                      "snippet": [
                        "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
                        "            f.write_str(self.0)",
                        "        }"
                      ],
                      "kind": {
                        "RequiredValue": {
                          "Definition": {
                            "definition": {
                              "const_params": [],
                              "ty_params": [],
                              "signature_and_body": {
                                "args": [
                                  [
                                    "self",
                                    {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "&"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": [
                                        {
                                          "type": "Application",
                                          "func": {
                                            "type": "Path",
                                            "path": [
                                              "core",
                                              "panicking",
                                              "assert_matches_failed",
                                              "Pattern"
                                            ]
                                          },
                                          "consts": [],
                                          "tys": []
                                        }
                                      ]
                                    },
                                    null
                                  ],
                                  [
                                    "f",
                                    {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "&mut"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": [
                                        {
                                          "type": "Application",
                                          "func": {
                                            "type": "Path",
                                            "path": [
                                              "core",
                                              "fmt",
                                              "Formatter"
                                            ]
                                          },
                                          "consts": [],
                                          "tys": []
                                        }
                                      ]
                                    },
                                    null
                                  ]
                                ],
                                "ret_ty": {
                                  "type": "Application",
                                  "func": {
                                    "type": "Path",
                                    "path": [
                                      "core",
                                      "result",
                                      "Result"
                                    ]
                                  },
                                  "consts": [],
                                  "tys": [
                                    {
                                      "type": "Tuple",
                                      "tys": []
                                    },
                                    {
                                      "type": "Application",
                                      "func": {
                                        "type": "Path",
                                        "path": [
                                          "core",
                                          "fmt",
                                          "Error"
                                        ]
                                      },
                                      "consts": [],
                                      "tys": []
                                    }
                                  ]
                                },
                                "body": {
                                  "Let": {
                                    "name": "self",
                                    "is_user": false,
                                    "init": {
                                      "Call": {
                                        "func": {
                                          "LocalVar": "M.alloc"
                                        },
                                        "args": [
                                          {
                                            "LocalVar": "self"
                                          }
                                        ],
                                        "kind": "Effectful"
                                      }
                                    },
                                    "body": {
                                      "Let": {
                                        "name": "f",
                                        "is_user": false,
                                        "init": {
                                          "Call": {
                                            "func": {
                                              "LocalVar": "M.alloc"
                                            },
                                            "args": [
                                              {
                                                "LocalVar": "f"
                                              }
                                            ],
                                            "kind": "Effectful"
                                          }
                                        },
                                        "body": {
                                          "Call": {
                                            "func": {
                                              "GetAssociatedFunction": {
                                                "ty": {
                                                  "type": "Application",
                                                  "func": {
                                                    "type": "Path",
                                                    "path": [
                                                      "core",
                                                      "fmt",
                                                      "Formatter"
                                                    ]
                                                  },
                                                  "consts": [],
                                                  "tys": []
                                                },
                                                "func": "write_str",
                                                "generic_tys": []
                                              }
                                            },
                                            "args": [
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "LocalVar": "f"
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              },
                                              {
                                                "Call": {
                                                  "func": {
                                                    "LocalVar": "M.read"
                                                  },
                                                  "args": [
                                                    {
                                                      "Call": {
                                                        "func": {
                                                          "LocalVar": "M.SubPointer.get_struct_tuple_field"
                                                        },
                                                        "args": [
                                                          {
                                                            "Call": {
                                                              "func": {
                                                                "LocalVar": "M.read"
                                                              },
                                                              "args": [
                                                                {
                                                                  "LocalVar": "self"
                                                                }
                                                              ],
                                                              "kind": "Effectful"
                                                            }
                                                          },
                                                          {
                                                            "InternalString": "core::panicking::assert_matches_failed::Pattern"
                                                          },
                                                          {
                                                            "LocalVar": "0"
                                                          }
                                                        ],
                                                        "kind": "Effectful"
                                                      }
                                                    }
                                                  ],
                                                  "kind": "Effectful"
                                                }
                                              }
                                            ],
                                            "kind": "Closure"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "file_name": "core/src/panicking.rs",
          "item": {
            "type": "Definition",
            "name": "assert_failed_inner",
            "path": [
              "core",
              "panicking",
              "assert_failed_inner"
            ],
            "snippet": [
              "fn assert_failed_inner(",
              "    kind: AssertKind,",
              "    left: &dyn fmt::Debug,",
              "    right: &dyn fmt::Debug,",
              "    args: Option<fmt::Arguments<'_>>,",
              ") -> ! {",
              "    let op = match kind {",
              "        AssertKind::Eq => \"==\",",
              "        AssertKind::Ne => \"!=\",",
              "        AssertKind::Match => \"matches\",",
              "    };",
              "",
              "    match args {",
              "        Some(args) => panic!(",
              "            r#\"assertion `left {op} right` failed: {args}",
              "  left: {left:?}",
              " right: {right:?}\"#",
              "        ),",
              "        None => panic!(",
              "            r#\"assertion `left {op} right` failed",
              "  left: {left:?}",
              " right: {right:?}\"#",
              "        ),",
              "    }",
              "}"
            ],
            "definition": {
              "const_params": [],
              "ty_params": [],
              "signature_and_body": {
                "args": [
                  [
                    "kind",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "core",
                          "panicking",
                          "AssertKind"
                        ]
                      },
                      "consts": [],
                      "tys": []
                    },
                    null
                  ],
                  [
                    "left",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "&"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Var",
                          "name": "DynT"
                        }
                      ]
                    },
                    null
                  ],
                  [
                    "right",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "&"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Var",
                          "name": "DynU"
                        }
                      ]
                    },
                    null
                  ],
                  [
                    "args",
                    {
                      "type": "Application",
                      "func": {
                        "type": "Path",
                        "path": [
                          "core",
                          "option",
                          "Option"
                        ]
                      },
                      "consts": [],
                      "tys": [
                        {
                          "type": "Application",
                          "func": {
                            "type": "Path",
                            "path": [
                              "core",
                              "fmt",
                              "Arguments"
                            ]
                          },
                          "consts": [],
                          "tys": []
                        }
                      ]
                    },
                    null
                  ]
                ],
                "ret_ty": {
                  "type": "Path",
                  "path": [
                    "never"
                  ]
                },
                "body": {
                  "Let": {
                    "name": "kind",
                    "is_user": false,
                    "init": {
                      "Call": {
                        "func": {
                          "LocalVar": "M.alloc"
                        },
                        "args": [
                          {
                            "LocalVar": "kind"
                          }
                        ],
                        "kind": "Effectful"
                      }
                    },
                    "body": {
                      "Let": {
                        "name": "left",
                        "is_user": false,
                        "init": {
                          "Call": {
                            "func": {
                              "LocalVar": "M.alloc"
                            },
                            "args": [
                              {
                                "LocalVar": "left"
                              }
                            ],
                            "kind": "Effectful"
                          }
                        },
                        "body": {
                          "Let": {
                            "name": "right",
                            "is_user": false,
                            "init": {
                              "Call": {
                                "func": {
                                  "LocalVar": "M.alloc"
                                },
                                "args": [
                                  {
                                    "LocalVar": "right"
                                  }
                                ],
                                "kind": "Effectful"
                              }
                            },
                            "body": {
                              "Let": {
                                "name": "args",
                                "is_user": false,
                                "init": {
                                  "Call": {
                                    "func": {
                                      "LocalVar": "M.alloc"
                                    },
                                    "args": [
                                      {
                                        "LocalVar": "args"
                                      }
                                    ],
                                    "kind": "Effectful"
                                  }
                                },
                                "body": {
                                  "Call": {
                                    "func": {
                                      "LocalVar": "M.read"
                                    },
                                    "args": [
                                      {
                                        "Let": {
                                          "name": "op",
                                          "is_user": true,
                                          "init": {
                                            "Call": {
                                              "func": {
                                                "LocalVar": "M.copy"
                                              },
                                              "args": [
                                                {
                                                  "Match": {
                                                    "scrutinee": {
                                                      "LocalVar": "kind"
                                                    },
                                                    "arms": [
                                                      {
                                                        "Lambda": {
                                                          "args": [
                                                            [
                                                              "γ",
                                                              null
                                                            ]
                                                          ],
                                                          "body": {
                                                            "Let": {
                                                              "name": null,
                                                              "is_user": false,
                                                              "init": {
                                                                "Call": {
                                                                  "func": {
                                                                    "LocalVar": "M.is_struct_tuple"
                                                                  },
                                                                  "args": [
                                                                    {
                                                                      "LocalVar": "γ"
                                                                    },
                                                                    {
                                                                      "InternalString": "core::panicking::AssertKind::Eq"
                                                                    }
                                                                  ],
                                                                  "kind": "Effectful"
                                                                }
                                                              },
                                                              "body": {
                                                                "Literal": {
                                                                  "String": "=="
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "is_for_match": true,
                                                          "is_internal": true
                                                        }
                                                      },
                                                      {
                                                        "Lambda": {
                                                          "args": [
                                                            [
                                                              "γ",
                                                              null
                                                            ]
                                                          ],
                                                          "body": {
                                                            "Let": {
                                                              "name": null,
                                                              "is_user": false,
                                                              "init": {
                                                                "Call": {
                                                                  "func": {
                                                                    "LocalVar": "M.is_struct_tuple"
                                                                  },
                                                                  "args": [
                                                                    {
                                                                      "LocalVar": "γ"
                                                                    },
                                                                    {
                                                                      "InternalString": "core::panicking::AssertKind::Ne"
                                                                    }
                                                                  ],
                                                                  "kind": "Effectful"
                                                                }
                                                              },
                                                              "body": {
                                                                "Call": {
                                                                  "func": {
                                                                    "LocalVar": "M.alloc"
                                                                  },
                                                                  "args": [
                                                                    {
                                                                      "Call": {
                                                                        "func": {
                                                                          "LocalVar": "M.read"
                                                                        },
                                                                        "args": [
                                                                          {
                                                                            "Literal": {
                                                                              "String": "!="
                                                                            }
                                                                          }
                                                                        ],
                                                                        "kind": "Effectful"
                                                                      }
                                                                    }
                                                                  ],
                                                                  "kind": "Effectful"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "is_for_match": true,
                                                          "is_internal": true
                                                        }
                                                      },
                                                      {
                                                        "Lambda": {
                                                          "args": [
                                                            [
                                                              "γ",
                                                              null
                                                            ]
                                                          ],
                                                          "body": {
                                                            "Let": {
                                                              "name": null,
                                                              "is_user": false,
                                                              "init": {
                                                                "Call": {
                                                                  "func": {
                                                                    "LocalVar": "M.is_struct_tuple"
                                                                  },
                                                                  "args": [
                                                                    {
                                                                      "LocalVar": "γ"
                                                                    },
                                                                    {
                                                                      "InternalString": "core::panicking::AssertKind::Match"
                                                                    }
                                                                  ],
                                                                  "kind": "Effectful"
                                                                }
                                                              },
                                                              "body": {
                                                                "Call": {
                                                                  "func": {
                                                                    "LocalVar": "M.alloc"
                                                                  },
                                                                  "args": [
                                                                    {
                                                                      "Call": {
                                                                        "func": {
                                                                          "LocalVar": "M.read"
                                                                        },
                                                                        "args": [
                                                                          {
                                                                            "Literal": {
                                                                              "String": "matches"
                                                                            }
                                                                          }
                                                                        ],
                                                                        "kind": "Effectful"
                                                                      }
                                                                    }
                                                                  ],
                                                                  "kind": "Effectful"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "is_for_match": true,
                                                          "is_internal": true
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              ],
                                              "kind": "Effectful"
                                            }
                                          },
                                          "body": {
                                            "Match": {
                                              "scrutinee": {
                                                "LocalVar": "args"
                                              },
                                              "arms": [
                                                {
                                                  "Lambda": {
                                                    "args": [
                                                      [
                                                        "γ",
                                                        null
                                                      ]
                                                    ],
                                                    "body": {
                                                      "Let": {
                                                        "name": "γ0_0",
                                                        "is_user": false,
                                                        "init": {
                                                          "Call": {
                                                            "func": {
                                                              "LocalVar": "M.SubPointer.get_struct_tuple_field"
                                                            },
                                                            "args": [
                                                              {
                                                                "LocalVar": "γ"
                                                              },
                                                              {
                                                                "InternalString": "core::option::Option::Some"
                                                              },
                                                              {
                                                                "InternalInteger": 0
                                                              }
                                                            ],
                                                            "kind": "Effectful"
                                                          }
                                                        },
                                                        "body": {
                                                          "Let": {
                                                            "name": "args",
                                                            "is_user": false,
                                                            "init": {
                                                              "Call": {
                                                                "func": {
                                                                  "LocalVar": "M.copy"
                                                                },
                                                                "args": [
                                                                  {
                                                                    "LocalVar": "γ0_0"
                                                                  }
                                                                ],
                                                                "kind": "Effectful"
                                                              }
                                                            },
                                                            "body": {
                                                              "Call": {
                                                                "func": {
                                                                  "LocalVar": "M.alloc"
                                                                },
                                                                "args": [
                                                                  {
                                                                    "Call": {
                                                                      "func": {
                                                                        "GetFunction": {
                                                                          "func": [
                                                                            "core",
                                                                            "panicking",
                                                                            "panic_fmt"
                                                                          ],
                                                                          "generic_tys": []
                                                                        }
                                                                      },
                                                                      "args": [
                                                                        {
                                                                          "Call": {
                                                                            "func": {
                                                                              "GetAssociatedFunction": {
                                                                                "ty": {
                                                                                  "type": "Application",
                                                                                  "func": {
                                                                                    "type": "Path",
                                                                                    "path": [
                                                                                      "core",
                                                                                      "fmt",
                                                                                      "Arguments"
                                                                                    ]
                                                                                  },
                                                                                  "consts": [],
                                                                                  "tys": []
                                                                                },
                                                                                "func": "new_v1",
                                                                                "generic_tys": []
                                                                              }
                                                                            },
                                                                            "args": [
                                                                              {
                                                                                "Call": {
                                                                                  "func": {
                                                                                    "LocalVar": "M.alloc"
                                                                                  },
                                                                                  "args": [
                                                                                    {
                                                                                      "Array": {
                                                                                        "elements": [
                                                                                          {
                                                                                            "Call": {
                                                                                              "func": {
                                                                                                "LocalVar": "M.read"
                                                                                              },
                                                                                              "args": [
                                                                                                {
                                                                                                  "Literal": {
                                                                                                    "String": "assertion `left "
                                                                                                  }
                                                                                                }
                                                                                              ],
                                                                                              "kind": "Effectful"
                                                                                            }
                                                                                          },
                                                                                          {
                                                                                            "Call": {
                                                                                              "func": {
                                                                                                "LocalVar": "M.read"
                                                                                              },
                                                                                              "args": [
                                                                                                {
                                                                                                  "Literal": {
                                                                                                    "String": " right` failed: "
                                                                                                  }
                                                                                                }
                                                                                              ],
                                                                                              "kind": "Effectful"
                                                                                            }
                                                                                          },
                                                                                          {
                                                                                            "Call": {
                                                                                              "func": {
                                                                                                "LocalVar": "M.read"
                                                                                              },
                                                                                              "args": [
                                                                                                {
                                                                                                  "Literal": {
                                                                                                    "String": "\n  left: "
                                                                                                  }
                                                                                                }
                                                                                              ],
                                                                                              "kind": "Effectful"
                                                                                            }
                                                                                          },
                                                                                          {
                                                                                            "Call": {
                                                                                              "func": {
                                                                                                "LocalVar": "M.read"
                                                                                              },
                                                                                              "args": [
                                                                                                {
                                                                                                  "Literal": {
                                                                                                    "String": "\n right: "
                                                                                                  }
                                                                                                }
                                                                                              ],
                                                                                              "kind": "Effectful"
                                                                                            }
                                                                                          }
                                                                                        ],
                                                                                        "is_internal": false
                                                                                      }
                                                                                    }
                                                                                  ],
                                                                                  "kind": "Effectful"
                                                                                }
                                                                              },
                                                                              {
                                                                                "Call": {
                                                                                  "func": {
                                                                                    "LocalVar": "M.alloc"
                                                                                  },
                                                                                  "args": [
                                                                                    {
                                                                                      "Array": {
                                                                                        "elements": [
                                                                                          {
                                                                                            "Call": {
                                                                                              "func": {
                                                                                                "GetAssociatedFunction": {
                                                                                                  "ty": {
                                                                                                    "type": "Application",
                                                                                                    "func": {
                                                                                                      "type": "Path",
                                                                                                      "path": [
                                                                                                        "core",
                                                                                                        "fmt",
                                                                                                        "rt",
                                                                                                        "Argument"
                                                                                                      ]
                                                                                                    },
                                                                                                    "consts": [],
                                                                                                    "tys": []
                                                                                                  },
                                                                                                  "func": "new_display",
                                                                                                  "generic_tys": [
                                                                                                    {
                                                                                                      "type": "Application",
                                                                                                      "func": {
                                                                                                        "type": "Path",
                                                                                                        "path": [
                                                                                                          "&"
                                                                                                        ]
                                                                                                      },
                                                                                                      "consts": [],
                                                                                                      "tys": [
                                                                                                        {
                                                                                                          "type": "Path",
                                                                                                          "path": [
                                                                                                            "str"
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              },
                                                                                              "args": [
                                                                                                {
                                                                                                  "LocalVar": "op"
                                                                                                }
                                                                                              ],
                                                                                              "kind": "Closure"
                                                                                            }
                                                                                          },
                                                                                          {
                                                                                            "Call": {
                                                                                              "func": {
                                                                                                "GetAssociatedFunction": {
                                                                                                  "ty": {
                                                                                                    "type": "Application",
                                                                                                    "func": {
                                                                                                      "type": "Path",
                                                                                                      "path": [
                                                                                                        "core",
                                                                                                        "fmt",
                                                                                                        "rt",
                                                                                                        "Argument"
                                                                                                      ]
                                                                                                    },
                                                                                                    "consts": [],
                                                                                                    "tys": []
                                                                                                  },
                                                                                                  "func": "new_display",
                                                                                                  "generic_tys": [
                                                                                                    {
                                                                                                      "type": "Application",
                                                                                                      "func": {
                                                                                                        "type": "Path",
                                                                                                        "path": [
                                                                                                          "core",
                                                                                                          "fmt",
                                                                                                          "Arguments"
                                                                                                        ]
                                                                                                      },
                                                                                                      "consts": [],
                                                                                                      "tys": []
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              },
                                                                                              "args": [
                                                                                                {
                                                                                                  "LocalVar": "args"
                                                                                                }
                                                                                              ],
                                                                                              "kind": "Closure"
                                                                                            }
                                                                                          },
                                                                                          {
                                                                                            "Call": {
                                                                                              "func": {
                                                                                                "GetAssociatedFunction": {
                                                                                                  "ty": {
                                                                                                    "type": "Application",
                                                                                                    "func": {
                                                                                                      "type": "Path",
                                                                                                      "path": [
                                                                                                        "core",
                                                                                                        "fmt",
                                                                                                        "rt",
                                                                                                        "Argument"
                                                                                                      ]
                                                                                                    },
                                                                                                    "consts": [],
                                                                                                    "tys": []
                                                                                                  },
                                                                                                  "func": "new_debug",
                                                                                                  "generic_tys": [
                                                                                                    {
                                                                                                      "type": "Application",
                                                                                                      "func": {
                                                                                                        "type": "Path",
                                                                                                        "path": [
                                                                                                          "&"
                                                                                                        ]
                                                                                                      },
                                                                                                      "consts": [],
                                                                                                      "tys": [
                                                                                                        {
                                                                                                          "type": "Dyn",
                                                                                                          "traits": [
                                                                                                            [
                                                                                                              "core",
                                                                                                              "fmt",
                                                                                                              "Debug",
                                                                                                              "Trait"
                                                                                                            ]
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              },
                                                                                              "args": [
                                                                                                {
                                                                                                  "LocalVar": "left"
                                                                                                }
                                                                                              ],
                                                                                              "kind": "Closure"
                                                                                            }
                                                                                          },
                                                                                          {
                                                                                            "Call": {
                                                                                              "func": {
                                                                                                "GetAssociatedFunction": {
                                                                                                  "ty": {
                                                                                                    "type": "Application",
                                                                                                    "func": {
                                                                                                      "type": "Path",
                                                                                                      "path": [
                                                                                                        "core",
                                                                                                        "fmt",
                                                                                                        "rt",
                                                                                                        "Argument"
                                                                                                      ]
                                                                                                    },
                                                                                                    "consts": [],
                                                                                                    "tys": []
                                                                                                  },
                                                                                                  "func": "new_debug",
                                                                                                  "generic_tys": [
                                                                                                    {
                                                                                                      "type": "Application",
                                                                                                      "func": {
                                                                                                        "type": "Path",
                                                                                                        "path": [
                                                                                                          "&"
                                                                                                        ]
                                                                                                      },
                                                                                                      "consts": [],
                                                                                                      "tys": [
                                                                                                        {
                                                                                                          "type": "Dyn",
                                                                                                          "traits": [
                                                                                                            [
                                                                                                              "core",
                                                                                                              "fmt",
                                                                                                              "Debug",
                                                                                                              "Trait"
                                                                                                            ]
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              },
                                                                                              "args": [
                                                                                                {
                                                                                                  "LocalVar": "right"
                                                                                                }
                                                                                              ],
                                                                                              "kind": "Closure"
                                                                                            }
                                                                                          }
                                                                                        ],
                                                                                        "is_internal": false
                                                                                      }
                                                                                    }
                                                                                  ],
                                                                                  "kind": "Effectful"
                                                                                }
                                                                              }
                                                                            ],
                                                                            "kind": "Closure"
                                                                          }
                                                                        }
                                                                      ],
                                                                      "kind": "Closure"
                                                                    }
                                                                  }
                                                                ],
                                                                "kind": "Effectful"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "is_for_match": true,
                                                    "is_internal": true
                                                  }
                                                },
                                                {
                                                  "Lambda": {
                                                    "args": [
                                                      [
                                                        "γ",
                                                        null
                                                      ]
                                                    ],
                                                    "body": {
                                                      "Let": {
                                                        "name": null,
                                                        "is_user": false,
                                                        "init": {
                                                          "Call": {
                                                            "func": {
                                                              "LocalVar": "M.is_struct_tuple"
                                                            },
                                                            "args": [
                                                              {
                                                                "LocalVar": "γ"
                                                              },
                                                              {
                                                                "InternalString": "core::option::Option::None"
                                                              }
                                                            ],
                                                            "kind": "Effectful"
                                                          }
                                                        },
                                                        "body": {
                                                          "Call": {
                                                            "func": {
                                                              "LocalVar": "M.alloc"
                                                            },
                                                            "args": [
                                                              {
                                                                "Call": {
                                                                  "func": {
                                                                    "GetFunction": {
                                                                      "func": [
                                                                        "core",
                                                                        "panicking",
                                                                        "panic_fmt"
                                                                      ],
                                                                      "generic_tys": []
                                                                    }
                                                                  },
                                                                  "args": [
                                                                    {
                                                                      "Call": {
                                                                        "func": {
                                                                          "GetAssociatedFunction": {
                                                                            "ty": {
                                                                              "type": "Application",
                                                                              "func": {
                                                                                "type": "Path",
                                                                                "path": [
                                                                                  "core",
                                                                                  "fmt",
                                                                                  "Arguments"
                                                                                ]
                                                                              },
                                                                              "consts": [],
                                                                              "tys": []
                                                                            },
                                                                            "func": "new_v1",
                                                                            "generic_tys": []
                                                                          }
                                                                        },
                                                                        "args": [
                                                                          {
                                                                            "Call": {
                                                                              "func": {
                                                                                "LocalVar": "M.alloc"
                                                                              },
                                                                              "args": [
                                                                                {
                                                                                  "Array": {
                                                                                    "elements": [
                                                                                      {
                                                                                        "Call": {
                                                                                          "func": {
                                                                                            "LocalVar": "M.read"
                                                                                          },
                                                                                          "args": [
                                                                                            {
                                                                                              "Literal": {
                                                                                                "String": "assertion `left "
                                                                                              }
                                                                                            }
                                                                                          ],
                                                                                          "kind": "Effectful"
                                                                                        }
                                                                                      },
                                                                                      {
                                                                                        "Call": {
                                                                                          "func": {
                                                                                            "LocalVar": "M.read"
                                                                                          },
                                                                                          "args": [
                                                                                            {
                                                                                              "Literal": {
                                                                                                "String": " right` failed\n  left: "
                                                                                              }
                                                                                            }
                                                                                          ],
                                                                                          "kind": "Effectful"
                                                                                        }
                                                                                      },
                                                                                      {
                                                                                        "Call": {
                                                                                          "func": {
                                                                                            "LocalVar": "M.read"
                                                                                          },
                                                                                          "args": [
                                                                                            {
                                                                                              "Literal": {
                                                                                                "String": "\n right: "
                                                                                              }
                                                                                            }
                                                                                          ],
                                                                                          "kind": "Effectful"
                                                                                        }
                                                                                      }
                                                                                    ],
                                                                                    "is_internal": false
                                                                                  }
                                                                                }
                                                                              ],
                                                                              "kind": "Effectful"
                                                                            }
                                                                          },
                                                                          {
                                                                            "Call": {
                                                                              "func": {
                                                                                "LocalVar": "M.alloc"
                                                                              },
                                                                              "args": [
                                                                                {
                                                                                  "Array": {
                                                                                    "elements": [
                                                                                      {
                                                                                        "Call": {
                                                                                          "func": {
                                                                                            "GetAssociatedFunction": {
                                                                                              "ty": {
                                                                                                "type": "Application",
                                                                                                "func": {
                                                                                                  "type": "Path",
                                                                                                  "path": [
                                                                                                    "core",
                                                                                                    "fmt",
                                                                                                    "rt",
                                                                                                    "Argument"
                                                                                                  ]
                                                                                                },
                                                                                                "consts": [],
                                                                                                "tys": []
                                                                                              },
                                                                                              "func": "new_display",
                                                                                              "generic_tys": [
                                                                                                {
                                                                                                  "type": "Application",
                                                                                                  "func": {
                                                                                                    "type": "Path",
                                                                                                    "path": [
                                                                                                      "&"
                                                                                                    ]
                                                                                                  },
                                                                                                  "consts": [],
                                                                                                  "tys": [
                                                                                                    {
                                                                                                      "type": "Path",
                                                                                                      "path": [
                                                                                                        "str"
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          },
                                                                                          "args": [
                                                                                            {
                                                                                              "LocalVar": "op"
                                                                                            }
                                                                                          ],
                                                                                          "kind": "Closure"
                                                                                        }
                                                                                      },
                                                                                      {
                                                                                        "Call": {
                                                                                          "func": {
                                                                                            "GetAssociatedFunction": {
                                                                                              "ty": {
                                                                                                "type": "Application",
                                                                                                "func": {
                                                                                                  "type": "Path",
                                                                                                  "path": [
                                                                                                    "core",
                                                                                                    "fmt",
                                                                                                    "rt",
                                                                                                    "Argument"
                                                                                                  ]
                                                                                                },
                                                                                                "consts": [],
                                                                                                "tys": []
                                                                                              },
                                                                                              "func": "new_debug",
                                                                                              "generic_tys": [
                                                                                                {
                                                                                                  "type": "Application",
                                                                                                  "func": {
                                                                                                    "type": "Path",
                                                                                                    "path": [
                                                                                                      "&"
                                                                                                    ]
                                                                                                  },
                                                                                                  "consts": [],
                                                                                                  "tys": [
                                                                                                    {
                                                                                                      "type": "Dyn",
                                                                                                      "traits": [
                                                                                                        [
                                                                                                          "core",
                                                                                                          "fmt",
                                                                                                          "Debug",
                                                                                                          "Trait"
                                                                                                        ]
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          },
                                                                                          "args": [
                                                                                            {
                                                                                              "LocalVar": "left"
                                                                                            }
                                                                                          ],
                                                                                          "kind": "Closure"
                                                                                        }
                                                                                      },
                                                                                      {
                                                                                        "Call": {
                                                                                          "func": {
                                                                                            "GetAssociatedFunction": {
                                                                                              "ty": {
                                                                                                "type": "Application",
                                                                                                "func": {
                                                                                                  "type": "Path",
                                                                                                  "path": [
                                                                                                    "core",
                                                                                                    "fmt",
                                                                                                    "rt",
                                                                                                    "Argument"
                                                                                                  ]
                                                                                                },
                                                                                                "consts": [],
                                                                                                "tys": []
                                                                                              },
                                                                                              "func": "new_debug",
                                                                                              "generic_tys": [
                                                                                                {
                                                                                                  "type": "Application",
                                                                                                  "func": {
                                                                                                    "type": "Path",
                                                                                                    "path": [
                                                                                                      "&"
                                                                                                    ]
                                                                                                  },
                                                                                                  "consts": [],
                                                                                                  "tys": [
                                                                                                    {
                                                                                                      "type": "Dyn",
                                                                                                      "traits": [
                                                                                                        [
                                                                                                          "core",
                                                                                                          "fmt",
                                                                                                          "Debug",
                                                                                                          "Trait"
                                                                                                        ]
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          },
                                                                                          "args": [
                                                                                            {
                                                                                              "LocalVar": "right"
                                                                                            }
                                                                                          ],
                                                                                          "kind": "Closure"
                                                                                        }
                                                                                      }
                                                                                    ],
                                                                                    "is_internal": false
                                                                                  }
                                                                                }
                                                                              ],
                                                                              "kind": "Effectful"
                                                                            }
                                                                          }
                                                                        ],
                                                                        "kind": "Closure"
                                                                      }
                                                                    }
                                                                  ],
                                                                  "kind": "Closure"
                                                                }
                                                              }
                                                            ],
                                                            "kind": "Effectful"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "is_for_match": true,
                                                    "is_internal": true
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ],
                                    "kind": "Effectful"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      ]
    }
  }
]