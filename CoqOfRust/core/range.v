(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module range.
  (* StructRecord
    {
      name := "Range";
      const_params := [];
      ty_params := [ "Idx" ];
      fields := [ ("start", Idx); ("end_", Idx) ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_Idx_for_core_range_Range_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::Range") [] [ Idx ].
    
    (* Clone *)
    Definition clone (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "core::range::Range"
            [
              ("start",
                M.call_closure (|
                  Idx,
                  M.get_trait_method (| "core::clone::Clone", Idx, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::range::Range",
                            "start"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("end_",
                M.call_closure (|
                  Idx,
                  M.get_trait_method (| "core::clone::Clone", Idx, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::range::Range",
                            "end"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [ ("clone", InstanceField.Method (clone Idx)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_Idx_for_core_range_Range_Idx.
  
  Module Impl_core_marker_Copy_where_core_marker_Copy_Idx_for_core_range_Range_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::Range") [] [ Idx ].
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [].
  End Impl_core_marker_Copy_where_core_marker_Copy_Idx_for_core_range_Range_Idx.
  
  Module Impl_core_default_Default_where_core_default_Default_Idx_for_core_range_Range_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::Range") [] [ Idx ].
    
    (* Default *)
    Definition default (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "core::range::Range"
            [
              ("start",
                M.call_closure (|
                  Idx,
                  M.get_trait_method (| "core::default::Default", Idx, [], [], "default", [], [] |),
                  []
                |));
              ("end_",
                M.call_closure (|
                  Idx,
                  M.get_trait_method (| "core::default::Default", Idx, [], [], "default", [], [] |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [ ("default", InstanceField.Method (default Idx)) ].
  End Impl_core_default_Default_where_core_default_Default_Idx_for_core_range_Range_Idx.
  
  Module Impl_core_marker_StructuralPartialEq_for_core_range_Range_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::Range") [] [ Idx ].
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_core_range_Range_Idx.
  
  Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_Idx_for_core_range_Range_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::Range") [] [ Idx ].
    
    (* PartialEq *)
    Definition eq (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (| "core::cmp::PartialEq", Idx, [], [ Idx ], "eq", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "core::range::Range",
                    "start"
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| other |) |),
                    "core::range::Range",
                    "start"
                  |)
                |)
              ]
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (| "core::cmp::PartialEq", Idx, [], [ Idx ], "eq", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::range::Range",
                      "end"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "core::range::Range",
                      "end"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [ ("eq", InstanceField.Method (eq Idx)) ].
  End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_Idx_for_core_range_Range_Idx.
  
  Module Impl_core_cmp_Eq_where_core_cmp_Eq_Idx_for_core_range_Range_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::Range") [] [ Idx ].
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (Idx : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq Idx)) ].
  End Impl_core_cmp_Eq_where_core_cmp_Eq_Idx_for_core_range_Range_Idx.
  
  Module Impl_core_hash_Hash_where_core_hash_Hash_Idx_for_core_range_Range_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::Range") [] [ Idx ].
    
    (* Hash *)
    Definition hash (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (| "core::hash::Hash", Idx, [], [], "hash", [], [ __H ] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::range::Range",
                            "start"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (| "core::hash::Hash", Idx, [], [], "hash", [], [ __H ] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "core::range::Range",
                          "end"
                        |)
                      |)
                    |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::hash::Hash"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [ ("hash", InstanceField.Method (hash Idx)) ].
  End Impl_core_hash_Hash_where_core_hash_Hash_Idx_for_core_range_Range_Idx.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_Idx_for_core_range_Range_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::Range") [] [ Idx ].
    
    (*
        fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
            self.start.fmt(fmt)?;
            write!(fmt, "..")?;
            self.end.fmt(fmt)?;
            Ok(())
        }
    *)
    Definition fmt (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self; fmt ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let fmt := M.alloc (| fmt |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                            Ty.tuple []
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                            M.get_trait_method (| "core::fmt::Debug", Idx, [], [], "fmt", [], [] |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "core::range::Range",
                                  "start"
                                |)
                              |);
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| fmt |) |) |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "core::fmt::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                            Ty.tuple []
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                            M.get_associated_function (|
                              Ty.path "core::fmt::Formatter",
                              "write_fmt",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| fmt |) |) |);
                              M.call_closure (|
                                Ty.path "core::fmt::Arguments",
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_const",
                                  [ Value.Integer IntegerKind.Usize 1 ],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (| Value.Array [ M.read (| Value.String ".." |) ] |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "core::fmt::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                            Ty.tuple []
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                            M.get_trait_method (| "core::fmt::Debug", Idx, [], [], "fmt", [], [] |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "core::range::Range",
                                  "end"
                                |)
                              |);
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| fmt |) |) |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "core::fmt::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt Idx)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_Idx_for_core_range_Range_Idx.
  
  Module Impl_core_range_Range_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::Range") [] [ Idx ].
    
    (*
        pub fn iter(&self) -> IterRange<Idx> {
            self.clone().into_iter()
        }
    *)
    Definition iter (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::range::iter::IterRange") [] [ Idx ],
            M.get_trait_method (|
              "core::iter::traits::collect::IntoIterator",
              Ty.apply (Ty.path "core::range::Range") [] [ Idx ],
              [],
              [],
              "into_iter",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::range::Range") [] [ Idx ],
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply (Ty.path "core::range::Range") [] [ Idx ],
                  [],
                  [],
                  "clone",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_iter :
      forall (Idx : Ty.t),
      M.IsAssociatedFunction (Self Idx) "iter" (iter Idx).
    Smpl Add apply AssociatedFunction_iter : is_associated.
    (*
        pub fn contains<U>(&self, item: &U) -> bool
        where
            Idx: PartialOrd<U>,
            U: ?Sized + PartialOrd<Idx>,
        {
            <Self as RangeBounds<Idx>>::contains(self, item)
        }
    *)
    Definition contains (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [ U ], [ self; item ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let item := M.alloc (| item |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (|
              "core::ops::range::RangeBounds",
              Ty.apply (Ty.path "core::range::Range") [] [ Idx ],
              [],
              [ Idx ],
              "contains",
              [],
              [ U ]
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| item |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_contains :
      forall (Idx : Ty.t),
      M.IsAssociatedFunction (Self Idx) "contains" (contains Idx).
    Smpl Add apply AssociatedFunction_contains : is_associated.
    
    (*
        pub fn is_empty(&self) -> bool {
            !(self.start < self.end)
        }
    *)
    Definition is_empty (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          UnOp.not (|
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (| "core::cmp::PartialOrd", Idx, [], [ Idx ], "lt", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "core::range::Range",
                    "start"
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "core::range::Range",
                    "end"
                  |)
                |)
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_is_empty :
      forall (Idx : Ty.t),
      M.IsAssociatedFunction (Self Idx) "is_empty" (is_empty Idx).
    Smpl Add apply AssociatedFunction_is_empty : is_associated.
  End Impl_core_range_Range_Idx.
  
  
  Module Impl_core_ops_range_RangeBounds_T_for_core_range_Range_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::Range") [] [ T ].
    
    (*
        fn start_bound(&self) -> Bound<&T> {
            Included(&self.start)
        }
    *)
    Definition start_bound (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::ops::range::Bound::Included"
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::range::Range",
                      "start"
                    |)
                  |)
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn end_bound(&self) -> Bound<&T> {
            Excluded(&self.end)
        }
    *)
    Definition end_bound (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::ops::range::Bound::Excluded"
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::range::Range",
                      "end"
                    |)
                  |)
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::range::RangeBounds"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T)
        (* Instance *)
        [
          ("start_bound", InstanceField.Method (start_bound T));
          ("end_bound", InstanceField.Method (end_bound T))
        ].
  End Impl_core_ops_range_RangeBounds_T_for_core_range_Range_T.
  
  Module Impl_core_ops_range_RangeBounds_T_for_core_range_Range_ref__T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "core::range::Range") [] [ Ty.apply (Ty.path "&") [] [ T ] ].
    
    (*
        fn start_bound(&self) -> Bound<&T> {
            Included(self.start)
        }
    *)
    Definition start_bound (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::ops::range::Bound::Included"
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::range::Range",
                      "start"
                    |)
                  |)
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn end_bound(&self) -> Bound<&T> {
            Excluded(self.end)
        }
    *)
    Definition end_bound (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::ops::range::Bound::Excluded"
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::range::Range",
                      "end"
                    |)
                  |)
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::range::RangeBounds"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T)
        (* Instance *)
        [
          ("start_bound", InstanceField.Method (start_bound T));
          ("end_bound", InstanceField.Method (end_bound T))
        ].
  End Impl_core_ops_range_RangeBounds_T_for_core_range_Range_ref__T.
  
  Module Impl_core_convert_From_core_range_Range_T_for_core_ops_range_Range_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::ops::range::Range") [] [ T ].
    
    (*
        fn from(value: Range<T>) -> Self {
            Self { start: value.start, end: value.end }
        }
    *)
    Definition from (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructRecord
            "core::ops::range::Range"
            [
              ("start",
                M.read (|
                  M.SubPointer.get_struct_record_field (| value, "core::range::Range", "start" |)
                |));
              ("end_",
                M.read (|
                  M.SubPointer.get_struct_record_field (| value, "core::range::Range", "end" |)
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "core::range::Range") [] [ T ] ]
        (Self T)
        (* Instance *) [ ("from", InstanceField.Method (from T)) ].
  End Impl_core_convert_From_core_range_Range_T_for_core_ops_range_Range_T.
  
  Module Impl_core_convert_From_core_ops_range_Range_T_for_core_range_Range_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::Range") [] [ T ].
    
    (*
        fn from(value: legacy::Range<T>) -> Self {
            Self { start: value.start, end: value.end }
        }
    *)
    Definition from (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructRecord
            "core::range::Range"
            [
              ("start",
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    value,
                    "core::ops::range::Range",
                    "start"
                  |)
                |));
              ("end_",
                M.read (|
                  M.SubPointer.get_struct_record_field (| value, "core::ops::range::Range", "end" |)
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "core::ops::range::Range") [] [ T ] ]
        (Self T)
        (* Instance *) [ ("from", InstanceField.Method (from T)) ].
  End Impl_core_convert_From_core_ops_range_Range_T_for_core_range_Range_T.
  
  (* StructRecord
    {
      name := "RangeInclusive";
      const_params := [];
      ty_params := [ "Idx" ];
      fields := [ ("start", Idx); ("end_", Idx) ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_Idx_for_core_range_RangeInclusive_Idx.
    Definition Self (Idx : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "core::range::RangeInclusive") [] [ Idx ].
    
    (* Clone *)
    Definition clone (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "core::range::RangeInclusive"
            [
              ("start",
                M.call_closure (|
                  Idx,
                  M.get_trait_method (| "core::clone::Clone", Idx, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::range::RangeInclusive",
                            "start"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("end_",
                M.call_closure (|
                  Idx,
                  M.get_trait_method (| "core::clone::Clone", Idx, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::range::RangeInclusive",
                            "end"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [ ("clone", InstanceField.Method (clone Idx)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_Idx_for_core_range_RangeInclusive_Idx.
  
  Module Impl_core_marker_Copy_where_core_marker_Copy_Idx_for_core_range_RangeInclusive_Idx.
    Definition Self (Idx : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "core::range::RangeInclusive") [] [ Idx ].
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [].
  End Impl_core_marker_Copy_where_core_marker_Copy_Idx_for_core_range_RangeInclusive_Idx.
  
  Module Impl_core_marker_StructuralPartialEq_for_core_range_RangeInclusive_Idx.
    Definition Self (Idx : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "core::range::RangeInclusive") [] [ Idx ].
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_core_range_RangeInclusive_Idx.
  
  Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_Idx_for_core_range_RangeInclusive_Idx.
    Definition Self (Idx : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "core::range::RangeInclusive") [] [ Idx ].
    
    (* PartialEq *)
    Definition eq (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (| "core::cmp::PartialEq", Idx, [], [ Idx ], "eq", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "core::range::RangeInclusive",
                    "start"
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| other |) |),
                    "core::range::RangeInclusive",
                    "start"
                  |)
                |)
              ]
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (| "core::cmp::PartialEq", Idx, [], [ Idx ], "eq", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::range::RangeInclusive",
                      "end"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "core::range::RangeInclusive",
                      "end"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [ ("eq", InstanceField.Method (eq Idx)) ].
  End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_Idx_for_core_range_RangeInclusive_Idx.
  
  Module Impl_core_cmp_Eq_where_core_cmp_Eq_Idx_for_core_range_RangeInclusive_Idx.
    Definition Self (Idx : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "core::range::RangeInclusive") [] [ Idx ].
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (Idx : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq Idx)) ].
  End Impl_core_cmp_Eq_where_core_cmp_Eq_Idx_for_core_range_RangeInclusive_Idx.
  
  Module Impl_core_hash_Hash_where_core_hash_Hash_Idx_for_core_range_RangeInclusive_Idx.
    Definition Self (Idx : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "core::range::RangeInclusive") [] [ Idx ].
    
    (* Hash *)
    Definition hash (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (| "core::hash::Hash", Idx, [], [], "hash", [], [ __H ] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::range::RangeInclusive",
                            "start"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (| "core::hash::Hash", Idx, [], [], "hash", [], [ __H ] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "core::range::RangeInclusive",
                          "end"
                        |)
                      |)
                    |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::hash::Hash"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [ ("hash", InstanceField.Method (hash Idx)) ].
  End Impl_core_hash_Hash_where_core_hash_Hash_Idx_for_core_range_RangeInclusive_Idx.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_Idx_for_core_range_RangeInclusive_Idx.
    Definition Self (Idx : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "core::range::RangeInclusive") [] [ Idx ].
    
    (*
        fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
            self.start.fmt(fmt)?;
            write!(fmt, "..=")?;
            self.end.fmt(fmt)?;
            Ok(())
        }
    *)
    Definition fmt (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self; fmt ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let fmt := M.alloc (| fmt |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                            Ty.tuple []
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                            M.get_trait_method (| "core::fmt::Debug", Idx, [], [], "fmt", [], [] |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "core::range::RangeInclusive",
                                  "start"
                                |)
                              |);
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| fmt |) |) |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "core::fmt::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                            Ty.tuple []
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                            M.get_associated_function (|
                              Ty.path "core::fmt::Formatter",
                              "write_fmt",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| fmt |) |) |);
                              M.call_closure (|
                                Ty.path "core::fmt::Arguments",
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_const",
                                  [ Value.Integer IntegerKind.Usize 1 ],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Value.Array [ M.read (| Value.String "..=" |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "core::fmt::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                            Ty.tuple []
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                            M.get_trait_method (| "core::fmt::Debug", Idx, [], [], "fmt", [], [] |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "core::range::RangeInclusive",
                                  "end"
                                |)
                              |);
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| fmt |) |) |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "core::fmt::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt Idx)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_Idx_for_core_range_RangeInclusive_Idx.
  
  Module Impl_core_range_RangeInclusive_Idx.
    Definition Self (Idx : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "core::range::RangeInclusive") [] [ Idx ].
    
    (*
        pub fn contains<U>(&self, item: &U) -> bool
        where
            Idx: PartialOrd<U>,
            U: ?Sized + PartialOrd<Idx>,
        {
            <Self as RangeBounds<Idx>>::contains(self, item)
        }
    *)
    Definition contains (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [ U ], [ self; item ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let item := M.alloc (| item |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (|
              "core::ops::range::RangeBounds",
              Ty.apply (Ty.path "core::range::RangeInclusive") [] [ Idx ],
              [],
              [ Idx ],
              "contains",
              [],
              [ U ]
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| item |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_contains :
      forall (Idx : Ty.t),
      M.IsAssociatedFunction (Self Idx) "contains" (contains Idx).
    Smpl Add apply AssociatedFunction_contains : is_associated.
    
    (*
        pub fn is_empty(&self) -> bool {
            !(self.start <= self.end)
        }
    *)
    Definition is_empty (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          UnOp.not (|
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (| "core::cmp::PartialOrd", Idx, [], [ Idx ], "le", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "core::range::RangeInclusive",
                    "start"
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "core::range::RangeInclusive",
                    "end"
                  |)
                |)
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_is_empty :
      forall (Idx : Ty.t),
      M.IsAssociatedFunction (Self Idx) "is_empty" (is_empty Idx).
    Smpl Add apply AssociatedFunction_is_empty : is_associated.
    (*
        pub fn iter(&self) -> IterRangeInclusive<Idx> {
            self.clone().into_iter()
        }
    *)
    Definition iter (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::range::iter::IterRangeInclusive") [] [ Idx ],
            M.get_trait_method (|
              "core::iter::traits::collect::IntoIterator",
              Ty.apply (Ty.path "core::range::RangeInclusive") [] [ Idx ],
              [],
              [],
              "into_iter",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::range::RangeInclusive") [] [ Idx ],
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply (Ty.path "core::range::RangeInclusive") [] [ Idx ],
                  [],
                  [],
                  "clone",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_iter :
      forall (Idx : Ty.t),
      M.IsAssociatedFunction (Self Idx) "iter" (iter Idx).
    Smpl Add apply AssociatedFunction_iter : is_associated.
  End Impl_core_range_RangeInclusive_Idx.
  
  
  Module Impl_core_range_RangeInclusive_usize.
    Definition Self : Ty.t :=
      Ty.apply (Ty.path "core::range::RangeInclusive") [] [ Ty.path "usize" ].
    
    (*
        pub(crate) const fn into_slice_range(self) -> Range<usize> {
            Range { start: self.start, end: self.end + 1 }
        }
    *)
    Definition into_slice_range (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "core::range::Range"
            [
              ("start",
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "core::range::RangeInclusive",
                    "start"
                  |)
                |));
              ("end_",
                BinOp.Wrap.add (|
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "core::range::RangeInclusive",
                      "end"
                    |)
                  |),
                  Value.Integer IntegerKind.Usize 1
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_into_slice_range :
      M.IsAssociatedFunction Self "into_slice_range" into_slice_range.
    Smpl Add apply AssociatedFunction_into_slice_range : is_associated.
  End Impl_core_range_RangeInclusive_usize.
  
  Module Impl_core_ops_range_RangeBounds_T_for_core_range_RangeInclusive_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::RangeInclusive") [] [ T ].
    
    (*
        fn start_bound(&self) -> Bound<&T> {
            Included(&self.start)
        }
    *)
    Definition start_bound (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::ops::range::Bound::Included"
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::range::RangeInclusive",
                      "start"
                    |)
                  |)
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn end_bound(&self) -> Bound<&T> {
            Included(&self.end)
        }
    *)
    Definition end_bound (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::ops::range::Bound::Included"
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::range::RangeInclusive",
                      "end"
                    |)
                  |)
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::range::RangeBounds"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T)
        (* Instance *)
        [
          ("start_bound", InstanceField.Method (start_bound T));
          ("end_bound", InstanceField.Method (end_bound T))
        ].
  End Impl_core_ops_range_RangeBounds_T_for_core_range_RangeInclusive_T.
  
  Module Impl_core_ops_range_RangeBounds_T_for_core_range_RangeInclusive_ref__T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "core::range::RangeInclusive") [] [ Ty.apply (Ty.path "&") [] [ T ] ].
    
    (*
        fn start_bound(&self) -> Bound<&T> {
            Included(self.start)
        }
    *)
    Definition start_bound (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::ops::range::Bound::Included"
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::range::RangeInclusive",
                      "start"
                    |)
                  |)
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn end_bound(&self) -> Bound<&T> {
            Included(self.end)
        }
    *)
    Definition end_bound (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::ops::range::Bound::Included"
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::range::RangeInclusive",
                      "end"
                    |)
                  |)
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::range::RangeBounds"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T)
        (* Instance *)
        [
          ("start_bound", InstanceField.Method (start_bound T));
          ("end_bound", InstanceField.Method (end_bound T))
        ].
  End Impl_core_ops_range_RangeBounds_T_for_core_range_RangeInclusive_ref__T.
  
  Module Impl_core_convert_From_core_range_RangeInclusive_T_for_core_ops_range_RangeInclusive_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ T ].
    
    (*
        fn from(value: RangeInclusive<T>) -> Self {
            Self::new(value.start, value.end)
        }
    *)
    Definition from (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ T ],
            M.get_associated_function (|
              Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ T ],
              "new",
              [],
              []
            |),
            [
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  value,
                  "core::range::RangeInclusive",
                  "start"
                |)
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  value,
                  "core::range::RangeInclusive",
                  "end"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "core::range::RangeInclusive") [] [ T ] ]
        (Self T)
        (* Instance *) [ ("from", InstanceField.Method (from T)) ].
  End Impl_core_convert_From_core_range_RangeInclusive_T_for_core_ops_range_RangeInclusive_T.
  
  Module Impl_core_convert_From_core_ops_range_RangeInclusive_T_for_core_range_RangeInclusive_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::RangeInclusive") [] [ T ].
    
    (*
        fn from(value: legacy::RangeInclusive<T>) -> Self {
            assert!(
                !value.exhausted,
                "attempted to convert from an exhausted `legacy::RangeInclusive` (unspecified behavior)"
            );
    
            let (start, end) = value.into_inner();
            RangeInclusive { start, end }
        }
    *)
    Definition from (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              UnOp.not (|
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    value,
                                    "core::ops::range::RangeInclusive",
                                    "exhausted"
                                  |)
                                |)
                              |)
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic_fmt", [], [] |),
                            [
                              M.call_closure (|
                                Ty.path "core::fmt::Arguments",
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_const",
                                  [ Value.Integer IntegerKind.Usize 1 ],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Value.Array
                                            [
                                              M.read (|
                                                Value.String
                                                  "attempted to convert from an exhausted `legacy::RangeInclusive` (unspecified behavior)"
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.match_operator (|
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ T; T ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ T ],
                    "into_inner",
                    [],
                    []
                  |),
                  [ M.read (| value |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let start := M.copy (| γ0_0 |) in
                    let end_ := M.copy (| γ0_1 |) in
                    M.alloc (|
                      Value.StructRecord
                        "core::range::RangeInclusive"
                        [ ("start", M.read (| start |)); ("end_", M.read (| end_ |)) ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ T ] ]
        (Self T)
        (* Instance *) [ ("from", InstanceField.Method (from T)) ].
  End Impl_core_convert_From_core_ops_range_RangeInclusive_T_for_core_range_RangeInclusive_T.
  
  (* StructRecord
    {
      name := "RangeFrom";
      const_params := [];
      ty_params := [ "Idx" ];
      fields := [ ("start", Idx) ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_Idx_for_core_range_RangeFrom_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::RangeFrom") [] [ Idx ].
    
    (* Clone *)
    Definition clone (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "core::range::RangeFrom"
            [
              ("start",
                M.call_closure (|
                  Idx,
                  M.get_trait_method (| "core::clone::Clone", Idx, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "core::range::RangeFrom",
                            "start"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [ ("clone", InstanceField.Method (clone Idx)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_Idx_for_core_range_RangeFrom_Idx.
  
  Module Impl_core_marker_Copy_where_core_marker_Copy_Idx_for_core_range_RangeFrom_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::RangeFrom") [] [ Idx ].
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [].
  End Impl_core_marker_Copy_where_core_marker_Copy_Idx_for_core_range_RangeFrom_Idx.
  
  Module Impl_core_marker_StructuralPartialEq_for_core_range_RangeFrom_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::RangeFrom") [] [ Idx ].
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_core_range_RangeFrom_Idx.
  
  Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_Idx_for_core_range_RangeFrom_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::RangeFrom") [] [ Idx ].
    
    (* PartialEq *)
    Definition eq (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (| "core::cmp::PartialEq", Idx, [], [ Idx ], "eq", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "core::range::RangeFrom",
                  "start"
                |)
              |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| other |) |),
                  "core::range::RangeFrom",
                  "start"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [ ("eq", InstanceField.Method (eq Idx)) ].
  End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_Idx_for_core_range_RangeFrom_Idx.
  
  Module Impl_core_cmp_Eq_where_core_cmp_Eq_Idx_for_core_range_RangeFrom_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::RangeFrom") [] [ Idx ].
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (Idx : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq Idx)) ].
  End Impl_core_cmp_Eq_where_core_cmp_Eq_Idx_for_core_range_RangeFrom_Idx.
  
  Module Impl_core_hash_Hash_where_core_hash_Hash_Idx_for_core_range_RangeFrom_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::RangeFrom") [] [ Idx ].
    
    (* Hash *)
    Definition hash (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.call_closure (|
            Ty.tuple [],
            M.get_trait_method (| "core::hash::Hash", Idx, [], [], "hash", [], [ __H ] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::range::RangeFrom",
                      "start"
                    |)
                  |)
                |)
              |);
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::hash::Hash"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [ ("hash", InstanceField.Method (hash Idx)) ].
  End Impl_core_hash_Hash_where_core_hash_Hash_Idx_for_core_range_RangeFrom_Idx.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_Idx_for_core_range_RangeFrom_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::RangeFrom") [] [ Idx ].
    
    (*
        fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
            self.start.fmt(fmt)?;
            write!(fmt, "..")?;
            Ok(())
        }
    *)
    Definition fmt (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self; fmt ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let fmt := M.alloc (| fmt |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                            Ty.tuple []
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                            M.get_trait_method (| "core::fmt::Debug", Idx, [], [], "fmt", [], [] |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "core::range::RangeFrom",
                                  "start"
                                |)
                              |);
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| fmt |) |) |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "core::fmt::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                            Ty.tuple []
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                            M.get_associated_function (|
                              Ty.path "core::fmt::Formatter",
                              "write_fmt",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| fmt |) |) |);
                              M.call_closure (|
                                Ty.path "core::fmt::Arguments",
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_const",
                                  [ Value.Integer IntegerKind.Usize 1 ],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (| Value.Array [ M.read (| Value.String ".." |) ] |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "core::fmt::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Idx : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Idx)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt Idx)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_Idx_for_core_range_RangeFrom_Idx.
  
  Module Impl_core_range_RangeFrom_Idx.
    Definition Self (Idx : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::RangeFrom") [] [ Idx ].
    
    (*
        pub fn iter(&self) -> IterRangeFrom<Idx> {
            self.clone().into_iter()
        }
    *)
    Definition iter (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::range::iter::IterRangeFrom") [] [ Idx ],
            M.get_trait_method (|
              "core::iter::traits::collect::IntoIterator",
              Ty.apply (Ty.path "core::range::RangeFrom") [] [ Idx ],
              [],
              [],
              "into_iter",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::range::RangeFrom") [] [ Idx ],
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply (Ty.path "core::range::RangeFrom") [] [ Idx ],
                  [],
                  [],
                  "clone",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_iter :
      forall (Idx : Ty.t),
      M.IsAssociatedFunction (Self Idx) "iter" (iter Idx).
    Smpl Add apply AssociatedFunction_iter : is_associated.
    (*
        pub fn contains<U>(&self, item: &U) -> bool
        where
            Idx: PartialOrd<U>,
            U: ?Sized + PartialOrd<Idx>,
        {
            <Self as RangeBounds<Idx>>::contains(self, item)
        }
    *)
    Definition contains (Idx : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Idx in
      match ε, τ, α with
      | [], [ U ], [ self; item ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let item := M.alloc (| item |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (|
              "core::ops::range::RangeBounds",
              Ty.apply (Ty.path "core::range::RangeFrom") [] [ Idx ],
              [],
              [ Idx ],
              "contains",
              [],
              [ U ]
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| item |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_contains :
      forall (Idx : Ty.t),
      M.IsAssociatedFunction (Self Idx) "contains" (contains Idx).
    Smpl Add apply AssociatedFunction_contains : is_associated.
  End Impl_core_range_RangeFrom_Idx.
  
  
  Module Impl_core_ops_range_RangeBounds_T_for_core_range_RangeFrom_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::RangeFrom") [] [ T ].
    
    (*
        fn start_bound(&self) -> Bound<&T> {
            Included(&self.start)
        }
    *)
    Definition start_bound (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::ops::range::Bound::Included"
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::range::RangeFrom",
                      "start"
                    |)
                  |)
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn end_bound(&self) -> Bound<&T> {
            Unbounded
        }
    *)
    Definition end_bound (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "core::ops::range::Bound::Unbounded" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::range::RangeBounds"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T)
        (* Instance *)
        [
          ("start_bound", InstanceField.Method (start_bound T));
          ("end_bound", InstanceField.Method (end_bound T))
        ].
  End Impl_core_ops_range_RangeBounds_T_for_core_range_RangeFrom_T.
  
  Module Impl_core_ops_range_RangeBounds_T_for_core_range_RangeFrom_ref__T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "core::range::RangeFrom") [] [ Ty.apply (Ty.path "&") [] [ T ] ].
    
    (*
        fn start_bound(&self) -> Bound<&T> {
            Included(self.start)
        }
    *)
    Definition start_bound (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::ops::range::Bound::Included"
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "core::range::RangeFrom",
                      "start"
                    |)
                  |)
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn end_bound(&self) -> Bound<&T> {
            Unbounded
        }
    *)
    Definition end_bound (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "core::ops::range::Bound::Unbounded" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::range::RangeBounds"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T)
        (* Instance *)
        [
          ("start_bound", InstanceField.Method (start_bound T));
          ("end_bound", InstanceField.Method (end_bound T))
        ].
  End Impl_core_ops_range_RangeBounds_T_for_core_range_RangeFrom_ref__T.
  
  Module Impl_core_convert_From_core_range_RangeFrom_T_for_core_ops_range_RangeFrom_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::ops::range::RangeFrom") [] [ T ].
    
    (*
        fn from(value: RangeFrom<T>) -> Self {
            Self { start: value.start }
        }
    *)
    Definition from (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructRecord
            "core::ops::range::RangeFrom"
            [
              ("start",
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    value,
                    "core::range::RangeFrom",
                    "start"
                  |)
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "core::range::RangeFrom") [] [ T ] ]
        (Self T)
        (* Instance *) [ ("from", InstanceField.Method (from T)) ].
  End Impl_core_convert_From_core_range_RangeFrom_T_for_core_ops_range_RangeFrom_T.
  
  Module Impl_core_convert_From_core_ops_range_RangeFrom_T_for_core_range_RangeFrom_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "core::range::RangeFrom") [] [ T ].
    
    (*
        fn from(value: legacy::RangeFrom<T>) -> Self {
            Self { start: value.start }
        }
    *)
    Definition from (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructRecord
            "core::range::RangeFrom"
            [
              ("start",
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    value,
                    "core::ops::range::RangeFrom",
                    "start"
                  |)
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "core::ops::range::RangeFrom") [] [ T ] ]
        (Self T)
        (* Instance *) [ ("from", InstanceField.Method (from T)) ].
  End Impl_core_convert_From_core_ops_range_RangeFrom_T_for_core_range_RangeFrom_T.
End range.
