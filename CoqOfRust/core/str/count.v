(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module str.
  Module count.
    Definition value_USIZE_SIZE (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          M.call_closure (|
            Ty.path "usize",
            M.get_function (| "core::mem::size_of", [], [ Ty.path "usize" ] |),
            []
          |)
        |))).
    
    Global Instance Instance_IsConstant_value_USIZE_SIZE :
      M.IsFunction.C "core::str::count::USIZE_SIZE" value_USIZE_SIZE.
    Admitted.
    Global Typeclasses Opaque value_USIZE_SIZE.
    
    Definition value_UNROLL_INNER (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 4 |))).
    
    Global Instance Instance_IsConstant_value_UNROLL_INNER :
      M.IsFunction.C "core::str::count::UNROLL_INNER" value_UNROLL_INNER.
    Admitted.
    Global Typeclasses Opaque value_UNROLL_INNER.
    
    (*
    pub(super) fn count_chars(s: &str) -> usize {
        if cfg!(feature = "optimize_for_size") || s.len() < USIZE_SIZE * UNROLL_INNER {
            // Avoid entering the optimized implementation for strings where the
            // difference is not likely to matter, or where it might even be slower.
            // That said, a ton of thought was not spent on the particular threshold
            // here, beyond "this value seems to make sense".
            char_count_general_case(s.as_bytes())
        } else {
            do_count_chars(s)
        }
    }
    *)
    Definition count_chars (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ s ] =>
        ltac:(M.monadic
          (let s := M.alloc (| s |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          LogicalOp.or (|
                            Value.Bool false,
                            ltac:(M.monadic
                              (M.call_closure (|
                                Ty.path "bool",
                                BinOp.lt,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (| Ty.path "str", "len", [], [] |),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.mul,
                                    [
                                      M.read (|
                                        get_constant (|
                                          "core::str::count::USIZE_SIZE",
                                          Ty.path "usize"
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "core::str::count::UNROLL_INNER",
                                          Ty.path "usize"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)))
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_function (| "core::str::count::char_count_general_case", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_function (| "core::str::count::do_count_chars", [], [] |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_count_chars :
      M.IsFunction.C "core::str::count::count_chars" count_chars.
    Admitted.
    Global Typeclasses Opaque count_chars.
    
    (*
    fn do_count_chars(s: &str) -> usize {
        // For correctness, `CHUNK_SIZE` must be:
        //
        // - Less than or equal to 255, otherwise we'll overflow bytes in `counts`.
        // - A multiple of `UNROLL_INNER`, otherwise our `break` inside the
        //   `body.chunks(CHUNK_SIZE)` loop is incorrect.
        //
        // For performance, `CHUNK_SIZE` should be:
        // - Relatively cheap to `/` against (so some simple sum of powers of two).
        // - Large enough to avoid paying for the cost of the `sum_bytes_in_usize`
        //   too often.
        const CHUNK_SIZE: usize = 192;
    
        // Check the properties of `CHUNK_SIZE` and `UNROLL_INNER` that are required
        // for correctness.
        const _: () = assert!(CHUNK_SIZE < 256);
        const _: () = assert!(CHUNK_SIZE % UNROLL_INNER == 0);
    
        // SAFETY: transmuting `[u8]` to `[usize]` is safe except for size
        // differences which are handled by `align_to`.
        let (head, body, tail) = unsafe { s.as_bytes().align_to::<usize>() };
    
        // This should be quite rare, and basically exists to handle the degenerate
        // cases where align_to fails (as well as miri under symbolic alignment
        // mode).
        //
        // The `unlikely` helps discourage LLVM from inlining the body, which is
        // nice, as we would rather not mark the `char_count_general_case` function
        // as cold.
        if unlikely(body.is_empty() || head.len() > USIZE_SIZE || tail.len() > USIZE_SIZE) {
            return char_count_general_case(s.as_bytes());
        }
    
        let mut total = char_count_general_case(head) + char_count_general_case(tail);
        // Split `body` into `CHUNK_SIZE` chunks to reduce the frequency with which
        // we call `sum_bytes_in_usize`.
        for chunk in body.chunks(CHUNK_SIZE) {
            // We accumulate intermediate sums in `counts`, where each byte contains
            // a subset of the sum of this chunk, like a `[u8; size_of::<usize>()]`.
            let mut counts = 0;
    
            let (unrolled_chunks, remainder) = chunk.as_chunks::<UNROLL_INNER>();
            for unrolled in unrolled_chunks {
                for &word in unrolled {
                    // Because `CHUNK_SIZE` is < 256, this addition can't cause the
                    // count in any of the bytes to overflow into a subsequent byte.
                    counts += contains_non_continuation_byte(word);
                }
            }
    
            // Sum the values in `counts` (which, again, is conceptually a `[u8;
            // size_of::<usize>()]`), and accumulate the result into `total`.
            total += sum_bytes_in_usize(counts);
    
            // If there's any data in `remainder`, then handle it. This will only
            // happen for the last `chunk` in `body.chunks()` (because `CHUNK_SIZE`
            // is divisible by `UNROLL_INNER`), so we explicitly break at the end
            // (which seems to help LLVM out).
            if !remainder.is_empty() {
                // Accumulate all the data in the remainder.
                let mut counts = 0;
                for &word in remainder {
                    counts += contains_non_continuation_byte(word);
                }
                total += sum_bytes_in_usize(counts);
                break;
            }
        }
        total
    }
    *)
    Definition do_count_chars (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ s ] =>
        ltac:(M.monadic
          (let s := M.alloc (| s |) in
          M.catch_return (Ty.path "usize") (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                        ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                        "align_to",
                        [],
                        [ Ty.path "usize" ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                        let head := M.copy (| γ0_0 |) in
                        let body := M.copy (| γ0_1 |) in
                        let tail := M.copy (| γ0_2 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_function (| "core::intrinsics::unlikely", [], [] |),
                                          [
                                            LogicalOp.or (|
                                              LogicalOp.or (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [ Ty.path "usize" ],
                                                    "is_empty",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| body |) |)
                                                    |)
                                                  ]
                                                |),
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.gt,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ],
                                                          "len",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| head |) |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.read (|
                                                        get_constant (|
                                                          "core::str::count::USIZE_SIZE",
                                                          Ty.path "usize"
                                                        |)
                                                      |)
                                                    ]
                                                  |)))
                                              |),
                                              ltac:(M.monadic
                                                (M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.gt,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "u8" ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| tail |) |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.read (|
                                                      get_constant (|
                                                        "core::str::count::USIZE_SIZE",
                                                        Ty.path "usize"
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                            |)
                                          ]
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_function (|
                                              "core::str::count::char_count_general_case",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "u8" ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.path "str",
                                                      "as_bytes",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| s |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ total : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.add,
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_function (|
                                    "core::str::count::char_count_general_case",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| head |) |) |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_function (|
                                    "core::str::count::char_count_general_case",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| tail |) |) |)
                                  ]
                                |)
                              ]
                            |)
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.use
                            (M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Chunks")
                                    []
                                    [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::IntoIterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Chunks")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "into_iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Chunks")
                                        []
                                        [ Ty.path "usize" ],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                                        "chunks",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| body |) |)
                                        |);
                                        M.read (|
                                          get_constant (|
                                            "core::str::count::do_count_chars::CHUNK_SIZE",
                                            Ty.path "usize"
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let iter := M.copy (| γ |) in
                                    M.loop (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Chunks")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (| M.read (| M.break (||) |) |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let chunk := M.copy (| γ0_0 |) in
                                                  let~ counts :
                                                      Ty.apply
                                                        (Ty.path "*")
                                                        []
                                                        [ Ty.path "usize" ] :=
                                                    M.alloc (|
                                                      Value.Integer IntegerKind.Usize 0
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          4
                                                                      ]
                                                                      [ Ty.path "usize" ]
                                                                  ]
                                                              ];
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          "as_chunks",
                                                          [ Value.Integer IntegerKind.Usize 4 ],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| chunk |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              0
                                                            |) in
                                                          let γ0_1 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              1
                                                            |) in
                                                          let unrolled_chunks :=
                                                            M.copy (| γ0_0 |) in
                                                          let remainder := M.copy (| γ0_1 |) in
                                                          let~ _ :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.tuple [] ] :=
                                                            M.use
                                                              (M.match_operator (|
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ],
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              4
                                                                          ]
                                                                          [ Ty.path "usize" ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::collect::IntoIterator",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "array")
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    4
                                                                                ]
                                                                                [ Ty.path "usize" ]
                                                                            ]
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "into_iter",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [ M.read (| unrolled_chunks |) ]
                                                                  |)
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let iter := M.copy (| γ |) in
                                                                      M.loop (|
                                                                        Ty.apply
                                                                          (Ty.path "*")
                                                                          []
                                                                          [ Ty.tuple [] ],
                                                                        ltac:(M.monadic
                                                                          (let~ _ :
                                                                              Ty.apply
                                                                                (Ty.path "*")
                                                                                []
                                                                                [ Ty.tuple [] ] :=
                                                                            M.match_operator (|
                                                                              Ty.apply
                                                                                (Ty.path "*")
                                                                                []
                                                                                [ Ty.tuple [] ],
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "array")
                                                                                            [
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                4
                                                                                            ]
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ]
                                                                                        ]
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::Iter")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "array")
                                                                                          [
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              4
                                                                                          ]
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ]
                                                                                      ],
                                                                                    [],
                                                                                    [],
                                                                                    "next",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.MutRef,
                                                                                      M.deref (|
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          iter
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let _ :=
                                                                                      M.is_struct_tuple (|
                                                                                        γ,
                                                                                        "core::option::Option::None"
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      M.never_to_any (|
                                                                                        M.read (|
                                                                                          M.break (||)
                                                                                        |)
                                                                                      |)
                                                                                    |)));
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ0_0 :=
                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                        γ,
                                                                                        "core::option::Option::Some",
                                                                                        0
                                                                                      |) in
                                                                                    let unrolled :=
                                                                                      M.copy (|
                                                                                        γ0_0
                                                                                      |) in
                                                                                    M.use
                                                                                      (M.match_operator (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "*")
                                                                                          []
                                                                                          [
                                                                                            Ty.tuple
                                                                                              []
                                                                                          ],
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::Iter")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ],
                                                                                            M.get_trait_method (|
                                                                                              "core::iter::traits::collect::IntoIterator",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "array")
                                                                                                    [
                                                                                                      Value.Integer
                                                                                                        IntegerKind.Usize
                                                                                                        4
                                                                                                    ]
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "usize"
                                                                                                    ]
                                                                                                ],
                                                                                              [],
                                                                                              [],
                                                                                              "into_iter",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                unrolled
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |),
                                                                                        [
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    iter :=
                                                                                                M.copy (|
                                                                                                  γ
                                                                                                |) in
                                                                                              M.loop (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "*")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      []
                                                                                                  ],
                                                                                                ltac:(M.monadic
                                                                                                  (let~
                                                                                                        _ :
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "*")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            []
                                                                                                        ] :=
                                                                                                    M.match_operator (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "*")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            []
                                                                                                        ],
                                                                                                      M.alloc (|
                                                                                                        M.call_closure (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::option::Option")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "&")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "usize"
                                                                                                                ]
                                                                                                            ],
                                                                                                          M.get_trait_method (|
                                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::slice::iter::Iter")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "usize"
                                                                                                              ],
                                                                                                            [],
                                                                                                            [],
                                                                                                            "next",
                                                                                                            [],
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.MutRef,
                                                                                                              M.deref (|
                                                                                                                M.borrow (|
                                                                                                                  Pointer.Kind.MutRef,
                                                                                                                  iter
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (let
                                                                                                                  _ :=
                                                                                                              M.is_struct_tuple (|
                                                                                                                γ,
                                                                                                                "core::option::Option::None"
                                                                                                              |) in
                                                                                                            M.alloc (|
                                                                                                              M.never_to_any (|
                                                                                                                M.read (|
                                                                                                                  M.break (||)
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)));
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (let
                                                                                                                  γ0_0 :=
                                                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                                                γ,
                                                                                                                "core::option::Option::Some",
                                                                                                                0
                                                                                                              |) in
                                                                                                            let
                                                                                                                  γ0_0 :=
                                                                                                              M.read (|
                                                                                                                γ0_0
                                                                                                              |) in
                                                                                                            let
                                                                                                                  word :=
                                                                                                              M.copy (|
                                                                                                                γ0_0
                                                                                                              |) in
                                                                                                            let~
                                                                                                                  _ :
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "*")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.tuple
                                                                                                                      []
                                                                                                                  ] :=
                                                                                                              M.alloc (|
                                                                                                                let
                                                                                                                      β :=
                                                                                                                  counts in
                                                                                                                M.write (|
                                                                                                                  β,
                                                                                                                  M.call_closure (|
                                                                                                                    Ty.path
                                                                                                                      "usize",
                                                                                                                    BinOp.Wrap.add,
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        β
                                                                                                                      |);
                                                                                                                      M.call_closure (|
                                                                                                                        Ty.path
                                                                                                                          "usize",
                                                                                                                        M.get_function (|
                                                                                                                          "core::str::count::contains_non_continuation_byte",
                                                                                                                          [],
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.read (|
                                                                                                                            word
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |) in
                                                                                                            M.alloc (|
                                                                                                              Value.Tuple
                                                                                                                []
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |) in
                                                                                                  M.alloc (|
                                                                                                    Value.Tuple
                                                                                                      []
                                                                                                  |)))
                                                                                              |)))
                                                                                        ]
                                                                                      |))))
                                                                              ]
                                                                            |) in
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |)))
                                                                      |)))
                                                                ]
                                                              |)) in
                                                          let~ _ :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.tuple [] ] :=
                                                            M.alloc (|
                                                              let β := total in
                                                              M.write (|
                                                                β,
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.add,
                                                                  [
                                                                    M.read (| β |);
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      M.get_function (|
                                                                        "core::str::count::sum_bytes_in_usize",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [ M.read (| counts |) ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |) in
                                                          M.match_operator (|
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ],
                                                            M.alloc (| Value.Tuple [] |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ :=
                                                                    M.use
                                                                      (M.alloc (|
                                                                        UnOp.not (|
                                                                          M.call_closure (|
                                                                            Ty.path "bool",
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [ Ty.path "usize" ],
                                                                              "is_empty",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    remainder
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)) in
                                                                  let _ :=
                                                                    is_constant_or_break_match (|
                                                                      M.read (| γ |),
                                                                      Value.Bool true
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        let~ counts :
                                                                            Ty.apply
                                                                              (Ty.path "*")
                                                                              []
                                                                              [ Ty.path "usize" ] :=
                                                                          M.alloc (|
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              0
                                                                          |) in
                                                                        let~ _ :
                                                                            Ty.apply
                                                                              (Ty.path "*")
                                                                              []
                                                                              [ Ty.tuple [] ] :=
                                                                          M.use
                                                                            (M.match_operator (|
                                                                              Ty.apply
                                                                                (Ty.path "*")
                                                                                []
                                                                                [ Ty.tuple [] ],
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "core::iter::traits::collect::IntoIterator",
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ]
                                                                                      ],
                                                                                    [],
                                                                                    [],
                                                                                    "into_iter",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      remainder
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let iter :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.loop (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "*")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            []
                                                                                        ],
                                                                                      ltac:(M.monadic
                                                                                        (let~ _ :
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "*")
                                                                                              []
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  []
                                                                                              ] :=
                                                                                          M.match_operator (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "*")
                                                                                              []
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  []
                                                                                              ],
                                                                                            M.alloc (|
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::option::Option")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "usize"
                                                                                                      ]
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::slice::iter::Iter")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "usize"
                                                                                                    ],
                                                                                                  [],
                                                                                                  [],
                                                                                                  "next",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.MutRef,
                                                                                                    M.deref (|
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.MutRef,
                                                                                                        iter
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |),
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (let
                                                                                                        _ :=
                                                                                                    M.is_struct_tuple (|
                                                                                                      γ,
                                                                                                      "core::option::Option::None"
                                                                                                    |) in
                                                                                                  M.alloc (|
                                                                                                    M.never_to_any (|
                                                                                                      M.read (|
                                                                                                        M.break (||)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)));
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (let
                                                                                                        γ0_0 :=
                                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                                      γ,
                                                                                                      "core::option::Option::Some",
                                                                                                      0
                                                                                                    |) in
                                                                                                  let
                                                                                                        γ0_0 :=
                                                                                                    M.read (|
                                                                                                      γ0_0
                                                                                                    |) in
                                                                                                  let
                                                                                                        word :=
                                                                                                    M.copy (|
                                                                                                      γ0_0
                                                                                                    |) in
                                                                                                  let~
                                                                                                        _ :
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "*")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            []
                                                                                                        ] :=
                                                                                                    M.alloc (|
                                                                                                      let
                                                                                                            β :=
                                                                                                        counts in
                                                                                                      M.write (|
                                                                                                        β,
                                                                                                        M.call_closure (|
                                                                                                          Ty.path
                                                                                                            "usize",
                                                                                                          BinOp.Wrap.add,
                                                                                                          [
                                                                                                            M.read (|
                                                                                                              β
                                                                                                            |);
                                                                                                            M.call_closure (|
                                                                                                              Ty.path
                                                                                                                "usize",
                                                                                                              M.get_function (|
                                                                                                                "core::str::count::contains_non_continuation_byte",
                                                                                                                [],
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.read (|
                                                                                                                  word
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      |)
                                                                                                    |) in
                                                                                                  M.alloc (|
                                                                                                    Value.Tuple
                                                                                                      []
                                                                                                  |)))
                                                                                            ]
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |)))
                                                                                    |)))
                                                                              ]
                                                                            |)) in
                                                                        let~ _ :
                                                                            Ty.apply
                                                                              (Ty.path "*")
                                                                              []
                                                                              [ Ty.tuple [] ] :=
                                                                          M.alloc (|
                                                                            let β := total in
                                                                            M.write (|
                                                                              β,
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.add,
                                                                                [
                                                                                  M.read (| β |);
                                                                                  M.call_closure (|
                                                                                    Ty.path "usize",
                                                                                    M.get_function (|
                                                                                      "core::str::count::sum_bytes_in_usize",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        counts
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |) in
                                                                        M.break (||)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                    |)))
                              ]
                            |)) in
                        total))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_do_count_chars :
      M.IsFunction.C "core::str::count::do_count_chars" do_count_chars.
    Admitted.
    Global Typeclasses Opaque do_count_chars.
    
    Module do_count_chars.
      Definition value_CHUNK_SIZE (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 192 |))).
      
      Global Instance Instance_IsConstant_value_CHUNK_SIZE :
        M.IsFunction.C "core::str::count::do_count_chars::CHUNK_SIZE" value_CHUNK_SIZE.
      Admitted.
      Global Typeclasses Opaque value_CHUNK_SIZE.
    End do_count_chars.
    
    (*
    fn contains_non_continuation_byte(w: usize) -> usize {
        const LSB: usize = usize::repeat_u8(0x01);
        ((!w >> 7) | (w >> 6)) & LSB
    }
    *)
    Definition contains_non_continuation_byte
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ w ] =>
        ltac:(M.monadic
          (let w := M.alloc (| w |) in
          M.call_closure (|
            Ty.path "usize",
            BinOp.Wrap.bit_and,
            [
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.bit_or,
                [
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.shr,
                    [ UnOp.not (| M.read (| w |) |); Value.Integer IntegerKind.I32 7 ]
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.shr,
                    [ M.read (| w |); Value.Integer IntegerKind.I32 6 ]
                  |)
                ]
              |);
              M.read (|
                get_constant (|
                  "core::str::count::contains_non_continuation_byte::LSB",
                  Ty.path "usize"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_contains_non_continuation_byte :
      M.IsFunction.C
        "core::str::count::contains_non_continuation_byte"
        contains_non_continuation_byte.
    Admitted.
    Global Typeclasses Opaque contains_non_continuation_byte.
    
    Module contains_non_continuation_byte.
      Definition value_LSB (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (| Ty.path "usize", "repeat_u8", [], [] |),
              [ Value.Integer IntegerKind.U8 1 ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LSB :
        M.IsFunction.C "core::str::count::contains_non_continuation_byte::LSB" value_LSB.
      Admitted.
      Global Typeclasses Opaque value_LSB.
    End contains_non_continuation_byte.
    
    (*
    fn sum_bytes_in_usize(values: usize) -> usize {
        const LSB_SHORTS: usize = usize::repeat_u16(0x0001);
        const SKIP_BYTES: usize = usize::repeat_u16(0x00ff);
    
        let pair_sum: usize = (values & SKIP_BYTES) + ((values >> 8) & SKIP_BYTES);
        pair_sum.wrapping_mul(LSB_SHORTS) >> ((USIZE_SIZE - 2) * 8)
    }
    *)
    Definition sum_bytes_in_usize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ values ] =>
        ltac:(M.monadic
          (let values := M.alloc (| values |) in
          M.read (|
            let~ pair_sum : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.add,
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.bit_and,
                      [
                        M.read (| values |);
                        M.read (|
                          get_constant (|
                            "core::str::count::sum_bytes_in_usize::SKIP_BYTES",
                            Ty.path "usize"
                          |)
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.bit_and,
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.shr,
                          [ M.read (| values |); Value.Integer IntegerKind.I32 8 ]
                        |);
                        M.read (|
                          get_constant (|
                            "core::str::count::sum_bytes_in_usize::SKIP_BYTES",
                            Ty.path "usize"
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.shr,
                [
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (| Ty.path "usize", "wrapping_mul", [], [] |),
                    [
                      M.read (| pair_sum |);
                      M.read (|
                        get_constant (|
                          "core::str::count::sum_bytes_in_usize::LSB_SHORTS",
                          Ty.path "usize"
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.sub,
                        [
                          M.read (|
                            get_constant (| "core::str::count::USIZE_SIZE", Ty.path "usize" |)
                          |);
                          Value.Integer IntegerKind.Usize 2
                        ]
                      |);
                      Value.Integer IntegerKind.Usize 8
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_sum_bytes_in_usize :
      M.IsFunction.C "core::str::count::sum_bytes_in_usize" sum_bytes_in_usize.
    Admitted.
    Global Typeclasses Opaque sum_bytes_in_usize.
    
    Module sum_bytes_in_usize.
      Definition value_LSB_SHORTS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (| Ty.path "usize", "repeat_u16", [], [] |),
              [ Value.Integer IntegerKind.U16 1 ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_LSB_SHORTS :
        M.IsFunction.C "core::str::count::sum_bytes_in_usize::LSB_SHORTS" value_LSB_SHORTS.
      Admitted.
      Global Typeclasses Opaque value_LSB_SHORTS.
      
      Definition value_SKIP_BYTES (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (| Ty.path "usize", "repeat_u16", [], [] |),
              [ Value.Integer IntegerKind.U16 255 ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_SKIP_BYTES :
        M.IsFunction.C "core::str::count::sum_bytes_in_usize::SKIP_BYTES" value_SKIP_BYTES.
      Admitted.
      Global Typeclasses Opaque value_SKIP_BYTES.
    End sum_bytes_in_usize.
    
    (*
    fn char_count_general_case(s: &[u8]) -> usize {
        s.iter().filter(|&&byte| !super::validations::utf8_is_cont_byte(byte)).count()
    }
    *)
    Definition char_count_general_case (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ s ] =>
        ltac:(M.monadic
          (let s := M.alloc (| s |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "core::iter::adapters::filter::Filter")
                []
                [
                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ];
                  Ty.function
                    [
                      Ty.tuple
                        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ] ]
                    ]
                    (Ty.path "bool")
                ],
              [],
              [],
              "count",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::filter::Filter")
                  []
                  [
                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ];
                    Ty.function
                      [
                        Ty.tuple
                          [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ]
                          ]
                      ]
                      (Ty.path "bool")
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                  [],
                  [],
                  "filter",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ]
                          ]
                      ]
                      (Ty.path "bool")
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                      "iter",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ]
                                        ]
                                    ]
                                    (Ty.path "bool")
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.read (| γ |) in
                                    let γ := M.read (| γ |) in
                                    let byte := M.copy (| γ |) in
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_function (|
                                          "core::str::validations::utf8_is_cont_byte",
                                          [],
                                          []
                                        |),
                                        [ M.read (| byte |) ]
                                      |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_char_count_general_case :
      M.IsFunction.C "core::str::count::char_count_general_case" char_count_general_case.
    Admitted.
    Global Typeclasses Opaque char_count_general_case.
  End count.
End str.
