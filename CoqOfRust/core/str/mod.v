(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module str.
  (*
  const fn slice_error_fail(s: &str, begin: usize, end: usize) -> ! {
      crate::intrinsics::const_eval_select((s, begin, end), slice_error_fail_ct, slice_error_fail_rt)
  }
  *)
  Definition slice_error_fail (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ s; begin; end_ ] =>
      ltac:(M.monadic
        (let s := M.alloc (| s |) in
        let begin := M.alloc (| begin |) in
        let end_ := M.alloc (| end_ |) in
        M.call_closure (|
          Ty.path "never",
          M.get_function (|
            "core::intrinsics::const_eval_select",
            [],
            [
              Ty.tuple
                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ]; Ty.path "usize"; Ty.path "usize" ];
              Ty.function
                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ]; Ty.path "usize"; Ty.path "usize" ]
                (Ty.path "never");
              Ty.function
                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ]; Ty.path "usize"; Ty.path "usize" ]
                (Ty.path "never");
              Ty.path "never"
            ]
          |),
          [
            Value.Tuple [ M.read (| s |); M.read (| begin |); M.read (| end_ |) ];
            M.get_function (| "core::str::slice_error_fail_ct", [], [] |);
            M.get_function (| "core::str::slice_error_fail_rt", [], [] |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_slice_error_fail :
    M.IsFunction.Trait "core::str::slice_error_fail" slice_error_fail.
  Admitted.
  Global Typeclasses Opaque slice_error_fail.
  
  (*
  const fn slice_error_fail_ct(_: &str, _: usize, _: usize) -> ! {
      panic!("failed to slice string");
  }
  *)
  Definition slice_error_fail_ct (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ β0; β1; β2 ] =>
      ltac:(M.monadic
        (let β0 := M.alloc (| β0 |) in
        let β1 := M.alloc (| β1 |) in
        let β2 := M.alloc (| β2 |) in
        M.match_operator (|
          None,
          β0,
          [
            fun γ =>
              ltac:(M.monadic
                (M.match_operator (|
                  None,
                  β1,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          None,
                          β2,
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                  [
                                    M.call_closure (|
                                      Ty.path "core::fmt::Arguments",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::Arguments",
                                        "new_const",
                                        [ Value.Integer IntegerKind.Usize 1 ],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Value.Array
                                                  [
                                                    M.read (|
                                                      Value.String "failed to slice string"
                                                    |)
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_slice_error_fail_ct :
    M.IsFunction.Trait "core::str::slice_error_fail_ct" slice_error_fail_ct.
  Admitted.
  Global Typeclasses Opaque slice_error_fail_ct.
  
  (*
  fn slice_error_fail_rt(s: &str, begin: usize, end: usize) -> ! {
      const MAX_DISPLAY_LENGTH: usize = 256;
      let trunc_len = s.floor_char_boundary(MAX_DISPLAY_LENGTH);
      let s_trunc = &s[..trunc_len];
      let ellipsis = if trunc_len < s.len() { "[...]" } else { "" };
  
      // 1. out of bounds
      if begin > s.len() || end > s.len() {
          let oob_index = if begin > s.len() { begin } else { end };
          panic!("byte index {oob_index} is out of bounds of `{s_trunc}`{ellipsis}");
      }
  
      // 2. begin <= end
      assert!(
          begin <= end,
          "begin <= end ({} <= {}) when slicing `{}`{}",
          begin,
          end,
          s_trunc,
          ellipsis
      );
  
      // 3. character boundary
      let index = if !s.is_char_boundary(begin) { begin } else { end };
      // find the character
      let char_start = s.floor_char_boundary(index);
      // `char_start` must be less than len and a char boundary
      let ch = s[char_start..].chars().next().unwrap();
      let char_range = char_start..char_start + ch.len_utf8();
      panic!(
          "byte index {} is not a char boundary; it is inside {:?} (bytes {:?}) of `{}`{}",
          index, ch, char_range, s_trunc, ellipsis
      );
  }
  *)
  Definition slice_error_fail_rt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ s; begin; end_ ] =>
      ltac:(M.monadic
        (let s := M.alloc (| s |) in
        let begin := M.alloc (| begin |) in
        let end_ := M.alloc (| end_ |) in
        M.read (|
          let~ trunc_len : Ty.path "usize" :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (| Ty.path "str", "floor_char_boundary", [], [] |),
                [
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |);
                  M.read (| M.get_constant "core::str::slice_error_fail_rt::MAX_DISPLAY_LENGTH" |)
                ]
              |)
            |) in
          let~ s_trunc : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
            M.alloc (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                    M.get_trait_method (|
                      "core::ops::index::Index",
                      Ty.path "str",
                      [],
                      [ Ty.apply (Ty.path "core::ops::range::RangeTo") [] [ Ty.path "usize" ] ],
                      "index",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |);
                      Value.StructRecord
                        "core::ops::range::RangeTo"
                        [ ("end_", M.read (| trunc_len |)) ]
                    ]
                  |)
                |)
              |)
            |) in
          let~ ellipsis : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
            M.copy (|
              M.match_operator (|
                Some (Ty.apply (Ty.path "&") [] [ Ty.path "str" ]),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.lt (|
                              M.read (| trunc_len |),
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (| Ty.path "str", "len", [], [] |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                              |)
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      Value.String "[...]"));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| Value.String "" |) |) |)
                      |)))
                ]
              |)
            |) in
          let~ _ : Ty.tuple [] :=
            M.match_operator (|
              Some (Ty.tuple []),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          LogicalOp.or (|
                            BinOp.gt (|
                              M.read (| begin |),
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (| Ty.path "str", "len", [], [] |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                              |)
                            |),
                            ltac:(M.monadic
                              (BinOp.gt (|
                                M.read (| end_ |),
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (| Ty.path "str", "len", [], [] |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                                |)
                              |)))
                          |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.never_to_any (|
                        M.read (|
                          let~ oob_index : Ty.path "usize" :=
                            M.copy (|
                              M.match_operator (|
                                Some (Ty.path "usize"),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            BinOp.gt (|
                                              M.read (| begin |),
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.path "str",
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| s |) |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      begin));
                                  fun γ => ltac:(M.monadic end_)
                                ]
                              |)
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic_fmt", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    [
                                      Value.Integer IntegerKind.Usize 3;
                                      Value.Integer IntegerKind.Usize 3
                                    ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Value.Array
                                              [
                                                M.read (| Value.String "byte index " |);
                                                M.read (| Value.String " is out of bounds of `" |);
                                                M.read (| Value.String "`" |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Value.Array
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::rt::Argument",
                                                    "new_display",
                                                    [],
                                                    [ Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (| Pointer.Kind.Ref, oob_index |)
                                                      |)
                                                    |)
                                                  ]
                                                |);
                                                M.call_closure (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::rt::Argument",
                                                    "new_display",
                                                    [],
                                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (| Pointer.Kind.Ref, s_trunc |)
                                                      |)
                                                    |)
                                                  ]
                                                |);
                                                M.call_closure (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::rt::Argument",
                                                    "new_display",
                                                    [],
                                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (| Pointer.Kind.Ref, ellipsis |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)
                      |)
                    |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
              ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.match_operator (|
              Some (Ty.tuple []),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          UnOp.not (| BinOp.le (| M.read (| begin |), M.read (| end_ |) |) |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                [
                                  Value.Integer IntegerKind.Usize 4;
                                  Value.Integer IntegerKind.Usize 4
                                ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [
                                            M.read (| Value.String "begin <= end (" |);
                                            M.read (| Value.String " <= " |);
                                            M.read (| Value.String ") when slicing `" |);
                                            M.read (| Value.String "`" |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [],
                                                [ Ty.path "usize" ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.Ref, begin |)
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [],
                                                [ Ty.path "usize" ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.Ref, end_ |)
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [],
                                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.Ref, s_trunc |)
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [],
                                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.Ref, ellipsis |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
              ]
            |) in
          let~ index : Ty.path "usize" :=
            M.copy (|
              M.match_operator (|
                Some (Ty.path "usize"),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.path "str",
                                  "is_char_boundary",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |);
                                  M.read (| begin |)
                                ]
                              |)
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      begin));
                  fun γ => ltac:(M.monadic end_)
                ]
              |)
            |) in
          let~ char_start : Ty.path "usize" :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (| Ty.path "str", "floor_char_boundary", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |); M.read (| index |)
                ]
              |)
            |) in
          let~ ch : Ty.path "char" :=
            M.alloc (|
              M.call_closure (|
                Ty.path "char",
                M.get_associated_function (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "char" ],
                  "unwrap",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "char" ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.path "core::str::iter::Chars",
                      [],
                      [],
                      "next",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "core::str::iter::Chars",
                            M.get_associated_function (| Ty.path "str", "chars", [], [] |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                    M.get_trait_method (|
                                      "core::ops::index::Index",
                                      Ty.path "str",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::ops::range::RangeFrom")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                      "index",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |);
                                      Value.StructRecord
                                        "core::ops::range::RangeFrom"
                                        [ ("start", M.read (| char_start |)) ]
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          let~ char_range : Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] :=
            M.alloc (|
              Value.StructRecord
                "core::ops::range::Range"
                [
                  ("start", M.read (| char_start |));
                  ("end_",
                    BinOp.Wrap.add (|
                      M.read (| char_start |),
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (| Ty.path "char", "len_utf8", [], [] |),
                        [ M.read (| ch |) ]
                      |)
                    |))
                ]
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.path "never",
              M.get_function (| "core::panicking::panic_fmt", [], [] |),
              [
                M.call_closure (|
                  Ty.path "core::fmt::Arguments",
                  M.get_associated_function (|
                    Ty.path "core::fmt::Arguments",
                    "new_v1",
                    [ Value.Integer IntegerKind.Usize 5; Value.Integer IntegerKind.Usize 5 ],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Value.Array
                              [
                                M.read (| Value.String "byte index " |);
                                M.read (| Value.String " is not a char boundary; it is inside " |);
                                M.read (| Value.String " (bytes " |);
                                M.read (| Value.String ") of `" |);
                                M.read (| Value.String "`" |)
                              ]
                          |)
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Value.Array
                              [
                                M.call_closure (|
                                  Ty.path "core::fmt::rt::Argument",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::rt::Argument",
                                    "new_display",
                                    [],
                                    [ Ty.path "usize" ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.borrow (| Pointer.Kind.Ref, index |) |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.path "core::fmt::rt::Argument",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::rt::Argument",
                                    "new_debug",
                                    [],
                                    [ Ty.path "char" ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.borrow (| Pointer.Kind.Ref, ch |) |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.path "core::fmt::rt::Argument",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::rt::Argument",
                                    "new_debug",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ]
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.borrow (| Pointer.Kind.Ref, char_range |) |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.path "core::fmt::rt::Argument",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::rt::Argument",
                                    "new_display",
                                    [],
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.borrow (| Pointer.Kind.Ref, s_trunc |) |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.path "core::fmt::rt::Argument",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::rt::Argument",
                                    "new_display",
                                    [],
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.borrow (| Pointer.Kind.Ref, ellipsis |) |)
                                    |)
                                  ]
                                |)
                              ]
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_slice_error_fail_rt :
    M.IsFunction.Trait "core::str::slice_error_fail_rt" slice_error_fail_rt.
  Admitted.
  Global Typeclasses Opaque slice_error_fail_rt.
  
  Module slice_error_fail_rt.
    Definition value_MAX_DISPLAY_LENGTH : Value.t :=
      M.run_constant ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 256 |))).
    
    Axiom Constant_value_MAX_DISPLAY_LENGTH :
      (M.get_constant "core::str::slice_error_fail_rt::MAX_DISPLAY_LENGTH") =
        value_MAX_DISPLAY_LENGTH.
    Global Hint Rewrite Constant_value_MAX_DISPLAY_LENGTH : constant_rewrites.
  End slice_error_fail_rt.
  
  Module Impl_str.
    Definition Self : Ty.t := Ty.path "str".
    
    (*
        pub const fn len(&self) -> usize {
            self.as_bytes().len()
        }
    *)
    Definition len (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_associated_function (|
              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
              "len",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_len : M.IsAssociatedFunction.Trait Self "len" len.
    Admitted.
    Global Typeclasses Opaque len.
    
    (*
        pub const fn is_empty(&self) -> bool {
            self.len() == 0
        }
    *)
    Definition is_empty (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          BinOp.eq (|
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (| Ty.path "str", "len", [], [] |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
            |),
            Value.Integer IntegerKind.Usize 0
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_is_empty :
      M.IsAssociatedFunction.Trait Self "is_empty" is_empty.
    Admitted.
    Global Typeclasses Opaque is_empty.
    
    (*
        pub const fn is_char_boundary(&self, index: usize) -> bool {
            // 0 is always ok.
            // Test for 0 explicitly so that it can optimize out the check
            // easily and skip reading string data for that case.
            // Note that optimizing `self.get(..index)` relies on this.
            if index == 0 {
                return true;
            }
    
            if index >= self.len() {
                // For `true` we have two options:
                //
                // - index == self.len()
                //   Empty strings are valid, so return true
                // - index > self.len()
                //   In this case return false
                //
                // The check is placed exactly here, because it improves generated
                // code on higher opt-levels. See PR #84751 for more details.
                index == self.len()
            } else {
                self.as_bytes()[index].is_utf8_char_boundary()
            }
        }
    *)
    Definition is_char_boundary (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; index ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let index := M.alloc (| index |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.eq (| M.read (| index |), Value.Integer IntegerKind.Usize 0 |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (| M.read (| M.return_ (| Value.Bool true |) |) |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Some (Ty.path "bool"),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.ge (|
                                M.read (| index |),
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (| Ty.path "str", "len", [], [] |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |)
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          BinOp.eq (|
                            M.read (| index |),
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (| Ty.path "str", "len", [], [] |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            M.get_associated_function (|
                              Ty.path "u8",
                              "is_utf8_char_boundary",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                      M.get_associated_function (|
                                        Ty.path "str",
                                        "as_bytes",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  M.read (| index |)
                                |)
                              |)
                            ]
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_is_char_boundary :
      M.IsAssociatedFunction.Trait Self "is_char_boundary" is_char_boundary.
    Admitted.
    Global Typeclasses Opaque is_char_boundary.
    
    (*
        pub fn floor_char_boundary(&self, index: usize) -> usize {
            if index >= self.len() {
                self.len()
            } else {
                let lower_bound = index.saturating_sub(3);
                let new_index = self.as_bytes()[lower_bound..=index]
                    .iter()
                    .rposition(|b| b.is_utf8_char_boundary());
    
                // SAFETY: we know that the character boundary will be within four bytes
                unsafe { lower_bound + new_index.unwrap_unchecked() }
            }
        }
    *)
    Definition floor_char_boundary (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; index ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let index := M.alloc (| index |) in
          M.read (|
            M.match_operator (|
              Some (Ty.path "usize"),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          BinOp.ge (|
                            M.read (| index |),
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (| Ty.path "str", "len", [], [] |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (| Ty.path "str", "len", [], [] |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let~ lower_bound : Ty.path "usize" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (| Ty.path "usize", "saturating_sub", [], [] |),
                          [ M.read (| index |); Value.Integer IntegerKind.Usize 3 ]
                        |)
                      |) in
                    let~ new_index :
                        Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                            [],
                            [],
                            "rposition",
                            [],
                            [
                              Ty.function
                                [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ] ]
                                (Ty.path "bool")
                            ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    "iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                          M.get_trait_method (|
                                            "core::ops::index::Index",
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::RangeInclusive")
                                                []
                                                [ Ty.path "usize" ]
                                            ],
                                            "index",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ]
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.path "str",
                                                    "as_bytes",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::ops::range::RangeInclusive")
                                                []
                                                [ Ty.path "usize" ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::ops::range::RangeInclusive")
                                                  []
                                                  [ Ty.path "usize" ],
                                                "new",
                                                [],
                                                []
                                              |),
                                              [ M.read (| lower_bound |); M.read (| index |) ]
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Some
                                          (Ty.function
                                            [
                                              Ty.tuple
                                                [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ]
                                            ]
                                            (Ty.path "bool")),
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let b := M.copy (| γ |) in
                                              M.call_closure (|
                                                Ty.path "bool",
                                                M.get_associated_function (|
                                                  Ty.path "u8",
                                                  "is_utf8_char_boundary",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| M.deref (| M.read (| b |) |) |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      BinOp.Wrap.add (|
                        M.read (| lower_bound |),
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                            "unwrap_unchecked",
                            [],
                            []
                          |),
                          [ M.read (| new_index |) ]
                        |)
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_floor_char_boundary :
      M.IsAssociatedFunction.Trait Self "floor_char_boundary" floor_char_boundary.
    Admitted.
    Global Typeclasses Opaque floor_char_boundary.
    
    (*
        pub fn ceil_char_boundary(&self, index: usize) -> usize {
            if index > self.len() {
                self.len()
            } else {
                let upper_bound = Ord::min(index + 4, self.len());
                self.as_bytes()[index..upper_bound]
                    .iter()
                    .position(|b| b.is_utf8_char_boundary())
                    .map_or(upper_bound, |pos| pos + index)
            }
        }
    *)
    Definition ceil_char_boundary (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; index ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let index := M.alloc (| index |) in
          M.read (|
            M.match_operator (|
              Some (Ty.path "usize"),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          BinOp.gt (|
                            M.read (| index |),
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (| Ty.path "str", "len", [], [] |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (| Ty.path "str", "len", [], [] |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let~ upper_bound : Ty.path "usize" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_trait_method (|
                            "core::cmp::Ord",
                            Ty.path "usize",
                            [],
                            [],
                            "min",
                            [],
                            []
                          |),
                          [
                            BinOp.Wrap.add (|
                              M.read (| index |),
                              Value.Integer IntegerKind.Usize 4
                            |);
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (| Ty.path "str", "len", [], [] |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                          "map_or",
                          [],
                          [
                            Ty.path "usize";
                            Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.path "usize")
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                              [],
                              [],
                              "position",
                              [],
                              [
                                Ty.function
                                  [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ] ]
                                  (Ty.path "bool")
                              ]
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.path "u8" ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                            M.get_trait_method (|
                                              "core::ops::index::Index",
                                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ]
                                              ],
                                              "index",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "u8" ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.path "str",
                                                      "as_bytes",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| self |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              Value.StructRecord
                                                "core::ops::range::Range"
                                                [
                                                  ("start", M.read (| index |));
                                                  ("end_", M.read (| upper_bound |))
                                                ]
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Some
                                            (Ty.function
                                              [
                                                Ty.tuple
                                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ]
                                              ]
                                              (Ty.path "bool")),
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let b := M.copy (| γ |) in
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_associated_function (|
                                                    Ty.path "u8",
                                                    "is_utf8_char_boundary",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| M.deref (| M.read (| b |) |) |) ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |);
                          M.read (| upper_bound |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Some
                                        (Ty.function
                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                          (Ty.path "usize")),
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let pos := M.copy (| γ |) in
                                            BinOp.Wrap.add (|
                                              M.read (| pos |),
                                              M.read (| index |)
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_ceil_char_boundary :
      M.IsAssociatedFunction.Trait Self "ceil_char_boundary" ceil_char_boundary.
    Admitted.
    Global Typeclasses Opaque ceil_char_boundary.
    
    (*
        pub const fn as_bytes(&self) -> &[u8] {
            // SAFETY: const sound because we transmute two types with the same layout
            unsafe { mem::transmute(self) }
        }
    *)
    Definition as_bytes (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
            M.get_function (|
              "core::intrinsics::transmute",
              [],
              [
                Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
              ]
            |),
            [ M.read (| self |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_bytes :
      M.IsAssociatedFunction.Trait Self "as_bytes" as_bytes.
    Admitted.
    Global Typeclasses Opaque as_bytes.
    
    (*
        pub const unsafe fn as_bytes_mut(&mut self) -> &mut [u8] {
            // SAFETY: the cast from `&str` to `&[u8]` is safe since `str`
            // has the same layout as `&[u8]` (only std can make this guarantee).
            // The pointer dereference is safe since it comes from a mutable reference which
            // is guaranteed to be valid for writes.
            unsafe { &mut *(self as *mut str as *mut [u8]) }
        }
    *)
    Definition as_bytes_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.cast
                            (Ty.apply
                              (Ty.path "*mut")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ])
                            (M.read (|
                              M.use
                                (M.alloc (|
                                  M.borrow (|
                                    Pointer.Kind.MutPointer,
                                    M.deref (| M.read (| self |) |)
                                  |)
                                |))
                            |))
                        |)
                      |)
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_bytes_mut :
      M.IsAssociatedFunction.Trait Self "as_bytes_mut" as_bytes_mut.
    Admitted.
    Global Typeclasses Opaque as_bytes_mut.
    
    (*
        pub const fn as_ptr(&self) -> *const u8 {
            self as *const str as *const u8
        }
    *)
    Definition as_ptr (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.cast
            (Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ])
            (M.read (|
              M.use
                (M.alloc (|
                  M.borrow (| Pointer.Kind.ConstPointer, M.deref (| M.read (| self |) |) |)
                |))
            |))))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_ptr : M.IsAssociatedFunction.Trait Self "as_ptr" as_ptr.
    Admitted.
    Global Typeclasses Opaque as_ptr.
    
    (*
        pub const fn as_mut_ptr(&mut self) -> *mut u8 {
            self as *mut str as *mut u8
        }
    *)
    Definition as_mut_ptr (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.cast
            (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
            (M.read (|
              M.use
                (M.alloc (|
                  M.borrow (| Pointer.Kind.MutPointer, M.deref (| M.read (| self |) |) |)
                |))
            |))))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_mut_ptr :
      M.IsAssociatedFunction.Trait Self "as_mut_ptr" as_mut_ptr.
    Admitted.
    Global Typeclasses Opaque as_mut_ptr.
    
    (*
        pub fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {
            i.get(self)
        }
    *)
    Definition get (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ _ as I ], [ self; i ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let i := M.alloc (| i |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.associated_in_trait
                      "core::slice::index::SliceIndex"
                      []
                      [ Ty.path "str" ]
                      I
                      "Output"
                  ]
              ],
            M.get_trait_method (|
              "core::slice::index::SliceIndex",
              I,
              [],
              [ Ty.path "str" ],
              "get",
              [],
              []
            |),
            [ M.read (| i |); M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_get : M.IsAssociatedFunction.Trait Self "get" get.
    Admitted.
    Global Typeclasses Opaque get.
    
    (*
        pub fn get_mut<I: SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {
            i.get_mut(self)
        }
    *)
    Definition get_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ _ as I ], [ self; i ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let i := M.alloc (| i |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.associated_in_trait
                      "core::slice::index::SliceIndex"
                      []
                      [ Ty.path "str" ]
                      I
                      "Output"
                  ]
              ],
            M.get_trait_method (|
              "core::slice::index::SliceIndex",
              I,
              [],
              [ Ty.path "str" ],
              "get_mut",
              [],
              []
            |),
            [ M.read (| i |); M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_get_mut :
      M.IsAssociatedFunction.Trait Self "get_mut" get_mut.
    Admitted.
    Global Typeclasses Opaque get_mut.
    
    (*
        pub unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output {
            // SAFETY: the caller must uphold the safety contract for `get_unchecked`;
            // the slice is dereferenceable because `self` is a safe reference.
            // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.
            unsafe { &*i.get_unchecked(self) }
        }
    *)
    Definition get_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ _ as I ], [ self; i ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let i := M.alloc (| i |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "*const")
                      []
                      [
                        Ty.associated_in_trait
                          "core::slice::index::SliceIndex"
                          []
                          [ Ty.path "str" ]
                          I
                          "Output"
                      ],
                    M.get_trait_method (|
                      "core::slice::index::SliceIndex",
                      I,
                      [],
                      [ Ty.path "str" ],
                      "get_unchecked",
                      [],
                      []
                    |),
                    [
                      M.read (| i |);
                      M.borrow (| Pointer.Kind.ConstPointer, M.deref (| M.read (| self |) |) |)
                    ]
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_get_unchecked :
      M.IsAssociatedFunction.Trait Self "get_unchecked" get_unchecked.
    Admitted.
    Global Typeclasses Opaque get_unchecked.
    
    (*
        pub unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output {
            // SAFETY: the caller must uphold the safety contract for `get_unchecked_mut`;
            // the slice is dereferenceable because `self` is a safe reference.
            // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.
            unsafe { &mut *i.get_unchecked_mut(self) }
        }
    *)
    Definition get_unchecked_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ _ as I ], [ self; i ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let i := M.alloc (| i |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "*mut")
                              []
                              [
                                Ty.associated_in_trait
                                  "core::slice::index::SliceIndex"
                                  []
                                  [ Ty.path "str" ]
                                  I
                                  "Output"
                              ],
                            M.get_trait_method (|
                              "core::slice::index::SliceIndex",
                              I,
                              [],
                              [ Ty.path "str" ],
                              "get_unchecked_mut",
                              [],
                              []
                            |),
                            [
                              M.read (| i |);
                              M.borrow (|
                                Pointer.Kind.MutPointer,
                                M.deref (| M.read (| self |) |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_get_unchecked_mut :
      M.IsAssociatedFunction.Trait Self "get_unchecked_mut" get_unchecked_mut.
    Admitted.
    Global Typeclasses Opaque get_unchecked_mut.
    
    (*
        pub unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str {
            // SAFETY: the caller must uphold the safety contract for `get_unchecked`;
            // the slice is dereferenceable because `self` is a safe reference.
            // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.
            unsafe { &*(begin..end).get_unchecked(self) }
        }
    *)
    Definition slice_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; begin; end_ ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let begin := M.alloc (| begin |) in
          let end_ := M.alloc (| end_ |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "*const") [] [ Ty.path "str" ],
                    M.get_trait_method (|
                      "core::slice::index::SliceIndex",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [ Ty.path "str" ],
                      "get_unchecked",
                      [],
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [ ("start", M.read (| begin |)); ("end_", M.read (| end_ |)) ];
                      M.borrow (| Pointer.Kind.ConstPointer, M.deref (| M.read (| self |) |) |)
                    ]
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_slice_unchecked :
      M.IsAssociatedFunction.Trait Self "slice_unchecked" slice_unchecked.
    Admitted.
    Global Typeclasses Opaque slice_unchecked.
    
    (*
        pub unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str {
            // SAFETY: the caller must uphold the safety contract for `get_unchecked_mut`;
            // the slice is dereferenceable because `self` is a safe reference.
            // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.
            unsafe { &mut *(begin..end).get_unchecked_mut(self) }
        }
    *)
    Definition slice_mut_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; begin; end_ ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let begin := M.alloc (| begin |) in
          let end_ := M.alloc (| end_ |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "*mut") [] [ Ty.path "str" ],
                            M.get_trait_method (|
                              "core::slice::index::SliceIndex",
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              [],
                              [ Ty.path "str" ],
                              "get_unchecked_mut",
                              [],
                              []
                            |),
                            [
                              Value.StructRecord
                                "core::ops::range::Range"
                                [ ("start", M.read (| begin |)); ("end_", M.read (| end_ |)) ];
                              M.borrow (|
                                Pointer.Kind.MutPointer,
                                M.deref (| M.read (| self |) |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_slice_mut_unchecked :
      M.IsAssociatedFunction.Trait Self "slice_mut_unchecked" slice_mut_unchecked.
    Admitted.
    Global Typeclasses Opaque slice_mut_unchecked.
    
    (*
        pub const fn split_at(&self, mid: usize) -> (&str, &str) {
            match self.split_at_checked(mid) {
                None => slice_error_fail(self, 0, mid),
                Some(pair) => pair,
            }
        }
    *)
    Definition split_at (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; mid ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mid := M.alloc (| mid |) in
          M.read (|
            M.match_operator (|
              Some
                (Ty.tuple
                  [
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                  ]),
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                    ],
                  M.get_associated_function (| Ty.path "str", "split_at_checked", [], [] |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.read (| mid |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                    M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::str::slice_error_fail", [], [] |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                            Value.Integer IntegerKind.Usize 0;
                            M.read (| mid |)
                          ]
                        |)
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let pair_ := M.copy (| γ0_0 |) in
                    pair_))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split_at :
      M.IsAssociatedFunction.Trait Self "split_at" split_at.
    Admitted.
    Global Typeclasses Opaque split_at.
    
    (*
        pub const fn split_at_mut(&mut self, mid: usize) -> (&mut str, &mut str) {
            // is_char_boundary checks that the index is in [0, .len()]
            if self.is_char_boundary(mid) {
                // SAFETY: just checked that `mid` is on a char boundary.
                unsafe { self.split_at_mut_unchecked(mid) }
            } else {
                slice_error_fail(self, 0, mid)
            }
        }
    *)
    Definition split_at_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; mid ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mid := M.alloc (| mid |) in
          M.read (|
            M.match_operator (|
              Some
                (Ty.tuple
                  [
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "str" ];
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "str" ]
                  ]),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            M.get_associated_function (|
                              Ty.path "str",
                              "is_char_boundary",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                              M.read (| mid |)
                            ]
                          |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&mut") [] [ Ty.path "str" ];
                            Ty.apply (Ty.path "&mut") [] [ Ty.path "str" ]
                          ],
                        M.get_associated_function (|
                          Ty.path "str",
                          "split_at_mut_unchecked",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                          M.read (| mid |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::str::slice_error_fail", [], [] |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                            Value.Integer IntegerKind.Usize 0;
                            M.read (| mid |)
                          ]
                        |)
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split_at_mut :
      M.IsAssociatedFunction.Trait Self "split_at_mut" split_at_mut.
    Admitted.
    Global Typeclasses Opaque split_at_mut.
    
    (*
        pub const fn split_at_checked(&self, mid: usize) -> Option<(&str, &str)> {
            // is_char_boundary checks that the index is in [0, .len()]
            if self.is_char_boundary(mid) {
                // SAFETY: just checked that `mid` is on a char boundary.
                Some(unsafe { self.split_at_unchecked(mid) })
            } else {
                None
            }
        }
    *)
    Definition split_at_checked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; mid ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mid := M.alloc (| mid |) in
          M.read (|
            M.match_operator (|
              Some
                (Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                      ]
                  ]),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            M.get_associated_function (|
                              Ty.path "str",
                              "is_char_boundary",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                              M.read (| mid |)
                            ]
                          |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                              ],
                            M.get_associated_function (|
                              Ty.path "str",
                              "split_at_unchecked",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                              M.read (| mid |)
                            ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split_at_checked :
      M.IsAssociatedFunction.Trait Self "split_at_checked" split_at_checked.
    Admitted.
    Global Typeclasses Opaque split_at_checked.
    
    (*
        pub const fn split_at_mut_checked(&mut self, mid: usize) -> Option<(&mut str, &mut str)> {
            // is_char_boundary checks that the index is in [0, .len()]
            if self.is_char_boundary(mid) {
                // SAFETY: just checked that `mid` is on a char boundary.
                Some(unsafe { self.split_at_mut_unchecked(mid) })
            } else {
                None
            }
        }
    *)
    Definition split_at_mut_checked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; mid ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mid := M.alloc (| mid |) in
          M.read (|
            M.match_operator (|
              Some
                (Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&mut") [] [ Ty.path "str" ];
                        Ty.apply (Ty.path "&mut") [] [ Ty.path "str" ]
                      ]
                  ]),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            M.get_associated_function (|
                              Ty.path "str",
                              "is_char_boundary",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                              M.read (| mid |)
                            ]
                          |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "&mut") [] [ Ty.path "str" ];
                                Ty.apply (Ty.path "&mut") [] [ Ty.path "str" ]
                              ],
                            M.get_associated_function (|
                              Ty.path "str",
                              "split_at_mut_unchecked",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                              M.read (| mid |)
                            ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split_at_mut_checked :
      M.IsAssociatedFunction.Trait Self "split_at_mut_checked" split_at_mut_checked.
    Admitted.
    Global Typeclasses Opaque split_at_mut_checked.
    
    (*
        const unsafe fn split_at_unchecked(&self, mid: usize) -> (&str, &str) {
            let len = self.len();
            let ptr = self.as_ptr();
            // SAFETY: caller guarantees `mid` is on a char boundary.
            unsafe {
                (
                    from_utf8_unchecked(slice::from_raw_parts(ptr, mid)),
                    from_utf8_unchecked(slice::from_raw_parts(ptr.add(mid), len - mid)),
                )
            }
        }
    *)
    Definition split_at_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; mid ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mid := M.alloc (| mid |) in
          M.read (|
            let~ len : Ty.path "usize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (| Ty.path "str", "len", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ ptr : Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                  M.get_associated_function (| Ty.path "str", "as_ptr", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            M.alloc (|
              Value.Tuple
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_function (| "core::str::converts::from_utf8_unchecked", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_function (|
                                  "core::slice::raw::from_raw_parts",
                                  [],
                                  [ Ty.path "u8" ]
                                |),
                                [ M.read (| ptr |); M.read (| mid |) ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_function (| "core::str::converts::from_utf8_unchecked", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_function (|
                                  "core::slice::raw::from_raw_parts",
                                  [],
                                  [ Ty.path "u8" ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                                      "add",
                                      [],
                                      []
                                    |),
                                    [ M.read (| ptr |); M.read (| mid |) ]
                                  |);
                                  BinOp.Wrap.sub (| M.read (| len |), M.read (| mid |) |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split_at_unchecked :
      M.IsAssociatedFunction.Trait Self "split_at_unchecked" split_at_unchecked.
    Admitted.
    Global Typeclasses Opaque split_at_unchecked.
    
    (*
        const unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut str, &mut str) {
            let len = self.len();
            let ptr = self.as_mut_ptr();
            // SAFETY: caller guarantees `mid` is on a char boundary.
            unsafe {
                (
                    from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr, mid)),
                    from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr.add(mid), len - mid)),
                )
            }
        }
    *)
    Definition split_at_mut_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; mid ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mid := M.alloc (| mid |) in
          M.read (|
            let~ len : Ty.path "usize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (| Ty.path "str", "len", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ ptr : Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                  M.get_associated_function (| Ty.path "str", "as_mut_ptr", [], [] |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            M.alloc (|
              Value.Tuple
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&mut") [] [ Ty.path "str" ],
                        M.get_function (| "core::str::converts::from_utf8_unchecked_mut", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_function (|
                                  "core::slice::raw::from_raw_parts_mut",
                                  [],
                                  [ Ty.path "u8" ]
                                |),
                                [ M.read (| ptr |); M.read (| mid |) ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&mut") [] [ Ty.path "str" ],
                        M.get_function (| "core::str::converts::from_utf8_unchecked_mut", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_function (|
                                  "core::slice::raw::from_raw_parts_mut",
                                  [],
                                  [ Ty.path "u8" ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                      "add",
                                      [],
                                      []
                                    |),
                                    [ M.read (| ptr |); M.read (| mid |) ]
                                  |);
                                  BinOp.Wrap.sub (| M.read (| len |), M.read (| mid |) |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split_at_mut_unchecked :
      M.IsAssociatedFunction.Trait Self "split_at_mut_unchecked" split_at_mut_unchecked.
    Admitted.
    Global Typeclasses Opaque split_at_mut_unchecked.
    
    (*
        pub fn chars(&self) -> Chars<'_> {
            Chars { iter: self.as_bytes().iter() }
        }
    *)
    Definition chars (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "core::str::iter::Chars"
            [
              ("iter",
                M.call_closure (|
                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                    "iter",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                          M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_chars : M.IsAssociatedFunction.Trait Self "chars" chars.
    Admitted.
    Global Typeclasses Opaque chars.
    
    (*
        pub fn char_indices(&self) -> CharIndices<'_> {
            CharIndices { front_offset: 0, iter: self.chars() }
        }
    *)
    Definition char_indices (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "core::str::iter::CharIndices"
            [
              ("front_offset", Value.Integer IntegerKind.Usize 0);
              ("iter",
                M.call_closure (|
                  Ty.path "core::str::iter::Chars",
                  M.get_associated_function (| Ty.path "str", "chars", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_char_indices :
      M.IsAssociatedFunction.Trait Self "char_indices" char_indices.
    Admitted.
    Global Typeclasses Opaque char_indices.
    
    (*
        pub fn bytes(&self) -> Bytes<'_> {
            Bytes(self.as_bytes().iter().copied())
        }
    *)
    Definition bytes (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::str::iter::Bytes"
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::copied::Copied")
                  []
                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ] ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                  [],
                  [],
                  "copied",
                  [],
                  [ Ty.path "u8" ]
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                      "iter",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_bytes : M.IsAssociatedFunction.Trait Self "bytes" bytes.
    Admitted.
    Global Typeclasses Opaque bytes.
    
    (*
        pub fn split_whitespace(&self) -> SplitWhitespace<'_> {
            SplitWhitespace { inner: self.split(IsWhitespace).filter(IsNotEmpty) }
        }
    *)
    Definition split_whitespace (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "core::str::iter::SplitWhitespace"
            [
              ("inner",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::filter::Filter")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::str::iter::Split")
                        []
                        [ Ty.path "core::str::IsWhitespace" ];
                      Ty.path "core::str::IsNotEmpty"
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::str::iter::Split")
                      []
                      [ Ty.path "core::str::IsWhitespace" ],
                    [],
                    [],
                    "filter",
                    [],
                    [ Ty.path "core::str::IsNotEmpty" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::str::iter::Split")
                        []
                        [ Ty.path "core::str::IsWhitespace" ],
                      M.get_associated_function (|
                        Ty.path "str",
                        "split",
                        [],
                        [ Ty.path "core::str::IsWhitespace" ]
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        Value.StructTuple "core::str::IsWhitespace" []
                      ]
                    |);
                    Value.StructTuple "core::str::IsNotEmpty" []
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split_whitespace :
      M.IsAssociatedFunction.Trait Self "split_whitespace" split_whitespace.
    Admitted.
    Global Typeclasses Opaque split_whitespace.
    
    (*
        pub fn split_ascii_whitespace(&self) -> SplitAsciiWhitespace<'_> {
            let inner =
                self.as_bytes().split(IsAsciiWhitespace).filter(BytesIsNotEmpty).map(UnsafeBytesToStr);
            SplitAsciiWhitespace { inner }
        }
    *)
    Definition split_ascii_whitespace (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ inner :
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::filter::Filter")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Split")
                          []
                          [ Ty.path "u8"; Ty.path "core::str::IsAsciiWhitespace" ];
                        Ty.path "core::str::BytesIsNotEmpty"
                      ];
                    Ty.path "core::str::UnsafeBytesToStr"
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::filter::Filter")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Split")
                            []
                            [ Ty.path "u8"; Ty.path "core::str::IsAsciiWhitespace" ];
                          Ty.path "core::str::BytesIsNotEmpty"
                        ];
                      Ty.path "core::str::UnsafeBytesToStr"
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::filter::Filter")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Split")
                          []
                          [ Ty.path "u8"; Ty.path "core::str::IsAsciiWhitespace" ];
                        Ty.path "core::str::BytesIsNotEmpty"
                      ],
                    [],
                    [],
                    "map",
                    [],
                    [
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                      Ty.path "core::str::UnsafeBytesToStr"
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::filter::Filter")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Split")
                            []
                            [ Ty.path "u8"; Ty.path "core::str::IsAsciiWhitespace" ];
                          Ty.path "core::str::BytesIsNotEmpty"
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::Split")
                          []
                          [ Ty.path "u8"; Ty.path "core::str::IsAsciiWhitespace" ],
                        [],
                        [],
                        "filter",
                        [],
                        [ Ty.path "core::str::BytesIsNotEmpty" ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::slice::iter::Split")
                            []
                            [ Ty.path "u8"; Ty.path "core::str::IsAsciiWhitespace" ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                            "split",
                            [],
                            [ Ty.path "core::str::IsAsciiWhitespace" ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                  M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |)
                              |)
                            |);
                            Value.StructTuple "core::str::IsAsciiWhitespace" []
                          ]
                        |);
                        Value.StructTuple "core::str::BytesIsNotEmpty" []
                      ]
                    |);
                    Value.StructTuple "core::str::UnsafeBytesToStr" []
                  ]
                |)
              |) in
            M.alloc (|
              Value.StructRecord
                "core::str::iter::SplitAsciiWhitespace"
                [ ("inner", M.read (| inner |)) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split_ascii_whitespace :
      M.IsAssociatedFunction.Trait Self "split_ascii_whitespace" split_ascii_whitespace.
    Admitted.
    Global Typeclasses Opaque split_ascii_whitespace.
    
    (*
        pub fn lines(&self) -> Lines<'_> {
            Lines(self.split_inclusive('\n').map(LinesMap))
        }
    *)
    Definition lines (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::str::iter::Lines"
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply (Ty.path "core::str::iter::SplitInclusive") [] [ Ty.path "char" ];
                    Ty.path "core::str::LinesMap"
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::str::iter::SplitInclusive") [] [ Ty.path "char" ],
                  [],
                  [],
                  "map",
                  [],
                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ]; Ty.path "core::str::LinesMap" ]
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "core::str::iter::SplitInclusive") [] [ Ty.path "char" ],
                    M.get_associated_function (|
                      Ty.path "str",
                      "split_inclusive",
                      [],
                      [ Ty.path "char" ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      Value.UnicodeChar 10
                    ]
                  |);
                  Value.StructTuple "core::str::LinesMap" []
                ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_lines : M.IsAssociatedFunction.Trait Self "lines" lines.
    Admitted.
    Global Typeclasses Opaque lines.
    
    (*
        pub fn lines_any(&self) -> LinesAny<'_> {
            LinesAny(self.lines())
        }
    *)
    Definition lines_any (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple
            "core::str::iter::LinesAny"
            [
              M.call_closure (|
                Ty.path "core::str::iter::Lines",
                M.get_associated_function (| Ty.path "str", "lines", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_lines_any :
      M.IsAssociatedFunction.Trait Self "lines_any" lines_any.
    Admitted.
    Global Typeclasses Opaque lines_any.
    
    (*
        pub fn encode_utf16(&self) -> EncodeUtf16<'_> {
            EncodeUtf16 { chars: self.chars(), extra: 0 }
        }
    *)
    Definition encode_utf16 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "core::str::iter::EncodeUtf16"
            [
              ("chars",
                M.call_closure (|
                  Ty.path "core::str::iter::Chars",
                  M.get_associated_function (| Ty.path "str", "chars", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |));
              ("extra", Value.Integer IntegerKind.U16 0)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_encode_utf16 :
      M.IsAssociatedFunction.Trait Self "encode_utf16" encode_utf16.
    Admitted.
    Global Typeclasses Opaque encode_utf16.
    
    (*
        pub fn contains<P: Pattern>(&self, pat: P) -> bool {
            pat.is_contained_in(self)
        }
    *)
    Definition contains (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (|
              "core::str::pattern::Pattern",
              P,
              [],
              [],
              "is_contained_in",
              [],
              []
            |),
            [ M.read (| pat |); M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_contains :
      M.IsAssociatedFunction.Trait Self "contains" contains.
    Admitted.
    Global Typeclasses Opaque contains.
    
    (*
        pub fn starts_with<P: Pattern>(&self, pat: P) -> bool {
            pat.is_prefix_of(self)
        }
    *)
    Definition starts_with (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (|
              "core::str::pattern::Pattern",
              P,
              [],
              [],
              "is_prefix_of",
              [],
              []
            |),
            [ M.read (| pat |); M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_starts_with :
      M.IsAssociatedFunction.Trait Self "starts_with" starts_with.
    Admitted.
    Global Typeclasses Opaque starts_with.
    
    (*
        pub fn ends_with<P: Pattern>(&self, pat: P) -> bool
        where
            for<'a> P::Searcher<'a>: ReverseSearcher<'a>,
        {
            pat.is_suffix_of(self)
        }
    *)
    Definition ends_with (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (|
              "core::str::pattern::Pattern",
              P,
              [],
              [],
              "is_suffix_of",
              [],
              []
            |),
            [ M.read (| pat |); M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_ends_with :
      M.IsAssociatedFunction.Trait Self "ends_with" ends_with.
    Admitted.
    Global Typeclasses Opaque ends_with.
    
    (*
        pub fn find<P: Pattern>(&self, pat: P) -> Option<usize> {
            pat.into_searcher(self).next_match().map(|(i, _)| i)
        }
    *)
    Definition find (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
              "map",
              [],
              [
                Ty.path "usize";
                Ty.function
                  [ Ty.tuple [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ] ]
                  (Ty.path "usize")
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                M.get_trait_method (|
                  "core::str::pattern::Searcher",
                  Ty.associated_in_trait "core::str::pattern::Pattern" [] [] P "Searcher",
                  [],
                  [],
                  "next_match",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.alloc (|
                      M.call_closure (|
                        Ty.associated_in_trait "core::str::pattern::Pattern" [] [] P "Searcher",
                        M.get_trait_method (|
                          "core::str::pattern::Pattern",
                          P,
                          [],
                          [],
                          "into_searcher",
                          [],
                          []
                        |),
                        [
                          M.read (| pat |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                        ]
                      |)
                    |)
                  |)
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Some
                            (Ty.function
                              [ Ty.tuple [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ] ]
                              (Ty.path "usize")),
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let i := M.copy (| γ0_0 |) in
                                M.read (| i |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_find : M.IsAssociatedFunction.Trait Self "find" find.
    Admitted.
    Global Typeclasses Opaque find.
    
    (*
        pub fn rfind<P: Pattern>(&self, pat: P) -> Option<usize>
        where
            for<'a> P::Searcher<'a>: ReverseSearcher<'a>,
        {
            pat.into_searcher(self).next_match_back().map(|(i, _)| i)
        }
    *)
    Definition rfind (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
              "map",
              [],
              [
                Ty.path "usize";
                Ty.function
                  [ Ty.tuple [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ] ]
                  (Ty.path "usize")
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                M.get_trait_method (|
                  "core::str::pattern::ReverseSearcher",
                  Ty.associated_in_trait "core::str::pattern::Pattern" [] [] P "Searcher",
                  [],
                  [],
                  "next_match_back",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.alloc (|
                      M.call_closure (|
                        Ty.associated_in_trait "core::str::pattern::Pattern" [] [] P "Searcher",
                        M.get_trait_method (|
                          "core::str::pattern::Pattern",
                          P,
                          [],
                          [],
                          "into_searcher",
                          [],
                          []
                        |),
                        [
                          M.read (| pat |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                        ]
                      |)
                    |)
                  |)
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Some
                            (Ty.function
                              [ Ty.tuple [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ] ]
                              (Ty.path "usize")),
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let i := M.copy (| γ0_0 |) in
                                M.read (| i |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_rfind : M.IsAssociatedFunction.Trait Self "rfind" rfind.
    Admitted.
    Global Typeclasses Opaque rfind.
    
    (*
        pub fn split<P: Pattern>(&self, pat: P) -> Split<'_, P> {
            Split(SplitInternal {
                start: 0,
                end: self.len(),
                matcher: pat.into_searcher(self),
                allow_trailing_empty: true,
                finished: false,
            })
        }
    *)
    Definition split (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          Value.StructTuple
            "core::str::iter::Split"
            [
              Value.StructRecord
                "core::str::iter::SplitInternal"
                [
                  ("start", Value.Integer IntegerKind.Usize 0);
                  ("end_",
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (| Ty.path "str", "len", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |));
                  ("matcher",
                    M.call_closure (|
                      Ty.associated_in_trait "core::str::pattern::Pattern" [] [] P "Searcher",
                      M.get_trait_method (|
                        "core::str::pattern::Pattern",
                        P,
                        [],
                        [],
                        "into_searcher",
                        [],
                        []
                      |),
                      [
                        M.read (| pat |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                      ]
                    |));
                  ("allow_trailing_empty", Value.Bool true);
                  ("finished", Value.Bool false)
                ]
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split : M.IsAssociatedFunction.Trait Self "split" split.
    Admitted.
    Global Typeclasses Opaque split.
    
    (*
        pub fn split_inclusive<P: Pattern>(&self, pat: P) -> SplitInclusive<'_, P> {
            SplitInclusive(SplitInternal {
                start: 0,
                end: self.len(),
                matcher: pat.into_searcher(self),
                allow_trailing_empty: false,
                finished: false,
            })
        }
    *)
    Definition split_inclusive (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          Value.StructTuple
            "core::str::iter::SplitInclusive"
            [
              Value.StructRecord
                "core::str::iter::SplitInternal"
                [
                  ("start", Value.Integer IntegerKind.Usize 0);
                  ("end_",
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (| Ty.path "str", "len", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |));
                  ("matcher",
                    M.call_closure (|
                      Ty.associated_in_trait "core::str::pattern::Pattern" [] [] P "Searcher",
                      M.get_trait_method (|
                        "core::str::pattern::Pattern",
                        P,
                        [],
                        [],
                        "into_searcher",
                        [],
                        []
                      |),
                      [
                        M.read (| pat |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                      ]
                    |));
                  ("allow_trailing_empty", Value.Bool false);
                  ("finished", Value.Bool false)
                ]
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split_inclusive :
      M.IsAssociatedFunction.Trait Self "split_inclusive" split_inclusive.
    Admitted.
    Global Typeclasses Opaque split_inclusive.
    
    (*
        pub fn rsplit<P: Pattern>(&self, pat: P) -> RSplit<'_, P>
        where
            for<'a> P::Searcher<'a>: ReverseSearcher<'a>,
        {
            RSplit(self.split(pat).0)
        }
    *)
    Definition rsplit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          Value.StructTuple
            "core::str::iter::RSplit"
            [
              M.read (|
                M.SubPointer.get_struct_tuple_field (|
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::str::iter::Split") [] [ P ],
                      M.get_associated_function (| Ty.path "str", "split", [], [ P ] |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.read (| pat |)
                      ]
                    |)
                  |),
                  "core::str::iter::Split",
                  0
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_rsplit : M.IsAssociatedFunction.Trait Self "rsplit" rsplit.
    Admitted.
    Global Typeclasses Opaque rsplit.
    
    (*
        pub fn split_terminator<P: Pattern>(&self, pat: P) -> SplitTerminator<'_, P> {
            SplitTerminator(SplitInternal { allow_trailing_empty: false, ..self.split(pat).0 })
        }
    *)
    Definition split_terminator (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          Value.StructTuple
            "core::str::iter::SplitTerminator"
            [
              M.struct_record_update
                (M.read (|
                  M.SubPointer.get_struct_tuple_field (|
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "core::str::iter::Split") [] [ P ],
                        M.get_associated_function (| Ty.path "str", "split", [], [ P ] |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                          M.read (| pat |)
                        ]
                      |)
                    |),
                    "core::str::iter::Split",
                    0
                  |)
                |))
                [ ("allow_trailing_empty", Value.Bool false) ]
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split_terminator :
      M.IsAssociatedFunction.Trait Self "split_terminator" split_terminator.
    Admitted.
    Global Typeclasses Opaque split_terminator.
    
    (*
        pub fn rsplit_terminator<P: Pattern>(&self, pat: P) -> RSplitTerminator<'_, P>
        where
            for<'a> P::Searcher<'a>: ReverseSearcher<'a>,
        {
            RSplitTerminator(self.split_terminator(pat).0)
        }
    *)
    Definition rsplit_terminator (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          Value.StructTuple
            "core::str::iter::RSplitTerminator"
            [
              M.read (|
                M.SubPointer.get_struct_tuple_field (|
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::str::iter::SplitTerminator") [] [ P ],
                      M.get_associated_function (| Ty.path "str", "split_terminator", [], [ P ] |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.read (| pat |)
                      ]
                    |)
                  |),
                  "core::str::iter::SplitTerminator",
                  0
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_rsplit_terminator :
      M.IsAssociatedFunction.Trait Self "rsplit_terminator" rsplit_terminator.
    Admitted.
    Global Typeclasses Opaque rsplit_terminator.
    
    (*
        pub fn splitn<P: Pattern>(&self, n: usize, pat: P) -> SplitN<'_, P> {
            SplitN(SplitNInternal { iter: self.split(pat).0, count: n })
        }
    *)
    Definition splitn (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; n; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let n := M.alloc (| n |) in
          let pat := M.alloc (| pat |) in
          Value.StructTuple
            "core::str::iter::SplitN"
            [
              Value.StructRecord
                "core::str::iter::SplitNInternal"
                [
                  ("iter",
                    M.read (|
                      M.SubPointer.get_struct_tuple_field (|
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply (Ty.path "core::str::iter::Split") [] [ P ],
                            M.get_associated_function (| Ty.path "str", "split", [], [ P ] |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                              M.read (| pat |)
                            ]
                          |)
                        |),
                        "core::str::iter::Split",
                        0
                      |)
                    |));
                  ("count", M.read (| n |))
                ]
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_splitn : M.IsAssociatedFunction.Trait Self "splitn" splitn.
    Admitted.
    Global Typeclasses Opaque splitn.
    
    (*
        pub fn rsplitn<P: Pattern>(&self, n: usize, pat: P) -> RSplitN<'_, P>
        where
            for<'a> P::Searcher<'a>: ReverseSearcher<'a>,
        {
            RSplitN(self.splitn(n, pat).0)
        }
    *)
    Definition rsplitn (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; n; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let n := M.alloc (| n |) in
          let pat := M.alloc (| pat |) in
          Value.StructTuple
            "core::str::iter::RSplitN"
            [
              M.read (|
                M.SubPointer.get_struct_tuple_field (|
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::str::iter::SplitN") [] [ P ],
                      M.get_associated_function (| Ty.path "str", "splitn", [], [ P ] |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.read (| n |);
                        M.read (| pat |)
                      ]
                    |)
                  |),
                  "core::str::iter::SplitN",
                  0
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_rsplitn :
      M.IsAssociatedFunction.Trait Self "rsplitn" rsplitn.
    Admitted.
    Global Typeclasses Opaque rsplitn.
    
    (*
        pub fn split_once<P: Pattern>(&self, delimiter: P) -> Option<(&'_ str, &'_ str)> {
            let (start, end) = delimiter.into_searcher(self).next_match()?;
            // SAFETY: `Searcher` is known to return valid indices.
            unsafe { Some((self.get_unchecked(..start), self.get_unchecked(end..))) }
        }
    *)
    Definition split_once (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; delimiter ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let delimiter := M.alloc (| delimiter |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  None,
                  M.match_operator (|
                    Some (Ty.tuple [ Ty.path "usize"; Ty.path "usize" ]),
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "core::convert::Infallible" ];
                            Ty.tuple [ Ty.path "usize"; Ty.path "usize" ]
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                            M.get_trait_method (|
                              "core::str::pattern::Searcher",
                              Ty.associated_in_trait
                                "core::str::pattern::Pattern"
                                []
                                []
                                P
                                "Searcher",
                              [],
                              [],
                              "next_match",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "core::str::pattern::Pattern"
                                      []
                                      []
                                      P
                                      "Searcher",
                                    M.get_trait_method (|
                                      "core::str::pattern::Pattern",
                                      P,
                                      [],
                                      [],
                                      "into_searcher",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| delimiter |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                                              Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                            ]
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "core::convert::Infallible" ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let start := M.copy (| γ0_0 |) in
                        let end_ := M.copy (| γ0_1 |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::option::Option::Some"
                            [
                              Value.Tuple
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                        M.get_associated_function (|
                                          Ty.path "str",
                                          "get_unchecked",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeTo")
                                              []
                                              [ Ty.path "usize" ]
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| self |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeTo"
                                            [ ("end_", M.read (| start |)) ]
                                        ]
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                        M.get_associated_function (|
                                          Ty.path "str",
                                          "get_unchecked",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeFrom")
                                              []
                                              [ Ty.path "usize" ]
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| self |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeFrom"
                                            [ ("start", M.read (| end_ |)) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                            ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_split_once :
      M.IsAssociatedFunction.Trait Self "split_once" split_once.
    Admitted.
    Global Typeclasses Opaque split_once.
    
    (*
        pub fn rsplit_once<P: Pattern>(&self, delimiter: P) -> Option<(&'_ str, &'_ str)>
        where
            for<'a> P::Searcher<'a>: ReverseSearcher<'a>,
        {
            let (start, end) = delimiter.into_searcher(self).next_match_back()?;
            // SAFETY: `Searcher` is known to return valid indices.
            unsafe { Some((self.get_unchecked(..start), self.get_unchecked(end..))) }
        }
    *)
    Definition rsplit_once (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; delimiter ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let delimiter := M.alloc (| delimiter |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  None,
                  M.match_operator (|
                    Some (Ty.tuple [ Ty.path "usize"; Ty.path "usize" ]),
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "core::convert::Infallible" ];
                            Ty.tuple [ Ty.path "usize"; Ty.path "usize" ]
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                            M.get_trait_method (|
                              "core::str::pattern::ReverseSearcher",
                              Ty.associated_in_trait
                                "core::str::pattern::Pattern"
                                []
                                []
                                P
                                "Searcher",
                              [],
                              [],
                              "next_match_back",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "core::str::pattern::Pattern"
                                      []
                                      []
                                      P
                                      "Searcher",
                                    M.get_trait_method (|
                                      "core::str::pattern::Pattern",
                                      P,
                                      [],
                                      [],
                                      "into_searcher",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| delimiter |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                                              Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                            ]
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "core::convert::Infallible" ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let start := M.copy (| γ0_0 |) in
                        let end_ := M.copy (| γ0_1 |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::option::Option::Some"
                            [
                              Value.Tuple
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                        M.get_associated_function (|
                                          Ty.path "str",
                                          "get_unchecked",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeTo")
                                              []
                                              [ Ty.path "usize" ]
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| self |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeTo"
                                            [ ("end_", M.read (| start |)) ]
                                        ]
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                        M.get_associated_function (|
                                          Ty.path "str",
                                          "get_unchecked",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeFrom")
                                              []
                                              [ Ty.path "usize" ]
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| self |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeFrom"
                                            [ ("start", M.read (| end_ |)) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                            ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_rsplit_once :
      M.IsAssociatedFunction.Trait Self "rsplit_once" rsplit_once.
    Admitted.
    Global Typeclasses Opaque rsplit_once.
    
    (*
        pub fn matches<P: Pattern>(&self, pat: P) -> Matches<'_, P> {
            Matches(MatchesInternal(pat.into_searcher(self)))
        }
    *)
    Definition matches (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          Value.StructTuple
            "core::str::iter::Matches"
            [
              Value.StructTuple
                "core::str::iter::MatchesInternal"
                [
                  M.call_closure (|
                    Ty.associated_in_trait "core::str::pattern::Pattern" [] [] P "Searcher",
                    M.get_trait_method (|
                      "core::str::pattern::Pattern",
                      P,
                      [],
                      [],
                      "into_searcher",
                      [],
                      []
                    |),
                    [
                      M.read (| pat |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                    ]
                  |)
                ]
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_matches :
      M.IsAssociatedFunction.Trait Self "matches" matches.
    Admitted.
    Global Typeclasses Opaque matches.
    
    (*
        pub fn rmatches<P: Pattern>(&self, pat: P) -> RMatches<'_, P>
        where
            for<'a> P::Searcher<'a>: ReverseSearcher<'a>,
        {
            RMatches(self.matches(pat).0)
        }
    *)
    Definition rmatches (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          Value.StructTuple
            "core::str::iter::RMatches"
            [
              M.read (|
                M.SubPointer.get_struct_tuple_field (|
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::str::iter::Matches") [] [ P ],
                      M.get_associated_function (| Ty.path "str", "matches", [], [ P ] |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.read (| pat |)
                      ]
                    |)
                  |),
                  "core::str::iter::Matches",
                  0
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_rmatches :
      M.IsAssociatedFunction.Trait Self "rmatches" rmatches.
    Admitted.
    Global Typeclasses Opaque rmatches.
    
    (*
        pub fn match_indices<P: Pattern>(&self, pat: P) -> MatchIndices<'_, P> {
            MatchIndices(MatchIndicesInternal(pat.into_searcher(self)))
        }
    *)
    Definition match_indices (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          Value.StructTuple
            "core::str::iter::MatchIndices"
            [
              Value.StructTuple
                "core::str::iter::MatchIndicesInternal"
                [
                  M.call_closure (|
                    Ty.associated_in_trait "core::str::pattern::Pattern" [] [] P "Searcher",
                    M.get_trait_method (|
                      "core::str::pattern::Pattern",
                      P,
                      [],
                      [],
                      "into_searcher",
                      [],
                      []
                    |),
                    [
                      M.read (| pat |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                    ]
                  |)
                ]
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_match_indices :
      M.IsAssociatedFunction.Trait Self "match_indices" match_indices.
    Admitted.
    Global Typeclasses Opaque match_indices.
    
    (*
        pub fn rmatch_indices<P: Pattern>(&self, pat: P) -> RMatchIndices<'_, P>
        where
            for<'a> P::Searcher<'a>: ReverseSearcher<'a>,
        {
            RMatchIndices(self.match_indices(pat).0)
        }
    *)
    Definition rmatch_indices (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          Value.StructTuple
            "core::str::iter::RMatchIndices"
            [
              M.read (|
                M.SubPointer.get_struct_tuple_field (|
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::str::iter::MatchIndices") [] [ P ],
                      M.get_associated_function (| Ty.path "str", "match_indices", [], [ P ] |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.read (| pat |)
                      ]
                    |)
                  |),
                  "core::str::iter::MatchIndices",
                  0
                |)
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_rmatch_indices :
      M.IsAssociatedFunction.Trait Self "rmatch_indices" rmatch_indices.
    Admitted.
    Global Typeclasses Opaque rmatch_indices.
    
    (*
        pub fn trim(&self) -> &str {
            self.trim_matches(|c: char| c.is_whitespace())
        }
    *)
    Definition trim (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                M.get_associated_function (|
                  Ty.path "str",
                  "trim_matches",
                  [],
                  [ Ty.function [ Ty.tuple [ Ty.path "char" ] ] (Ty.path "bool") ]
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Some (Ty.function [ Ty.tuple [ Ty.path "char" ] ] (Ty.path "bool")),
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let c := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.path "char",
                                        "is_whitespace",
                                        [],
                                        []
                                      |),
                                      [ M.read (| c |) ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_trim : M.IsAssociatedFunction.Trait Self "trim" trim.
    Admitted.
    Global Typeclasses Opaque trim.
    
    (*
        pub fn trim_start(&self) -> &str {
            self.trim_start_matches(|c: char| c.is_whitespace())
        }
    *)
    Definition trim_start (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                M.get_associated_function (|
                  Ty.path "str",
                  "trim_start_matches",
                  [],
                  [ Ty.function [ Ty.tuple [ Ty.path "char" ] ] (Ty.path "bool") ]
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Some (Ty.function [ Ty.tuple [ Ty.path "char" ] ] (Ty.path "bool")),
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let c := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.path "char",
                                        "is_whitespace",
                                        [],
                                        []
                                      |),
                                      [ M.read (| c |) ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_trim_start :
      M.IsAssociatedFunction.Trait Self "trim_start" trim_start.
    Admitted.
    Global Typeclasses Opaque trim_start.
    
    (*
        pub fn trim_end(&self) -> &str {
            self.trim_end_matches(|c: char| c.is_whitespace())
        }
    *)
    Definition trim_end (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                M.get_associated_function (|
                  Ty.path "str",
                  "trim_end_matches",
                  [],
                  [ Ty.function [ Ty.tuple [ Ty.path "char" ] ] (Ty.path "bool") ]
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Some (Ty.function [ Ty.tuple [ Ty.path "char" ] ] (Ty.path "bool")),
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let c := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.path "char",
                                        "is_whitespace",
                                        [],
                                        []
                                      |),
                                      [ M.read (| c |) ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_trim_end :
      M.IsAssociatedFunction.Trait Self "trim_end" trim_end.
    Admitted.
    Global Typeclasses Opaque trim_end.
    
    (*
        pub fn trim_left(&self) -> &str {
            self.trim_start()
        }
    *)
    Definition trim_left (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                M.get_associated_function (| Ty.path "str", "trim_start", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_trim_left :
      M.IsAssociatedFunction.Trait Self "trim_left" trim_left.
    Admitted.
    Global Typeclasses Opaque trim_left.
    
    (*
        pub fn trim_right(&self) -> &str {
            self.trim_end()
        }
    *)
    Definition trim_right (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                M.get_associated_function (| Ty.path "str", "trim_end", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_trim_right :
      M.IsAssociatedFunction.Trait Self "trim_right" trim_right.
    Admitted.
    Global Typeclasses Opaque trim_right.
    
    (*
        pub fn trim_matches<P: Pattern>(&self, pat: P) -> &str
        where
            for<'a> P::Searcher<'a>: DoubleEndedSearcher<'a>,
        {
            let mut i = 0;
            let mut j = 0;
            let mut matcher = pat.into_searcher(self);
            if let Some((a, b)) = matcher.next_reject() {
                i = a;
                j = b; // Remember earliest known match, correct it below if
                // last match is different
            }
            if let Some((_, b)) = matcher.next_reject_back() {
                j = b;
            }
            // SAFETY: `Searcher` is known to return valid indices.
            unsafe { self.get_unchecked(i..j) }
        }
    *)
    Definition trim_matches (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          M.read (|
            let~ i : Ty.path "usize" := M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
            let~ j : Ty.path "usize" := M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
            let~ matcher :
                Ty.associated_in_trait "core::str::pattern::Pattern" [] [] P "Searcher" :=
              M.alloc (|
                M.call_closure (|
                  Ty.associated_in_trait "core::str::pattern::Pattern" [] [] P "Searcher",
                  M.get_trait_method (|
                    "core::str::pattern::Pattern",
                    P,
                    [],
                    [],
                    "into_searcher",
                    [],
                    []
                  |),
                  [
                    M.read (| pat |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                            M.get_trait_method (|
                              "core::str::pattern::Searcher",
                              Ty.associated_in_trait
                                "core::str::pattern::Pattern"
                                []
                                []
                                P
                                "Searcher",
                              [],
                              [],
                              "next_reject",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, matcher |) ]
                          |)
                        |) in
                      let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                      let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                      let a := M.copy (| γ1_0 |) in
                      let b := M.copy (| γ1_1 |) in
                      let~ _ : Ty.tuple [] := M.alloc (| M.write (| i, M.read (| a |) |) |) in
                      let~ _ : Ty.tuple [] := M.alloc (| M.write (| j, M.read (| b |) |) |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                            M.get_trait_method (|
                              "core::str::pattern::ReverseSearcher",
                              Ty.associated_in_trait
                                "core::str::pattern::Pattern"
                                []
                                []
                                P
                                "Searcher",
                              [],
                              [],
                              "next_reject_back",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, matcher |) ]
                          |)
                        |) in
                      let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                      let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                      let b := M.copy (| γ1_1 |) in
                      let~ _ : Ty.tuple [] := M.alloc (| M.write (| j, M.read (| b |) |) |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                    M.get_associated_function (|
                      Ty.path "str",
                      "get_unchecked",
                      [],
                      [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      Value.StructRecord
                        "core::ops::range::Range"
                        [ ("start", M.read (| i |)); ("end_", M.read (| j |)) ]
                    ]
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_trim_matches :
      M.IsAssociatedFunction.Trait Self "trim_matches" trim_matches.
    Admitted.
    Global Typeclasses Opaque trim_matches.
    
    (*
        pub fn trim_start_matches<P: Pattern>(&self, pat: P) -> &str {
            let mut i = self.len();
            let mut matcher = pat.into_searcher(self);
            if let Some((a, _)) = matcher.next_reject() {
                i = a;
            }
            // SAFETY: `Searcher` is known to return valid indices.
            unsafe { self.get_unchecked(i..self.len()) }
        }
    *)
    Definition trim_start_matches (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          M.read (|
            let~ i : Ty.path "usize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (| Ty.path "str", "len", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ matcher :
                Ty.associated_in_trait "core::str::pattern::Pattern" [] [] P "Searcher" :=
              M.alloc (|
                M.call_closure (|
                  Ty.associated_in_trait "core::str::pattern::Pattern" [] [] P "Searcher",
                  M.get_trait_method (|
                    "core::str::pattern::Pattern",
                    P,
                    [],
                    [],
                    "into_searcher",
                    [],
                    []
                  |),
                  [
                    M.read (| pat |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                            M.get_trait_method (|
                              "core::str::pattern::Searcher",
                              Ty.associated_in_trait
                                "core::str::pattern::Pattern"
                                []
                                []
                                P
                                "Searcher",
                              [],
                              [],
                              "next_reject",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, matcher |) ]
                          |)
                        |) in
                      let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                      let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                      let a := M.copy (| γ1_0 |) in
                      let~ _ : Ty.tuple [] := M.alloc (| M.write (| i, M.read (| a |) |) |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                    M.get_associated_function (|
                      Ty.path "str",
                      "get_unchecked",
                      [],
                      [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start", M.read (| i |));
                          ("end_",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (| Ty.path "str", "len", [], [] |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |))
                        ]
                    ]
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_trim_start_matches :
      M.IsAssociatedFunction.Trait Self "trim_start_matches" trim_start_matches.
    Admitted.
    Global Typeclasses Opaque trim_start_matches.
    
    (*
        pub fn strip_prefix<P: Pattern>(&self, prefix: P) -> Option<&str> {
            prefix.strip_prefix_of(self)
        }
    *)
    Definition strip_prefix (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; prefix ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let prefix := M.alloc (| prefix |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
            M.get_trait_method (|
              "core::str::pattern::Pattern",
              P,
              [],
              [],
              "strip_prefix_of",
              [],
              []
            |),
            [ M.read (| prefix |); M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_strip_prefix :
      M.IsAssociatedFunction.Trait Self "strip_prefix" strip_prefix.
    Admitted.
    Global Typeclasses Opaque strip_prefix.
    
    (*
        pub fn strip_suffix<P: Pattern>(&self, suffix: P) -> Option<&str>
        where
            for<'a> P::Searcher<'a>: ReverseSearcher<'a>,
        {
            suffix.strip_suffix_of(self)
        }
    *)
    Definition strip_suffix (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; suffix ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let suffix := M.alloc (| suffix |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
            M.get_trait_method (|
              "core::str::pattern::Pattern",
              P,
              [],
              [],
              "strip_suffix_of",
              [],
              []
            |),
            [ M.read (| suffix |); M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_strip_suffix :
      M.IsAssociatedFunction.Trait Self "strip_suffix" strip_suffix.
    Admitted.
    Global Typeclasses Opaque strip_suffix.
    
    (*
        pub fn trim_end_matches<P: Pattern>(&self, pat: P) -> &str
        where
            for<'a> P::Searcher<'a>: ReverseSearcher<'a>,
        {
            let mut j = 0;
            let mut matcher = pat.into_searcher(self);
            if let Some((_, b)) = matcher.next_reject_back() {
                j = b;
            }
            // SAFETY: `Searcher` is known to return valid indices.
            unsafe { self.get_unchecked(0..j) }
        }
    *)
    Definition trim_end_matches (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          M.read (|
            let~ j : Ty.path "usize" := M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
            let~ matcher :
                Ty.associated_in_trait "core::str::pattern::Pattern" [] [] P "Searcher" :=
              M.alloc (|
                M.call_closure (|
                  Ty.associated_in_trait "core::str::pattern::Pattern" [] [] P "Searcher",
                  M.get_trait_method (|
                    "core::str::pattern::Pattern",
                    P,
                    [],
                    [],
                    "into_searcher",
                    [],
                    []
                  |),
                  [
                    M.read (| pat |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                            M.get_trait_method (|
                              "core::str::pattern::ReverseSearcher",
                              Ty.associated_in_trait
                                "core::str::pattern::Pattern"
                                []
                                []
                                P
                                "Searcher",
                              [],
                              [],
                              "next_reject_back",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, matcher |) ]
                          |)
                        |) in
                      let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                      let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                      let b := M.copy (| γ1_1 |) in
                      let~ _ : Ty.tuple [] := M.alloc (| M.write (| j, M.read (| b |) |) |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                    M.get_associated_function (|
                      Ty.path "str",
                      "get_unchecked",
                      [],
                      [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      Value.StructRecord
                        "core::ops::range::Range"
                        [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", M.read (| j |)) ]
                    ]
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_trim_end_matches :
      M.IsAssociatedFunction.Trait Self "trim_end_matches" trim_end_matches.
    Admitted.
    Global Typeclasses Opaque trim_end_matches.
    
    (*
        pub fn trim_left_matches<P: Pattern>(&self, pat: P) -> &str {
            self.trim_start_matches(pat)
        }
    *)
    Definition trim_left_matches (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                M.get_associated_function (| Ty.path "str", "trim_start_matches", [], [ P ] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |); M.read (| pat |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_trim_left_matches :
      M.IsAssociatedFunction.Trait Self "trim_left_matches" trim_left_matches.
    Admitted.
    Global Typeclasses Opaque trim_left_matches.
    
    (*
        pub fn trim_right_matches<P: Pattern>(&self, pat: P) -> &str
        where
            for<'a> P::Searcher<'a>: ReverseSearcher<'a>,
        {
            self.trim_end_matches(pat)
        }
    *)
    Definition trim_right_matches (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ P ], [ self; pat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pat := M.alloc (| pat |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                M.get_associated_function (| Ty.path "str", "trim_end_matches", [], [ P ] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |); M.read (| pat |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_trim_right_matches :
      M.IsAssociatedFunction.Trait Self "trim_right_matches" trim_right_matches.
    Admitted.
    Global Typeclasses Opaque trim_right_matches.
    
    (*
        pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> {
            FromStr::from_str(self)
        }
    *)
    Definition parse (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ F ], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ F; Ty.associated_in_trait "core::str::traits::FromStr" [] [] F "Err" ],
            M.get_trait_method (| "core::str::traits::FromStr", F, [], [], "from_str", [], [] |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_parse : M.IsAssociatedFunction.Trait Self "parse" parse.
    Admitted.
    Global Typeclasses Opaque parse.
    
    (*
        pub const fn is_ascii(&self) -> bool {
            // We can treat each byte as character here: all multibyte characters
            // start with a byte that is not in the ASCII range, so we will stop
            // there already.
            self.as_bytes().is_ascii()
        }
    *)
    Definition is_ascii (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_associated_function (|
              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
              "is_ascii",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_is_ascii :
      M.IsAssociatedFunction.Trait Self "is_ascii" is_ascii.
    Admitted.
    Global Typeclasses Opaque is_ascii.
    
    (*
        pub const fn as_ascii(&self) -> Option<&[ascii::Char]> {
            // Like in `is_ascii`, we can work on the bytes directly.
            self.as_bytes().as_ascii()
        }
    *)
    Definition as_ascii (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "core::ascii::ascii_char::AsciiChar" ] ]
              ],
            M.get_associated_function (|
              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
              "as_ascii",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_ascii :
      M.IsAssociatedFunction.Trait Self "as_ascii" as_ascii.
    Admitted.
    Global Typeclasses Opaque as_ascii.
    
    (*
        pub const fn eq_ignore_ascii_case(&self, other: &str) -> bool {
            self.as_bytes().eq_ignore_ascii_case(other.as_bytes())
        }
    *)
    Definition eq_ignore_ascii_case (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_associated_function (|
              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
              "eq_ignore_ascii_case",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |)
              |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_eq_ignore_ascii_case :
      M.IsAssociatedFunction.Trait Self "eq_ignore_ascii_case" eq_ignore_ascii_case.
    Admitted.
    Global Typeclasses Opaque eq_ignore_ascii_case.
    
    (*
        pub const fn make_ascii_uppercase(&mut self) {
            // SAFETY: changing ASCII letters only does not invalidate UTF-8.
            let me = unsafe { self.as_bytes_mut() };
            me.make_ascii_uppercase()
        }
    *)
    Definition make_ascii_uppercase (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ me :
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] :=
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                      M.get_associated_function (| Ty.path "str", "as_bytes_mut", [], [] |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |)
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_associated_function (|
                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                  "make_ascii_uppercase",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| me |) |) |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_make_ascii_uppercase :
      M.IsAssociatedFunction.Trait Self "make_ascii_uppercase" make_ascii_uppercase.
    Admitted.
    Global Typeclasses Opaque make_ascii_uppercase.
    
    (*
        pub const fn make_ascii_lowercase(&mut self) {
            // SAFETY: changing ASCII letters only does not invalidate UTF-8.
            let me = unsafe { self.as_bytes_mut() };
            me.make_ascii_lowercase()
        }
    *)
    Definition make_ascii_lowercase (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ me :
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] :=
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                      M.get_associated_function (| Ty.path "str", "as_bytes_mut", [], [] |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |)
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_associated_function (|
                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                  "make_ascii_lowercase",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| me |) |) |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_make_ascii_lowercase :
      M.IsAssociatedFunction.Trait Self "make_ascii_lowercase" make_ascii_lowercase.
    Admitted.
    Global Typeclasses Opaque make_ascii_lowercase.
    
    (*
        pub const fn trim_ascii_start(&self) -> &str {
            // SAFETY: Removing ASCII characters from a `&str` does not invalidate
            // UTF-8.
            unsafe { core::str::from_utf8_unchecked(self.as_bytes().trim_ascii_start()) }
        }
    *)
    Definition trim_ascii_start (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                M.get_function (| "core::str::converts::from_utf8_unchecked", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                          "trim_ascii_start",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_trim_ascii_start :
      M.IsAssociatedFunction.Trait Self "trim_ascii_start" trim_ascii_start.
    Admitted.
    Global Typeclasses Opaque trim_ascii_start.
    
    (*
        pub const fn trim_ascii_end(&self) -> &str {
            // SAFETY: Removing ASCII characters from a `&str` does not invalidate
            // UTF-8.
            unsafe { core::str::from_utf8_unchecked(self.as_bytes().trim_ascii_end()) }
        }
    *)
    Definition trim_ascii_end (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                M.get_function (| "core::str::converts::from_utf8_unchecked", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                          "trim_ascii_end",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_trim_ascii_end :
      M.IsAssociatedFunction.Trait Self "trim_ascii_end" trim_ascii_end.
    Admitted.
    Global Typeclasses Opaque trim_ascii_end.
    
    (*
        pub const fn trim_ascii(&self) -> &str {
            // SAFETY: Removing ASCII characters from a `&str` does not invalidate
            // UTF-8.
            unsafe { core::str::from_utf8_unchecked(self.as_bytes().trim_ascii()) }
        }
    *)
    Definition trim_ascii (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                M.get_function (| "core::str::converts::from_utf8_unchecked", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                          "trim_ascii",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_trim_ascii :
      M.IsAssociatedFunction.Trait Self "trim_ascii" trim_ascii.
    Admitted.
    Global Typeclasses Opaque trim_ascii.
    
    (*
        pub fn escape_debug(&self) -> EscapeDebug<'_> {
            let mut chars = self.chars();
            EscapeDebug {
                inner: chars
                    .next()
                    .map(|first| first.escape_debug_ext(EscapeDebugExtArgs::ESCAPE_ALL))
                    .into_iter()
                    .flatten()
                    .chain(chars.flat_map(CharEscapeDebugContinue)),
            }
        }
    *)
    Definition escape_debug (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ chars : Ty.path "core::str::iter::Chars" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "core::str::iter::Chars",
                  M.get_associated_function (| Ty.path "str", "chars", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            M.alloc (|
              Value.StructRecord
                "core::str::iter::EscapeDebug"
                [
                  ("inner",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::flatten::Flatten")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::IntoIter")
                                []
                                [ Ty.path "core::char::EscapeDebug" ]
                            ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                            []
                            [
                              Ty.path "core::str::iter::Chars";
                              Ty.path "core::char::EscapeDebug";
                              Ty.path "core::str::CharEscapeDebugContinue"
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::flatten::Flatten")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::IntoIter")
                              []
                              [ Ty.path "core::char::EscapeDebug" ]
                          ],
                        [],
                        [],
                        "chain",
                        [],
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                            []
                            [
                              Ty.path "core::str::iter::Chars";
                              Ty.path "core::char::EscapeDebug";
                              Ty.path "core::str::CharEscapeDebugContinue"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::flatten::Flatten")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::IntoIter")
                                []
                                [ Ty.path "core::char::EscapeDebug" ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::option::IntoIter")
                              []
                              [ Ty.path "core::char::EscapeDebug" ],
                            [],
                            [],
                            "flatten",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::IntoIter")
                                []
                                [ Ty.path "core::char::EscapeDebug" ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "core::char::EscapeDebug" ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.path "core::char::EscapeDebug" ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "char" ],
                                    "map",
                                    [],
                                    [
                                      Ty.path "core::char::EscapeDebug";
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "char" ] ]
                                        (Ty.path "core::char::EscapeDebug")
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "char" ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.path "core::str::iter::Chars",
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.MutRef, chars |) ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Some
                                                  (Ty.function
                                                    [ Ty.tuple [ Ty.path "char" ] ]
                                                    (Ty.path "core::char::EscapeDebug")),
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let first := M.copy (| γ |) in
                                                      M.call_closure (|
                                                        Ty.path "core::char::EscapeDebug",
                                                        M.get_associated_function (|
                                                          Ty.path "char",
                                                          "escape_debug_ext",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (| first |);
                                                          M.read (|
                                                            M.get_constant
                                                              "core::char::methods::ESCAPE_ALL"
                                                          |)
                                                        ]
                                                      |)))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                            []
                            [
                              Ty.path "core::str::iter::Chars";
                              Ty.path "core::char::EscapeDebug";
                              Ty.path "core::str::CharEscapeDebugContinue"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.path "core::str::iter::Chars",
                            [],
                            [],
                            "flat_map",
                            [],
                            [
                              Ty.path "core::char::EscapeDebug";
                              Ty.path "core::str::CharEscapeDebugContinue"
                            ]
                          |),
                          [
                            M.read (| chars |);
                            Value.StructTuple "core::str::CharEscapeDebugContinue" []
                          ]
                        |)
                      ]
                    |))
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_escape_debug :
      M.IsAssociatedFunction.Trait Self "escape_debug" escape_debug.
    Admitted.
    Global Typeclasses Opaque escape_debug.
    
    (*
        pub fn escape_default(&self) -> EscapeDefault<'_> {
            EscapeDefault { inner: self.chars().flat_map(CharEscapeDefault) }
        }
    *)
    Definition escape_default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "core::str::iter::EscapeDefault"
            [
              ("inner",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::flatten::FlatMap")
                    []
                    [
                      Ty.path "core::str::iter::Chars";
                      Ty.path "core::char::EscapeDefault";
                      Ty.path "core::str::CharEscapeDefault"
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.path "core::str::iter::Chars",
                    [],
                    [],
                    "flat_map",
                    [],
                    [ Ty.path "core::char::EscapeDefault"; Ty.path "core::str::CharEscapeDefault" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.path "core::str::iter::Chars",
                      M.get_associated_function (| Ty.path "str", "chars", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |);
                    Value.StructTuple "core::str::CharEscapeDefault" []
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_escape_default :
      M.IsAssociatedFunction.Trait Self "escape_default" escape_default.
    Admitted.
    Global Typeclasses Opaque escape_default.
    
    (*
        pub fn escape_unicode(&self) -> EscapeUnicode<'_> {
            EscapeUnicode { inner: self.chars().flat_map(CharEscapeUnicode) }
        }
    *)
    Definition escape_unicode (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "core::str::iter::EscapeUnicode"
            [
              ("inner",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::flatten::FlatMap")
                    []
                    [
                      Ty.path "core::str::iter::Chars";
                      Ty.path "core::char::EscapeUnicode";
                      Ty.path "core::str::CharEscapeUnicode"
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.path "core::str::iter::Chars",
                    [],
                    [],
                    "flat_map",
                    [],
                    [ Ty.path "core::char::EscapeUnicode"; Ty.path "core::str::CharEscapeUnicode" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.path "core::str::iter::Chars",
                      M.get_associated_function (| Ty.path "str", "chars", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |);
                    Value.StructTuple "core::str::CharEscapeUnicode" []
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_escape_unicode :
      M.IsAssociatedFunction.Trait Self "escape_unicode" escape_unicode.
    Admitted.
    Global Typeclasses Opaque escape_unicode.
    
    (*
        pub fn substr_range(&self, substr: &str) -> Option<Range<usize>> {
            self.as_bytes().subslice_range(substr.as_bytes())
        }
    *)
    Definition substr_range (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; substr ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let substr := M.alloc (| substr |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ],
            M.get_associated_function (|
              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
              "subslice_range",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |)
              |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| substr |) |) |) ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_substr_range :
      M.IsAssociatedFunction.Trait Self "substr_range" substr_range.
    Admitted.
    Global Typeclasses Opaque substr_range.
    
    (*
        pub fn as_str(&self) -> &str {
            self
        }
    *)
    Definition as_str (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| self |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_str : M.IsAssociatedFunction.Trait Self "as_str" as_str.
    Admitted.
    Global Typeclasses Opaque as_str.
  End Impl_str.
  
  Module Impl_core_convert_AsRef_slice_u8_for_str.
    Definition Self : Ty.t := Ty.path "str".
    
    (*
        fn as_ref(&self) -> &[u8] {
            self.as_bytes()
        }
    *)
    Definition as_ref (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::AsRef"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
        Self
        (* Instance *) [ ("as_ref", InstanceField.Method as_ref) ].
  End Impl_core_convert_AsRef_slice_u8_for_str.
  
  Module Impl_core_default_Default_for_ref__str.
    Definition Self : Ty.t := Ty.apply (Ty.path "&") [] [ Ty.path "str" ].
    
    (*
        fn default() -> Self {
            ""
        }
    *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| Value.String "" |) |) |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_ref__str.
  
  Module Impl_core_default_Default_for_ref_mut_str.
    Definition Self : Ty.t := Ty.apply (Ty.path "&mut") [] [ Ty.path "str" ].
    
    (*
        fn default() -> Self {
            // SAFETY: The empty string is valid UTF-8.
            unsafe { from_utf8_unchecked_mut(&mut []) }
        }
    *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&mut") [] [ Ty.path "str" ],
                        M.get_function (| "core::str::converts::from_utf8_unchecked_mut", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.borrow (| Pointer.Kind.MutRef, M.alloc (| Value.Array [] |) |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_ref_mut_str.
  
  Module Impl_core_clone_Clone_for_core_str_LinesMap.
    Definition Self : Ty.t := Ty.path "core::str::LinesMap".
    
    (*     Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "core::str::LinesMap" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_str_LinesMap.
  
  Module Impl_core_clone_Clone_for_core_str_CharEscapeDebugContinue.
    Definition Self : Ty.t := Ty.path "core::str::CharEscapeDebugContinue".
    
    (*     Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "core::str::CharEscapeDebugContinue" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_str_CharEscapeDebugContinue.
  
  Module Impl_core_clone_Clone_for_core_str_CharEscapeUnicode.
    Definition Self : Ty.t := Ty.path "core::str::CharEscapeUnicode".
    
    (*     Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "core::str::CharEscapeUnicode" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_str_CharEscapeUnicode.
  
  Module Impl_core_clone_Clone_for_core_str_CharEscapeDefault.
    Definition Self : Ty.t := Ty.path "core::str::CharEscapeDefault".
    
    (*     Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "core::str::CharEscapeDefault" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_str_CharEscapeDefault.
  
  Module Impl_core_clone_Clone_for_core_str_IsWhitespace.
    Definition Self : Ty.t := Ty.path "core::str::IsWhitespace".
    
    (*     Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "core::str::IsWhitespace" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_str_IsWhitespace.
  
  Module Impl_core_clone_Clone_for_core_str_IsAsciiWhitespace.
    Definition Self : Ty.t := Ty.path "core::str::IsAsciiWhitespace".
    
    (*     Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "core::str::IsAsciiWhitespace" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_str_IsAsciiWhitespace.
  
  Module Impl_core_clone_Clone_for_core_str_IsNotEmpty.
    Definition Self : Ty.t := Ty.path "core::str::IsNotEmpty".
    
    (*     Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "core::str::IsNotEmpty" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_str_IsNotEmpty.
  
  Module Impl_core_clone_Clone_for_core_str_BytesIsNotEmpty.
    Definition Self : Ty.t := Ty.path "core::str::BytesIsNotEmpty".
    
    (*     Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "core::str::BytesIsNotEmpty" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_str_BytesIsNotEmpty.
  
  Module Impl_core_clone_Clone_for_core_str_UnsafeBytesToStr.
    Definition Self : Ty.t := Ty.path "core::str::UnsafeBytesToStr".
    
    (*     Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "core::str::UnsafeBytesToStr" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_core_str_UnsafeBytesToStr.
  
  Module Impl_core_error_Error_for_ref__str.
    Definition Self : Ty.t := Ty.apply (Ty.path "&") [] [ Ty.path "str" ].
    
    Axiom Implements :
      M.IsTraitInstance
        "core::error::Error"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_error_Error_for_ref__str.
End str.
