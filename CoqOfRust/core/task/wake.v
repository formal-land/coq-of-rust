(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module task.
  Module wake.
    (* StructRecord
      {
        name := "RawWaker";
        ty_params := [];
        fields :=
          [
            ("data", Ty.apply (Ty.path "*const") [ Ty.tuple [] ]);
            ("vtable", Ty.apply (Ty.path "&") [ Ty.path "core::task::wake::RawWakerVTable" ])
          ];
      } *)
    
    Module Impl_core_marker_StructuralPartialEq_for_core_task_wake_RawWaker.
      Definition Self : Ty.t := Ty.path "core::task::wake::RawWaker".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_core_task_wake_RawWaker.
    
    Module Impl_core_cmp_PartialEq_for_core_task_wake_RawWaker.
      Definition Self : Ty.t := Ty.path "core::task::wake::RawWaker".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              BinOp.Pure.eq
                (M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "core::task::wake::RawWaker",
                    "data"
                  |)
                |))
                (M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| other |),
                    "core::task::wake::RawWaker",
                    "data"
                  |)
                |)),
              ltac:(M.monadic
                (M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.apply (Ty.path "&") [ Ty.path "core::task::wake::RawWakerVTable" ],
                    [ Ty.apply (Ty.path "&") [ Ty.path "core::task::wake::RawWakerVTable" ] ],
                    "eq",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "core::task::wake::RawWaker",
                      "vtable"
                    |);
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "core::task::wake::RawWaker",
                      "vtable"
                    |)
                  ]
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_core_task_wake_RawWaker.
    
    Module Impl_core_fmt_Debug_for_core_task_wake_RawWaker.
      Definition Self : Ty.t := Ty.path "core::task::wake::RawWaker".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "RawWaker" |);
                M.read (| Value.String "data" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "core::task::wake::RawWaker",
                    "data"
                  |));
                M.read (| Value.String "vtable" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "core::task::wake::RawWaker",
                      "vtable"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_core_task_wake_RawWaker.
    
    Module Impl_core_task_wake_RawWaker.
      Definition Self : Ty.t := Ty.path "core::task::wake::RawWaker".
      
      (*
          pub const fn new(data: *const (), vtable: &'static RawWakerVTable) -> RawWaker {
              RawWaker { data, vtable }
          }
      *)
      Definition new (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ data; vtable ] =>
          ltac:(M.monadic
            (let data := M.alloc (| data |) in
            let vtable := M.alloc (| vtable |) in
            Value.StructRecord
              "core::task::wake::RawWaker"
              [ ("data", M.read (| data |)); ("vtable", M.read (| vtable |)) ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
      
      (*
          pub fn data(&self) -> *const () {
              self.data
          }
      *)
      Definition data (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "core::task::wake::RawWaker",
                "data"
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_data : M.IsAssociatedFunction Self "data" data.
      
      (*
          pub fn vtable(&self) -> &'static RawWakerVTable {
              self.vtable
          }
      *)
      Definition vtable (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "core::task::wake::RawWaker",
                "vtable"
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_vtable : M.IsAssociatedFunction Self "vtable" vtable.
    End Impl_core_task_wake_RawWaker.
    
    (* StructRecord
      {
        name := "RawWakerVTable";
        ty_params := [];
        fields :=
          [
            ("clone",
              Ty.function
                [ Ty.apply (Ty.path "*const") [ Ty.tuple [] ] ]
                (Ty.path "core::task::wake::RawWaker"));
            ("wake", Ty.function [ Ty.apply (Ty.path "*const") [ Ty.tuple [] ] ] (Ty.tuple []));
            ("wake_by_ref",
              Ty.function [ Ty.apply (Ty.path "*const") [ Ty.tuple [] ] ] (Ty.tuple []));
            ("drop", Ty.function [ Ty.apply (Ty.path "*const") [ Ty.tuple [] ] ] (Ty.tuple []))
          ];
      } *)
    
    Module Impl_core_marker_StructuralPartialEq_for_core_task_wake_RawWakerVTable.
      Definition Self : Ty.t := Ty.path "core::task::wake::RawWakerVTable".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_core_task_wake_RawWakerVTable.
    
    Module Impl_core_cmp_PartialEq_for_core_task_wake_RawWakerVTable.
      Definition Self : Ty.t := Ty.path "core::task::wake::RawWakerVTable".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              LogicalOp.and (|
                LogicalOp.and (|
                  BinOp.Pure.eq
                    (M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "core::task::wake::RawWakerVTable",
                        "clone"
                      |)
                    |))
                    (M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "core::task::wake::RawWakerVTable",
                        "clone"
                      |)
                    |)),
                  ltac:(M.monadic
                    (BinOp.Pure.eq
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "core::task::wake::RawWakerVTable",
                          "wake"
                        |)
                      |))
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| other |),
                          "core::task::wake::RawWakerVTable",
                          "wake"
                        |)
                      |))))
                |),
                ltac:(M.monadic
                  (BinOp.Pure.eq
                    (M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "core::task::wake::RawWakerVTable",
                        "wake_by_ref"
                      |)
                    |))
                    (M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "core::task::wake::RawWakerVTable",
                        "wake_by_ref"
                      |)
                    |))))
              |),
              ltac:(M.monadic
                (BinOp.Pure.eq
                  (M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "core::task::wake::RawWakerVTable",
                      "drop"
                    |)
                  |))
                  (M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "core::task::wake::RawWakerVTable",
                      "drop"
                    |)
                  |))))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_core_task_wake_RawWakerVTable.
    
    Module Impl_core_marker_Copy_for_core_task_wake_RawWakerVTable.
      Definition Self : Ty.t := Ty.path "core::task::wake::RawWakerVTable".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_for_core_task_wake_RawWakerVTable.
    
    Module Impl_core_clone_Clone_for_core_task_wake_RawWakerVTable.
      Definition Self : Ty.t := Ty.path "core::task::wake::RawWakerVTable".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Value.DeclaredButUndefined,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Value.DeclaredButUndefined,
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Value.DeclaredButUndefined,
                                        [ fun γ => ltac:(M.monadic (M.read (| self |))) ]
                                      |)))
                                ]
                              |)))
                        ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_core_task_wake_RawWakerVTable.
    
    Module Impl_core_fmt_Debug_for_core_task_wake_RawWakerVTable.
      Definition Self : Ty.t := Ty.path "core::task::wake::RawWakerVTable".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field4_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "RawWakerVTable" |);
                M.read (| Value.String "clone" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "core::task::wake::RawWakerVTable",
                    "clone"
                  |));
                M.read (| Value.String "wake" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "core::task::wake::RawWakerVTable",
                    "wake"
                  |));
                M.read (| Value.String "wake_by_ref" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "core::task::wake::RawWakerVTable",
                    "wake_by_ref"
                  |));
                M.read (| Value.String "drop" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "core::task::wake::RawWakerVTable",
                      "drop"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_core_task_wake_RawWakerVTable.
    
    Module Impl_core_task_wake_RawWakerVTable.
      Definition Self : Ty.t := Ty.path "core::task::wake::RawWakerVTable".
      
      (*
          pub const fn new(
              clone: unsafe fn( *const ()) -> RawWaker,
              wake: unsafe fn( *const ()),
              wake_by_ref: unsafe fn( *const ()),
              drop: unsafe fn( *const ()),
          ) -> Self {
              Self { clone, wake, wake_by_ref, drop }
          }
      *)
      Definition new (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ clone; wake; wake_by_ref; drop ] =>
          ltac:(M.monadic
            (let clone := M.alloc (| clone |) in
            let wake := M.alloc (| wake |) in
            let wake_by_ref := M.alloc (| wake_by_ref |) in
            let drop := M.alloc (| drop |) in
            Value.StructRecord
              "core::task::wake::RawWakerVTable"
              [
                ("clone", M.read (| clone |));
                ("wake", M.read (| wake |));
                ("wake_by_ref", M.read (| wake_by_ref |));
                ("drop", M.read (| drop |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
    End Impl_core_task_wake_RawWakerVTable.
    
    (* StructRecord
      {
        name := "Context";
        ty_params := [];
        fields :=
          [
            ("waker", Ty.apply (Ty.path "&") [ Ty.path "core::task::wake::Waker" ]);
            ("_marker",
              Ty.apply
                (Ty.path "core::marker::PhantomData")
                [
                  Ty.function
                    [ Ty.apply (Ty.path "&") [ Ty.tuple [] ] ]
                    (Ty.apply (Ty.path "&") [ Ty.tuple [] ])
                ]);
            ("_marker2",
              Ty.apply
                (Ty.path "core::marker::PhantomData")
                [ Ty.apply (Ty.path "*mut") [ Ty.tuple [] ] ])
          ];
      } *)
    
    Module Impl_core_task_wake_Context.
      Definition Self : Ty.t := Ty.path "core::task::wake::Context".
      
      (*
          pub const fn from_waker(waker: &'a Waker) -> Self {
              Context { waker, _marker: PhantomData, _marker2: PhantomData }
          }
      *)
      Definition from_waker (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ waker ] =>
          ltac:(M.monadic
            (let waker := M.alloc (| waker |) in
            Value.StructRecord
              "core::task::wake::Context"
              [
                ("waker", M.read (| waker |));
                ("_marker", Value.StructTuple "core::marker::PhantomData" []);
                ("_marker2", Value.StructTuple "core::marker::PhantomData" [])
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_from_waker : M.IsAssociatedFunction Self "from_waker" from_waker.
      
      (*
          pub const fn waker(&self) -> &'a Waker {
              &self.waker
          }
      *)
      Definition waker (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "core::task::wake::Context",
                "waker"
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_waker : M.IsAssociatedFunction Self "waker" waker.
    End Impl_core_task_wake_Context.
    
    Module Impl_core_fmt_Debug_for_core_task_wake_Context.
      Definition Self : Ty.t := Ty.path "core::task::wake::Context".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              f.debug_struct("Context").field("waker", &self.waker).finish()
          }
      *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::builders::DebugStruct",
                "finish",
                []
              |),
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::fmt::builders::DebugStruct",
                    "field",
                    []
                  |),
                  [
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "Context" |) ]
                      |)
                    |);
                    M.read (| Value.String "waker" |);
                    (* Unsize *)
                    M.pointer_coercion
                      (M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "core::task::wake::Context",
                        "waker"
                      |))
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_core_task_wake_Context.
    
    (* StructRecord
      {
        name := "Waker";
        ty_params := [];
        fields := [ ("waker", Ty.path "core::task::wake::RawWaker") ];
      } *)
    
    Module Impl_core_marker_Unpin_for_core_task_wake_Waker.
      Definition Self : Ty.t := Ty.path "core::task::wake::Waker".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Unpin"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Unpin_for_core_task_wake_Waker.
    
    Module Impl_core_marker_Send_for_core_task_wake_Waker.
      Definition Self : Ty.t := Ty.path "core::task::wake::Waker".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Send"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Send_for_core_task_wake_Waker.
    
    Module Impl_core_marker_Sync_for_core_task_wake_Waker.
      Definition Self : Ty.t := Ty.path "core::task::wake::Waker".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Sync"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Sync_for_core_task_wake_Waker.
    
    Module Impl_core_task_wake_Waker.
      Definition Self : Ty.t := Ty.path "core::task::wake::Waker".
      
      (*
          pub fn wake(self) {
              // The actual wakeup call is delegated through a virtual function call
              // to the implementation which is defined by the executor.
              let wake = self.waker.vtable.wake;
              let data = self.waker.data;
      
              // Don't call `drop` -- the waker will be consumed by `wake`.
              crate::mem::forget(self);
      
              // SAFETY: This is safe because `Waker::from_raw` is the only way
              // to initialize `wake` and `data` requiring the user to acknowledge
              // that the contract of `RawWaker` is upheld.
              unsafe { (wake)(data) };
          }
      *)
      Definition wake (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ wake :=
                M.copy (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "core::task::wake::Waker",
                          "waker"
                        |),
                        "core::task::wake::RawWaker",
                        "vtable"
                      |)
                    |),
                    "core::task::wake::RawWakerVTable",
                    "wake"
                  |)
                |) in
              let~ data :=
                M.copy (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "core::task::wake::Waker",
                      "waker"
                    |),
                    "core::task::wake::RawWaker",
                    "data"
                  |)
                |) in
              let~ _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (| "core::mem::forget", [ Ty.path "core::task::wake::Waker" ] |),
                    [ M.read (| self |) ]
                  |)
                |) in
              let~ _ :=
                M.alloc (| M.call_closure (| M.read (| wake |), [ M.read (| data |) ] |) |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_wake : M.IsAssociatedFunction Self "wake" wake.
      
      (*
          pub fn wake_by_ref(&self) {
              // The actual wakeup call is delegated through a virtual function call
              // to the implementation which is defined by the executor.
      
              // SAFETY: see `wake`
              unsafe { (self.waker.vtable.wake_by_ref)(self.waker.data) }
          }
      *)
      Definition wake_by_ref (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "core::task::wake::Waker",
                        "waker"
                      |),
                      "core::task::wake::RawWaker",
                      "vtable"
                    |)
                  |),
                  "core::task::wake::RawWakerVTable",
                  "wake_by_ref"
                |)
              |),
              [
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "core::task::wake::Waker",
                      "waker"
                    |),
                    "core::task::wake::RawWaker",
                    "data"
                  |)
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_wake_by_ref : M.IsAssociatedFunction Self "wake_by_ref" wake_by_ref.
      
      (*
          pub fn will_wake(&self, other: &Waker) -> bool {
              self.waker == other.waker
          }
      *)
      Definition will_wake (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.path "core::task::wake::RawWaker",
                [ Ty.path "core::task::wake::RawWaker" ],
                "eq",
                []
              |),
              [
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "core::task::wake::Waker",
                  "waker"
                |);
                M.SubPointer.get_struct_record_field (|
                  M.read (| other |),
                  "core::task::wake::Waker",
                  "waker"
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_will_wake : M.IsAssociatedFunction Self "will_wake" will_wake.
      
      (*
          pub const unsafe fn from_raw(waker: RawWaker) -> Waker {
              Waker { waker }
          }
      *)
      Definition from_raw (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ waker ] =>
          ltac:(M.monadic
            (let waker := M.alloc (| waker |) in
            Value.StructRecord "core::task::wake::Waker" [ ("waker", M.read (| waker |)) ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_from_raw : M.IsAssociatedFunction Self "from_raw" from_raw.
      
      (*
          pub const fn noop() -> Waker {
              const VTABLE: RawWakerVTable = RawWakerVTable::new(
                  // Cloning just returns a new no-op raw waker
                  |_| RAW,
                  // `wake` does nothing
                  |_| {},
                  // `wake_by_ref` does nothing
                  |_| {},
                  // Dropping does nothing as we don't allocate anything
                  |_| {},
              );
              const RAW: RawWaker = RawWaker::new(ptr::null(), &VTABLE);
      
              Waker { waker: RAW }
          }
      *)
      Definition noop (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (Value.StructRecord
              "core::task::wake::Waker"
              [ ("waker", M.read (| M.get_constant (| "core::task::wake::noop::RAW" |) |)) ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_noop : M.IsAssociatedFunction Self "noop" noop.
      
      (*
          pub fn as_raw(&self) -> &RawWaker {
              &self.waker
          }
      *)
      Definition as_raw (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "core::task::wake::Waker",
              "waker"
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_as_raw : M.IsAssociatedFunction Self "as_raw" as_raw.
    End Impl_core_task_wake_Waker.
    
    Module Impl_core_clone_Clone_for_core_task_wake_Waker.
      Definition Self : Ty.t := Ty.path "core::task::wake::Waker".
      
      (*
          fn clone(&self) -> Self {
              Waker {
                  // SAFETY: This is safe because `Waker::from_raw` is the only way
                  // to initialize `clone` and `data` requiring the user to acknowledge
                  // that the contract of [`RawWaker`] is upheld.
                  waker: unsafe { (self.waker.vtable.clone)(self.waker.data) },
              }
          }
      *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "core::task::wake::Waker"
              [
                ("waker",
                  M.call_closure (|
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "core::task::wake::Waker",
                              "waker"
                            |),
                            "core::task::wake::RawWaker",
                            "vtable"
                          |)
                        |),
                        "core::task::wake::RawWakerVTable",
                        "clone"
                      |)
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "core::task::wake::Waker",
                            "waker"
                          |),
                          "core::task::wake::RawWaker",
                          "data"
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      (*
          fn clone_from(&mut self, source: &Self) {
              if !self.will_wake(source) {
                  *self = source.clone();
              }
          }
      *)
      Definition clone_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; source ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let source := M.alloc (| source |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.Pure.not
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "core::task::wake::Waker",
                                  "will_wake",
                                  []
                                |),
                                [ M.read (| self |); M.read (| source |) ]
                              |))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ :=
                        M.write (|
                          M.read (| self |),
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path "core::task::wake::Waker",
                              [],
                              "clone",
                              []
                            |),
                            [ M.read (| source |) ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("clone", InstanceField.Method clone); ("clone_from", InstanceField.Method clone_from)
          ].
    End Impl_core_clone_Clone_for_core_task_wake_Waker.
    
    Module Impl_core_ops_drop_Drop_for_core_task_wake_Waker.
      Definition Self : Ty.t := Ty.path "core::task::wake::Waker".
      
      (*
          fn drop(&mut self) {
              // SAFETY: This is safe because `Waker::from_raw` is the only way
              // to initialize `drop` and `data` requiring the user to acknowledge
              // that the contract of `RawWaker` is upheld.
              unsafe { (self.waker.vtable.drop)(self.waker.data) }
          }
      *)
      Definition drop (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "core::task::wake::Waker",
                        "waker"
                      |),
                      "core::task::wake::RawWaker",
                      "vtable"
                    |)
                  |),
                  "core::task::wake::RawWakerVTable",
                  "drop"
                |)
              |),
              [
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "core::task::wake::Waker",
                      "waker"
                    |),
                    "core::task::wake::RawWaker",
                    "data"
                  |)
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::ops::drop::Drop"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("drop", InstanceField.Method drop) ].
    End Impl_core_ops_drop_Drop_for_core_task_wake_Waker.
    
    Module Impl_core_fmt_Debug_for_core_task_wake_Waker.
      Definition Self : Ty.t := Ty.path "core::task::wake::Waker".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              let vtable_ptr = self.waker.vtable as *const RawWakerVTable;
              f.debug_struct("Waker")
                  .field("data", &self.waker.data)
                  .field("vtable", &vtable_ptr)
                  .finish()
          }
      *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              let~ vtable_ptr :=
                M.copy (|
                  M.use
                    (M.alloc (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "core::task::wake::Waker",
                            "waker"
                          |),
                          "core::task::wake::RawWaker",
                          "vtable"
                        |)
                      |)
                    |))
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::fmt::builders::DebugStruct",
                    "finish",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::fmt::builders::DebugStruct",
                        "field",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::builders::DebugStruct",
                            "field",
                            []
                          |),
                          [
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Formatter",
                                  "debug_struct",
                                  []
                                |),
                                [ M.read (| f |); M.read (| Value.String "Waker" |) ]
                              |)
                            |);
                            M.read (| Value.String "data" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "core::task::wake::Waker",
                                  "waker"
                                |),
                                "core::task::wake::RawWaker",
                                "data"
                              |))
                          ]
                        |);
                        M.read (| Value.String "vtable" |);
                        (* Unsize *) M.pointer_coercion vtable_ptr
                      ]
                    |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_core_task_wake_Waker.
  End wake.
End task.
