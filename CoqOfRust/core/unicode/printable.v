(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module unicode.
  Module printable.
    (*
    fn check(x: u16, singletonuppers: &[(u8, u8)], singletonlowers: &[u8], normal: &[u8]) -> bool {
        let xupper = (x >> 8) as u8;
        let mut lowerstart = 0;
        for &(upper, lowercount) in singletonuppers {
            let lowerend = lowerstart + lowercount as usize;
            if xupper == upper {
                for &lower in &singletonlowers[lowerstart..lowerend] {
                    if lower == x as u8 {
                        return false;
                    }
                }
            } else if xupper < upper {
                break;
            }
            lowerstart = lowerend;
        }
    
        let mut x = x as i32;
        let mut normal = normal.iter().cloned();
        let mut current = true;
        while let Some(v) = normal.next() {
            let len = if v & 0x80 != 0 {
                ((v & 0x7f) as i32) << 8 | normal.next().unwrap() as i32
            } else {
                v as i32
            };
            x -= len;
            if x < 0 {
                break;
            }
            current = !current;
        }
        current
    }
    *)
    Definition check (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ x; singletonuppers; singletonlowers; normal ] =>
        ltac:(M.monadic
          (let x := M.alloc (| x |) in
          let singletonuppers := M.alloc (| singletonuppers |) in
          let singletonlowers := M.alloc (| singletonlowers |) in
          let normal := M.alloc (| normal |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ xupper :=
                  M.alloc (| M.rust_cast (BinOp.Wrap.shr (M.read (| x |)) (Value.Integer 8)) |) in
                let~ lowerstart := M.alloc (| Value.Integer 0 |) in
                let~ _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "&")
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  [ Ty.tuple [ Ty.path "u8"; Ty.path "u8" ] ]
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [ M.read (| singletonuppers |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let~ _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [ Ty.tuple [ Ty.path "u8"; Ty.path "u8" ] ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ0_0 := M.read (| γ0_0 |) in
                                          let γ2_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                          let γ2_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                          let upper := M.copy (| γ2_0 |) in
                                          let lowercount := M.copy (| γ2_1 |) in
                                          let~ lowerend :=
                                            M.alloc (|
                                              BinOp.Wrap.add
                                                Integer.Usize
                                                (M.read (| lowerstart |))
                                                (M.rust_cast (M.read (| lowercount |)))
                                            |) in
                                          let~ _ :=
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          BinOp.Pure.eq
                                                            (M.read (| xupper |))
                                                            (M.read (| upper |))
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.use
                                                      (M.match_operator (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [ Ty.path "u8" ]
                                                                ],
                                                              [],
                                                              "into_iter",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::index::Index",
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [ Ty.path "u8" ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::ops::range::Range")
                                                                      [ Ty.path "usize" ]
                                                                  ],
                                                                  "index",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| singletonlowers |);
                                                                  Value.StructRecord
                                                                    "core::ops::range::Range"
                                                                    [
                                                                      ("start",
                                                                        M.read (| lowerstart |));
                                                                      ("end_",
                                                                        M.read (| lowerend |))
                                                                    ]
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let iter := M.copy (| γ |) in
                                                              M.loop (|
                                                                ltac:(M.monadic
                                                                  (let~ _ :=
                                                                    M.match_operator (|
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::iterator::Iterator",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [ Ty.path "u8" ],
                                                                            [],
                                                                            "next",
                                                                            []
                                                                          |),
                                                                          [ iter ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let _ :=
                                                                              M.is_struct_tuple (|
                                                                                γ,
                                                                                "core::option::Option::None"
                                                                              |) in
                                                                            M.alloc (|
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.break (||)
                                                                                |)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::option::Option::Some",
                                                                                0
                                                                              |) in
                                                                            let γ0_0 :=
                                                                              M.read (| γ0_0 |) in
                                                                            let lower :=
                                                                              M.copy (| γ0_0 |) in
                                                                            M.match_operator (|
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ :=
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          BinOp.Pure.eq
                                                                                            (M.read (|
                                                                                              lower
                                                                                            |))
                                                                                            (M.rust_cast
                                                                                              (M.read (|
                                                                                                x
                                                                                              |)))
                                                                                        |)) in
                                                                                    let _ :=
                                                                                      M.is_constant_or_break_match (|
                                                                                        M.read (|
                                                                                          γ
                                                                                        |),
                                                                                        Value.Bool
                                                                                          true
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      M.never_to_any (|
                                                                                        M.read (|
                                                                                          M.return_ (|
                                                                                            Value.Bool
                                                                                              false
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)));
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (M.alloc (|
                                                                                      Value.Tuple []
                                                                                    |)))
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                              |)))
                                                        ]
                                                      |))));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  BinOp.Pure.lt
                                                                    (M.read (| xupper |))
                                                                    (M.read (| upper |))
                                                                |)) in
                                                            let _ :=
                                                              M.is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          let~ _ :=
                                            M.write (| lowerstart, M.read (| lowerend |) |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let~ x := M.alloc (| M.rust_cast (M.read (| x |)) |) in
                let~ normal :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u8" ],
                        [],
                        "cloned",
                        [ Ty.path "u8" ]
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                            "iter",
                            []
                          |),
                          [ M.read (| normal |) ]
                        |)
                      ]
                    |)
                  |) in
                let~ current := M.alloc (| Value.Bool true |) in
                let~ _ :=
                  M.loop (|
                    ltac:(M.monadic
                      (M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::cloned::Cloned")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [ Ty.path "u8" ]
                                        ],
                                      [],
                                      "next",
                                      []
                                    |),
                                    [ normal ]
                                  |)
                                |) in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let v := M.copy (| γ0_0 |) in
                              let~ len :=
                                M.copy (|
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                BinOp.Pure.ne
                                                  (BinOp.Pure.bit_and
                                                    (M.read (| v |))
                                                    (Value.Integer 128))
                                                  (Value.Integer 0)
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            BinOp.Pure.bit_or
                                              (BinOp.Wrap.shl
                                                (M.rust_cast
                                                  (BinOp.Pure.bit_and
                                                    (M.read (| v |))
                                                    (Value.Integer 127)))
                                                (Value.Integer 8))
                                              (M.rust_cast
                                                (M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [ Ty.path "u8" ],
                                                    "unwrap",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::cloned::Cloned")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [ Ty.path "u8" ]
                                                          ],
                                                        [],
                                                        "next",
                                                        []
                                                      |),
                                                      [ normal ]
                                                    |)
                                                  ]
                                                |)))
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (| M.rust_cast (M.read (| v |)) |)))
                                    ]
                                  |)
                                |) in
                              let~ _ :=
                                let β := x in
                                M.write (|
                                  β,
                                  BinOp.Wrap.sub Integer.I32 (M.read (| β |)) (M.read (| len |))
                                |) in
                              let~ _ :=
                                M.match_operator (|
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              BinOp.Pure.lt (M.read (| x |)) (Value.Integer 0)
                                            |)) in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              let~ _ :=
                                M.write (| current, UnOp.Pure.not (M.read (| current |)) |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ :=
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                  |) in
                current
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Function_check : M.IsFunction "core::unicode::printable::check" check.
    
    (*
    pub(crate) fn is_printable(x: char) -> bool {
        let x = x as u32;
        let lower = x as u16;
    
        if x < 32 {
            // ASCII fast path
            false
        } else if x < 127 {
            // ASCII fast path
            true
        } else if x < 0x10000 {
            check(lower, SINGLETONS0U, SINGLETONS0L, NORMAL0)
        } else if x < 0x20000 {
            check(lower, SINGLETONS1U, SINGLETONS1L, NORMAL1)
        } else {
            if 0x2a6e0 <= x && x < 0x2a700 {
                return false;
            }
            if 0x2b73a <= x && x < 0x2b740 {
                return false;
            }
            if 0x2b81e <= x && x < 0x2b820 {
                return false;
            }
            if 0x2cea2 <= x && x < 0x2ceb0 {
                return false;
            }
            if 0x2ebe1 <= x && x < 0x2f800 {
                return false;
            }
            if 0x2fa1e <= x && x < 0x30000 {
                return false;
            }
            if 0x3134b <= x && x < 0x31350 {
                return false;
            }
            if 0x323b0 <= x && x < 0xe0100 {
                return false;
            }
            if 0xe01f0 <= x && x < 0x110000 {
                return false;
            }
            true
        }
    }
    *)
    Definition is_printable (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ x ] =>
        ltac:(M.monadic
          (let x := M.alloc (| x |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ x := M.alloc (| M.rust_cast (M.read (| x |)) |) in
                let~ lower := M.alloc (| M.rust_cast (M.read (| x |)) |) in
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use (M.alloc (| BinOp.Pure.lt (M.read (| x |)) (Value.Integer 32) |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (| Value.Bool false |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      BinOp.Pure.lt (M.read (| x |)) (Value.Integer 127)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (| Value.Bool true |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              BinOp.Pure.lt (M.read (| x |)) (Value.Integer 65536)
                                            |)) in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_function (|
                                              "core::unicode::printable::check",
                                              []
                                            |),
                                            [
                                              M.read (| lower |);
                                              M.read (|
                                                M.get_constant (|
                                                  "core::unicode::printable::SINGLETONS0U"
                                                |)
                                              |);
                                              M.read (|
                                                M.get_constant (|
                                                  "core::unicode::printable::SINGLETONS0L"
                                                |)
                                              |);
                                              M.read (|
                                                M.get_constant (|
                                                  "core::unicode::printable::NORMAL0"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      BinOp.Pure.lt
                                                        (M.read (| x |))
                                                        (Value.Integer 131072)
                                                    |)) in
                                                let _ :=
                                                  M.is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::unicode::printable::check",
                                                      []
                                                    |),
                                                    [
                                                      M.read (| lower |);
                                                      M.read (|
                                                        M.get_constant (|
                                                          "core::unicode::printable::SINGLETONS1U"
                                                        |)
                                                      |);
                                                      M.read (|
                                                        M.get_constant (|
                                                          "core::unicode::printable::SINGLETONS1L"
                                                        |)
                                                      |);
                                                      M.read (|
                                                        M.get_constant (|
                                                          "core::unicode::printable::NORMAL1"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let~ _ :=
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  BinOp.Pure.le
                                                                    (Value.Integer 173792)
                                                                    (M.read (| x |)),
                                                                  ltac:(M.monadic
                                                                    (BinOp.Pure.lt
                                                                      (M.read (| x |))
                                                                      (Value.Integer 173824)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ :=
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  BinOp.Pure.le
                                                                    (Value.Integer 177978)
                                                                    (M.read (| x |)),
                                                                  ltac:(M.monadic
                                                                    (BinOp.Pure.lt
                                                                      (M.read (| x |))
                                                                      (Value.Integer 177984)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ :=
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  BinOp.Pure.le
                                                                    (Value.Integer 178206)
                                                                    (M.read (| x |)),
                                                                  ltac:(M.monadic
                                                                    (BinOp.Pure.lt
                                                                      (M.read (| x |))
                                                                      (Value.Integer 178208)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ :=
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  BinOp.Pure.le
                                                                    (Value.Integer 183970)
                                                                    (M.read (| x |)),
                                                                  ltac:(M.monadic
                                                                    (BinOp.Pure.lt
                                                                      (M.read (| x |))
                                                                      (Value.Integer 183984)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ :=
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  BinOp.Pure.le
                                                                    (Value.Integer 191457)
                                                                    (M.read (| x |)),
                                                                  ltac:(M.monadic
                                                                    (BinOp.Pure.lt
                                                                      (M.read (| x |))
                                                                      (Value.Integer 194560)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ :=
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  BinOp.Pure.le
                                                                    (Value.Integer 195102)
                                                                    (M.read (| x |)),
                                                                  ltac:(M.monadic
                                                                    (BinOp.Pure.lt
                                                                      (M.read (| x |))
                                                                      (Value.Integer 196608)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ :=
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  BinOp.Pure.le
                                                                    (Value.Integer 201547)
                                                                    (M.read (| x |)),
                                                                  ltac:(M.monadic
                                                                    (BinOp.Pure.lt
                                                                      (M.read (| x |))
                                                                      (Value.Integer 201552)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ :=
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  BinOp.Pure.le
                                                                    (Value.Integer 205744)
                                                                    (M.read (| x |)),
                                                                  ltac:(M.monadic
                                                                    (BinOp.Pure.lt
                                                                      (M.read (| x |))
                                                                      (Value.Integer 917760)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ :=
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  BinOp.Pure.le
                                                                    (Value.Integer 918000)
                                                                    (M.read (| x |)),
                                                                  ltac:(M.monadic
                                                                    (BinOp.Pure.lt
                                                                      (M.read (| x |))
                                                                      (Value.Integer 1114112)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                M.alloc (| Value.Bool true |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Function_is_printable :
      M.IsFunction "core::unicode::printable::is_printable" is_printable.
    
    Definition value_SINGLETONS0U : Value.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            (* Unsize *)
            M.pointer_coercion
              (M.alloc (|
                Value.Array
                  [
                    Value.Tuple [ Value.Integer 0; Value.Integer 1 ];
                    Value.Tuple [ Value.Integer 3; Value.Integer 5 ];
                    Value.Tuple [ Value.Integer 5; Value.Integer 6 ];
                    Value.Tuple [ Value.Integer 6; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 7; Value.Integer 6 ];
                    Value.Tuple [ Value.Integer 8; Value.Integer 7 ];
                    Value.Tuple [ Value.Integer 9; Value.Integer 17 ];
                    Value.Tuple [ Value.Integer 10; Value.Integer 28 ];
                    Value.Tuple [ Value.Integer 11; Value.Integer 25 ];
                    Value.Tuple [ Value.Integer 12; Value.Integer 26 ];
                    Value.Tuple [ Value.Integer 13; Value.Integer 16 ];
                    Value.Tuple [ Value.Integer 14; Value.Integer 12 ];
                    Value.Tuple [ Value.Integer 15; Value.Integer 4 ];
                    Value.Tuple [ Value.Integer 16; Value.Integer 3 ];
                    Value.Tuple [ Value.Integer 18; Value.Integer 18 ];
                    Value.Tuple [ Value.Integer 19; Value.Integer 9 ];
                    Value.Tuple [ Value.Integer 22; Value.Integer 1 ];
                    Value.Tuple [ Value.Integer 23; Value.Integer 4 ];
                    Value.Tuple [ Value.Integer 24; Value.Integer 1 ];
                    Value.Tuple [ Value.Integer 25; Value.Integer 3 ];
                    Value.Tuple [ Value.Integer 26; Value.Integer 7 ];
                    Value.Tuple [ Value.Integer 27; Value.Integer 1 ];
                    Value.Tuple [ Value.Integer 28; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 31; Value.Integer 22 ];
                    Value.Tuple [ Value.Integer 32; Value.Integer 3 ];
                    Value.Tuple [ Value.Integer 43; Value.Integer 3 ];
                    Value.Tuple [ Value.Integer 45; Value.Integer 11 ];
                    Value.Tuple [ Value.Integer 46; Value.Integer 1 ];
                    Value.Tuple [ Value.Integer 48; Value.Integer 3 ];
                    Value.Tuple [ Value.Integer 49; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 50; Value.Integer 1 ];
                    Value.Tuple [ Value.Integer 167; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 169; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 170; Value.Integer 4 ];
                    Value.Tuple [ Value.Integer 171; Value.Integer 8 ];
                    Value.Tuple [ Value.Integer 250; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 251; Value.Integer 5 ];
                    Value.Tuple [ Value.Integer 253; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 254; Value.Integer 3 ];
                    Value.Tuple [ Value.Integer 255; Value.Integer 9 ]
                  ]
              |))
          |))).
    
    Definition value_SINGLETONS0L : Value.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            (* Unsize *)
            M.pointer_coercion
              (M.alloc (|
                Value.Array
                  [
                    Value.Integer 173;
                    Value.Integer 120;
                    Value.Integer 121;
                    Value.Integer 139;
                    Value.Integer 141;
                    Value.Integer 162;
                    Value.Integer 48;
                    Value.Integer 87;
                    Value.Integer 88;
                    Value.Integer 139;
                    Value.Integer 140;
                    Value.Integer 144;
                    Value.Integer 28;
                    Value.Integer 221;
                    Value.Integer 14;
                    Value.Integer 15;
                    Value.Integer 75;
                    Value.Integer 76;
                    Value.Integer 251;
                    Value.Integer 252;
                    Value.Integer 46;
                    Value.Integer 47;
                    Value.Integer 63;
                    Value.Integer 92;
                    Value.Integer 93;
                    Value.Integer 95;
                    Value.Integer 226;
                    Value.Integer 132;
                    Value.Integer 141;
                    Value.Integer 142;
                    Value.Integer 145;
                    Value.Integer 146;
                    Value.Integer 169;
                    Value.Integer 177;
                    Value.Integer 186;
                    Value.Integer 187;
                    Value.Integer 197;
                    Value.Integer 198;
                    Value.Integer 201;
                    Value.Integer 202;
                    Value.Integer 222;
                    Value.Integer 228;
                    Value.Integer 229;
                    Value.Integer 255;
                    Value.Integer 0;
                    Value.Integer 4;
                    Value.Integer 17;
                    Value.Integer 18;
                    Value.Integer 41;
                    Value.Integer 49;
                    Value.Integer 52;
                    Value.Integer 55;
                    Value.Integer 58;
                    Value.Integer 59;
                    Value.Integer 61;
                    Value.Integer 73;
                    Value.Integer 74;
                    Value.Integer 93;
                    Value.Integer 132;
                    Value.Integer 142;
                    Value.Integer 146;
                    Value.Integer 169;
                    Value.Integer 177;
                    Value.Integer 180;
                    Value.Integer 186;
                    Value.Integer 187;
                    Value.Integer 198;
                    Value.Integer 202;
                    Value.Integer 206;
                    Value.Integer 207;
                    Value.Integer 228;
                    Value.Integer 229;
                    Value.Integer 0;
                    Value.Integer 4;
                    Value.Integer 13;
                    Value.Integer 14;
                    Value.Integer 17;
                    Value.Integer 18;
                    Value.Integer 41;
                    Value.Integer 49;
                    Value.Integer 52;
                    Value.Integer 58;
                    Value.Integer 59;
                    Value.Integer 69;
                    Value.Integer 70;
                    Value.Integer 73;
                    Value.Integer 74;
                    Value.Integer 94;
                    Value.Integer 100;
                    Value.Integer 101;
                    Value.Integer 132;
                    Value.Integer 145;
                    Value.Integer 155;
                    Value.Integer 157;
                    Value.Integer 201;
                    Value.Integer 206;
                    Value.Integer 207;
                    Value.Integer 13;
                    Value.Integer 17;
                    Value.Integer 41;
                    Value.Integer 58;
                    Value.Integer 59;
                    Value.Integer 69;
                    Value.Integer 73;
                    Value.Integer 87;
                    Value.Integer 91;
                    Value.Integer 92;
                    Value.Integer 94;
                    Value.Integer 95;
                    Value.Integer 100;
                    Value.Integer 101;
                    Value.Integer 141;
                    Value.Integer 145;
                    Value.Integer 169;
                    Value.Integer 180;
                    Value.Integer 186;
                    Value.Integer 187;
                    Value.Integer 197;
                    Value.Integer 201;
                    Value.Integer 223;
                    Value.Integer 228;
                    Value.Integer 229;
                    Value.Integer 240;
                    Value.Integer 13;
                    Value.Integer 17;
                    Value.Integer 69;
                    Value.Integer 73;
                    Value.Integer 100;
                    Value.Integer 101;
                    Value.Integer 128;
                    Value.Integer 132;
                    Value.Integer 178;
                    Value.Integer 188;
                    Value.Integer 190;
                    Value.Integer 191;
                    Value.Integer 213;
                    Value.Integer 215;
                    Value.Integer 240;
                    Value.Integer 241;
                    Value.Integer 131;
                    Value.Integer 133;
                    Value.Integer 139;
                    Value.Integer 164;
                    Value.Integer 166;
                    Value.Integer 190;
                    Value.Integer 191;
                    Value.Integer 197;
                    Value.Integer 199;
                    Value.Integer 207;
                    Value.Integer 218;
                    Value.Integer 219;
                    Value.Integer 72;
                    Value.Integer 152;
                    Value.Integer 189;
                    Value.Integer 205;
                    Value.Integer 198;
                    Value.Integer 206;
                    Value.Integer 207;
                    Value.Integer 73;
                    Value.Integer 78;
                    Value.Integer 79;
                    Value.Integer 87;
                    Value.Integer 89;
                    Value.Integer 94;
                    Value.Integer 95;
                    Value.Integer 137;
                    Value.Integer 142;
                    Value.Integer 143;
                    Value.Integer 177;
                    Value.Integer 182;
                    Value.Integer 183;
                    Value.Integer 191;
                    Value.Integer 193;
                    Value.Integer 198;
                    Value.Integer 199;
                    Value.Integer 215;
                    Value.Integer 17;
                    Value.Integer 22;
                    Value.Integer 23;
                    Value.Integer 91;
                    Value.Integer 92;
                    Value.Integer 246;
                    Value.Integer 247;
                    Value.Integer 254;
                    Value.Integer 255;
                    Value.Integer 128;
                    Value.Integer 109;
                    Value.Integer 113;
                    Value.Integer 222;
                    Value.Integer 223;
                    Value.Integer 14;
                    Value.Integer 31;
                    Value.Integer 110;
                    Value.Integer 111;
                    Value.Integer 28;
                    Value.Integer 29;
                    Value.Integer 95;
                    Value.Integer 125;
                    Value.Integer 126;
                    Value.Integer 174;
                    Value.Integer 175;
                    Value.Integer 127;
                    Value.Integer 187;
                    Value.Integer 188;
                    Value.Integer 22;
                    Value.Integer 23;
                    Value.Integer 30;
                    Value.Integer 31;
                    Value.Integer 70;
                    Value.Integer 71;
                    Value.Integer 78;
                    Value.Integer 79;
                    Value.Integer 88;
                    Value.Integer 90;
                    Value.Integer 92;
                    Value.Integer 94;
                    Value.Integer 126;
                    Value.Integer 127;
                    Value.Integer 181;
                    Value.Integer 197;
                    Value.Integer 212;
                    Value.Integer 213;
                    Value.Integer 220;
                    Value.Integer 240;
                    Value.Integer 241;
                    Value.Integer 245;
                    Value.Integer 114;
                    Value.Integer 115;
                    Value.Integer 143;
                    Value.Integer 116;
                    Value.Integer 117;
                    Value.Integer 150;
                    Value.Integer 38;
                    Value.Integer 46;
                    Value.Integer 47;
                    Value.Integer 167;
                    Value.Integer 175;
                    Value.Integer 183;
                    Value.Integer 191;
                    Value.Integer 199;
                    Value.Integer 207;
                    Value.Integer 215;
                    Value.Integer 223;
                    Value.Integer 154;
                    Value.Integer 64;
                    Value.Integer 151;
                    Value.Integer 152;
                    Value.Integer 48;
                    Value.Integer 143;
                    Value.Integer 31;
                    Value.Integer 210;
                    Value.Integer 212;
                    Value.Integer 206;
                    Value.Integer 255;
                    Value.Integer 78;
                    Value.Integer 79;
                    Value.Integer 90;
                    Value.Integer 91;
                    Value.Integer 7;
                    Value.Integer 8;
                    Value.Integer 15;
                    Value.Integer 16;
                    Value.Integer 39;
                    Value.Integer 47;
                    Value.Integer 238;
                    Value.Integer 239;
                    Value.Integer 110;
                    Value.Integer 111;
                    Value.Integer 55;
                    Value.Integer 61;
                    Value.Integer 63;
                    Value.Integer 66;
                    Value.Integer 69;
                    Value.Integer 144;
                    Value.Integer 145;
                    Value.Integer 83;
                    Value.Integer 103;
                    Value.Integer 117;
                    Value.Integer 200;
                    Value.Integer 201;
                    Value.Integer 208;
                    Value.Integer 209;
                    Value.Integer 216;
                    Value.Integer 217;
                    Value.Integer 231;
                    Value.Integer 254;
                    Value.Integer 255
                  ]
              |))
          |))).
    
    Definition value_SINGLETONS1U : Value.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            (* Unsize *)
            M.pointer_coercion
              (M.alloc (|
                Value.Array
                  [
                    Value.Tuple [ Value.Integer 0; Value.Integer 6 ];
                    Value.Tuple [ Value.Integer 1; Value.Integer 1 ];
                    Value.Tuple [ Value.Integer 3; Value.Integer 1 ];
                    Value.Tuple [ Value.Integer 4; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 5; Value.Integer 7 ];
                    Value.Tuple [ Value.Integer 7; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 8; Value.Integer 8 ];
                    Value.Tuple [ Value.Integer 9; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 10; Value.Integer 5 ];
                    Value.Tuple [ Value.Integer 11; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 14; Value.Integer 4 ];
                    Value.Tuple [ Value.Integer 16; Value.Integer 1 ];
                    Value.Tuple [ Value.Integer 17; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 18; Value.Integer 5 ];
                    Value.Tuple [ Value.Integer 19; Value.Integer 17 ];
                    Value.Tuple [ Value.Integer 20; Value.Integer 1 ];
                    Value.Tuple [ Value.Integer 21; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 23; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 25; Value.Integer 13 ];
                    Value.Tuple [ Value.Integer 28; Value.Integer 5 ];
                    Value.Tuple [ Value.Integer 29; Value.Integer 8 ];
                    Value.Tuple [ Value.Integer 31; Value.Integer 1 ];
                    Value.Tuple [ Value.Integer 36; Value.Integer 1 ];
                    Value.Tuple [ Value.Integer 106; Value.Integer 4 ];
                    Value.Tuple [ Value.Integer 107; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 175; Value.Integer 3 ];
                    Value.Tuple [ Value.Integer 177; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 188; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 207; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 209; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 212; Value.Integer 12 ];
                    Value.Tuple [ Value.Integer 213; Value.Integer 9 ];
                    Value.Tuple [ Value.Integer 214; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 215; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 218; Value.Integer 1 ];
                    Value.Tuple [ Value.Integer 224; Value.Integer 5 ];
                    Value.Tuple [ Value.Integer 225; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 231; Value.Integer 4 ];
                    Value.Tuple [ Value.Integer 232; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 238; Value.Integer 32 ];
                    Value.Tuple [ Value.Integer 240; Value.Integer 4 ];
                    Value.Tuple [ Value.Integer 248; Value.Integer 2 ];
                    Value.Tuple [ Value.Integer 250; Value.Integer 3 ];
                    Value.Tuple [ Value.Integer 251; Value.Integer 1 ]
                  ]
              |))
          |))).
    
    Definition value_SINGLETONS1L : Value.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            (* Unsize *)
            M.pointer_coercion
              (M.alloc (|
                Value.Array
                  [
                    Value.Integer 12;
                    Value.Integer 39;
                    Value.Integer 59;
                    Value.Integer 62;
                    Value.Integer 78;
                    Value.Integer 79;
                    Value.Integer 143;
                    Value.Integer 158;
                    Value.Integer 158;
                    Value.Integer 159;
                    Value.Integer 123;
                    Value.Integer 139;
                    Value.Integer 147;
                    Value.Integer 150;
                    Value.Integer 162;
                    Value.Integer 178;
                    Value.Integer 186;
                    Value.Integer 134;
                    Value.Integer 177;
                    Value.Integer 6;
                    Value.Integer 7;
                    Value.Integer 9;
                    Value.Integer 54;
                    Value.Integer 61;
                    Value.Integer 62;
                    Value.Integer 86;
                    Value.Integer 243;
                    Value.Integer 208;
                    Value.Integer 209;
                    Value.Integer 4;
                    Value.Integer 20;
                    Value.Integer 24;
                    Value.Integer 54;
                    Value.Integer 55;
                    Value.Integer 86;
                    Value.Integer 87;
                    Value.Integer 127;
                    Value.Integer 170;
                    Value.Integer 174;
                    Value.Integer 175;
                    Value.Integer 189;
                    Value.Integer 53;
                    Value.Integer 224;
                    Value.Integer 18;
                    Value.Integer 135;
                    Value.Integer 137;
                    Value.Integer 142;
                    Value.Integer 158;
                    Value.Integer 4;
                    Value.Integer 13;
                    Value.Integer 14;
                    Value.Integer 17;
                    Value.Integer 18;
                    Value.Integer 41;
                    Value.Integer 49;
                    Value.Integer 52;
                    Value.Integer 58;
                    Value.Integer 69;
                    Value.Integer 70;
                    Value.Integer 73;
                    Value.Integer 74;
                    Value.Integer 78;
                    Value.Integer 79;
                    Value.Integer 100;
                    Value.Integer 101;
                    Value.Integer 92;
                    Value.Integer 182;
                    Value.Integer 183;
                    Value.Integer 27;
                    Value.Integer 28;
                    Value.Integer 7;
                    Value.Integer 8;
                    Value.Integer 10;
                    Value.Integer 11;
                    Value.Integer 20;
                    Value.Integer 23;
                    Value.Integer 54;
                    Value.Integer 57;
                    Value.Integer 58;
                    Value.Integer 168;
                    Value.Integer 169;
                    Value.Integer 216;
                    Value.Integer 217;
                    Value.Integer 9;
                    Value.Integer 55;
                    Value.Integer 144;
                    Value.Integer 145;
                    Value.Integer 168;
                    Value.Integer 7;
                    Value.Integer 10;
                    Value.Integer 59;
                    Value.Integer 62;
                    Value.Integer 102;
                    Value.Integer 105;
                    Value.Integer 143;
                    Value.Integer 146;
                    Value.Integer 17;
                    Value.Integer 111;
                    Value.Integer 95;
                    Value.Integer 191;
                    Value.Integer 238;
                    Value.Integer 239;
                    Value.Integer 90;
                    Value.Integer 98;
                    Value.Integer 244;
                    Value.Integer 252;
                    Value.Integer 255;
                    Value.Integer 83;
                    Value.Integer 84;
                    Value.Integer 154;
                    Value.Integer 155;
                    Value.Integer 46;
                    Value.Integer 47;
                    Value.Integer 39;
                    Value.Integer 40;
                    Value.Integer 85;
                    Value.Integer 157;
                    Value.Integer 160;
                    Value.Integer 161;
                    Value.Integer 163;
                    Value.Integer 164;
                    Value.Integer 167;
                    Value.Integer 168;
                    Value.Integer 173;
                    Value.Integer 186;
                    Value.Integer 188;
                    Value.Integer 196;
                    Value.Integer 6;
                    Value.Integer 11;
                    Value.Integer 12;
                    Value.Integer 21;
                    Value.Integer 29;
                    Value.Integer 58;
                    Value.Integer 63;
                    Value.Integer 69;
                    Value.Integer 81;
                    Value.Integer 166;
                    Value.Integer 167;
                    Value.Integer 204;
                    Value.Integer 205;
                    Value.Integer 160;
                    Value.Integer 7;
                    Value.Integer 25;
                    Value.Integer 26;
                    Value.Integer 34;
                    Value.Integer 37;
                    Value.Integer 62;
                    Value.Integer 63;
                    Value.Integer 231;
                    Value.Integer 236;
                    Value.Integer 239;
                    Value.Integer 255;
                    Value.Integer 197;
                    Value.Integer 198;
                    Value.Integer 4;
                    Value.Integer 32;
                    Value.Integer 35;
                    Value.Integer 37;
                    Value.Integer 38;
                    Value.Integer 40;
                    Value.Integer 51;
                    Value.Integer 56;
                    Value.Integer 58;
                    Value.Integer 72;
                    Value.Integer 74;
                    Value.Integer 76;
                    Value.Integer 80;
                    Value.Integer 83;
                    Value.Integer 85;
                    Value.Integer 86;
                    Value.Integer 88;
                    Value.Integer 90;
                    Value.Integer 92;
                    Value.Integer 94;
                    Value.Integer 96;
                    Value.Integer 99;
                    Value.Integer 101;
                    Value.Integer 102;
                    Value.Integer 107;
                    Value.Integer 115;
                    Value.Integer 120;
                    Value.Integer 125;
                    Value.Integer 127;
                    Value.Integer 138;
                    Value.Integer 164;
                    Value.Integer 170;
                    Value.Integer 175;
                    Value.Integer 176;
                    Value.Integer 192;
                    Value.Integer 208;
                    Value.Integer 174;
                    Value.Integer 175;
                    Value.Integer 110;
                    Value.Integer 111;
                    Value.Integer 190;
                    Value.Integer 147
                  ]
              |))
          |))).
    
    Definition value_NORMAL0 : Value.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            (* Unsize *)
            M.pointer_coercion
              (M.alloc (|
                Value.Array
                  [
                    Value.Integer 0;
                    Value.Integer 32;
                    Value.Integer 95;
                    Value.Integer 34;
                    Value.Integer 130;
                    Value.Integer 223;
                    Value.Integer 4;
                    Value.Integer 130;
                    Value.Integer 68;
                    Value.Integer 8;
                    Value.Integer 27;
                    Value.Integer 4;
                    Value.Integer 6;
                    Value.Integer 17;
                    Value.Integer 129;
                    Value.Integer 172;
                    Value.Integer 14;
                    Value.Integer 128;
                    Value.Integer 171;
                    Value.Integer 5;
                    Value.Integer 31;
                    Value.Integer 9;
                    Value.Integer 129;
                    Value.Integer 27;
                    Value.Integer 3;
                    Value.Integer 25;
                    Value.Integer 8;
                    Value.Integer 1;
                    Value.Integer 4;
                    Value.Integer 47;
                    Value.Integer 4;
                    Value.Integer 52;
                    Value.Integer 4;
                    Value.Integer 7;
                    Value.Integer 3;
                    Value.Integer 1;
                    Value.Integer 7;
                    Value.Integer 6;
                    Value.Integer 7;
                    Value.Integer 17;
                    Value.Integer 10;
                    Value.Integer 80;
                    Value.Integer 15;
                    Value.Integer 18;
                    Value.Integer 7;
                    Value.Integer 85;
                    Value.Integer 7;
                    Value.Integer 3;
                    Value.Integer 4;
                    Value.Integer 28;
                    Value.Integer 10;
                    Value.Integer 9;
                    Value.Integer 3;
                    Value.Integer 8;
                    Value.Integer 3;
                    Value.Integer 7;
                    Value.Integer 3;
                    Value.Integer 2;
                    Value.Integer 3;
                    Value.Integer 3;
                    Value.Integer 3;
                    Value.Integer 12;
                    Value.Integer 4;
                    Value.Integer 5;
                    Value.Integer 3;
                    Value.Integer 11;
                    Value.Integer 6;
                    Value.Integer 1;
                    Value.Integer 14;
                    Value.Integer 21;
                    Value.Integer 5;
                    Value.Integer 78;
                    Value.Integer 7;
                    Value.Integer 27;
                    Value.Integer 7;
                    Value.Integer 87;
                    Value.Integer 7;
                    Value.Integer 2;
                    Value.Integer 6;
                    Value.Integer 23;
                    Value.Integer 12;
                    Value.Integer 80;
                    Value.Integer 4;
                    Value.Integer 67;
                    Value.Integer 3;
                    Value.Integer 45;
                    Value.Integer 3;
                    Value.Integer 1;
                    Value.Integer 4;
                    Value.Integer 17;
                    Value.Integer 6;
                    Value.Integer 15;
                    Value.Integer 12;
                    Value.Integer 58;
                    Value.Integer 4;
                    Value.Integer 29;
                    Value.Integer 37;
                    Value.Integer 95;
                    Value.Integer 32;
                    Value.Integer 109;
                    Value.Integer 4;
                    Value.Integer 106;
                    Value.Integer 37;
                    Value.Integer 128;
                    Value.Integer 200;
                    Value.Integer 5;
                    Value.Integer 130;
                    Value.Integer 176;
                    Value.Integer 3;
                    Value.Integer 26;
                    Value.Integer 6;
                    Value.Integer 130;
                    Value.Integer 253;
                    Value.Integer 3;
                    Value.Integer 89;
                    Value.Integer 7;
                    Value.Integer 22;
                    Value.Integer 9;
                    Value.Integer 24;
                    Value.Integer 9;
                    Value.Integer 20;
                    Value.Integer 12;
                    Value.Integer 20;
                    Value.Integer 12;
                    Value.Integer 106;
                    Value.Integer 6;
                    Value.Integer 10;
                    Value.Integer 6;
                    Value.Integer 26;
                    Value.Integer 6;
                    Value.Integer 89;
                    Value.Integer 7;
                    Value.Integer 43;
                    Value.Integer 5;
                    Value.Integer 70;
                    Value.Integer 10;
                    Value.Integer 44;
                    Value.Integer 4;
                    Value.Integer 12;
                    Value.Integer 4;
                    Value.Integer 1;
                    Value.Integer 3;
                    Value.Integer 49;
                    Value.Integer 11;
                    Value.Integer 44;
                    Value.Integer 4;
                    Value.Integer 26;
                    Value.Integer 6;
                    Value.Integer 11;
                    Value.Integer 3;
                    Value.Integer 128;
                    Value.Integer 172;
                    Value.Integer 6;
                    Value.Integer 10;
                    Value.Integer 6;
                    Value.Integer 47;
                    Value.Integer 49;
                    Value.Integer 77;
                    Value.Integer 3;
                    Value.Integer 128;
                    Value.Integer 164;
                    Value.Integer 8;
                    Value.Integer 60;
                    Value.Integer 3;
                    Value.Integer 15;
                    Value.Integer 3;
                    Value.Integer 60;
                    Value.Integer 7;
                    Value.Integer 56;
                    Value.Integer 8;
                    Value.Integer 43;
                    Value.Integer 5;
                    Value.Integer 130;
                    Value.Integer 255;
                    Value.Integer 17;
                    Value.Integer 24;
                    Value.Integer 8;
                    Value.Integer 47;
                    Value.Integer 17;
                    Value.Integer 45;
                    Value.Integer 3;
                    Value.Integer 33;
                    Value.Integer 15;
                    Value.Integer 33;
                    Value.Integer 15;
                    Value.Integer 128;
                    Value.Integer 140;
                    Value.Integer 4;
                    Value.Integer 130;
                    Value.Integer 151;
                    Value.Integer 25;
                    Value.Integer 11;
                    Value.Integer 21;
                    Value.Integer 136;
                    Value.Integer 148;
                    Value.Integer 5;
                    Value.Integer 47;
                    Value.Integer 5;
                    Value.Integer 59;
                    Value.Integer 7;
                    Value.Integer 2;
                    Value.Integer 14;
                    Value.Integer 24;
                    Value.Integer 9;
                    Value.Integer 128;
                    Value.Integer 190;
                    Value.Integer 34;
                    Value.Integer 116;
                    Value.Integer 12;
                    Value.Integer 128;
                    Value.Integer 214;
                    Value.Integer 26;
                    Value.Integer 12;
                    Value.Integer 5;
                    Value.Integer 128;
                    Value.Integer 255;
                    Value.Integer 5;
                    Value.Integer 128;
                    Value.Integer 223;
                    Value.Integer 12;
                    Value.Integer 242;
                    Value.Integer 157;
                    Value.Integer 3;
                    Value.Integer 55;
                    Value.Integer 9;
                    Value.Integer 129;
                    Value.Integer 92;
                    Value.Integer 20;
                    Value.Integer 128;
                    Value.Integer 184;
                    Value.Integer 8;
                    Value.Integer 128;
                    Value.Integer 203;
                    Value.Integer 5;
                    Value.Integer 10;
                    Value.Integer 24;
                    Value.Integer 59;
                    Value.Integer 3;
                    Value.Integer 10;
                    Value.Integer 6;
                    Value.Integer 56;
                    Value.Integer 8;
                    Value.Integer 70;
                    Value.Integer 8;
                    Value.Integer 12;
                    Value.Integer 6;
                    Value.Integer 116;
                    Value.Integer 11;
                    Value.Integer 30;
                    Value.Integer 3;
                    Value.Integer 90;
                    Value.Integer 4;
                    Value.Integer 89;
                    Value.Integer 9;
                    Value.Integer 128;
                    Value.Integer 131;
                    Value.Integer 24;
                    Value.Integer 28;
                    Value.Integer 10;
                    Value.Integer 22;
                    Value.Integer 9;
                    Value.Integer 76;
                    Value.Integer 4;
                    Value.Integer 128;
                    Value.Integer 138;
                    Value.Integer 6;
                    Value.Integer 171;
                    Value.Integer 164;
                    Value.Integer 12;
                    Value.Integer 23;
                    Value.Integer 4;
                    Value.Integer 49;
                    Value.Integer 161;
                    Value.Integer 4;
                    Value.Integer 129;
                    Value.Integer 218;
                    Value.Integer 38;
                    Value.Integer 7;
                    Value.Integer 12;
                    Value.Integer 5;
                    Value.Integer 5;
                    Value.Integer 128;
                    Value.Integer 166;
                    Value.Integer 16;
                    Value.Integer 129;
                    Value.Integer 245;
                    Value.Integer 7;
                    Value.Integer 1;
                    Value.Integer 32;
                    Value.Integer 42;
                    Value.Integer 6;
                    Value.Integer 76;
                    Value.Integer 4;
                    Value.Integer 128;
                    Value.Integer 141;
                    Value.Integer 4;
                    Value.Integer 128;
                    Value.Integer 190;
                    Value.Integer 3;
                    Value.Integer 27;
                    Value.Integer 3;
                    Value.Integer 15;
                    Value.Integer 13
                  ]
              |))
          |))).
    
    Definition value_NORMAL1 : Value.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            (* Unsize *)
            M.pointer_coercion
              (M.alloc (|
                Value.Array
                  [
                    Value.Integer 94;
                    Value.Integer 34;
                    Value.Integer 123;
                    Value.Integer 5;
                    Value.Integer 3;
                    Value.Integer 4;
                    Value.Integer 45;
                    Value.Integer 3;
                    Value.Integer 102;
                    Value.Integer 3;
                    Value.Integer 1;
                    Value.Integer 47;
                    Value.Integer 46;
                    Value.Integer 128;
                    Value.Integer 130;
                    Value.Integer 29;
                    Value.Integer 3;
                    Value.Integer 49;
                    Value.Integer 15;
                    Value.Integer 28;
                    Value.Integer 4;
                    Value.Integer 36;
                    Value.Integer 9;
                    Value.Integer 30;
                    Value.Integer 5;
                    Value.Integer 43;
                    Value.Integer 5;
                    Value.Integer 68;
                    Value.Integer 4;
                    Value.Integer 14;
                    Value.Integer 42;
                    Value.Integer 128;
                    Value.Integer 170;
                    Value.Integer 6;
                    Value.Integer 36;
                    Value.Integer 4;
                    Value.Integer 36;
                    Value.Integer 4;
                    Value.Integer 40;
                    Value.Integer 8;
                    Value.Integer 52;
                    Value.Integer 11;
                    Value.Integer 78;
                    Value.Integer 67;
                    Value.Integer 129;
                    Value.Integer 55;
                    Value.Integer 9;
                    Value.Integer 22;
                    Value.Integer 10;
                    Value.Integer 8;
                    Value.Integer 24;
                    Value.Integer 59;
                    Value.Integer 69;
                    Value.Integer 57;
                    Value.Integer 3;
                    Value.Integer 99;
                    Value.Integer 8;
                    Value.Integer 9;
                    Value.Integer 48;
                    Value.Integer 22;
                    Value.Integer 5;
                    Value.Integer 33;
                    Value.Integer 3;
                    Value.Integer 27;
                    Value.Integer 5;
                    Value.Integer 1;
                    Value.Integer 64;
                    Value.Integer 56;
                    Value.Integer 4;
                    Value.Integer 75;
                    Value.Integer 5;
                    Value.Integer 47;
                    Value.Integer 4;
                    Value.Integer 10;
                    Value.Integer 7;
                    Value.Integer 9;
                    Value.Integer 7;
                    Value.Integer 64;
                    Value.Integer 32;
                    Value.Integer 39;
                    Value.Integer 4;
                    Value.Integer 12;
                    Value.Integer 9;
                    Value.Integer 54;
                    Value.Integer 3;
                    Value.Integer 58;
                    Value.Integer 5;
                    Value.Integer 26;
                    Value.Integer 7;
                    Value.Integer 4;
                    Value.Integer 12;
                    Value.Integer 7;
                    Value.Integer 80;
                    Value.Integer 73;
                    Value.Integer 55;
                    Value.Integer 51;
                    Value.Integer 13;
                    Value.Integer 51;
                    Value.Integer 7;
                    Value.Integer 46;
                    Value.Integer 8;
                    Value.Integer 10;
                    Value.Integer 129;
                    Value.Integer 38;
                    Value.Integer 82;
                    Value.Integer 75;
                    Value.Integer 43;
                    Value.Integer 8;
                    Value.Integer 42;
                    Value.Integer 22;
                    Value.Integer 26;
                    Value.Integer 38;
                    Value.Integer 28;
                    Value.Integer 20;
                    Value.Integer 23;
                    Value.Integer 9;
                    Value.Integer 78;
                    Value.Integer 4;
                    Value.Integer 36;
                    Value.Integer 9;
                    Value.Integer 68;
                    Value.Integer 13;
                    Value.Integer 25;
                    Value.Integer 7;
                    Value.Integer 10;
                    Value.Integer 6;
                    Value.Integer 72;
                    Value.Integer 8;
                    Value.Integer 39;
                    Value.Integer 9;
                    Value.Integer 117;
                    Value.Integer 11;
                    Value.Integer 66;
                    Value.Integer 62;
                    Value.Integer 42;
                    Value.Integer 6;
                    Value.Integer 59;
                    Value.Integer 5;
                    Value.Integer 10;
                    Value.Integer 6;
                    Value.Integer 81;
                    Value.Integer 6;
                    Value.Integer 1;
                    Value.Integer 5;
                    Value.Integer 16;
                    Value.Integer 3;
                    Value.Integer 5;
                    Value.Integer 128;
                    Value.Integer 139;
                    Value.Integer 98;
                    Value.Integer 30;
                    Value.Integer 72;
                    Value.Integer 8;
                    Value.Integer 10;
                    Value.Integer 128;
                    Value.Integer 166;
                    Value.Integer 94;
                    Value.Integer 34;
                    Value.Integer 69;
                    Value.Integer 11;
                    Value.Integer 10;
                    Value.Integer 6;
                    Value.Integer 13;
                    Value.Integer 19;
                    Value.Integer 58;
                    Value.Integer 6;
                    Value.Integer 10;
                    Value.Integer 54;
                    Value.Integer 44;
                    Value.Integer 4;
                    Value.Integer 23;
                    Value.Integer 128;
                    Value.Integer 185;
                    Value.Integer 60;
                    Value.Integer 100;
                    Value.Integer 83;
                    Value.Integer 12;
                    Value.Integer 72;
                    Value.Integer 9;
                    Value.Integer 10;
                    Value.Integer 70;
                    Value.Integer 69;
                    Value.Integer 27;
                    Value.Integer 72;
                    Value.Integer 8;
                    Value.Integer 83;
                    Value.Integer 13;
                    Value.Integer 73;
                    Value.Integer 7;
                    Value.Integer 10;
                    Value.Integer 128;
                    Value.Integer 246;
                    Value.Integer 70;
                    Value.Integer 10;
                    Value.Integer 29;
                    Value.Integer 3;
                    Value.Integer 71;
                    Value.Integer 73;
                    Value.Integer 55;
                    Value.Integer 3;
                    Value.Integer 14;
                    Value.Integer 8;
                    Value.Integer 10;
                    Value.Integer 6;
                    Value.Integer 57;
                    Value.Integer 7;
                    Value.Integer 10;
                    Value.Integer 129;
                    Value.Integer 54;
                    Value.Integer 25;
                    Value.Integer 7;
                    Value.Integer 59;
                    Value.Integer 3;
                    Value.Integer 28;
                    Value.Integer 86;
                    Value.Integer 1;
                    Value.Integer 15;
                    Value.Integer 50;
                    Value.Integer 13;
                    Value.Integer 131;
                    Value.Integer 155;
                    Value.Integer 102;
                    Value.Integer 117;
                    Value.Integer 11;
                    Value.Integer 128;
                    Value.Integer 196;
                    Value.Integer 138;
                    Value.Integer 76;
                    Value.Integer 99;
                    Value.Integer 13;
                    Value.Integer 132;
                    Value.Integer 48;
                    Value.Integer 16;
                    Value.Integer 22;
                    Value.Integer 143;
                    Value.Integer 170;
                    Value.Integer 130;
                    Value.Integer 71;
                    Value.Integer 161;
                    Value.Integer 185;
                    Value.Integer 130;
                    Value.Integer 57;
                    Value.Integer 7;
                    Value.Integer 42;
                    Value.Integer 4;
                    Value.Integer 92;
                    Value.Integer 6;
                    Value.Integer 38;
                    Value.Integer 10;
                    Value.Integer 70;
                    Value.Integer 10;
                    Value.Integer 40;
                    Value.Integer 5;
                    Value.Integer 19;
                    Value.Integer 130;
                    Value.Integer 176;
                    Value.Integer 91;
                    Value.Integer 101;
                    Value.Integer 75;
                    Value.Integer 4;
                    Value.Integer 57;
                    Value.Integer 7;
                    Value.Integer 17;
                    Value.Integer 64;
                    Value.Integer 5;
                    Value.Integer 11;
                    Value.Integer 2;
                    Value.Integer 14;
                    Value.Integer 151;
                    Value.Integer 248;
                    Value.Integer 8;
                    Value.Integer 132;
                    Value.Integer 214;
                    Value.Integer 42;
                    Value.Integer 9;
                    Value.Integer 162;
                    Value.Integer 231;
                    Value.Integer 129;
                    Value.Integer 51;
                    Value.Integer 15;
                    Value.Integer 1;
                    Value.Integer 29;
                    Value.Integer 6;
                    Value.Integer 14;
                    Value.Integer 4;
                    Value.Integer 8;
                    Value.Integer 129;
                    Value.Integer 140;
                    Value.Integer 137;
                    Value.Integer 4;
                    Value.Integer 107;
                    Value.Integer 5;
                    Value.Integer 13;
                    Value.Integer 3;
                    Value.Integer 9;
                    Value.Integer 7;
                    Value.Integer 16;
                    Value.Integer 146;
                    Value.Integer 96;
                    Value.Integer 71;
                    Value.Integer 9;
                    Value.Integer 116;
                    Value.Integer 60;
                    Value.Integer 128;
                    Value.Integer 246;
                    Value.Integer 10;
                    Value.Integer 115;
                    Value.Integer 8;
                    Value.Integer 112;
                    Value.Integer 21;
                    Value.Integer 70;
                    Value.Integer 122;
                    Value.Integer 20;
                    Value.Integer 12;
                    Value.Integer 20;
                    Value.Integer 12;
                    Value.Integer 87;
                    Value.Integer 9;
                    Value.Integer 25;
                    Value.Integer 128;
                    Value.Integer 135;
                    Value.Integer 129;
                    Value.Integer 71;
                    Value.Integer 3;
                    Value.Integer 133;
                    Value.Integer 66;
                    Value.Integer 15;
                    Value.Integer 21;
                    Value.Integer 132;
                    Value.Integer 80;
                    Value.Integer 31;
                    Value.Integer 6;
                    Value.Integer 6;
                    Value.Integer 128;
                    Value.Integer 213;
                    Value.Integer 43;
                    Value.Integer 5;
                    Value.Integer 62;
                    Value.Integer 33;
                    Value.Integer 1;
                    Value.Integer 112;
                    Value.Integer 45;
                    Value.Integer 3;
                    Value.Integer 26;
                    Value.Integer 4;
                    Value.Integer 2;
                    Value.Integer 129;
                    Value.Integer 64;
                    Value.Integer 31;
                    Value.Integer 17;
                    Value.Integer 58;
                    Value.Integer 5;
                    Value.Integer 1;
                    Value.Integer 129;
                    Value.Integer 208;
                    Value.Integer 42;
                    Value.Integer 130;
                    Value.Integer 230;
                    Value.Integer 128;
                    Value.Integer 247;
                    Value.Integer 41;
                    Value.Integer 76;
                    Value.Integer 4;
                    Value.Integer 10;
                    Value.Integer 4;
                    Value.Integer 2;
                    Value.Integer 131;
                    Value.Integer 17;
                    Value.Integer 68;
                    Value.Integer 76;
                    Value.Integer 61;
                    Value.Integer 128;
                    Value.Integer 194;
                    Value.Integer 60;
                    Value.Integer 6;
                    Value.Integer 1;
                    Value.Integer 4;
                    Value.Integer 85;
                    Value.Integer 5;
                    Value.Integer 27;
                    Value.Integer 52;
                    Value.Integer 2;
                    Value.Integer 129;
                    Value.Integer 14;
                    Value.Integer 44;
                    Value.Integer 4;
                    Value.Integer 100;
                    Value.Integer 12;
                    Value.Integer 86;
                    Value.Integer 10;
                    Value.Integer 128;
                    Value.Integer 174;
                    Value.Integer 56;
                    Value.Integer 29;
                    Value.Integer 13;
                    Value.Integer 44;
                    Value.Integer 4;
                    Value.Integer 9;
                    Value.Integer 7;
                    Value.Integer 2;
                    Value.Integer 14;
                    Value.Integer 6;
                    Value.Integer 128;
                    Value.Integer 154;
                    Value.Integer 131;
                    Value.Integer 216;
                    Value.Integer 4;
                    Value.Integer 17;
                    Value.Integer 3;
                    Value.Integer 13;
                    Value.Integer 3;
                    Value.Integer 119;
                    Value.Integer 4;
                    Value.Integer 95;
                    Value.Integer 6;
                    Value.Integer 12;
                    Value.Integer 4;
                    Value.Integer 1;
                    Value.Integer 15;
                    Value.Integer 12;
                    Value.Integer 4;
                    Value.Integer 56;
                    Value.Integer 8;
                    Value.Integer 10;
                    Value.Integer 6;
                    Value.Integer 40;
                    Value.Integer 8;
                    Value.Integer 34;
                    Value.Integer 78;
                    Value.Integer 129;
                    Value.Integer 84;
                    Value.Integer 12;
                    Value.Integer 29;
                    Value.Integer 3;
                    Value.Integer 9;
                    Value.Integer 7;
                    Value.Integer 54;
                    Value.Integer 8;
                    Value.Integer 14;
                    Value.Integer 4;
                    Value.Integer 9;
                    Value.Integer 7;
                    Value.Integer 9;
                    Value.Integer 7;
                    Value.Integer 128;
                    Value.Integer 203;
                    Value.Integer 37;
                    Value.Integer 10;
                    Value.Integer 132;
                    Value.Integer 6
                  ]
              |))
          |))).
  End printable.
End unicode.
