(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module unicode.
  Module printable.
    (*
    fn check(x: u16, singletonuppers: &[(u8, u8)], singletonlowers: &[u8], normal: &[u8]) -> bool {
        let xupper = (x >> 8) as u8;
        let mut lowerstart = 0;
        for &(upper, lowercount) in singletonuppers {
            let lowerend = lowerstart + lowercount as usize;
            if xupper == upper {
                for &lower in &singletonlowers[lowerstart..lowerend] {
                    if lower == x as u8 {
                        return false;
                    }
                }
            } else if xupper < upper {
                break;
            }
            lowerstart = lowerend;
        }
    
        let mut x = x as i32;
        let mut normal = normal.iter().cloned();
        let mut current = true;
        while let Some(v) = normal.next() {
            let len = if v & 0x80 != 0 {
                ((v & 0x7f) as i32) << 8 | normal.next().unwrap() as i32
            } else {
                v as i32
            };
            x -= len;
            if x < 0 {
                break;
            }
            current = !current;
        }
        current
    }
    *)
    Definition check (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ x; singletonuppers; singletonlowers; normal ] =>
        ltac:(M.monadic
          (let x := M.alloc (| x |) in
          let singletonuppers := M.alloc (| singletonuppers |) in
          let singletonlowers := M.alloc (| singletonlowers |) in
          let normal := M.alloc (| normal |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ xupper : Ty.path "u8" :=
                  M.alloc (|
                    M.cast
                      (Ty.path "u8")
                      (M.call_closure (|
                        Ty.path "u16",
                        BinOp.Wrap.shr,
                        [ M.read (| x |); Value.Integer IntegerKind.I32 8 ]
                      |))
                  |) in
                let~ lowerstart : Ty.path "usize" :=
                  M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
                let~ _ : Ty.tuple [] :=
                  M.use
                    (M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.tuple [ Ty.path "u8"; Ty.path "u8" ] ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.tuple [ Ty.path "u8"; Ty.path "u8" ] ]
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| singletonuppers |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.tuple [ Ty.path "u8"; Ty.path "u8" ] ]
                                          ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.tuple [ Ty.path "u8"; Ty.path "u8" ] ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ0_0 := M.read (| γ0_0 |) in
                                          let γ2_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                          let γ2_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                          let upper := M.copy (| γ2_0 |) in
                                          let lowercount := M.copy (| γ2_1 |) in
                                          let~ lowerend : Ty.path "usize" :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.read (| lowerstart |);
                                                  M.cast (Ty.path "usize") (M.read (| lowercount |))
                                                ]
                                              |)
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Some (Ty.tuple []),
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            BinOp.eq,
                                                            [
                                                              M.read (| xupper |);
                                                              M.read (| upper |)
                                                            ]
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.use
                                                      (M.match_operator (|
                                                        Some (Ty.tuple []),
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              []
                                                              [ Ty.path "u8" ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Ty.path "u8" ]
                                                                ],
                                                              [],
                                                              [],
                                                              "into_iter",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ Ty.path "u8" ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::index::Index",
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ Ty.path "u8" ],
                                                                      [],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::ops::range::Range")
                                                                          []
                                                                          [ Ty.path "usize" ]
                                                                      ],
                                                                      "index",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            singletonlowers
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructRecord
                                                                        "core::ops::range::Range"
                                                                        [
                                                                          ("start",
                                                                            M.read (|
                                                                              lowerstart
                                                                            |));
                                                                          ("end_",
                                                                            M.read (| lowerend |))
                                                                        ]
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let iter := M.copy (| γ |) in
                                                              M.loop (|
                                                                Ty.tuple [],
                                                                ltac:(M.monadic
                                                                  (let~ _ : Ty.tuple [] :=
                                                                    M.match_operator (|
                                                                      Some (Ty.tuple []),
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [ Ty.path "u8" ]
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::iterator::Iterator",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [ Ty.path "u8" ],
                                                                            [],
                                                                            [],
                                                                            "next",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  iter
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let _ :=
                                                                              M.is_struct_tuple (|
                                                                                γ,
                                                                                "core::option::Option::None"
                                                                              |) in
                                                                            M.alloc (|
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.break (||)
                                                                                |)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::option::Option::Some",
                                                                                0
                                                                              |) in
                                                                            let γ0_0 :=
                                                                              M.read (| γ0_0 |) in
                                                                            let lower :=
                                                                              M.copy (| γ0_0 |) in
                                                                            M.match_operator (|
                                                                              Some (Ty.tuple []),
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ :=
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          M.call_closure (|
                                                                                            Ty.path
                                                                                              "bool",
                                                                                            BinOp.eq,
                                                                                            [
                                                                                              M.read (|
                                                                                                lower
                                                                                              |);
                                                                                              M.cast
                                                                                                (Ty.path
                                                                                                  "u8")
                                                                                                (M.read (|
                                                                                                  x
                                                                                                |))
                                                                                            ]
                                                                                          |)
                                                                                        |)) in
                                                                                    let _ :=
                                                                                      is_constant_or_break_match (|
                                                                                        M.read (|
                                                                                          γ
                                                                                        |),
                                                                                        Value.Bool
                                                                                          true
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      M.never_to_any (|
                                                                                        M.read (|
                                                                                          M.return_ (|
                                                                                            Value.Bool
                                                                                              false
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)));
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (M.alloc (|
                                                                                      Value.Tuple []
                                                                                    |)))
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                              |)))
                                                        ]
                                                      |))));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      Some (Ty.tuple []),
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.lt,
                                                                    [
                                                                      M.read (| xupper |);
                                                                      M.read (| upper |)
                                                                    ]
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.alloc (|
                                              M.write (| lowerstart, M.read (| lowerend |) |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let~ x : Ty.path "i32" := M.alloc (| M.cast (Ty.path "i32") (M.read (| x |)) |) in
                let~ normal :
                    Ty.apply
                      (Ty.path "core::iter::adapters::cloned::Cloned")
                      []
                      [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ] ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::cloned::Cloned")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ] ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                        [],
                        [],
                        "cloned",
                        [],
                        [ Ty.path "u8" ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                            "iter",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| normal |) |) |) ]
                        |)
                      ]
                    |)
                  |) in
                let~ current : Ty.path "bool" := M.alloc (| Value.Bool true |) in
                let~ _ : Ty.tuple [] :=
                  M.loop (|
                    Ty.tuple [],
                    ltac:(M.monadic
                      (M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u8" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::cloned::Cloned")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.path "u8" ]
                                        ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.MutRef, normal |) ]
                                  |)
                                |) in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let v := M.copy (| γ0_0 |) in
                              let~ len : Ty.path "i32" :=
                                M.copy (|
                                  M.match_operator (|
                                    Some (Ty.path "i32"),
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.ne,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u8",
                                                      BinOp.Wrap.bit_and,
                                                      [
                                                        M.read (| v |);
                                                        Value.Integer IntegerKind.U8 128
                                                      ]
                                                    |);
                                                    Value.Integer IntegerKind.U8 0
                                                  ]
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "i32",
                                              BinOp.Wrap.bit_or,
                                              [
                                                M.call_closure (|
                                                  Ty.path "i32",
                                                  BinOp.Wrap.shl,
                                                  [
                                                    M.cast
                                                      (Ty.path "i32")
                                                      (M.call_closure (|
                                                        Ty.path "u8",
                                                        BinOp.Wrap.bit_and,
                                                        [
                                                          M.read (| v |);
                                                          Value.Integer IntegerKind.U8 127
                                                        ]
                                                      |));
                                                    Value.Integer IntegerKind.I32 8
                                                  ]
                                                |);
                                                M.cast
                                                  (Ty.path "i32")
                                                  (M.call_closure (|
                                                    Ty.path "u8",
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ Ty.path "u8" ],
                                                      "unwrap",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Ty.path "u8" ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::cloned::Cloned")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                []
                                                                [ Ty.path "u8" ]
                                                            ],
                                                          [],
                                                          [],
                                                          "next",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.borrow (| Pointer.Kind.MutRef, normal |)
                                                        ]
                                                      |)
                                                    ]
                                                  |))
                                              ]
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (| M.cast (Ty.path "i32") (M.read (| v |)) |)))
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  let β := x in
                                  M.write (|
                                    β,
                                    M.call_closure (|
                                      Ty.path "i32",
                                      BinOp.Wrap.sub,
                                      [ M.read (| β |); M.read (| len |) ]
                                    |)
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.lt,
                                                [ M.read (| x |); Value.Integer IntegerKind.I32 0 ]
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  M.write (| current, UnOp.not (| M.read (| current |) |) |)
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                  |) in
                current
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_check :
      M.IsFunction.C "core::unicode::printable::check" check.
    Admitted.
    Global Typeclasses Opaque check.
    
    (*
    pub(crate) fn is_printable(x: char) -> bool {
        let x = x as u32;
        let lower = x as u16;
    
        if x < 32 {
            // ASCII fast path
            false
        } else if x < 127 {
            // ASCII fast path
            true
        } else if x < 0x10000 {
            check(lower, SINGLETONS0U, SINGLETONS0L, NORMAL0)
        } else if x < 0x20000 {
            check(lower, SINGLETONS1U, SINGLETONS1L, NORMAL1)
        } else {
            if 0x2a6e0 <= x && x < 0x2a700 {
                return false;
            }
            if 0x2b73a <= x && x < 0x2b740 {
                return false;
            }
            if 0x2b81e <= x && x < 0x2b820 {
                return false;
            }
            if 0x2cea2 <= x && x < 0x2ceb0 {
                return false;
            }
            if 0x2ebe1 <= x && x < 0x2ebf0 {
                return false;
            }
            if 0x2ee5e <= x && x < 0x2f800 {
                return false;
            }
            if 0x2fa1e <= x && x < 0x30000 {
                return false;
            }
            if 0x3134b <= x && x < 0x31350 {
                return false;
            }
            if 0x323b0 <= x && x < 0xe0100 {
                return false;
            }
            if 0xe01f0 <= x && x < 0x110000 {
                return false;
            }
            true
        }
    }
    *)
    Definition is_printable (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ x ] =>
        ltac:(M.monadic
          (let x := M.alloc (| x |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ x : Ty.path "u32" := M.alloc (| M.cast (Ty.path "u32") (M.read (| x |)) |) in
                let~ lower : Ty.path "u16" :=
                  M.alloc (| M.cast (Ty.path "u16") (M.read (| x |)) |) in
                M.match_operator (|
                  Some (Ty.path "bool"),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.lt,
                                [ M.read (| x |); Value.Integer IntegerKind.U32 32 ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (| Value.Bool false |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Some (Ty.path "bool"),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [ M.read (| x |); Value.Integer IntegerKind.U32 127 ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (| Value.Bool true |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Some (Ty.path "bool"),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.lt,
                                                [
                                                  M.read (| x |);
                                                  Value.Integer IntegerKind.U32 65536
                                                ]
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_function (|
                                              "core::unicode::printable::check",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (| lower |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.read (|
                                                    get_constant (|
                                                      "core::unicode::printable::SINGLETONS0U",
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.tuple
                                                                [ Ty.path "u8"; Ty.path "u8" ]
                                                            ]
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.read (|
                                                    get_constant (|
                                                      "core::unicode::printable::SINGLETONS0L",
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.read (|
                                                    get_constant (|
                                                      "core::unicode::printable::NORMAL0",
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Some (Ty.path "bool"),
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.lt,
                                                        [
                                                          M.read (| x |);
                                                          Value.Integer IntegerKind.U32 131072
                                                        ]
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_function (|
                                                      "core::unicode::printable::check",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| lower |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.read (|
                                                            get_constant (|
                                                              "core::unicode::printable::SINGLETONS1U",
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [
                                                                      Ty.tuple
                                                                        [ Ty.path "u8"; Ty.path "u8"
                                                                        ]
                                                                    ]
                                                                ]
                                                            |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.read (|
                                                            get_constant (|
                                                              "core::unicode::printable::SINGLETONS1L",
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Ty.path "u8" ]
                                                                ]
                                                            |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.read (|
                                                            get_constant (|
                                                              "core::unicode::printable::NORMAL1",
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Ty.path "u8" ]
                                                                ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.le,
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.U32
                                                                        173792;
                                                                      M.read (| x |)
                                                                    ]
                                                                  |),
                                                                  ltac:(M.monadic
                                                                    (M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.lt,
                                                                      [
                                                                        M.read (| x |);
                                                                        Value.Integer
                                                                          IntegerKind.U32
                                                                          173824
                                                                      ]
                                                                    |)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.le,
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.U32
                                                                        177978;
                                                                      M.read (| x |)
                                                                    ]
                                                                  |),
                                                                  ltac:(M.monadic
                                                                    (M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.lt,
                                                                      [
                                                                        M.read (| x |);
                                                                        Value.Integer
                                                                          IntegerKind.U32
                                                                          177984
                                                                      ]
                                                                    |)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.le,
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.U32
                                                                        178206;
                                                                      M.read (| x |)
                                                                    ]
                                                                  |),
                                                                  ltac:(M.monadic
                                                                    (M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.lt,
                                                                      [
                                                                        M.read (| x |);
                                                                        Value.Integer
                                                                          IntegerKind.U32
                                                                          178208
                                                                      ]
                                                                    |)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.le,
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.U32
                                                                        183970;
                                                                      M.read (| x |)
                                                                    ]
                                                                  |),
                                                                  ltac:(M.monadic
                                                                    (M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.lt,
                                                                      [
                                                                        M.read (| x |);
                                                                        Value.Integer
                                                                          IntegerKind.U32
                                                                          183984
                                                                      ]
                                                                    |)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.le,
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.U32
                                                                        191457;
                                                                      M.read (| x |)
                                                                    ]
                                                                  |),
                                                                  ltac:(M.monadic
                                                                    (M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.lt,
                                                                      [
                                                                        M.read (| x |);
                                                                        Value.Integer
                                                                          IntegerKind.U32
                                                                          191472
                                                                      ]
                                                                    |)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.le,
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.U32
                                                                        192094;
                                                                      M.read (| x |)
                                                                    ]
                                                                  |),
                                                                  ltac:(M.monadic
                                                                    (M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.lt,
                                                                      [
                                                                        M.read (| x |);
                                                                        Value.Integer
                                                                          IntegerKind.U32
                                                                          194560
                                                                      ]
                                                                    |)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.le,
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.U32
                                                                        195102;
                                                                      M.read (| x |)
                                                                    ]
                                                                  |),
                                                                  ltac:(M.monadic
                                                                    (M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.lt,
                                                                      [
                                                                        M.read (| x |);
                                                                        Value.Integer
                                                                          IntegerKind.U32
                                                                          196608
                                                                      ]
                                                                    |)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.le,
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.U32
                                                                        201547;
                                                                      M.read (| x |)
                                                                    ]
                                                                  |),
                                                                  ltac:(M.monadic
                                                                    (M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.lt,
                                                                      [
                                                                        M.read (| x |);
                                                                        Value.Integer
                                                                          IntegerKind.U32
                                                                          201552
                                                                      ]
                                                                    |)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.le,
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.U32
                                                                        205744;
                                                                      M.read (| x |)
                                                                    ]
                                                                  |),
                                                                  ltac:(M.monadic
                                                                    (M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.lt,
                                                                      [
                                                                        M.read (| x |);
                                                                        Value.Integer
                                                                          IntegerKind.U32
                                                                          917760
                                                                      ]
                                                                    |)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                LogicalOp.and (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.le,
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.U32
                                                                        918000;
                                                                      M.read (| x |)
                                                                    ]
                                                                  |),
                                                                  ltac:(M.monadic
                                                                    (M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.lt,
                                                                      [
                                                                        M.read (| x |);
                                                                        Value.Integer
                                                                          IntegerKind.U32
                                                                          1114112
                                                                      ]
                                                                    |)))
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (| Value.Bool false |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                M.alloc (| Value.Bool true |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_is_printable :
      M.IsFunction.C "core::unicode::printable::is_printable" is_printable.
    Admitted.
    Global Typeclasses Opaque is_printable.
    
    Definition value_SINGLETONS0U (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          (* Unsize *)
          M.pointer_coercion
            (M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.alloc (|
                    Value.Array
                      [
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 0; Value.Integer IntegerKind.U8 1 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 3; Value.Integer IntegerKind.U8 5 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 5; Value.Integer IntegerKind.U8 6 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 6; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 7; Value.Integer IntegerKind.U8 6 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 8; Value.Integer IntegerKind.U8 7 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 9; Value.Integer IntegerKind.U8 17 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 10; Value.Integer IntegerKind.U8 28 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 11; Value.Integer IntegerKind.U8 25 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 12; Value.Integer IntegerKind.U8 26 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 13; Value.Integer IntegerKind.U8 16 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 14; Value.Integer IntegerKind.U8 12 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 15; Value.Integer IntegerKind.U8 4 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 16; Value.Integer IntegerKind.U8 3 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 18; Value.Integer IntegerKind.U8 18 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 19; Value.Integer IntegerKind.U8 9 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 22; Value.Integer IntegerKind.U8 1 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 23; Value.Integer IntegerKind.U8 4 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 24; Value.Integer IntegerKind.U8 1 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 25; Value.Integer IntegerKind.U8 3 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 26; Value.Integer IntegerKind.U8 7 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 27; Value.Integer IntegerKind.U8 1 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 28; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 31; Value.Integer IntegerKind.U8 22 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 32; Value.Integer IntegerKind.U8 3 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 43; Value.Integer IntegerKind.U8 3 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 45; Value.Integer IntegerKind.U8 11 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 46; Value.Integer IntegerKind.U8 1 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 48; Value.Integer IntegerKind.U8 4 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 49; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 50; Value.Integer IntegerKind.U8 1 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 167; Value.Integer IntegerKind.U8 4 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 169; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 170; Value.Integer IntegerKind.U8 4 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 171; Value.Integer IntegerKind.U8 8 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 250; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 251; Value.Integer IntegerKind.U8 5 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 253; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 254; Value.Integer IntegerKind.U8 3 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 255; Value.Integer IntegerKind.U8 9 ]
                      ]
                  |)
                |)
              |)
            |))
        |))).
    
    Global Instance Instance_IsConstant_value_SINGLETONS0U :
      M.IsFunction.C "core::unicode::printable::SINGLETONS0U" value_SINGLETONS0U.
    Admitted.
    Global Typeclasses Opaque value_SINGLETONS0U.
    
    Definition value_SINGLETONS0L (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          (* Unsize *)
          M.pointer_coercion
            (M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.alloc (|
                    Value.Array
                      [
                        Value.Integer IntegerKind.U8 173;
                        Value.Integer IntegerKind.U8 120;
                        Value.Integer IntegerKind.U8 121;
                        Value.Integer IntegerKind.U8 139;
                        Value.Integer IntegerKind.U8 141;
                        Value.Integer IntegerKind.U8 162;
                        Value.Integer IntegerKind.U8 48;
                        Value.Integer IntegerKind.U8 87;
                        Value.Integer IntegerKind.U8 88;
                        Value.Integer IntegerKind.U8 139;
                        Value.Integer IntegerKind.U8 140;
                        Value.Integer IntegerKind.U8 144;
                        Value.Integer IntegerKind.U8 28;
                        Value.Integer IntegerKind.U8 221;
                        Value.Integer IntegerKind.U8 14;
                        Value.Integer IntegerKind.U8 15;
                        Value.Integer IntegerKind.U8 75;
                        Value.Integer IntegerKind.U8 76;
                        Value.Integer IntegerKind.U8 251;
                        Value.Integer IntegerKind.U8 252;
                        Value.Integer IntegerKind.U8 46;
                        Value.Integer IntegerKind.U8 47;
                        Value.Integer IntegerKind.U8 63;
                        Value.Integer IntegerKind.U8 92;
                        Value.Integer IntegerKind.U8 93;
                        Value.Integer IntegerKind.U8 95;
                        Value.Integer IntegerKind.U8 226;
                        Value.Integer IntegerKind.U8 132;
                        Value.Integer IntegerKind.U8 141;
                        Value.Integer IntegerKind.U8 142;
                        Value.Integer IntegerKind.U8 145;
                        Value.Integer IntegerKind.U8 146;
                        Value.Integer IntegerKind.U8 169;
                        Value.Integer IntegerKind.U8 177;
                        Value.Integer IntegerKind.U8 186;
                        Value.Integer IntegerKind.U8 187;
                        Value.Integer IntegerKind.U8 197;
                        Value.Integer IntegerKind.U8 198;
                        Value.Integer IntegerKind.U8 201;
                        Value.Integer IntegerKind.U8 202;
                        Value.Integer IntegerKind.U8 222;
                        Value.Integer IntegerKind.U8 228;
                        Value.Integer IntegerKind.U8 229;
                        Value.Integer IntegerKind.U8 255;
                        Value.Integer IntegerKind.U8 0;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 18;
                        Value.Integer IntegerKind.U8 41;
                        Value.Integer IntegerKind.U8 49;
                        Value.Integer IntegerKind.U8 52;
                        Value.Integer IntegerKind.U8 55;
                        Value.Integer IntegerKind.U8 58;
                        Value.Integer IntegerKind.U8 59;
                        Value.Integer IntegerKind.U8 61;
                        Value.Integer IntegerKind.U8 73;
                        Value.Integer IntegerKind.U8 74;
                        Value.Integer IntegerKind.U8 93;
                        Value.Integer IntegerKind.U8 132;
                        Value.Integer IntegerKind.U8 142;
                        Value.Integer IntegerKind.U8 146;
                        Value.Integer IntegerKind.U8 169;
                        Value.Integer IntegerKind.U8 177;
                        Value.Integer IntegerKind.U8 180;
                        Value.Integer IntegerKind.U8 186;
                        Value.Integer IntegerKind.U8 187;
                        Value.Integer IntegerKind.U8 198;
                        Value.Integer IntegerKind.U8 202;
                        Value.Integer IntegerKind.U8 206;
                        Value.Integer IntegerKind.U8 207;
                        Value.Integer IntegerKind.U8 228;
                        Value.Integer IntegerKind.U8 229;
                        Value.Integer IntegerKind.U8 0;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 13;
                        Value.Integer IntegerKind.U8 14;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 18;
                        Value.Integer IntegerKind.U8 41;
                        Value.Integer IntegerKind.U8 49;
                        Value.Integer IntegerKind.U8 52;
                        Value.Integer IntegerKind.U8 58;
                        Value.Integer IntegerKind.U8 59;
                        Value.Integer IntegerKind.U8 69;
                        Value.Integer IntegerKind.U8 70;
                        Value.Integer IntegerKind.U8 73;
                        Value.Integer IntegerKind.U8 74;
                        Value.Integer IntegerKind.U8 94;
                        Value.Integer IntegerKind.U8 100;
                        Value.Integer IntegerKind.U8 101;
                        Value.Integer IntegerKind.U8 132;
                        Value.Integer IntegerKind.U8 145;
                        Value.Integer IntegerKind.U8 155;
                        Value.Integer IntegerKind.U8 157;
                        Value.Integer IntegerKind.U8 201;
                        Value.Integer IntegerKind.U8 206;
                        Value.Integer IntegerKind.U8 207;
                        Value.Integer IntegerKind.U8 13;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 41;
                        Value.Integer IntegerKind.U8 58;
                        Value.Integer IntegerKind.U8 59;
                        Value.Integer IntegerKind.U8 69;
                        Value.Integer IntegerKind.U8 73;
                        Value.Integer IntegerKind.U8 87;
                        Value.Integer IntegerKind.U8 91;
                        Value.Integer IntegerKind.U8 92;
                        Value.Integer IntegerKind.U8 94;
                        Value.Integer IntegerKind.U8 95;
                        Value.Integer IntegerKind.U8 100;
                        Value.Integer IntegerKind.U8 101;
                        Value.Integer IntegerKind.U8 141;
                        Value.Integer IntegerKind.U8 145;
                        Value.Integer IntegerKind.U8 169;
                        Value.Integer IntegerKind.U8 180;
                        Value.Integer IntegerKind.U8 186;
                        Value.Integer IntegerKind.U8 187;
                        Value.Integer IntegerKind.U8 197;
                        Value.Integer IntegerKind.U8 201;
                        Value.Integer IntegerKind.U8 223;
                        Value.Integer IntegerKind.U8 228;
                        Value.Integer IntegerKind.U8 229;
                        Value.Integer IntegerKind.U8 240;
                        Value.Integer IntegerKind.U8 13;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 69;
                        Value.Integer IntegerKind.U8 73;
                        Value.Integer IntegerKind.U8 100;
                        Value.Integer IntegerKind.U8 101;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 132;
                        Value.Integer IntegerKind.U8 178;
                        Value.Integer IntegerKind.U8 188;
                        Value.Integer IntegerKind.U8 190;
                        Value.Integer IntegerKind.U8 191;
                        Value.Integer IntegerKind.U8 213;
                        Value.Integer IntegerKind.U8 215;
                        Value.Integer IntegerKind.U8 240;
                        Value.Integer IntegerKind.U8 241;
                        Value.Integer IntegerKind.U8 131;
                        Value.Integer IntegerKind.U8 133;
                        Value.Integer IntegerKind.U8 139;
                        Value.Integer IntegerKind.U8 164;
                        Value.Integer IntegerKind.U8 166;
                        Value.Integer IntegerKind.U8 190;
                        Value.Integer IntegerKind.U8 191;
                        Value.Integer IntegerKind.U8 197;
                        Value.Integer IntegerKind.U8 199;
                        Value.Integer IntegerKind.U8 207;
                        Value.Integer IntegerKind.U8 218;
                        Value.Integer IntegerKind.U8 219;
                        Value.Integer IntegerKind.U8 72;
                        Value.Integer IntegerKind.U8 152;
                        Value.Integer IntegerKind.U8 189;
                        Value.Integer IntegerKind.U8 205;
                        Value.Integer IntegerKind.U8 198;
                        Value.Integer IntegerKind.U8 206;
                        Value.Integer IntegerKind.U8 207;
                        Value.Integer IntegerKind.U8 73;
                        Value.Integer IntegerKind.U8 78;
                        Value.Integer IntegerKind.U8 79;
                        Value.Integer IntegerKind.U8 87;
                        Value.Integer IntegerKind.U8 89;
                        Value.Integer IntegerKind.U8 94;
                        Value.Integer IntegerKind.U8 95;
                        Value.Integer IntegerKind.U8 137;
                        Value.Integer IntegerKind.U8 142;
                        Value.Integer IntegerKind.U8 143;
                        Value.Integer IntegerKind.U8 177;
                        Value.Integer IntegerKind.U8 182;
                        Value.Integer IntegerKind.U8 183;
                        Value.Integer IntegerKind.U8 191;
                        Value.Integer IntegerKind.U8 193;
                        Value.Integer IntegerKind.U8 198;
                        Value.Integer IntegerKind.U8 199;
                        Value.Integer IntegerKind.U8 215;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 22;
                        Value.Integer IntegerKind.U8 23;
                        Value.Integer IntegerKind.U8 91;
                        Value.Integer IntegerKind.U8 92;
                        Value.Integer IntegerKind.U8 246;
                        Value.Integer IntegerKind.U8 247;
                        Value.Integer IntegerKind.U8 254;
                        Value.Integer IntegerKind.U8 255;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 109;
                        Value.Integer IntegerKind.U8 113;
                        Value.Integer IntegerKind.U8 222;
                        Value.Integer IntegerKind.U8 223;
                        Value.Integer IntegerKind.U8 14;
                        Value.Integer IntegerKind.U8 31;
                        Value.Integer IntegerKind.U8 110;
                        Value.Integer IntegerKind.U8 111;
                        Value.Integer IntegerKind.U8 28;
                        Value.Integer IntegerKind.U8 29;
                        Value.Integer IntegerKind.U8 95;
                        Value.Integer IntegerKind.U8 125;
                        Value.Integer IntegerKind.U8 126;
                        Value.Integer IntegerKind.U8 174;
                        Value.Integer IntegerKind.U8 175;
                        Value.Integer IntegerKind.U8 77;
                        Value.Integer IntegerKind.U8 187;
                        Value.Integer IntegerKind.U8 188;
                        Value.Integer IntegerKind.U8 22;
                        Value.Integer IntegerKind.U8 23;
                        Value.Integer IntegerKind.U8 30;
                        Value.Integer IntegerKind.U8 31;
                        Value.Integer IntegerKind.U8 70;
                        Value.Integer IntegerKind.U8 71;
                        Value.Integer IntegerKind.U8 78;
                        Value.Integer IntegerKind.U8 79;
                        Value.Integer IntegerKind.U8 88;
                        Value.Integer IntegerKind.U8 90;
                        Value.Integer IntegerKind.U8 92;
                        Value.Integer IntegerKind.U8 94;
                        Value.Integer IntegerKind.U8 126;
                        Value.Integer IntegerKind.U8 127;
                        Value.Integer IntegerKind.U8 181;
                        Value.Integer IntegerKind.U8 197;
                        Value.Integer IntegerKind.U8 212;
                        Value.Integer IntegerKind.U8 213;
                        Value.Integer IntegerKind.U8 220;
                        Value.Integer IntegerKind.U8 240;
                        Value.Integer IntegerKind.U8 241;
                        Value.Integer IntegerKind.U8 245;
                        Value.Integer IntegerKind.U8 114;
                        Value.Integer IntegerKind.U8 115;
                        Value.Integer IntegerKind.U8 143;
                        Value.Integer IntegerKind.U8 116;
                        Value.Integer IntegerKind.U8 117;
                        Value.Integer IntegerKind.U8 150;
                        Value.Integer IntegerKind.U8 38;
                        Value.Integer IntegerKind.U8 46;
                        Value.Integer IntegerKind.U8 47;
                        Value.Integer IntegerKind.U8 167;
                        Value.Integer IntegerKind.U8 175;
                        Value.Integer IntegerKind.U8 183;
                        Value.Integer IntegerKind.U8 191;
                        Value.Integer IntegerKind.U8 199;
                        Value.Integer IntegerKind.U8 207;
                        Value.Integer IntegerKind.U8 215;
                        Value.Integer IntegerKind.U8 223;
                        Value.Integer IntegerKind.U8 154;
                        Value.Integer IntegerKind.U8 0;
                        Value.Integer IntegerKind.U8 64;
                        Value.Integer IntegerKind.U8 151;
                        Value.Integer IntegerKind.U8 152;
                        Value.Integer IntegerKind.U8 48;
                        Value.Integer IntegerKind.U8 143;
                        Value.Integer IntegerKind.U8 31;
                        Value.Integer IntegerKind.U8 206;
                        Value.Integer IntegerKind.U8 207;
                        Value.Integer IntegerKind.U8 210;
                        Value.Integer IntegerKind.U8 212;
                        Value.Integer IntegerKind.U8 206;
                        Value.Integer IntegerKind.U8 255;
                        Value.Integer IntegerKind.U8 78;
                        Value.Integer IntegerKind.U8 79;
                        Value.Integer IntegerKind.U8 90;
                        Value.Integer IntegerKind.U8 91;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 15;
                        Value.Integer IntegerKind.U8 16;
                        Value.Integer IntegerKind.U8 39;
                        Value.Integer IntegerKind.U8 47;
                        Value.Integer IntegerKind.U8 238;
                        Value.Integer IntegerKind.U8 239;
                        Value.Integer IntegerKind.U8 110;
                        Value.Integer IntegerKind.U8 111;
                        Value.Integer IntegerKind.U8 55;
                        Value.Integer IntegerKind.U8 61;
                        Value.Integer IntegerKind.U8 63;
                        Value.Integer IntegerKind.U8 66;
                        Value.Integer IntegerKind.U8 69;
                        Value.Integer IntegerKind.U8 144;
                        Value.Integer IntegerKind.U8 145;
                        Value.Integer IntegerKind.U8 83;
                        Value.Integer IntegerKind.U8 103;
                        Value.Integer IntegerKind.U8 117;
                        Value.Integer IntegerKind.U8 200;
                        Value.Integer IntegerKind.U8 201;
                        Value.Integer IntegerKind.U8 208;
                        Value.Integer IntegerKind.U8 209;
                        Value.Integer IntegerKind.U8 216;
                        Value.Integer IntegerKind.U8 217;
                        Value.Integer IntegerKind.U8 231;
                        Value.Integer IntegerKind.U8 254;
                        Value.Integer IntegerKind.U8 255
                      ]
                  |)
                |)
              |)
            |))
        |))).
    
    Global Instance Instance_IsConstant_value_SINGLETONS0L :
      M.IsFunction.C "core::unicode::printable::SINGLETONS0L" value_SINGLETONS0L.
    Admitted.
    Global Typeclasses Opaque value_SINGLETONS0L.
    
    Definition value_SINGLETONS1U (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          (* Unsize *)
          M.pointer_coercion
            (M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.alloc (|
                    Value.Array
                      [
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 0; Value.Integer IntegerKind.U8 6 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 1; Value.Integer IntegerKind.U8 1 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 3; Value.Integer IntegerKind.U8 1 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 4; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 5; Value.Integer IntegerKind.U8 7 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 7; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 8; Value.Integer IntegerKind.U8 8 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 9; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 10; Value.Integer IntegerKind.U8 5 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 11; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 14; Value.Integer IntegerKind.U8 4 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 16; Value.Integer IntegerKind.U8 1 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 17; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 18; Value.Integer IntegerKind.U8 5 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 19; Value.Integer IntegerKind.U8 28 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 20; Value.Integer IntegerKind.U8 1 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 21; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 23; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 25; Value.Integer IntegerKind.U8 13 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 28; Value.Integer IntegerKind.U8 5 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 29; Value.Integer IntegerKind.U8 8 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 31; Value.Integer IntegerKind.U8 1 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 36; Value.Integer IntegerKind.U8 1 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 106; Value.Integer IntegerKind.U8 4 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 107; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 175; Value.Integer IntegerKind.U8 3 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 177; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 188; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 207; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 209; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 212; Value.Integer IntegerKind.U8 12 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 213; Value.Integer IntegerKind.U8 9 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 214; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 215; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 218; Value.Integer IntegerKind.U8 1 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 224; Value.Integer IntegerKind.U8 5 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 225; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 231; Value.Integer IntegerKind.U8 4 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 232; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 238; Value.Integer IntegerKind.U8 32 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 240; Value.Integer IntegerKind.U8 4 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 248; Value.Integer IntegerKind.U8 2 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 250; Value.Integer IntegerKind.U8 4 ];
                        Value.Tuple
                          [ Value.Integer IntegerKind.U8 251; Value.Integer IntegerKind.U8 1 ]
                      ]
                  |)
                |)
              |)
            |))
        |))).
    
    Global Instance Instance_IsConstant_value_SINGLETONS1U :
      M.IsFunction.C "core::unicode::printable::SINGLETONS1U" value_SINGLETONS1U.
    Admitted.
    Global Typeclasses Opaque value_SINGLETONS1U.
    
    Definition value_SINGLETONS1L (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          (* Unsize *)
          M.pointer_coercion
            (M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.alloc (|
                    Value.Array
                      [
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 39;
                        Value.Integer IntegerKind.U8 59;
                        Value.Integer IntegerKind.U8 62;
                        Value.Integer IntegerKind.U8 78;
                        Value.Integer IntegerKind.U8 79;
                        Value.Integer IntegerKind.U8 143;
                        Value.Integer IntegerKind.U8 158;
                        Value.Integer IntegerKind.U8 158;
                        Value.Integer IntegerKind.U8 159;
                        Value.Integer IntegerKind.U8 123;
                        Value.Integer IntegerKind.U8 139;
                        Value.Integer IntegerKind.U8 147;
                        Value.Integer IntegerKind.U8 150;
                        Value.Integer IntegerKind.U8 162;
                        Value.Integer IntegerKind.U8 178;
                        Value.Integer IntegerKind.U8 186;
                        Value.Integer IntegerKind.U8 134;
                        Value.Integer IntegerKind.U8 177;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 54;
                        Value.Integer IntegerKind.U8 61;
                        Value.Integer IntegerKind.U8 62;
                        Value.Integer IntegerKind.U8 86;
                        Value.Integer IntegerKind.U8 243;
                        Value.Integer IntegerKind.U8 208;
                        Value.Integer IntegerKind.U8 209;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 20;
                        Value.Integer IntegerKind.U8 24;
                        Value.Integer IntegerKind.U8 54;
                        Value.Integer IntegerKind.U8 55;
                        Value.Integer IntegerKind.U8 86;
                        Value.Integer IntegerKind.U8 87;
                        Value.Integer IntegerKind.U8 127;
                        Value.Integer IntegerKind.U8 170;
                        Value.Integer IntegerKind.U8 174;
                        Value.Integer IntegerKind.U8 175;
                        Value.Integer IntegerKind.U8 189;
                        Value.Integer IntegerKind.U8 53;
                        Value.Integer IntegerKind.U8 224;
                        Value.Integer IntegerKind.U8 18;
                        Value.Integer IntegerKind.U8 135;
                        Value.Integer IntegerKind.U8 137;
                        Value.Integer IntegerKind.U8 142;
                        Value.Integer IntegerKind.U8 158;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 13;
                        Value.Integer IntegerKind.U8 14;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 18;
                        Value.Integer IntegerKind.U8 41;
                        Value.Integer IntegerKind.U8 49;
                        Value.Integer IntegerKind.U8 52;
                        Value.Integer IntegerKind.U8 58;
                        Value.Integer IntegerKind.U8 69;
                        Value.Integer IntegerKind.U8 70;
                        Value.Integer IntegerKind.U8 73;
                        Value.Integer IntegerKind.U8 74;
                        Value.Integer IntegerKind.U8 78;
                        Value.Integer IntegerKind.U8 79;
                        Value.Integer IntegerKind.U8 100;
                        Value.Integer IntegerKind.U8 101;
                        Value.Integer IntegerKind.U8 138;
                        Value.Integer IntegerKind.U8 140;
                        Value.Integer IntegerKind.U8 141;
                        Value.Integer IntegerKind.U8 143;
                        Value.Integer IntegerKind.U8 182;
                        Value.Integer IntegerKind.U8 193;
                        Value.Integer IntegerKind.U8 195;
                        Value.Integer IntegerKind.U8 196;
                        Value.Integer IntegerKind.U8 198;
                        Value.Integer IntegerKind.U8 203;
                        Value.Integer IntegerKind.U8 214;
                        Value.Integer IntegerKind.U8 92;
                        Value.Integer IntegerKind.U8 182;
                        Value.Integer IntegerKind.U8 183;
                        Value.Integer IntegerKind.U8 27;
                        Value.Integer IntegerKind.U8 28;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 11;
                        Value.Integer IntegerKind.U8 20;
                        Value.Integer IntegerKind.U8 23;
                        Value.Integer IntegerKind.U8 54;
                        Value.Integer IntegerKind.U8 57;
                        Value.Integer IntegerKind.U8 58;
                        Value.Integer IntegerKind.U8 168;
                        Value.Integer IntegerKind.U8 169;
                        Value.Integer IntegerKind.U8 216;
                        Value.Integer IntegerKind.U8 217;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 55;
                        Value.Integer IntegerKind.U8 144;
                        Value.Integer IntegerKind.U8 145;
                        Value.Integer IntegerKind.U8 168;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 59;
                        Value.Integer IntegerKind.U8 62;
                        Value.Integer IntegerKind.U8 102;
                        Value.Integer IntegerKind.U8 105;
                        Value.Integer IntegerKind.U8 143;
                        Value.Integer IntegerKind.U8 146;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 111;
                        Value.Integer IntegerKind.U8 95;
                        Value.Integer IntegerKind.U8 191;
                        Value.Integer IntegerKind.U8 238;
                        Value.Integer IntegerKind.U8 239;
                        Value.Integer IntegerKind.U8 90;
                        Value.Integer IntegerKind.U8 98;
                        Value.Integer IntegerKind.U8 244;
                        Value.Integer IntegerKind.U8 252;
                        Value.Integer IntegerKind.U8 255;
                        Value.Integer IntegerKind.U8 83;
                        Value.Integer IntegerKind.U8 84;
                        Value.Integer IntegerKind.U8 154;
                        Value.Integer IntegerKind.U8 155;
                        Value.Integer IntegerKind.U8 46;
                        Value.Integer IntegerKind.U8 47;
                        Value.Integer IntegerKind.U8 39;
                        Value.Integer IntegerKind.U8 40;
                        Value.Integer IntegerKind.U8 85;
                        Value.Integer IntegerKind.U8 157;
                        Value.Integer IntegerKind.U8 160;
                        Value.Integer IntegerKind.U8 161;
                        Value.Integer IntegerKind.U8 163;
                        Value.Integer IntegerKind.U8 164;
                        Value.Integer IntegerKind.U8 167;
                        Value.Integer IntegerKind.U8 168;
                        Value.Integer IntegerKind.U8 173;
                        Value.Integer IntegerKind.U8 186;
                        Value.Integer IntegerKind.U8 188;
                        Value.Integer IntegerKind.U8 196;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 11;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 21;
                        Value.Integer IntegerKind.U8 29;
                        Value.Integer IntegerKind.U8 58;
                        Value.Integer IntegerKind.U8 63;
                        Value.Integer IntegerKind.U8 69;
                        Value.Integer IntegerKind.U8 81;
                        Value.Integer IntegerKind.U8 166;
                        Value.Integer IntegerKind.U8 167;
                        Value.Integer IntegerKind.U8 204;
                        Value.Integer IntegerKind.U8 205;
                        Value.Integer IntegerKind.U8 160;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 25;
                        Value.Integer IntegerKind.U8 26;
                        Value.Integer IntegerKind.U8 34;
                        Value.Integer IntegerKind.U8 37;
                        Value.Integer IntegerKind.U8 62;
                        Value.Integer IntegerKind.U8 63;
                        Value.Integer IntegerKind.U8 231;
                        Value.Integer IntegerKind.U8 236;
                        Value.Integer IntegerKind.U8 239;
                        Value.Integer IntegerKind.U8 255;
                        Value.Integer IntegerKind.U8 197;
                        Value.Integer IntegerKind.U8 198;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 32;
                        Value.Integer IntegerKind.U8 35;
                        Value.Integer IntegerKind.U8 37;
                        Value.Integer IntegerKind.U8 38;
                        Value.Integer IntegerKind.U8 40;
                        Value.Integer IntegerKind.U8 51;
                        Value.Integer IntegerKind.U8 56;
                        Value.Integer IntegerKind.U8 58;
                        Value.Integer IntegerKind.U8 72;
                        Value.Integer IntegerKind.U8 74;
                        Value.Integer IntegerKind.U8 76;
                        Value.Integer IntegerKind.U8 80;
                        Value.Integer IntegerKind.U8 83;
                        Value.Integer IntegerKind.U8 85;
                        Value.Integer IntegerKind.U8 86;
                        Value.Integer IntegerKind.U8 88;
                        Value.Integer IntegerKind.U8 90;
                        Value.Integer IntegerKind.U8 92;
                        Value.Integer IntegerKind.U8 94;
                        Value.Integer IntegerKind.U8 96;
                        Value.Integer IntegerKind.U8 99;
                        Value.Integer IntegerKind.U8 101;
                        Value.Integer IntegerKind.U8 102;
                        Value.Integer IntegerKind.U8 107;
                        Value.Integer IntegerKind.U8 115;
                        Value.Integer IntegerKind.U8 120;
                        Value.Integer IntegerKind.U8 125;
                        Value.Integer IntegerKind.U8 127;
                        Value.Integer IntegerKind.U8 138;
                        Value.Integer IntegerKind.U8 164;
                        Value.Integer IntegerKind.U8 170;
                        Value.Integer IntegerKind.U8 175;
                        Value.Integer IntegerKind.U8 176;
                        Value.Integer IntegerKind.U8 192;
                        Value.Integer IntegerKind.U8 208;
                        Value.Integer IntegerKind.U8 174;
                        Value.Integer IntegerKind.U8 175;
                        Value.Integer IntegerKind.U8 110;
                        Value.Integer IntegerKind.U8 111;
                        Value.Integer IntegerKind.U8 221;
                        Value.Integer IntegerKind.U8 222;
                        Value.Integer IntegerKind.U8 147
                      ]
                  |)
                |)
              |)
            |))
        |))).
    
    Global Instance Instance_IsConstant_value_SINGLETONS1L :
      M.IsFunction.C "core::unicode::printable::SINGLETONS1L" value_SINGLETONS1L.
    Admitted.
    Global Typeclasses Opaque value_SINGLETONS1L.
    
    Definition value_NORMAL0 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          (* Unsize *)
          M.pointer_coercion
            (M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.alloc (|
                    Value.Array
                      [
                        Value.Integer IntegerKind.U8 0;
                        Value.Integer IntegerKind.U8 32;
                        Value.Integer IntegerKind.U8 95;
                        Value.Integer IntegerKind.U8 34;
                        Value.Integer IntegerKind.U8 130;
                        Value.Integer IntegerKind.U8 223;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 130;
                        Value.Integer IntegerKind.U8 68;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 27;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 172;
                        Value.Integer IntegerKind.U8 14;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 171;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 31;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 28;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 25;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 47;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 52;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 80;
                        Value.Integer IntegerKind.U8 15;
                        Value.Integer IntegerKind.U8 18;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 85;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 28;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 2;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 11;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 14;
                        Value.Integer IntegerKind.U8 21;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 78;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 27;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 87;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 2;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 23;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 80;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 67;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 45;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 15;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 58;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 29;
                        Value.Integer IntegerKind.U8 37;
                        Value.Integer IntegerKind.U8 95;
                        Value.Integer IntegerKind.U8 32;
                        Value.Integer IntegerKind.U8 109;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 106;
                        Value.Integer IntegerKind.U8 37;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 200;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 130;
                        Value.Integer IntegerKind.U8 176;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 26;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 130;
                        Value.Integer IntegerKind.U8 253;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 89;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 22;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 24;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 20;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 20;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 106;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 26;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 89;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 43;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 70;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 44;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 49;
                        Value.Integer IntegerKind.U8 11;
                        Value.Integer IntegerKind.U8 44;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 26;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 11;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 172;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 47;
                        Value.Integer IntegerKind.U8 49;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 244;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 60;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 15;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 62;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 56;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 43;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 130;
                        Value.Integer IntegerKind.U8 255;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 24;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 47;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 45;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 33;
                        Value.Integer IntegerKind.U8 15;
                        Value.Integer IntegerKind.U8 33;
                        Value.Integer IntegerKind.U8 15;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 140;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 130;
                        Value.Integer IntegerKind.U8 154;
                        Value.Integer IntegerKind.U8 22;
                        Value.Integer IntegerKind.U8 11;
                        Value.Integer IntegerKind.U8 21;
                        Value.Integer IntegerKind.U8 136;
                        Value.Integer IntegerKind.U8 148;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 47;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 59;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 2;
                        Value.Integer IntegerKind.U8 14;
                        Value.Integer IntegerKind.U8 24;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 190;
                        Value.Integer IntegerKind.U8 34;
                        Value.Integer IntegerKind.U8 116;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 214;
                        Value.Integer IntegerKind.U8 26;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 16;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 225;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 242;
                        Value.Integer IntegerKind.U8 158;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 55;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 92;
                        Value.Integer IntegerKind.U8 20;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 184;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 221;
                        Value.Integer IntegerKind.U8 21;
                        Value.Integer IntegerKind.U8 59;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 56;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 70;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 116;
                        Value.Integer IntegerKind.U8 11;
                        Value.Integer IntegerKind.U8 30;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 90;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 89;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 131;
                        Value.Integer IntegerKind.U8 24;
                        Value.Integer IntegerKind.U8 28;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 22;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 76;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 138;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 171;
                        Value.Integer IntegerKind.U8 164;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 23;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 49;
                        Value.Integer IntegerKind.U8 161;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 218;
                        Value.Integer IntegerKind.U8 38;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 166;
                        Value.Integer IntegerKind.U8 16;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 245;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 32;
                        Value.Integer IntegerKind.U8 42;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 76;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 141;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 190;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 27;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 15;
                        Value.Integer IntegerKind.U8 13
                      ]
                  |)
                |)
              |)
            |))
        |))).
    
    Global Instance Instance_IsConstant_value_NORMAL0 :
      M.IsFunction.C "core::unicode::printable::NORMAL0" value_NORMAL0.
    Admitted.
    Global Typeclasses Opaque value_NORMAL0.
    
    Definition value_NORMAL1 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          (* Unsize *)
          M.pointer_coercion
            (M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.alloc (|
                    Value.Array
                      [
                        Value.Integer IntegerKind.U8 94;
                        Value.Integer IntegerKind.U8 34;
                        Value.Integer IntegerKind.U8 123;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 45;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 102;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 47;
                        Value.Integer IntegerKind.U8 46;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 130;
                        Value.Integer IntegerKind.U8 29;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 49;
                        Value.Integer IntegerKind.U8 15;
                        Value.Integer IntegerKind.U8 28;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 36;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 30;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 43;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 68;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 14;
                        Value.Integer IntegerKind.U8 42;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 170;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 36;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 36;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 40;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 52;
                        Value.Integer IntegerKind.U8 11;
                        Value.Integer IntegerKind.U8 78;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 52;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 55;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 22;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 24;
                        Value.Integer IntegerKind.U8 59;
                        Value.Integer IntegerKind.U8 69;
                        Value.Integer IntegerKind.U8 57;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 99;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 48;
                        Value.Integer IntegerKind.U8 22;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 33;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 27;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 64;
                        Value.Integer IntegerKind.U8 56;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 75;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 47;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 64;
                        Value.Integer IntegerKind.U8 32;
                        Value.Integer IntegerKind.U8 39;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 54;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 58;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 26;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 80;
                        Value.Integer IntegerKind.U8 73;
                        Value.Integer IntegerKind.U8 55;
                        Value.Integer IntegerKind.U8 51;
                        Value.Integer IntegerKind.U8 13;
                        Value.Integer IntegerKind.U8 51;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 46;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 38;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 29;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 2;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 208;
                        Value.Integer IntegerKind.U8 82;
                        Value.Integer IntegerKind.U8 16;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 55;
                        Value.Integer IntegerKind.U8 44;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 42;
                        Value.Integer IntegerKind.U8 22;
                        Value.Integer IntegerKind.U8 26;
                        Value.Integer IntegerKind.U8 38;
                        Value.Integer IntegerKind.U8 28;
                        Value.Integer IntegerKind.U8 20;
                        Value.Integer IntegerKind.U8 23;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 78;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 36;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 68;
                        Value.Integer IntegerKind.U8 13;
                        Value.Integer IntegerKind.U8 25;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 72;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 39;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 117;
                        Value.Integer IntegerKind.U8 11;
                        Value.Integer IntegerKind.U8 66;
                        Value.Integer IntegerKind.U8 62;
                        Value.Integer IntegerKind.U8 42;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 59;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 81;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 16;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 11;
                        Value.Integer IntegerKind.U8 89;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 2;
                        Value.Integer IntegerKind.U8 29;
                        Value.Integer IntegerKind.U8 98;
                        Value.Integer IntegerKind.U8 30;
                        Value.Integer IntegerKind.U8 72;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 166;
                        Value.Integer IntegerKind.U8 94;
                        Value.Integer IntegerKind.U8 34;
                        Value.Integer IntegerKind.U8 69;
                        Value.Integer IntegerKind.U8 11;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 13;
                        Value.Integer IntegerKind.U8 19;
                        Value.Integer IntegerKind.U8 58;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 20;
                        Value.Integer IntegerKind.U8 28;
                        Value.Integer IntegerKind.U8 44;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 23;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 185;
                        Value.Integer IntegerKind.U8 60;
                        Value.Integer IntegerKind.U8 100;
                        Value.Integer IntegerKind.U8 83;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 72;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 70;
                        Value.Integer IntegerKind.U8 69;
                        Value.Integer IntegerKind.U8 27;
                        Value.Integer IntegerKind.U8 72;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 83;
                        Value.Integer IntegerKind.U8 13;
                        Value.Integer IntegerKind.U8 73;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 182;
                        Value.Integer IntegerKind.U8 34;
                        Value.Integer IntegerKind.U8 14;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 70;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 29;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 71;
                        Value.Integer IntegerKind.U8 73;
                        Value.Integer IntegerKind.U8 55;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 14;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 57;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 54;
                        Value.Integer IntegerKind.U8 25;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 59;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 29;
                        Value.Integer IntegerKind.U8 85;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 15;
                        Value.Integer IntegerKind.U8 50;
                        Value.Integer IntegerKind.U8 13;
                        Value.Integer IntegerKind.U8 131;
                        Value.Integer IntegerKind.U8 155;
                        Value.Integer IntegerKind.U8 102;
                        Value.Integer IntegerKind.U8 117;
                        Value.Integer IntegerKind.U8 11;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 196;
                        Value.Integer IntegerKind.U8 138;
                        Value.Integer IntegerKind.U8 76;
                        Value.Integer IntegerKind.U8 99;
                        Value.Integer IntegerKind.U8 13;
                        Value.Integer IntegerKind.U8 132;
                        Value.Integer IntegerKind.U8 48;
                        Value.Integer IntegerKind.U8 16;
                        Value.Integer IntegerKind.U8 22;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 143;
                        Value.Integer IntegerKind.U8 155;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 130;
                        Value.Integer IntegerKind.U8 71;
                        Value.Integer IntegerKind.U8 154;
                        Value.Integer IntegerKind.U8 185;
                        Value.Integer IntegerKind.U8 58;
                        Value.Integer IntegerKind.U8 134;
                        Value.Integer IntegerKind.U8 198;
                        Value.Integer IntegerKind.U8 130;
                        Value.Integer IntegerKind.U8 57;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 42;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 92;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 38;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 70;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 40;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 19;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 176;
                        Value.Integer IntegerKind.U8 58;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 198;
                        Value.Integer IntegerKind.U8 91;
                        Value.Integer IntegerKind.U8 101;
                        Value.Integer IntegerKind.U8 75;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 57;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 64;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 11;
                        Value.Integer IntegerKind.U8 2;
                        Value.Integer IntegerKind.U8 14;
                        Value.Integer IntegerKind.U8 151;
                        Value.Integer IntegerKind.U8 248;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 132;
                        Value.Integer IntegerKind.U8 214;
                        Value.Integer IntegerKind.U8 41;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 162;
                        Value.Integer IntegerKind.U8 231;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 51;
                        Value.Integer IntegerKind.U8 15;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 29;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 14;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 140;
                        Value.Integer IntegerKind.U8 137;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 107;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 13;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 16;
                        Value.Integer IntegerKind.U8 143;
                        Value.Integer IntegerKind.U8 96;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 250;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 180;
                        Value.Integer IntegerKind.U8 76;
                        Value.Integer IntegerKind.U8 71;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 116;
                        Value.Integer IntegerKind.U8 60;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 246;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 115;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 112;
                        Value.Integer IntegerKind.U8 21;
                        Value.Integer IntegerKind.U8 70;
                        Value.Integer IntegerKind.U8 122;
                        Value.Integer IntegerKind.U8 20;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 20;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 87;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 25;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 135;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 71;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 133;
                        Value.Integer IntegerKind.U8 66;
                        Value.Integer IntegerKind.U8 15;
                        Value.Integer IntegerKind.U8 21;
                        Value.Integer IntegerKind.U8 132;
                        Value.Integer IntegerKind.U8 80;
                        Value.Integer IntegerKind.U8 31;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 213;
                        Value.Integer IntegerKind.U8 43;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 62;
                        Value.Integer IntegerKind.U8 33;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 112;
                        Value.Integer IntegerKind.U8 45;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 26;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 2;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 64;
                        Value.Integer IntegerKind.U8 31;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 58;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 208;
                        Value.Integer IntegerKind.U8 42;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 214;
                        Value.Integer IntegerKind.U8 43;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 224;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 247;
                        Value.Integer IntegerKind.U8 41;
                        Value.Integer IntegerKind.U8 76;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 2;
                        Value.Integer IntegerKind.U8 131;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 68;
                        Value.Integer IntegerKind.U8 76;
                        Value.Integer IntegerKind.U8 61;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 194;
                        Value.Integer IntegerKind.U8 60;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 85;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 27;
                        Value.Integer IntegerKind.U8 52;
                        Value.Integer IntegerKind.U8 2;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 14;
                        Value.Integer IntegerKind.U8 44;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 100;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 86;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 174;
                        Value.Integer IntegerKind.U8 56;
                        Value.Integer IntegerKind.U8 29;
                        Value.Integer IntegerKind.U8 13;
                        Value.Integer IntegerKind.U8 44;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 2;
                        Value.Integer IntegerKind.U8 14;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 154;
                        Value.Integer IntegerKind.U8 131;
                        Value.Integer IntegerKind.U8 216;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 17;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 13;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 119;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 95;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 1;
                        Value.Integer IntegerKind.U8 15;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 56;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 40;
                        Value.Integer IntegerKind.U8 8;
                        Value.Integer IntegerKind.U8 44;
                        Value.Integer IntegerKind.U8 4;
                        Value.Integer IntegerKind.U8 2;
                        Value.Integer IntegerKind.U8 62;
                        Value.Integer IntegerKind.U8 129;
                        Value.Integer IntegerKind.U8 84;
                        Value.Integer IntegerKind.U8 12;
                        Value.Integer IntegerKind.U8 29;
                        Value.Integer IntegerKind.U8 3;
                        Value.Integer IntegerKind.U8 10;
                        Value.Integer IntegerKind.U8 5;
                        Value.Integer IntegerKind.U8 56;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 28;
                        Value.Integer IntegerKind.U8 6;
                        Value.Integer IntegerKind.U8 9;
                        Value.Integer IntegerKind.U8 7;
                        Value.Integer IntegerKind.U8 128;
                        Value.Integer IntegerKind.U8 250;
                        Value.Integer IntegerKind.U8 132;
                        Value.Integer IntegerKind.U8 6
                      ]
                  |)
                |)
              |)
            |))
        |))).
    
    Global Instance Instance_IsConstant_value_NORMAL1 :
      M.IsFunction.C "core::unicode::printable::NORMAL1" value_NORMAL1.
    Admitted.
    Global Typeclasses Opaque value_NORMAL1.
  End printable.
End unicode.
