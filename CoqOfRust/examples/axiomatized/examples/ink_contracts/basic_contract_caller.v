(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructTuple
  {
    name := "AccountId";
    const_params := [];
    ty_params := [];
    fields := [ Ty.path "u128" ];
  } *)

Module Impl_core_default_Default_for_basic_contract_caller_AccountId.
  Definition Self : Ty.t := Ty.path "basic_contract_caller::AccountId".
  
  Parameter default : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_basic_contract_caller_AccountId.

Module Impl_core_clone_Clone_for_basic_contract_caller_AccountId.
  Definition Self : Ty.t := Ty.path "basic_contract_caller::AccountId".
  
  Parameter clone : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_basic_contract_caller_AccountId.

Module Impl_core_marker_Copy_for_basic_contract_caller_AccountId.
  Definition Self : Ty.t := Ty.path "basic_contract_caller::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_Copy_for_basic_contract_caller_AccountId.

Axiom Hash :
  (Ty.path "basic_contract_caller::Hash") =
    (Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]).

(*
Enum Error
{
  const_params := [];
  ty_params := [];
  variants := [];
}
*)


(* StructRecord
  {
    name := "OtherContract";
    const_params := [];
    ty_params := [];
    fields := [ ("value", Ty.path "bool") ];
  } *)

Module Impl_basic_contract_caller_OtherContract.
  Definition Self : Ty.t := Ty.path "basic_contract_caller::OtherContract".
  
  Parameter new : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
  Admitted.
  
  Parameter flip : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_flip : M.IsAssociatedFunction.C Self "flip" flip.
  Admitted.
  
  Parameter get : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_get : M.IsAssociatedFunction.C Self "get" get.
  Admitted.
End Impl_basic_contract_caller_OtherContract.

(* StructRecord
  {
    name := "BasicContractCaller";
    const_params := [];
    ty_params := [];
    fields := [ ("other_contract", Ty.path "basic_contract_caller::OtherContract") ];
  } *)

Module Impl_basic_contract_caller_BasicContractCaller.
  Definition Self : Ty.t := Ty.path "basic_contract_caller::BasicContractCaller".
  
  Parameter new : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
  Admitted.
  
  Parameter flip_and_get : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_flip_and_get :
    M.IsAssociatedFunction.C Self "flip_and_get" flip_and_get.
  Admitted.
End Impl_basic_contract_caller_BasicContractCaller.
