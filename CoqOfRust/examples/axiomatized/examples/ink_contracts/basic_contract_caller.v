(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_basic_contract_caller_AccountId_t.
Section Impl_core_default_Default_for_basic_contract_caller_AccountId_t.
  Definition Self : Set := basic_contract_caller.AccountId.t.
  
  (*
  Default
  *)
  Parameter default : M basic_contract_caller.AccountId.t.
  
  Axiom default_is_impl : impl Self "default" = default.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_basic_contract_caller_AccountId_t.
End Impl_core_default_Default_for_basic_contract_caller_AccountId_t.

Module  Impl_core_clone_Clone_for_basic_contract_caller_AccountId_t.
Section Impl_core_clone_Clone_for_basic_contract_caller_AccountId_t.
  Definition Self : Set := basic_contract_caller.AccountId.t.
  
  (*
  Clone
  *)
  Parameter clone : (ref Self) -> M basic_contract_caller.AccountId.t.
  
  Axiom clone_is_impl : impl Self "clone" = clone.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_basic_contract_caller_AccountId_t.
End Impl_core_clone_Clone_for_basic_contract_caller_AccountId_t.

Module  Impl_core_marker_Copy_for_basic_contract_caller_AccountId_t.
Section Impl_core_marker_Copy_for_basic_contract_caller_AccountId_t.
  Definition Self : Set := basic_contract_caller.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_basic_contract_caller_AccountId_t.
End Impl_core_marker_Copy_for_basic_contract_caller_AccountId_t.

Ltac Hash := exact (array u8.t).

Module Error.
  Inductive t : Set :=
  .
End Error.

Module  OtherContract.
Section OtherContract.
  Record t : Set := {
    value : bool.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End OtherContract.
End OtherContract.

Module  Impl_basic_contract_caller_OtherContract_t.
Section Impl_basic_contract_caller_OtherContract_t.
  Definition Self : Set := basic_contract_caller.OtherContract.t.
  
  (*
      pub fn new(init_value: bool) -> Self {
          Self { value: init_value }
      }
  *)
  Parameter new : bool.t -> M Self.
  
  Axiom new_is_impl : impl Self "new" = new.
  
  (*
      pub fn flip(&mut self) {
          self.value = !self.value;
      }
  *)
  Parameter flip : (mut_ref Self) -> M unit.
  
  Axiom flip_is_impl : impl Self "flip" = flip.
  
  (*
      pub fn get(&self) -> bool {
          self.value
      }
  *)
  Parameter get : (ref Self) -> M bool.t.
  
  Axiom get_is_impl : impl Self "get" = get.
End Impl_basic_contract_caller_OtherContract_t.
End Impl_basic_contract_caller_OtherContract_t.

Module  BasicContractCaller.
Section BasicContractCaller.
  Record t : Set := {
    other_contract : basic_contract_caller.OtherContract.t;
  }.
  
  Definition Get_other_contract :=
    Ref.map
      (fun α => Some α.(other_contract))
      (fun β α => Some (α <| other_contract := β |>)).
End BasicContractCaller.
End BasicContractCaller.

Module  Impl_basic_contract_caller_BasicContractCaller_t.
Section Impl_basic_contract_caller_BasicContractCaller_t.
  Definition Self : Set := basic_contract_caller.BasicContractCaller.t.
  
  (*
      pub fn new(other_contract_code_hash: Hash) -> Self {
          // let other_contract = OtherContract::new(true)
          //     .code_hash(other_contract_code_hash)
          //     .endowment(0)
          //     .salt_bytes([0xDE, 0xAD, 0xBE, 0xEF])
          //     .instantiate();
          let other_contract = todo!();
  
          Self { other_contract }
      }
  *)
  Parameter new : ltac:(basic_contract_caller.Hash) -> M Self.
  
  Axiom new_is_impl : impl Self "new" = new.
  
  (*
      pub fn flip_and_get(&mut self) -> bool {
          self.other_contract.flip();
          self.other_contract.get()
      }
  *)
  Parameter flip_and_get : (mut_ref Self) -> M bool.t.
  
  Axiom flip_and_get_is_impl : impl Self "flip_and_get" = flip_and_get.
End Impl_basic_contract_caller_BasicContractCaller_t.
End Impl_basic_contract_caller_BasicContractCaller_t.
