(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructTuple
  {
    name := "AccountId";
    const_params := [];
    ty_params := [];
    fields := [ Ty.path "u128" ];
  } *)

Module Impl_core_default_Default_for_conditional_compilation_AccountId.
  Definition Self : Ty.t := Ty.path "conditional_compilation::AccountId".
  
  Parameter default : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_conditional_compilation_AccountId.

Module Impl_core_clone_Clone_for_conditional_compilation_AccountId.
  Definition Self : Ty.t := Ty.path "conditional_compilation::AccountId".
  
  Parameter clone : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_conditional_compilation_AccountId.

Module Impl_core_marker_Copy_for_conditional_compilation_AccountId.
  Definition Self : Ty.t := Ty.path "conditional_compilation::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_Copy_for_conditional_compilation_AccountId.

Axiom Balance : (Ty.path "conditional_compilation::Balance") = (Ty.path "u128").

Axiom BlockNumber : (Ty.path "conditional_compilation::BlockNumber") = (Ty.path "u32").

(* StructRecord
  {
    name := "Env";
    const_params := [];
    ty_params := [];
    fields := [ ("caller", Ty.path "conditional_compilation::AccountId") ];
  } *)

(* Trait *)
(* Empty module 'Flip' *)

(* StructRecord
  {
    name := "Changes";
    const_params := [];
    ty_params := [];
    fields :=
      [ ("new_value", Ty.path "bool"); ("by_", Ty.path "conditional_compilation::AccountId") ];
  } *)

(* StructRecord
  {
    name := "ChangesDated";
    const_params := [];
    ty_params := [];
    fields :=
      [
        ("new_value", Ty.path "bool");
        ("by_", Ty.path "conditional_compilation::AccountId");
        ("when", Ty.path "u32")
      ];
  } *)

(*
Enum Event
{
  const_params := [];
  ty_params := [];
  variants :=
    [
      {
        name := "Changes";
        item := StructTuple [ Ty.path "conditional_compilation::Changes" ];
      };
      {
        name := "ChangesDated";
        item := StructTuple [ Ty.path "conditional_compilation::ChangesDated" ];
      }
    ];
}
*)

Axiom IsDiscriminant_Event_Changes : M.IsDiscriminant "conditional_compilation::Event::Changes" 0.
Axiom IsDiscriminant_Event_ChangesDated :
  M.IsDiscriminant "conditional_compilation::Event::ChangesDated" 1.

Module Impl_conditional_compilation_Env.
  Definition Self : Ty.t := Ty.path "conditional_compilation::Env".
  
  Parameter caller : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_caller : M.IsAssociatedFunction Self "caller" caller.
  Smpl Add apply AssociatedFunction_caller : is_associated.
  
  Parameter emit_event : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_emit_event : M.IsAssociatedFunction Self "emit_event" emit_event.
  Smpl Add apply AssociatedFunction_emit_event : is_associated.
  
  Parameter block_number : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_block_number : M.IsAssociatedFunction Self "block_number" block_number.
  Smpl Add apply AssociatedFunction_block_number : is_associated.
End Impl_conditional_compilation_Env.

(* StructRecord
  {
    name := "ConditionalCompilation";
    const_params := [];
    ty_params := [];
    fields := [ ("value", Ty.path "bool") ];
  } *)

Module Impl_conditional_compilation_ConditionalCompilation.
  Definition Self : Ty.t := Ty.path "conditional_compilation::ConditionalCompilation".
  
  Parameter init_env : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_init_env : M.IsAssociatedFunction Self "init_env" init_env.
  Smpl Add apply AssociatedFunction_init_env : is_associated.
  
  Parameter env : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_env : M.IsAssociatedFunction Self "env" env.
  Smpl Add apply AssociatedFunction_env : is_associated.
  
  Parameter new : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  Smpl Add apply AssociatedFunction_new : is_associated.
  
  Parameter new_foo : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_new_foo : M.IsAssociatedFunction Self "new_foo" new_foo.
  Smpl Add apply AssociatedFunction_new_foo : is_associated.
  
  Parameter new_bar : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_new_bar : M.IsAssociatedFunction Self "new_bar" new_bar.
  Smpl Add apply AssociatedFunction_new_bar : is_associated.
  
  Parameter new_foo_bar : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_new_foo_bar : M.IsAssociatedFunction Self "new_foo_bar" new_foo_bar.
  Smpl Add apply AssociatedFunction_new_foo_bar : is_associated.
  
  Parameter inherent_flip_foo : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_inherent_flip_foo :
    M.IsAssociatedFunction Self "inherent_flip_foo" inherent_flip_foo.
  Smpl Add apply AssociatedFunction_inherent_flip_foo : is_associated.
  
  Parameter inherent_flip_bar : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_inherent_flip_bar :
    M.IsAssociatedFunction Self "inherent_flip_bar" inherent_flip_bar.
  Smpl Add apply AssociatedFunction_inherent_flip_bar : is_associated.
End Impl_conditional_compilation_ConditionalCompilation.

Module Impl_conditional_compilation_Flip_for_conditional_compilation_ConditionalCompilation.
  Definition Self : Ty.t := Ty.path "conditional_compilation::ConditionalCompilation".
  
  Parameter flip : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Parameter get : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Parameter push_foo : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "conditional_compilation::Flip"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *)
      [
        ("flip", InstanceField.Method flip);
        ("get", InstanceField.Method get);
        ("push_foo", InstanceField.Method push_foo)
      ].
End Impl_conditional_compilation_Flip_for_conditional_compilation_ConditionalCompilation.
