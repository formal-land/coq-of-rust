(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_contract_transfer_AccountId_t.
Section Impl_core_default_Default_for_contract_transfer_AccountId_t.
  Definition Self : Set := contract_transfer.AccountId.t.
  
  (*
  Default
  *)
  Parameter default : M contract_transfer.AccountId.t.
  
  Axiom default_is_impl : impl Self "default" = default.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_contract_transfer_AccountId_t.
End Impl_core_default_Default_for_contract_transfer_AccountId_t.

Module  Impl_core_clone_Clone_for_contract_transfer_AccountId_t.
Section Impl_core_clone_Clone_for_contract_transfer_AccountId_t.
  Definition Self : Set := contract_transfer.AccountId.t.
  
  (*
  Clone
  *)
  Parameter clone : (ref Self) -> M contract_transfer.AccountId.t.
  
  Axiom clone_is_impl : impl Self "clone" = clone.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_contract_transfer_AccountId_t.
End Impl_core_clone_Clone_for_contract_transfer_AccountId_t.

Module  Impl_core_marker_Copy_for_contract_transfer_AccountId_t.
Section Impl_core_marker_Copy_for_contract_transfer_AccountId_t.
  Definition Self : Set := contract_transfer.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_contract_transfer_AccountId_t.
End Impl_core_marker_Copy_for_contract_transfer_AccountId_t.

Ltac Balance := exact u128.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : contract_transfer.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module  Impl_contract_transfer_Env_t.
Section Impl_contract_transfer_Env_t.
  Definition Self : Set := contract_transfer.Env.t.
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Parameter caller : (ref Self) -> M contract_transfer.AccountId.t.
  
  Axiom caller_is_impl : impl Self "caller" = caller.
  
  (*
      fn balance(&self) -> Balance {
          unimplemented!()
      }
  *)
  Parameter balance : (ref Self) -> M ltac:(contract_transfer.Balance).
  
  Axiom balance_is_impl : impl Self "balance" = balance.
  
  (*
      fn transfer(&mut self, _to: AccountId, _value: Balance) -> Result<(), ()> {
          unimplemented!()
      }
  *)
  Parameter transfer :
      (mut_ref Self) ->
        contract_transfer.AccountId.t ->
        ltac:(contract_transfer.Balance) ->
        M (core.result.Result.t unit unit).
  
  Axiom transfer_is_impl : impl Self "transfer" = transfer.
  
  (*
      fn transferred_value(&self) -> Balance {
          unimplemented!()
      }
  *)
  Parameter transferred_value :
      (ref Self) -> M ltac:(contract_transfer.Balance).
  
  Axiom transferred_value_is_impl :
      impl Self "transferred_value" = transferred_value.
End Impl_contract_transfer_Env_t.
End Impl_contract_transfer_Env_t.

Module  GiveMe.
Section GiveMe.
  Inductive t : Set := Build.
End GiveMe.
End GiveMe.

Module  Impl_contract_transfer_GiveMe_t.
Section Impl_contract_transfer_GiveMe_t.
  Definition Self : Set := contract_transfer.GiveMe.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Parameter init_env : M contract_transfer.Env.t.
  
  Axiom init_env_is_impl : impl Self "init_env" = init_env.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Parameter env : (ref Self) -> M contract_transfer.Env.t.
  
  Axiom env_is_impl : impl Self "env" = env.
  
  (*
      pub fn new() -> Self {
          Self {}
      }
  *)
  Parameter new : M Self.
  
  Axiom new_is_impl : impl Self "new" = new.
  
  (*
      pub fn give_me(&mut self, value: Balance) {
          println!("requested value: {}", value);
          println!("contract balance: {}", self.env().balance());
  
          assert!(value <= self.env().balance(), "insufficient funds!");
  
          if self.env().transfer(self.env().caller(), value).is_err() {
              panic!(
                  "requested transfer failed. this can be the case if the contract does not\
                   have sufficient free funds or if the transfer would have brought the\
                   contract's balance below minimum balance."
              )
          }
      }
  *)
  Parameter give_me :
      (mut_ref Self) -> ltac:(contract_transfer.Balance) -> M unit.
  
  Axiom give_me_is_impl : impl Self "give_me" = give_me.
  
  (*
      pub fn was_it_ten(&self) {
          println!("received payment: {}", self.env().transferred_value());
          assert!(self.env().transferred_value() == 10, "payment was not ten");
      }
  *)
  Parameter was_it_ten : (ref Self) -> M unit.
  
  Axiom was_it_ten_is_impl : impl Self "was_it_ten" = was_it_ten.
End Impl_contract_transfer_GiveMe_t.
End Impl_contract_transfer_GiveMe_t.
