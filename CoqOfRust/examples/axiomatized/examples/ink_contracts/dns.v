(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Mapping.
Section Mapping.
  Context (K V : Set).
  
  Record t : Set := {
    _key : core.marker.PhantomData.t K;
    _value : core.marker.PhantomData.t V;
  }.
  
  Definition Get__key :=
    Ref.map (fun α => Some α.(_key)) (fun β α => Some (α <| _key := β |>)).
  Definition Get__value :=
    Ref.map (fun α => Some α.(_value)) (fun β α => Some (α <| _value := β |>)).
End Mapping.
End Mapping.

Module  Impl_core_default_Default_for_dns_Mapping_t_K_V.
Section Impl_core_default_Default_for_dns_Mapping_t_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := dns.Mapping.t K V.
  
  (*
  Default
  *)
  Parameter default : M (dns.Mapping.t K V).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_dns_Mapping_t_K_V.
End Impl_core_default_Default_for_dns_Mapping_t_K_V.

Module  Impl_dns_Mapping_t_K_V.
Section Impl_dns_Mapping_t_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := dns.Mapping.t K V.
  
  (*
      fn contains(&self, _key: &K) -> bool {
          unimplemented!()
      }
  *)
  Parameter contains : (ref Self) -> (ref K) -> M bool.t.
  
  Global Instance AssociatedFunction_contains :
    Notations.DoubleColon Self "contains" := {
    Notations.double_colon := contains;
  }.
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Parameter get : (ref Self) -> (ref K) -> M (core.option.Option.t V).
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
  
  (*
      fn insert(&mut self, _key: K, _value: V) -> Option<u32> {
          unimplemented!()
      }
  *)
  Parameter insert : (mut_ref Self) -> K -> V -> M (core.option.Option.t u32.t).
  
  Global Instance AssociatedFunction_insert :
    Notations.DoubleColon Self "insert" := {
    Notations.double_colon := insert;
  }.
  
  (*
      fn new() -> Mapping<K, V> {
          unimplemented!()
      }
  *)
  Parameter new : M (dns.Mapping.t K V).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      fn remove(&self, _key: K) {
          unimplemented!()
      }
  *)
  Parameter remove : (ref Self) -> K -> M unit.
  
  Global Instance AssociatedFunction_remove :
    Notations.DoubleColon Self "remove" := {
    Notations.double_colon := remove;
  }.
  
  (*
      fn size(&self, _key: K) -> Option<u32> {
          unimplemented!()
      }
  *)
  Parameter size : (ref Self) -> K -> M (core.option.Option.t u32.t).
  
  Global Instance AssociatedFunction_size :
    Notations.DoubleColon Self "size" := {
    Notations.double_colon := size;
  }.
  
  (*
      fn take(&self, _key: K) -> Option<V> {
          unimplemented!()
      }
  *)
  Parameter take : (ref Self) -> K -> M (core.option.Option.t V).
  
  Global Instance AssociatedFunction_take :
    Notations.DoubleColon Self "take" := {
    Notations.double_colon := take;
  }.
End Impl_dns_Mapping_t_K_V.
End Impl_dns_Mapping_t_K_V.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_dns_AccountId_t.
Section Impl_core_default_Default_for_dns_AccountId_t.
  Definition Self : Set := dns.AccountId.t.
  
  (*
  Default
  *)
  Parameter default : M dns.AccountId.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_dns_AccountId_t.
End Impl_core_default_Default_for_dns_AccountId_t.

Module  Impl_core_clone_Clone_for_dns_AccountId_t.
Section Impl_core_clone_Clone_for_dns_AccountId_t.
  Definition Self : Set := dns.AccountId.t.
  
  (*
  Clone
  *)
  Parameter clone : (ref Self) -> M dns.AccountId.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_dns_AccountId_t.
End Impl_core_clone_Clone_for_dns_AccountId_t.

Module  Impl_core_marker_Copy_for_dns_AccountId_t.
Section Impl_core_marker_Copy_for_dns_AccountId_t.
  Definition Self : Set := dns.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_dns_AccountId_t.
End Impl_core_marker_Copy_for_dns_AccountId_t.

Module  Impl_core_marker_StructuralPartialEq_for_dns_AccountId_t.
Section Impl_core_marker_StructuralPartialEq_for_dns_AccountId_t.
  Definition Self : Set := dns.AccountId.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_dns_AccountId_t.
End Impl_core_marker_StructuralPartialEq_for_dns_AccountId_t.

Module  Impl_core_cmp_PartialEq_for_dns_AccountId_t.
Section Impl_core_cmp_PartialEq_for_dns_AccountId_t.
  Definition Self : Set := dns.AccountId.t.
  
  (*
  PartialEq
  *)
  Parameter eq : (ref Self) -> (ref dns.AccountId.t) -> M bool.t.
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_dns_AccountId_t.
End Impl_core_cmp_PartialEq_for_dns_AccountId_t.

Module  Impl_core_convert_From_array_u8_t_for_dns_AccountId_t.
Section Impl_core_convert_From_array_u8_t_for_dns_AccountId_t.
  Definition Self : Set := dns.AccountId.t.
  
  (*
      fn from(_value: [u8; 32]) -> Self {
          unimplemented!()
      }
  *)
  Parameter from : (array u8.t) -> M Self.
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ : core.convert.From.Trait Self (T := array u8.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_array_u8_t_for_dns_AccountId_t.
End Impl_core_convert_From_array_u8_t_for_dns_AccountId_t.

Ltac Balance := exact u128.t.

Ltac Hash := exact (array u8.t).

Module  Env.
Section Env.
  Record t : Set := {
    caller : dns.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module  Register.
Section Register.
  Record t : Set := {
    name : ltac:(dns.Hash);
    from : dns.AccountId.t;
  }.
  
  Definition Get_name :=
    Ref.map (fun α => Some α.(name)) (fun β α => Some (α <| name := β |>)).
  Definition Get_from :=
    Ref.map (fun α => Some α.(from)) (fun β α => Some (α <| from := β |>)).
End Register.
End Register.

Module  SetAddress.
Section SetAddress.
  Record t : Set := {
    name : ltac:(dns.Hash);
    from : dns.AccountId.t;
    old_address : core.option.Option.t dns.AccountId.t;
    new_address : dns.AccountId.t;
  }.
  
  Definition Get_name :=
    Ref.map (fun α => Some α.(name)) (fun β α => Some (α <| name := β |>)).
  Definition Get_from :=
    Ref.map (fun α => Some α.(from)) (fun β α => Some (α <| from := β |>)).
  Definition Get_old_address :=
    Ref.map
      (fun α => Some α.(old_address))
      (fun β α => Some (α <| old_address := β |>)).
  Definition Get_new_address :=
    Ref.map
      (fun α => Some α.(new_address))
      (fun β α => Some (α <| new_address := β |>)).
End SetAddress.
End SetAddress.

Module  Transfer.
Section Transfer.
  Record t : Set := {
    name : ltac:(dns.Hash);
    from : dns.AccountId.t;
    old_owner : core.option.Option.t dns.AccountId.t;
    new_owner : dns.AccountId.t;
  }.
  
  Definition Get_name :=
    Ref.map (fun α => Some α.(name)) (fun β α => Some (α <| name := β |>)).
  Definition Get_from :=
    Ref.map (fun α => Some α.(from)) (fun β α => Some (α <| from := β |>)).
  Definition Get_old_owner :=
    Ref.map
      (fun α => Some α.(old_owner))
      (fun β α => Some (α <| old_owner := β |>)).
  Definition Get_new_owner :=
    Ref.map
      (fun α => Some α.(new_owner))
      (fun β α => Some (α <| new_owner := β |>)).
End Transfer.
End Transfer.

Module Event.
  Inductive t : Set :=
  | Register (_ : dns.Register.t)
  | SetAddress (_ : dns.SetAddress.t)
  | Transfer (_ : dns.Transfer.t).
  
  Definition Get_Register_0 :=
    Ref.map
      (fun α => match α with | Register α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | Register _ => Some (Register β) | _ => None end).
  
  Definition Get_SetAddress_0 :=
    Ref.map
      (fun α => match α with | SetAddress α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | SetAddress _ => Some (SetAddress β) | _ => None end).
  
  Definition Get_Transfer_0 :=
    Ref.map
      (fun α => match α with | Transfer α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | Transfer _ => Some (Transfer β) | _ => None end).
End Event.

Module  Impl_dns_Env_t.
Section Impl_dns_Env_t.
  Definition Self : Set := dns.Env.t.
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Parameter caller : (ref Self) -> M dns.AccountId.t.
  
  Global Instance AssociatedFunction_caller :
    Notations.DoubleColon Self "caller" := {
    Notations.double_colon := caller;
  }.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Parameter emit_event : (ref Self) -> dns.Event.t -> M unit.
  
  Global Instance AssociatedFunction_emit_event :
    Notations.DoubleColon Self "emit_event" := {
    Notations.double_colon := emit_event;
  }.
End Impl_dns_Env_t.
End Impl_dns_Env_t.

Module  DomainNameService.
Section DomainNameService.
  Record t : Set := {
    name_to_address : dns.Mapping.t ltac:(dns.Hash) dns.AccountId.t;
    name_to_owner : dns.Mapping.t ltac:(dns.Hash) dns.AccountId.t;
    default_address : dns.AccountId.t;
  }.
  
  Definition Get_name_to_address :=
    Ref.map
      (fun α => Some α.(name_to_address))
      (fun β α => Some (α <| name_to_address := β |>)).
  Definition Get_name_to_owner :=
    Ref.map
      (fun α => Some α.(name_to_owner))
      (fun β α => Some (α <| name_to_owner := β |>)).
  Definition Get_default_address :=
    Ref.map
      (fun α => Some α.(default_address))
      (fun β α => Some (α <| default_address := β |>)).
End DomainNameService.
End DomainNameService.

(*
fn zero_address() -> AccountId {
    [0u8; 32].into()
}
*)
Parameter zero_address : M dns.AccountId.t.

Module  Impl_core_default_Default_for_dns_DomainNameService_t.
Section Impl_core_default_Default_for_dns_DomainNameService_t.
  Definition Self : Set := dns.DomainNameService.t.
  
  (*
      fn default() -> Self {
          let mut name_to_address = Mapping::new();
          name_to_address.insert(Hash::default(), zero_address());
          let mut name_to_owner = Mapping::new();
          name_to_owner.insert(Hash::default(), zero_address());
  
          Self {
              name_to_address,
              name_to_owner,
              default_address: zero_address(),
          }
      }
  *)
  Parameter default : M Self.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_dns_DomainNameService_t.
End Impl_core_default_Default_for_dns_DomainNameService_t.

Module Error.
  Inductive t : Set :=
  | NameAlreadyExists
  | CallerIsNotOwner.
End Error.

Module  Impl_core_marker_StructuralPartialEq_for_dns_Error_t.
Section Impl_core_marker_StructuralPartialEq_for_dns_Error_t.
  Definition Self : Set := dns.Error.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_dns_Error_t.
End Impl_core_marker_StructuralPartialEq_for_dns_Error_t.

Module  Impl_core_cmp_PartialEq_for_dns_Error_t.
Section Impl_core_cmp_PartialEq_for_dns_Error_t.
  Definition Self : Set := dns.Error.t.
  
  (*
  PartialEq
  *)
  Parameter eq : (ref Self) -> (ref dns.Error.t) -> M bool.t.
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_dns_Error_t.
End Impl_core_cmp_PartialEq_for_dns_Error_t.

Module  Impl_core_marker_StructuralEq_for_dns_Error_t.
Section Impl_core_marker_StructuralEq_for_dns_Error_t.
  Definition Self : Set := dns.Error.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_dns_Error_t.
End Impl_core_marker_StructuralEq_for_dns_Error_t.

Module  Impl_core_cmp_Eq_for_dns_Error_t.
Section Impl_core_cmp_Eq_for_dns_Error_t.
  Definition Self : Set := dns.Error.t.
  
  (*
  Eq
  *)
  Parameter assert_receiver_is_total_eq : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_dns_Error_t.
End Impl_core_cmp_Eq_for_dns_Error_t.

Ltac Result T := exact (core.result.Result.t T dns.Error.t).

Module  Impl_dns_DomainNameService_t.
Section Impl_dns_DomainNameService_t.
  Definition Self : Set := dns.DomainNameService.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Parameter init_env : M dns.Env.t.
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon Self "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Parameter env : (ref Self) -> M dns.Env.t.
  
  Global Instance AssociatedFunction_env : Notations.DoubleColon Self "env" := {
    Notations.double_colon := env;
  }.
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Parameter new : M Self.
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn register(&mut self, name: Hash) -> Result<()> {
          let caller = self.env().caller();
          if self.name_to_owner.contains(&name) {
              return Err(Error::NameAlreadyExists);
          }
  
          self.name_to_owner.insert(name, caller);
          self.env()
              .emit_event(Event::Register(Register { name, from: caller }));
  
          Ok(())
      }
  *)
  Parameter register :
      (mut_ref Self) -> ltac:(dns.Hash) -> M ltac:(dns.Result unit).
  
  Global Instance AssociatedFunction_register :
    Notations.DoubleColon Self "register" := {
    Notations.double_colon := register;
  }.
  
  (*
      fn get_owner_or_default(&self, name: Hash) -> AccountId {
          self.name_to_owner
              .get(&name)
              .unwrap_or(self.default_address)
      }
  *)
  Parameter get_owner_or_default :
      (ref Self) -> ltac:(dns.Hash) -> M dns.AccountId.t.
  
  Global Instance AssociatedFunction_get_owner_or_default :
    Notations.DoubleColon Self "get_owner_or_default" := {
    Notations.double_colon := get_owner_or_default;
  }.
  
  (*
      pub fn set_address(&mut self, name: Hash, new_address: AccountId) -> Result<()> {
          let caller = self.env().caller();
          let owner = self.get_owner_or_default(name);
          if caller != owner {
              return Err(Error::CallerIsNotOwner);
          }
  
          let old_address = self.name_to_address.get(&name);
          self.name_to_address.insert(name, new_address);
  
          self.env().emit_event(Event::SetAddress(SetAddress {
              name,
              from: caller,
              old_address,
              new_address,
          }));
          Ok(())
      }
  *)
  Parameter set_address :
      (mut_ref Self) ->
        ltac:(dns.Hash) ->
        dns.AccountId.t ->
        M ltac:(dns.Result unit).
  
  Global Instance AssociatedFunction_set_address :
    Notations.DoubleColon Self "set_address" := {
    Notations.double_colon := set_address;
  }.
  
  (*
      pub fn transfer(&mut self, name: Hash, to: AccountId) -> Result<()> {
          let caller = self.env().caller();
          let owner = self.get_owner_or_default(name);
          if caller != owner {
              return Err(Error::CallerIsNotOwner);
          }
  
          let old_owner = self.name_to_owner.get(&name);
          self.name_to_owner.insert(name, to);
  
          self.env().emit_event(Event::Transfer(Transfer {
              name,
              from: caller,
              old_owner,
              new_owner: to,
          }));
  
          Ok(())
      }
  *)
  Parameter transfer :
      (mut_ref Self) ->
        ltac:(dns.Hash) ->
        dns.AccountId.t ->
        M ltac:(dns.Result unit).
  
  Global Instance AssociatedFunction_transfer :
    Notations.DoubleColon Self "transfer" := {
    Notations.double_colon := transfer;
  }.
  
  (*
      fn get_address_or_default(&self, name: Hash) -> AccountId {
          self.name_to_address
              .get(&name)
              .unwrap_or(self.default_address)
      }
  *)
  Parameter get_address_or_default :
      (ref Self) -> ltac:(dns.Hash) -> M dns.AccountId.t.
  
  Global Instance AssociatedFunction_get_address_or_default :
    Notations.DoubleColon Self "get_address_or_default" := {
    Notations.double_colon := get_address_or_default;
  }.
  
  (*
      pub fn get_address(&self, name: Hash) -> AccountId {
          self.get_address_or_default(name)
      }
  *)
  Parameter get_address : (ref Self) -> ltac:(dns.Hash) -> M dns.AccountId.t.
  
  Global Instance AssociatedFunction_get_address :
    Notations.DoubleColon Self "get_address" := {
    Notations.double_colon := get_address;
  }.
  
  (*
      pub fn get_owner(&self, name: Hash) -> AccountId {
          self.get_owner_or_default(name)
      }
  *)
  Parameter get_owner : (ref Self) -> ltac:(dns.Hash) -> M dns.AccountId.t.
  
  Global Instance AssociatedFunction_get_owner :
    Notations.DoubleColon Self "get_owner" := {
    Notations.double_colon := get_owner;
  }.
End Impl_dns_DomainNameService_t.
End Impl_dns_DomainNameService_t.
