(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Incrementer.
Section Incrementer.
  Record t : Set := {
    value : i32.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End Incrementer.
End Incrementer.

Module  Impl_incrementer_Incrementer_t.
Section Impl_incrementer_Incrementer_t.
  Definition Self : Set := incrementer.Incrementer.t.
  
  (*
      pub fn new(init_value: i32) -> Self {
          Self { value: init_value }
      }
  *)
  Parameter new : i32.t -> M Self.
  
  Axiom new_is_impl : impl Self "new" = new.
  
  (*
      pub fn new_default() -> Self {
          Self::new(Default::default())
      }
  *)
  Parameter new_default : M Self.
  
  Axiom new_default_is_impl : impl Self "new_default" = new_default.
  
  (*
      pub fn inc(&mut self, by: i32) {
          self.value += by;
      }
  *)
  Parameter inc : (mut_ref Self) -> i32.t -> M unit.
  
  Axiom inc_is_impl : impl Self "inc" = inc.
  
  (*
      pub fn get(&self) -> i32 {
          self.value
      }
  *)
  Parameter get : (ref Self) -> M i32.t.
  
  Axiom get_is_impl : impl Self "get" = get.
End Impl_incrementer_Incrementer_t.
End Impl_incrementer_Incrementer_t.
