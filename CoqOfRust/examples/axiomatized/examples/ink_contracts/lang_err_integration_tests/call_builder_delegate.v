(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Ltac Hash := exact (array u8.t).

Module LangError.
  Inductive t : Set :=
  | CouldNotReadInput.
End LangError.

Module  CallBuilderDelegateTest.
Section CallBuilderDelegateTest.
  Record t : Set := {
    value : i32.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End CallBuilderDelegateTest.
End CallBuilderDelegateTest.

Module  Impl_core_default_Default_for_call_builder_delegate_CallBuilderDelegateTest_t.
Section Impl_core_default_Default_for_call_builder_delegate_CallBuilderDelegateTest_t.
  Definition Self : Set := call_builder_delegate.CallBuilderDelegateTest.t.
  
  (*
  Default
  *)
  Parameter default : M call_builder_delegate.CallBuilderDelegateTest.t.
  
  Axiom default_is_impl : impl Self "default" = default.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_call_builder_delegate_CallBuilderDelegateTest_t.
End Impl_core_default_Default_for_call_builder_delegate_CallBuilderDelegateTest_t.

Module  Impl_call_builder_delegate_CallBuilderDelegateTest_t.
Section Impl_call_builder_delegate_CallBuilderDelegateTest_t.
  Definition Self : Set := call_builder_delegate.CallBuilderDelegateTest.t.
  
  (*
      pub fn new(value: i32) -> Self {
          Self { value }
      }
  *)
  Parameter new : i32.t -> M Self.
  
  Axiom new_is_impl : impl Self "new" = new.
  
  (*
      pub fn delegate(&mut self, code_hash: Hash, selector: [u8; 4]) -> Option<LangError> {
          // let result = build_call::<DefaultEnvironment>()
          //     .delegate(code_hash)
          //     .exec_input(ExecutionInput::new(Selector::new(selector)))
          //     .returns::<bool>()
          //     .try_invoke()
          //     .expect("Error from the Contracts pallet.");
  
          // match result {
          //     Ok(_) => None,
          //     Err(e @ ink::LangError::CouldNotReadInput) => Some(e),
          //     Err(_) => {
          //         unimplemented!("No other `LangError` variants exist at the moment.")
          //     }
          // }
          None
      }
  *)
  Parameter delegate :
      (mut_ref Self) ->
        ltac:(call_builder_delegate.Hash) ->
        (array u8.t) ->
        M (core.option.Option.t call_builder_delegate.LangError.t).
  
  Axiom delegate_is_impl : impl Self "delegate" = delegate.
  
  (*
      pub fn invoke(&mut self, code_hash: Hash, selector: [u8; 4]) -> i32 {
          // use ink::env::call::build_call;
  
          // build_call::<DefaultEnvironment>()
          //     .delegate(code_hash)
          //     .exec_input(ExecutionInput::new(Selector::new(selector)))
          //     .returns::<i32>()
          //     .invoke()
          0
      }
  *)
  Parameter invoke :
      (mut_ref Self) ->
        ltac:(call_builder_delegate.Hash) ->
        (array u8.t) ->
        M i32.t.
  
  Axiom invoke_is_impl : impl Self "invoke" = invoke.
End Impl_call_builder_delegate_CallBuilderDelegateTest_t.
End Impl_call_builder_delegate_CallBuilderDelegateTest_t.
