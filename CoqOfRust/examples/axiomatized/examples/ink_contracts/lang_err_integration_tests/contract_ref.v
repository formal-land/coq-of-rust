(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_contract_ref_AccountId_t.
Section Impl_core_default_Default_for_contract_ref_AccountId_t.
  Definition Self : Set := contract_ref.AccountId.t.
  
  (*
  Default
  *)
  Parameter default : M contract_ref.AccountId.t.
  
  Axiom default_is_impl : impl Self "default" = default.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_contract_ref_AccountId_t.
End Impl_core_default_Default_for_contract_ref_AccountId_t.

Module  Impl_core_clone_Clone_for_contract_ref_AccountId_t.
Section Impl_core_clone_Clone_for_contract_ref_AccountId_t.
  Definition Self : Set := contract_ref.AccountId.t.
  
  (*
  Clone
  *)
  Parameter clone : (ref Self) -> M contract_ref.AccountId.t.
  
  Axiom clone_is_impl : impl Self "clone" = clone.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_contract_ref_AccountId_t.
End Impl_core_clone_Clone_for_contract_ref_AccountId_t.

Module  Impl_core_marker_Copy_for_contract_ref_AccountId_t.
Section Impl_core_marker_Copy_for_contract_ref_AccountId_t.
  Definition Self : Set := contract_ref.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_contract_ref_AccountId_t.
End Impl_core_marker_Copy_for_contract_ref_AccountId_t.

Ltac Balance := exact u128.t.

Ltac Hash := exact (array u8.t).

Module  Env.
Section Env.
  Record t : Set := {
    caller : contract_ref.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module  FlipperRef.
Section FlipperRef.
  Record t : Set := {
    value : bool.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End FlipperRef.
End FlipperRef.

Module  FlipperError.
Section FlipperError.
  Inductive t : Set := Build.
End FlipperError.
End FlipperError.

Module  Impl_core_fmt_Debug_for_contract_ref_FlipperError_t.
Section Impl_core_fmt_Debug_for_contract_ref_FlipperError_t.
  Definition Self : Set := contract_ref.FlipperError.t.
  
  (*
  Debug
  *)
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter.t) -> M ltac:(core.fmt.Result).
  
  Axiom fmt_is_impl : impl Self "fmt" = fmt.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_contract_ref_FlipperError_t.
End Impl_core_fmt_Debug_for_contract_ref_FlipperError_t.

Module  Impl_contract_ref_FlipperRef_t.
Section Impl_contract_ref_FlipperRef_t.
  Definition Self : Set := contract_ref.FlipperRef.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Parameter init_env : M contract_ref.Env.t.
  
  Axiom init_env_is_impl : impl Self "init_env" = init_env.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Parameter env : (ref Self) -> M contract_ref.Env.t.
  
  Axiom env_is_impl : impl Self "env" = env.
  
  (*
      pub fn new(init_value: bool) -> Self {
          Self { value: init_value }
      }
  *)
  Parameter new : bool.t -> M Self.
  
  Axiom new_is_impl : impl Self "new" = new.
  
  (*
      pub fn new_default() -> Self {
          Self::new(Default::default())
      }
  *)
  Parameter new_default : M Self.
  
  Axiom new_default_is_impl : impl Self "new_default" = new_default.
  
  (*
      pub fn try_new(succeed: bool) -> Result<Self, FlipperError> {
          if succeed {
              Ok(Self::new(true))
          } else {
              Err(FlipperError)
          }
      }
  *)
  Parameter try_new :
      bool.t -> M (core.result.Result.t Self contract_ref.FlipperError.t).
  
  Axiom try_new_is_impl : impl Self "try_new" = try_new.
  
  (*
      pub fn flip(&mut self) {
          self.value = !self.value;
      }
  *)
  Parameter flip : (mut_ref Self) -> M unit.
  
  Axiom flip_is_impl : impl Self "flip" = flip.
  
  (*
      pub fn get(&self) -> bool {
          self.value
      }
  *)
  Parameter get : (ref Self) -> M bool.t.
  
  Axiom get_is_impl : impl Self "get" = get.
End Impl_contract_ref_FlipperRef_t.
End Impl_contract_ref_FlipperRef_t.

Module  ContractRef.
Section ContractRef.
  Record t : Set := {
    flipper : contract_ref.FlipperRef.t;
  }.
  
  Definition Get_flipper :=
    Ref.map
      (fun α => Some α.(flipper))
      (fun β α => Some (α <| flipper := β |>)).
End ContractRef.
End ContractRef.

Module  Impl_contract_ref_ContractRef_t.
Section Impl_contract_ref_ContractRef_t.
  Definition Self : Set := contract_ref.ContractRef.t.
  
  (*
      pub fn new(version: u32, flipper_code_hash: Hash) -> Self {
          let salt = version.to_le_bytes();
          let flipper = FlipperRef::new_default();
          // .endowment(0)
          // .code_hash(flipper_code_hash)
          // .salt_bytes(salt)
          // .instantiate();
  
          Self { flipper }
      }
  *)
  Parameter new : u32.t -> ltac:(contract_ref.Hash) -> M Self.
  
  Axiom new_is_impl : impl Self "new" = new.
  
  (*
      pub fn try_new(version: u32, flipper_code_hash: Hash, succeed: bool) -> Self {
          let salt = version.to_le_bytes();
          let flipper = FlipperRef::try_new(succeed).unwrap();
          // .endowment(0)
          // .code_hash(flipper_code_hash)
          // .salt_bytes(salt)
          // .instantiate()
          // .unwrap_or_else(|error| {
          //     panic!(
          //         "Received an error from the Flipper constructor while instantiating \
          //              Flipper {error:?}"
          //     )
          // });
  
          Self { flipper }
      }
  *)
  Parameter try_new : u32.t -> ltac:(contract_ref.Hash) -> bool.t -> M Self.
  
  Axiom try_new_is_impl : impl Self "try_new" = try_new.
  
  (*
      pub fn flip(&mut self) {
          self.flipper.flip();
      }
  *)
  Parameter flip : (mut_ref Self) -> M unit.
  
  Axiom flip_is_impl : impl Self "flip" = flip.
  
  (*
      pub fn get(&mut self) -> bool {
          self.flipper.get()
      }
  *)
  Parameter get : (mut_ref Self) -> M bool.t.
  
  Axiom get_is_impl : impl Self "get" = get.
End Impl_contract_ref_ContractRef_t.
End Impl_contract_ref_ContractRef_t.
