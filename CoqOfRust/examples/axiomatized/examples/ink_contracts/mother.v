(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Mapping.
Section Mapping.
  Context (K V : Set).
  
  Record t : Set := {
    _key : core.marker.PhantomData.t K;
    _value : core.marker.PhantomData.t V;
  }.
  
  Definition Get__key :=
    Ref.map (fun α => Some α.(_key)) (fun β α => Some (α <| _key := β |>)).
  Definition Get__value :=
    Ref.map (fun α => Some α.(_value)) (fun β α => Some (α <| _value := β |>)).
End Mapping.
End Mapping.

Module  Impl_core_default_Default_for_mother_Mapping_t_K_V.
Section Impl_core_default_Default_for_mother_Mapping_t_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := mother.Mapping.t K V.
  
  (*
  Default
  *)
  Parameter default : M (mother.Mapping.t K V).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_mother_Mapping_t_K_V.
End Impl_core_default_Default_for_mother_Mapping_t_K_V.

Module  Impl_mother_Mapping_t_K_V.
Section Impl_mother_Mapping_t_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := mother.Mapping.t K V.
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Parameter get : (ref Self) -> (ref K) -> M (core.option.Option.t V).
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
  
  (*
      fn insert(&mut self, _key: K, _value: V) {
          unimplemented!()
      }
  *)
  Parameter insert : (mut_ref Self) -> K -> V -> M unit.
  
  Global Instance AssociatedFunction_insert :
    Notations.DoubleColon Self "insert" := {
    Notations.double_colon := insert;
  }.
End Impl_mother_Mapping_t_K_V.
End Impl_mother_Mapping_t_K_V.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_mother_AccountId_t.
Section Impl_core_default_Default_for_mother_AccountId_t.
  Definition Self : Set := mother.AccountId.t.
  
  (*
  Default
  *)
  Parameter default : M mother.AccountId.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_mother_AccountId_t.
End Impl_core_default_Default_for_mother_AccountId_t.

Module  Impl_core_clone_Clone_for_mother_AccountId_t.
Section Impl_core_clone_Clone_for_mother_AccountId_t.
  Definition Self : Set := mother.AccountId.t.
  
  (*
  Clone
  *)
  Parameter clone : (ref Self) -> M mother.AccountId.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_mother_AccountId_t.
End Impl_core_clone_Clone_for_mother_AccountId_t.

Module  Impl_core_marker_Copy_for_mother_AccountId_t.
Section Impl_core_marker_Copy_for_mother_AccountId_t.
  Definition Self : Set := mother.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_mother_AccountId_t.
End Impl_core_marker_Copy_for_mother_AccountId_t.

Module  Impl_core_marker_StructuralPartialEq_for_mother_AccountId_t.
Section Impl_core_marker_StructuralPartialEq_for_mother_AccountId_t.
  Definition Self : Set := mother.AccountId.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_mother_AccountId_t.
End Impl_core_marker_StructuralPartialEq_for_mother_AccountId_t.

Module  Impl_core_cmp_PartialEq_for_mother_AccountId_t.
Section Impl_core_cmp_PartialEq_for_mother_AccountId_t.
  Definition Self : Set := mother.AccountId.t.
  
  (*
  PartialEq
  *)
  Parameter eq : (ref Self) -> (ref mother.AccountId.t) -> M bool.t.
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_mother_AccountId_t.
End Impl_core_cmp_PartialEq_for_mother_AccountId_t.

Module  Impl_core_marker_StructuralEq_for_mother_AccountId_t.
Section Impl_core_marker_StructuralEq_for_mother_AccountId_t.
  Definition Self : Set := mother.AccountId.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_mother_AccountId_t.
End Impl_core_marker_StructuralEq_for_mother_AccountId_t.

Module  Impl_core_cmp_Eq_for_mother_AccountId_t.
Section Impl_core_cmp_Eq_for_mother_AccountId_t.
  Definition Self : Set := mother.AccountId.t.
  
  (*
  Eq
  *)
  Parameter assert_receiver_is_total_eq : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_mother_AccountId_t.
End Impl_core_cmp_Eq_for_mother_AccountId_t.

Ltac Balance := exact u128.t.

Ltac BlockNumber := exact u32.t.

Ltac Hash := exact (array u8.t).

Module  Env.
Section Env.
  Record t : Set := {
    caller : mother.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module  Bids.
Section Bids.
  Record t : Set := {
    x0 :
      alloc.vec.Vec.t
        (alloc.vec.Vec.t
          (core.option.Option.t (mother.AccountId.t * ltac:(mother.Balance)))
          alloc.vec.Vec.Default.A)
        alloc.vec.Vec.Default.A;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End Bids.
End Bids.

Module  Impl_core_default_Default_for_mother_Bids_t.
Section Impl_core_default_Default_for_mother_Bids_t.
  Definition Self : Set := mother.Bids.t.
  
  (*
  Default
  *)
  Parameter default : M mother.Bids.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_mother_Bids_t.
End Impl_core_default_Default_for_mother_Bids_t.

Module  Impl_core_marker_StructuralPartialEq_for_mother_Bids_t.
Section Impl_core_marker_StructuralPartialEq_for_mother_Bids_t.
  Definition Self : Set := mother.Bids.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_mother_Bids_t.
End Impl_core_marker_StructuralPartialEq_for_mother_Bids_t.

Module  Impl_core_cmp_PartialEq_for_mother_Bids_t.
Section Impl_core_cmp_PartialEq_for_mother_Bids_t.
  Definition Self : Set := mother.Bids.t.
  
  (*
  PartialEq
  *)
  Parameter eq : (ref Self) -> (ref mother.Bids.t) -> M bool.t.
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_mother_Bids_t.
End Impl_core_cmp_PartialEq_for_mother_Bids_t.

Module  Impl_core_marker_StructuralEq_for_mother_Bids_t.
Section Impl_core_marker_StructuralEq_for_mother_Bids_t.
  Definition Self : Set := mother.Bids.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_mother_Bids_t.
End Impl_core_marker_StructuralEq_for_mother_Bids_t.

Module  Impl_core_cmp_Eq_for_mother_Bids_t.
Section Impl_core_cmp_Eq_for_mother_Bids_t.
  Definition Self : Set := mother.Bids.t.
  
  (*
  Eq
  *)
  Parameter assert_receiver_is_total_eq : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_mother_Bids_t.
End Impl_core_cmp_Eq_for_mother_Bids_t.

Module  Impl_core_clone_Clone_for_mother_Bids_t.
Section Impl_core_clone_Clone_for_mother_Bids_t.
  Definition Self : Set := mother.Bids.t.
  
  (*
  Clone
  *)
  Parameter clone : (ref Self) -> M mother.Bids.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_mother_Bids_t.
End Impl_core_clone_Clone_for_mother_Bids_t.

Module Outline.
  Inductive t : Set :=
  | NoWinner
  | WinnerDetected
  | PayoutCompleted.
End Outline.

Module  Impl_core_marker_StructuralPartialEq_for_mother_Outline_t.
Section Impl_core_marker_StructuralPartialEq_for_mother_Outline_t.
  Definition Self : Set := mother.Outline.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_mother_Outline_t.
End Impl_core_marker_StructuralPartialEq_for_mother_Outline_t.

Module  Impl_core_cmp_PartialEq_for_mother_Outline_t.
Section Impl_core_cmp_PartialEq_for_mother_Outline_t.
  Definition Self : Set := mother.Outline.t.
  
  (*
  PartialEq
  *)
  Parameter eq : (ref Self) -> (ref mother.Outline.t) -> M bool.t.
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_mother_Outline_t.
End Impl_core_cmp_PartialEq_for_mother_Outline_t.

Module  Impl_core_marker_StructuralEq_for_mother_Outline_t.
Section Impl_core_marker_StructuralEq_for_mother_Outline_t.
  Definition Self : Set := mother.Outline.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_mother_Outline_t.
End Impl_core_marker_StructuralEq_for_mother_Outline_t.

Module  Impl_core_cmp_Eq_for_mother_Outline_t.
Section Impl_core_cmp_Eq_for_mother_Outline_t.
  Definition Self : Set := mother.Outline.t.
  
  (*
  Eq
  *)
  Parameter assert_receiver_is_total_eq : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_mother_Outline_t.
End Impl_core_cmp_Eq_for_mother_Outline_t.

Module  Impl_core_clone_Clone_for_mother_Outline_t.
Section Impl_core_clone_Clone_for_mother_Outline_t.
  Definition Self : Set := mother.Outline.t.
  
  (*
  Clone
  *)
  Parameter clone : (ref Self) -> M mother.Outline.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_mother_Outline_t.
End Impl_core_clone_Clone_for_mother_Outline_t.

Module Status.
  Inductive t : Set :=
  | NotStarted
  | OpeningPeriod
  | EndingPeriod (_ : ltac:(mother.BlockNumber))
  | Ended (_ : mother.Outline.t)
  | RfDelay (_ : ltac:(mother.BlockNumber)).
  
  Definition Get_EndingPeriod_0 :=
    Ref.map
      (fun α => match α with | EndingPeriod α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | EndingPeriod _ => Some (EndingPeriod β) | _ => None end).
  
  Definition Get_Ended_0 :=
    Ref.map
      (fun α => match α with | Ended α0 => Some α0 | _ => None end)
      (fun β α => match α with | Ended _ => Some (Ended β) | _ => None end).
  
  Definition Get_RfDelay_0 :=
    Ref.map
      (fun α => match α with | RfDelay α0 => Some α0 | _ => None end)
      (fun β α => match α with | RfDelay _ => Some (RfDelay β) | _ => None end).
End Status.

Module  Impl_core_marker_StructuralPartialEq_for_mother_Status_t.
Section Impl_core_marker_StructuralPartialEq_for_mother_Status_t.
  Definition Self : Set := mother.Status.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_mother_Status_t.
End Impl_core_marker_StructuralPartialEq_for_mother_Status_t.

Module  Impl_core_cmp_PartialEq_for_mother_Status_t.
Section Impl_core_cmp_PartialEq_for_mother_Status_t.
  Definition Self : Set := mother.Status.t.
  
  (*
  PartialEq
  *)
  Parameter eq : (ref Self) -> (ref mother.Status.t) -> M bool.t.
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_mother_Status_t.
End Impl_core_cmp_PartialEq_for_mother_Status_t.

Module  Impl_core_marker_StructuralEq_for_mother_Status_t.
Section Impl_core_marker_StructuralEq_for_mother_Status_t.
  Definition Self : Set := mother.Status.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_mother_Status_t.
End Impl_core_marker_StructuralEq_for_mother_Status_t.

Module  Impl_core_cmp_Eq_for_mother_Status_t.
Section Impl_core_cmp_Eq_for_mother_Status_t.
  Definition Self : Set := mother.Status.t.
  
  (*
  Eq
  *)
  Parameter assert_receiver_is_total_eq : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_mother_Status_t.
End Impl_core_cmp_Eq_for_mother_Status_t.

Module  Impl_core_clone_Clone_for_mother_Status_t.
Section Impl_core_clone_Clone_for_mother_Status_t.
  Definition Self : Set := mother.Status.t.
  
  (*
  Clone
  *)
  Parameter clone : (ref Self) -> M mother.Status.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_mother_Status_t.
End Impl_core_clone_Clone_for_mother_Status_t.

Module  Auction.
Section Auction.
  Record t : Set := {
    name : alloc.string.String.t;
    subject : ltac:(mother.Hash);
    bids : mother.Bids.t;
    terms : array ltac:(mother.BlockNumber);
    status : mother.Status.t;
    finalized : bool.t;
    vector : alloc.vec.Vec.t u8.t alloc.vec.Vec.Default.A;
  }.
  
  Definition Get_name :=
    Ref.map (fun α => Some α.(name)) (fun β α => Some (α <| name := β |>)).
  Definition Get_subject :=
    Ref.map
      (fun α => Some α.(subject))
      (fun β α => Some (α <| subject := β |>)).
  Definition Get_bids :=
    Ref.map (fun α => Some α.(bids)) (fun β α => Some (α <| bids := β |>)).
  Definition Get_terms :=
    Ref.map (fun α => Some α.(terms)) (fun β α => Some (α <| terms := β |>)).
  Definition Get_status :=
    Ref.map (fun α => Some α.(status)) (fun β α => Some (α <| status := β |>)).
  Definition Get_finalized :=
    Ref.map
      (fun α => Some α.(finalized))
      (fun β α => Some (α <| finalized := β |>)).
  Definition Get_vector :=
    Ref.map (fun α => Some α.(vector)) (fun β α => Some (α <| vector := β |>)).
End Auction.
End Auction.

Module  Impl_core_marker_StructuralPartialEq_for_mother_Auction_t.
Section Impl_core_marker_StructuralPartialEq_for_mother_Auction_t.
  Definition Self : Set := mother.Auction.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_mother_Auction_t.
End Impl_core_marker_StructuralPartialEq_for_mother_Auction_t.

Module  Impl_core_cmp_PartialEq_for_mother_Auction_t.
Section Impl_core_cmp_PartialEq_for_mother_Auction_t.
  Definition Self : Set := mother.Auction.t.
  
  (*
  PartialEq
  *)
  Parameter eq : (ref Self) -> (ref mother.Auction.t) -> M bool.t.
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_mother_Auction_t.
End Impl_core_cmp_PartialEq_for_mother_Auction_t.

Module  Impl_core_marker_StructuralEq_for_mother_Auction_t.
Section Impl_core_marker_StructuralEq_for_mother_Auction_t.
  Definition Self : Set := mother.Auction.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_mother_Auction_t.
End Impl_core_marker_StructuralEq_for_mother_Auction_t.

Module  Impl_core_cmp_Eq_for_mother_Auction_t.
Section Impl_core_cmp_Eq_for_mother_Auction_t.
  Definition Self : Set := mother.Auction.t.
  
  (*
  Eq
  *)
  Parameter assert_receiver_is_total_eq : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_mother_Auction_t.
End Impl_core_cmp_Eq_for_mother_Auction_t.

Module  Impl_core_clone_Clone_for_mother_Auction_t.
Section Impl_core_clone_Clone_for_mother_Auction_t.
  Definition Self : Set := mother.Auction.t.
  
  (*
  Clone
  *)
  Parameter clone : (ref Self) -> M mother.Auction.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_mother_Auction_t.
End Impl_core_clone_Clone_for_mother_Auction_t.

Module  Impl_core_default_Default_for_mother_Auction_t.
Section Impl_core_default_Default_for_mother_Auction_t.
  Definition Self : Set := mother.Auction.t.
  
  (*
      fn default() -> Auction {
          Auction {
              name: String::default(),
              subject: Hash::default(),
              bids: Bids::default(),
              terms: <[BlockNumber; 3]>::default(),
              status: Status::OpeningPeriod,
              finalized: false,
              vector: <Vec<u8>>::default(),
          }
      }
  *)
  Parameter default : M mother.Auction.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_mother_Auction_t.
End Impl_core_default_Default_for_mother_Auction_t.

Module Failure.
  Inductive t : Set :=
  | Revert (_ : alloc.string.String.t)
  | Panic.
  
  Definition Get_Revert_0 :=
    Ref.map
      (fun α => match α with | Revert α0 => Some α0 | _ => None end)
      (fun β α => match α with | Revert _ => Some (Revert β) | _ => None end).
End Failure.

Module  Impl_core_marker_StructuralPartialEq_for_mother_Failure_t.
Section Impl_core_marker_StructuralPartialEq_for_mother_Failure_t.
  Definition Self : Set := mother.Failure.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_mother_Failure_t.
End Impl_core_marker_StructuralPartialEq_for_mother_Failure_t.

Module  Impl_core_cmp_PartialEq_for_mother_Failure_t.
Section Impl_core_cmp_PartialEq_for_mother_Failure_t.
  Definition Self : Set := mother.Failure.t.
  
  (*
  PartialEq
  *)
  Parameter eq : (ref Self) -> (ref mother.Failure.t) -> M bool.t.
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_mother_Failure_t.
End Impl_core_cmp_PartialEq_for_mother_Failure_t.

Module  Impl_core_marker_StructuralEq_for_mother_Failure_t.
Section Impl_core_marker_StructuralEq_for_mother_Failure_t.
  Definition Self : Set := mother.Failure.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_mother_Failure_t.
End Impl_core_marker_StructuralEq_for_mother_Failure_t.

Module  Impl_core_cmp_Eq_for_mother_Failure_t.
Section Impl_core_cmp_Eq_for_mother_Failure_t.
  Definition Self : Set := mother.Failure.t.
  
  (*
  Eq
  *)
  Parameter assert_receiver_is_total_eq : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_mother_Failure_t.
End Impl_core_cmp_Eq_for_mother_Failure_t.

Module  AuctionEchoed.
Section AuctionEchoed.
  Record t : Set := {
    auction : mother.Auction.t;
  }.
  
  Definition Get_auction :=
    Ref.map
      (fun α => Some α.(auction))
      (fun β α => Some (α <| auction := β |>)).
End AuctionEchoed.
End AuctionEchoed.

Module Event.
  Inductive t : Set :=
  | AuctionEchoed (_ : mother.AuctionEchoed.t).
  
  Definition Get_AuctionEchoed_0 :=
    Ref.map
      (fun α => match α with | AuctionEchoed α0 => Some α0 end)
      (fun β α => match α with | AuctionEchoed _ => Some (AuctionEchoed β) end).
End Event.

Module  Impl_mother_Env_t.
Section Impl_mother_Env_t.
  Definition Self : Set := mother.Env.t.
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Parameter caller : (ref Self) -> M mother.AccountId.t.
  
  Global Instance AssociatedFunction_caller :
    Notations.DoubleColon Self "caller" := {
    Notations.double_colon := caller;
  }.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Parameter emit_event : (ref Self) -> mother.Event.t -> M unit.
  
  Global Instance AssociatedFunction_emit_event :
    Notations.DoubleColon Self "emit_event" := {
    Notations.double_colon := emit_event;
  }.
End Impl_mother_Env_t.
End Impl_mother_Env_t.

Module  Mother.
Section Mother.
  Record t : Set := {
    auction : mother.Auction.t;
    balances : mother.Mapping.t mother.AccountId.t ltac:(mother.Balance);
  }.
  
  Definition Get_auction :=
    Ref.map
      (fun α => Some α.(auction))
      (fun β α => Some (α <| auction := β |>)).
  Definition Get_balances :=
    Ref.map
      (fun α => Some α.(balances))
      (fun β α => Some (α <| balances := β |>)).
End Mother.
End Mother.

Module  Impl_core_default_Default_for_mother_Mother_t.
Section Impl_core_default_Default_for_mother_Mother_t.
  Definition Self : Set := mother.Mother.t.
  
  (*
  Default
  *)
  Parameter default : M mother.Mother.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_mother_Mother_t.
End Impl_core_default_Default_for_mother_Mother_t.

Module  Impl_mother_Mother_t.
Section Impl_mother_Mother_t.
  Definition Self : Set := mother.Mother.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Parameter init_env : M mother.Env.t.
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon Self "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Parameter env : (ref Self) -> M mother.Env.t.
  
  Global Instance AssociatedFunction_env : Notations.DoubleColon Self "env" := {
    Notations.double_colon := env;
  }.
  
  (*
      pub fn new(auction: Auction) -> Self {
          Self {
              balances: Default::default(),
              auction,
          }
      }
  *)
  Parameter new : mother.Auction.t -> M Self.
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn new_default() -> Self {
          Default::default()
      }
  *)
  Parameter new_default : M Self.
  
  Global Instance AssociatedFunction_new_default :
    Notations.DoubleColon Self "new_default" := {
    Notations.double_colon := new_default;
  }.
  
  (*
      pub fn failed_new(fail: bool) -> Result<Self, Failure> {
          if fail {
              Err(Failure::Revert("Reverting instantiation".to_string()))
          } else {
              Ok(Default::default())
          }
      }
  *)
  Parameter failed_new :
      bool.t -> M (core.result.Result.t Self mother.Failure.t).
  
  Global Instance AssociatedFunction_failed_new :
    Notations.DoubleColon Self "failed_new" := {
    Notations.double_colon := failed_new;
  }.
  
  (*
      pub fn echo_auction(&mut self, auction: Auction) -> Auction {
          self.env().emit_event(Event::AuctionEchoed(AuctionEchoed {
              auction: auction.clone(),
          }));
          auction
      }
  *)
  Parameter echo_auction :
      (mut_ref Self) -> mother.Auction.t -> M mother.Auction.t.
  
  Global Instance AssociatedFunction_echo_auction :
    Notations.DoubleColon Self "echo_auction" := {
    Notations.double_colon := echo_auction;
  }.
  
  (*
      pub fn revert_or_trap(&mut self, fail: Option<Failure>) -> Result<(), Failure> {
          match fail {
              Some(Failure::Revert(_)) => {
                  Err(Failure::Revert("Reverting on user demand!".to_string()))
              }
              Some(Failure::Panic) => {
                  panic!("Trapping on user demand!")
              }
              None => Ok(()),
          }
      }
  *)
  Parameter revert_or_trap :
      (mut_ref Self) ->
        (core.option.Option.t mother.Failure.t) ->
        M (core.result.Result.t unit mother.Failure.t).
  
  Global Instance AssociatedFunction_revert_or_trap :
    Notations.DoubleColon Self "revert_or_trap" := {
    Notations.double_colon := revert_or_trap;
  }.
  
  (*
      pub fn debug_log(&mut self, _message: String) {
          println!("debug_log: {}", _message);
      }
  *)
  Parameter debug_log : (mut_ref Self) -> alloc.string.String.t -> M unit.
  
  Global Instance AssociatedFunction_debug_log :
    Notations.DoubleColon Self "debug_log" := {
    Notations.double_colon := debug_log;
  }.
End Impl_mother_Mother_t.
End Impl_mother_Mother_t.
