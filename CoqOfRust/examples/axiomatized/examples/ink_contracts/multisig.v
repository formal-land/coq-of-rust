(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructRecord
  {
    name := "Mapping";
    const_params := [];
    ty_params := [ "K"; "V" ];
    fields :=
      [
        ("_key", Ty.apply (Ty.path "core::marker::PhantomData") [] [ K ]);
        ("_value", Ty.apply (Ty.path "core::marker::PhantomData") [] [ V ])
      ];
  } *)

Module Impl_core_default_Default_where_core_default_Default_K_where_core_default_Default_V_for_multisig_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t := Ty.apply (Ty.path "multisig::Mapping") [] [ K; V ].
  
  Parameter default : forall (K V : Ty.t), (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    forall (K V : Ty.t),
    M.IsTraitInstance
      "core::default::Default"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      (Self K V)
      (* Instance *) [ ("default", InstanceField.Method (default K V)) ].
End Impl_core_default_Default_where_core_default_Default_K_where_core_default_Default_V_for_multisig_Mapping_K_V.

Module Impl_multisig_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t := Ty.apply (Ty.path "multisig::Mapping") [] [ K; V ].
  
  Parameter contains : forall (K V : Ty.t), (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_contains :
    forall (K V : Ty.t),
    M.IsAssociatedFunction.C (Self K V) "contains" (contains K V).
  Admitted.
  
  Parameter get : forall (K V : Ty.t), (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_get :
    forall (K V : Ty.t),
    M.IsAssociatedFunction.C (Self K V) "get" (get K V).
  Admitted.
  
  Parameter insert : forall (K V : Ty.t), (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_insert :
    forall (K V : Ty.t),
    M.IsAssociatedFunction.C (Self K V) "insert" (insert K V).
  Admitted.
  
  Parameter remove : forall (K V : Ty.t), (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_remove :
    forall (K V : Ty.t),
    M.IsAssociatedFunction.C (Self K V) "remove" (remove K V).
  Admitted.
  
  Parameter size : forall (K V : Ty.t), (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_size :
    forall (K V : Ty.t),
    M.IsAssociatedFunction.C (Self K V) "size" (size K V).
  Admitted.
  
  Parameter take : forall (K V : Ty.t), (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_take :
    forall (K V : Ty.t),
    M.IsAssociatedFunction.C (Self K V) "take" (take K V).
  Admitted.
End Impl_multisig_Mapping_K_V.

(* StructTuple
  {
    name := "AccountId";
    const_params := [];
    ty_params := [];
    fields := [ Ty.path "u128" ];
  } *)

Module Impl_core_default_Default_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  Parameter default : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_multisig_AccountId.

Module Impl_core_fmt_Debug_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  Parameter fmt : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_multisig_AccountId.

Module Impl_core_clone_Clone_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  Parameter clone : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_multisig_AccountId.

Module Impl_core_marker_Copy_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_Copy_for_multisig_AccountId.

Module Impl_core_marker_StructuralPartialEq_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_StructuralPartialEq_for_multisig_AccountId.

Module Impl_core_cmp_PartialEq_multisig_AccountId_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  Parameter eq : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) [ Ty.path "multisig::AccountId" ]
      Self
      (* Instance *) [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_multisig_AccountId_for_multisig_AccountId.

Module Impl_core_cmp_Eq_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  Parameter assert_receiver_is_total_eq : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *)
      [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
End Impl_core_cmp_Eq_for_multisig_AccountId.

Module Impl_core_cmp_PartialOrd_multisig_AccountId_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  Parameter partial_cmp : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialOrd"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) [ Ty.path "multisig::AccountId" ]
      Self
      (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
End Impl_core_cmp_PartialOrd_multisig_AccountId_for_multisig_AccountId.

Module Impl_core_cmp_Ord_for_multisig_AccountId.
  Definition Self : Ty.t := Ty.path "multisig::AccountId".
  
  Parameter cmp : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Ord"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
End Impl_core_cmp_Ord_for_multisig_AccountId.

Axiom Balance : (Ty.path "multisig::Balance") = (Ty.path "u128").

(* StructRecord
  {
    name := "Env";
    const_params := [];
    ty_params := [];
    fields := [ ("caller", Ty.path "multisig::AccountId") ];
  } *)

Parameter value_MAX_OWNERS : PolymorphicFunction.t.

Global Instance Instance_IsConstant_value_MAX_OWNERS :
  M.IsFunction.C "multisig::MAX_OWNERS" value_MAX_OWNERS.
Admitted.

Axiom TransactionId : (Ty.path "multisig::TransactionId") = (Ty.path "u32").

Parameter value_WRONG_TRANSACTION_ID : PolymorphicFunction.t.

Global Instance Instance_IsConstant_value_WRONG_TRANSACTION_ID :
  M.IsFunction.C "multisig::WRONG_TRANSACTION_ID" value_WRONG_TRANSACTION_ID.
Admitted.

(* StructTuple
  {
    name := "CallInput";
    const_params := [];
    ty_params := [];
    fields := [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ];
  } *)

(*
Enum ConfirmationStatus
{
  const_params := [];
  ty_params := [];
  variants :=
    [
      {
        name := "Confirmed";
        item := StructTuple [];
      };
      {
        name := "ConfirmationsNeeded";
        item := StructTuple [ Ty.path "u32" ];
      }
    ];
}
*)

Axiom IsDiscriminant_ConfirmationStatus_Confirmed :
  M.IsDiscriminant "multisig::ConfirmationStatus::Confirmed" 0.
Axiom IsDiscriminant_ConfirmationStatus_ConfirmationsNeeded :
  M.IsDiscriminant "multisig::ConfirmationStatus::ConfirmationsNeeded" 1.

Module Impl_core_clone_Clone_for_multisig_ConfirmationStatus.
  Definition Self : Ty.t := Ty.path "multisig::ConfirmationStatus".
  
  Parameter clone : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_multisig_ConfirmationStatus.

Module Impl_core_marker_Copy_for_multisig_ConfirmationStatus.
  Definition Self : Ty.t := Ty.path "multisig::ConfirmationStatus".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_Copy_for_multisig_ConfirmationStatus.

(* StructRecord
  {
    name := "Transaction";
    const_params := [];
    ty_params := [];
    fields :=
      [
        ("callee", Ty.path "multisig::AccountId");
        ("selector",
          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ Ty.path "u8" ]);
        ("input",
          Ty.apply (Ty.path "alloc::vec::Vec") [] [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]);
        ("transferred_value", Ty.path "u128");
        ("gas_limit", Ty.path "u64");
        ("allow_reentry", Ty.path "bool")
      ];
  } *)

Module Impl_core_default_Default_for_multisig_Transaction.
  Definition Self : Ty.t := Ty.path "multisig::Transaction".
  
  Parameter default : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_multisig_Transaction.

(*
Enum Error
{
  const_params := [];
  ty_params := [];
  variants :=
    [
      {
        name := "TransactionFailed";
        item := StructTuple [];
      }
    ];
}
*)

Axiom IsDiscriminant_Error_TransactionFailed :
  M.IsDiscriminant "multisig::Error::TransactionFailed" 0.

Module Impl_core_clone_Clone_for_multisig_Error.
  Definition Self : Ty.t := Ty.path "multisig::Error".
  
  Parameter clone : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_multisig_Error.

Module Impl_core_marker_Copy_for_multisig_Error.
  Definition Self : Ty.t := Ty.path "multisig::Error".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_Copy_for_multisig_Error.

Module Impl_core_marker_StructuralPartialEq_for_multisig_Error.
  Definition Self : Ty.t := Ty.path "multisig::Error".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_StructuralPartialEq_for_multisig_Error.

Module Impl_core_cmp_PartialEq_multisig_Error_for_multisig_Error.
  Definition Self : Ty.t := Ty.path "multisig::Error".
  
  Parameter eq : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) [ Ty.path "multisig::Error" ]
      Self
      (* Instance *) [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_multisig_Error_for_multisig_Error.

Module Impl_core_cmp_Eq_for_multisig_Error.
  Definition Self : Ty.t := Ty.path "multisig::Error".
  
  Parameter assert_receiver_is_total_eq : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *)
      [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
End Impl_core_cmp_Eq_for_multisig_Error.

(* StructRecord
  {
    name := "Transactions";
    const_params := [];
    ty_params := [];
    fields :=
      [
        ("transactions",
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            []
            [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ]);
        ("next_id", Ty.path "u32")
      ];
  } *)

Module Impl_core_default_Default_for_multisig_Transactions.
  Definition Self : Ty.t := Ty.path "multisig::Transactions".
  
  Parameter default : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_multisig_Transactions.

(* StructRecord
  {
    name := "Confirmation";
    const_params := [];
    ty_params := [];
    fields :=
      [
        ("transaction", Ty.path "u32");
        ("from", Ty.path "multisig::AccountId");
        ("status", Ty.path "multisig::ConfirmationStatus")
      ];
  } *)

(* StructRecord
  {
    name := "Revocation";
    const_params := [];
    ty_params := [];
    fields := [ ("transaction", Ty.path "u32"); ("from", Ty.path "multisig::AccountId") ];
  } *)

(* StructRecord
  {
    name := "Submission";
    const_params := [];
    ty_params := [];
    fields := [ ("transaction", Ty.path "u32") ];
  } *)

(* StructRecord
  {
    name := "Cancellation";
    const_params := [];
    ty_params := [];
    fields := [ ("transaction", Ty.path "u32") ];
  } *)

(* StructRecord
  {
    name := "Execution";
    const_params := [];
    ty_params := [];
    fields :=
      [
        ("transaction", Ty.path "u32");
        ("result",
          Ty.apply
            (Ty.path "core::result::Result")
            []
            [
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                ];
              Ty.path "multisig::Error"
            ])
      ];
  } *)

(* StructRecord
  {
    name := "OwnerAddition";
    const_params := [];
    ty_params := [];
    fields := [ ("owner", Ty.path "multisig::AccountId") ];
  } *)

(* StructRecord
  {
    name := "OwnerRemoval";
    const_params := [];
    ty_params := [];
    fields := [ ("owner", Ty.path "multisig::AccountId") ];
  } *)

(* StructRecord
  {
    name := "RequirementChange";
    const_params := [];
    ty_params := [];
    fields := [ ("new_requirement", Ty.path "u32") ];
  } *)

(*
Enum Event
{
  const_params := [];
  ty_params := [];
  variants :=
    [
      {
        name := "Confirmation";
        item := StructTuple [ Ty.path "multisig::Confirmation" ];
      };
      {
        name := "Revocation";
        item := StructTuple [ Ty.path "multisig::Revocation" ];
      };
      {
        name := "Submission";
        item := StructTuple [ Ty.path "multisig::Submission" ];
      };
      {
        name := "Cancellation";
        item := StructTuple [ Ty.path "multisig::Cancellation" ];
      };
      {
        name := "Execution";
        item := StructTuple [ Ty.path "multisig::Execution" ];
      };
      {
        name := "OwnerAddition";
        item := StructTuple [ Ty.path "multisig::OwnerAddition" ];
      };
      {
        name := "OwnerRemoval";
        item := StructTuple [ Ty.path "multisig::OwnerRemoval" ];
      };
      {
        name := "RequirementChange";
        item := StructTuple [ Ty.path "multisig::RequirementChange" ];
      }
    ];
}
*)

Axiom IsDiscriminant_Event_Confirmation : M.IsDiscriminant "multisig::Event::Confirmation" 0.
Axiom IsDiscriminant_Event_Revocation : M.IsDiscriminant "multisig::Event::Revocation" 1.
Axiom IsDiscriminant_Event_Submission : M.IsDiscriminant "multisig::Event::Submission" 2.
Axiom IsDiscriminant_Event_Cancellation : M.IsDiscriminant "multisig::Event::Cancellation" 3.
Axiom IsDiscriminant_Event_Execution : M.IsDiscriminant "multisig::Event::Execution" 4.
Axiom IsDiscriminant_Event_OwnerAddition : M.IsDiscriminant "multisig::Event::OwnerAddition" 5.
Axiom IsDiscriminant_Event_OwnerRemoval : M.IsDiscriminant "multisig::Event::OwnerRemoval" 6.
Axiom IsDiscriminant_Event_RequirementChange :
  M.IsDiscriminant "multisig::Event::RequirementChange" 7.

Module Impl_multisig_Env.
  Definition Self : Ty.t := Ty.path "multisig::Env".
  
  Parameter caller : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_caller : M.IsAssociatedFunction.C Self "caller" caller.
  Admitted.
  
  Parameter emit_event : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_emit_event :
    M.IsAssociatedFunction.C Self "emit_event" emit_event.
  Admitted.
  
  Parameter transferred_value : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_transferred_value :
    M.IsAssociatedFunction.C Self "transferred_value" transferred_value.
  Admitted.
  
  Parameter account_id : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_account_id :
    M.IsAssociatedFunction.C Self "account_id" account_id.
  Admitted.
End Impl_multisig_Env.

(* StructRecord
  {
    name := "Multisig";
    const_params := [];
    ty_params := [];
    fields :=
      [
        ("confirmations",
          Ty.apply
            (Ty.path "multisig::Mapping")
            []
            [ Ty.tuple [ Ty.path "u32"; Ty.path "multisig::AccountId" ]; Ty.tuple [] ]);
        ("confirmation_count",
          Ty.apply (Ty.path "multisig::Mapping") [] [ Ty.path "u32"; Ty.path "u32" ]);
        ("transactions",
          Ty.apply
            (Ty.path "multisig::Mapping")
            []
            [ Ty.path "u32"; Ty.path "multisig::Transaction" ]);
        ("transaction_list", Ty.path "multisig::Transactions");
        ("owners",
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            []
            [ Ty.path "multisig::AccountId"; Ty.path "alloc::alloc::Global" ]);
        ("is_owner",
          Ty.apply (Ty.path "multisig::Mapping") [] [ Ty.path "multisig::AccountId"; Ty.tuple [] ]);
        ("requirement", Ty.path "u32")
      ];
  } *)

Module Impl_core_default_Default_for_multisig_Multisig.
  Definition Self : Ty.t := Ty.path "multisig::Multisig".
  
  Parameter default : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_multisig_Multisig.

Parameter ensure_requirement_is_valid : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Global Instance Instance_IsFunction_ensure_requirement_is_valid :
  M.IsFunction.C "multisig::ensure_requirement_is_valid" ensure_requirement_is_valid.
Admitted.

Module Impl_multisig_Multisig.
  Definition Self : Ty.t := Ty.path "multisig::Multisig".
  
  Parameter init_env : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_init_env : M.IsAssociatedFunction.C Self "init_env" init_env.
  Admitted.
  
  Parameter env : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_env : M.IsAssociatedFunction.C Self "env" env.
  Admitted.
  
  Parameter new : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
  Admitted.
  
  Parameter ensure_confirmed : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_ensure_confirmed :
    M.IsAssociatedFunction.C Self "ensure_confirmed" ensure_confirmed.
  Admitted.
  
  Parameter ensure_transaction_exists : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_ensure_transaction_exists :
    M.IsAssociatedFunction.C Self "ensure_transaction_exists" ensure_transaction_exists.
  Admitted.
  
  Parameter ensure_owner : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_ensure_owner :
    M.IsAssociatedFunction.C Self "ensure_owner" ensure_owner.
  Admitted.
  
  Parameter ensure_caller_is_owner : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_ensure_caller_is_owner :
    M.IsAssociatedFunction.C Self "ensure_caller_is_owner" ensure_caller_is_owner.
  Admitted.
  
  Parameter ensure_from_wallet : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_ensure_from_wallet :
    M.IsAssociatedFunction.C Self "ensure_from_wallet" ensure_from_wallet.
  Admitted.
  
  Parameter ensure_no_owner : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_ensure_no_owner :
    M.IsAssociatedFunction.C Self "ensure_no_owner" ensure_no_owner.
  Admitted.
  
  Parameter add_owner : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_add_owner :
    M.IsAssociatedFunction.C Self "add_owner" add_owner.
  Admitted.
  
  Parameter owner_index : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_owner_index :
    M.IsAssociatedFunction.C Self "owner_index" owner_index.
  Admitted.
  
  Parameter clean_owner_confirmations : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_clean_owner_confirmations :
    M.IsAssociatedFunction.C Self "clean_owner_confirmations" clean_owner_confirmations.
  Admitted.
  
  Parameter remove_owner : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_remove_owner :
    M.IsAssociatedFunction.C Self "remove_owner" remove_owner.
  Admitted.
  
  Parameter replace_owner : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_replace_owner :
    M.IsAssociatedFunction.C Self "replace_owner" replace_owner.
  Admitted.
  
  Parameter change_requirement : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_change_requirement :
    M.IsAssociatedFunction.C Self "change_requirement" change_requirement.
  Admitted.
  
  Parameter confirm_by_caller : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_confirm_by_caller :
    M.IsAssociatedFunction.C Self "confirm_by_caller" confirm_by_caller.
  Admitted.
  
  Parameter submit_transaction : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_submit_transaction :
    M.IsAssociatedFunction.C Self "submit_transaction" submit_transaction.
  Admitted.
  
  Parameter take_transaction : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_take_transaction :
    M.IsAssociatedFunction.C Self "take_transaction" take_transaction.
  Admitted.
  
  Parameter cancel_transaction : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_cancel_transaction :
    M.IsAssociatedFunction.C Self "cancel_transaction" cancel_transaction.
  Admitted.
  
  Parameter confirm_transaction : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_confirm_transaction :
    M.IsAssociatedFunction.C Self "confirm_transaction" confirm_transaction.
  Admitted.
  
  Parameter revoke_confirmation : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_revoke_confirmation :
    M.IsAssociatedFunction.C Self "revoke_confirmation" revoke_confirmation.
  Admitted.
  
  Parameter invoke_transaction : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_invoke_transaction :
    M.IsAssociatedFunction.C Self "invoke_transaction" invoke_transaction.
  Admitted.
  
  Parameter eval_transaction : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Global Instance AssociatedFunction_eval_transaction :
    M.IsAssociatedFunction.C Self "eval_transaction" eval_transaction.
  Admitted.
End Impl_multisig_Multisig.
