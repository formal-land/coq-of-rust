(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_payment_channel_AccountId_t.
Section Impl_core_default_Default_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  (*
  Default
  *)
  Parameter default : M payment_channel.AccountId.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_payment_channel_AccountId_t.
End Impl_core_default_Default_for_payment_channel_AccountId_t.

Module  Impl_core_clone_Clone_for_payment_channel_AccountId_t.
Section Impl_core_clone_Clone_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  (*
  Clone
  *)
  Parameter clone : (ref Self) -> M payment_channel.AccountId.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_payment_channel_AccountId_t.
End Impl_core_clone_Clone_for_payment_channel_AccountId_t.

Module  Impl_core_marker_Copy_for_payment_channel_AccountId_t.
Section Impl_core_marker_Copy_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_payment_channel_AccountId_t.
End Impl_core_marker_Copy_for_payment_channel_AccountId_t.

Module  Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId_t.
Section Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId_t.
End Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId_t.

Module  Impl_core_cmp_PartialEq_for_payment_channel_AccountId_t.
Section Impl_core_cmp_PartialEq_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  (*
  PartialEq
  *)
  Parameter eq : (ref Self) -> (ref payment_channel.AccountId.t) -> M bool.t.
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_payment_channel_AccountId_t.
End Impl_core_cmp_PartialEq_for_payment_channel_AccountId_t.

Module  Impl_core_marker_StructuralEq_for_payment_channel_AccountId_t.
Section Impl_core_marker_StructuralEq_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_payment_channel_AccountId_t.
End Impl_core_marker_StructuralEq_for_payment_channel_AccountId_t.

Module  Impl_core_cmp_Eq_for_payment_channel_AccountId_t.
Section Impl_core_cmp_Eq_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  (*
  Eq
  *)
  Parameter assert_receiver_is_total_eq : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_payment_channel_AccountId_t.
End Impl_core_cmp_Eq_for_payment_channel_AccountId_t.

Module  Impl_core_convert_From_array_u8_t_for_payment_channel_AccountId_t.
Section Impl_core_convert_From_array_u8_t_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  (*
      fn from(value: [u8; 32]) -> Self {
          unimplemented!()
      }
  *)
  Parameter from : (array u8.t) -> M Self.
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ : core.convert.From.Trait Self (T := array u8.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_array_u8_t_for_payment_channel_AccountId_t.
End Impl_core_convert_From_array_u8_t_for_payment_channel_AccountId_t.

Ltac Balance := exact u128.t.

Ltac Timestamp := exact u64.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : payment_channel.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module  PaymentChannel.
Section PaymentChannel.
  Record t : Set := {
    sender : payment_channel.AccountId.t;
    recipient : payment_channel.AccountId.t;
    expiration : core.option.Option.t ltac:(payment_channel.Timestamp);
    withdrawn : ltac:(payment_channel.Balance);
    close_duration : ltac:(payment_channel.Timestamp);
  }.
  
  Definition Get_sender :=
    Ref.map (fun α => Some α.(sender)) (fun β α => Some (α <| sender := β |>)).
  Definition Get_recipient :=
    Ref.map
      (fun α => Some α.(recipient))
      (fun β α => Some (α <| recipient := β |>)).
  Definition Get_expiration :=
    Ref.map
      (fun α => Some α.(expiration))
      (fun β α => Some (α <| expiration := β |>)).
  Definition Get_withdrawn :=
    Ref.map
      (fun α => Some α.(withdrawn))
      (fun β α => Some (α <| withdrawn := β |>)).
  Definition Get_close_duration :=
    Ref.map
      (fun α => Some α.(close_duration))
      (fun β α => Some (α <| close_duration := β |>)).
End PaymentChannel.
End PaymentChannel.

Module Error.
  Inductive t : Set :=
  | CallerIsNotSender
  | CallerIsNotRecipient
  | AmountIsLessThanWithdrawn
  | TransferFailed
  | NotYetExpired
  | InvalidSignature.
End Error.

Module  Impl_core_marker_StructuralPartialEq_for_payment_channel_Error_t.
Section Impl_core_marker_StructuralPartialEq_for_payment_channel_Error_t.
  Definition Self : Set := payment_channel.Error.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_payment_channel_Error_t.
End Impl_core_marker_StructuralPartialEq_for_payment_channel_Error_t.

Module  Impl_core_cmp_PartialEq_for_payment_channel_Error_t.
Section Impl_core_cmp_PartialEq_for_payment_channel_Error_t.
  Definition Self : Set := payment_channel.Error.t.
  
  (*
  PartialEq
  *)
  Parameter eq : (ref Self) -> (ref payment_channel.Error.t) -> M bool.t.
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_payment_channel_Error_t.
End Impl_core_cmp_PartialEq_for_payment_channel_Error_t.

Module  Impl_core_marker_StructuralEq_for_payment_channel_Error_t.
Section Impl_core_marker_StructuralEq_for_payment_channel_Error_t.
  Definition Self : Set := payment_channel.Error.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_payment_channel_Error_t.
End Impl_core_marker_StructuralEq_for_payment_channel_Error_t.

Module  Impl_core_cmp_Eq_for_payment_channel_Error_t.
Section Impl_core_cmp_Eq_for_payment_channel_Error_t.
  Definition Self : Set := payment_channel.Error.t.
  
  (*
  Eq
  *)
  Parameter assert_receiver_is_total_eq : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_payment_channel_Error_t.
End Impl_core_cmp_Eq_for_payment_channel_Error_t.

Ltac Result T := exact (core.result.Result.t T payment_channel.Error.t).

Module  SenderCloseStarted.
Section SenderCloseStarted.
  Record t : Set := {
    expiration : ltac:(payment_channel.Timestamp);
    close_duration : ltac:(payment_channel.Timestamp);
  }.
  
  Definition Get_expiration :=
    Ref.map
      (fun α => Some α.(expiration))
      (fun β α => Some (α <| expiration := β |>)).
  Definition Get_close_duration :=
    Ref.map
      (fun α => Some α.(close_duration))
      (fun β α => Some (α <| close_duration := β |>)).
End SenderCloseStarted.
End SenderCloseStarted.

Module Event.
  Inductive t : Set :=
  | SenderCloseStarted (_ : payment_channel.SenderCloseStarted.t).
  
  Definition Get_SenderCloseStarted_0 :=
    Ref.map
      (fun α => match α with | SenderCloseStarted α0 => Some α0 end)
      (fun β α =>
        match α with | SenderCloseStarted _ => Some (SenderCloseStarted β) end).
End Event.

Module  Impl_payment_channel_Env_t.
Section Impl_payment_channel_Env_t.
  Definition Self : Set := payment_channel.Env.t.
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Parameter caller : (ref Self) -> M payment_channel.AccountId.t.
  
  Global Instance AssociatedFunction_caller :
    Notations.DoubleColon Self "caller" := {
    Notations.double_colon := caller;
  }.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Parameter emit_event : (ref Self) -> payment_channel.Event.t -> M unit.
  
  Global Instance AssociatedFunction_emit_event :
    Notations.DoubleColon Self "emit_event" := {
    Notations.double_colon := emit_event;
  }.
  
  (*
      fn terminate_contract(&self, sender: AccountId) {
          unimplemented!()
      }
  *)
  Parameter terminate_contract :
      (ref Self) -> payment_channel.AccountId.t -> M unit.
  
  Global Instance AssociatedFunction_terminate_contract :
    Notations.DoubleColon Self "terminate_contract" := {
    Notations.double_colon := terminate_contract;
  }.
  
  (*
      fn transfer(&self, recipient: AccountId, amount: Balance) -> Result<()> {
          unimplemented!()
      }
  *)
  Parameter transfer :
      (ref Self) ->
        payment_channel.AccountId.t ->
        ltac:(payment_channel.Balance) ->
        M ltac:(payment_channel.Result unit).
  
  Global Instance AssociatedFunction_transfer :
    Notations.DoubleColon Self "transfer" := {
    Notations.double_colon := transfer;
  }.
  
  (*
      fn block_timestamp(&self) -> Timestamp {
          unimplemented!()
      }
  *)
  Parameter block_timestamp : (ref Self) -> M ltac:(payment_channel.Timestamp).
  
  Global Instance AssociatedFunction_block_timestamp :
    Notations.DoubleColon Self "block_timestamp" := {
    Notations.double_colon := block_timestamp;
  }.
  
  (*
      fn balance(&self) -> Balance {
          unimplemented!()
      }
  *)
  Parameter balance : (ref Self) -> M ltac:(payment_channel.Balance).
  
  Global Instance AssociatedFunction_balance :
    Notations.DoubleColon Self "balance" := {
    Notations.double_colon := balance;
  }.
  
  (*
      fn account_id(&self) -> AccountId {
          unimplemented!()
      }
  *)
  Parameter account_id : (ref Self) -> M payment_channel.AccountId.t.
  
  Global Instance AssociatedFunction_account_id :
    Notations.DoubleColon Self "account_id" := {
    Notations.double_colon := account_id;
  }.
End Impl_payment_channel_Env_t.
End Impl_payment_channel_Env_t.

Module  HashOutput.
Section HashOutput.
  Class Trait (Self : Set) : Type := {
    Type_ : Set;
    ℒ_0 :: core.default.Default.Trait Type_;
  }.
  
  Global Instance Method_Type_ `(Trait) :
    Notations.DoubleColonType Self "Type_" := {
    Notations.double_colon_type := Type_;
  }.
End HashOutput.
End HashOutput.

Module  CryptoHash.
Section CryptoHash.
  Class Trait (Self : Set) : Type := {
    ℒ_0 :: payment_channel.HashOutput.Trait Self;
    hash :
      (ref (slice u8.t)) ->
        (mut_ref
          (payment_channel.HashOutput.Type_
            (Self := Self)
            (Trait := ltac:(refine _))))
        ->
        M unit;
  }.
  
End CryptoHash.
End CryptoHash.

(*
pub fn hash_encoded<H, T>(input: &T, output: &mut <H as HashOutput>::Type)
where
    H: CryptoHash,
{
    unimplemented!()
}
*)
Parameter hash_encoded :
    forall {H T : Set},
    (ref T) ->
      (mut_ref
        (payment_channel.HashOutput.Type_
          (Self := H)
          (Trait := ltac:(refine _))))
      ->
      M unit.

(*
pub fn ecdsa_recover(
    signature: &[u8; 65],
    message_hash: &[u8; 32],
    output: &mut [u8; 33],
) -> Result<()> {
    unimplemented!()
}
*)
Parameter ecdsa_recover :
    (ref (array u8.t)) ->
      (ref (array u8.t)) ->
      (mut_ref (array u8.t)) ->
      M ltac:(payment_channel.Result unit).

Module Sha2x256.
  Inductive t : Set :=
  .
End Sha2x256.

Module Keccak256.
  Inductive t : Set :=
  .
End Keccak256.

Module Blake2x256.
  Inductive t : Set :=
  .
End Blake2x256.

Module Blake2x128.
  Inductive t : Set :=
  .
End Blake2x128.

Module  Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256_t.
Section Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256_t.
  Definition Self : Set := payment_channel.Sha2x256.t.
  
  (*
      type Type = [u8; 32];
  *)
  Definition Type_ : Set := array u8.t.
  
  Global Instance ℐ : payment_channel.HashOutput.Trait Self := {
    payment_channel.HashOutput.Type_ := Type_;
  }.
End Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256_t.
End Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256_t.

Module  Impl_payment_channel_HashOutput_for_payment_channel_Keccak256_t.
Section Impl_payment_channel_HashOutput_for_payment_channel_Keccak256_t.
  Definition Self : Set := payment_channel.Keccak256.t.
  
  (*
      type Type = [u8; 32];
  *)
  Definition Type_ : Set := array u8.t.
  
  Global Instance ℐ : payment_channel.HashOutput.Trait Self := {
    payment_channel.HashOutput.Type_ := Type_;
  }.
End Impl_payment_channel_HashOutput_for_payment_channel_Keccak256_t.
End Impl_payment_channel_HashOutput_for_payment_channel_Keccak256_t.

Module  Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256_t.
Section Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256_t.
  Definition Self : Set := payment_channel.Blake2x256.t.
  
  (*
      type Type = [u8; 32];
  *)
  Definition Type_ : Set := array u8.t.
  
  Global Instance ℐ : payment_channel.HashOutput.Trait Self := {
    payment_channel.HashOutput.Type_ := Type_;
  }.
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256_t.
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256_t.

Module  Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128_t.
Section Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128_t.
  Definition Self : Set := payment_channel.Blake2x128.t.
  
  (*
      type Type = [u8; 16];
  *)
  Definition Type_ : Set := array u8.t.
  
  Global Instance ℐ : payment_channel.HashOutput.Trait Self := {
    payment_channel.HashOutput.Type_ := Type_;
  }.
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128_t.
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128_t.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256_t.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256_t.
  Definition Self : Set := payment_channel.Sha2x256.t.
  
  (*
      fn hash(input: &[u8], output: &mut <Self as HashOutput>::Type) {
          unimplemented!()
      }
  *)
  Parameter hash :
      (ref (slice u8.t)) ->
        (mut_ref
          (payment_channel.HashOutput.Type_
            (Self := Self)
            (Trait := ltac:(refine _))))
        ->
        M unit.
  
  Global Instance AssociatedFunction_hash :
    Notations.DoubleColon Self "hash" := {
    Notations.double_colon := hash;
  }.
  
  Global Instance ℐ : payment_channel.CryptoHash.Trait Self := {
    payment_channel.CryptoHash.hash := hash;
  }.
End Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256_t.
End Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256_t.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256_t.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256_t.
  Definition Self : Set := payment_channel.Keccak256.t.
  
  (*
      fn hash(input: &[u8], output: &mut <Self as HashOutput>::Type) {
          unimplemented!()
      }
  *)
  Parameter hash :
      (ref (slice u8.t)) ->
        (mut_ref
          (payment_channel.HashOutput.Type_
            (Self := Self)
            (Trait := ltac:(refine _))))
        ->
        M unit.
  
  Global Instance AssociatedFunction_hash :
    Notations.DoubleColon Self "hash" := {
    Notations.double_colon := hash;
  }.
  
  Global Instance ℐ : payment_channel.CryptoHash.Trait Self := {
    payment_channel.CryptoHash.hash := hash;
  }.
End Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256_t.
End Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256_t.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256_t.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256_t.
  Definition Self : Set := payment_channel.Blake2x256.t.
  
  (*
      fn hash(input: &[u8], output: &mut <Self as HashOutput>::Type) {
          unimplemented!()
      }
  *)
  Parameter hash :
      (ref (slice u8.t)) ->
        (mut_ref
          (payment_channel.HashOutput.Type_
            (Self := Self)
            (Trait := ltac:(refine _))))
        ->
        M unit.
  
  Global Instance AssociatedFunction_hash :
    Notations.DoubleColon Self "hash" := {
    Notations.double_colon := hash;
  }.
  
  Global Instance ℐ : payment_channel.CryptoHash.Trait Self := {
    payment_channel.CryptoHash.hash := hash;
  }.
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256_t.
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256_t.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128_t.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128_t.
  Definition Self : Set := payment_channel.Blake2x128.t.
  
  (*
      fn hash(input: &[u8], output: &mut <Self as HashOutput>::Type) {
          unimplemented!()
      }
  *)
  Parameter hash :
      (ref (slice u8.t)) ->
        (mut_ref
          (payment_channel.HashOutput.Type_
            (Self := Self)
            (Trait := ltac:(refine _))))
        ->
        M unit.
  
  Global Instance AssociatedFunction_hash :
    Notations.DoubleColon Self "hash" := {
    Notations.double_colon := hash;
  }.
  
  Global Instance ℐ : payment_channel.CryptoHash.Trait Self := {
    payment_channel.CryptoHash.hash := hash;
  }.
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128_t.
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128_t.

Module  Impl_payment_channel_PaymentChannel_t.
Section Impl_payment_channel_PaymentChannel_t.
  Definition Self : Set := payment_channel.PaymentChannel.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Parameter init_env : M payment_channel.Env.t.
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon Self "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Parameter env : (ref Self) -> M payment_channel.Env.t.
  
  Global Instance AssociatedFunction_env : Notations.DoubleColon Self "env" := {
    Notations.double_colon := env;
  }.
  
  (*
      fn is_signature_valid(&self, amount: Balance, signature: [u8; 65]) -> bool {
          let encodable = (self.env().account_id(), amount);
          let mut message = <Sha2x256 as HashOutput>::Type::default();
          hash_encoded::<Sha2x256, _>(&encodable, &mut message);
  
          let mut pub_key = [0; 33];
          ecdsa_recover(&signature, &message, &mut pub_key)
              .unwrap_or_else(|err| panic!("recover failed: {err:?}"));
          let mut signature_account_id = [0; 32];
          <Blake2x256 as CryptoHash>::hash(&pub_key, &mut signature_account_id);
  
          self.recipient == signature_account_id.into()
      }
  *)
  Parameter is_signature_valid :
      (ref Self) -> ltac:(payment_channel.Balance) -> (array u8.t) -> M bool.t.
  
  Global Instance AssociatedFunction_is_signature_valid :
    Notations.DoubleColon Self "is_signature_valid" := {
    Notations.double_colon := is_signature_valid;
  }.
  
  (*
      pub fn new(recipient: AccountId, close_duration: Timestamp) -> Self {
          Self {
              sender: Self::init_env().caller(),
              recipient,
              expiration: None,
              withdrawn: 0,
              close_duration,
          }
      }
  *)
  Parameter new :
      payment_channel.AccountId.t -> ltac:(payment_channel.Timestamp) -> M Self.
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      fn close_inner(&mut self, amount: Balance, signature: [u8; 65]) -> Result<()> {
          if self.env().caller() != self.recipient {
              return Err(Error::CallerIsNotRecipient);
          }
  
          if amount < self.withdrawn {
              return Err(Error::AmountIsLessThanWithdrawn);
          }
  
          // Signature validation
          if !self.is_signature_valid(amount, signature) {
              return Err(Error::InvalidSignature);
          }
  
          self.env()
              .transfer(self.recipient, amount - self.withdrawn)
              .map_err(|_| Error::TransferFailed)?;
  
          Ok(())
      }
  *)
  Parameter close_inner :
      (mut_ref Self) ->
        ltac:(payment_channel.Balance) ->
        (array u8.t) ->
        M ltac:(payment_channel.Result unit).
  
  Global Instance AssociatedFunction_close_inner :
    Notations.DoubleColon Self "close_inner" := {
    Notations.double_colon := close_inner;
  }.
  
  (*
      pub fn close(&mut self, amount: Balance, signature: [u8; 65]) -> Result<()> {
          self.close_inner(amount, signature)?;
          self.env().terminate_contract(self.sender);
  
          Ok(())
      }
  *)
  Parameter close :
      (mut_ref Self) ->
        ltac:(payment_channel.Balance) ->
        (array u8.t) ->
        M ltac:(payment_channel.Result unit).
  
  Global Instance AssociatedFunction_close :
    Notations.DoubleColon Self "close" := {
    Notations.double_colon := close;
  }.
  
  (*
      pub fn start_sender_close(&mut self) -> Result<()> {
          if self.env().caller() != self.sender {
              return Err(Error::CallerIsNotSender);
          }
  
          let now = self.env().block_timestamp();
          let expiration = now + self.close_duration;
  
          self.env()
              .emit_event(Event::SenderCloseStarted(SenderCloseStarted {
                  expiration,
                  close_duration: self.close_duration,
              }));
  
          self.expiration = Some(expiration);
  
          Ok(())
      }
  *)
  Parameter start_sender_close :
      (mut_ref Self) -> M ltac:(payment_channel.Result unit).
  
  Global Instance AssociatedFunction_start_sender_close :
    Notations.DoubleColon Self "start_sender_close" := {
    Notations.double_colon := start_sender_close;
  }.
  
  (*
      pub fn claim_timeout(&mut self) -> Result<()> {
          match self.expiration {
              Some(expiration) => {
                  // expiration is set. Check if it's reached and if so, release the
                  // funds and terminate the contract.
                  let now = self.env().block_timestamp();
                  if now < expiration {
                      return Err(Error::NotYetExpired);
                  }
  
                  self.env().terminate_contract(self.sender);
  
                  Ok(())
              }
  
              None => Err(Error::NotYetExpired),
          }
      }
  *)
  Parameter claim_timeout :
      (mut_ref Self) -> M ltac:(payment_channel.Result unit).
  
  Global Instance AssociatedFunction_claim_timeout :
    Notations.DoubleColon Self "claim_timeout" := {
    Notations.double_colon := claim_timeout;
  }.
  
  (*
      pub fn withdraw(&mut self, amount: Balance, signature: [u8; 65]) -> Result<()> {
          if self.env().caller() != self.recipient {
              return Err(Error::CallerIsNotRecipient);
          }
  
          // Signature validation
          if !self.is_signature_valid(amount, signature) {
              return Err(Error::InvalidSignature);
          }
  
          // Make sure there's something to withdraw (guards against underflow)
          if amount < self.withdrawn {
              return Err(Error::AmountIsLessThanWithdrawn);
          }
  
          let amount_to_withdraw = amount - self.withdrawn;
          self.withdrawn += amount_to_withdraw;
  
          self.env()
              .transfer(self.recipient, amount_to_withdraw)
              .map_err(|_| Error::TransferFailed)?;
  
          Ok(())
      }
  *)
  Parameter withdraw :
      (mut_ref Self) ->
        ltac:(payment_channel.Balance) ->
        (array u8.t) ->
        M ltac:(payment_channel.Result unit).
  
  Global Instance AssociatedFunction_withdraw :
    Notations.DoubleColon Self "withdraw" := {
    Notations.double_colon := withdraw;
  }.
  
  (*
      pub fn get_sender(&self) -> AccountId {
          self.sender
      }
  *)
  Parameter get_sender : (ref Self) -> M payment_channel.AccountId.t.
  
  Global Instance AssociatedFunction_get_sender :
    Notations.DoubleColon Self "get_sender" := {
    Notations.double_colon := get_sender;
  }.
  
  (*
      pub fn get_recipient(&self) -> AccountId {
          self.recipient
      }
  *)
  Parameter get_recipient : (ref Self) -> M payment_channel.AccountId.t.
  
  Global Instance AssociatedFunction_get_recipient :
    Notations.DoubleColon Self "get_recipient" := {
    Notations.double_colon := get_recipient;
  }.
  
  (*
      pub fn get_expiration(&self) -> Option<Timestamp> {
          self.expiration
      }
  *)
  Parameter get_expiration :
      (ref Self) -> M (core.option.Option.t ltac:(payment_channel.Timestamp)).
  
  Global Instance AssociatedFunction_get_expiration :
    Notations.DoubleColon Self "get_expiration" := {
    Notations.double_colon := get_expiration;
  }.
  
  (*
      pub fn get_withdrawn(&self) -> Balance {
          self.withdrawn
      }
  *)
  Parameter get_withdrawn : (ref Self) -> M ltac:(payment_channel.Balance).
  
  Global Instance AssociatedFunction_get_withdrawn :
    Notations.DoubleColon Self "get_withdrawn" := {
    Notations.double_colon := get_withdrawn;
  }.
  
  (*
      pub fn get_close_duration(&self) -> Timestamp {
          self.close_duration
      }
  *)
  Parameter get_close_duration :
      (ref Self) -> M ltac:(payment_channel.Timestamp).
  
  Global Instance AssociatedFunction_get_close_duration :
    Notations.DoubleColon Self "get_close_duration" := {
    Notations.double_colon := get_close_duration;
  }.
  
  (*
      pub fn get_balance(&self) -> Balance {
          self.env().balance()
      }
  *)
  Parameter get_balance : (ref Self) -> M ltac:(payment_channel.Balance).
  
  Global Instance AssociatedFunction_get_balance :
    Notations.DoubleColon Self "get_balance" := {
    Notations.double_colon := get_balance;
  }.
End Impl_payment_channel_PaymentChannel_t.
End Impl_payment_channel_PaymentChannel_t.
