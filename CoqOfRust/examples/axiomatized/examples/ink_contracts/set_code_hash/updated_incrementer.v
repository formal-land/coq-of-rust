(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_updated_incrementer_AccountId_t.
Section Impl_core_default_Default_for_updated_incrementer_AccountId_t.
  Definition Self : Set := updated_incrementer.AccountId.t.
  
  (*
  Default
  *)
  Parameter default : M updated_incrementer.AccountId.t.
  
  Axiom default_is_impl : impl Self "default" = default.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_updated_incrementer_AccountId_t.
End Impl_core_default_Default_for_updated_incrementer_AccountId_t.

Module  Impl_core_clone_Clone_for_updated_incrementer_AccountId_t.
Section Impl_core_clone_Clone_for_updated_incrementer_AccountId_t.
  Definition Self : Set := updated_incrementer.AccountId.t.
  
  (*
  Clone
  *)
  Parameter clone : (ref Self) -> M updated_incrementer.AccountId.t.
  
  Axiom clone_is_impl : impl Self "clone" = clone.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_updated_incrementer_AccountId_t.
End Impl_core_clone_Clone_for_updated_incrementer_AccountId_t.

Module  Impl_core_marker_Copy_for_updated_incrementer_AccountId_t.
Section Impl_core_marker_Copy_for_updated_incrementer_AccountId_t.
  Definition Self : Set := updated_incrementer.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_updated_incrementer_AccountId_t.
End Impl_core_marker_Copy_for_updated_incrementer_AccountId_t.

Ltac Hash := exact (array u8.t).

Module Error.
  Inductive t : Set :=
  .
End Error.

Module  Env.
Section Env.
  Record t : Set := {
    caller : updated_incrementer.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module  Impl_updated_incrementer_Env_t.
Section Impl_updated_incrementer_Env_t.
  Definition Self : Set := updated_incrementer.Env.t.
  
  (*
      fn set_code_hash<E>(&self, code_hash: &E) -> Result<(), Error> {
          unimplemented!()
      }
  *)
  Parameter set_code_hash :
      forall {E : Set},
      (ref Self) ->
        (ref E) ->
        M (core.result.Result.t unit updated_incrementer.Error.t).
  
  Axiom set_code_hash_is_impl :
      forall {E : Set},
      impl Self "set_code_hash" = set_code_hash (E := E).
End Impl_updated_incrementer_Env_t.
End Impl_updated_incrementer_Env_t.

Module  Incrementer.
Section Incrementer.
  Record t : Set := {
    count : u32.t;
  }.
  
  Definition Get_count :=
    Ref.map (fun α => Some α.(count)) (fun β α => Some (α <| count := β |>)).
End Incrementer.
End Incrementer.

Module  Impl_updated_incrementer_Incrementer_t.
Section Impl_updated_incrementer_Incrementer_t.
  Definition Self : Set := updated_incrementer.Incrementer.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Parameter init_env : M updated_incrementer.Env.t.
  
  Axiom init_env_is_impl : impl Self "init_env" = init_env.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Parameter env : (ref Self) -> M updated_incrementer.Env.t.
  
  Axiom env_is_impl : impl Self "env" = env.
  
  (*
      pub fn new() -> Self {
          unreachable!("Constructors are not called when upgrading using `set_code_hash`.")
      }
  *)
  Parameter new : M Self.
  
  Axiom new_is_impl : impl Self "new" = new.
  
  (*
      pub fn inc(&mut self) {
          self.count += 4;
          println!(
              "The new count is {}, it was modified using the updated `new_incrementer` code.",
              self.count
          );
      }
  *)
  Parameter inc : (mut_ref Self) -> M unit.
  
  Axiom inc_is_impl : impl Self "inc" = inc.
  
  (*
      pub fn get(&self) -> u32 {
          self.count
      }
  *)
  Parameter get : (ref Self) -> M u32.t.
  
  Axiom get_is_impl : impl Self "get" = get.
  
  (*
      pub fn set_code(&mut self, code_hash: Hash) {
          self.env().set_code_hash(&code_hash).unwrap_or_else(|err| {
              panic!("Failed to `set_code_hash` to {code_hash:?} due to {err:?}")
          });
          println!("Switched code hash to {:?}.", code_hash);
      }
  *)
  Parameter set_code :
      (mut_ref Self) -> ltac:(updated_incrementer.Hash) -> M unit.
  
  Axiom set_code_is_impl : impl Self "set_code" = set_code.
End Impl_updated_incrementer_Incrementer_t.
End Impl_updated_incrementer_Incrementer_t.
