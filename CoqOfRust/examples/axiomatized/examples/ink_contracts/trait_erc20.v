(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Mapping.
Section Mapping.
  Context (K V : Set).
  
  Record t : Set := {
    _key : core.marker.PhantomData.t K;
    _value : core.marker.PhantomData.t V;
  }.
  
  Definition Get__key :=
    Ref.map (fun α => Some α.(_key)) (fun β α => Some (α <| _key := β |>)).
  Definition Get__value :=
    Ref.map (fun α => Some α.(_value)) (fun β α => Some (α <| _value := β |>)).
End Mapping.
End Mapping.

Module  Impl_core_default_Default_for_trait_erc20_Mapping_t_K_V.
Section Impl_core_default_Default_for_trait_erc20_Mapping_t_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := trait_erc20.Mapping.t K V.
  
  (*
  Default
  *)
  Parameter default : M (trait_erc20.Mapping.t K V).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_trait_erc20_Mapping_t_K_V.
End Impl_core_default_Default_for_trait_erc20_Mapping_t_K_V.

Module  Impl_trait_erc20_Mapping_t_K_V.
Section Impl_trait_erc20_Mapping_t_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := trait_erc20.Mapping.t K V.
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Parameter get : (ref Self) -> (ref K) -> M (core.option.Option.t V).
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
  
  (*
      fn insert(&mut self, _key: K, _value: V) {
          unimplemented!()
      }
  *)
  Parameter insert : (mut_ref Self) -> K -> V -> M unit.
  
  Global Instance AssociatedFunction_insert :
    Notations.DoubleColon Self "insert" := {
    Notations.double_colon := insert;
  }.
End Impl_trait_erc20_Mapping_t_K_V.
End Impl_trait_erc20_Mapping_t_K_V.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_trait_erc20_AccountId_t.
Section Impl_core_default_Default_for_trait_erc20_AccountId_t.
  Definition Self : Set := trait_erc20.AccountId.t.
  
  (*
  Default
  *)
  Parameter default : M trait_erc20.AccountId.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_trait_erc20_AccountId_t.
End Impl_core_default_Default_for_trait_erc20_AccountId_t.

Module  Impl_core_clone_Clone_for_trait_erc20_AccountId_t.
Section Impl_core_clone_Clone_for_trait_erc20_AccountId_t.
  Definition Self : Set := trait_erc20.AccountId.t.
  
  (*
  Clone
  *)
  Parameter clone : (ref Self) -> M trait_erc20.AccountId.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_trait_erc20_AccountId_t.
End Impl_core_clone_Clone_for_trait_erc20_AccountId_t.

Module  Impl_core_marker_Copy_for_trait_erc20_AccountId_t.
Section Impl_core_marker_Copy_for_trait_erc20_AccountId_t.
  Definition Self : Set := trait_erc20.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_trait_erc20_AccountId_t.
End Impl_core_marker_Copy_for_trait_erc20_AccountId_t.

Ltac Balance := exact u128.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : trait_erc20.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module Error.
  Inductive t : Set :=
  | InsufficientBalance
  | InsufficientAllowance.
End Error.

Module  Impl_core_fmt_Debug_for_trait_erc20_Error_t.
Section Impl_core_fmt_Debug_for_trait_erc20_Error_t.
  Definition Self : Set := trait_erc20.Error.t.
  
  (*
  Debug
  *)
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter.t) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_trait_erc20_Error_t.
End Impl_core_fmt_Debug_for_trait_erc20_Error_t.

Module  Impl_core_marker_StructuralPartialEq_for_trait_erc20_Error_t.
Section Impl_core_marker_StructuralPartialEq_for_trait_erc20_Error_t.
  Definition Self : Set := trait_erc20.Error.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_trait_erc20_Error_t.
End Impl_core_marker_StructuralPartialEq_for_trait_erc20_Error_t.

Module  Impl_core_cmp_PartialEq_for_trait_erc20_Error_t.
Section Impl_core_cmp_PartialEq_for_trait_erc20_Error_t.
  Definition Self : Set := trait_erc20.Error.t.
  
  (*
  PartialEq
  *)
  Parameter eq : (ref Self) -> (ref trait_erc20.Error.t) -> M bool.t.
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_trait_erc20_Error_t.
End Impl_core_cmp_PartialEq_for_trait_erc20_Error_t.

Module  Impl_core_marker_StructuralEq_for_trait_erc20_Error_t.
Section Impl_core_marker_StructuralEq_for_trait_erc20_Error_t.
  Definition Self : Set := trait_erc20.Error.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_trait_erc20_Error_t.
End Impl_core_marker_StructuralEq_for_trait_erc20_Error_t.

Module  Impl_core_cmp_Eq_for_trait_erc20_Error_t.
Section Impl_core_cmp_Eq_for_trait_erc20_Error_t.
  Definition Self : Set := trait_erc20.Error.t.
  
  (*
  Eq
  *)
  Parameter assert_receiver_is_total_eq : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_trait_erc20_Error_t.
End Impl_core_cmp_Eq_for_trait_erc20_Error_t.

Ltac Result T := exact (core.result.Result.t T trait_erc20.Error.t).

Module  BaseErc20.
Section BaseErc20.
  Class Trait (Self : Set) : Type := {
    total_supply : (ref Self) -> M ltac:(trait_erc20.Balance);
    balance_of :
      (ref Self) -> trait_erc20.AccountId.t -> M ltac:(trait_erc20.Balance);
    allowance :
      (ref Self) ->
        trait_erc20.AccountId.t ->
        trait_erc20.AccountId.t ->
        M ltac:(trait_erc20.Balance);
    transfer :
      (mut_ref Self) ->
        trait_erc20.AccountId.t ->
        ltac:(trait_erc20.Balance) ->
        M ltac:(trait_erc20.Result unit);
    approve :
      (mut_ref Self) ->
        trait_erc20.AccountId.t ->
        ltac:(trait_erc20.Balance) ->
        M ltac:(trait_erc20.Result unit);
    transfer_from :
      (mut_ref Self) ->
        trait_erc20.AccountId.t ->
        trait_erc20.AccountId.t ->
        ltac:(trait_erc20.Balance) ->
        M ltac:(trait_erc20.Result unit);
  }.
  
End BaseErc20.
End BaseErc20.

Module  Erc20.
Section Erc20.
  Record t : Set := {
    total_supply : ltac:(trait_erc20.Balance);
    balances :
      trait_erc20.Mapping.t trait_erc20.AccountId.t ltac:(trait_erc20.Balance);
    allowances :
      trait_erc20.Mapping.t
        (trait_erc20.AccountId.t * trait_erc20.AccountId.t)
        ltac:(trait_erc20.Balance);
  }.
  
  Definition Get_total_supply :=
    Ref.map
      (fun α => Some α.(total_supply))
      (fun β α => Some (α <| total_supply := β |>)).
  Definition Get_balances :=
    Ref.map
      (fun α => Some α.(balances))
      (fun β α => Some (α <| balances := β |>)).
  Definition Get_allowances :=
    Ref.map
      (fun α => Some α.(allowances))
      (fun β α => Some (α <| allowances := β |>)).
End Erc20.
End Erc20.

Module  Impl_core_default_Default_for_trait_erc20_Erc20_t.
Section Impl_core_default_Default_for_trait_erc20_Erc20_t.
  Definition Self : Set := trait_erc20.Erc20.t.
  
  (*
  Default
  *)
  Parameter default : M trait_erc20.Erc20.t.
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_trait_erc20_Erc20_t.
End Impl_core_default_Default_for_trait_erc20_Erc20_t.

Module  Transfer.
Section Transfer.
  Record t : Set := {
    from : core.option.Option.t trait_erc20.AccountId.t;
    to : core.option.Option.t trait_erc20.AccountId.t;
    value : ltac:(trait_erc20.Balance);
  }.
  
  Definition Get_from :=
    Ref.map (fun α => Some α.(from)) (fun β α => Some (α <| from := β |>)).
  Definition Get_to :=
    Ref.map (fun α => Some α.(to)) (fun β α => Some (α <| to := β |>)).
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End Transfer.
End Transfer.

Module  Approval.
Section Approval.
  Record t : Set := {
    owner : trait_erc20.AccountId.t;
    spender : trait_erc20.AccountId.t;
    value : ltac:(trait_erc20.Balance);
  }.
  
  Definition Get_owner :=
    Ref.map (fun α => Some α.(owner)) (fun β α => Some (α <| owner := β |>)).
  Definition Get_spender :=
    Ref.map
      (fun α => Some α.(spender))
      (fun β α => Some (α <| spender := β |>)).
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End Approval.
End Approval.

Module Event.
  Inductive t : Set :=
  | Transfer (_ : trait_erc20.Transfer.t)
  | Approval (_ : trait_erc20.Approval.t).
  
  Definition Get_Transfer_0 :=
    Ref.map
      (fun α => match α with | Transfer α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | Transfer _ => Some (Transfer β) | _ => None end).
  
  Definition Get_Approval_0 :=
    Ref.map
      (fun α => match α with | Approval α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | Approval _ => Some (Approval β) | _ => None end).
End Event.

Module  Impl_trait_erc20_Env_t.
Section Impl_trait_erc20_Env_t.
  Definition Self : Set := trait_erc20.Env.t.
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Parameter caller : (ref Self) -> M trait_erc20.AccountId.t.
  
  Global Instance AssociatedFunction_caller :
    Notations.DoubleColon Self "caller" := {
    Notations.double_colon := caller;
  }.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Parameter emit_event : (ref Self) -> trait_erc20.Event.t -> M unit.
  
  Global Instance AssociatedFunction_emit_event :
    Notations.DoubleColon Self "emit_event" := {
    Notations.double_colon := emit_event;
  }.
End Impl_trait_erc20_Env_t.
End Impl_trait_erc20_Env_t.

Module  Impl_trait_erc20_Erc20_t.
Section Impl_trait_erc20_Erc20_t.
  Definition Self : Set := trait_erc20.Erc20.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Parameter init_env : M trait_erc20.Env.t.
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon Self "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Parameter env : (ref Self) -> M trait_erc20.Env.t.
  
  Global Instance AssociatedFunction_env : Notations.DoubleColon Self "env" := {
    Notations.double_colon := env;
  }.
  
  (*
      pub fn new(total_supply: Balance) -> Self {
          let mut balances = Mapping::default();
          let caller = Self::init_env().caller();
          balances.insert(caller, total_supply);
          Self::init_env().emit_event(Event::Transfer(Transfer {
              from: None,
              to: Some(caller),
              value: total_supply,
          }));
          Self {
              total_supply,
              balances,
              allowances: Default::default(),
          }
      }
  *)
  Parameter new : ltac:(trait_erc20.Balance) -> M Self.
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      fn balance_of_impl(&self, owner: &AccountId) -> Balance {
          self.balances.get(owner).unwrap_or_default()
      }
  *)
  Parameter balance_of_impl :
      (ref Self) ->
        (ref trait_erc20.AccountId.t) ->
        M ltac:(trait_erc20.Balance).
  
  Global Instance AssociatedFunction_balance_of_impl :
    Notations.DoubleColon Self "balance_of_impl" := {
    Notations.double_colon := balance_of_impl;
  }.
  
  (*
      fn allowance_impl(&self, owner: &AccountId, spender: &AccountId) -> Balance {
          self.allowances.get(&( *owner, *spender)).unwrap_or_default()
      }
  *)
  Parameter allowance_impl :
      (ref Self) ->
        (ref trait_erc20.AccountId.t) ->
        (ref trait_erc20.AccountId.t) ->
        M ltac:(trait_erc20.Balance).
  
  Global Instance AssociatedFunction_allowance_impl :
    Notations.DoubleColon Self "allowance_impl" := {
    Notations.double_colon := allowance_impl;
  }.
  
  (*
      fn transfer_from_to(&mut self, from: &AccountId, to: &AccountId, value: Balance) -> Result<()> {
          let from_balance = self.balance_of_impl(from);
          if from_balance < value {
              return Err(Error::InsufficientBalance);
          }
  
          self.balances.insert( *from, from_balance - value);
          let to_balance = self.balance_of_impl(to);
          self.balances.insert( *to, to_balance + value);
          self.env().emit_event(Event::Transfer(Transfer {
              from: Some( *from),
              to: Some( *to),
              value,
          }));
          Ok(())
      }
  *)
  Parameter transfer_from_to :
      (mut_ref Self) ->
        (ref trait_erc20.AccountId.t) ->
        (ref trait_erc20.AccountId.t) ->
        ltac:(trait_erc20.Balance) ->
        M ltac:(trait_erc20.Result unit).
  
  Global Instance AssociatedFunction_transfer_from_to :
    Notations.DoubleColon Self "transfer_from_to" := {
    Notations.double_colon := transfer_from_to;
  }.
End Impl_trait_erc20_Erc20_t.
End Impl_trait_erc20_Erc20_t.

Module  Impl_trait_erc20_BaseErc20_for_trait_erc20_Erc20_t.
Section Impl_trait_erc20_BaseErc20_for_trait_erc20_Erc20_t.
  Definition Self : Set := trait_erc20.Erc20.t.
  
  (*
      fn total_supply(&self) -> Balance {
          self.total_supply
      }
  *)
  Parameter total_supply : (ref Self) -> M ltac:(trait_erc20.Balance).
  
  Global Instance AssociatedFunction_total_supply :
    Notations.DoubleColon Self "total_supply" := {
    Notations.double_colon := total_supply;
  }.
  
  (*
      fn balance_of(&self, owner: AccountId) -> Balance {
          self.balance_of_impl(&owner)
      }
  *)
  Parameter balance_of :
      (ref Self) -> trait_erc20.AccountId.t -> M ltac:(trait_erc20.Balance).
  
  Global Instance AssociatedFunction_balance_of :
    Notations.DoubleColon Self "balance_of" := {
    Notations.double_colon := balance_of;
  }.
  
  (*
      fn allowance(&self, owner: AccountId, spender: AccountId) -> Balance {
          self.allowance_impl(&owner, &spender)
      }
  *)
  Parameter allowance :
      (ref Self) ->
        trait_erc20.AccountId.t ->
        trait_erc20.AccountId.t ->
        M ltac:(trait_erc20.Balance).
  
  Global Instance AssociatedFunction_allowance :
    Notations.DoubleColon Self "allowance" := {
    Notations.double_colon := allowance;
  }.
  
  (*
      fn transfer(&mut self, to: AccountId, value: Balance) -> Result<()> {
          let from = self.env().caller();
          self.transfer_from_to(&from, &to, value)
      }
  *)
  Parameter transfer :
      (mut_ref Self) ->
        trait_erc20.AccountId.t ->
        ltac:(trait_erc20.Balance) ->
        M ltac:(trait_erc20.Result unit).
  
  Global Instance AssociatedFunction_transfer :
    Notations.DoubleColon Self "transfer" := {
    Notations.double_colon := transfer;
  }.
  
  (*
      fn approve(&mut self, spender: AccountId, value: Balance) -> Result<()> {
          let owner = self.env().caller();
          self.allowances.insert((owner, spender), value);
          self.env().emit_event(Event::Approval(Approval {
              owner,
              spender,
              value,
          }));
          Ok(())
      }
  *)
  Parameter approve :
      (mut_ref Self) ->
        trait_erc20.AccountId.t ->
        ltac:(trait_erc20.Balance) ->
        M ltac:(trait_erc20.Result unit).
  
  Global Instance AssociatedFunction_approve :
    Notations.DoubleColon Self "approve" := {
    Notations.double_colon := approve;
  }.
  
  (*
      fn transfer_from(&mut self, from: AccountId, to: AccountId, value: Balance) -> Result<()> {
          let caller = self.env().caller();
          let allowance = self.allowance_impl(&from, &caller);
          if allowance < value {
              return Err(Error::InsufficientAllowance);
          }
          self.transfer_from_to(&from, &to, value)?;
          self.allowances.insert((from, caller), allowance - value);
          Ok(())
      }
  *)
  Parameter transfer_from :
      (mut_ref Self) ->
        trait_erc20.AccountId.t ->
        trait_erc20.AccountId.t ->
        ltac:(trait_erc20.Balance) ->
        M ltac:(trait_erc20.Result unit).
  
  Global Instance AssociatedFunction_transfer_from :
    Notations.DoubleColon Self "transfer_from" := {
    Notations.double_colon := transfer_from;
  }.
  
  Global Instance ℐ : trait_erc20.BaseErc20.Trait Self := {
    trait_erc20.BaseErc20.total_supply := total_supply;
    trait_erc20.BaseErc20.balance_of := balance_of;
    trait_erc20.BaseErc20.allowance := allowance;
    trait_erc20.BaseErc20.transfer := transfer;
    trait_erc20.BaseErc20.approve := approve;
    trait_erc20.BaseErc20.transfer_from := transfer_from;
  }.
End Impl_trait_erc20_BaseErc20_for_trait_erc20_Erc20_t.
End Impl_trait_erc20_BaseErc20_for_trait_erc20_Erc20_t.
