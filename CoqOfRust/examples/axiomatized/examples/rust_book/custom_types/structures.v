(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructRecord
  {
    name := "Person";
    const_params := [];
    ty_params := [];
    fields := [ ("name", Ty.path "alloc::string::String"); ("age", Ty.path "u8") ];
  } *)

Module Impl_core_fmt_Debug_for_structures_Person.
  Definition Self : Ty.t := Ty.path "structures::Person".
  
  Parameter fmt : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_structures_Person.

(* StructTuple
  {
    name := "Unit";
    const_params := [];
    ty_params := [];
    fields := [];
  } *)

(* StructTuple
  {
    name := "Pair";
    const_params := [];
    ty_params := [];
    fields := [ Ty.path "i32"; Ty.path "f32" ];
  } *)

(* StructRecord
  {
    name := "Point";
    const_params := [];
    ty_params := [];
    fields := [ ("x", Ty.path "f32"); ("y", Ty.path "f32") ];
  } *)

(* StructRecord
  {
    name := "Rectangle";
    const_params := [];
    ty_params := [];
    fields :=
      [ ("top_left", Ty.path "structures::Point"); ("bottom_right", Ty.path "structures::Point") ];
  } *)

Parameter main : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_main : M.IsFunction "structures::main" main.
Smpl Add apply Function_main : is_function.
