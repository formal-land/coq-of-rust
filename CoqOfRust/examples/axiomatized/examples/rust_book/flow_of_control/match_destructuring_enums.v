(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
Enum Color
{
  const_params := [];
  ty_params := [];
  variants :=
    [
      {
        name := "Red";
        item := StructTuple [];
      };
      {
        name := "Blue";
        item := StructTuple [];
      };
      {
        name := "Green";
        item := StructTuple [];
      };
      {
        name := "RGB";
        item := StructTuple [ Ty.path "u32"; Ty.path "u32"; Ty.path "u32" ];
      };
      {
        name := "HSV";
        item := StructTuple [ Ty.path "u32"; Ty.path "u32"; Ty.path "u32" ];
      };
      {
        name := "HSL";
        item := StructTuple [ Ty.path "u32"; Ty.path "u32"; Ty.path "u32" ];
      };
      {
        name := "CMY";
        item := StructTuple [ Ty.path "u32"; Ty.path "u32"; Ty.path "u32" ];
      };
      {
        name := "CMYK";
        item := StructTuple [ Ty.path "u32"; Ty.path "u32"; Ty.path "u32"; Ty.path "u32" ];
      }
    ];
}
*)

Axiom IsDiscriminant_Color_Red : M.IsDiscriminant "match_destructuring_enums::Color::Red" 0.
Axiom IsDiscriminant_Color_Blue : M.IsDiscriminant "match_destructuring_enums::Color::Blue" 1.
Axiom IsDiscriminant_Color_Green : M.IsDiscriminant "match_destructuring_enums::Color::Green" 2.
Axiom IsDiscriminant_Color_RGB : M.IsDiscriminant "match_destructuring_enums::Color::RGB" 3.
Axiom IsDiscriminant_Color_HSV : M.IsDiscriminant "match_destructuring_enums::Color::HSV" 4.
Axiom IsDiscriminant_Color_HSL : M.IsDiscriminant "match_destructuring_enums::Color::HSL" 5.
Axiom IsDiscriminant_Color_CMY : M.IsDiscriminant "match_destructuring_enums::Color::CMY" 6.
Axiom IsDiscriminant_Color_CMYK : M.IsDiscriminant "match_destructuring_enums::Color::CMYK" 7.

Parameter main : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_main : M.IsFunction "match_destructuring_enums::main" main.
Smpl Add apply Function_main : is_function.
