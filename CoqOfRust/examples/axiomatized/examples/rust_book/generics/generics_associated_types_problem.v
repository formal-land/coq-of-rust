(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructTuple
  {
    name := "Container";
    const_params := [];
    ty_params := [];
    fields := [ Ty.path "i32"; Ty.path "i32" ];
  } *)

(* Trait *)
(* Empty module 'Contains' *)

Module Impl_generics_associated_types_problem_Contains_i32_i32_for_generics_associated_types_problem_Container.
  Definition Self : Ty.t := Ty.path "generics_associated_types_problem::Container".
  
  Parameter contains : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Parameter first : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Parameter last : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "generics_associated_types_problem::Contains"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) [ Ty.path "i32"; Ty.path "i32" ]
      Self
      (* Instance *)
      [
        ("contains", InstanceField.Method contains);
        ("first", InstanceField.Method first);
        ("last", InstanceField.Method last)
      ].
End Impl_generics_associated_types_problem_Contains_i32_i32_for_generics_associated_types_problem_Container.

Parameter difference : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_difference : M.IsFunction "generics_associated_types_problem::difference" difference.
Smpl Add apply Function_difference : is_function.

Parameter main : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_main : M.IsFunction "generics_associated_types_problem::main" main.
Smpl Add apply Function_main : is_function.
