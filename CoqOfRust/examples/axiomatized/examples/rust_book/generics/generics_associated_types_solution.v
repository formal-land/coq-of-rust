(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructTuple
  {
    name := "Container";
    ty_params := [];
    fields := [ Ty.path "i32"; Ty.path "i32" ];
  } *)

(* Trait *)
(* Empty module 'Contains' *)

Module Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container.
  Definition Self : Ty.t := Ty.path "generics_associated_types_solution::Container".
  
  Definition _A : Ty.t := Ty.path "i32".
  
  Definition _B : Ty.t := Ty.path "i32".
  
  Parameter contains : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter first : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter last : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter a : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "generics_associated_types_solution::Contains"
      Self
      (* Trait polymorphic types *) []
      (* Instance *)
      [
        ("A", InstanceField.Ty _A);
        ("B", InstanceField.Ty _B);
        ("contains", InstanceField.Method contains);
        ("first", InstanceField.Method first);
        ("last", InstanceField.Method last);
        ("a", InstanceField.Method a)
      ].
End Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container.

Parameter difference : (list Ty.t) -> (list Value.t) -> M.

Axiom Function_difference :
  M.IsFunction "generics_associated_types_solution::difference" difference.

Parameter get_a : (list Ty.t) -> (list Value.t) -> M.

Axiom Function_get_a : M.IsFunction "generics_associated_types_solution::get_a" get_a.

Parameter main : (list Ty.t) -> (list Value.t) -> M.

Axiom Function_main : M.IsFunction "generics_associated_types_solution::main" main.
