(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Cardinal.
Section Cardinal.
  Inductive t : Set := Build.
End Cardinal.
End Cardinal.

Module  BlueJay.
Section BlueJay.
  Inductive t : Set := Build.
End BlueJay.
End BlueJay.

Module  Turkey.
Section Turkey.
  Inductive t : Set := Build.
End Turkey.
End Turkey.

Module  Red.
Section Red.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End Red.
End Red.

Module  Blue.
Section Blue.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End Blue.
End Blue.

Module  Impl_generics_bounds_test_case_empty_bounds_Red_for_generics_bounds_test_case_empty_bounds_Cardinal_t.
Section Impl_generics_bounds_test_case_empty_bounds_Red_for_generics_bounds_test_case_empty_bounds_Cardinal_t.
  Definition Self : Set := generics_bounds_test_case_empty_bounds.Cardinal.t.
  
  Global Instance ℐ : generics_bounds_test_case_empty_bounds.Red.Trait Self := {
  }.
End Impl_generics_bounds_test_case_empty_bounds_Red_for_generics_bounds_test_case_empty_bounds_Cardinal_t.
End Impl_generics_bounds_test_case_empty_bounds_Red_for_generics_bounds_test_case_empty_bounds_Cardinal_t.

Module  Impl_generics_bounds_test_case_empty_bounds_Blue_for_generics_bounds_test_case_empty_bounds_BlueJay_t.
Section Impl_generics_bounds_test_case_empty_bounds_Blue_for_generics_bounds_test_case_empty_bounds_BlueJay_t.
  Definition Self : Set := generics_bounds_test_case_empty_bounds.BlueJay.t.
  
  Global Instance ℐ :
    generics_bounds_test_case_empty_bounds.Blue.Trait Self := {
  }.
End Impl_generics_bounds_test_case_empty_bounds_Blue_for_generics_bounds_test_case_empty_bounds_BlueJay_t.
End Impl_generics_bounds_test_case_empty_bounds_Blue_for_generics_bounds_test_case_empty_bounds_BlueJay_t.

(*
fn red<T: Red>(_: &T) -> &'static str {
    "red"
}
*)
Parameter red : forall {T : Set}, (ref T) -> M (ref str.t).

(*
fn blue<T: Blue>(_: &T) -> &'static str {
    "blue"
}
*)
Parameter blue : forall {T : Set}, (ref T) -> M (ref str.t).

(*
fn main() {
    let cardinal = Cardinal;
    let blue_jay = BlueJay;
    let _turkey = Turkey;

    // `red()` won't work on a blue jay nor vice versa
    // because of the bounds.
    println!("A cardinal is {}", red(&cardinal));
    println!("A blue jay is {}", blue(&blue_jay));
    //println!("A turkey is {}", red(&_turkey));
    // ^ TODO: Try uncommenting this line.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M unit.
