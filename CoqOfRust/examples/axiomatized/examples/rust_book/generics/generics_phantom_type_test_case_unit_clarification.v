(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Inch.
  Inductive t : Set :=
  .
End Inch.

Module  Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Inch_t.
Section Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Inch_t.
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Inch.t.
  
  (*
  Debug
  *)
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter.t) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Inch_t.
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Inch_t.

Module  Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Inch_t.
Section Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Inch_t.
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Inch.t.
  
  (*
  Clone
  *)
  Parameter clone :
      (ref Self) -> M generics_phantom_type_test_case_unit_clarification.Inch.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Inch_t.
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Inch_t.

Module  Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Inch_t.
Section Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Inch_t.
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Inch.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Inch_t.
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Inch_t.

Module Mm.
  Inductive t : Set :=
  .
End Mm.

Module  Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Mm_t.
Section Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Mm_t.
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Mm.t.
  
  (*
  Debug
  *)
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter.t) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Mm_t.
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Mm_t.

Module  Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Mm_t.
Section Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Mm_t.
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Mm.t.
  
  (*
  Clone
  *)
  Parameter clone :
      (ref Self) -> M generics_phantom_type_test_case_unit_clarification.Mm.t.
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Mm_t.
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Mm_t.

Module  Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Mm_t.
Section Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Mm_t.
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Mm.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Mm_t.
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Mm_t.

Module  Length.
Section Length.
  Context {Unit : Set}.
  
  Record t : Set := {
    x0 : f64.t;
    x1 : core.marker.PhantomData.t Unit;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
  Definition Get_1 :=
    Ref.map (fun α => Some α.(x1)) (fun β α => Some (α <| x1 := β |>)).
End Length.
End Length.

Module  Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.
Section Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.
  Context {Unit : Set}.
  
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Length.t Unit.
  
  (*
  Debug
  *)
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter.t) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.

Module  Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.
Section Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.
  Context {Unit : Set}.
  
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Length.t Unit.
  
  (*
  Clone
  *)
  Parameter clone :
      (ref Self) ->
        M (generics_phantom_type_test_case_unit_clarification.Length.t Unit).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.

Module  Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.
Section Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.
  Context {Unit : Set}.
  
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Length.t Unit.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.

Module  Impl_core_ops_arith_Add_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.
Section Impl_core_ops_arith_Add_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.
  Context {Unit : Set}.
  
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Length.t Unit.
  
  (*
      type Output = Length<Unit>;
  *)
  Definition Output : Set :=
    generics_phantom_type_test_case_unit_clarification.Length.t Unit.
  
  (*
      fn add(self, rhs: Length<Unit>) -> Length<Unit> {
          // `+` calls the `Add` implementation for `f64`.
          Length(self.0 + rhs.0, PhantomData)
      }
  *)
  Parameter add :
      Self ->
        (generics_phantom_type_test_case_unit_clarification.Length.t Unit) ->
        M (generics_phantom_type_test_case_unit_clarification.Length.t Unit).
  
  Global Instance AssociatedFunction_add : Notations.DoubleColon Self "add" := {
    Notations.double_colon := add;
  }.
  
  Global Instance ℐ :
    core.ops.arith.Add.Trait Self
      (Rhs := core.ops.arith.Add.Default.Rhs Self) := {
    core.ops.arith.Add.Output := Output;
    core.ops.arith.Add.add := add;
  }.
End Impl_core_ops_arith_Add_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.
End Impl_core_ops_arith_Add_for_generics_phantom_type_test_case_unit_clarification_Length_t_Unit.

(*
fn main() {
    // Specifies `one_foot` to have phantom type parameter `Inch`.
    let one_foot: Length<Inch> = Length(12.0, PhantomData);
    // `one_meter` has phantom type parameter `Mm`.
    let one_meter: Length<Mm> = Length(1000.0, PhantomData);

    // `+` calls the `add()` method we implemented for `Length<Unit>`.
    //
    // Since `Length` implements `Copy`, `add()` does not consume
    // `one_foot` and `one_meter` but copies them into `self` and `rhs`.
    let two_feet = one_foot + one_foot;
    let two_meters = one_meter + one_meter;

    // Addition works.
    println!("one foot + one_foot = {:?} in", two_feet.0);
    println!("one meter + one_meter = {:?} mm", two_meters.0);

    // Nonsensical operations fail as they should:
    // Compile-time Error: type mismatch.
    //let one_feter = one_foot + one_meter;
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M unit.
