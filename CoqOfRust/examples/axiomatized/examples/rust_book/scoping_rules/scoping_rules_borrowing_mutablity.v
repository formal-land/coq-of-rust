(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructRecord
  {
    name := "Book";
    const_params := [];
    ty_params := [];
    fields :=
      [
        ("author", Ty.apply (Ty.path "&") [] [ Ty.path "str" ]);
        ("title", Ty.apply (Ty.path "&") [] [ Ty.path "str" ]);
        ("year", Ty.path "u32")
      ];
  } *)

Module Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.
  Definition Self : Ty.t := Ty.path "scoping_rules_borrowing_mutablity::Book".
  
  Parameter clone : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.

Module Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.
  Definition Self : Ty.t := Ty.path "scoping_rules_borrowing_mutablity::Book".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.

Parameter borrow_book : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_borrow_book :
  M.IsFunction "scoping_rules_borrowing_mutablity::borrow_book" borrow_book.
Smpl Add apply Function_borrow_book : is_function.

Parameter new_edition : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_new_edition :
  M.IsFunction "scoping_rules_borrowing_mutablity::new_edition" new_edition.
Smpl Add apply Function_new_edition : is_function.

Parameter main : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_main : M.IsFunction "scoping_rules_borrowing_mutablity::main" main.
Smpl Add apply Function_main : is_function.
