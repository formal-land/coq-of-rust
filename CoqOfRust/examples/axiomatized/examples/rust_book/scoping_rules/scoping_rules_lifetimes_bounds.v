(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructTuple
  {
    name := "Ref";
    const_params := [];
    ty_params := [ "T" ];
    fields := [ Ty.apply (Ty.path "&") [] [ T ] ];
  } *)

Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_scoping_rules_lifetimes_bounds_Ref_T.
  Definition Self (T : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "scoping_rules_lifetimes_bounds::Ref") [] [ T ].
  
  Parameter fmt : forall (T : Ty.t), (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    forall (T : Ty.t),
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      (Self T)
      (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_scoping_rules_lifetimes_bounds_Ref_T.

Parameter print : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_print : M.IsFunction "scoping_rules_lifetimes_bounds::print" print.
Smpl Add apply Function_print : is_function.

Parameter print_ref : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_print_ref : M.IsFunction "scoping_rules_lifetimes_bounds::print_ref" print_ref.
Smpl Add apply Function_print_ref : is_function.

Parameter main : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_main : M.IsFunction "scoping_rules_lifetimes_bounds::main" main.
Smpl Add apply Function_main : is_function.
