(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Parameter csqrtf : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_csqrtf : M.IsFunction "foreign_function_interface::csqrtf" csqrtf.
Smpl Add apply Function_csqrtf : is_function.

Parameter ccosf : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_ccosf : M.IsFunction "foreign_function_interface::ccosf" ccosf.
Smpl Add apply Function_ccosf : is_function.

Parameter cos : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_cos : M.IsFunction "foreign_function_interface::cos" cos.
Smpl Add apply Function_cos : is_function.

Parameter main : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_main : M.IsFunction "foreign_function_interface::main" main.
Smpl Add apply Function_main : is_function.

(* StructRecord
  {
    name := "Complex";
    const_params := [];
    ty_params := [];
    fields := [ ("re", Ty.path "f32"); ("im", Ty.path "f32") ];
  } *)

Module Impl_core_clone_Clone_for_foreign_function_interface_Complex.
  Definition Self : Ty.t := Ty.path "foreign_function_interface::Complex".
  
  Parameter clone : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_foreign_function_interface_Complex.

Module Impl_core_marker_Copy_for_foreign_function_interface_Complex.
  Definition Self : Ty.t := Ty.path "foreign_function_interface::Complex".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_Copy_for_foreign_function_interface_Complex.

Module Impl_core_fmt_Debug_for_foreign_function_interface_Complex.
  Definition Self : Ty.t := Ty.path "foreign_function_interface::Complex".
  
  Parameter fmt : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_foreign_function_interface_Complex.
