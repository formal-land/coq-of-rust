(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructRecord
  {
    name := "Fibonacci";
    const_params := [];
    ty_params := [];
    fields := [ ("curr", Ty.path "u32"); ("next", Ty.path "u32") ];
  } *)

Module Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci.
  Definition Self : Ty.t := Ty.path "iterators::Fibonacci".
  
  Definition _Item : Ty.t := Ty.path "u32".
  
  Parameter next : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::iter::traits::iterator::Iterator"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("Item", InstanceField.Ty _Item); ("next", InstanceField.Method next) ].
End Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci.

Parameter fibonacci : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_fibonacci : M.IsFunction "iterators::fibonacci" fibonacci.
Smpl Add apply Function_fibonacci : is_function.

Parameter main : (list Value.t) -> (list Ty.t) -> (list Value.t) -> M.

Axiom Function_main : M.IsFunction "iterators::main" main.
Smpl Add apply Function_main : is_function.
