(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructRecord
  {
    name := "Sheep";
    ty_params := [];
    fields := [ ("naked", Ty.path "bool"); ("name", Ty.apply (Ty.path "&") [ Ty.path "str" ]) ];
  } *)

(* Trait *)
Module Animal.
  Parameter talk : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom ProvidedMethod_talk : M.IsProvidedMethod "traits::Animal" "talk" talk.
End Animal.

Module Impl_traits_Sheep.
  Definition Self : Ty.t := Ty.path "traits::Sheep".
  
  Parameter is_naked : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_is_naked : M.IsAssociatedFunction Self "is_naked" is_naked.
  Parameter shear : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_shear : M.IsAssociatedFunction Self "shear" shear.
End Impl_traits_Sheep.

Module Impl_traits_Animal_for_traits_Sheep.
  Definition Self : Ty.t := Ty.path "traits::Sheep".
  
  Parameter new : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter name : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter noise : (list Ty.t) -> (list Value.t) -> M.
  
  Parameter talk : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "traits::Animal"
      Self
      (* Trait polymorphic types *) []
      (* Instance *)
      [
        ("new", InstanceField.Method new);
        ("name", InstanceField.Method name);
        ("noise", InstanceField.Method noise);
        ("talk", InstanceField.Method talk)
      ].
End Impl_traits_Animal_for_traits_Sheep.


Parameter main : (list Ty.t) -> (list Value.t) -> M.

Axiom Function_main : M.IsFunction "traits::main" main.
