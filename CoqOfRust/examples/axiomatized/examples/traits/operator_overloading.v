(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Foo.
Section Foo.
  Inductive t : Set := Build.
End Foo.
End Foo.

Module  Bar.
Section Bar.
  Inductive t : Set := Build.
End Bar.
End Bar.

Module  FooBar.
Section FooBar.
  Inductive t : Set := Build.
End FooBar.
End FooBar.

Module  Impl_core_fmt_Debug_for_operator_overloading_FooBar_t.
Section Impl_core_fmt_Debug_for_operator_overloading_FooBar_t.
  Definition Self : Set := operator_overloading.FooBar.t.
  
  (*
  Debug
  *)
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter.t) -> M ltac:(core.fmt.Result).
  
  Axiom fmt_is_impl : impl Self "fmt" = fmt.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_operator_overloading_FooBar_t.
End Impl_core_fmt_Debug_for_operator_overloading_FooBar_t.

Module  BarFoo.
Section BarFoo.
  Inductive t : Set := Build.
End BarFoo.
End BarFoo.

Module  Impl_core_fmt_Debug_for_operator_overloading_BarFoo_t.
Section Impl_core_fmt_Debug_for_operator_overloading_BarFoo_t.
  Definition Self : Set := operator_overloading.BarFoo.t.
  
  (*
  Debug
  *)
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter.t) -> M ltac:(core.fmt.Result).
  
  Axiom fmt_is_impl : impl Self "fmt" = fmt.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_operator_overloading_BarFoo_t.
End Impl_core_fmt_Debug_for_operator_overloading_BarFoo_t.

Module  Impl_core_ops_arith_Add_operator_overloading_Bar_t_for_operator_overloading_Foo_t.
Section Impl_core_ops_arith_Add_operator_overloading_Bar_t_for_operator_overloading_Foo_t.
  Definition Self : Set := operator_overloading.Foo.t.
  
  (*
      type Output = FooBar;
  *)
  Definition Output : Set := operator_overloading.FooBar.t.
  
  (*
      fn add(self, _rhs: Bar) -> FooBar {
          println!("> Foo.add(Bar) was called");
  
          FooBar
      }
  *)
  Parameter add :
      Self -> operator_overloading.Bar.t -> M operator_overloading.FooBar.t.
  
  Axiom add_is_impl : impl Self "add" = add.
  
  Global Instance ℐ :
    core.ops.arith.Add.Trait Self (Rhs := operator_overloading.Bar.t) := {
    core.ops.arith.Add.Output := Output;
    core.ops.arith.Add.add := add;
  }.
End Impl_core_ops_arith_Add_operator_overloading_Bar_t_for_operator_overloading_Foo_t.
End Impl_core_ops_arith_Add_operator_overloading_Bar_t_for_operator_overloading_Foo_t.

Module  Impl_core_ops_arith_Add_operator_overloading_Foo_t_for_operator_overloading_Bar_t.
Section Impl_core_ops_arith_Add_operator_overloading_Foo_t_for_operator_overloading_Bar_t.
  Definition Self : Set := operator_overloading.Bar.t.
  
  (*
      type Output = BarFoo;
  *)
  Definition Output : Set := operator_overloading.BarFoo.t.
  
  (*
      fn add(self, _rhs: Foo) -> BarFoo {
          println!("> Bar.add(Foo) was called");
  
          BarFoo
      }
  *)
  Parameter add :
      Self -> operator_overloading.Foo.t -> M operator_overloading.BarFoo.t.
  
  Axiom add_is_impl : impl Self "add" = add.
  
  Global Instance ℐ :
    core.ops.arith.Add.Trait Self (Rhs := operator_overloading.Foo.t) := {
    core.ops.arith.Add.Output := Output;
    core.ops.arith.Add.add := add;
  }.
End Impl_core_ops_arith_Add_operator_overloading_Foo_t_for_operator_overloading_Bar_t.
End Impl_core_ops_arith_Add_operator_overloading_Foo_t_for_operator_overloading_Bar_t.

(*
fn main() {
    println!("Foo + Bar = {:?}", Foo + Bar);
    println!("Bar + Foo = {:?}", Bar + Foo);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : M unit.
