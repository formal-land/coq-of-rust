(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn order(b1: bool, b2: bool, b3: bool, b4: bool) -> bool {
    b1 && b2 && b3 && b4
}
*)
Definition order (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ b1; b2; b3; b4 ] =>
    ltac:(M.monadic
      (let b1 := M.alloc (| b1 |) in
      let b2 := M.alloc (| b2 |) in
      let b3 := M.alloc (| b3 |) in
      let b4 := M.alloc (| b4 |) in
      LogicalOp.and (|
        LogicalOp.and (|
          LogicalOp.and (| M.read (| b1 |), ltac:(M.monadic (M.read (| b2 |))) |),
          ltac:(M.monadic (M.read (| b3 |)))
        |),
        ltac:(M.monadic (M.read (| b4 |)))
      |)))
  | _, _ => M.impossible
  end.

Axiom Function_order : M.IsFunction "if_let::order" order.

(*
Enum Container
{
  ty_params := [];
  variants :=
    [
      {
        name := "Left";
        item := StructTuple [ Ty.path "i32" ];
        discriminant := None;
      };
      {
        name := "Right";
        item := StructTuple [ Ty.path "i32" ];
        discriminant := None;
      };
      {
        name := "Empty";
        item := StructTuple [];
        discriminant := None;
      }
    ];
}
*)

(*
fn extract_value(container: Container) -> i32 {
    match container {
        Container::Left(value) | Container::Right(value) => value,
        Container::Empty => 0,
    }
}
*)
Definition extract_value (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ container ] =>
    ltac:(M.monadic
      (let container := M.alloc (| container |) in
      M.read (|
        M.match_operator (|
          container,
          [
            fun γ =>
              ltac:(M.monadic
                (M.find_or_pattern (|
                  γ,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "if_let::Container::Left",
                            0
                          |) in
                        let value := M.copy (| γ0_0 |) in
                        Value.Tuple [ value ]));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "if_let::Container::Right",
                            0
                          |) in
                        let value := M.copy (| γ0_0 |) in
                        Value.Tuple [ value ]))
                  ],
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with | [ value ] => value | _ => M.impossible (||) end))
                |)));
            fun γ =>
              ltac:(M.monadic
                (let _ := M.is_struct_tuple (| γ, "if_let::Container::Empty" |) in
                M.alloc (| Value.Integer 0 |)))
          ]
        |)
      |)))
  | _, _ => M.impossible
  end.

Axiom Function_extract_value : M.IsFunction "if_let::extract_value" extract_value.

(*
fn main() {
    let x = Some(5);

    if let Some(y) = x {
        println!("if: {y}");
    }

    match x {
        Some(_) if let Some(y) = x => println!("match: {y}"),
        None => {}
    }

    if let Some(y) = x
        && y > 3
        && let Some(z) = x
    {
        println!("if and: {y} {z}");
    }

    match x {
        Some(_)
            if let Some(y) = x
                && y > 3
                && let Some(z) = x =>
        {
            println!("match and: {y} {z}")
        }
        None => {}
    }
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    ltac:(M.monadic
      (M.read (|
        let~ x :=
          M.alloc (| Value.StructTuple "core::option::Option::Some" [ Value.Integer 5 ] |) in
        let~ _ :=
          M.match_operator (|
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := x in
                  let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (| γ, "core::option::Option::Some", 0 |) in
                  let y := M.copy (| γ0_0 |) in
                  let~ _ :=
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (| "std::io::stdio::_print", [] |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "if: " |);
                                        M.read (| Value.String "
" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [ Ty.path "i32" ]
                                          |),
                                          [ y ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |) in
                    M.alloc (| Value.Tuple [] |) in
                  M.alloc (| Value.Tuple [] |)));
              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
            ]
          |) in
        let~ _ :=
          M.match_operator (|
            x,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (| γ, "core::option::Option::Some", 0 |) in
                  let γ := x in
                  let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (| γ, "core::option::Option::Some", 0 |) in
                  let y := M.copy (| γ0_0 |) in
                  let~ _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (| "std::io::stdio::_print", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array
                                    [
                                      M.read (| Value.String "match: " |);
                                      M.read (| Value.String "
" |)
                                    ]
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [ Ty.path "i32" ]
                                        |),
                                        [ y ]
                                      |)
                                    ]
                                |))
                            ]
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                  M.alloc (| Value.Tuple [] |)))
            ]
          |) in
        let~ _ :=
          M.match_operator (|
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := x in
                  let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (| γ, "core::option::Option::Some", 0 |) in
                  let y := M.copy (| γ0_0 |) in
                  let γ := M.use (M.alloc (| BinOp.Pure.gt (M.read (| y |)) (Value.Integer 3) |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  let γ := x in
                  let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (| γ, "core::option::Option::Some", 0 |) in
                  let z := M.copy (| γ0_0 |) in
                  let~ _ :=
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (| "std::io::stdio::_print", [] |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "if and: " |);
                                        M.read (| Value.String " " |);
                                        M.read (| Value.String "
" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [ Ty.path "i32" ]
                                          |),
                                          [ y ]
                                        |);
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [ Ty.path "i32" ]
                                          |),
                                          [ z ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |) in
                    M.alloc (| Value.Tuple [] |) in
                  M.alloc (| Value.Tuple [] |)));
              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
            ]
          |) in
        M.match_operator (|
          x,
          [
            fun γ =>
              ltac:(M.monadic
                (let γ0_0 :=
                  M.SubPointer.get_struct_tuple_field (| γ, "core::option::Option::Some", 0 |) in
                let γ := x in
                let γ0_0 :=
                  M.SubPointer.get_struct_tuple_field (| γ, "core::option::Option::Some", 0 |) in
                let y := M.copy (| γ0_0 |) in
                let γ := M.alloc (| BinOp.Pure.gt (M.read (| y |)) (Value.Integer 3) |) in
                let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                let γ := x in
                let γ0_0 :=
                  M.SubPointer.get_struct_tuple_field (| γ, "core::option::Option::Some", 0 |) in
                let z := M.copy (| γ0_0 |) in
                let~ _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "std::io::stdio::_print", [] |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            []
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array
                                  [
                                    M.read (| Value.String "match and: " |);
                                    M.read (| Value.String " " |);
                                    M.read (| Value.String "
" |)
                                  ]
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::rt::Argument",
                                        "new_display",
                                        [ Ty.path "i32" ]
                                      |),
                                      [ y ]
                                    |);
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::rt::Argument",
                                        "new_display",
                                        [ Ty.path "i32" ]
                                      |),
                                      [ z ]
                                    |)
                                  ]
                              |))
                          ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)));
            fun γ =>
              ltac:(M.monadic
                (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                M.alloc (| Value.Tuple [] |)))
          ]
        |)
      |)))
  | _, _ => M.impossible
  end.

Axiom Function_main : M.IsFunction "if_let::main" main.
