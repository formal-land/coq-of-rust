(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn foo(x: Option<i32>) -> i32 {
    let Some(x) = x else {
        return 0;
    };
    x + 1
}
*)
Definition foo (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [ x ] =>
    ltac:(M.monadic
      (let x := M.alloc (| Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ], x |) in
      M.catch_return (Ty.path "i32") (|
        ltac:(M.monadic
          (M.match_operator (|
            Ty.path "i32",
            x,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (| γ, "core::option::Option::Some", 0 |) in
                  let x := M.copy (| Ty.path "i32", γ0_0 |) in
                  M.call_closure (|
                    Ty.path "i32",
                    BinOp.Wrap.add,
                    [ M.read (| x |); Value.Integer IntegerKind.I32 1 ]
                  |)));
              fun γ =>
                ltac:(M.monadic (M.read (| M.return_ (| Value.Integer IntegerKind.I32 0 |) |)))
            ]
          |)))
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_foo : M.IsFunction.C "let_else::foo" foo.
Admitted.
Global Typeclasses Opaque foo.
