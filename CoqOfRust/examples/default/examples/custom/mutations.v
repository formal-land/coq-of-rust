(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructRecord
  {
    name := "Numbers";
    const_params := [];
    ty_params := [];
    fields := [ ("a", Ty.path "u64"); ("b", Ty.path "u64"); ("c", Ty.path "u64") ];
  } *)

Module Impl_core_fmt_Debug_for_mutations_Numbers.
  Definition Self : Ty.t := Ty.path "mutations::Numbers".
  
  (* Debug *)
  Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; f ] =>
      ltac:(M.monadic
        (let self :=
          M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "mutations::Numbers" ], self |) in
        let f := M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
        M.call_closure (|
          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; Ty.path "core::fmt::Error" ],
          M.get_associated_function (|
            Ty.path "core::fmt::Formatter",
            "debug_struct_field3_finish",
            [],
            []
          |),
          [
            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Numbers" |) |) |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "a" |) |) |);
            (* Unsize *)
            M.pointer_coercion
              (M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "mutations::Numbers",
                      "a"
                    |)
                  |)
                |)
              |));
            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "b" |) |) |);
            (* Unsize *)
            M.pointer_coercion
              (M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "mutations::Numbers",
                      "b"
                    |)
                  |)
                |)
              |));
            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "c" |) |) |);
            (* Unsize *)
            M.pointer_coercion
              (M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "mutations::Numbers",
                          "c"
                        |)
                      |)
                    |)
                  |)
                |)
              |))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_mutations_Numbers.

(*
fn get_a_ref(numbers: &Numbers) -> &u64 {
  &numbers.a
}
*)
Definition get_a_ref (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [ numbers ] =>
    ltac:(M.monadic
      (let numbers :=
        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "mutations::Numbers" ], numbers |) in
      M.borrow (|
        Pointer.Kind.Ref,
        M.deref (|
          M.borrow (|
            Pointer.Kind.Ref,
            M.SubPointer.get_struct_record_field (|
              M.deref (| M.read (| numbers |) |),
              "mutations::Numbers",
              "a"
            |)
          |)
        |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_get_a_ref : M.IsFunction.C "mutations::get_a_ref" get_a_ref.
Admitted.
Global Typeclasses Opaque get_a_ref.

(*
fn get_b_mut(numbers: &mut Numbers) -> &mut u64 {
  &mut numbers.b
}
*)
Definition get_b_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [ numbers ] =>
    ltac:(M.monadic
      (let numbers :=
        M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "mutations::Numbers" ], numbers |) in
      M.borrow (|
        Pointer.Kind.MutRef,
        M.deref (|
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| numbers |) |),
                  "mutations::Numbers",
                  "b"
                |)
              |)
            |)
          |)
        |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_get_b_mut : M.IsFunction.C "mutations::get_b_mut" get_b_mut.
Admitted.
Global Typeclasses Opaque get_b_mut.

(*
fn duplicate(a: &u64, b: &mut u64, c: &mut u64) {
  *b = *a;
  *c = *a;
}
*)
Definition duplicate (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [ a; b; c ] =>
    ltac:(M.monadic
      (let a := M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u64" ], a |) in
      let b := M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "u64" ], b |) in
      let c := M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "u64" ], c |) in
      M.read (|
        let~ _ : Ty.tuple [] :=
          M.write (| M.deref (| M.read (| b |) |), M.read (| M.deref (| M.read (| a |) |) |) |) in
        let~ _ : Ty.tuple [] :=
          M.write (| M.deref (| M.read (| c |) |), M.read (| M.deref (| M.read (| a |) |) |) |) in
        M.alloc (| Ty.tuple [], Value.Tuple [] |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_duplicate : M.IsFunction.C "mutations::duplicate" duplicate.
Admitted.
Global Typeclasses Opaque duplicate.

(*
fn apply_duplicate(numbers: &mut Numbers) {
  duplicate(get_a_ref(&numbers), get_b_mut(&mut numbers), &mut numbers.c);
}
*)
Definition apply_duplicate (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [ numbers ] =>
    ltac:(M.monadic
      (let numbers :=
        M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "mutations::Numbers" ], numbers |) in
      M.read (|
        let~ _ : Ty.tuple [] :=
          M.call_closure (|
            Ty.tuple [],
            M.get_function (| "mutations::duplicate", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                    M.get_function (| "mutations::get_a_ref", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.read (| M.deref (| M.borrow (| Pointer.Kind.Ref, numbers |) |) |)
                        |)
                      |)
                    ]
                  |)
                |)
              |);
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "u64" ],
                    M.get_function (| "mutations::get_b_mut", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.read (| M.deref (| M.borrow (| Pointer.Kind.MutRef, numbers |) |) |)
                        |)
                      |)
                    ]
                  |)
                |)
              |);
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| numbers |) |),
                      "mutations::Numbers",
                      "c"
                    |)
                  |)
                |)
              |)
            ]
          |) in
        M.alloc (| Ty.tuple [], Value.Tuple [] |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_apply_duplicate :
  M.IsFunction.C "mutations::apply_duplicate" apply_duplicate.
Admitted.
Global Typeclasses Opaque apply_duplicate.

(*
fn main() {
  let mut numbers = Numbers { a: 1, b: 2, c: 3 };

  apply_duplicate(&mut numbers);

  println!("{:#?}", numbers);
}
*)
Definition main (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [] =>
    ltac:(M.monadic
      (M.read (|
        let~ numbers : Ty.path "mutations::Numbers" :=
          Value.mkStructRecord
            "mutations::Numbers"
            []
            []
            [
              ("a", Value.Integer IntegerKind.U64 1);
              ("b", Value.Integer IntegerKind.U64 2);
              ("c", Value.Integer IntegerKind.U64 3)
            ] in
        let~ _ : Ty.tuple [] :=
          M.call_closure (|
            Ty.tuple [],
            M.get_function (| "mutations::apply_duplicate", [], [] |),
            [
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (| M.borrow (| Pointer.Kind.MutRef, numbers |) |)
              |)
            ]
          |) in
        let~ _ : Ty.tuple [] :=
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_function (| "std::io::stdio::_print", [], [] |),
                [
                  M.call_closure (|
                    Ty.path "core::fmt::Arguments",
                    M.get_associated_function (|
                      Ty.path "core::fmt::Arguments",
                      "new_v1_formatted",
                      [],
                      []
                    |),
                    [
                      (* Unsize *)
                      M.pointer_coercion
                        (M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                Value.Array [ mk_str (| "" |); mk_str (| "
" |) ]
                              |)
                            |)
                          |)
                        |));
                      (* Unsize *)
                      M.pointer_coercion
                        (M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 1 ]
                                  [ Ty.path "core::fmt::rt::Argument" ],
                                Value.Array
                                  [
                                    M.call_closure (|
                                      Ty.path "core::fmt::rt::Argument",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::rt::Argument",
                                        "new_debug",
                                        [],
                                        [ Ty.path "mutations::Numbers" ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.borrow (| Pointer.Kind.Ref, numbers |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                              |)
                            |)
                          |)
                        |));
                      (* Unsize *)
                      M.pointer_coercion
                        (M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 1 ]
                                  [ Ty.path "core::fmt::rt::Placeholder" ],
                                Value.Array
                                  [
                                    M.call_closure (|
                                      Ty.path "core::fmt::rt::Placeholder",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::rt::Placeholder",
                                        "new",
                                        [],
                                        []
                                      |),
                                      [
                                        Value.Integer IntegerKind.Usize 0;
                                        Value.UnicodeChar 32;
                                        Value.StructTuple
                                          "core::fmt::rt::Alignment::Unknown"
                                          []
                                          []
                                          [];
                                        Value.Integer IntegerKind.U32 4;
                                        Value.StructTuple "core::fmt::rt::Count::Implied" [] [] [];
                                        Value.StructTuple "core::fmt::rt::Count::Implied" [] [] []
                                      ]
                                    |)
                                  ]
                              |)
                            |)
                          |)
                        |));
                      M.call_closure (|
                        Ty.path "core::fmt::rt::UnsafeArg",
                        M.get_associated_function (|
                          Ty.path "core::fmt::rt::UnsafeArg",
                          "new",
                          [],
                          []
                        |),
                        []
                      |)
                    ]
                  |)
                ]
              |) in
            M.alloc (| Ty.tuple [], Value.Tuple [] |)
          |) in
        M.alloc (| Ty.tuple [], Value.Tuple [] |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_main : M.IsFunction.C "mutations::main" main.
Admitted.
Global Typeclasses Opaque main.

(*
fn incr(mut x: u64, y: u64) -> u64 {
  x += y;
  x
}
*)
Definition incr (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [ x; y ] =>
    ltac:(M.monadic
      (let x := M.alloc (| Ty.path "u64", x |) in
      let y := M.alloc (| Ty.path "u64", y |) in
      M.read (|
        let~ _ : Ty.tuple [] :=
          let β := x in
          M.write (|
            β,
            M.call_closure (| Ty.path "u64", BinOp.Wrap.add, [ M.read (| β |); M.read (| y |) ] |)
          |) in
        x
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_incr : M.IsFunction.C "mutations::incr" incr.
Admitted.
Global Typeclasses Opaque incr.
