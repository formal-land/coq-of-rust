(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module WebEvent.
  Module Click.
    Record t : Set := {
      x : i64.t;
      y : i64.t;
    }.
  End Click.
  
  Inductive t : Set :=
  | PageLoad
  | PageUnload
  | KeyPress (_ : char.t)
  | Paste (_ : alloc.string.String.t)
  | Click (_ : Click.t).
  
  Definition Get_KeyPress_0 :=
    Ref.map
      (fun α => match α with | KeyPress α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | KeyPress _ => Some (KeyPress β) | _ => None end).
  
  Definition Get_Paste_0 :=
    Ref.map
      (fun α => match α with | Paste α0 => Some α0 | _ => None end)
      (fun β α => match α with | Paste _ => Some (Paste β) | _ => None end).
  
  Definition Get_Click_x :=
    Ref.map
      (fun α => match α with | Click α => Some α.(Click.x) | _ => None end)
      (fun β α =>
        match α with
        | Click α => Some (Click (α <| Click.x := β |>))
        | _ => None
        end).
  
  Definition Get_Click_y :=
    Ref.map
      (fun α => match α with | Click α => Some α.(Click.y) | _ => None end)
      (fun β α =>
        match α with
        | Click α => Some (Click (α <| Click.y := β |>))
        | _ => None
        end).
End WebEvent.

(*
fn inspect(event: WebEvent) {
    match event {
        WebEvent::PageLoad => println!("page loaded, réfé"),
        WebEvent::PageUnload => println!("page unloaded"),
        // Destructure `c` from inside the `enum`.
        WebEvent::KeyPress(c) => println!("pressed '{}'.", c),
        WebEvent::Paste(s) => println!("pasted \"{}\".", s),
        // Destructure `Click` into `x` and `y`.
        WebEvent::Click { x, y } => {
            println!("clicked at x={}, y={}.", x, y);
        }
    }
}
*)
Definition inspect (event : enums.WebEvent.t) : M unit :=
  let* event := M.alloc event in
  let* α0 : M.Val unit :=
    match_operator
      event
      [
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | enums.WebEvent.PageLoad =>
            let* _ : M.Val unit :=
              let* α0 : ref str.t :=
                M.read
                  (mk_str
                    ("page loaded, r" ++
                      String.String "233" ("f" ++ String.String "233" "
"))) in
              let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
              let* α2 : M.Val (ref (array (ref str.t))) :=
                M.alloc (borrow α1) in
              let* α3 : ref (slice (ref str.t)) :=
                M.read (pointer_coercion "Unsize" α2) in
              let* α4 : core.fmt.Arguments.t :=
                M.call (impl core.fmt.Arguments.t "new_const" α3) in
              let* α5 : unit := M.call (std.io.stdio._print α4) in
              M.alloc α5 in
            M.alloc tt
          | _ => M.break_match
          end) :
          M (M.Val unit);
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | enums.WebEvent.PageUnload =>
            let* _ : M.Val unit :=
              let* α0 : ref str.t := M.read (mk_str "page unloaded
") in
              let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
              let* α2 : M.Val (ref (array (ref str.t))) :=
                M.alloc (borrow α1) in
              let* α3 : ref (slice (ref str.t)) :=
                M.read (pointer_coercion "Unsize" α2) in
              let* α4 : core.fmt.Arguments.t :=
                M.call (impl core.fmt.Arguments.t "new_const" α3) in
              let* α5 : unit := M.call (std.io.stdio._print α4) in
              M.alloc α5 in
            M.alloc tt
          | _ => M.break_match
          end) :
          M (M.Val unit);
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | enums.WebEvent.KeyPress _ =>
            let γ0_0 := enums.WebEvent.Get_KeyPress_0 γ in
            let* c := M.copy γ0_0 in
            let* _ : M.Val unit :=
              let* α0 : ref str.t := M.read (mk_str "pressed '") in
              let* α1 : ref str.t := M.read (mk_str "'.
") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
              let* α3 : M.Val (ref (array (ref str.t))) :=
                M.alloc (borrow α2) in
              let* α4 : ref (slice (ref str.t)) :=
                M.read (pointer_coercion "Unsize" α3) in
              let* α5 : core.fmt.rt.Argument.t :=
                M.call (impl core.fmt.rt.Argument.t "new_display" (borrow c)) in
              let* α6 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α5 ] in
              let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                M.alloc (borrow α6) in
              let* α8 : ref (slice core.fmt.rt.Argument.t) :=
                M.read (pointer_coercion "Unsize" α7) in
              let* α9 : core.fmt.Arguments.t :=
                M.call (impl core.fmt.Arguments.t "new_v1" α4 α8) in
              let* α10 : unit := M.call (std.io.stdio._print α9) in
              M.alloc α10 in
            M.alloc tt
          | _ => M.break_match
          end) :
          M (M.Val unit);
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | enums.WebEvent.Paste _ =>
            let γ0_0 := enums.WebEvent.Get_Paste_0 γ in
            let* s := M.copy γ0_0 in
            let* _ : M.Val unit :=
              let* α0 : ref str.t := M.read (mk_str "pasted """) in
              let* α1 : ref str.t := M.read (mk_str """.
") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
              let* α3 : M.Val (ref (array (ref str.t))) :=
                M.alloc (borrow α2) in
              let* α4 : ref (slice (ref str.t)) :=
                M.read (pointer_coercion "Unsize" α3) in
              let* α5 : core.fmt.rt.Argument.t :=
                M.call (impl core.fmt.rt.Argument.t "new_display" (borrow s)) in
              let* α6 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α5 ] in
              let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                M.alloc (borrow α6) in
              let* α8 : ref (slice core.fmt.rt.Argument.t) :=
                M.read (pointer_coercion "Unsize" α7) in
              let* α9 : core.fmt.Arguments.t :=
                M.call (impl core.fmt.Arguments.t "new_v1" α4 α8) in
              let* α10 : unit := M.call (std.io.stdio._print α9) in
              M.alloc α10 in
            M.alloc tt
          | _ => M.break_match
          end) :
          M (M.Val unit);
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          |
              enums.WebEvent.Click
              {| enums.WebEvent.Click.x := _; enums.WebEvent.Click.y := _;
              |}
              =>
            let γ0_0 := enums.WebEvent.Get_Click_x γ in
            let γ0_1 := enums.WebEvent.Get_Click_y γ in
            let* x := M.copy γ0_0 in
            let* y := M.copy γ0_1 in
            let* _ : M.Val unit :=
              let* _ : M.Val unit :=
                let* α0 : ref str.t := M.read (mk_str "clicked at x=") in
                let* α1 : ref str.t := M.read (mk_str ", y=") in
                let* α2 : ref str.t := M.read (mk_str ".
") in
                let* α3 : M.Val (array (ref str.t)) := M.alloc [ α0; α1; α2 ] in
                let* α4 : M.Val (ref (array (ref str.t))) :=
                  M.alloc (borrow α3) in
                let* α5 : ref (slice (ref str.t)) :=
                  M.read (pointer_coercion "Unsize" α4) in
                let* α6 : core.fmt.rt.Argument.t :=
                  M.call
                    (impl core.fmt.rt.Argument.t "new_display" (borrow x)) in
                let* α7 : core.fmt.rt.Argument.t :=
                  M.call
                    (impl core.fmt.rt.Argument.t "new_display" (borrow y)) in
                let* α8 : M.Val (array core.fmt.rt.Argument.t) :=
                  M.alloc [ α6; α7 ] in
                let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                  M.alloc (borrow α8) in
                let* α10 : ref (slice core.fmt.rt.Argument.t) :=
                  M.read (pointer_coercion "Unsize" α9) in
                let* α11 : core.fmt.Arguments.t :=
                  M.call (impl core.fmt.Arguments.t "new_v1" α5 α10) in
                let* α12 : unit := M.call (std.io.stdio._print α11) in
                M.alloc α12 in
              M.alloc tt in
            M.alloc tt
          | _ => M.break_match
          end) :
          M (M.Val unit)
      ] in
  M.read α0.

(*
fn main() {
    let pressed = WebEvent::KeyPress('x');
    // `to_owned()` creates an owned `String` from a string slice.
    let pasted = WebEvent::Paste("my text".to_owned());
    let click = WebEvent::Click { x: 20, y: 80 };
    let load = WebEvent::PageLoad;
    let unload = WebEvent::PageUnload;

    inspect(pressed);
    inspect(pasted);
    inspect(click);
    inspect(load);
    inspect(unload);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* pressed : M.Val enums.WebEvent.t :=
    M.alloc (enums.WebEvent.KeyPress "x"%char) in
  let* pasted : M.Val enums.WebEvent.t :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        alloc.borrow.ToOwned.to_owned (Self := str.t) (Trait := ℐ))) in
    let* α1 : ref str.t := M.read (mk_str "my text") in
    let* α2 : alloc.string.String.t := M.call (α0 α1) in
    M.alloc (enums.WebEvent.Paste α2) in
  let* click : M.Val enums.WebEvent.t :=
    M.alloc
      (enums.WebEvent.Click
        {|
        enums.WebEvent.Click.x := (Integer.of_Z 20) : i64.t;
        enums.WebEvent.Click.y := (Integer.of_Z 80) : i64.t;
      |}) in
  let* load : M.Val enums.WebEvent.t := M.alloc enums.WebEvent.PageLoad in
  let* unload : M.Val enums.WebEvent.t := M.alloc enums.WebEvent.PageUnload in
  let* _ : M.Val unit :=
    let* α0 : enums.WebEvent.t := M.read pressed in
    let* α1 : unit := M.call (enums.inspect α0) in
    M.alloc α1 in
  let* _ : M.Val unit :=
    let* α0 : enums.WebEvent.t := M.read pasted in
    let* α1 : unit := M.call (enums.inspect α0) in
    M.alloc α1 in
  let* _ : M.Val unit :=
    let* α0 : enums.WebEvent.t := M.read click in
    let* α1 : unit := M.call (enums.inspect α0) in
    M.alloc α1 in
  let* _ : M.Val unit :=
    let* α0 : enums.WebEvent.t := M.read load in
    let* α1 : unit := M.call (enums.inspect α0) in
    M.alloc α1 in
  let* _ : M.Val unit :=
    let* α0 : enums.WebEvent.t := M.read unload in
    let* α1 : unit := M.call (enums.inspect α0) in
    M.alloc α1 in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
