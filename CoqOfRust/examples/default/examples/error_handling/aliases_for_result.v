(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Ltac AliasedResult T :=
  exact (core.result.Result.t T core.num.error.ParseIntError.t).

(*
fn multiply(first_number_str: &str, second_number_str: &str) -> AliasedResult<i32> {
    first_number_str.parse::<i32>().and_then(|first_number| {
        second_number_str
            .parse::<i32>()
            .map(|second_number| first_number * second_number)
    })
}
*)
Definition multiply
    (first_number_str : ref str.t)
    (second_number_str : ref str.t)
    : M ltac:(aliases_for_result.AliasedResult i32.t) :=
  let* first_number_str := M.alloc first_number_str in
  let* second_number_str := M.alloc second_number_str in
  let* α0 : ref str.t := M.read first_number_str in
  let* α1 : core.result.Result.t i32.t core.num.error.ParseIntError.t :=
    M.call (impl str.t "parse" α0) in
  M.call
    (impl (core.result.Result.t i32.t core.num.error.ParseIntError.t) "and_then"
      α1
      (fun (α0 : i32.t) =>
        (let* α0 := M.alloc α0 in
        match_operator
          α0
          [
            fun γ =>
              (let* first_number := M.copy γ in
              let* α0 : ref str.t := M.read second_number_str in
              let* α1 :
                  core.result.Result.t i32.t core.num.error.ParseIntError.t :=
                M.call (impl str.t "parse" α0) in
              M.call
                (impl
                    (core.result.Result.t i32.t core.num.error.ParseIntError.t)
                    "map"
                  α1
                  (fun (α0 : i32.t) =>
                    (let* α0 := M.alloc α0 in
                    match_operator
                      α0
                      [
                        fun γ =>
                          (let* second_number := M.copy γ in
                          let* α0 : i32.t := M.read first_number in
                          let* α1 : i32.t := M.read second_number in
                          BinOp.Panic.mul α0 α1) :
                          M i32.t
                      ]) :
                    M i32.t))) :
              M (core.result.Result.t i32.t core.num.error.ParseIntError.t)
          ]) :
        M (core.result.Result.t i32.t core.num.error.ParseIntError.t))).

(*
fn print(result: AliasedResult<i32>) {
    match result {
        Ok(n) => println!("n is {}", n),
        Err(e) => println!("Error: {}", e),
    }
}
*)
Definition print
    (result : ltac:(aliases_for_result.AliasedResult i32.t))
    : M unit :=
  let* result := M.alloc result in
  let* α0 : M.Val unit :=
    match_operator
      result
      [
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | core.result.Result.Ok _ =>
            let γ0_0 := core.result.Result.Get_Ok_0 γ in
            let* n := M.copy γ0_0 in
            let* _ : M.Val unit :=
              let* α0 : ref str.t := M.read (mk_str "n is ") in
              let* α1 : ref str.t := M.read (mk_str "
") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
              let* α3 : M.Val (ref (array (ref str.t))) :=
                M.alloc (borrow α2) in
              let* α4 : ref (slice (ref str.t)) :=
                M.read (pointer_coercion "Unsize" α3) in
              let* α5 : core.fmt.rt.Argument.t :=
                M.call (impl core.fmt.rt.Argument.t "new_display" (borrow n)) in
              let* α6 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α5 ] in
              let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                M.alloc (borrow α6) in
              let* α8 : ref (slice core.fmt.rt.Argument.t) :=
                M.read (pointer_coercion "Unsize" α7) in
              let* α9 : core.fmt.Arguments.t :=
                M.call (impl core.fmt.Arguments.t "new_v1" α4 α8) in
              let* α10 : unit := M.call (std.io.stdio._print α9) in
              M.alloc α10 in
            M.alloc tt
          | _ => M.break_match
          end) :
          M (M.Val unit);
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | core.result.Result.Err _ =>
            let γ0_0 := core.result.Result.Get_Err_0 γ in
            let* e := M.copy γ0_0 in
            let* _ : M.Val unit :=
              let* α0 : ref str.t := M.read (mk_str "Error: ") in
              let* α1 : ref str.t := M.read (mk_str "
") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
              let* α3 : M.Val (ref (array (ref str.t))) :=
                M.alloc (borrow α2) in
              let* α4 : ref (slice (ref str.t)) :=
                M.read (pointer_coercion "Unsize" α3) in
              let* α5 : core.fmt.rt.Argument.t :=
                M.call (impl core.fmt.rt.Argument.t "new_display" (borrow e)) in
              let* α6 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α5 ] in
              let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                M.alloc (borrow α6) in
              let* α8 : ref (slice core.fmt.rt.Argument.t) :=
                M.read (pointer_coercion "Unsize" α7) in
              let* α9 : core.fmt.Arguments.t :=
                M.call (impl core.fmt.Arguments.t "new_v1" α4 α8) in
              let* α10 : unit := M.call (std.io.stdio._print α9) in
              M.alloc α10 in
            M.alloc tt
          | _ => M.break_match
          end) :
          M (M.Val unit)
      ] in
  M.read α0.

(*
fn main() {
    print(multiply("10", "2"));
    print(multiply("t", "2"));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* _ : M.Val unit :=
    let* α0 : ref str.t := M.read (mk_str "10") in
    let* α1 : ref str.t := M.read (mk_str "2") in
    let* α2 : core.result.Result.t i32.t core.num.error.ParseIntError.t :=
      M.call (aliases_for_result.multiply α0 α1) in
    let* α3 : unit := M.call (aliases_for_result.print α2) in
    M.alloc α3 in
  let* _ : M.Val unit :=
    let* α0 : ref str.t := M.read (mk_str "t") in
    let* α1 : ref str.t := M.read (mk_str "2") in
    let* α2 : core.result.Result.t i32.t core.num.error.ParseIntError.t :=
      M.call (aliases_for_result.multiply α0 α1) in
    let* α3 : unit := M.call (aliases_for_result.print α2) in
    M.alloc α3 in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
