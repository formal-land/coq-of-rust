(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Foo.
Section Foo.
  Record t : Set := {
    test : bool.t;
  }.
  
  Definition Get_test :=
    Ref.map (fun α => Some α.(test)) (fun β α => Some (α <| test := β |>)).
End Foo.
End Foo.

Module  Bar.
Section Bar.
  Record t : Set := {
    test : alloc.string.String.t;
  }.
  
  Definition Get_test :=
    Ref.map (fun α => Some α.(test)) (fun β α => Some (α <| test := β |>)).
End Bar.
End Bar.

Module  BarTrait.
Section BarTrait.
  Class Trait (Self : Set) : Type := {
    show : Self -> M alloc.string.String.t;
  }.
  
End BarTrait.
End BarTrait.

Module  Impl_const_underscore_expression_BarTrait_for_const_underscore_expression_Bar_t.
Section Impl_const_underscore_expression_BarTrait_for_const_underscore_expression_Bar_t.
  Definition Self : Set := const_underscore_expression.Bar.t.
  
  (*
          fn show(self: Self) -> String {
              self.test
          }
  *)
  Definition show (self : Self) : M alloc.string.String.t :=
    let* self := M.alloc self in
    M.read (const_underscore_expression.Bar.Get_test self).
  
  Axiom show_is_impl : impl Self "show" = show.
  
  Global Instance ℐ : const_underscore_expression.BarTrait.Trait Self := {
    const_underscore_expression.BarTrait.show := show;
  }.
End Impl_const_underscore_expression_BarTrait_for_const_underscore_expression_Bar_t.
End Impl_const_underscore_expression_BarTrait_for_const_underscore_expression_Bar_t.
