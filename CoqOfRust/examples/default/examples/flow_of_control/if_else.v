(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let n = 5;

    if n < 0 {
        print!("{} is negative", n);
    } else if n > 0 {
        print!("{} is positive", n);
    } else {
        print!("{} is zero", n);
    }

    let big_n = if n < 10 && n > -10 {
        println!(", and is a small number, increase ten-fold");

        // This expression returns an `i32`.
        10 * n
    } else {
        println!(", and is a big number, halve the number");

        // This expression must return an `i32` as well.
        n / 2
        // TODO ^ Try suppressing this expression with a semicolon.
    };
    //   ^ Don't forget to put a semicolon here! All `let` bindings need it.

    println!("{} -> {}", n, big_n);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* n : M.Val i32.t := M.alloc ((Integer.of_Z 5) : i32.t) in
  let* _ : M.Val unit :=
    let* α0 : i32.t := M.read n in
    let* α1 : M.Val bool.t :=
      M.alloc (BinOp.Pure.lt α0 ((Integer.of_Z 0) : i32.t)) in
    let* α2 : bool.t := M.read (use α1) in
    if α2 then
      let* _ : M.Val unit :=
        let* _ : M.Val unit :=
          let* α0 : ref str.t := M.read (mk_str "") in
          let* α1 : ref str.t := M.read (mk_str " is negative") in
          let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
          let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
          let* α4 : ref (slice (ref str.t)) :=
            M.read (pointer_coercion "Unsize" α3) in
          let* α5 : core.fmt.rt.Argument.t :=
            M.call (impl core.fmt.rt.Argument.t "new_display" (borrow n)) in
          let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
          let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
            M.alloc (borrow α6) in
          let* α8 : ref (slice core.fmt.rt.Argument.t) :=
            M.read (pointer_coercion "Unsize" α7) in
          let* α9 : core.fmt.Arguments.t :=
            M.call (impl core.fmt.Arguments.t "new_v1" α4 α8) in
          let* α10 : unit := M.call (std.io.stdio._print α9) in
          M.alloc α10 in
        M.alloc tt in
      M.alloc tt
    else
      let* α0 : i32.t := M.read n in
      let* α1 : M.Val bool.t :=
        M.alloc (BinOp.Pure.gt α0 ((Integer.of_Z 0) : i32.t)) in
      let* α2 : bool.t := M.read (use α1) in
      if α2 then
        let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : ref str.t := M.read (mk_str "") in
            let* α1 : ref str.t := M.read (mk_str " is positive") in
            let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
            let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
            let* α4 : ref (slice (ref str.t)) :=
              M.read (pointer_coercion "Unsize" α3) in
            let* α5 : core.fmt.rt.Argument.t :=
              M.call (impl core.fmt.rt.Argument.t "new_display" (borrow n)) in
            let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
            let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
              M.alloc (borrow α6) in
            let* α8 : ref (slice core.fmt.rt.Argument.t) :=
              M.read (pointer_coercion "Unsize" α7) in
            let* α9 : core.fmt.Arguments.t :=
              M.call (impl core.fmt.Arguments.t "new_v1" α4 α8) in
            let* α10 : unit := M.call (std.io.stdio._print α9) in
            M.alloc α10 in
          M.alloc tt in
        M.alloc tt
      else
        let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : ref str.t := M.read (mk_str "") in
            let* α1 : ref str.t := M.read (mk_str " is zero") in
            let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
            let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
            let* α4 : ref (slice (ref str.t)) :=
              M.read (pointer_coercion "Unsize" α3) in
            let* α5 : core.fmt.rt.Argument.t :=
              M.call (impl core.fmt.rt.Argument.t "new_display" (borrow n)) in
            let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
            let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
              M.alloc (borrow α6) in
            let* α8 : ref (slice core.fmt.rt.Argument.t) :=
              M.read (pointer_coercion "Unsize" α7) in
            let* α9 : core.fmt.Arguments.t :=
              M.call (impl core.fmt.Arguments.t "new_v1" α4 α8) in
            let* α10 : unit := M.call (std.io.stdio._print α9) in
            M.alloc α10 in
          M.alloc tt in
        M.alloc tt in
  let* big_n : M.Val i32.t :=
    let* α0 : i32.t := M.read n in
    let* α1 : i32.t := M.read n in
    let* α2 : M.Val bool.t :=
      M.alloc
        (BinOp.Pure.and
          (BinOp.Pure.lt α0 ((Integer.of_Z 10) : i32.t))
          (BinOp.Pure.gt α1 ((Integer.of_Z (-10)) : i32.t))) in
    let* α3 : bool.t := M.read (use α2) in
    let* α4 : M.Val i32.t :=
      if α3 then
        let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : ref str.t :=
              M.read (mk_str ", and is a small number, increase ten-fold
") in
            let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
            let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
            let* α3 : ref (slice (ref str.t)) :=
              M.read (pointer_coercion "Unsize" α2) in
            let* α4 : core.fmt.Arguments.t :=
              M.call (impl core.fmt.Arguments.t "new_const" α3) in
            let* α5 : unit := M.call (std.io.stdio._print α4) in
            M.alloc α5 in
          M.alloc tt in
        let* α0 : i32.t := M.read n in
        let* α1 : i32.t := BinOp.Panic.mul ((Integer.of_Z 10) : i32.t) α0 in
        M.alloc α1
      else
        let* _ : M.Val unit :=
          let* _ : M.Val unit :=
            let* α0 : ref str.t :=
              M.read (mk_str ", and is a big number, halve the number
") in
            let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
            let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
            let* α3 : ref (slice (ref str.t)) :=
              M.read (pointer_coercion "Unsize" α2) in
            let* α4 : core.fmt.Arguments.t :=
              M.call (impl core.fmt.Arguments.t "new_const" α3) in
            let* α5 : unit := M.call (std.io.stdio._print α4) in
            M.alloc α5 in
          M.alloc tt in
        let* α0 : i32.t := M.read n in
        let* α1 : i32.t := BinOp.Panic.div α0 ((Integer.of_Z 2) : i32.t) in
        M.alloc α1 in
    M.copy α4 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "") in
      let* α1 : ref str.t := M.read (mk_str " -> ") in
      let* α2 : ref str.t := M.read (mk_str "
") in
      let* α3 : M.Val (array (ref str.t)) := M.alloc [ α0; α1; α2 ] in
      let* α4 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α3) in
      let* α5 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α4) in
      let* α6 : core.fmt.rt.Argument.t :=
        M.call (impl core.fmt.rt.Argument.t "new_display" (borrow n)) in
      let* α7 : core.fmt.rt.Argument.t :=
        M.call (impl core.fmt.rt.Argument.t "new_display" (borrow big_n)) in
      let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α6; α7 ] in
      let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α8) in
      let* α10 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α9) in
      let* α11 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_v1" α5 α10) in
      let* α12 : unit := M.call (std.io.stdio._print α11) in
      M.alloc α12 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
