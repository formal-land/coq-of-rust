(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let number = 13;
    // TODO ^ Try different values for `number`

    println!("Tell me about {}", number);
    match number {
        // Match a single value
        1 => println!("One!"),
        // Match several values
        2 | 3 | 5 | 7 | 11 => println!("This is a prime"),
        // TODO ^ Try adding 13 to the list of prime values
        // Match an inclusive range
        13..=19 => println!("A teen"),
        // Handle the rest of cases
        _ => println!("Ain't special"),
        // TODO ^ Try commenting out this catch-all arm
    }

    let boolean = true;
    // Match is an expression too
    let binary = match boolean {
        // The arms of a match must cover all the possible values
        false => 0,
        true => 1,
        // TODO ^ Try commenting out one of these arms
    };

    println!("{} -> {}", boolean, binary);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* number : M.Val i32.t := M.alloc ((Integer.of_Z 13) : i32.t) in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "Tell me about ") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
      let* α4 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α3) in
      let* α5 : core.fmt.rt.Argument.t :=
        M.call (impl core.fmt.rt.Argument.t "new_display" (borrow number)) in
      let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
      let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α6) in
      let* α8 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α7) in
      let* α9 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_v1" α4 α8) in
      let* α10 : unit := M.call (std.io.stdio._print α9) in
      M.alloc α10 in
    M.alloc tt in
  let* _ : M.Val unit :=
    match_operator
      number
      [
        fun γ =>
          (let* _ : M.Val unit :=
            let* α0 : ref str.t := M.read (mk_str "One!
") in
            let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
            let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
            let* α3 : ref (slice (ref str.t)) :=
              M.read (pointer_coercion "Unsize" α2) in
            let* α4 : core.fmt.Arguments.t :=
              M.call (impl core.fmt.Arguments.t "new_const" α3) in
            let* α5 : unit := M.call (std.io.stdio._print α4) in
            M.alloc α5 in
          M.alloc tt) :
          M (M.Val unit);
        fun γ =>
          (let* _ : M.Val unit :=
            let* α0 : ref str.t := M.read (mk_str "This is a prime
") in
            let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
            let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
            let* α3 : ref (slice (ref str.t)) :=
              M.read (pointer_coercion "Unsize" α2) in
            let* α4 : core.fmt.Arguments.t :=
              M.call (impl core.fmt.Arguments.t "new_const" α3) in
            let* α5 : unit := M.call (std.io.stdio._print α4) in
            M.alloc α5 in
          M.alloc tt) :
          M (M.Val unit);
        fun γ =>
          (let* _ : M.Val unit :=
            let* α0 : ref str.t := M.read (mk_str "This is a prime
") in
            let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
            let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
            let* α3 : ref (slice (ref str.t)) :=
              M.read (pointer_coercion "Unsize" α2) in
            let* α4 : core.fmt.Arguments.t :=
              M.call (impl core.fmt.Arguments.t "new_const" α3) in
            let* α5 : unit := M.call (std.io.stdio._print α4) in
            M.alloc α5 in
          M.alloc tt) :
          M (M.Val unit);
        fun γ =>
          (let* _ : M.Val unit :=
            let* α0 : ref str.t := M.read (mk_str "This is a prime
") in
            let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
            let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
            let* α3 : ref (slice (ref str.t)) :=
              M.read (pointer_coercion "Unsize" α2) in
            let* α4 : core.fmt.Arguments.t :=
              M.call (impl core.fmt.Arguments.t "new_const" α3) in
            let* α5 : unit := M.call (std.io.stdio._print α4) in
            M.alloc α5 in
          M.alloc tt) :
          M (M.Val unit);
        fun γ =>
          (let* _ : M.Val unit :=
            let* α0 : ref str.t := M.read (mk_str "This is a prime
") in
            let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
            let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
            let* α3 : ref (slice (ref str.t)) :=
              M.read (pointer_coercion "Unsize" α2) in
            let* α4 : core.fmt.Arguments.t :=
              M.call (impl core.fmt.Arguments.t "new_const" α3) in
            let* α5 : unit := M.call (std.io.stdio._print α4) in
            M.alloc α5 in
          M.alloc tt) :
          M (M.Val unit);
        fun γ =>
          (let* _ : M.Val unit :=
            let* α0 : ref str.t := M.read (mk_str "This is a prime
") in
            let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
            let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
            let* α3 : ref (slice (ref str.t)) :=
              M.read (pointer_coercion "Unsize" α2) in
            let* α4 : core.fmt.Arguments.t :=
              M.call (impl core.fmt.Arguments.t "new_const" α3) in
            let* α5 : unit := M.call (std.io.stdio._print α4) in
            M.alloc α5 in
          M.alloc tt) :
          M (M.Val unit);
        fun γ =>
          (let* _ : M.Val unit :=
            let* α0 : ref str.t := M.read (mk_str "A teen
") in
            let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
            let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
            let* α3 : ref (slice (ref str.t)) :=
              M.read (pointer_coercion "Unsize" α2) in
            let* α4 : core.fmt.Arguments.t :=
              M.call (impl core.fmt.Arguments.t "new_const" α3) in
            let* α5 : unit := M.call (std.io.stdio._print α4) in
            M.alloc α5 in
          M.alloc tt) :
          M (M.Val unit);
        fun γ =>
          (let* _ : M.Val unit :=
            let* α0 : ref str.t := M.read (mk_str "Ain't special
") in
            let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
            let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
            let* α3 : ref (slice (ref str.t)) :=
              M.read (pointer_coercion "Unsize" α2) in
            let* α4 : core.fmt.Arguments.t :=
              M.call (impl core.fmt.Arguments.t "new_const" α3) in
            let* α5 : unit := M.call (std.io.stdio._print α4) in
            M.alloc α5 in
          M.alloc tt) :
          M (M.Val unit)
      ] in
  let* boolean : M.Val bool.t := M.alloc true in
  let* binary : M.Val i32.t :=
    let* α0 : M.Val i32.t :=
      match_operator
        boolean
        [
          fun γ => (M.alloc ((Integer.of_Z 0) : i32.t)) : M (M.Val i32.t);
          fun γ => (M.alloc ((Integer.of_Z 1) : i32.t)) : M (M.Val i32.t)
        ] in
    M.copy α0 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "") in
      let* α1 : ref str.t := M.read (mk_str " -> ") in
      let* α2 : ref str.t := M.read (mk_str "
") in
      let* α3 : M.Val (array (ref str.t)) := M.alloc [ α0; α1; α2 ] in
      let* α4 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α3) in
      let* α5 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α4) in
      let* α6 : core.fmt.rt.Argument.t :=
        M.call (impl core.fmt.rt.Argument.t "new_display" (borrow boolean)) in
      let* α7 : core.fmt.rt.Argument.t :=
        M.call (impl core.fmt.rt.Argument.t "new_display" (borrow binary)) in
      let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α6; α7 ] in
      let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α8) in
      let* α10 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α9) in
      let* α11 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_v1" α5 α10) in
      let* α12 : unit := M.call (std.io.stdio._print α11) in
      M.alloc α12 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
