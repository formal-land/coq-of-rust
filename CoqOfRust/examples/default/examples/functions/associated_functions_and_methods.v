(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Point.
Section Point.
  Record t : Set := {
    x : f64.t;
    y : f64.t;
  }.
  
  Definition Get_x :=
    Ref.map (fun α => Some α.(x)) (fun β α => Some (α <| x := β |>)).
  Definition Get_y :=
    Ref.map (fun α => Some α.(y)) (fun β α => Some (α <| y := β |>)).
End Point.
End Point.

Module  Impl_associated_functions_and_methods_Point_t.
Section Impl_associated_functions_and_methods_Point_t.
  Definition Self : Set := associated_functions_and_methods.Point.t.
  
  (*
      fn origin() -> Point {
          Point { y: 0.0, x: 1.0 }
      }
  *)
  Definition origin : M associated_functions_and_methods.Point.t :=
    let* α0 : f64.t := M.read (UnsupportedLiteral : M.Val f64.t) in
    let* α1 : f64.t := M.read (UnsupportedLiteral : M.Val f64.t) in
    M.pure
      {|
        associated_functions_and_methods.Point.y := α0;
        associated_functions_and_methods.Point.x := α1;
      |}.
  
  Axiom origin_is_impl : impl Self "origin" = origin.
  
  (*
      fn new(x: f64, y: f64) -> Point {
          Point { x: x, y: y }
      }
  *)
  Definition new
      (x : f64.t)
      (y : f64.t)
      : M associated_functions_and_methods.Point.t :=
    let* x := M.alloc x in
    let* y := M.alloc y in
    let* α0 : f64.t := M.read x in
    let* α1 : f64.t := M.read y in
    M.pure
      {|
        associated_functions_and_methods.Point.x := α0;
        associated_functions_and_methods.Point.y := α1;
      |}.
  
  Axiom new_is_impl : impl Self "new" = new.
End Impl_associated_functions_and_methods_Point_t.
End Impl_associated_functions_and_methods_Point_t.

Module  Rectangle.
Section Rectangle.
  Record t : Set := {
    p1 : associated_functions_and_methods.Point.t;
    p2 : associated_functions_and_methods.Point.t;
  }.
  
  Definition Get_p1 :=
    Ref.map (fun α => Some α.(p1)) (fun β α => Some (α <| p1 := β |>)).
  Definition Get_p2 :=
    Ref.map (fun α => Some α.(p2)) (fun β α => Some (α <| p2 := β |>)).
End Rectangle.
End Rectangle.

Module  Impl_associated_functions_and_methods_Rectangle_t.
Section Impl_associated_functions_and_methods_Rectangle_t.
  Definition Self : Set := associated_functions_and_methods.Rectangle.t.
  
  (*
      fn get_p1(&self) -> Point {
          self.p1
      }
  *)
  Definition get_p1
      (self : ref Self)
      : M associated_functions_and_methods.Point.t :=
    let* self := M.alloc self in
    let* α0 : ref associated_functions_and_methods.Rectangle.t := M.read self in
    M.read (associated_functions_and_methods.Rectangle.Get_p1 (deref α0)).
  
  Axiom get_p1_is_impl : impl Self "get_p1" = get_p1.
  
  (*
      fn area(&self) -> f64 {
          // `self` gives access to the struct fields via the dot operator
          let Point { x: x1, y: y1 } = self.p1;
          let Point { x: x2, y: y2 } = self.p2;
  
          // `abs` is a `f64` method that returns the absolute value of the
          // caller
          ((x1 - x2) * (y1 - y2)).abs()
      }
  *)
  Definition area (self : ref Self) : M f64.t :=
    let* self := M.alloc self in
    let* α0 : ref associated_functions_and_methods.Rectangle.t := M.read self in
    let* α1 : M.Val f64.t :=
      match_operator
        (associated_functions_and_methods.Rectangle.Get_p1 (deref α0))
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            |
                {|
                  associated_functions_and_methods.Point.x := _;
                  associated_functions_and_methods.Point.y := _;
                |}
                =>
              let γ0_0 := associated_functions_and_methods.Point.Get_x γ in
              let γ0_1 := associated_functions_and_methods.Point.Get_y γ in
              let* x1 := M.copy γ0_0 in
              let* y1 := M.copy γ0_1 in
              let* α0 : ref associated_functions_and_methods.Rectangle.t :=
                M.read self in
              match_operator
                (associated_functions_and_methods.Rectangle.Get_p2 (deref α0))
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    |
                        {|
                          associated_functions_and_methods.Point.x := _;
                          associated_functions_and_methods.Point.y := _;
                        |}
                        =>
                      let γ0_0 :=
                        associated_functions_and_methods.Point.Get_x γ in
                      let γ0_1 :=
                        associated_functions_and_methods.Point.Get_y γ in
                      let* x2 := M.copy γ0_0 in
                      let* y2 := M.copy γ0_1 in
                      let* α0 : f64.t := M.read x1 in
                      let* α1 : f64.t := M.read x2 in
                      let* α2 : f64.t := BinOp.Panic.sub α0 α1 in
                      let* α3 : f64.t := M.read y1 in
                      let* α4 : f64.t := M.read y2 in
                      let* α5 : f64.t := BinOp.Panic.sub α3 α4 in
                      let* α6 : f64.t := BinOp.Panic.mul α2 α5 in
                      let* α7 : f64.t := M.call (impl f64.t "abs" α6) in
                      M.alloc α7
                    end) :
                    M (M.Val f64.t)
                ]
            end) :
            M (M.Val f64.t)
        ] in
    M.read α1.
  
  Axiom area_is_impl : impl Self "area" = area.
  
  (*
      fn perimeter(&self) -> f64 {
          let Point { x: x1, y: y1 } = self.p1;
          let Point { x: x2, y: y2 } = self.p2;
  
          2.0 * ((x1 - x2).abs() + (y1 - y2).abs())
      }
  *)
  Definition perimeter (self : ref Self) : M f64.t :=
    let* self := M.alloc self in
    let* α0 : ref associated_functions_and_methods.Rectangle.t := M.read self in
    let* α1 : M.Val f64.t :=
      match_operator
        (associated_functions_and_methods.Rectangle.Get_p1 (deref α0))
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            |
                {|
                  associated_functions_and_methods.Point.x := _;
                  associated_functions_and_methods.Point.y := _;
                |}
                =>
              let γ0_0 := associated_functions_and_methods.Point.Get_x γ in
              let γ0_1 := associated_functions_and_methods.Point.Get_y γ in
              let* x1 := M.copy γ0_0 in
              let* y1 := M.copy γ0_1 in
              let* α0 : ref associated_functions_and_methods.Rectangle.t :=
                M.read self in
              match_operator
                (associated_functions_and_methods.Rectangle.Get_p2 (deref α0))
                [
                  fun γ =>
                    (let* α0 := M.read γ in
                    match α0 with
                    |
                        {|
                          associated_functions_and_methods.Point.x := _;
                          associated_functions_and_methods.Point.y := _;
                        |}
                        =>
                      let γ0_0 :=
                        associated_functions_and_methods.Point.Get_x γ in
                      let γ0_1 :=
                        associated_functions_and_methods.Point.Get_y γ in
                      let* x2 := M.copy γ0_0 in
                      let* y2 := M.copy γ0_1 in
                      let* α0 : f64.t :=
                        M.read (UnsupportedLiteral : M.Val f64.t) in
                      let* α1 : f64.t := M.read x1 in
                      let* α2 : f64.t := M.read x2 in
                      let* α3 : f64.t := BinOp.Panic.sub α1 α2 in
                      let* α4 : f64.t := M.call (impl f64.t "abs" α3) in
                      let* α5 : f64.t := M.read y1 in
                      let* α6 : f64.t := M.read y2 in
                      let* α7 : f64.t := BinOp.Panic.sub α5 α6 in
                      let* α8 : f64.t := M.call (impl f64.t "abs" α7) in
                      let* α9 : f64.t := BinOp.Panic.add α4 α8 in
                      let* α10 : f64.t := BinOp.Panic.mul α0 α9 in
                      M.alloc α10
                    end) :
                    M (M.Val f64.t)
                ]
            end) :
            M (M.Val f64.t)
        ] in
    M.read α1.
  
  Axiom perimeter_is_impl : impl Self "perimeter" = perimeter.
  
  (*
      fn translate(&mut self, x: f64, y: f64) {
          self.p1.x += x;
          self.p2.x += x;
  
          self.p1.y += y;
          self.p2.y += y;
      }
  *)
  Definition translate (self : mut_ref Self) (x : f64.t) (y : f64.t) : M unit :=
    let* self := M.alloc self in
    let* x := M.alloc x in
    let* y := M.alloc y in
    let* _ : M.Val unit :=
      let* β : M.Val f64.t :=
        let* α0 : mut_ref associated_functions_and_methods.Rectangle.t :=
          M.read self in
        M.pure
          (associated_functions_and_methods.Point.Get_x
            (associated_functions_and_methods.Rectangle.Get_p1 (deref α0))) in
      let* α0 := M.read β in
      let* α1 : f64.t := M.read x in
      let* α2 := BinOp.Panic.add α0 α1 in
      assign β α2 in
    let* _ : M.Val unit :=
      let* β : M.Val f64.t :=
        let* α0 : mut_ref associated_functions_and_methods.Rectangle.t :=
          M.read self in
        M.pure
          (associated_functions_and_methods.Point.Get_x
            (associated_functions_and_methods.Rectangle.Get_p2 (deref α0))) in
      let* α0 := M.read β in
      let* α1 : f64.t := M.read x in
      let* α2 := BinOp.Panic.add α0 α1 in
      assign β α2 in
    let* _ : M.Val unit :=
      let* β : M.Val f64.t :=
        let* α0 : mut_ref associated_functions_and_methods.Rectangle.t :=
          M.read self in
        M.pure
          (associated_functions_and_methods.Point.Get_y
            (associated_functions_and_methods.Rectangle.Get_p1 (deref α0))) in
      let* α0 := M.read β in
      let* α1 : f64.t := M.read y in
      let* α2 := BinOp.Panic.add α0 α1 in
      assign β α2 in
    let* _ : M.Val unit :=
      let* β : M.Val f64.t :=
        let* α0 : mut_ref associated_functions_and_methods.Rectangle.t :=
          M.read self in
        M.pure
          (associated_functions_and_methods.Point.Get_y
            (associated_functions_and_methods.Rectangle.Get_p2 (deref α0))) in
      let* α0 := M.read β in
      let* α1 : f64.t := M.read y in
      let* α2 := BinOp.Panic.add α0 α1 in
      assign β α2 in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Axiom translate_is_impl : impl Self "translate" = translate.
End Impl_associated_functions_and_methods_Rectangle_t.
End Impl_associated_functions_and_methods_Rectangle_t.

Module  Pair.
Section Pair.
  Record t : Set := {
    x0 : alloc.boxed.Box.t i32.t alloc.boxed.Box.Default.A;
    x1 : alloc.boxed.Box.t i32.t alloc.boxed.Box.Default.A;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
  Definition Get_1 :=
    Ref.map (fun α => Some α.(x1)) (fun β α => Some (α <| x1 := β |>)).
End Pair.
End Pair.

Module  Impl_associated_functions_and_methods_Pair_t.
Section Impl_associated_functions_and_methods_Pair_t.
  Definition Self : Set := associated_functions_and_methods.Pair.t.
  
  (*
      fn destroy(self) {
          // Destructure `self`
          let Pair(first, second) = self;
  
          println!("Destroying Pair({}, {})", first, second);
  
          // `first` and `second` go out of scope and get freed
      }
  *)
  Definition destroy (self : Self) : M unit :=
    let* self := M.alloc self in
    let* α0 : M.Val unit :=
      match_operator
        self
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | associated_functions_and_methods.Pair.Build_t _ _ =>
              let γ0_0 := associated_functions_and_methods.Pair.Get_0 γ in
              let γ0_1 := associated_functions_and_methods.Pair.Get_1 γ in
              let* first := M.copy γ0_0 in
              let* second := M.copy γ0_1 in
              let* _ : M.Val unit :=
                let* _ : M.Val unit :=
                  let* α0 : ref str.t := M.read (mk_str "Destroying Pair(") in
                  let* α1 : ref str.t := M.read (mk_str ", ") in
                  let* α2 : ref str.t := M.read (mk_str ")
") in
                  let* α3 : M.Val (array (ref str.t)) :=
                    M.alloc [ α0; α1; α2 ] in
                  let* α4 : M.Val (ref (array (ref str.t))) :=
                    M.alloc (borrow α3) in
                  let* α5 : ref (slice (ref str.t)) :=
                    M.read (pointer_coercion "Unsize" α4) in
                  let* α6 : core.fmt.rt.Argument.t :=
                    M.call
                      (impl core.fmt.rt.Argument.t "new_display"
                        (borrow first)) in
                  let* α7 : core.fmt.rt.Argument.t :=
                    M.call
                      (impl core.fmt.rt.Argument.t "new_display"
                        (borrow second)) in
                  let* α8 : M.Val (array core.fmt.rt.Argument.t) :=
                    M.alloc [ α6; α7 ] in
                  let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                    M.alloc (borrow α8) in
                  let* α10 : ref (slice core.fmt.rt.Argument.t) :=
                    M.read (pointer_coercion "Unsize" α9) in
                  let* α11 : core.fmt.Arguments.t :=
                    M.call (impl core.fmt.Arguments.t "new_v1" α5 α10) in
                  let* α12 : unit := M.call (std.io.stdio._print α11) in
                  M.alloc α12 in
                M.alloc tt in
              M.alloc tt
            end) :
            M (M.Val unit)
        ] in
    M.read α0.
  
  Axiom destroy_is_impl : impl Self "destroy" = destroy.
End Impl_associated_functions_and_methods_Pair_t.
End Impl_associated_functions_and_methods_Pair_t.

(*
fn main() {
    let rectangle = Rectangle {
        // Associated functions are called using double colons
        p1: Point::origin(),
        p2: Point::new(3.0, 4.0),
    };

    // Methods are called using the dot operator
    // Note that the first argument `&self` is implicitly passed, i.e.
    // `rectangle.perimeter()` === `Rectangle::perimeter(&rectangle)`
    println!("Rectangle perimeter: {}", rectangle.perimeter());
    println!("Rectangle area: {}", rectangle.area());

    let mut square = Rectangle {
        p1: Point::origin(),
        p2: Point::new(1.0, 1.0),
    };

    // Error! `rectangle` is immutable, but this method requires a mutable
    // object
    //rectangle.translate(1.0, 0.0);
    // TODO ^ Try uncommenting this line

    // Okay! Mutable objects can call mutable methods
    square.translate(1.0, 1.0);

    let pair = Pair(Box::new(1), Box::new(2));

    pair.destroy();

    // Error! Previous `destroy` call "consumed" `pair`
    //pair.destroy();
    // TODO ^ Try uncommenting this line
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* rectangle : M.Val associated_functions_and_methods.Rectangle.t :=
    let* α0 : associated_functions_and_methods.Point.t :=
      M.call (impl associated_functions_and_methods.Point.t "origin") in
    let* α1 : f64.t := M.read (UnsupportedLiteral : M.Val f64.t) in
    let* α2 : f64.t := M.read (UnsupportedLiteral : M.Val f64.t) in
    let* α3 : associated_functions_and_methods.Point.t :=
      M.call (impl associated_functions_and_methods.Point.t "new" α1 α2) in
    M.alloc
      {|
        associated_functions_and_methods.Rectangle.p1 := α0;
        associated_functions_and_methods.Rectangle.p2 := α3;
      |} in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "Rectangle perimeter: ") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
      let* α4 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α3) in
      let* α5 : f64.t :=
        M.call
          (impl associated_functions_and_methods.Rectangle.t "perimeter"
            (borrow rectangle)) in
      let* α6 : M.Val f64.t := M.alloc α5 in
      let* α7 : core.fmt.rt.Argument.t :=
        M.call (impl core.fmt.rt.Argument.t "new_display" (borrow α6)) in
      let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
      let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α8) in
      let* α10 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α9) in
      let* α11 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_v1" α4 α10) in
      let* α12 : unit := M.call (std.io.stdio._print α11) in
      M.alloc α12 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "Rectangle area: ") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
      let* α4 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α3) in
      let* α5 : f64.t :=
        M.call
          (impl associated_functions_and_methods.Rectangle.t "area"
            (borrow rectangle)) in
      let* α6 : M.Val f64.t := M.alloc α5 in
      let* α7 : core.fmt.rt.Argument.t :=
        M.call (impl core.fmt.rt.Argument.t "new_display" (borrow α6)) in
      let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α7 ] in
      let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α8) in
      let* α10 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α9) in
      let* α11 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_v1" α4 α10) in
      let* α12 : unit := M.call (std.io.stdio._print α11) in
      M.alloc α12 in
    M.alloc tt in
  let* square : M.Val associated_functions_and_methods.Rectangle.t :=
    let* α0 : associated_functions_and_methods.Point.t :=
      M.call (impl associated_functions_and_methods.Point.t "origin") in
    let* α1 : f64.t := M.read (UnsupportedLiteral : M.Val f64.t) in
    let* α2 : f64.t := M.read (UnsupportedLiteral : M.Val f64.t) in
    let* α3 : associated_functions_and_methods.Point.t :=
      M.call (impl associated_functions_and_methods.Point.t "new" α1 α2) in
    M.alloc
      {|
        associated_functions_and_methods.Rectangle.p1 := α0;
        associated_functions_and_methods.Rectangle.p2 := α3;
      |} in
  let* _ : M.Val unit :=
    let* α0 : f64.t := M.read (UnsupportedLiteral : M.Val f64.t) in
    let* α1 : f64.t := M.read (UnsupportedLiteral : M.Val f64.t) in
    let* α2 : unit :=
      M.call
        (impl associated_functions_and_methods.Rectangle.t "translate"
          (borrow_mut square)
          α0
          α1) in
    M.alloc α2 in
  let* pair : M.Val associated_functions_and_methods.Pair.t :=
    let* α0 : alloc.boxed.Box.t i32.t alloc.alloc.Global.t :=
      M.call
        (impl (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) "new"
          ((Integer.of_Z 1) : i32.t)) in
    let* α1 : alloc.boxed.Box.t i32.t alloc.alloc.Global.t :=
      M.call
        (impl (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) "new"
          ((Integer.of_Z 2) : i32.t)) in
    M.alloc (associated_functions_and_methods.Pair.Build_t α0 α1) in
  let* _ : M.Val unit :=
    let* α0 : associated_functions_and_methods.Pair.t := M.read pair in
    let* α1 : unit :=
      M.call (impl associated_functions_and_methods.Pair.t "destroy" α0) in
    M.alloc α1 in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
