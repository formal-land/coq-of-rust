(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn create_fn() -> impl Fn() {
    let text = "Fn".to_owned();

    move || println!("This is a: {}", text)
}
*)
Definition create_fn : M _ (* OpaqueTy *) :=
  let* text : M.Val alloc.string.String.t :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        alloc.borrow.ToOwned.to_owned (Self := str.t) (Trait := ℐ))) in
    let* α1 : ref str.t := M.read (mk_str "Fn") in
    let* α2 : alloc.string.String.t := M.call (α0 α1) in
    M.alloc α2 in
  let* α0 : M.Val (unit -> M unit) :=
    M.alloc
      ((let* _ : M.Val unit :=
        let* α0 : ref str.t := M.read (mk_str "This is a: ") in
        let* α1 : ref str.t := M.read (mk_str "
") in
        let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
        let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
        let* α4 : ref (slice (ref str.t)) :=
          M.read (pointer_coercion "Unsize" α3) in
        let* α5 : core.fmt.rt.Argument.t :=
          M.call (impl core.fmt.rt.Argument.t "new_display" (borrow text)) in
        let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
        let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
          M.alloc (borrow α6) in
        let* α8 : ref (slice core.fmt.rt.Argument.t) :=
          M.read (pointer_coercion "Unsize" α7) in
        let* α9 : core.fmt.Arguments.t :=
          M.call (impl core.fmt.Arguments.t "new_v1" α4 α8) in
        let* α10 : unit := M.call (std.io.stdio._print α9) in
        M.alloc α10 in
      let* α0 : M.Val unit := M.alloc tt in
      M.read α0) :
      M unit) in
  M.read α0.

Error OpaqueTy.

(*
fn create_fnmut() -> impl FnMut() {
    let text = "FnMut".to_owned();

    move || println!("This is a: {}", text)
}
*)
Definition create_fnmut : M _ (* OpaqueTy *) :=
  let* text : M.Val alloc.string.String.t :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        alloc.borrow.ToOwned.to_owned (Self := str.t) (Trait := ℐ))) in
    let* α1 : ref str.t := M.read (mk_str "FnMut") in
    let* α2 : alloc.string.String.t := M.call (α0 α1) in
    M.alloc α2 in
  let* α0 : M.Val (unit -> M unit) :=
    M.alloc
      ((let* _ : M.Val unit :=
        let* α0 : ref str.t := M.read (mk_str "This is a: ") in
        let* α1 : ref str.t := M.read (mk_str "
") in
        let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
        let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
        let* α4 : ref (slice (ref str.t)) :=
          M.read (pointer_coercion "Unsize" α3) in
        let* α5 : core.fmt.rt.Argument.t :=
          M.call (impl core.fmt.rt.Argument.t "new_display" (borrow text)) in
        let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
        let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
          M.alloc (borrow α6) in
        let* α8 : ref (slice core.fmt.rt.Argument.t) :=
          M.read (pointer_coercion "Unsize" α7) in
        let* α9 : core.fmt.Arguments.t :=
          M.call (impl core.fmt.Arguments.t "new_v1" α4 α8) in
        let* α10 : unit := M.call (std.io.stdio._print α9) in
        M.alloc α10 in
      let* α0 : M.Val unit := M.alloc tt in
      M.read α0) :
      M unit) in
  M.read α0.

(*
fn create_fnonce() -> impl FnOnce() {
    let text = "FnOnce".to_owned();

    move || println!("This is a: {}", text)
}
*)
Definition create_fnonce : M _ (* OpaqueTy *) :=
  let* text : M.Val alloc.string.String.t :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        alloc.borrow.ToOwned.to_owned (Self := str.t) (Trait := ℐ))) in
    let* α1 : ref str.t := M.read (mk_str "FnOnce") in
    let* α2 : alloc.string.String.t := M.call (α0 α1) in
    M.alloc α2 in
  let* α0 : M.Val (unit -> M unit) :=
    M.alloc
      ((let* _ : M.Val unit :=
        let* α0 : ref str.t := M.read (mk_str "This is a: ") in
        let* α1 : ref str.t := M.read (mk_str "
") in
        let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
        let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
        let* α4 : ref (slice (ref str.t)) :=
          M.read (pointer_coercion "Unsize" α3) in
        let* α5 : core.fmt.rt.Argument.t :=
          M.call (impl core.fmt.rt.Argument.t "new_display" (borrow text)) in
        let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
        let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
          M.alloc (borrow α6) in
        let* α8 : ref (slice core.fmt.rt.Argument.t) :=
          M.read (pointer_coercion "Unsize" α7) in
        let* α9 : core.fmt.Arguments.t :=
          M.call (impl core.fmt.Arguments.t "new_v1" α4 α8) in
        let* α10 : unit := M.call (std.io.stdio._print α9) in
        M.alloc α10 in
      let* α0 : M.Val unit := M.alloc tt in
      M.read α0) :
      M unit) in
  M.read α0.

(*
fn main() {
    let fn_plain = create_fn();
    let mut fn_mut = create_fnmut();
    let fn_once = create_fnonce();

    fn_plain();
    fn_mut();
    fn_once();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* fn_plain : M.Val type not implemented :=
    let* α0 : type not implemented :=
      M.call functions_closures_as_output_parameters.create_fn in
    M.alloc α0 in
  let* fn_mut : M.Val type not implemented :=
    let* α0 : type not implemented :=
      M.call functions_closures_as_output_parameters.create_fnmut in
    M.alloc α0 in
  let* fn_once : M.Val type not implemented :=
    let* α0 : type not implemented :=
      M.call functions_closures_as_output_parameters.create_fnonce in
    M.alloc α0 in
  let* _ : M.Val unit :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.ops.function.Fn.call
          (Self := type not implemented)
          (Args := unit)
          (Trait := ℐ))) in
    let* α1 : unit := M.call (α0 (borrow fn_plain) tt) in
    M.alloc α1 in
  let* _ : M.Val unit :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.ops.function.FnMut.call_mut
          (Self := type not implemented)
          (Args := unit)
          (Trait := ℐ))) in
    let* α1 : unit := M.call (α0 (borrow_mut fn_mut) tt) in
    M.alloc α1 in
  let* _ : M.Val unit :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.ops.function.FnOnce.call_once
          (Self := type not implemented)
          (Args := unit)
          (Trait := ℐ))) in
    let* α1 : type not implemented := M.read fn_once in
    let* α2 : unit := M.call (α0 α1 tt) in
    M.alloc α2 in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
