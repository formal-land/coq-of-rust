(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Empty.
Section Empty.
  Inductive t : Set := Build.
End Empty.
End Empty.

Module  Null.
Section Null.
  Inductive t : Set := Build.
End Null.
End Null.

Module  DoubleDrop.
Section DoubleDrop.
  Class Trait (Self : Set) {T : Set} : Type := {
    double_drop : Self -> T -> M unit;
  }.
  
End DoubleDrop.
End DoubleDrop.

Module  Impl_generics_traits_DoubleDrop_T_for_U.
Section Impl_generics_traits_DoubleDrop_T_for_U.
  Context {T U : Set}.
  
  Definition Self : Set := U.
  
  (*
      fn double_drop(self, _: T) {}
  *)
  Definition double_drop (self : Self) (Pattern : T) : M unit :=
    let* self := M.alloc self in
    let* Pattern := M.alloc Pattern in
    M.pure tt.
  
  Axiom double_drop_is_impl : impl Self "double_drop" = double_drop.
  
  Global Instance ℐ : generics_traits.DoubleDrop.Trait Self (T := T) := {
    generics_traits.DoubleDrop.double_drop := double_drop;
  }.
End Impl_generics_traits_DoubleDrop_T_for_U.
End Impl_generics_traits_DoubleDrop_T_for_U.

(*
fn main() {
    let empty = Empty;
    let null = Null;

    // Deallocate `empty` and `null`.
    empty.double_drop(null);

    //empty;
    //null;
    // ^ TODO: Try uncommenting these lines.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* empty : M.Val generics_traits.Empty.t :=
    M.alloc generics_traits.Empty.Build in
  let* null : M.Val generics_traits.Null.t :=
    M.alloc generics_traits.Null.Build in
  let* _ : M.Val unit :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        generics_traits.DoubleDrop.double_drop
          (Self := generics_traits.Empty.t)
          (T := generics_traits.Null.t)
          (Trait := ℐ))) in
    let* α1 : generics_traits.Empty.t := M.read empty in
    let* α2 : generics_traits.Null.t := M.read null in
    let* α3 : unit := M.call (α0 α1 α2) in
    M.alloc α3 in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
