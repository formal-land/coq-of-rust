(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_basic_contract_caller_AccountId_t.
Section Impl_core_default_Default_for_basic_contract_caller_AccountId_t.
  Definition Self : Set := basic_contract_caller.AccountId.t.
  
  (*
  Default
  *)
  Definition default : M basic_contract_caller.AccountId.t :=
    ltac:(M.monadic (
      basic_contract_caller.AccountId.Build_t
        (M.call (|ltac:(M.get_method (fun ℐ =>
          core.default.Default.default (Self := u128.t) (Trait := ℐ)))
        |))
    )).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_basic_contract_caller_AccountId_t.
End Impl_core_default_Default_for_basic_contract_caller_AccountId_t.

Module  Impl_core_clone_Clone_for_basic_contract_caller_AccountId_t.
Section Impl_core_clone_Clone_for_basic_contract_caller_AccountId_t.
  Definition Self : Set := basic_contract_caller.AccountId.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M basic_contract_caller.AccountId.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.clone.AssertParamIsClone.t u128.t))
            [
              fun (γ : M.Val (core.clone.AssertParamIsClone.t u128.t)) =>
                (deref (M.read (| self |))) :
                M.Val basic_contract_caller.AccountId.t
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_basic_contract_caller_AccountId_t.
End Impl_core_clone_Clone_for_basic_contract_caller_AccountId_t.

Module  Impl_core_marker_Copy_for_basic_contract_caller_AccountId_t.
Section Impl_core_marker_Copy_for_basic_contract_caller_AccountId_t.
  Definition Self : Set := basic_contract_caller.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_basic_contract_caller_AccountId_t.
End Impl_core_marker_Copy_for_basic_contract_caller_AccountId_t.

Ltac Hash := exact (array u8.t).

Module Error.
  Inductive t : Set :=
  .
End Error.

Module  OtherContract.
Section OtherContract.
  Record t : Set := {
    value : bool.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End OtherContract.
End OtherContract.

Module  Impl_basic_contract_caller_OtherContract_t.
Section Impl_basic_contract_caller_OtherContract_t.
  Definition Self : Set := basic_contract_caller.OtherContract.t.
  
  (*
      pub fn new(init_value: bool) -> Self {
          Self { value: init_value }
      }
  *)
  Definition new (init_value : bool.t) : M Self :=
    ltac:(M.monadic (
      let init_value := M.alloc (| init_value |) in
      {| basic_contract_caller.OtherContract.value := M.read (| init_value |);
      |} : basic_contract_caller.OtherContract.t
    )).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn flip(&mut self) {
          self.value = !self.value;
      }
  *)
  Definition flip (self : mut_ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        let _ : M.Val unit :=
          assign (|
            basic_contract_caller.OtherContract.Get_value
              (deref (M.read (| self |))),
            UnOp.not
              (M.read (|
                basic_contract_caller.OtherContract.Get_value
                  (deref (M.read (| self |)))
              |))
          |) in
        M.alloc (| tt |)
      |)
    )).
  
  Global Instance AssociatedFunction_flip :
    Notations.DoubleColon Self "flip" := {
    Notations.double_colon := flip;
  }.
  
  (*
      pub fn get(&self) -> bool {
          self.value
      }
  *)
  Definition get (self : ref Self) : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        basic_contract_caller.OtherContract.Get_value
          (deref (M.read (| self |)))
      |)
    )).
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
End Impl_basic_contract_caller_OtherContract_t.
End Impl_basic_contract_caller_OtherContract_t.

Module  BasicContractCaller.
Section BasicContractCaller.
  Record t : Set := {
    other_contract : basic_contract_caller.OtherContract.t;
  }.
  
  Definition Get_other_contract :=
    Ref.map
      (fun α => Some α.(other_contract))
      (fun β α => Some (α <| other_contract := β |>)).
End BasicContractCaller.
End BasicContractCaller.

Module  Impl_basic_contract_caller_BasicContractCaller_t.
Section Impl_basic_contract_caller_BasicContractCaller_t.
  Definition Self : Set := basic_contract_caller.BasicContractCaller.t.
  
  (*
      pub fn new(other_contract_code_hash: Hash) -> Self {
          // let other_contract = OtherContract::new(true)
          //     .code_hash(other_contract_code_hash)
          //     .endowment(0)
          //     .salt_bytes([0xDE, 0xAD, 0xBE, 0xEF])
          //     .instantiate();
          let other_contract = todo!();
  
          Self { other_contract }
      }
  *)
  Definition new
      (other_contract_code_hash : ltac:(basic_contract_caller.Hash))
      : M Self :=
    ltac:(M.monadic (
      let other_contract_code_hash := M.alloc (| other_contract_code_hash |) in
      M.read (|
        let other_contract : M.Val basic_contract_caller.OtherContract.t :=
          M.alloc (|
            never_to_any (|
              M.call (|(core.panicking.panic
                (M.read (| mk_str "not yet implemented" |)))
              |)
            |)
          |) in
        M.alloc (|
          {|
            basic_contract_caller.BasicContractCaller.other_contract :=
              M.read (| other_contract |);
          |} : basic_contract_caller.BasicContractCaller.t
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn flip_and_get(&mut self) -> bool {
          self.other_contract.flip();
          self.other_contract.get()
      }
  *)
  Definition flip_and_get (self : mut_ref Self) : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(basic_contract_caller.OtherContract.t::["flip"]
              (borrow_mut
                (basic_contract_caller.BasicContractCaller.Get_other_contract
                  (deref (M.read (| self |))))))
            |)
          |) in
        M.alloc (|
          M.call (|(basic_contract_caller.OtherContract.t::["get"]
            (borrow
              (basic_contract_caller.BasicContractCaller.Get_other_contract
                (deref (M.read (| self |))))))
          |)
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_flip_and_get :
    Notations.DoubleColon Self "flip_and_get" := {
    Notations.double_colon := flip_and_get;
  }.
End Impl_basic_contract_caller_BasicContractCaller_t.
End Impl_basic_contract_caller_BasicContractCaller_t.
