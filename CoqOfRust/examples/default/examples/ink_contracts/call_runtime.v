(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_call_runtime_AccountId_t.
Section Impl_core_default_Default_for_call_runtime_AccountId_t.
  Definition Self : Set := call_runtime.AccountId.t.
  
  (*
  Default
  *)
  Definition default : M call_runtime.AccountId.t :=
    ltac:(M.monadic ((
      call_runtime.AccountId.Build_t
        (M.call (|ltac:(M.get_method (fun ℐ =>
          core.default.Default.default (Self := u128.t) (Trait := ℐ)))
        |))
    ) : call_runtime.AccountId.t)).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_call_runtime_AccountId_t.
End Impl_core_default_Default_for_call_runtime_AccountId_t.

Module  Impl_core_clone_Clone_for_call_runtime_AccountId_t.
Section Impl_core_clone_Clone_for_call_runtime_AccountId_t.
  Definition Self : Set := call_runtime.AccountId.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M call_runtime.AccountId.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.clone.AssertParamIsClone.t u128.t))
            [
              fun (γ : M.Val (core.clone.AssertParamIsClone.t u128.t)) =>
                (deref (M.read (| self |))) : M.Val call_runtime.AccountId.t
            ])
      |)
    ) : call_runtime.AccountId.t)).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_call_runtime_AccountId_t.
End Impl_core_clone_Clone_for_call_runtime_AccountId_t.

Module  Impl_core_marker_Copy_for_call_runtime_AccountId_t.
Section Impl_core_marker_Copy_for_call_runtime_AccountId_t.
  Definition Self : Set := call_runtime.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_call_runtime_AccountId_t.
End Impl_core_marker_Copy_for_call_runtime_AccountId_t.

Ltac Balance := exact u128.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : call_runtime.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module MultiAddress.
  Inductive t (AccountId : Set) (AccountIndex : Set) : Set :=
  .
End MultiAddress.

Module  Impl_core_convert_From_call_runtime_AccountId_t_for_call_runtime_MultiAddress_t_call_runtime_AccountId_t_Tuple_.
Section Impl_core_convert_From_call_runtime_AccountId_t_for_call_runtime_MultiAddress_t_call_runtime_AccountId_t_Tuple_.
  Definition Self : Set :=
    call_runtime.MultiAddress.t call_runtime.AccountId.t unit.
  
  (*
      fn from(_value: AccountId) -> Self {
          unimplemented!()
      }
  *)
  Definition from (_value : call_runtime.AccountId.t) : M Self :=
    ltac:(M.monadic ((
      let _value := M.alloc (| _value |) in
      (never_to_any
        (B := call_runtime.MultiAddress.t call_runtime.AccountId.t unit)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    ) : Self)).
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait Self (T := call_runtime.AccountId.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_call_runtime_AccountId_t_for_call_runtime_MultiAddress_t_call_runtime_AccountId_t_Tuple_.
End Impl_core_convert_From_call_runtime_AccountId_t_for_call_runtime_MultiAddress_t_call_runtime_AccountId_t_Tuple_.

Module BalancesCall.
  Module Transfer.
    Record t : Set := {
      dest : call_runtime.MultiAddress.t call_runtime.AccountId.t unit;
      value : u128.t;
    }.
  End Transfer.
  
  Inductive t : Set :=
  | Transfer (_ : Transfer.t).
  
  Definition Get_Transfer_dest :=
    Ref.map
      (fun α => match α with | Transfer α => Some α.(Transfer.dest) end)
      (fun β α =>
        match α with
        | Transfer α => Some (Transfer (α <| Transfer.dest := β |>))
        end).
  
  Definition Get_Transfer_value :=
    Ref.map
      (fun α => match α with | Transfer α => Some α.(Transfer.value) end)
      (fun β α =>
        match α with
        | Transfer α => Some (Transfer (α <| Transfer.value := β |>))
        end).
End BalancesCall.

Module RuntimeCall.
  Inductive t : Set :=
  | Balances (_ : call_runtime.BalancesCall.t).
  
  Definition Get_Balances_0 :=
    Ref.map
      (fun α => match α with | Balances α0 => Some α0 end)
      (fun β α => match α with | Balances _ => Some (Balances β) end).
End RuntimeCall.

Module  RuntimeCaller.
Section RuntimeCaller.
  Inductive t : Set := Build.
End RuntimeCaller.
End RuntimeCaller.

Module  Impl_core_default_Default_for_call_runtime_RuntimeCaller_t.
Section Impl_core_default_Default_for_call_runtime_RuntimeCaller_t.
  Definition Self : Set := call_runtime.RuntimeCaller.t.
  
  (*
  Default
  *)
  Definition default : M call_runtime.RuntimeCaller.t :=
    ltac:(M.monadic (( call_runtime.RuntimeCaller.Build
    ) : call_runtime.RuntimeCaller.t)).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_call_runtime_RuntimeCaller_t.
End Impl_core_default_Default_for_call_runtime_RuntimeCaller_t.

Module RuntimeError.
  Inductive t : Set :=
  | CallRuntimeFailed.
End RuntimeError.

Module  Impl_core_fmt_Debug_for_call_runtime_RuntimeError_t.
Section Impl_core_fmt_Debug_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["write_str"]
        (M.read (| f |))
        (M.read (| mk_str "CallRuntimeFailed" |)))
      |)
    ) : ltac:(core.fmt.Result))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_call_runtime_RuntimeError_t.
End Impl_core_fmt_Debug_for_call_runtime_RuntimeError_t.

Module  Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError_t.
Section Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError_t.
End Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError_t.

Module  Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError_t.
Section Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  (*
  PartialEq
  *)
  Definition eq
      (self : ref Self)
      (other : ref call_runtime.RuntimeError.t)
      : M bool.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let other := M.alloc (| other |) in
      true
    ) : bool.t)).
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError_t.
End Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError_t.

Module  Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError_t.
Section Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError_t.
End Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError_t.

Module  Impl_core_cmp_Eq_for_call_runtime_RuntimeError_t.
Section Impl_core_cmp_Eq_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      tt
    ) : unit)).
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_call_runtime_RuntimeError_t.
End Impl_core_cmp_Eq_for_call_runtime_RuntimeError_t.

Module EnvError.
  Inductive t : Set :=
  | CallRuntimeFailed
  | AnotherKindOfError.
End EnvError.

Module  Impl_core_convert_From_call_runtime_EnvError_t_for_call_runtime_RuntimeError_t.
Section Impl_core_convert_From_call_runtime_EnvError_t_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  (*
      fn from(e: EnvError) -> Self {
          match e {
              EnvError::CallRuntimeFailed => RuntimeError::CallRuntimeFailed,
              _ => panic!("Unexpected error from `pallet-contracts`."),
          }
      }
  *)
  Definition from (e : call_runtime.EnvError.t) : M Self :=
    ltac:(M.monadic ((
      let e := M.alloc (| e |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            e
            [
              fun (γ : M.Val call_runtime.EnvError.t) =>
                match M.read (| γ |) with
                | call_runtime.EnvError.CallRuntimeFailed =>
                  M.alloc (| call_runtime.RuntimeError.CallRuntimeFailed |)
                | _ => M.break_match(||)
                end :
                M.Val call_runtime.RuntimeError.t;
              fun (γ : M.Val call_runtime.EnvError.t) =>
                (M.alloc (|
                  (never_to_any (B := call_runtime.RuntimeError.t)) (|
                    M.call (|(std.panicking.begin_panic
                      (M.read (|
                        mk_str "Unexpected error from `pallet-contracts`."
                      |)))
                    |)
                  |)
                |)) :
                M.Val call_runtime.RuntimeError.t
            ])
      |)
    ) : Self)).
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait Self (T := call_runtime.EnvError.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_call_runtime_EnvError_t_for_call_runtime_RuntimeError_t.
End Impl_core_convert_From_call_runtime_EnvError_t_for_call_runtime_RuntimeError_t.

Module  Impl_call_runtime_Env_t.
Section Impl_call_runtime_Env_t.
  Definition Self : Set := call_runtime.Env.t.
  
  (*
      fn call_runtime<Call>(&self, _call: &Call) -> Result<(), EnvError> {
          unimplemented!()
      }
  *)
  Definition call_runtime
      {Call : Set}
      (self : ref Self)
      (_call : ref Call)
      : M (core.result.Result.t unit call_runtime.EnvError.t) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let _call := M.alloc (| _call |) in
      (never_to_any (B := core.result.Result.t unit call_runtime.EnvError.t)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    ) : core.result.Result.t unit call_runtime.EnvError.t)).
  
  Global Instance AssociatedFunction_call_runtime {Call : Set} :
    Notations.DoubleColon Self "call_runtime" := {
    Notations.double_colon := call_runtime (Call := Call);
  }.
End Impl_call_runtime_Env_t.
End Impl_call_runtime_Env_t.

Module  Impl_call_runtime_RuntimeCaller_t.
Section Impl_call_runtime_RuntimeCaller_t.
  Definition Self : Set := call_runtime.RuntimeCaller.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env : M call_runtime.Env.t :=
    ltac:(M.monadic ((
      (never_to_any (B := call_runtime.Env.t)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    ) : call_runtime.Env.t)).
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon Self "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (self : ref Self) : M call_runtime.Env.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.call (|call_runtime.RuntimeCaller.t::["init_env"] |)
    ) : call_runtime.Env.t)).
  
  Global Instance AssociatedFunction_env : Notations.DoubleColon Self "env" := {
    Notations.double_colon := env;
  }.
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new : M Self :=
    ltac:(M.monadic ((
      M.call (|ltac:(M.get_method (fun ℐ =>
        core.default.Default.default
          (Self := call_runtime.RuntimeCaller.t)
          (Trait := ℐ)))
      |)
    ) : Self)).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn transfer_through_runtime(
          &mut self,
          receiver: AccountId,
          value: Balance,
      ) -> Result<(), RuntimeError> {
          self.env()
              .call_runtime(&RuntimeCall::Balances(BalancesCall::Transfer {
                  dest: receiver.into(),
                  value,
              }))
              .map_err(Into::into)
      }
  *)
  Definition transfer_through_runtime
      (self : mut_ref Self)
      (receiver : call_runtime.AccountId.t)
      (value : ltac:(call_runtime.Balance))
      : M (core.result.Result.t unit call_runtime.RuntimeError.t) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let receiver := M.alloc (| receiver |) in
      let value := M.alloc (| value |) in
      M.call (|((core.result.Result.t unit call_runtime.EnvError.t)::["map_err"]
        (M.call (|(call_runtime.Env.t::["call_runtime"]
          (borrow
            (M.alloc (|
              M.call (|(call_runtime.RuntimeCaller.t::["env"]
                (borrow (deref (M.read (| self |)))))
              |)
            |)))
          (borrow
            (M.alloc (|
              call_runtime.RuntimeCall.Balances
                ((call_runtime.BalancesCall.Transfer
                  {|
                  call_runtime.BalancesCall.Transfer.dest :=
                    M.call (|(ltac:(M.get_method (fun ℐ =>
                        core.convert.Into.into
                          (Self := call_runtime.AccountId.t)
                          (T :=
                            call_runtime.MultiAddress.t
                              call_runtime.AccountId.t
                              unit)
                          (Trait := ℐ)))
                      (M.read (| receiver |)))
                    |);
                  call_runtime.BalancesCall.Transfer.value :=
                    M.read (| value |);
                |} : call_runtime.BalancesCall.t))
            |))))
        |))
        ltac:(M.get_method (fun ℐ =>
          core.convert.Into.into
            (Self := call_runtime.EnvError.t)
            (T := call_runtime.RuntimeError.t)
            (Trait := ℐ))))
      |)
    ) : core.result.Result.t unit call_runtime.RuntimeError.t)).
  
  Global Instance AssociatedFunction_transfer_through_runtime :
    Notations.DoubleColon Self "transfer_through_runtime" := {
    Notations.double_colon := transfer_through_runtime;
  }.
  
  (*
      pub fn call_nonexistent_extrinsic(&mut self) -> Result<(), RuntimeError> {
          self.env().call_runtime(&()).map_err(Into::into)
      }
  *)
  Definition call_nonexistent_extrinsic
      (self : mut_ref Self)
      : M (core.result.Result.t unit call_runtime.RuntimeError.t) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.call (|((core.result.Result.t unit call_runtime.EnvError.t)::["map_err"]
        (M.call (|(call_runtime.Env.t::["call_runtime"]
          (borrow
            (M.alloc (|
              M.call (|(call_runtime.RuntimeCaller.t::["env"]
                (borrow (deref (M.read (| self |)))))
              |)
            |)))
          (borrow (M.alloc (| tt |))))
        |))
        ltac:(M.get_method (fun ℐ =>
          core.convert.Into.into
            (Self := call_runtime.EnvError.t)
            (T := call_runtime.RuntimeError.t)
            (Trait := ℐ))))
      |)
    ) : core.result.Result.t unit call_runtime.RuntimeError.t)).
  
  Global Instance AssociatedFunction_call_nonexistent_extrinsic :
    Notations.DoubleColon Self "call_nonexistent_extrinsic" := {
    Notations.double_colon := call_nonexistent_extrinsic;
  }.
End Impl_call_runtime_RuntimeCaller_t.
End Impl_call_runtime_RuntimeCaller_t.
