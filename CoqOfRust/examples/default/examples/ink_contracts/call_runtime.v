(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_call_runtime_AccountId_t.
Section Impl_core_default_Default_for_call_runtime_AccountId_t.
  Definition Self : Set := call_runtime.AccountId.t.
  
  (*
  Default
  *)
  Definition default : M call_runtime.AccountId.t :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.default.Default.default (Self := u128.t) (Trait := ℐ))) in
    let* α1 : u128.t := M.call α0 in
    M.pure (call_runtime.AccountId.Build_t α1).
  
  Axiom default_is_impl : impl Self "default" = default.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_call_runtime_AccountId_t.
End Impl_core_default_Default_for_call_runtime_AccountId_t.

Module  Impl_core_clone_Clone_for_call_runtime_AccountId_t.
Section Impl_core_clone_Clone_for_call_runtime_AccountId_t.
  Definition Self : Set := call_runtime.AccountId.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M call_runtime.AccountId.t :=
    let* self := M.alloc self in
    let* α0 : M.Val call_runtime.AccountId.t :=
      match_operator
        (DeclaredButUndefinedVariable
          (A := core.clone.AssertParamIsClone.t u128.t))
        [
          fun γ =>
            (let* α0 : ref call_runtime.AccountId.t := M.read self in
            M.pure (deref α0)) :
            M (M.Val call_runtime.AccountId.t)
        ] in
    M.read α0.
  
  Axiom clone_is_impl : impl Self "clone" = clone.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_call_runtime_AccountId_t.
End Impl_core_clone_Clone_for_call_runtime_AccountId_t.

Module  Impl_core_marker_Copy_for_call_runtime_AccountId_t.
Section Impl_core_marker_Copy_for_call_runtime_AccountId_t.
  Definition Self : Set := call_runtime.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_call_runtime_AccountId_t.
End Impl_core_marker_Copy_for_call_runtime_AccountId_t.

Ltac Balance := exact u128.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : call_runtime.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module MultiAddress.
  Inductive t (AccountId : Set) (AccountIndex : Set) : Set :=
  .
End MultiAddress.

Module  Impl_core_convert_From_call_runtime_AccountId_t_for_call_runtime_MultiAddress_t_call_runtime_AccountId_t_Tuple_.
Section Impl_core_convert_From_call_runtime_AccountId_t_for_call_runtime_MultiAddress_t_call_runtime_AccountId_t_Tuple_.
  Definition Self : Set :=
    call_runtime.MultiAddress.t call_runtime.AccountId.t unit.
  
  (*
      fn from(_value: AccountId) -> Self {
          unimplemented!()
      }
  *)
  Definition from (_value : call_runtime.AccountId.t) : M Self :=
    let* _value := M.alloc _value in
    let* α0 : ref str.t := M.read (mk_str "not implemented") in
    let* α1 : never.t := M.call (core.panicking.panic α0) in
    never_to_any α1.
  
  Axiom from_is_impl : impl Self "from" = from.
  
  Global Instance ℐ :
    core.convert.From.Trait Self (T := call_runtime.AccountId.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_call_runtime_AccountId_t_for_call_runtime_MultiAddress_t_call_runtime_AccountId_t_Tuple_.
End Impl_core_convert_From_call_runtime_AccountId_t_for_call_runtime_MultiAddress_t_call_runtime_AccountId_t_Tuple_.

Module BalancesCall.
  Module Transfer.
    Record t : Set := {
      dest : call_runtime.MultiAddress.t call_runtime.AccountId.t unit;
      value : u128.t;
    }.
  End Transfer.
  
  Inductive t : Set :=
  | Transfer (_ : Transfer.t).
  
  Definition Get_Transfer_dest :=
    Ref.map
      (fun α => match α with | Transfer α => Some α.(Transfer.dest) end)
      (fun β α =>
        match α with
        | Transfer α => Some (Transfer (α <| Transfer.dest := β |>))
        end).
  
  Definition Get_Transfer_value :=
    Ref.map
      (fun α => match α with | Transfer α => Some α.(Transfer.value) end)
      (fun β α =>
        match α with
        | Transfer α => Some (Transfer (α <| Transfer.value := β |>))
        end).
End BalancesCall.

Module RuntimeCall.
  Inductive t : Set :=
  | Balances (_ : call_runtime.BalancesCall.t).
  
  Definition Get_Balances_0 :=
    Ref.map
      (fun α => match α with | Balances α0 => Some α0 end)
      (fun β α => match α with | Balances _ => Some (Balances β) end).
End RuntimeCall.

Module  RuntimeCaller.
Section RuntimeCaller.
  Inductive t : Set := Build.
End RuntimeCaller.
End RuntimeCaller.

Module  Impl_core_default_Default_for_call_runtime_RuntimeCaller_t.
Section Impl_core_default_Default_for_call_runtime_RuntimeCaller_t.
  Definition Self : Set := call_runtime.RuntimeCaller.t.
  
  (*
  Default
  *)
  Definition default : M call_runtime.RuntimeCaller.t :=
    M.pure call_runtime.RuntimeCaller.Build.
  
  Axiom default_is_impl : impl Self "default" = default.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_call_runtime_RuntimeCaller_t.
End Impl_core_default_Default_for_call_runtime_RuntimeCaller_t.

Module RuntimeError.
  Inductive t : Set :=
  | CallRuntimeFailed.
End RuntimeError.

Module  Impl_core_fmt_Debug_for_call_runtime_RuntimeError_t.
Section Impl_core_fmt_Debug_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "CallRuntimeFailed") in
    M.call (impl core.fmt.Formatter.t "write_str" α0 α1).
  
  Axiom fmt_is_impl : impl Self "fmt" = fmt.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_call_runtime_RuntimeError_t.
End Impl_core_fmt_Debug_for_call_runtime_RuntimeError_t.

Module  Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError_t.
Section Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError_t.
End Impl_core_marker_StructuralPartialEq_for_call_runtime_RuntimeError_t.

Module  Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError_t.
Section Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  (*
  PartialEq
  *)
  Definition eq
      (self : ref Self)
      (other : ref call_runtime.RuntimeError.t)
      : M bool.t :=
    let* self := M.alloc self in
    let* other := M.alloc other in
    M.pure true.
  
  Axiom eq_is_impl : impl Self "eq" = eq.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError_t.
End Impl_core_cmp_PartialEq_for_call_runtime_RuntimeError_t.

Module  Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError_t.
Section Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError_t.
End Impl_core_marker_StructuralEq_for_call_runtime_RuntimeError_t.

Module  Impl_core_cmp_Eq_for_call_runtime_RuntimeError_t.
Section Impl_core_cmp_Eq_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
    let* self := M.alloc self in
    M.pure tt.
  
  Axiom assert_receiver_is_total_eq_is_impl :
      impl Self "assert_receiver_is_total_eq" = assert_receiver_is_total_eq.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_call_runtime_RuntimeError_t.
End Impl_core_cmp_Eq_for_call_runtime_RuntimeError_t.

Module EnvError.
  Inductive t : Set :=
  | CallRuntimeFailed
  | AnotherKindOfError.
End EnvError.

Module  Impl_core_convert_From_call_runtime_EnvError_t_for_call_runtime_RuntimeError_t.
Section Impl_core_convert_From_call_runtime_EnvError_t_for_call_runtime_RuntimeError_t.
  Definition Self : Set := call_runtime.RuntimeError.t.
  
  (*
      fn from(e: EnvError) -> Self {
          match e {
              EnvError::CallRuntimeFailed => RuntimeError::CallRuntimeFailed,
              _ => panic!("Unexpected error from `pallet-contracts`."),
          }
      }
  *)
  Definition from (e : call_runtime.EnvError.t) : M Self :=
    let* e := M.alloc e in
    let* α0 : M.Val call_runtime.RuntimeError.t :=
      match_operator
        e
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | call_runtime.EnvError.CallRuntimeFailed =>
              M.alloc call_runtime.RuntimeError.CallRuntimeFailed
            | _ => M.break_match
            end) :
            M (M.Val call_runtime.RuntimeError.t);
          fun γ =>
            (let* α0 : ref str.t :=
              M.read (mk_str "Unexpected error from `pallet-contracts`.") in
            let* α1 : never.t := M.call (std.panicking.begin_panic α0) in
            let* α2 : call_runtime.RuntimeError.t := never_to_any α1 in
            M.alloc α2) :
            M (M.Val call_runtime.RuntimeError.t)
        ] in
    M.read α0.
  
  Axiom from_is_impl : impl Self "from" = from.
  
  Global Instance ℐ :
    core.convert.From.Trait Self (T := call_runtime.EnvError.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_call_runtime_EnvError_t_for_call_runtime_RuntimeError_t.
End Impl_core_convert_From_call_runtime_EnvError_t_for_call_runtime_RuntimeError_t.

Module  Impl_call_runtime_Env_t.
Section Impl_call_runtime_Env_t.
  Definition Self : Set := call_runtime.Env.t.
  
  (*
      fn call_runtime<Call>(&self, _call: &Call) -> Result<(), EnvError> {
          unimplemented!()
      }
  *)
  Definition call_runtime
      {Call : Set}
      (self : ref Self)
      (_call : ref Call)
      : M (core.result.Result.t unit call_runtime.EnvError.t) :=
    let* self := M.alloc self in
    let* _call := M.alloc _call in
    let* α0 : ref str.t := M.read (mk_str "not implemented") in
    let* α1 : never.t := M.call (core.panicking.panic α0) in
    never_to_any α1.
  
  Axiom call_runtime_is_impl :
      forall {Call : Set},
      impl Self "call_runtime" = call_runtime (Call := Call).
End Impl_call_runtime_Env_t.
End Impl_call_runtime_Env_t.

Module  Impl_call_runtime_RuntimeCaller_t.
Section Impl_call_runtime_RuntimeCaller_t.
  Definition Self : Set := call_runtime.RuntimeCaller.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env : M call_runtime.Env.t :=
    let* α0 : ref str.t := M.read (mk_str "not implemented") in
    let* α1 : never.t := M.call (core.panicking.panic α0) in
    never_to_any α1.
  
  Axiom init_env_is_impl : impl Self "init_env" = init_env.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (self : ref Self) : M call_runtime.Env.t :=
    let* self := M.alloc self in
    M.call (impl call_runtime.RuntimeCaller.t "init_env").
  
  Axiom env_is_impl : impl Self "env" = env.
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new : M Self :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.default.Default.default
          (Self := call_runtime.RuntimeCaller.t)
          (Trait := ℐ))) in
    M.call α0.
  
  Axiom new_is_impl : impl Self "new" = new.
  
  (*
      pub fn transfer_through_runtime(
          &mut self,
          receiver: AccountId,
          value: Balance,
      ) -> Result<(), RuntimeError> {
          self.env()
              .call_runtime(&RuntimeCall::Balances(BalancesCall::Transfer {
                  dest: receiver.into(),
                  value,
              }))
              .map_err(Into::into)
      }
  *)
  Definition transfer_through_runtime
      (self : mut_ref Self)
      (receiver : call_runtime.AccountId.t)
      (value : ltac:(call_runtime.Balance))
      : M (core.result.Result.t unit call_runtime.RuntimeError.t) :=
    let* self := M.alloc self in
    let* receiver := M.alloc receiver in
    let* value := M.alloc value in
    let* α0 : mut_ref call_runtime.RuntimeCaller.t := M.read self in
    let* α1 : call_runtime.Env.t :=
      M.call (impl call_runtime.RuntimeCaller.t "env" (borrow (deref α0))) in
    let* α2 : M.Val call_runtime.Env.t := M.alloc α1 in
    let* α3 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.convert.Into.into
          (Self := call_runtime.AccountId.t)
          (T := call_runtime.MultiAddress.t call_runtime.AccountId.t unit)
          (Trait := ℐ))) in
    let* α4 : call_runtime.AccountId.t := M.read receiver in
    let* α5 : call_runtime.MultiAddress.t call_runtime.AccountId.t unit :=
      M.call (α3 α4) in
    let* α6 : u128.t := M.read value in
    let* α7 : M.Val call_runtime.RuntimeCall.t :=
      M.alloc
        (call_runtime.RuntimeCall.Balances
          (call_runtime.BalancesCall.Transfer
            {|
            call_runtime.BalancesCall.Transfer.dest := α5;
            call_runtime.BalancesCall.Transfer.value := α6;
          |})) in
    let* α8 : core.result.Result.t unit call_runtime.EnvError.t :=
      M.call (impl call_runtime.Env.t "call_runtime" (borrow α2) (borrow α7)) in
    let* α9 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.convert.Into.into
          (Self := call_runtime.EnvError.t)
          (T := call_runtime.RuntimeError.t)
          (Trait := ℐ))) in
    M.call
      (impl (core.result.Result.t unit call_runtime.EnvError.t) "map_err"
        α8
        α9).
  
  Axiom transfer_through_runtime_is_impl :
      impl Self "transfer_through_runtime" = transfer_through_runtime.
  
  (*
      pub fn call_nonexistent_extrinsic(&mut self) -> Result<(), RuntimeError> {
          self.env().call_runtime(&()).map_err(Into::into)
      }
  *)
  Definition call_nonexistent_extrinsic
      (self : mut_ref Self)
      : M (core.result.Result.t unit call_runtime.RuntimeError.t) :=
    let* self := M.alloc self in
    let* α0 : mut_ref call_runtime.RuntimeCaller.t := M.read self in
    let* α1 : call_runtime.Env.t :=
      M.call (impl call_runtime.RuntimeCaller.t "env" (borrow (deref α0))) in
    let* α2 : M.Val call_runtime.Env.t := M.alloc α1 in
    let* α3 : M.Val unit := M.alloc tt in
    let* α4 : core.result.Result.t unit call_runtime.EnvError.t :=
      M.call (impl call_runtime.Env.t "call_runtime" (borrow α2) (borrow α3)) in
    let* α5 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.convert.Into.into
          (Self := call_runtime.EnvError.t)
          (T := call_runtime.RuntimeError.t)
          (Trait := ℐ))) in
    M.call
      (impl (core.result.Result.t unit call_runtime.EnvError.t) "map_err"
        α4
        α5).
  
  Axiom call_nonexistent_extrinsic_is_impl :
      impl Self "call_nonexistent_extrinsic" = call_nonexistent_extrinsic.
End Impl_call_runtime_RuntimeCaller_t.
End Impl_call_runtime_RuntimeCaller_t.
