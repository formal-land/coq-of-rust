(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructTuple
  {
    name := "AccountId";
    ty_params := [];
    fields := [ Ty.path "u128" ];
  } *)

Module Impl_core_default_Default_for_conditional_compilation_AccountId.
  Definition Self : Ty.t := Ty.path "conditional_compilation::AccountId".
  
  (*
  Default
  *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method "core::default::Default" (Ty.path "u128") [] [] "default" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.pure (Value.StructTuple "conditional_compilation::AccountId" [ α1 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_conditional_compilation_AccountId.

Module Impl_core_clone_Clone_for_conditional_compilation_AccountId.
  Definition Self : Ty.t := Ty.path "conditional_compilation::AccountId".
  
  (*
  Clone
  *)
  Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.match_operator Value.DeclaredButUndefined [ fun γ => M.read self ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_conditional_compilation_AccountId.

Module Impl_core_marker_Copy_for_conditional_compilation_AccountId.
  Definition Self : Ty.t := Ty.path "conditional_compilation::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance "core::marker::Copy" Self (* Trait polymorphic types *) [] (* Instance *) [].
End Impl_core_marker_Copy_for_conditional_compilation_AccountId.

Axiom Balance : (Ty.path "conditional_compilation::Balance") = (Ty.path "u128").

Axiom BlockNumber : (Ty.path "conditional_compilation::BlockNumber") = (Ty.path "u32").

(* StructRecord
  {
    name := "Env";
    ty_params := [];
    fields := [ ("caller", Ty.path "conditional_compilation::AccountId") ];
  } *)

(* Trait *)
(* Empty module 'Flip' *)

(* StructRecord
  {
    name := "Changes";
    ty_params := [];
    fields :=
      [ ("new_value", Ty.path "bool"); ("by_", Ty.path "conditional_compilation::AccountId") ];
  } *)

(* StructRecord
  {
    name := "ChangesDated";
    ty_params := [];
    fields :=
      [
        ("new_value", Ty.path "bool");
        ("by_", Ty.path "conditional_compilation::AccountId");
        ("when", Ty.path "u32")
      ];
  } *)

(* Enum Event *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "Changes";
        item := StructTuple [ Ty.path "conditional_compilation::Changes" ];
        discriminant := None;
      };
      {
        name := "ChangesDated";
        item := StructTuple [ Ty.path "conditional_compilation::ChangesDated" ];
        discriminant := None;
      }
    ];
} *)

Module Impl_conditional_compilation_Env.
  Definition Self : Ty.t := Ty.path "conditional_compilation::Env".
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (M.get_struct_record_field α0 "conditional_compilation::Env" "caller")
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_caller : M.IsAssociatedFunction Self "caller" caller.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; _event ] =>
      let* self := M.alloc self in
      let* _event := M.alloc _event in
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_emit_event : M.IsAssociatedFunction Self "emit_event" emit_event.
  
  (*
      fn block_number(&self) -> BlockNumber {
          unimplemented!()
      }
  *)
  Definition block_number (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_block_number : M.IsAssociatedFunction Self "block_number" block_number.
End Impl_conditional_compilation_Env.

(* StructRecord
  {
    name := "ConditionalCompilation";
    ty_params := [];
    fields := [ ("value", Ty.path "bool") ];
  } *)

Module Impl_conditional_compilation_ConditionalCompilation.
  Definition Self : Ty.t := Ty.path "conditional_compilation::ConditionalCompilation".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_init_env : M.IsAssociatedFunction Self "init_env" init_env.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.get_associated_function
          (Ty.path "conditional_compilation::ConditionalCompilation")
          "init_env"
          []
          [] in
      M.call_closure α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_env : M.IsAssociatedFunction Self "env" env.
  
  (*
      pub fn new() -> Self {
          Self {
              value: Default::default(),
          }
      }
  *)
  Definition new (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method "core::default::Default" (Ty.path "bool") [] [] "default" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.pure
        (Value.StructRecord "conditional_compilation::ConditionalCompilation" [ ("value", α1) ])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  
  (*
      pub fn new_foo(value: bool) -> Self {
          Self { value }
      }
  *)
  Definition new_foo (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ value ] =>
      let* value := M.alloc value in
      let* α0 := M.read value in
      M.pure
        (Value.StructRecord "conditional_compilation::ConditionalCompilation" [ ("value", α0) ])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new_foo : M.IsAssociatedFunction Self "new_foo" new_foo.
  
  (*
      pub fn new_bar(value: bool) -> Self {
          Self { value }
      }
  *)
  Definition new_bar (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ value ] =>
      let* value := M.alloc value in
      let* α0 := M.read value in
      M.pure
        (Value.StructRecord "conditional_compilation::ConditionalCompilation" [ ("value", α0) ])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new_bar : M.IsAssociatedFunction Self "new_bar" new_bar.
  
  (*
      pub fn new_foo_bar(value: bool) -> Self {
          Self { value }
      }
  *)
  Definition new_foo_bar (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ value ] =>
      let* value := M.alloc value in
      let* α0 := M.read value in
      M.pure
        (Value.StructRecord "conditional_compilation::ConditionalCompilation" [ ("value", α0) ])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new_foo_bar : M.IsAssociatedFunction Self "new_foo_bar" new_foo_bar.
  
  (*
      pub fn inherent_flip_foo(&mut self) {
          self.value = !self.value;
          let caller = Self::init_env().caller();
          Self::init_env().emit_event(Event::Changes(Changes {
              new_value: self.value,
              by: caller,
          }));
      }
  *)
  Definition inherent_flip_foo (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read self in
        let* α2 :=
          M.read
            (M.get_struct_record_field
              α1
              "conditional_compilation::ConditionalCompilation"
              "value") in
        M.assign
          (M.get_struct_record_field α0 "conditional_compilation::ConditionalCompilation" "value")
          (UnOp.Pure.not α2) in
      let* caller :=
        let* α0 :=
          M.get_associated_function (Ty.path "conditional_compilation::Env") "caller" [] [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "conditional_compilation::ConditionalCompilation")
            "init_env"
            []
            [] in
        let* α2 := M.call_closure α1 [] in
        let* α3 := M.alloc α2 in
        let* α4 := M.call_closure α0 [ α3 ] in
        M.alloc α4 in
      let* _ :=
        let* α0 :=
          M.get_associated_function (Ty.path "conditional_compilation::Env") "emit_event" [] [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "conditional_compilation::ConditionalCompilation")
            "init_env"
            []
            [] in
        let* α2 := M.call_closure α1 [] in
        let* α3 := M.alloc α2 in
        let* α4 := M.read self in
        let* α5 :=
          M.read
            (M.get_struct_record_field
              α4
              "conditional_compilation::ConditionalCompilation"
              "value") in
        let* α6 := M.read caller in
        let* α7 :=
          M.call_closure
            α0
            [
              α3;
              Value.StructTuple
                "conditional_compilation::Event::Changes"
                [
                  Value.StructRecord
                    "conditional_compilation::Changes"
                    [ ("new_value", α5); ("by_", α6) ]
                ]
            ] in
        M.alloc α7 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_inherent_flip_foo :
    M.IsAssociatedFunction Self "inherent_flip_foo" inherent_flip_foo.
  
  (*
      pub fn inherent_flip_bar(&mut self) {
          let caller = Self::init_env().caller();
          let block_number = Self::init_env().block_number();
          self.value = !self.value;
          Self::init_env().emit_event(Event::ChangesDated(ChangesDated {
              new_value: self.value,
              by: caller,
              when: block_number,
          }));
      }
  *)
  Definition inherent_flip_bar (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* caller :=
        let* α0 :=
          M.get_associated_function (Ty.path "conditional_compilation::Env") "caller" [] [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "conditional_compilation::ConditionalCompilation")
            "init_env"
            []
            [] in
        let* α2 := M.call_closure α1 [] in
        let* α3 := M.alloc α2 in
        let* α4 := M.call_closure α0 [ α3 ] in
        M.alloc α4 in
      let* block_number :=
        let* α0 :=
          M.get_associated_function (Ty.path "conditional_compilation::Env") "block_number" [] [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "conditional_compilation::ConditionalCompilation")
            "init_env"
            []
            [] in
        let* α2 := M.call_closure α1 [] in
        let* α3 := M.alloc α2 in
        let* α4 := M.call_closure α0 [ α3 ] in
        M.alloc α4 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read self in
        let* α2 :=
          M.read
            (M.get_struct_record_field
              α1
              "conditional_compilation::ConditionalCompilation"
              "value") in
        M.assign
          (M.get_struct_record_field α0 "conditional_compilation::ConditionalCompilation" "value")
          (UnOp.Pure.not α2) in
      let* _ :=
        let* α0 :=
          M.get_associated_function (Ty.path "conditional_compilation::Env") "emit_event" [] [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "conditional_compilation::ConditionalCompilation")
            "init_env"
            []
            [] in
        let* α2 := M.call_closure α1 [] in
        let* α3 := M.alloc α2 in
        let* α4 := M.read self in
        let* α5 :=
          M.read
            (M.get_struct_record_field
              α4
              "conditional_compilation::ConditionalCompilation"
              "value") in
        let* α6 := M.read caller in
        let* α7 := M.read block_number in
        let* α8 :=
          M.call_closure
            α0
            [
              α3;
              Value.StructTuple
                "conditional_compilation::Event::ChangesDated"
                [
                  Value.StructRecord
                    "conditional_compilation::ChangesDated"
                    [ ("new_value", α5); ("by_", α6); ("when", α7) ]
                ]
            ] in
        M.alloc α8 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_inherent_flip_bar :
    M.IsAssociatedFunction Self "inherent_flip_bar" inherent_flip_bar.
End Impl_conditional_compilation_ConditionalCompilation.

Module Impl_conditional_compilation_Flip_for_conditional_compilation_ConditionalCompilation.
  Definition Self : Ty.t := Ty.path "conditional_compilation::ConditionalCompilation".
  
  (*
      fn flip(&mut self) {
          self.value = !self.value;
      }
  *)
  Definition flip (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read self in
        let* α2 :=
          M.read
            (M.get_struct_record_field
              α1
              "conditional_compilation::ConditionalCompilation"
              "value") in
        M.assign
          (M.get_struct_record_field α0 "conditional_compilation::ConditionalCompilation" "value")
          (UnOp.Pure.not α2) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      fn get(&self) -> bool {
          self.value
      }
  *)
  Definition get (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read
        (M.get_struct_record_field α0 "conditional_compilation::ConditionalCompilation" "value")
    | _, _ => M.impossible
    end.
  
  (*
      fn push_foo(&mut self, value: bool) {
          let caller = Self::init_env().caller();
          Self::init_env().emit_event(Event::Changes(Changes {
              new_value: value,
              by: caller,
          }));
          self.value = value;
      }
  *)
  Definition push_foo (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; value ] =>
      let* self := M.alloc self in
      let* value := M.alloc value in
      let* caller :=
        let* α0 :=
          M.get_associated_function (Ty.path "conditional_compilation::Env") "caller" [] [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "conditional_compilation::ConditionalCompilation")
            "init_env"
            []
            [] in
        let* α2 := M.call_closure α1 [] in
        let* α3 := M.alloc α2 in
        let* α4 := M.call_closure α0 [ α3 ] in
        M.alloc α4 in
      let* _ :=
        let* α0 :=
          M.get_associated_function (Ty.path "conditional_compilation::Env") "emit_event" [] [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "conditional_compilation::ConditionalCompilation")
            "init_env"
            []
            [] in
        let* α2 := M.call_closure α1 [] in
        let* α3 := M.alloc α2 in
        let* α4 := M.read value in
        let* α5 := M.read caller in
        let* α6 :=
          M.call_closure
            α0
            [
              α3;
              Value.StructTuple
                "conditional_compilation::Event::Changes"
                [
                  Value.StructRecord
                    "conditional_compilation::Changes"
                    [ ("new_value", α4); ("by_", α5) ]
                ]
            ] in
        M.alloc α6 in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read value in
        M.assign
          (M.get_struct_record_field α0 "conditional_compilation::ConditionalCompilation" "value")
          α1 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "conditional_compilation::Flip"
      Self
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("flip", InstanceField.Method flip);
          ("get", InstanceField.Method get);
          ("push_foo", InstanceField.Method push_foo)
        ].
End Impl_conditional_compilation_Flip_for_conditional_compilation_ConditionalCompilation.
