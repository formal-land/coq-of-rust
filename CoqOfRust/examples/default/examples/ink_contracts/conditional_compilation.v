(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_conditional_compilation_AccountId_t.
Section Impl_core_default_Default_for_conditional_compilation_AccountId_t.
  Definition Self : Set := conditional_compilation.AccountId.t.
  
  (*
  Default
  *)
  Definition default : M conditional_compilation.AccountId.t :=
    ltac:(M.monadic ((
      conditional_compilation.AccountId.Build_t
        (M.call (|ltac:(M.get_method (fun ℐ =>
          core.default.Default.default (Self := u128.t) (Trait := ℐ)))
        |))
    ) : conditional_compilation.AccountId.t)).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_conditional_compilation_AccountId_t.
End Impl_core_default_Default_for_conditional_compilation_AccountId_t.

Module  Impl_core_clone_Clone_for_conditional_compilation_AccountId_t.
Section Impl_core_clone_Clone_for_conditional_compilation_AccountId_t.
  Definition Self : Set := conditional_compilation.AccountId.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M conditional_compilation.AccountId.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.clone.AssertParamIsClone.t u128.t))
            [
              fun (γ : M.Val (core.clone.AssertParamIsClone.t u128.t)) =>
                (deref (M.read (| self |))) :
                M.Val conditional_compilation.AccountId.t
            ])
      |)
    ) : conditional_compilation.AccountId.t)).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_conditional_compilation_AccountId_t.
End Impl_core_clone_Clone_for_conditional_compilation_AccountId_t.

Module  Impl_core_marker_Copy_for_conditional_compilation_AccountId_t.
Section Impl_core_marker_Copy_for_conditional_compilation_AccountId_t.
  Definition Self : Set := conditional_compilation.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_conditional_compilation_AccountId_t.
End Impl_core_marker_Copy_for_conditional_compilation_AccountId_t.

Ltac Balance := exact u128.t.

Ltac BlockNumber := exact u32.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : conditional_compilation.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module  Flip.
Section Flip.
  Class Trait (Self : Set) : Type := {
    flip : (mut_ref Self) -> M unit;
    get : (ref Self) -> M bool.t;
    push_foo : (mut_ref Self) -> bool.t -> M unit;
  }.
  
End Flip.
End Flip.

Module  Changes.
Section Changes.
  Record t : Set := {
    new_value : bool.t;
    by_ : conditional_compilation.AccountId.t;
  }.
  
  Definition Get_new_value :=
    Ref.map
      (fun α => Some α.(new_value))
      (fun β α => Some (α <| new_value := β |>)).
  Definition Get_by_ :=
    Ref.map (fun α => Some α.(by_)) (fun β α => Some (α <| by_ := β |>)).
End Changes.
End Changes.

Module  ChangesDated.
Section ChangesDated.
  Record t : Set := {
    new_value : bool.t;
    by_ : conditional_compilation.AccountId.t;
    when : ltac:(conditional_compilation.BlockNumber);
  }.
  
  Definition Get_new_value :=
    Ref.map
      (fun α => Some α.(new_value))
      (fun β α => Some (α <| new_value := β |>)).
  Definition Get_by_ :=
    Ref.map (fun α => Some α.(by_)) (fun β α => Some (α <| by_ := β |>)).
  Definition Get_when :=
    Ref.map (fun α => Some α.(when)) (fun β α => Some (α <| when := β |>)).
End ChangesDated.
End ChangesDated.

Module Event.
  Inductive t : Set :=
  | Changes (_ : conditional_compilation.Changes.t)
  | ChangesDated (_ : conditional_compilation.ChangesDated.t).
  
  Definition Get_Changes_0 :=
    Ref.map
      (fun α => match α with | Changes α0 => Some α0 | _ => None end)
      (fun β α => match α with | Changes _ => Some (Changes β) | _ => None end).
  
  Definition Get_ChangesDated_0 :=
    Ref.map
      (fun α => match α with | ChangesDated α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | ChangesDated _ => Some (ChangesDated β) | _ => None end).
End Event.

Module  Impl_conditional_compilation_Env_t.
Section Impl_conditional_compilation_Env_t.
  Definition Self : Set := conditional_compilation.Env.t.
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (self : ref Self) : M conditional_compilation.AccountId.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        conditional_compilation.Env.Get_caller (deref (M.read (| self |)))
      |)
    ) : conditional_compilation.AccountId.t)).
  
  Global Instance AssociatedFunction_caller :
    Notations.DoubleColon Self "caller" := {
    Notations.double_colon := caller;
  }.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event
      (self : ref Self)
      (_event : conditional_compilation.Event.t)
      : M unit :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let _event := M.alloc (| _event |) in
      (never_to_any (B := unit)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    ) : unit)).
  
  Global Instance AssociatedFunction_emit_event :
    Notations.DoubleColon Self "emit_event" := {
    Notations.double_colon := emit_event;
  }.
  
  (*
      fn block_number(&self) -> BlockNumber {
          unimplemented!()
      }
  *)
  Definition block_number
      (self : ref Self)
      : M ltac:(conditional_compilation.BlockNumber) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      (never_to_any (B := u32.t)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    ) : ltac:(conditional_compilation.BlockNumber))).
  
  Global Instance AssociatedFunction_block_number :
    Notations.DoubleColon Self "block_number" := {
    Notations.double_colon := block_number;
  }.
End Impl_conditional_compilation_Env_t.
End Impl_conditional_compilation_Env_t.

Module  ConditionalCompilation.
Section ConditionalCompilation.
  Record t : Set := {
    value : bool.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End ConditionalCompilation.
End ConditionalCompilation.

Module  Impl_conditional_compilation_ConditionalCompilation_t.
Section Impl_conditional_compilation_ConditionalCompilation_t.
  Definition Self : Set := conditional_compilation.ConditionalCompilation.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env : M conditional_compilation.Env.t :=
    ltac:(M.monadic ((
      (never_to_any (B := conditional_compilation.Env.t)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    ) : conditional_compilation.Env.t)).
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon Self "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (self : ref Self) : M conditional_compilation.Env.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.call (|conditional_compilation.ConditionalCompilation.t::["init_env"] |)
    ) : conditional_compilation.Env.t)).
  
  Global Instance AssociatedFunction_env : Notations.DoubleColon Self "env" := {
    Notations.double_colon := env;
  }.
  
  (*
      pub fn new() -> Self {
          Self {
              value: Default::default(),
          }
      }
  *)
  Definition new : M Self :=
    ltac:(M.monadic ((
      {|
        conditional_compilation.ConditionalCompilation.value :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default (Self := bool.t) (Trait := ℐ)))
          |);
      |} : conditional_compilation.ConditionalCompilation.t
    ) : Self)).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn new_foo(value: bool) -> Self {
          Self { value }
      }
  *)
  Definition new_foo (value : bool.t) : M Self :=
    ltac:(M.monadic ((
      let value := M.alloc (| value |) in
      {|
        conditional_compilation.ConditionalCompilation.value :=
          M.read (| value |);
      |} : conditional_compilation.ConditionalCompilation.t
    ) : Self)).
  
  Global Instance AssociatedFunction_new_foo :
    Notations.DoubleColon Self "new_foo" := {
    Notations.double_colon := new_foo;
  }.
  
  (*
      pub fn new_bar(value: bool) -> Self {
          Self { value }
      }
  *)
  Definition new_bar (value : bool.t) : M Self :=
    ltac:(M.monadic ((
      let value := M.alloc (| value |) in
      {|
        conditional_compilation.ConditionalCompilation.value :=
          M.read (| value |);
      |} : conditional_compilation.ConditionalCompilation.t
    ) : Self)).
  
  Global Instance AssociatedFunction_new_bar :
    Notations.DoubleColon Self "new_bar" := {
    Notations.double_colon := new_bar;
  }.
  
  (*
      pub fn new_foo_bar(value: bool) -> Self {
          Self { value }
      }
  *)
  Definition new_foo_bar (value : bool.t) : M Self :=
    ltac:(M.monadic ((
      let value := M.alloc (| value |) in
      {|
        conditional_compilation.ConditionalCompilation.value :=
          M.read (| value |);
      |} : conditional_compilation.ConditionalCompilation.t
    ) : Self)).
  
  Global Instance AssociatedFunction_new_foo_bar :
    Notations.DoubleColon Self "new_foo_bar" := {
    Notations.double_colon := new_foo_bar;
  }.
  
  (*
      pub fn inherent_flip_foo(&mut self) {
          self.value = !self.value;
          let caller = Self::init_env().caller();
          Self::init_env().emit_event(Event::Changes(Changes {
              new_value: self.value,
              by: caller,
          }));
      }
  *)
  Definition inherent_flip_foo (self : mut_ref Self) : M unit :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        let _ : M.Val unit :=
          assign (|
            conditional_compilation.ConditionalCompilation.Get_value
              (deref (M.read (| self |))),
            UnOp.not
              (M.read (|
                conditional_compilation.ConditionalCompilation.Get_value
                  (deref (M.read (| self |)))
              |))
          |) in
        let caller : M.Val conditional_compilation.AccountId.t :=
          M.alloc (|
            M.call (|(conditional_compilation.Env.t::["caller"]
              (borrow
                (M.alloc (|
                  M.call (|conditional_compilation.ConditionalCompilation.t::["init_env"]
                  |)
                |))))
            |)
          |) in
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(conditional_compilation.Env.t::["emit_event"]
              (borrow
                (M.alloc (|
                  M.call (|conditional_compilation.ConditionalCompilation.t::["init_env"]
                  |)
                |)))
              (conditional_compilation.Event.Changes
                ({|
                  conditional_compilation.Changes.new_value :=
                    M.read (|
                      conditional_compilation.ConditionalCompilation.Get_value
                        (deref (M.read (| self |)))
                    |);
                  conditional_compilation.Changes.by_ := M.read (| caller |);
                |} : conditional_compilation.Changes.t)))
            |)
          |) in
        M.alloc (| tt |)
      |)
    ) : unit)).
  
  Global Instance AssociatedFunction_inherent_flip_foo :
    Notations.DoubleColon Self "inherent_flip_foo" := {
    Notations.double_colon := inherent_flip_foo;
  }.
  
  (*
      pub fn inherent_flip_bar(&mut self) {
          let caller = Self::init_env().caller();
          let block_number = Self::init_env().block_number();
          self.value = !self.value;
          Self::init_env().emit_event(Event::ChangesDated(ChangesDated {
              new_value: self.value,
              by: caller,
              when: block_number,
          }));
      }
  *)
  Definition inherent_flip_bar (self : mut_ref Self) : M unit :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        let caller : M.Val conditional_compilation.AccountId.t :=
          M.alloc (|
            M.call (|(conditional_compilation.Env.t::["caller"]
              (borrow
                (M.alloc (|
                  M.call (|conditional_compilation.ConditionalCompilation.t::["init_env"]
                  |)
                |))))
            |)
          |) in
        let block_number : M.Val u32.t :=
          M.alloc (|
            M.call (|(conditional_compilation.Env.t::["block_number"]
              (borrow
                (M.alloc (|
                  M.call (|conditional_compilation.ConditionalCompilation.t::["init_env"]
                  |)
                |))))
            |)
          |) in
        let _ : M.Val unit :=
          assign (|
            conditional_compilation.ConditionalCompilation.Get_value
              (deref (M.read (| self |))),
            UnOp.not
              (M.read (|
                conditional_compilation.ConditionalCompilation.Get_value
                  (deref (M.read (| self |)))
              |))
          |) in
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(conditional_compilation.Env.t::["emit_event"]
              (borrow
                (M.alloc (|
                  M.call (|conditional_compilation.ConditionalCompilation.t::["init_env"]
                  |)
                |)))
              (conditional_compilation.Event.ChangesDated
                ({|
                  conditional_compilation.ChangesDated.new_value :=
                    M.read (|
                      conditional_compilation.ConditionalCompilation.Get_value
                        (deref (M.read (| self |)))
                    |);
                  conditional_compilation.ChangesDated.by_ :=
                    M.read (| caller |);
                  conditional_compilation.ChangesDated.when :=
                    M.read (| block_number |);
                |} : conditional_compilation.ChangesDated.t)))
            |)
          |) in
        M.alloc (| tt |)
      |)
    ) : unit)).
  
  Global Instance AssociatedFunction_inherent_flip_bar :
    Notations.DoubleColon Self "inherent_flip_bar" := {
    Notations.double_colon := inherent_flip_bar;
  }.
End Impl_conditional_compilation_ConditionalCompilation_t.
End Impl_conditional_compilation_ConditionalCompilation_t.

Module  Impl_conditional_compilation_Flip_for_conditional_compilation_ConditionalCompilation_t.
Section Impl_conditional_compilation_Flip_for_conditional_compilation_ConditionalCompilation_t.
  Definition Self : Set := conditional_compilation.ConditionalCompilation.t.
  
  (*
      fn flip(&mut self) {
          self.value = !self.value;
      }
  *)
  Definition flip (self : mut_ref Self) : M unit :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        let _ : M.Val unit :=
          assign (|
            conditional_compilation.ConditionalCompilation.Get_value
              (deref (M.read (| self |))),
            UnOp.not
              (M.read (|
                conditional_compilation.ConditionalCompilation.Get_value
                  (deref (M.read (| self |)))
              |))
          |) in
        M.alloc (| tt |)
      |)
    ) : unit)).
  
  Global Instance AssociatedFunction_flip :
    Notations.DoubleColon Self "flip" := {
    Notations.double_colon := flip;
  }.
  
  (*
      fn get(&self) -> bool {
          self.value
      }
  *)
  Definition get (self : ref Self) : M bool.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        conditional_compilation.ConditionalCompilation.Get_value
          (deref (M.read (| self |)))
      |)
    ) : bool.t)).
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
  
  (*
      fn push_foo(&mut self, value: bool) {
          let caller = Self::init_env().caller();
          Self::init_env().emit_event(Event::Changes(Changes {
              new_value: value,
              by: caller,
          }));
          self.value = value;
      }
  *)
  Definition push_foo (self : mut_ref Self) (value : bool.t) : M unit :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let value := M.alloc (| value |) in
      M.read (|
        let caller : M.Val conditional_compilation.AccountId.t :=
          M.alloc (|
            M.call (|(conditional_compilation.Env.t::["caller"]
              (borrow
                (M.alloc (|
                  M.call (|conditional_compilation.ConditionalCompilation.t::["init_env"]
                  |)
                |))))
            |)
          |) in
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(conditional_compilation.Env.t::["emit_event"]
              (borrow
                (M.alloc (|
                  M.call (|conditional_compilation.ConditionalCompilation.t::["init_env"]
                  |)
                |)))
              (conditional_compilation.Event.Changes
                ({|
                  conditional_compilation.Changes.new_value :=
                    M.read (| value |);
                  conditional_compilation.Changes.by_ := M.read (| caller |);
                |} : conditional_compilation.Changes.t)))
            |)
          |) in
        let _ : M.Val unit :=
          assign (|
            conditional_compilation.ConditionalCompilation.Get_value
              (deref (M.read (| self |))),
            M.read (| value |)
          |) in
        M.alloc (| tt |)
      |)
    ) : unit)).
  
  Global Instance AssociatedFunction_push_foo :
    Notations.DoubleColon Self "push_foo" := {
    Notations.double_colon := push_foo;
  }.
  
  Global Instance ℐ : conditional_compilation.Flip.Trait Self := {
    conditional_compilation.Flip.flip := flip;
    conditional_compilation.Flip.get := get;
    conditional_compilation.Flip.push_foo := push_foo;
  }.
End Impl_conditional_compilation_Flip_for_conditional_compilation_ConditionalCompilation_t.
End Impl_conditional_compilation_Flip_for_conditional_compilation_ConditionalCompilation_t.
