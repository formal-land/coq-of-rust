(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructTuple
  {
    name := "AccountId";
    ty_params := [];
    fields := [ Ty.path "u128" ];
  } *)

Module Impl_core_default_Default_for_contract_terminate_AccountId.
  Definition Self : Ty.t := Ty.path "contract_terminate::AccountId".
  
  (* Default *)
  Definition default (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [] =>
      ltac:(M.monadic
        (M.of_value (|
          Value.StructTuple
            "contract_terminate::AccountId"
            [
              A.to_value
                (M.call_closure (|
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "u128",
                    [],
                    "default",
                    []
                  |),
                  []
                |))
            ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_contract_terminate_AccountId.

Module Impl_core_clone_Clone_for_contract_terminate_AccountId.
  Definition Self : Ty.t := Ty.path "contract_terminate::AccountId".
  
  (* Clone *)
  Definition clone (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.read (|
          M.match_operator (|
            M.of_value (| Value.DeclaredButUndefined |),
            [ fun γ => ltac:(M.monadic (M.read (| self |))) ]
          |)
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_contract_terminate_AccountId.

Module Impl_core_marker_Copy_for_contract_terminate_AccountId.
  Definition Self : Ty.t := Ty.path "contract_terminate::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance "core::marker::Copy" Self (* Trait polymorphic types *) [] (* Instance *) [].
End Impl_core_marker_Copy_for_contract_terminate_AccountId.

(* StructRecord
  {
    name := "Env";
    ty_params := [];
    fields := [ ("caller", Ty.path "contract_terminate::AccountId") ];
  } *)

Module Impl_contract_terminate_Env.
  Definition Self : Ty.t := Ty.path "contract_terminate::Env".
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.read (|
          M.SubPointer.get_struct_record_field (|
            M.read (| self |),
            "contract_terminate::Env",
            "caller"
          |)
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_caller : M.IsAssociatedFunction Self "caller" caller.
  
  (*
      fn terminate_contract(&self, _account: AccountId) {
          unimplemented!()
      }
  *)
  Definition terminate_contract (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ self; _account ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let _account := M.alloc (| _account |) in
        M.never_to_any (|
          M.call_closure (|
            M.get_function (| "core::panicking::panic", [] |),
            [ M.read (| M.of_value (| Value.String "not implemented" |) |) ]
          |)
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_terminate_contract :
    M.IsAssociatedFunction Self "terminate_contract" terminate_contract.
End Impl_contract_terminate_Env.

(* StructTuple
  {
    name := "JustTerminate";
    ty_params := [];
    fields := [];
  } *)

Module Impl_contract_terminate_JustTerminate.
  Definition Self : Ty.t := Ty.path "contract_terminate::JustTerminate".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [] =>
      ltac:(M.monadic
        (M.never_to_any (|
          M.call_closure (|
            M.get_function (| "core::panicking::panic", [] |),
            [ M.read (| M.of_value (| Value.String "not implemented" |) |) ]
          |)
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_init_env : M.IsAssociatedFunction Self "init_env" init_env.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.call_closure (|
          M.get_associated_function (|
            Ty.path "contract_terminate::JustTerminate",
            "init_env",
            []
          |),
          []
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_env : M.IsAssociatedFunction Self "env" env.
  
  (*
      pub fn new() -> Self {
          Self {}
      }
  *)
  Definition new (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [] =>
      ltac:(M.monadic (M.of_value (| Value.StructTuple "contract_terminate::JustTerminate" [] |)))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  
  (*
      pub fn terminate_me(&mut self) {
          self.env().terminate_contract(self.env().caller());
      }
  *)
  Definition terminate_me (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.read (|
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "contract_terminate::Env",
                  "terminate_contract",
                  []
                |),
                [
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "contract_terminate::JustTerminate",
                        "env",
                        []
                      |),
                      [ M.read (| self |) ]
                    |)
                  |);
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "contract_terminate::Env", "caller", [] |),
                    [
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "contract_terminate::JustTerminate",
                            "env",
                            []
                          |),
                          [ M.read (| self |) ]
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |)
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_terminate_me : M.IsAssociatedFunction Self "terminate_me" terminate_me.
End Impl_contract_terminate_JustTerminate.
