(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_contract_transfer_AccountId_t.
Section Impl_core_default_Default_for_contract_transfer_AccountId_t.
  Definition Self : Set := contract_transfer.AccountId.t.
  
  (*
  Default
  *)
  Definition default : M contract_transfer.AccountId.t :=
    ltac:(M.monadic (
      contract_transfer.AccountId.Build_t
        (M.call (|ltac:(M.get_method (fun ℐ =>
          core.default.Default.default (Self := u128.t) (Trait := ℐ)))
        |))
    )).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_contract_transfer_AccountId_t.
End Impl_core_default_Default_for_contract_transfer_AccountId_t.

Module  Impl_core_clone_Clone_for_contract_transfer_AccountId_t.
Section Impl_core_clone_Clone_for_contract_transfer_AccountId_t.
  Definition Self : Set := contract_transfer.AccountId.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M contract_transfer.AccountId.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.clone.AssertParamIsClone.t u128.t))
            [
              fun (γ : M.Val (core.clone.AssertParamIsClone.t u128.t)) =>
                (deref (M.read (| self |))) :
                M.Val contract_transfer.AccountId.t
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_contract_transfer_AccountId_t.
End Impl_core_clone_Clone_for_contract_transfer_AccountId_t.

Module  Impl_core_marker_Copy_for_contract_transfer_AccountId_t.
Section Impl_core_marker_Copy_for_contract_transfer_AccountId_t.
  Definition Self : Set := contract_transfer.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_contract_transfer_AccountId_t.
End Impl_core_marker_Copy_for_contract_transfer_AccountId_t.

Ltac Balance := exact u128.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : contract_transfer.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module  Impl_contract_transfer_Env_t.
Section Impl_contract_transfer_Env_t.
  Definition Self : Set := contract_transfer.Env.t.
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (self : ref Self) : M contract_transfer.AccountId.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (| contract_transfer.Env.Get_caller (deref (M.read (| self |))) |)
    )).
  
  Global Instance AssociatedFunction_caller :
    Notations.DoubleColon Self "caller" := {
    Notations.double_colon := caller;
  }.
  
  (*
      fn balance(&self) -> Balance {
          unimplemented!()
      }
  *)
  Definition balance (self : ref Self) : M ltac:(contract_transfer.Balance) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      (never_to_any (B := u128.t)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_balance :
    Notations.DoubleColon Self "balance" := {
    Notations.double_colon := balance;
  }.
  
  (*
      fn transfer(&mut self, _to: AccountId, _value: Balance) -> Result<(), ()> {
          unimplemented!()
      }
  *)
  Definition transfer
      (self : mut_ref Self)
      (_to : contract_transfer.AccountId.t)
      (_value : ltac:(contract_transfer.Balance))
      : M (core.result.Result.t unit unit) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let _to := M.alloc (| _to |) in
      let _value := M.alloc (| _value |) in
      (never_to_any (B := core.result.Result.t unit unit)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_transfer :
    Notations.DoubleColon Self "transfer" := {
    Notations.double_colon := transfer;
  }.
  
  (*
      fn transferred_value(&self) -> Balance {
          unimplemented!()
      }
  *)
  Definition transferred_value
      (self : ref Self)
      : M ltac:(contract_transfer.Balance) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      (never_to_any (B := u128.t)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_transferred_value :
    Notations.DoubleColon Self "transferred_value" := {
    Notations.double_colon := transferred_value;
  }.
End Impl_contract_transfer_Env_t.
End Impl_contract_transfer_Env_t.

Module  GiveMe.
Section GiveMe.
  Inductive t : Set := Build.
End GiveMe.
End GiveMe.

Module  Impl_contract_transfer_GiveMe_t.
Section Impl_contract_transfer_GiveMe_t.
  Definition Self : Set := contract_transfer.GiveMe.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env : M contract_transfer.Env.t :=
    ltac:(M.monadic (
      (never_to_any (B := contract_transfer.Env.t)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon Self "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (self : ref Self) : M contract_transfer.Env.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.call (|contract_transfer.GiveMe.t::["init_env"] |)
    )).
  
  Global Instance AssociatedFunction_env : Notations.DoubleColon Self "env" := {
    Notations.double_colon := env;
  }.
  
  (*
      pub fn new() -> Self {
          Self {}
      }
  *)
  Definition new : M Self :=
    ltac:(M.monadic ( contract_transfer.GiveMe.Build
    )).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn give_me(&mut self, value: Balance) {
          println!("requested value: {}", value);
          println!("contract balance: {}", self.env().balance());
  
          assert!(value <= self.env().balance(), "insufficient funds!");
  
          if self.env().transfer(self.env().caller(), value).is_err() {
              panic!(
                  "requested transfer failed. this can be the case if the contract does not\
                   have sufficient free funds or if the transfer would have brought the\
                   contract's balance below minimum balance."
              )
          }
      }
  *)
  Definition give_me
      (self : mut_ref Self)
      (value : ltac:(contract_transfer.Balance))
      : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let value := M.alloc (| value |) in
      M.read (|
        let _ : M.Val unit :=
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(std.io.stdio._print
                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.read (| mk_str "requested value: " |);
                          M.read (| mk_str "
" |)
                        ]
                      |))))
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.call (|(core.fmt.rt.Argument.t::["new_display"]
                            (borrow value))
                          |)
                        ]
                      |)))))
                |)))
              |)
            |) in
          M.alloc (| tt |) in
        let _ : M.Val unit :=
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(std.io.stdio._print
                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.read (| mk_str "contract balance: " |);
                          M.read (| mk_str "
" |)
                        ]
                      |))))
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.call (|(core.fmt.rt.Argument.t::["new_display"]
                            (borrow
                              (M.alloc (|
                                M.call (|(contract_transfer.Env.t::["balance"]
                                  (borrow
                                    (M.alloc (|
                                      M.call (|(contract_transfer.GiveMe.t::["env"]
                                        (borrow (deref (M.read (| self |)))))
                                      |)
                                    |))))
                                |)
                              |))))
                          |)
                        ]
                      |)))))
                |)))
              |)
            |) in
          M.alloc (| tt |) in
        let _ : M.Val unit :=
          if
            M.read (|
              use
                (M.alloc (|
                  UnOp.not
                    (BinOp.Pure.le
                      (M.read (| value |))
                      (M.call (|(contract_transfer.Env.t::["balance"]
                        (borrow
                          (M.alloc (|
                            M.call (|(contract_transfer.GiveMe.t::["env"]
                              (borrow (deref (M.read (| self |)))))
                            |)
                          |))))
                      |)))
                |))
            |)
          then
            M.alloc (|
              (never_to_any (B := unit)) (|
                M.call (|(std.panicking.begin_panic
                  (M.read (| mk_str "insufficient funds!" |)))
                |)
              |)
            |)
          else
            M.alloc (| tt |) in
        if
          M.read (|
            use
              (M.alloc (|
                M.call (|((core.result.Result.t unit unit)::["is_err"]
                  (borrow
                    (M.alloc (|
                      M.call (|(contract_transfer.Env.t::["transfer"]
                        (borrow_mut
                          (M.alloc (|
                            M.call (|(contract_transfer.GiveMe.t::["env"]
                              (borrow (deref (M.read (| self |)))))
                            |)
                          |)))
                        (M.call (|(contract_transfer.Env.t::["caller"]
                          (borrow
                            (M.alloc (|
                              M.call (|(contract_transfer.GiveMe.t::["env"]
                                (borrow (deref (M.read (| self |)))))
                              |)
                            |))))
                        |))
                        (M.read (| value |)))
                      |)
                    |))))
                |)
              |))
          |)
        then
          M.alloc (|
            (never_to_any (B := unit)) (|
              M.call (|(std.panicking.begin_panic
                (M.read (|
                  mk_str
                    "requested transfer failed. this can be the case if the contract does nothave sufficient free funds or if the transfer would have brought thecontract's balance below minimum balance."
                |)))
              |)
            |)
          |)
        else
          M.alloc (| tt |)
      |)
    )).
  
  Global Instance AssociatedFunction_give_me :
    Notations.DoubleColon Self "give_me" := {
    Notations.double_colon := give_me;
  }.
  
  (*
      pub fn was_it_ten(&self) {
          println!("received payment: {}", self.env().transferred_value());
          assert!(self.env().transferred_value() == 10, "payment was not ten");
      }
  *)
  Definition was_it_ten (self : ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        let _ : M.Val unit :=
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(std.io.stdio._print
                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.read (| mk_str "received payment: " |);
                          M.read (| mk_str "
" |)
                        ]
                      |))))
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.call (|(core.fmt.rt.Argument.t::["new_display"]
                            (borrow
                              (M.alloc (|
                                M.call (|(contract_transfer.Env.t::["transferred_value"]
                                  (borrow
                                    (M.alloc (|
                                      M.call (|(contract_transfer.GiveMe.t::["env"]
                                        (M.read (| self |)))
                                      |)
                                    |))))
                                |)
                              |))))
                          |)
                        ]
                      |)))))
                |)))
              |)
            |) in
          M.alloc (| tt |) in
        let _ : M.Val unit :=
          if
            M.read (|
              use
                (M.alloc (|
                  UnOp.not
                    (BinOp.Pure.eq
                      (M.call (|(contract_transfer.Env.t::["transferred_value"]
                        (borrow
                          (M.alloc (|
                            M.call (|(contract_transfer.GiveMe.t::["env"]
                              (M.read (| self |)))
                            |)
                          |))))
                      |))
                      ((Integer.of_Z 10) : u128.t))
                |))
            |)
          then
            M.alloc (|
              (never_to_any (B := unit)) (|
                M.call (|(std.panicking.begin_panic
                  (M.read (| mk_str "payment was not ten" |)))
                |)
              |)
            |)
          else
            M.alloc (| tt |) in
        M.alloc (| tt |)
      |)
    )).
  
  Global Instance AssociatedFunction_was_it_ten :
    Notations.DoubleColon Self "was_it_ten" := {
    Notations.double_colon := was_it_ten;
  }.
End Impl_contract_transfer_GiveMe_t.
End Impl_contract_transfer_GiveMe_t.
