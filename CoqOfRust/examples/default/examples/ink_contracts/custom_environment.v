(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_custom_environment_AccountId_t.
Section Impl_core_default_Default_for_custom_environment_AccountId_t.
  Definition Self : Set := custom_environment.AccountId.t.
  
  (*
  Default
  *)
  Definition default : M custom_environment.AccountId.t :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.default.Default.default (Self := u128.t) (Trait := ℐ))) in
    let* α1 : u128.t := M.call α0 in
    M.pure (custom_environment.AccountId.Build_t α1).
  
  Axiom default_is_impl : impl Self "default" = default.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_custom_environment_AccountId_t.
End Impl_core_default_Default_for_custom_environment_AccountId_t.

Module  Impl_core_clone_Clone_for_custom_environment_AccountId_t.
Section Impl_core_clone_Clone_for_custom_environment_AccountId_t.
  Definition Self : Set := custom_environment.AccountId.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M custom_environment.AccountId.t :=
    let* self := M.alloc self in
    let* α0 : M.Val custom_environment.AccountId.t :=
      match_operator
        (DeclaredButUndefinedVariable
          (A := core.clone.AssertParamIsClone.t u128.t))
        [
          fun γ =>
            (let* α0 : ref custom_environment.AccountId.t := M.read self in
            M.pure (deref α0)) :
            M (M.Val custom_environment.AccountId.t)
        ] in
    M.read α0.
  
  Axiom clone_is_impl : impl Self "clone" = clone.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_custom_environment_AccountId_t.
End Impl_core_clone_Clone_for_custom_environment_AccountId_t.

Module  Impl_core_marker_Copy_for_custom_environment_AccountId_t.
Section Impl_core_marker_Copy_for_custom_environment_AccountId_t.
  Definition Self : Set := custom_environment.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_custom_environment_AccountId_t.
End Impl_core_marker_Copy_for_custom_environment_AccountId_t.

Ltac Balance := exact u128.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : custom_environment.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module  Topics.
Section Topics.
  Inductive t : Set := Build.
End Topics.
End Topics.

Module  Impl_core_default_Default_for_custom_environment_Topics_t.
Section Impl_core_default_Default_for_custom_environment_Topics_t.
  Definition Self : Set := custom_environment.Topics.t.
  
  (*
  Default
  *)
  Definition default : M custom_environment.Topics.t :=
    M.pure custom_environment.Topics.Build.
  
  Axiom default_is_impl : impl Self "default" = default.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_custom_environment_Topics_t.
End Impl_core_default_Default_for_custom_environment_Topics_t.

Module  EventWithTopics.
Section EventWithTopics.
  Record t : Set := {
    first_topic : ltac:(custom_environment.Balance);
    second_topic : ltac:(custom_environment.Balance);
    third_topic : ltac:(custom_environment.Balance);
    fourth_topic : ltac:(custom_environment.Balance);
    fifth_topic : ltac:(custom_environment.Balance);
  }.
  
  Definition Get_first_topic :=
    Ref.map
      (fun α => Some α.(first_topic))
      (fun β α => Some (α <| first_topic := β |>)).
  Definition Get_second_topic :=
    Ref.map
      (fun α => Some α.(second_topic))
      (fun β α => Some (α <| second_topic := β |>)).
  Definition Get_third_topic :=
    Ref.map
      (fun α => Some α.(third_topic))
      (fun β α => Some (α <| third_topic := β |>)).
  Definition Get_fourth_topic :=
    Ref.map
      (fun α => Some α.(fourth_topic))
      (fun β α => Some (α <| fourth_topic := β |>)).
  Definition Get_fifth_topic :=
    Ref.map
      (fun α => Some α.(fifth_topic))
      (fun β α => Some (α <| fifth_topic := β |>)).
End EventWithTopics.
End EventWithTopics.

Module  Impl_core_default_Default_for_custom_environment_EventWithTopics_t.
Section Impl_core_default_Default_for_custom_environment_EventWithTopics_t.
  Definition Self : Set := custom_environment.EventWithTopics.t.
  
  (*
  Default
  *)
  Definition default : M custom_environment.EventWithTopics.t :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.default.Default.default (Self := u128.t) (Trait := ℐ))) in
    let* α1 : u128.t := M.call α0 in
    let* α2 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.default.Default.default (Self := u128.t) (Trait := ℐ))) in
    let* α3 : u128.t := M.call α2 in
    let* α4 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.default.Default.default (Self := u128.t) (Trait := ℐ))) in
    let* α5 : u128.t := M.call α4 in
    let* α6 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.default.Default.default (Self := u128.t) (Trait := ℐ))) in
    let* α7 : u128.t := M.call α6 in
    let* α8 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.default.Default.default (Self := u128.t) (Trait := ℐ))) in
    let* α9 : u128.t := M.call α8 in
    M.pure
      {|
        custom_environment.EventWithTopics.first_topic := α1;
        custom_environment.EventWithTopics.second_topic := α3;
        custom_environment.EventWithTopics.third_topic := α5;
        custom_environment.EventWithTopics.fourth_topic := α7;
        custom_environment.EventWithTopics.fifth_topic := α9;
      |}.
  
  Axiom default_is_impl : impl Self "default" = default.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_custom_environment_EventWithTopics_t.
End Impl_core_default_Default_for_custom_environment_EventWithTopics_t.

Module Event.
  Inductive t : Set :=
  | EventWithTopics (_ : custom_environment.EventWithTopics.t).
  
  Definition Get_EventWithTopics_0 :=
    Ref.map
      (fun α => match α with | EventWithTopics α0 => Some α0 end)
      (fun β α =>
        match α with | EventWithTopics _ => Some (EventWithTopics β) end).
End Event.

Module  Impl_custom_environment_Env_t.
Section Impl_custom_environment_Env_t.
  Definition Self : Set := custom_environment.Env.t.
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (self : ref Self) : M custom_environment.AccountId.t :=
    let* self := M.alloc self in
    let* α0 : ref custom_environment.Env.t := M.read self in
    M.read (custom_environment.Env.Get_caller (deref α0)).
  
  Axiom caller_is_impl : impl Self "caller" = caller.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event
      (self : ref Self)
      (_event : custom_environment.Event.t)
      : M unit :=
    let* self := M.alloc self in
    let* _event := M.alloc _event in
    let* α0 : ref str.t := M.read (mk_str "not implemented") in
    let* α1 : never.t := M.call (core.panicking.panic α0) in
    never_to_any α1.
  
  Axiom emit_event_is_impl : impl Self "emit_event" = emit_event.
End Impl_custom_environment_Env_t.
End Impl_custom_environment_Env_t.

Module  Impl_custom_environment_Topics_t.
Section Impl_custom_environment_Topics_t.
  Definition Self : Set := custom_environment.Topics.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env : M custom_environment.Env.t :=
    let* α0 : ref str.t := M.read (mk_str "not implemented") in
    let* α1 : never.t := M.call (core.panicking.panic α0) in
    never_to_any α1.
  
  Axiom init_env_is_impl : impl Self "init_env" = init_env.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (self : ref Self) : M custom_environment.Env.t :=
    let* self := M.alloc self in
    M.call (impl custom_environment.Topics.t "init_env").
  
  Axiom env_is_impl : impl Self "env" = env.
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new : M Self :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.default.Default.default
          (Self := custom_environment.Topics.t)
          (Trait := ℐ))) in
    M.call α0.
  
  Axiom new_is_impl : impl Self "new" = new.
  
  (*
      pub fn trigger(&mut self) {
          self.env()
              .emit_event(Event::EventWithTopics(EventWithTopics::default()));
      }
  *)
  Definition trigger (self : mut_ref Self) : M unit :=
    let* self := M.alloc self in
    let* _ : M.Val unit :=
      let* α0 : mut_ref custom_environment.Topics.t := M.read self in
      let* α1 : custom_environment.Env.t :=
        M.call (impl custom_environment.Topics.t "env" (borrow (deref α0))) in
      let* α2 : M.Val custom_environment.Env.t := M.alloc α1 in
      let* α3 : _ :=
        ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self := custom_environment.EventWithTopics.t)
            (Trait := ℐ))) in
      let* α4 : custom_environment.EventWithTopics.t := M.call α3 in
      let* α5 : unit :=
        M.call
          (impl custom_environment.Env.t "emit_event"
            (borrow α2)
            (custom_environment.Event.EventWithTopics α4)) in
      M.alloc α5 in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Axiom trigger_is_impl : impl Self "trigger" = trigger.
End Impl_custom_environment_Topics_t.
End Impl_custom_environment_Topics_t.
