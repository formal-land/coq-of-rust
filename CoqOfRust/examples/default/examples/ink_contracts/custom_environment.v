(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructTuple
  {
    name := "AccountId";
    ty_params := [];
    fields := [ Ty.path "u128" ];
  } *)

Module Impl_core_default_Default_for_custom_environment_AccountId.
  Definition Self : Ty.t := Ty.path "custom_environment::AccountId".
  
  (*
  Default
  *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method "core::default::Default" (Ty.path "u128") [] [] "default" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.pure (Value.StructTuple "custom_environment::AccountId" [ α1 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_custom_environment_AccountId.

Module Impl_core_clone_Clone_for_custom_environment_AccountId.
  Definition Self : Ty.t := Ty.path "custom_environment::AccountId".
  
  (*
  Clone
  *)
  Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.match_operator Value.DeclaredButUndefined [ fun γ => M.read self ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_custom_environment_AccountId.

Module Impl_core_marker_Copy_for_custom_environment_AccountId.
  Definition Self : Ty.t := Ty.path "custom_environment::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance "core::marker::Copy" Self (* Trait polymorphic types *) [] (* Instance *) [].
End Impl_core_marker_Copy_for_custom_environment_AccountId.

Axiom Balance : (Ty.path "custom_environment::Balance") = (Ty.path "u128").

(* StructRecord
  {
    name := "Env";
    ty_params := [];
    fields := [ ("caller", Ty.path "custom_environment::AccountId") ];
  } *)

(* StructTuple
  {
    name := "Topics";
    ty_params := [];
  } *)

Module Impl_core_default_Default_for_custom_environment_Topics.
  Definition Self : Ty.t := Ty.path "custom_environment::Topics".
  
  (*
  Default
  *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] => M.pure (Value.StructTuple "custom_environment::Topics" [])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_custom_environment_Topics.

(* StructRecord
  {
    name := "EventWithTopics";
    ty_params := [];
    fields :=
      [
        ("first_topic", Ty.path "u128");
        ("second_topic", Ty.path "u128");
        ("third_topic", Ty.path "u128");
        ("fourth_topic", Ty.path "u128");
        ("fifth_topic", Ty.path "u128")
      ];
  } *)

Module Impl_core_default_Default_for_custom_environment_EventWithTopics.
  Definition Self : Ty.t := Ty.path "custom_environment::EventWithTopics".
  
  (*
  Default
  *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method "core::default::Default" (Ty.path "u128") [] [] "default" [] [] in
      let* α1 := M.call_closure α0 [] in
      let* α2 :=
        M.get_trait_method "core::default::Default" (Ty.path "u128") [] [] "default" [] [] in
      let* α3 := M.call_closure α2 [] in
      let* α4 :=
        M.get_trait_method "core::default::Default" (Ty.path "u128") [] [] "default" [] [] in
      let* α5 := M.call_closure α4 [] in
      let* α6 :=
        M.get_trait_method "core::default::Default" (Ty.path "u128") [] [] "default" [] [] in
      let* α7 := M.call_closure α6 [] in
      let* α8 :=
        M.get_trait_method "core::default::Default" (Ty.path "u128") [] [] "default" [] [] in
      let* α9 := M.call_closure α8 [] in
      M.pure
        (Value.StructRecord
          "custom_environment::EventWithTopics"
          [
            ("first_topic", α1);
            ("second_topic", α3);
            ("third_topic", α5);
            ("fourth_topic", α7);
            ("fifth_topic", α9)
          ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_custom_environment_EventWithTopics.

(* Enum Event *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "EventWithTopics";
        item := StructTuple [ Ty.path "custom_environment::EventWithTopics" ];
        discriminant := None;
      }
    ];
} *)

Module Impl_custom_environment_Env.
  Definition Self : Ty.t := Ty.path "custom_environment::Env".
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (M.get_struct_record_field α0 "custom_environment::Env" "caller")
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_caller : M.IsAssociatedFunction Self "caller" caller.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; _event ] =>
      let* self := M.alloc self in
      let* _event := M.alloc _event in
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_emit_event : M.IsAssociatedFunction Self "emit_event" emit_event.
End Impl_custom_environment_Env.

Module Impl_custom_environment_Topics.
  Definition Self : Ty.t := Ty.path "custom_environment::Topics".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_init_env : M.IsAssociatedFunction Self "init_env" init_env.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.get_associated_function (Ty.path "custom_environment::Topics") "init_env" [] [] in
      M.call_closure α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_env : M.IsAssociatedFunction Self "env" env.
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.path "custom_environment::Topics")
          []
          []
          "default"
          []
          [] in
      M.call_closure α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  
  (*
      pub fn trigger(&mut self) {
          self.env()
              .emit_event(Event::EventWithTopics(EventWithTopics::default()));
      }
  *)
  Definition trigger (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* α0 :=
          M.get_associated_function (Ty.path "custom_environment::Env") "emit_event" [] [] in
        let* α1 := M.get_associated_function (Ty.path "custom_environment::Topics") "env" [] [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 :=
          M.get_trait_method
            "core::default::Default"
            (Ty.path "custom_environment::EventWithTopics")
            []
            []
            "default"
            []
            [] in
        let* α6 := M.call_closure α5 [] in
        let* α7 :=
          M.call_closure
            α0
            [ α4; Value.StructTuple "custom_environment::Event::EventWithTopics" [ α6 ] ] in
        M.alloc α7 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_trigger : M.IsAssociatedFunction Self "trigger" trigger.
End Impl_custom_environment_Topics.
