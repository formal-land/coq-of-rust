(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.
Import M.Notations.

(* StructTuple
  {
    name := "AccountId";
    ty_params := [];
    fields := [ Ty.path "u128" ];
  } *)

Module Impl_core_default_Default_for_e2e_call_runtime_AccountId.
  Definition Self : Ty.t := Ty.path "e2e_call_runtime::AccountId".
  
  (* Default *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      ltac:(M.monadic
        (Value.StructTuple
          "e2e_call_runtime::AccountId"
          [
            M.call_closure (|
              M.get_trait_method (| "core::default::Default", Ty.path "u128", [], "default", [] |),
              []
            |)
          ]))
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_e2e_call_runtime_AccountId.

Module Impl_core_clone_Clone_for_e2e_call_runtime_AccountId.
  Definition Self : Ty.t := Ty.path "e2e_call_runtime::AccountId".
  
  (* Clone *)
  Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.read (|
          M.match_operator (|
            Value.DeclaredButUndefined,
            [ fun γ => ltac:(M.monadic (M.read (| self |))) ]
          |)
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_e2e_call_runtime_AccountId.

Module Impl_core_marker_Copy_for_e2e_call_runtime_AccountId.
  Definition Self : Ty.t := Ty.path "e2e_call_runtime::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance "core::marker::Copy" Self (* Trait polymorphic types *) [] (* Instance *) [].
End Impl_core_marker_Copy_for_e2e_call_runtime_AccountId.

Axiom Balance : (Ty.path "e2e_call_runtime::Balance") = (Ty.path "u128").

(* StructRecord
  {
    name := "Env";
    ty_params := [];
    fields := [ ("caller", Ty.path "e2e_call_runtime::AccountId") ];
  } *)

Module Impl_e2e_call_runtime_Env.
  Definition Self : Ty.t := Ty.path "e2e_call_runtime::Env".
  
  (*
      fn balance(&self) -> Balance {
          unimplemented!()
      }
  *)
  Parameter balance : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_balance : M.IsAssociatedFunction Self "balance" balance.
End Impl_e2e_call_runtime_Env.

(* StructTuple
  {
    name := "Contract";
    ty_params := [];
    fields := [];
  } *)

Module Impl_core_default_Default_for_e2e_call_runtime_Contract.
  Definition Self : Ty.t := Ty.path "e2e_call_runtime::Contract".
  
  (* Default *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] => ltac:(M.monadic (Value.StructTuple "e2e_call_runtime::Contract" []))
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_e2e_call_runtime_Contract.

Module Impl_e2e_call_runtime_Contract.
  Definition Self : Ty.t := Ty.path "e2e_call_runtime::Contract".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Parameter init_env : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_init_env : M.IsAssociatedFunction Self "init_env" init_env.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.call_closure (|
          M.get_associated_function (| Ty.path "e2e_call_runtime::Contract", "init_env", [] |),
          []
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_env : M.IsAssociatedFunction Self "env" env.
  
  (*
      pub fn new() -> Self {
          Self {}
      }
  *)
  Definition new (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] => ltac:(M.monadic (Value.StructTuple "e2e_call_runtime::Contract" []))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  
  (*
      pub fn get_contract_balance(&self) -> Balance {
          self.env().balance()
      }
  *)
  Definition get_contract_balance (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.call_closure (|
          M.get_associated_function (| Ty.path "e2e_call_runtime::Env", "balance", [] |),
          [
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (| Ty.path "e2e_call_runtime::Contract", "env", [] |),
                [ M.read (| self |) ]
              |)
            |)
          ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_get_contract_balance :
    M.IsAssociatedFunction Self "get_contract_balance" get_contract_balance.
End Impl_e2e_call_runtime_Contract.
