(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_e2e_call_runtime_AccountId_t.
Section Impl_core_default_Default_for_e2e_call_runtime_AccountId_t.
  Definition Self : Set := e2e_call_runtime.AccountId.t.
  
  (*
  Default
  *)
  Definition default : M e2e_call_runtime.AccountId.t :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.default.Default.default (Self := u128.t) (Trait := ℐ))) in
    let* α1 : u128.t := M.call α0 in
    M.pure (e2e_call_runtime.AccountId.Build_t α1).
  
  Axiom default_is_impl : impl Self "default" = default.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_e2e_call_runtime_AccountId_t.
End Impl_core_default_Default_for_e2e_call_runtime_AccountId_t.

Module  Impl_core_clone_Clone_for_e2e_call_runtime_AccountId_t.
Section Impl_core_clone_Clone_for_e2e_call_runtime_AccountId_t.
  Definition Self : Set := e2e_call_runtime.AccountId.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M e2e_call_runtime.AccountId.t :=
    let* self := M.alloc self in
    let* α0 : M.Val e2e_call_runtime.AccountId.t :=
      match_operator
        (DeclaredButUndefinedVariable
          (A := core.clone.AssertParamIsClone.t u128.t))
        [
          fun γ =>
            (let* α0 : ref e2e_call_runtime.AccountId.t := M.read self in
            M.pure (deref α0)) :
            M (M.Val e2e_call_runtime.AccountId.t)
        ] in
    M.read α0.
  
  Axiom clone_is_impl : impl Self "clone" = clone.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_e2e_call_runtime_AccountId_t.
End Impl_core_clone_Clone_for_e2e_call_runtime_AccountId_t.

Module  Impl_core_marker_Copy_for_e2e_call_runtime_AccountId_t.
Section Impl_core_marker_Copy_for_e2e_call_runtime_AccountId_t.
  Definition Self : Set := e2e_call_runtime.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_e2e_call_runtime_AccountId_t.
End Impl_core_marker_Copy_for_e2e_call_runtime_AccountId_t.

Ltac Balance := exact u128.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : e2e_call_runtime.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module  Impl_e2e_call_runtime_Env_t.
Section Impl_e2e_call_runtime_Env_t.
  Definition Self : Set := e2e_call_runtime.Env.t.
  
  (*
      fn balance(&self) -> Balance {
          unimplemented!()
      }
  *)
  Definition balance (self : ref Self) : M ltac:(e2e_call_runtime.Balance) :=
    let* self := M.alloc self in
    let* α0 : ref str.t := M.read (mk_str "not implemented") in
    let* α1 : never.t := M.call (core.panicking.panic α0) in
    never_to_any α1.
  
  Axiom balance_is_impl : impl Self "balance" = balance.
End Impl_e2e_call_runtime_Env_t.
End Impl_e2e_call_runtime_Env_t.

Module  Contract.
Section Contract.
  Inductive t : Set := Build.
End Contract.
End Contract.

Module  Impl_core_default_Default_for_e2e_call_runtime_Contract_t.
Section Impl_core_default_Default_for_e2e_call_runtime_Contract_t.
  Definition Self : Set := e2e_call_runtime.Contract.t.
  
  (*
  Default
  *)
  Definition default : M e2e_call_runtime.Contract.t :=
    M.pure e2e_call_runtime.Contract.Build.
  
  Axiom default_is_impl : impl Self "default" = default.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_e2e_call_runtime_Contract_t.
End Impl_core_default_Default_for_e2e_call_runtime_Contract_t.

Module  Impl_e2e_call_runtime_Contract_t.
Section Impl_e2e_call_runtime_Contract_t.
  Definition Self : Set := e2e_call_runtime.Contract.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env : M e2e_call_runtime.Env.t :=
    let* α0 : ref str.t := M.read (mk_str "not implemented") in
    let* α1 : never.t := M.call (core.panicking.panic α0) in
    never_to_any α1.
  
  Axiom init_env_is_impl : impl Self "init_env" = init_env.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (self : ref Self) : M e2e_call_runtime.Env.t :=
    let* self := M.alloc self in
    M.call (impl e2e_call_runtime.Contract.t "init_env").
  
  Axiom env_is_impl : impl Self "env" = env.
  
  (*
      pub fn new() -> Self {
          Self {}
      }
  *)
  Definition new : M Self := M.pure e2e_call_runtime.Contract.Build.
  
  Axiom new_is_impl : impl Self "new" = new.
  
  (*
      pub fn get_contract_balance(&self) -> Balance {
          self.env().balance()
      }
  *)
  Definition get_contract_balance
      (self : ref Self)
      : M ltac:(e2e_call_runtime.Balance) :=
    let* self := M.alloc self in
    let* α0 : ref e2e_call_runtime.Contract.t := M.read self in
    let* α1 : e2e_call_runtime.Env.t :=
      M.call (impl e2e_call_runtime.Contract.t "env" α0) in
    let* α2 : M.Val e2e_call_runtime.Env.t := M.alloc α1 in
    M.call (impl e2e_call_runtime.Env.t "balance" (borrow α2)).
  
  Axiom get_contract_balance_is_impl :
      impl Self "get_contract_balance" = get_contract_balance.
End Impl_e2e_call_runtime_Contract_t.
End Impl_e2e_call_runtime_Contract_t.
