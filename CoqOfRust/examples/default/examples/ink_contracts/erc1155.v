(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructRecord
  {
    name := "Mapping";
    ty_params := [ "K"; "V" ];
    fields :=
      [
        ("_key", Ty.apply (Ty.path "core::marker::PhantomData") [ K ]);
        ("_value", Ty.apply (Ty.path "core::marker::PhantomData") [ V ])
      ];
  } *)

Module Impl_core_default_Default_for_erc1155_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t := Ty.apply (Ty.path "erc1155::Mapping") [ K; V ].
  
  (* Default *)
  Definition default (K V : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self K V in
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "core::marker::PhantomData") [ K ])
          []
          "default"
          [] in
      let* α1 := M.call_closure α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "core::marker::PhantomData") [ V ])
          []
          "default"
          [] in
      let* α3 := M.call_closure α2 [] in
      M.pure (Value.StructRecord "erc1155::Mapping" [ ("_key", α1); ("_value", α3) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    forall (K V : Ty.t),
    M.IsTraitInstance
      "core::default::Default"
      (Self K V)
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method (default K V)) ].
End Impl_core_default_Default_for_erc1155_Mapping_K_V.

Module Impl_erc1155_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t := Ty.apply (Ty.path "erc1155::Mapping") [ K; V ].
  
  (*
      fn contains(&self, _key: &K) -> bool {
          unimplemented!()
      }
  *)
  Parameter contains : forall (K V : Ty.t), (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_contains :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "contains" (contains K V).
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Parameter get : forall (K V : Ty.t), (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_get :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "get" (get K V).
  
  (*
      fn insert(&mut self, _key: K, _value: V) -> Option<u32> {
          unimplemented!()
      }
  *)
  Parameter insert : forall (K V : Ty.t), (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_insert :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "insert" (insert K V).
  
  (*
      fn remove(&self, _key: K) {
          unimplemented!()
      }
  *)
  Parameter remove : forall (K V : Ty.t), (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_remove :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "remove" (remove K V).
  
  (*
      fn size(&self, _key: K) -> Option<u32> {
          unimplemented!()
      }
  *)
  Parameter size : forall (K V : Ty.t), (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_size :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "size" (size K V).
  
  (*
      fn take(&self, _key: K) -> Option<V> {
          unimplemented!()
      }
  *)
  Parameter take : forall (K V : Ty.t), (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_take :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "take" (take K V).
End Impl_erc1155_Mapping_K_V.

(* StructTuple
  {
    name := "AccountId";
    ty_params := [];
    fields := [ Ty.path "u128" ];
  } *)

Module Impl_core_default_Default_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.path "erc1155::AccountId".
  
  (* Default *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 := M.get_trait_method "core::default::Default" (Ty.path "u128") [] "default" [] in
      let* α1 := M.call_closure α0 [] in
      M.pure (Value.StructTuple "erc1155::AccountId" [ α1 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_erc1155_AccountId.

Module Impl_core_clone_Clone_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.path "erc1155::AccountId".
  
  (* Clone *)
  Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.match_operator Value.DeclaredButUndefined [ fun γ => M.read self ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_erc1155_AccountId.

Module Impl_core_marker_Copy_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.path "erc1155::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance "core::marker::Copy" Self (* Trait polymorphic types *) [] (* Instance *) [].
End Impl_core_marker_Copy_for_erc1155_AccountId.

Module Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.path "erc1155::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralPartialEq_for_erc1155_AccountId.

Module Impl_core_cmp_PartialEq_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.path "erc1155::AccountId".
  
  (* PartialEq *)
  Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 := M.read self in
      let* α1 := M.read (M.get_struct_tuple_field α0 "erc1155::AccountId" 0) in
      let* α2 := M.read other in
      let* α3 := M.read (M.get_struct_tuple_field α2 "erc1155::AccountId" 0) in
      M.pure (BinOp.Pure.eq α1 α3)
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_erc1155_AccountId.

Module Impl_core_convert_From_array_u8_for_erc1155_AccountId.
  Definition Self : Ty.t := Ty.path "erc1155::AccountId".
  
  (*
      fn from(_v: [u8; 32]) -> Self {
          unimplemented!()
      }
  *)
  Parameter from : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::convert::From"
      Self
      (* Trait polymorphic types *) [ (* T *) Ty.apply (Ty.path "array") [ Ty.path "u8" ] ]
      (* Instance *) [ ("from", InstanceField.Method from) ].
End Impl_core_convert_From_array_u8_for_erc1155_AccountId.

Axiom Balance : (Ty.path "erc1155::Balance") = (Ty.path "u128").

(* StructRecord
  {
    name := "Env";
    ty_params := [];
    fields := [ ("caller", Ty.path "erc1155::AccountId") ];
  } *)

(*
fn zero_address() -> AccountId {
    [0u8; 32].into()
}
*)
Definition zero_address (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* α0 :=
      M.get_trait_method
        "core::convert::Into"
        (Ty.apply (Ty.path "array") [ Ty.path "u8" ])
        [ Ty.path "erc1155::AccountId" ]
        "into"
        [] in
    M.call_closure α0 [ repeat (Value.Integer Integer.U8 0) 32 ]
  | _, _ => M.impossible
  end.

Definition value_ON_ERC_1155_RECEIVED_SELECTOR : Value.t :=
  M.run
    (M.alloc
      (Value.Array
        [
          Value.Integer Integer.U8 242;
          Value.Integer Integer.U8 58;
          Value.Integer Integer.U8 110;
          Value.Integer Integer.U8 97
        ])).

Definition _ON_ERC_1155_BATCH_RECEIVED_SELECTOR : Value.t :=
  M.run
    (M.alloc
      (Value.Array
        [
          Value.Integer Integer.U8 188;
          Value.Integer Integer.U8 25;
          Value.Integer Integer.U8 124;
          Value.Integer Integer.U8 129
        ])).

Axiom TokenId : (Ty.path "erc1155::TokenId") = (Ty.path "u128").

(* Enum Error *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "UnexistentToken";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "ZeroAddressTransfer";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "NotApproved";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "InsufficientBalance";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "SelfApproval";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "BatchTransferMismatch";
        item := StructTuple [];
        discriminant := None;
      }
    ];
} *)

Module Impl_core_marker_StructuralPartialEq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.path "erc1155::Error".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralPartialEq_for_erc1155_Error.

Module Impl_core_cmp_PartialEq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.path "erc1155::Error".
  
  (* PartialEq *)
  Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag :=
        let* α0 :=
          M.get_function "core::intrinsics::discriminant_value" [ Ty.path "erc1155::Error" ] in
        let* α1 := M.read self in
        let* α2 := M.call_closure α0 [ α1 ] in
        M.alloc α2 in
      let* __arg1_tag :=
        let* α0 :=
          M.get_function "core::intrinsics::discriminant_value" [ Ty.path "erc1155::Error" ] in
        let* α1 := M.read other in
        let* α2 := M.call_closure α0 [ α1 ] in
        M.alloc α2 in
      let* α0 := M.read __self_tag in
      let* α1 := M.read __arg1_tag in
      let* α0 := M.alloc (BinOp.Pure.eq α0 α1) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_erc1155_Error.

Module Impl_core_marker_StructuralEq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.path "erc1155::Error".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralEq_for_erc1155_Error.

Module Impl_core_cmp_Eq_for_erc1155_Error.
  Definition Self : Ty.t := Ty.path "erc1155::Error".
  
  (* Eq *)
  Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      M.pure (Value.Tuple [])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
End Impl_core_cmp_Eq_for_erc1155_Error.

Axiom Result :
  forall (T : Ty.t),
  (Ty.apply (Ty.path "erc1155::Result") [ T ]) =
    (Ty.apply (Ty.path "core::result::Result") [ T; Ty.path "erc1155::Error" ]).

(* Trait *)
(* Empty module 'Erc1155' *)

(* Trait *)
(* Empty module 'Erc1155TokenReceiver' *)

Axiom Owner : (Ty.path "erc1155::Owner") = (Ty.path "erc1155::AccountId").

Axiom Operator : (Ty.path "erc1155::Operator") = (Ty.path "erc1155::AccountId").

(* StructRecord
  {
    name := "TransferSingle";
    ty_params := [];
    fields :=
      [
        ("operator", Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc1155::AccountId" ]);
        ("from", Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc1155::AccountId" ]);
        ("to", Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc1155::AccountId" ]);
        ("token_id", Ty.path "u128");
        ("value", Ty.path "u128")
      ];
  } *)

(* StructRecord
  {
    name := "ApprovalForAll";
    ty_params := [];
    fields :=
      [
        ("owner", Ty.path "erc1155::AccountId");
        ("operator", Ty.path "erc1155::AccountId");
        ("approved", Ty.path "bool")
      ];
  } *)

(* StructRecord
  {
    name := "Uri";
    ty_params := [];
    fields := [ ("value", Ty.path "alloc::string::String"); ("token_id", Ty.path "u128") ];
  } *)

(* Enum Event *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "TransferSingle";
        item := StructTuple [ Ty.path "erc1155::TransferSingle" ];
        discriminant := None;
      };
      {
        name := "ApprovalForAll";
        item := StructTuple [ Ty.path "erc1155::ApprovalForAll" ];
        discriminant := None;
      };
      {
        name := "Uri";
        item := StructTuple [ Ty.path "erc1155::Uri" ];
        discriminant := None;
      }
    ];
} *)

Module Impl_erc1155_Env.
  Definition Self : Ty.t := Ty.path "erc1155::Env".
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (M.get_struct_record_field α0 "erc1155::Env" "caller")
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_caller : M.IsAssociatedFunction Self "caller" caller.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Parameter emit_event : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_emit_event : M.IsAssociatedFunction Self "emit_event" emit_event.
End Impl_erc1155_Env.

(* StructRecord
  {
    name := "Contract";
    ty_params := [];
    fields :=
      [
        ("balances",
          Ty.apply
            (Ty.path "erc1155::Mapping")
            [ Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ]; Ty.path "u128" ]);
        ("approvals",
          Ty.apply
            (Ty.path "erc1155::Mapping")
            [ Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "erc1155::AccountId" ]; Ty.tuple []
            ]);
        ("token_id_nonce", Ty.path "u128")
      ];
  } *)

Module Impl_core_default_Default_for_erc1155_Contract.
  Definition Self : Ty.t := Ty.path "erc1155::Contract".
  
  (* Default *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply
            (Ty.path "erc1155::Mapping")
            [ Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ]; Ty.path "u128" ])
          []
          "default"
          [] in
      let* α1 := M.call_closure α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply
            (Ty.path "erc1155::Mapping")
            [ Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "erc1155::AccountId" ]; Ty.tuple []
            ])
          []
          "default"
          [] in
      let* α3 := M.call_closure α2 [] in
      let* α4 := M.get_trait_method "core::default::Default" (Ty.path "u128") [] "default" [] in
      let* α5 := M.call_closure α4 [] in
      M.pure
        (Value.StructRecord
          "erc1155::Contract"
          [ ("balances", α1); ("approvals", α3); ("token_id_nonce", α5) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_erc1155_Contract.

Module Impl_erc1155_Contract.
  Definition Self : Ty.t := Ty.path "erc1155::Contract".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Parameter init_env : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_init_env : M.IsAssociatedFunction Self "init_env" init_env.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.get_associated_function (Ty.path "erc1155::Contract") "init_env" [] in
      M.call_closure α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_env : M.IsAssociatedFunction Self "env" env.
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method "core::default::Default" (Ty.path "erc1155::Contract") [] "default" [] in
      M.call_closure α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  
  (*
      pub fn create(&mut self, value: Balance) -> TokenId {
          let caller = self.env().caller();
  
          // Given that TokenId is a `u128` the likelihood of this overflowing is pretty
          // slim.
          self.token_id_nonce += 1;
          self.balances.insert((caller, self.token_id_nonce), value);
  
          // Emit transfer event but with mint semantics
          self.env().emit_event(Event::TransferSingle(TransferSingle {
              operator: Some(caller),
              from: None,
              to: if value == 0 { None } else { Some(caller) },
              token_id: self.token_id_nonce,
              value,
          }));
  
          self.token_id_nonce
      }
  *)
  Definition create (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; value ] =>
      let* self := M.alloc self in
      let* value := M.alloc value in
      let* caller :=
        let* α0 := M.get_associated_function (Ty.path "erc1155::Env") "caller" [] in
        let* α1 := M.get_associated_function (Ty.path "erc1155::Contract") "env" [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call_closure α0 [ α4 ] in
        M.alloc α5 in
      let* _ :=
        let* β :=
          let* α0 := M.read self in
          M.pure (M.get_struct_record_field α0 "erc1155::Contract" "token_id_nonce") in
        let* α0 := M.read β in
        let* α1 := BinOp.Panic.add α0 (Value.Integer Integer.U128 1) in
        M.assign β α1 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "erc1155::Mapping")
              [ Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ]; Ty.path "u128" ])
            "insert"
            [] in
        let* α1 := M.read self in
        let* α2 := M.read caller in
        let* α3 := M.read self in
        let* α4 := M.read (M.get_struct_record_field α3 "erc1155::Contract" "token_id_nonce") in
        let* α5 := M.read value in
        let* α6 :=
          M.call_closure
            α0
            [
              M.get_struct_record_field α1 "erc1155::Contract" "balances";
              Value.Tuple [ α2; α4 ];
              α5
            ] in
        M.alloc α6 in
      let* _ :=
        let* α0 := M.get_associated_function (Ty.path "erc1155::Env") "emit_event" [] in
        let* α1 := M.get_associated_function (Ty.path "erc1155::Contract") "env" [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read caller in
        let* α6 := M.alloc (Value.Tuple []) in
        let* α7 :=
          M.match_operator
            α6
            [
              fun γ =>
                let* γ :=
                  let* α0 := M.read value in
                  let* α1 := M.alloc (BinOp.Pure.eq α0 (Value.Integer Integer.U128 0)) in
                  M.pure (M.use α1) in
                let* _ :=
                  let* α0 := M.read γ in
                  M.is_constant_or_break_match α0 (Value.Bool true) in
                M.alloc (Value.StructTuple "core::option::Option::None" []);
              fun γ =>
                let* α0 := M.read caller in
                M.alloc (Value.StructTuple "core::option::Option::Some" [ α0 ])
            ] in
        let* α8 := M.read α7 in
        let* α9 := M.read self in
        let* α10 := M.read (M.get_struct_record_field α9 "erc1155::Contract" "token_id_nonce") in
        let* α11 := M.read value in
        let* α12 :=
          M.call_closure
            α0
            [
              α4;
              Value.StructTuple
                "erc1155::Event::TransferSingle"
                [
                  Value.StructRecord
                    "erc1155::TransferSingle"
                    [
                      ("operator", Value.StructTuple "core::option::Option::Some" [ α5 ]);
                      ("from", Value.StructTuple "core::option::Option::None" []);
                      ("to", α8);
                      ("token_id", α10);
                      ("value", α11)
                    ]
                ]
            ] in
        M.alloc α12 in
      let* α0 := M.read self in
      M.read (M.get_struct_record_field α0 "erc1155::Contract" "token_id_nonce")
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_create : M.IsAssociatedFunction Self "create" create.
  
  (*
      pub fn mint(&mut self, token_id: TokenId, value: Balance) -> Result<()> {
          ensure!(token_id <= self.token_id_nonce, Error::UnexistentToken);
  
          let caller = self.env().caller();
          self.balances.insert((caller, token_id), value);
  
          // Emit transfer event but with mint semantics
          self.env().emit_event(Event::TransferSingle(TransferSingle {
              operator: Some(caller),
              from: None,
              to: Some(caller),
              token_id,
              value,
          }));
  
          Ok(())
      }
  *)
  Definition mint (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; token_id; value ] =>
      let* self := M.alloc self in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 := M.read token_id in
                let* α1 := M.read self in
                let* α2 :=
                  M.read (M.get_struct_record_field α1 "erc1155::Contract" "token_id_nonce") in
                let* α3 := M.alloc (UnOp.Pure.not (BinOp.Pure.le α0 α2)) in
                M.pure (M.use α3) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 :=
                M.get_trait_method
                  "core::convert::Into"
                  (Ty.path "erc1155::Error")
                  [ Ty.path "erc1155::Error" ]
                  "into"
                  [] in
              let* α1 :=
                M.call_closure α0 [ Value.StructTuple "erc1155::Error::UnexistentToken" [] ] in
              let* α2 := M.return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
              let* α3 := M.read α2 in
              let* α4 := M.never_to_any α3 in
              M.alloc α4;
            fun γ => M.alloc (Value.Tuple [])
          ] in
      let* caller :=
        let* α0 := M.get_associated_function (Ty.path "erc1155::Env") "caller" [] in
        let* α1 := M.get_associated_function (Ty.path "erc1155::Contract") "env" [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call_closure α0 [ α4 ] in
        M.alloc α5 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "erc1155::Mapping")
              [ Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ]; Ty.path "u128" ])
            "insert"
            [] in
        let* α1 := M.read self in
        let* α2 := M.read caller in
        let* α3 := M.read token_id in
        let* α4 := M.read value in
        let* α5 :=
          M.call_closure
            α0
            [
              M.get_struct_record_field α1 "erc1155::Contract" "balances";
              Value.Tuple [ α2; α3 ];
              α4
            ] in
        M.alloc α5 in
      let* _ :=
        let* α0 := M.get_associated_function (Ty.path "erc1155::Env") "emit_event" [] in
        let* α1 := M.get_associated_function (Ty.path "erc1155::Contract") "env" [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read caller in
        let* α6 := M.read caller in
        let* α7 := M.read token_id in
        let* α8 := M.read value in
        let* α9 :=
          M.call_closure
            α0
            [
              α4;
              Value.StructTuple
                "erc1155::Event::TransferSingle"
                [
                  Value.StructRecord
                    "erc1155::TransferSingle"
                    [
                      ("operator", Value.StructTuple "core::option::Option::Some" [ α5 ]);
                      ("from", Value.StructTuple "core::option::Option::None" []);
                      ("to", Value.StructTuple "core::option::Option::Some" [ α6 ]);
                      ("token_id", α7);
                      ("value", α8)
                    ]
                ]
            ] in
        M.alloc α9 in
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_mint : M.IsAssociatedFunction Self "mint" mint.
  
  (*
      fn perform_transfer(
          &mut self,
          from: AccountId,
          to: AccountId,
          token_id: TokenId,
          value: Balance,
      ) {
          let mut sender_balance = self
              .balances
              .get(&(from, token_id))
              .expect("Caller should have ensured that `from` holds `token_id`.");
          sender_balance -= value;
          self.balances.insert((from, token_id), sender_balance);
  
          let mut recipient_balance = self.balances.get(&(to, token_id)).unwrap_or(0 as u128);
          recipient_balance += value;
          self.balances.insert((to, token_id), recipient_balance);
  
          let caller = self.env().caller();
          self.env().emit_event(Event::TransferSingle(TransferSingle {
              operator: Some(caller),
              from: Some(from),
              to: Some(to),
              token_id,
              value,
          }));
      }
  *)
  Definition perform_transfer (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; from; to; token_id; value ] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let* sender_balance :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u128" ])
            "expect"
            [] in
        let* α1 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "erc1155::Mapping")
              [ Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ]; Ty.path "u128" ])
            "get"
            [] in
        let* α2 := M.read self in
        let* α3 := M.read from in
        let* α4 := M.read token_id in
        let* α5 := M.alloc (Value.Tuple [ α3; α4 ]) in
        let* α6 :=
          M.call_closure α1 [ M.get_struct_record_field α2 "erc1155::Contract" "balances"; α5 ] in
        let* α7 := M.read (mk_str "Caller should have ensured that `from` holds `token_id`.") in
        let* α8 := M.call_closure α0 [ α6; α7 ] in
        M.alloc α8 in
      let* _ :=
        let β := sender_balance in
        let* α0 := M.read β in
        let* α1 := M.read value in
        let* α2 := BinOp.Panic.sub α0 α1 in
        M.assign β α2 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "erc1155::Mapping")
              [ Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ]; Ty.path "u128" ])
            "insert"
            [] in
        let* α1 := M.read self in
        let* α2 := M.read from in
        let* α3 := M.read token_id in
        let* α4 := M.read sender_balance in
        let* α5 :=
          M.call_closure
            α0
            [
              M.get_struct_record_field α1 "erc1155::Contract" "balances";
              Value.Tuple [ α2; α3 ];
              α4
            ] in
        M.alloc α5 in
      let* recipient_balance :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u128" ])
            "unwrap_or"
            [] in
        let* α1 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "erc1155::Mapping")
              [ Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ]; Ty.path "u128" ])
            "get"
            [] in
        let* α2 := M.read self in
        let* α3 := M.read to in
        let* α4 := M.read token_id in
        let* α5 := M.alloc (Value.Tuple [ α3; α4 ]) in
        let* α6 :=
          M.call_closure α1 [ M.get_struct_record_field α2 "erc1155::Contract" "balances"; α5 ] in
        let* α7 := M.alloc (Value.Integer Integer.U128 0) in
        let* α8 := M.read (M.use α7) in
        let* α9 := M.call_closure α0 [ α6; α8 ] in
        M.alloc α9 in
      let* _ :=
        let β := recipient_balance in
        let* α0 := M.read β in
        let* α1 := M.read value in
        let* α2 := BinOp.Panic.add α0 α1 in
        M.assign β α2 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "erc1155::Mapping")
              [ Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ]; Ty.path "u128" ])
            "insert"
            [] in
        let* α1 := M.read self in
        let* α2 := M.read to in
        let* α3 := M.read token_id in
        let* α4 := M.read recipient_balance in
        let* α5 :=
          M.call_closure
            α0
            [
              M.get_struct_record_field α1 "erc1155::Contract" "balances";
              Value.Tuple [ α2; α3 ];
              α4
            ] in
        M.alloc α5 in
      let* caller :=
        let* α0 := M.get_associated_function (Ty.path "erc1155::Env") "caller" [] in
        let* α1 := M.get_associated_function (Ty.path "erc1155::Contract") "env" [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call_closure α0 [ α4 ] in
        M.alloc α5 in
      let* _ :=
        let* α0 := M.get_associated_function (Ty.path "erc1155::Env") "emit_event" [] in
        let* α1 := M.get_associated_function (Ty.path "erc1155::Contract") "env" [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read caller in
        let* α6 := M.read from in
        let* α7 := M.read to in
        let* α8 := M.read token_id in
        let* α9 := M.read value in
        let* α10 :=
          M.call_closure
            α0
            [
              α4;
              Value.StructTuple
                "erc1155::Event::TransferSingle"
                [
                  Value.StructRecord
                    "erc1155::TransferSingle"
                    [
                      ("operator", Value.StructTuple "core::option::Option::Some" [ α5 ]);
                      ("from", Value.StructTuple "core::option::Option::Some" [ α6 ]);
                      ("to", Value.StructTuple "core::option::Option::Some" [ α7 ]);
                      ("token_id", α8);
                      ("value", α9)
                    ]
                ]
            ] in
        M.alloc α10 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_perform_transfer :
    M.IsAssociatedFunction Self "perform_transfer" perform_transfer.
  
  (*
      fn transfer_acceptance_check(
          &mut self,
          caller: AccountId,
          from: AccountId,
          to: AccountId,
          token_id: TokenId,
          value: Balance,
          data: Vec<u8>,
      ) {
          // This is disabled during tests due to the use of `invoke_contract()` not
          // being supported (tests end up panicking).
          #[cfg(not(test))]
          {
              use ink::env::call::{build_call, ExecutionInput, Selector};
  
              // If our recipient is a smart contract we need to see if they accept or
              // reject this transfer. If they reject it we need to revert the call.
              let result = build_call::<Environment>()
                  .call(to)
                  .gas_limit(5000)
                  .exec_input(
                      ExecutionInput::new(Selector::new(ON_ERC_1155_RECEIVED_SELECTOR))
                          .push_arg(caller)
                          .push_arg(from)
                          .push_arg(token_id)
                          .push_arg(value)
                          .push_arg(data),
                  )
                  .returns::<Vec<u8>>()
                  .params()
                  .try_invoke();
  
              match result {
                  Ok(v) => {
                      ink::env::debug_println!(
                          "Received return value \"{:?}\" from contract {:?}",
                          v.clone()
                              .expect("Call should be valid, don't expect a `LangError`."),
                          from
                      );
                      assert_eq!(
                          v.clone()
                              .expect("Call should be valid, don't expect a `LangError`."),
                          &ON_ERC_1155_RECEIVED_SELECTOR[..],
                          "The recipient contract at {to:?} does not accept token transfers.\n
                              Expected: {ON_ERC_1155_RECEIVED_SELECTOR:?}, Got {v:?}"
                      )
                  }
                  Err(e) => {
                      match e {
                          ink::env::Error::CodeNotFound | ink::env::Error::NotCallable => {
                              // Our recipient wasn't a smart contract, so there's
                              // nothing more for
                              // us to do
                              ink::env::debug_println!(
                                  "Recipient at {:?} from is not a smart contract ({:?})",
                                  from,
                                  e
                              );
                          }
                          _ => {
                              // We got some sort of error from the call to our
                              // recipient smart
                              // contract, and as such we must revert this call
                              panic!("Got error \"{e:?}\" while trying to call {from:?}")
                          }
                      }
                  }
              }
          }
      }
  *)
  Definition transfer_acceptance_check (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; caller; from; to; token_id; value; data ] =>
      let* self := M.alloc self in
      let* caller := M.alloc caller in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let* data := M.alloc data in
      M.pure (Value.Tuple [])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_transfer_acceptance_check :
    M.IsAssociatedFunction Self "transfer_acceptance_check" transfer_acceptance_check.
End Impl_erc1155_Contract.

Module Impl_erc1155_Erc1155_for_erc1155_Contract.
  Definition Self : Ty.t := Ty.path "erc1155::Contract".
  
  (*
      fn is_approved_for_all(&self, owner: AccountId, operator: AccountId) -> bool {
          self.approvals.contains(&(owner, operator))
      }
  *)
  Definition is_approved_for_all (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; owner; operator ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* operator := M.alloc operator in
      let* α0 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "erc1155::Mapping")
            [ Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "erc1155::AccountId" ]; Ty.tuple []
            ])
          "contains"
          [] in
      let* α1 := M.read self in
      let* α2 := M.read owner in
      let* α3 := M.read operator in
      let* α4 := M.alloc (Value.Tuple [ α2; α3 ]) in
      M.call_closure α0 [ M.get_struct_record_field α1 "erc1155::Contract" "approvals"; α4 ]
    | _, _ => M.impossible
    end.
  
  (*
      fn balance_of(&self, owner: AccountId, token_id: TokenId) -> Balance {
          self.balances.get(&(owner, token_id)).unwrap_or(0 as u128)
      }
  *)
  Definition balance_of (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; owner; token_id ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* token_id := M.alloc token_id in
      let* α0 :=
        M.get_associated_function
          (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u128" ])
          "unwrap_or"
          [] in
      let* α1 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "erc1155::Mapping")
            [ Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "u128" ]; Ty.path "u128" ])
          "get"
          [] in
      let* α2 := M.read self in
      let* α3 := M.read owner in
      let* α4 := M.read token_id in
      let* α5 := M.alloc (Value.Tuple [ α3; α4 ]) in
      let* α6 :=
        M.call_closure α1 [ M.get_struct_record_field α2 "erc1155::Contract" "balances"; α5 ] in
      let* α7 := M.alloc (Value.Integer Integer.U128 0) in
      let* α8 := M.read (M.use α7) in
      M.call_closure α0 [ α6; α8 ]
    | _, _ => M.impossible
    end.
  
  (*
      fn safe_transfer_from(
          &mut self,
          from: AccountId,
          to: AccountId,
          token_id: TokenId,
          value: Balance,
          data: Vec<u8>,
      ) -> Result<()> {
          let caller = self.env().caller();
          if caller != from {
              ensure!(self.is_approved_for_all(from, caller), Error::NotApproved);
          }
  
          ensure!(to != zero_address(), Error::ZeroAddressTransfer);
  
          let balance = self.balance_of(from, token_id);
          ensure!(balance >= value, Error::InsufficientBalance);
  
          self.perform_transfer(from, to, token_id, value);
          self.transfer_acceptance_check(caller, from, to, token_id, value, data);
  
          Ok(())
      }
  *)
  Definition safe_transfer_from (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; from; to; token_id; value; data ] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_id := M.alloc token_id in
      let* value := M.alloc value in
      let* data := M.alloc data in
      let* caller :=
        let* α0 := M.get_associated_function (Ty.path "erc1155::Env") "caller" [] in
        let* α1 := M.get_associated_function (Ty.path "erc1155::Contract") "env" [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call_closure α0 [ α4 ] in
        M.alloc α5 in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 :=
                  M.get_trait_method
                    "core::cmp::PartialEq"
                    (Ty.path "erc1155::AccountId")
                    [ Ty.path "erc1155::AccountId" ]
                    "ne"
                    [] in
                let* α1 := M.call_closure α0 [ caller; from ] in
                let* α2 := M.alloc α1 in
                M.pure (M.use α2) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* _ :=
                let* α0 := M.alloc (Value.Tuple []) in
                M.match_operator
                  α0
                  [
                    fun γ =>
                      let* γ :=
                        let* α0 :=
                          M.get_trait_method
                            "erc1155::Erc1155"
                            (Ty.path "erc1155::Contract")
                            []
                            "is_approved_for_all"
                            [] in
                        let* α1 := M.read self in
                        let* α2 := M.read from in
                        let* α3 := M.read caller in
                        let* α4 := M.call_closure α0 [ α1; α2; α3 ] in
                        let* α5 := M.alloc (UnOp.Pure.not α4) in
                        M.pure (M.use α5) in
                      let* _ :=
                        let* α0 := M.read γ in
                        M.is_constant_or_break_match α0 (Value.Bool true) in
                      let* α0 :=
                        M.get_trait_method
                          "core::convert::Into"
                          (Ty.path "erc1155::Error")
                          [ Ty.path "erc1155::Error" ]
                          "into"
                          [] in
                      let* α1 :=
                        M.call_closure α0 [ Value.StructTuple "erc1155::Error::NotApproved" [] ] in
                      let* α2 := M.return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
                      let* α3 := M.read α2 in
                      let* α4 := M.never_to_any α3 in
                      M.alloc α4;
                    fun γ => M.alloc (Value.Tuple [])
                  ] in
              M.alloc (Value.Tuple []);
            fun γ => M.alloc (Value.Tuple [])
          ] in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 :=
                  M.get_trait_method
                    "core::cmp::PartialEq"
                    (Ty.path "erc1155::AccountId")
                    [ Ty.path "erc1155::AccountId" ]
                    "ne"
                    [] in
                let* α1 := M.get_function "erc1155::zero_address" [] in
                let* α2 := M.call_closure α1 [] in
                let* α3 := M.alloc α2 in
                let* α4 := M.call_closure α0 [ to; α3 ] in
                let* α5 := M.alloc (UnOp.Pure.not α4) in
                M.pure (M.use α5) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 :=
                M.get_trait_method
                  "core::convert::Into"
                  (Ty.path "erc1155::Error")
                  [ Ty.path "erc1155::Error" ]
                  "into"
                  [] in
              let* α1 :=
                M.call_closure α0 [ Value.StructTuple "erc1155::Error::ZeroAddressTransfer" [] ] in
              let* α2 := M.return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
              let* α3 := M.read α2 in
              let* α4 := M.never_to_any α3 in
              M.alloc α4;
            fun γ => M.alloc (Value.Tuple [])
          ] in
      let* balance :=
        let* α0 :=
          M.get_trait_method "erc1155::Erc1155" (Ty.path "erc1155::Contract") [] "balance_of" [] in
        let* α1 := M.read self in
        let* α2 := M.read from in
        let* α3 := M.read token_id in
        let* α4 := M.call_closure α0 [ α1; α2; α3 ] in
        M.alloc α4 in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 := M.read balance in
                let* α1 := M.read value in
                let* α2 := M.alloc (UnOp.Pure.not (BinOp.Pure.ge α0 α1)) in
                M.pure (M.use α2) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 :=
                M.get_trait_method
                  "core::convert::Into"
                  (Ty.path "erc1155::Error")
                  [ Ty.path "erc1155::Error" ]
                  "into"
                  [] in
              let* α1 :=
                M.call_closure α0 [ Value.StructTuple "erc1155::Error::InsufficientBalance" [] ] in
              let* α2 := M.return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
              let* α3 := M.read α2 in
              let* α4 := M.never_to_any α3 in
              M.alloc α4;
            fun γ => M.alloc (Value.Tuple [])
          ] in
      let* _ :=
        let* α0 := M.get_associated_function (Ty.path "erc1155::Contract") "perform_transfer" [] in
        let* α1 := M.read self in
        let* α2 := M.read from in
        let* α3 := M.read to in
        let* α4 := M.read token_id in
        let* α5 := M.read value in
        let* α6 := M.call_closure α0 [ α1; α2; α3; α4; α5 ] in
        M.alloc α6 in
      let* _ :=
        let* α0 :=
          M.get_associated_function (Ty.path "erc1155::Contract") "transfer_acceptance_check" [] in
        let* α1 := M.read self in
        let* α2 := M.read caller in
        let* α3 := M.read from in
        let* α4 := M.read to in
        let* α5 := M.read token_id in
        let* α6 := M.read value in
        let* α7 := M.read data in
        let* α8 := M.call_closure α0 [ α1; α2; α3; α4; α5; α6; α7 ] in
        M.alloc α8 in
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      fn safe_batch_transfer_from(
          &mut self,
          from: AccountId,
          to: AccountId,
          token_ids: Vec<TokenId>,
          values: Vec<Balance>,
          data: Vec<u8>,
      ) -> Result<()> {
          let caller = self.env().caller();
          if caller != from {
              ensure!(self.is_approved_for_all(from, caller), Error::NotApproved);
          }
  
          ensure!(to != zero_address(), Error::ZeroAddressTransfer);
          ensure!(!token_ids.is_empty(), Error::BatchTransferMismatch);
          ensure!(
              token_ids.len() == values.len(),
              Error::BatchTransferMismatch,
          );
  
          let transfers = token_ids.iter().zip(values.iter());
          for (&id, &v) in transfers.clone() {
              let balance = self.balance_of(from, id);
              ensure!(balance >= v, Error::InsufficientBalance);
          }
  
          for (&id, &v) in transfers {
              self.perform_transfer(from, to, id, v);
          }
  
          // Can use the any token ID/value here, we really just care about knowing if
          // `to` is a smart contract which accepts transfers
          self.transfer_acceptance_check(caller, from, to, token_ids[0], values[0], data);
  
          Ok(())
      }
  *)
  Definition safe_batch_transfer_from (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; from; to; token_ids; values; data ] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* token_ids := M.alloc token_ids in
      let* values := M.alloc values in
      let* data := M.alloc data in
      let* caller :=
        let* α0 := M.get_associated_function (Ty.path "erc1155::Env") "caller" [] in
        let* α1 := M.get_associated_function (Ty.path "erc1155::Contract") "env" [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call_closure α0 [ α4 ] in
        M.alloc α5 in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 :=
                  M.get_trait_method
                    "core::cmp::PartialEq"
                    (Ty.path "erc1155::AccountId")
                    [ Ty.path "erc1155::AccountId" ]
                    "ne"
                    [] in
                let* α1 := M.call_closure α0 [ caller; from ] in
                let* α2 := M.alloc α1 in
                M.pure (M.use α2) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* _ :=
                let* α0 := M.alloc (Value.Tuple []) in
                M.match_operator
                  α0
                  [
                    fun γ =>
                      let* γ :=
                        let* α0 :=
                          M.get_trait_method
                            "erc1155::Erc1155"
                            (Ty.path "erc1155::Contract")
                            []
                            "is_approved_for_all"
                            [] in
                        let* α1 := M.read self in
                        let* α2 := M.read from in
                        let* α3 := M.read caller in
                        let* α4 := M.call_closure α0 [ α1; α2; α3 ] in
                        let* α5 := M.alloc (UnOp.Pure.not α4) in
                        M.pure (M.use α5) in
                      let* _ :=
                        let* α0 := M.read γ in
                        M.is_constant_or_break_match α0 (Value.Bool true) in
                      let* α0 :=
                        M.get_trait_method
                          "core::convert::Into"
                          (Ty.path "erc1155::Error")
                          [ Ty.path "erc1155::Error" ]
                          "into"
                          [] in
                      let* α1 :=
                        M.call_closure α0 [ Value.StructTuple "erc1155::Error::NotApproved" [] ] in
                      let* α2 := M.return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
                      let* α3 := M.read α2 in
                      let* α4 := M.never_to_any α3 in
                      M.alloc α4;
                    fun γ => M.alloc (Value.Tuple [])
                  ] in
              M.alloc (Value.Tuple []);
            fun γ => M.alloc (Value.Tuple [])
          ] in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 :=
                  M.get_trait_method
                    "core::cmp::PartialEq"
                    (Ty.path "erc1155::AccountId")
                    [ Ty.path "erc1155::AccountId" ]
                    "ne"
                    [] in
                let* α1 := M.get_function "erc1155::zero_address" [] in
                let* α2 := M.call_closure α1 [] in
                let* α3 := M.alloc α2 in
                let* α4 := M.call_closure α0 [ to; α3 ] in
                let* α5 := M.alloc (UnOp.Pure.not α4) in
                M.pure (M.use α5) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 :=
                M.get_trait_method
                  "core::convert::Into"
                  (Ty.path "erc1155::Error")
                  [ Ty.path "erc1155::Error" ]
                  "into"
                  [] in
              let* α1 :=
                M.call_closure α0 [ Value.StructTuple "erc1155::Error::ZeroAddressTransfer" [] ] in
              let* α2 := M.return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
              let* α3 := M.read α2 in
              let* α4 := M.never_to_any α3 in
              M.alloc α4;
            fun γ => M.alloc (Value.Tuple [])
          ] in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 :=
                  M.get_associated_function
                    (Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ])
                    "is_empty"
                    [] in
                let* α1 := M.call_closure α0 [ token_ids ] in
                let* α2 := M.alloc (UnOp.Pure.not (UnOp.Pure.not α1)) in
                M.pure (M.use α2) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 :=
                M.get_trait_method
                  "core::convert::Into"
                  (Ty.path "erc1155::Error")
                  [ Ty.path "erc1155::Error" ]
                  "into"
                  [] in
              let* α1 :=
                M.call_closure
                  α0
                  [ Value.StructTuple "erc1155::Error::BatchTransferMismatch" [] ] in
              let* α2 := M.return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
              let* α3 := M.read α2 in
              let* α4 := M.never_to_any α3 in
              M.alloc α4;
            fun γ => M.alloc (Value.Tuple [])
          ] in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 :=
                  M.get_associated_function
                    (Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ])
                    "len"
                    [] in
                let* α1 := M.call_closure α0 [ token_ids ] in
                let* α2 :=
                  M.get_associated_function
                    (Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ])
                    "len"
                    [] in
                let* α3 := M.call_closure α2 [ values ] in
                let* α4 := M.alloc (UnOp.Pure.not (BinOp.Pure.eq α1 α3)) in
                M.pure (M.use α4) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 :=
                M.get_trait_method
                  "core::convert::Into"
                  (Ty.path "erc1155::Error")
                  [ Ty.path "erc1155::Error" ]
                  "into"
                  [] in
              let* α1 :=
                M.call_closure
                  α0
                  [ Value.StructTuple "erc1155::Error::BatchTransferMismatch" [] ] in
              let* α2 := M.return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
              let* α3 := M.read α2 in
              let* α4 := M.never_to_any α3 in
              M.alloc α4;
            fun γ => M.alloc (Value.Tuple [])
          ] in
      let* transfers :=
        let* α0 :=
          M.get_trait_method
            "core::iter::traits::iterator::Iterator"
            (Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u128" ])
            []
            "zip"
            [ Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u128" ] ] in
        let* α1 :=
          M.get_associated_function (Ty.apply (Ty.path "slice") [ Ty.path "u128" ]) "iter" [] in
        let* α2 :=
          M.get_trait_method
            "core::ops::deref::Deref"
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ])
            []
            "deref"
            [] in
        let* α3 := M.call_closure α2 [ token_ids ] in
        let* α4 := M.call_closure α1 [ α3 ] in
        let* α5 :=
          M.get_associated_function (Ty.apply (Ty.path "slice") [ Ty.path "u128" ]) "iter" [] in
        let* α6 :=
          M.get_trait_method
            "core::ops::deref::Deref"
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ])
            []
            "deref"
            [] in
        let* α7 := M.call_closure α6 [ values ] in
        let* α8 := M.call_closure α5 [ α7 ] in
        let* α9 := M.call_closure α0 [ α4; α8 ] in
        M.alloc α9 in
      let* _ :=
        let* α0 :=
          M.get_trait_method
            "core::iter::traits::collect::IntoIterator"
            (Ty.apply
              (Ty.path "core::iter::adapters::zip::Zip")
              [
                Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u128" ];
                Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u128" ]
              ])
            []
            "into_iter"
            [] in
        let* α1 :=
          M.get_trait_method
            "core::clone::Clone"
            (Ty.apply
              (Ty.path "core::iter::adapters::zip::Zip")
              [
                Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u128" ];
                Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u128" ]
              ])
            []
            "clone"
            [] in
        let* α2 := M.call_closure α1 [ transfers ] in
        let* α3 := M.call_closure α0 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 :=
          M.match_operator
            α4
            [
              fun γ =>
                let* iter := M.copy γ in
                M.loop
                  (let* _ :=
                    let* α0 :=
                      M.get_trait_method
                        "core::iter::traits::iterator::Iterator"
                        (Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          [
                            Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u128" ];
                            Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u128" ]
                          ])
                        []
                        "next"
                        [] in
                    let* α1 := M.call_closure α0 [ iter ] in
                    let* α2 := M.alloc α1 in
                    M.match_operator
                      α2
                      [
                        fun γ =>
                          let* α0 := M.break in
                          let* α1 := M.read α0 in
                          let* α2 := M.never_to_any α1 in
                          M.alloc α2;
                        fun γ =>
                          let* γ0_0 :=
                            M.get_struct_tuple_field_or_break_match
                              γ
                              "core::option::Option::Some"
                              0 in
                          let γ1_0 := M.get_tuple_field γ0_0 0 in
                          let γ1_1 := M.get_tuple_field γ0_0 1 in
                          let* γ1_0 := M.read γ1_0 in
                          let* id := M.copy γ1_0 in
                          let* γ1_1 := M.read γ1_1 in
                          let* v := M.copy γ1_1 in
                          let* balance :=
                            let* α0 :=
                              M.get_trait_method
                                "erc1155::Erc1155"
                                (Ty.path "erc1155::Contract")
                                []
                                "balance_of"
                                [] in
                            let* α1 := M.read self in
                            let* α2 := M.read from in
                            let* α3 := M.read id in
                            let* α4 := M.call_closure α0 [ α1; α2; α3 ] in
                            M.alloc α4 in
                          let* _ :=
                            let* α0 := M.alloc (Value.Tuple []) in
                            M.match_operator
                              α0
                              [
                                fun γ =>
                                  let* γ :=
                                    let* α0 := M.read balance in
                                    let* α1 := M.read v in
                                    let* α2 := M.alloc (UnOp.Pure.not (BinOp.Pure.ge α0 α1)) in
                                    M.pure (M.use α2) in
                                  let* _ :=
                                    let* α0 := M.read γ in
                                    M.is_constant_or_break_match α0 (Value.Bool true) in
                                  let* α0 :=
                                    M.get_trait_method
                                      "core::convert::Into"
                                      (Ty.path "erc1155::Error")
                                      [ Ty.path "erc1155::Error" ]
                                      "into"
                                      [] in
                                  let* α1 :=
                                    M.call_closure
                                      α0
                                      [ Value.StructTuple "erc1155::Error::InsufficientBalance" []
                                      ] in
                                  let* α2 :=
                                    M.return_
                                      (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
                                  let* α3 := M.read α2 in
                                  let* α4 := M.never_to_any α3 in
                                  M.alloc α4;
                                fun γ => M.alloc (Value.Tuple [])
                              ] in
                          M.alloc (Value.Tuple [])
                      ] in
                  M.alloc (Value.Tuple []))
            ] in
        M.pure (M.use α5) in
      let* _ :=
        let* α0 :=
          M.get_trait_method
            "core::iter::traits::collect::IntoIterator"
            (Ty.apply
              (Ty.path "core::iter::adapters::zip::Zip")
              [
                Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u128" ];
                Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u128" ]
              ])
            []
            "into_iter"
            [] in
        let* α1 := M.read transfers in
        let* α2 := M.call_closure α0 [ α1 ] in
        let* α3 := M.alloc α2 in
        let* α4 :=
          M.match_operator
            α3
            [
              fun γ =>
                let* iter := M.copy γ in
                M.loop
                  (let* _ :=
                    let* α0 :=
                      M.get_trait_method
                        "core::iter::traits::iterator::Iterator"
                        (Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          [
                            Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u128" ];
                            Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u128" ]
                          ])
                        []
                        "next"
                        [] in
                    let* α1 := M.call_closure α0 [ iter ] in
                    let* α2 := M.alloc α1 in
                    M.match_operator
                      α2
                      [
                        fun γ =>
                          let* α0 := M.break in
                          let* α1 := M.read α0 in
                          let* α2 := M.never_to_any α1 in
                          M.alloc α2;
                        fun γ =>
                          let* γ0_0 :=
                            M.get_struct_tuple_field_or_break_match
                              γ
                              "core::option::Option::Some"
                              0 in
                          let γ1_0 := M.get_tuple_field γ0_0 0 in
                          let γ1_1 := M.get_tuple_field γ0_0 1 in
                          let* γ1_0 := M.read γ1_0 in
                          let* id := M.copy γ1_0 in
                          let* γ1_1 := M.read γ1_1 in
                          let* v := M.copy γ1_1 in
                          let* _ :=
                            let* α0 :=
                              M.get_associated_function
                                (Ty.path "erc1155::Contract")
                                "perform_transfer"
                                [] in
                            let* α1 := M.read self in
                            let* α2 := M.read from in
                            let* α3 := M.read to in
                            let* α4 := M.read id in
                            let* α5 := M.read v in
                            let* α6 := M.call_closure α0 [ α1; α2; α3; α4; α5 ] in
                            M.alloc α6 in
                          M.alloc (Value.Tuple [])
                      ] in
                  M.alloc (Value.Tuple []))
            ] in
        M.pure (M.use α4) in
      let* _ :=
        let* α0 :=
          M.get_associated_function (Ty.path "erc1155::Contract") "transfer_acceptance_check" [] in
        let* α1 := M.read self in
        let* α2 := M.read caller in
        let* α3 := M.read from in
        let* α4 := M.read to in
        let* α5 :=
          M.get_trait_method
            "core::ops::index::Index"
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ])
            [ Ty.path "usize" ]
            "index"
            [] in
        let* α6 := M.call_closure α5 [ token_ids; Value.Integer Integer.Usize 0 ] in
        let* α7 := M.read α6 in
        let* α8 :=
          M.get_trait_method
            "core::ops::index::Index"
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ])
            [ Ty.path "usize" ]
            "index"
            [] in
        let* α9 := M.call_closure α8 [ values; Value.Integer Integer.Usize 0 ] in
        let* α10 := M.read α9 in
        let* α11 := M.read data in
        let* α12 := M.call_closure α0 [ α1; α2; α3; α4; α7; α10; α11 ] in
        M.alloc α12 in
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      fn balance_of_batch(&self, owners: Vec<AccountId>, token_ids: Vec<TokenId>) -> Vec<Balance> {
          let mut output = Vec::new();
          for o in &owners {
              for t in &token_ids {
                  let amount = self.balance_of( *o, *t);
                  output.push(amount);
              }
          }
          output
      }
  *)
  Definition balance_of_batch (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; owners; token_ids ] =>
      let* self := M.alloc self in
      let* owners := M.alloc owners in
      let* token_ids := M.alloc token_ids in
      let* output :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ])
            "new"
            [] in
        let* α1 := M.call_closure α0 [] in
        M.alloc α1 in
      let* _ :=
        let* α0 :=
          M.get_trait_method
            "core::iter::traits::collect::IntoIterator"
            (Ty.apply
              (Ty.path "&")
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "erc1155::AccountId"; Ty.path "alloc::alloc::Global" ]
              ])
            []
            "into_iter"
            [] in
        let* α1 := M.call_closure α0 [ owners ] in
        let* α2 := M.alloc α1 in
        let* α3 :=
          M.match_operator
            α2
            [
              fun γ =>
                let* iter := M.copy γ in
                M.loop
                  (let* _ :=
                    let* α0 :=
                      M.get_trait_method
                        "core::iter::traits::iterator::Iterator"
                        (Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          [ Ty.path "erc1155::AccountId" ])
                        []
                        "next"
                        [] in
                    let* α1 := M.call_closure α0 [ iter ] in
                    let* α2 := M.alloc α1 in
                    M.match_operator
                      α2
                      [
                        fun γ =>
                          let* α0 := M.break in
                          let* α1 := M.read α0 in
                          let* α2 := M.never_to_any α1 in
                          M.alloc α2;
                        fun γ =>
                          let* γ0_0 :=
                            M.get_struct_tuple_field_or_break_match
                              γ
                              "core::option::Option::Some"
                              0 in
                          let* o := M.copy γ0_0 in
                          let* α0 :=
                            M.get_trait_method
                              "core::iter::traits::collect::IntoIterator"
                              (Ty.apply
                                (Ty.path "&")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "u128"; Ty.path "alloc::alloc::Global" ]
                                ])
                              []
                              "into_iter"
                              [] in
                          let* α1 := M.call_closure α0 [ token_ids ] in
                          let* α2 := M.alloc α1 in
                          let* α3 :=
                            M.match_operator
                              α2
                              [
                                fun γ =>
                                  let* iter := M.copy γ in
                                  M.loop
                                    (let* _ :=
                                      let* α0 :=
                                        M.get_trait_method
                                          "core::iter::traits::iterator::Iterator"
                                          (Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [ Ty.path "u128" ])
                                          []
                                          "next"
                                          [] in
                                      let* α1 := M.call_closure α0 [ iter ] in
                                      let* α2 := M.alloc α1 in
                                      M.match_operator
                                        α2
                                        [
                                          fun γ =>
                                            let* α0 := M.break in
                                            let* α1 := M.read α0 in
                                            let* α2 := M.never_to_any α1 in
                                            M.alloc α2;
                                          fun γ =>
                                            let* γ0_0 :=
                                              M.get_struct_tuple_field_or_break_match
                                                γ
                                                "core::option::Option::Some"
                                                0 in
                                            let* t := M.copy γ0_0 in
                                            let* amount :=
                                              let* α0 :=
                                                M.get_trait_method
                                                  "erc1155::Erc1155"
                                                  (Ty.path "erc1155::Contract")
                                                  []
                                                  "balance_of"
                                                  [] in
                                              let* α1 := M.read self in
                                              let* α2 := M.read o in
                                              let* α3 := M.read α2 in
                                              let* α4 := M.read t in
                                              let* α5 := M.read α4 in
                                              let* α6 := M.call_closure α0 [ α1; α3; α5 ] in
                                              M.alloc α6 in
                                            let* _ :=
                                              let* α0 :=
                                                M.get_associated_function
                                                  (Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u128"; Ty.path "alloc::alloc::Global"
                                                    ])
                                                  "push"
                                                  [] in
                                              let* α1 := M.read amount in
                                              let* α2 := M.call_closure α0 [ output; α1 ] in
                                              M.alloc α2 in
                                            M.alloc (Value.Tuple [])
                                        ] in
                                    M.alloc (Value.Tuple []))
                              ] in
                          M.pure (M.use α3)
                      ] in
                  M.alloc (Value.Tuple []))
            ] in
        M.pure (M.use α3) in
      M.read output
    | _, _ => M.impossible
    end.
  
  (*
      fn set_approval_for_all(&mut self, operator: AccountId, approved: bool) -> Result<()> {
          let caller = self.env().caller();
          ensure!(operator != caller, Error::SelfApproval);
  
          if approved {
              self.approvals.insert((caller, operator), ());
          } else {
              self.approvals.remove((caller, operator));
          }
  
          self.env().emit_event(Event::ApprovalForAll(ApprovalForAll {
              owner: caller,
              operator,
              approved,
          }));
  
          Ok(())
      }
  *)
  Definition set_approval_for_all (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; operator; approved ] =>
      let* self := M.alloc self in
      let* operator := M.alloc operator in
      let* approved := M.alloc approved in
      let* caller :=
        let* α0 := M.get_associated_function (Ty.path "erc1155::Env") "caller" [] in
        let* α1 := M.get_associated_function (Ty.path "erc1155::Contract") "env" [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call_closure α0 [ α4 ] in
        M.alloc α5 in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 :=
                  M.get_trait_method
                    "core::cmp::PartialEq"
                    (Ty.path "erc1155::AccountId")
                    [ Ty.path "erc1155::AccountId" ]
                    "ne"
                    [] in
                let* α1 := M.call_closure α0 [ operator; caller ] in
                let* α2 := M.alloc (UnOp.Pure.not α1) in
                M.pure (M.use α2) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 :=
                M.get_trait_method
                  "core::convert::Into"
                  (Ty.path "erc1155::Error")
                  [ Ty.path "erc1155::Error" ]
                  "into"
                  [] in
              let* α1 :=
                M.call_closure α0 [ Value.StructTuple "erc1155::Error::SelfApproval" [] ] in
              let* α2 := M.return_ (Value.StructTuple "core::result::Result::Err" [ α1 ]) in
              let* α3 := M.read α2 in
              let* α4 := M.never_to_any α3 in
              M.alloc α4;
            fun γ => M.alloc (Value.Tuple [])
          ] in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let γ := M.use approved in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* _ :=
                let* α0 :=
                  M.get_associated_function
                    (Ty.apply
                      (Ty.path "erc1155::Mapping")
                      [
                        Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "erc1155::AccountId" ];
                        Ty.tuple []
                      ])
                    "insert"
                    [] in
                let* α1 := M.read self in
                let* α2 := M.read caller in
                let* α3 := M.read operator in
                let* α4 :=
                  M.call_closure
                    α0
                    [
                      M.get_struct_record_field α1 "erc1155::Contract" "approvals";
                      Value.Tuple [ α2; α3 ];
                      Value.Tuple []
                    ] in
                M.alloc α4 in
              M.alloc (Value.Tuple []);
            fun γ =>
              let* _ :=
                let* α0 :=
                  M.get_associated_function
                    (Ty.apply
                      (Ty.path "erc1155::Mapping")
                      [
                        Ty.tuple [ Ty.path "erc1155::AccountId"; Ty.path "erc1155::AccountId" ];
                        Ty.tuple []
                      ])
                    "remove"
                    [] in
                let* α1 := M.read self in
                let* α2 := M.read caller in
                let* α3 := M.read operator in
                let* α4 :=
                  M.call_closure
                    α0
                    [
                      M.get_struct_record_field α1 "erc1155::Contract" "approvals";
                      Value.Tuple [ α2; α3 ]
                    ] in
                M.alloc α4 in
              M.alloc (Value.Tuple [])
          ] in
      let* _ :=
        let* α0 := M.get_associated_function (Ty.path "erc1155::Env") "emit_event" [] in
        let* α1 := M.get_associated_function (Ty.path "erc1155::Contract") "env" [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read caller in
        let* α6 := M.read operator in
        let* α7 := M.read approved in
        let* α8 :=
          M.call_closure
            α0
            [
              α4;
              Value.StructTuple
                "erc1155::Event::ApprovalForAll"
                [
                  Value.StructRecord
                    "erc1155::ApprovalForAll"
                    [ ("owner", α5); ("operator", α6); ("approved", α7) ]
                ]
            ] in
        M.alloc α8 in
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "erc1155::Erc1155"
      Self
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("is_approved_for_all", InstanceField.Method is_approved_for_all);
          ("balance_of", InstanceField.Method balance_of);
          ("safe_transfer_from", InstanceField.Method safe_transfer_from);
          ("safe_batch_transfer_from", InstanceField.Method safe_batch_transfer_from);
          ("balance_of_batch", InstanceField.Method balance_of_batch);
          ("set_approval_for_all", InstanceField.Method set_approval_for_all)
        ].
End Impl_erc1155_Erc1155_for_erc1155_Contract.

Module Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract.
  Definition Self : Ty.t := Ty.path "erc1155::Contract".
  
  (*
      fn on_received(
          &mut self,
          _operator: AccountId,
          _from: AccountId,
          _token_id: TokenId,
          _value: Balance,
          _data: Vec<u8>,
      ) -> Vec<u8> {
          // The ERC-1155 standard dictates that if a contract does not accept token
          // transfers directly to the contract, then the contract must
          // revert.
          //
          // This prevents a user from unintentionally transferring tokens to a smart
          // contract and getting their funds stuck without any sort of
          // recovery mechanism.
          //
          // Note that the choice of whether or not to accept tokens is implementation
          // specific, and we've decided to not accept them in this
          // implementation.
          unimplemented!("This smart contract does not accept token transfer.")
      }
  *)
  Definition on_received (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; _operator; _from; _token_id; _value; _data ] =>
      let* self := M.alloc self in
      let* _operator := M.alloc _operator in
      let* _from := M.alloc _from in
      let* _token_id := M.alloc _token_id in
      let* _value := M.alloc _value in
      let* _data := M.alloc _data in
      let* α0 := M.get_function "core::panicking::panic_fmt" [] in
      let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] in
      let* α4 :=
        (* Unsize *)
          let* α2 :=
            M.read
              (mk_str "not implemented: This smart contract does not accept token transfer.") in
          let* α3 := M.alloc (Value.Array [ α2 ]) in
          M.pure (M.pointer_coercion α3) in
      let* α8 :=
        (* Unsize *)
          let* α5 := M.get_associated_function (Ty.path "core::fmt::rt::Argument") "none" [] in
          let* α6 := M.call_closure α5 [] in
          let* α7 := M.alloc α6 in
          M.pure (M.pointer_coercion α7) in
      let* α9 := M.call_closure α1 [ α4; α8 ] in
      let* α10 := M.call_closure α0 [ α9 ] in
      M.never_to_any α10
    | _, _ => M.impossible
    end.
  
  (*
      fn on_batch_received(
          &mut self,
          _operator: AccountId,
          _from: AccountId,
          _token_ids: Vec<TokenId>,
          _values: Vec<Balance>,
          _data: Vec<u8>,
      ) -> Vec<u8> {
          // The ERC-1155 standard dictates that if a contract does not accept token
          // transfers directly to the contract, then the contract must
          // revert.
          //
          // This prevents a user from unintentionally transferring tokens to a smart
          // contract and getting their funds stuck without any sort of
          // recovery mechanism.
          //
          // Note that the choice of whether or not to accept tokens is implementation
          // specific, and we've decided to not accept them in this
          // implementation.
          unimplemented!("This smart contract does not accept batch token transfers.")
      }
  *)
  Definition on_batch_received (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; _operator; _from; _token_ids; _values; _data ] =>
      let* self := M.alloc self in
      let* _operator := M.alloc _operator in
      let* _from := M.alloc _from in
      let* _token_ids := M.alloc _token_ids in
      let* _values := M.alloc _values in
      let* _data := M.alloc _data in
      let* α0 := M.get_function "core::panicking::panic_fmt" [] in
      let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] in
      let* α4 :=
        (* Unsize *)
          let* α2 :=
            M.read
              (mk_str
                "not implemented: This smart contract does not accept batch token transfers.") in
          let* α3 := M.alloc (Value.Array [ α2 ]) in
          M.pure (M.pointer_coercion α3) in
      let* α8 :=
        (* Unsize *)
          let* α5 := M.get_associated_function (Ty.path "core::fmt::rt::Argument") "none" [] in
          let* α6 := M.call_closure α5 [] in
          let* α7 := M.alloc α6 in
          M.pure (M.pointer_coercion α7) in
      let* α9 := M.call_closure α1 [ α4; α8 ] in
      let* α10 := M.call_closure α0 [ α9 ] in
      M.never_to_any α10
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "erc1155::Erc1155TokenReceiver"
      Self
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("on_received", InstanceField.Method on_received);
          ("on_batch_received", InstanceField.Method on_batch_received)
        ].
End Impl_erc1155_Erc1155TokenReceiver_for_erc1155_Contract.
