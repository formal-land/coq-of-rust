(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructRecord
  {
    name := "Mapping";
    ty_params := [ "K"; "V" ];
    fields :=
      [
        ("_key", Ty.apply (Ty.path "core::marker::PhantomData") [ K ]);
        ("_value", Ty.apply (Ty.path "core::marker::PhantomData") [ V ])
      ];
  } *)

Module Impl_core_default_Default_for_erc20_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t := Ty.apply (Ty.path "erc20::Mapping") [ K; V ].
  
  (* Default *)
  Definition default (K V : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self K V in
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "core::marker::PhantomData") [ K ])
          []
          "default"
          [] in
      let* α1 := M.call_closure α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "core::marker::PhantomData") [ V ])
          []
          "default"
          [] in
      let* α3 := M.call_closure α2 [] in
      M.pure (Value.StructRecord "erc20::Mapping" [ ("_key", α1); ("_value", α3) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    forall (K V : Ty.t),
    M.IsTraitInstance
      "core::default::Default"
      (Self K V)
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method (default K V)) ].
End Impl_core_default_Default_for_erc20_Mapping_K_V.

Module Impl_erc20_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t := Ty.apply (Ty.path "erc20::Mapping") [ K; V ].
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Parameter get : forall (K V : Ty.t), (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_get :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "get" (get K V).
  
  (*
      fn insert(&mut self, _key: K, _value: V) {
          unimplemented!()
      }
  *)
  Parameter insert : forall (K V : Ty.t), (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_insert :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "insert" (insert K V).
End Impl_erc20_Mapping_K_V.

(* StructTuple
  {
    name := "AccountId";
    ty_params := [];
    fields := [ Ty.path "u128" ];
  } *)

Module Impl_core_default_Default_for_erc20_AccountId.
  Definition Self : Ty.t := Ty.path "erc20::AccountId".
  
  (* Default *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 := M.get_trait_method "core::default::Default" (Ty.path "u128") [] "default" [] in
      let* α1 := M.call_closure α0 [] in
      M.pure (Value.StructTuple "erc20::AccountId" [ α1 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_erc20_AccountId.

Module Impl_core_clone_Clone_for_erc20_AccountId.
  Definition Self : Ty.t := Ty.path "erc20::AccountId".
  
  (* Clone *)
  Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.match_operator Value.DeclaredButUndefined [ fun γ => M.read self ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_erc20_AccountId.

Module Impl_core_marker_Copy_for_erc20_AccountId.
  Definition Self : Ty.t := Ty.path "erc20::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance "core::marker::Copy" Self (* Trait polymorphic types *) [] (* Instance *) [].
End Impl_core_marker_Copy_for_erc20_AccountId.

Axiom Balance : (Ty.path "erc20::Balance") = (Ty.path "u128").

(* StructRecord
  {
    name := "Env";
    ty_params := [];
    fields := [ ("caller", Ty.path "erc20::AccountId") ];
  } *)

(* StructRecord
  {
    name := "Erc20";
    ty_params := [];
    fields :=
      [
        ("total_supply", Ty.path "u128");
        ("balances",
          Ty.apply (Ty.path "erc20::Mapping") [ Ty.path "erc20::AccountId"; Ty.path "u128" ]);
        ("allowances",
          Ty.apply
            (Ty.path "erc20::Mapping")
            [ Ty.tuple [ Ty.path "erc20::AccountId"; Ty.path "erc20::AccountId" ]; Ty.path "u128" ])
      ];
  } *)

Module Impl_core_default_Default_for_erc20_Erc20.
  Definition Self : Ty.t := Ty.path "erc20::Erc20".
  
  (* Default *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 := M.get_trait_method "core::default::Default" (Ty.path "u128") [] "default" [] in
      let* α1 := M.call_closure α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "erc20::Mapping") [ Ty.path "erc20::AccountId"; Ty.path "u128" ])
          []
          "default"
          [] in
      let* α3 := M.call_closure α2 [] in
      let* α4 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply
            (Ty.path "erc20::Mapping")
            [ Ty.tuple [ Ty.path "erc20::AccountId"; Ty.path "erc20::AccountId" ]; Ty.path "u128" ])
          []
          "default"
          [] in
      let* α5 := M.call_closure α4 [] in
      M.pure
        (Value.StructRecord
          "erc20::Erc20"
          [ ("total_supply", α1); ("balances", α3); ("allowances", α5) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_erc20_Erc20.

(* StructRecord
  {
    name := "Transfer";
    ty_params := [];
    fields :=
      [
        ("from", Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc20::AccountId" ]);
        ("to", Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc20::AccountId" ]);
        ("value", Ty.path "u128")
      ];
  } *)

(* StructRecord
  {
    name := "Approval";
    ty_params := [];
    fields :=
      [
        ("owner", Ty.path "erc20::AccountId");
        ("spender", Ty.path "erc20::AccountId");
        ("value", Ty.path "u128")
      ];
  } *)

(* Enum Event *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "Transfer";
        item := StructTuple [ Ty.path "erc20::Transfer" ];
        discriminant := None;
      };
      {
        name := "Approval";
        item := StructTuple [ Ty.path "erc20::Approval" ];
        discriminant := None;
      }
    ];
} *)

(* Enum Error *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "InsufficientBalance";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "InsufficientAllowance";
        item := StructTuple [];
        discriminant := None;
      }
    ];
} *)

Axiom Result :
  forall (T : Ty.t),
  (Ty.apply (Ty.path "erc20::Result") [ T ]) =
    (Ty.apply (Ty.path "core::result::Result") [ T; Ty.path "erc20::Error" ]).

Module Impl_erc20_Env.
  Definition Self : Ty.t := Ty.path "erc20::Env".
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (M.get_struct_record_field α0 "erc20::Env" "caller")
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_caller : M.IsAssociatedFunction Self "caller" caller.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Parameter emit_event : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_emit_event : M.IsAssociatedFunction Self "emit_event" emit_event.
End Impl_erc20_Env.

Module Impl_erc20_Erc20.
  Definition Self : Ty.t := Ty.path "erc20::Erc20".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Parameter init_env : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_init_env : M.IsAssociatedFunction Self "init_env" init_env.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.get_associated_function (Ty.path "erc20::Erc20") "init_env" [] in
      M.call_closure α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_env : M.IsAssociatedFunction Self "env" env.
End Impl_erc20_Erc20.

Module Wrap_Impl_erc20_Erc20_2.
Module Impl_erc20_Erc20.
  Definition Self : Ty.t := Ty.path "erc20::Erc20".
  
  (*
      fn new(total_supply: Balance) -> Self {
          let mut balances = Mapping::default();
          let caller = Self::init_env().caller();
          balances.insert(caller, total_supply);
          Self::init_env().emit_event(Event::Transfer(Transfer {
              from: None,
              to: Some(caller),
              value: total_supply,
          }));
          Self {
              total_supply,
              balances,
              allowances: Default::default(),
          }
      }
  *)
  Definition new (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ total_supply ] =>
      let* total_supply := M.alloc total_supply in
      let* balances :=
        let* α0 :=
          M.get_trait_method
            "core::default::Default"
            (Ty.apply (Ty.path "erc20::Mapping") [ Ty.path "erc20::AccountId"; Ty.path "u128" ])
            []
            "default"
            [] in
        let* α1 := M.call_closure α0 [] in
        M.alloc α1 in
      let* caller :=
        let* α0 := M.get_associated_function (Ty.path "erc20::Env") "caller" [] in
        let* α1 := M.get_associated_function (Ty.path "erc20::Erc20") "init_env" [] in
        let* α2 := M.call_closure α1 [] in
        let* α3 := M.alloc α2 in
        let* α4 := M.call_closure α0 [ α3 ] in
        M.alloc α4 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply (Ty.path "erc20::Mapping") [ Ty.path "erc20::AccountId"; Ty.path "u128" ])
            "insert"
            [] in
        let* α1 := M.read caller in
        let* α2 := M.read total_supply in
        let* α3 := M.call_closure α0 [ balances; α1; α2 ] in
        M.alloc α3 in
      let* _ :=
        let* α0 := M.get_associated_function (Ty.path "erc20::Env") "emit_event" [] in
        let* α1 := M.get_associated_function (Ty.path "erc20::Erc20") "init_env" [] in
        let* α2 := M.call_closure α1 [] in
        let* α3 := M.alloc α2 in
        let* α4 := M.read caller in
        let* α5 := M.read total_supply in
        let* α6 :=
          M.call_closure
            α0
            [
              α3;
              Value.StructTuple
                "erc20::Event::Transfer"
                [
                  Value.StructRecord
                    "erc20::Transfer"
                    [
                      ("from", Value.StructTuple "core::option::Option::None" []);
                      ("to", Value.StructTuple "core::option::Option::Some" [ α4 ]);
                      ("value", α5)
                    ]
                ]
            ] in
        M.alloc α6 in
      let* α0 := M.read total_supply in
      let* α1 := M.read balances in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply
            (Ty.path "erc20::Mapping")
            [ Ty.tuple [ Ty.path "erc20::AccountId"; Ty.path "erc20::AccountId" ]; Ty.path "u128" ])
          []
          "default"
          [] in
      let* α3 := M.call_closure α2 [] in
      let* α0 :=
        M.alloc
          (Value.StructRecord
            "erc20::Erc20"
            [ ("total_supply", α0); ("balances", α1); ("allowances", α3) ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  
  (*
      fn total_supply(&self) -> Balance {
          self.total_supply
      }
  *)
  Definition total_supply (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (M.get_struct_record_field α0 "erc20::Erc20" "total_supply")
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_total_supply : M.IsAssociatedFunction Self "total_supply" total_supply.
  
  (*
      fn balance_of_impl(&self, owner: &AccountId) -> Balance {
          self.balances.get(owner).unwrap_or_default()
      }
  *)
  Definition balance_of_impl (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; owner ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* α0 :=
        M.get_associated_function
          (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u128" ])
          "unwrap_or_default"
          [] in
      let* α1 :=
        M.get_associated_function
          (Ty.apply (Ty.path "erc20::Mapping") [ Ty.path "erc20::AccountId"; Ty.path "u128" ])
          "get"
          [] in
      let* α2 := M.read self in
      let* α3 := M.read owner in
      let* α4 := M.call_closure α1 [ M.get_struct_record_field α2 "erc20::Erc20" "balances"; α3 ] in
      M.call_closure α0 [ α4 ]
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_balance_of_impl :
    M.IsAssociatedFunction Self "balance_of_impl" balance_of_impl.
  
  (*
      fn balance_of(&self, owner: AccountId) -> Balance {
          self.balance_of_impl(&owner)
      }
  *)
  Definition balance_of (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; owner ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* α0 := M.get_associated_function (Ty.path "erc20::Erc20") "balance_of_impl" [] in
      let* α1 := M.read self in
      M.call_closure α0 [ α1; owner ]
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_balance_of : M.IsAssociatedFunction Self "balance_of" balance_of.
  
  (*
      fn allowance_impl(&self, owner: &AccountId, spender: &AccountId) -> Balance {
          self.allowances.get(&( *owner, *spender)).unwrap_or_default()
      }
  *)
  Definition allowance_impl (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; owner; spender ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* spender := M.alloc spender in
      let* α0 :=
        M.get_associated_function
          (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u128" ])
          "unwrap_or_default"
          [] in
      let* α1 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "erc20::Mapping")
            [ Ty.tuple [ Ty.path "erc20::AccountId"; Ty.path "erc20::AccountId" ]; Ty.path "u128" ])
          "get"
          [] in
      let* α2 := M.read self in
      let* α3 := M.read owner in
      let* α4 := M.read α3 in
      let* α5 := M.read spender in
      let* α6 := M.read α5 in
      let* α7 := M.alloc (Value.Tuple [ α4; α6 ]) in
      let* α8 :=
        M.call_closure α1 [ M.get_struct_record_field α2 "erc20::Erc20" "allowances"; α7 ] in
      M.call_closure α0 [ α8 ]
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_allowance_impl :
    M.IsAssociatedFunction Self "allowance_impl" allowance_impl.
  
  (*
      fn allowance(&self, owner: AccountId, spender: AccountId) -> Balance {
          self.allowance_impl(&owner, &spender)
      }
  *)
  Definition allowance (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; owner; spender ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* spender := M.alloc spender in
      let* α0 := M.get_associated_function (Ty.path "erc20::Erc20") "allowance_impl" [] in
      let* α1 := M.read self in
      M.call_closure α0 [ α1; owner; spender ]
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_allowance : M.IsAssociatedFunction Self "allowance" allowance.
  
  (*
      fn transfer_from_to(&mut self, from: &AccountId, to: &AccountId, value: Balance) -> Result<()> {
          let from_balance = self.balance_of_impl(from);
          if from_balance < value {
              return Err(Error::InsufficientBalance);
          }
  
          self.balances.insert( *from, from_balance - value);
          let to_balance = self.balance_of_impl(to);
          self.balances.insert( *to, to_balance + value);
          self.env().emit_event(Event::Transfer(Transfer {
              from: Some( *from),
              to: Some( *to),
              value,
          }));
          Ok(())
      }
  *)
  Definition transfer_from_to (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; from; to; value ] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* value := M.alloc value in
      let* from_balance :=
        let* α0 := M.get_associated_function (Ty.path "erc20::Erc20") "balance_of_impl" [] in
        let* α1 := M.read self in
        let* α2 := M.read from in
        let* α3 := M.call_closure α0 [ α1; α2 ] in
        M.alloc α3 in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 := M.read from_balance in
                let* α1 := M.read value in
                let* α2 := M.alloc (BinOp.Pure.lt α0 α1) in
                M.pure (M.use α2) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 :=
                M.return_
                  (Value.StructTuple
                    "core::result::Result::Err"
                    [ Value.StructTuple "erc20::Error::InsufficientBalance" [] ]) in
              let* α1 := M.read α0 in
              let* α2 := M.never_to_any α1 in
              M.alloc α2;
            fun γ => M.alloc (Value.Tuple [])
          ] in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply (Ty.path "erc20::Mapping") [ Ty.path "erc20::AccountId"; Ty.path "u128" ])
            "insert"
            [] in
        let* α1 := M.read self in
        let* α2 := M.read from in
        let* α3 := M.read α2 in
        let* α4 := M.read from_balance in
        let* α5 := M.read value in
        let* α6 := BinOp.Panic.sub α4 α5 in
        let* α7 :=
          M.call_closure α0 [ M.get_struct_record_field α1 "erc20::Erc20" "balances"; α3; α6 ] in
        M.alloc α7 in
      let* to_balance :=
        let* α0 := M.get_associated_function (Ty.path "erc20::Erc20") "balance_of_impl" [] in
        let* α1 := M.read self in
        let* α2 := M.read to in
        let* α3 := M.call_closure α0 [ α1; α2 ] in
        M.alloc α3 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply (Ty.path "erc20::Mapping") [ Ty.path "erc20::AccountId"; Ty.path "u128" ])
            "insert"
            [] in
        let* α1 := M.read self in
        let* α2 := M.read to in
        let* α3 := M.read α2 in
        let* α4 := M.read to_balance in
        let* α5 := M.read value in
        let* α6 := BinOp.Panic.add α4 α5 in
        let* α7 :=
          M.call_closure α0 [ M.get_struct_record_field α1 "erc20::Erc20" "balances"; α3; α6 ] in
        M.alloc α7 in
      let* _ :=
        let* α0 := M.get_associated_function (Ty.path "erc20::Env") "emit_event" [] in
        let* α1 := M.get_associated_function (Ty.path "erc20::Erc20") "env" [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read from in
        let* α6 := M.read α5 in
        let* α7 := M.read to in
        let* α8 := M.read α7 in
        let* α9 := M.read value in
        let* α10 :=
          M.call_closure
            α0
            [
              α4;
              Value.StructTuple
                "erc20::Event::Transfer"
                [
                  Value.StructRecord
                    "erc20::Transfer"
                    [
                      ("from", Value.StructTuple "core::option::Option::Some" [ α6 ]);
                      ("to", Value.StructTuple "core::option::Option::Some" [ α8 ]);
                      ("value", α9)
                    ]
                ]
            ] in
        M.alloc α10 in
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_transfer_from_to :
    M.IsAssociatedFunction Self "transfer_from_to" transfer_from_to.
  
  (*
      fn transfer(&mut self, to: AccountId, value: Balance) -> Result<()> {
          let from = self.env().caller();
          self.transfer_from_to(&from, &to, value)
      }
  *)
  Definition transfer (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; to; value ] =>
      let* self := M.alloc self in
      let* to := M.alloc to in
      let* value := M.alloc value in
      let* from :=
        let* α0 := M.get_associated_function (Ty.path "erc20::Env") "caller" [] in
        let* α1 := M.get_associated_function (Ty.path "erc20::Erc20") "env" [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call_closure α0 [ α4 ] in
        M.alloc α5 in
      let* α0 := M.get_associated_function (Ty.path "erc20::Erc20") "transfer_from_to" [] in
      let* α1 := M.read self in
      let* α2 := M.read value in
      let* α3 := M.call_closure α0 [ α1; from; to; α2 ] in
      let* α0 := M.alloc α3 in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_transfer : M.IsAssociatedFunction Self "transfer" transfer.
  
  (*
      fn approve(&mut self, spender: AccountId, value: Balance) -> Result<()> {
          let owner = self.env().caller();
          self.allowances.insert((owner, spender), value);
          self.env().emit_event(Event::Approval(Approval {
              owner,
              spender,
              value,
          }));
          Ok(())
      }
  *)
  Definition approve (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; spender; value ] =>
      let* self := M.alloc self in
      let* spender := M.alloc spender in
      let* value := M.alloc value in
      let* owner :=
        let* α0 := M.get_associated_function (Ty.path "erc20::Env") "caller" [] in
        let* α1 := M.get_associated_function (Ty.path "erc20::Erc20") "env" [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call_closure α0 [ α4 ] in
        M.alloc α5 in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "erc20::Mapping")
              [ Ty.tuple [ Ty.path "erc20::AccountId"; Ty.path "erc20::AccountId" ]; Ty.path "u128"
              ])
            "insert"
            [] in
        let* α1 := M.read self in
        let* α2 := M.read owner in
        let* α3 := M.read spender in
        let* α4 := M.read value in
        let* α5 :=
          M.call_closure
            α0
            [ M.get_struct_record_field α1 "erc20::Erc20" "allowances"; Value.Tuple [ α2; α3 ]; α4
            ] in
        M.alloc α5 in
      let* _ :=
        let* α0 := M.get_associated_function (Ty.path "erc20::Env") "emit_event" [] in
        let* α1 := M.get_associated_function (Ty.path "erc20::Erc20") "env" [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read owner in
        let* α6 := M.read spender in
        let* α7 := M.read value in
        let* α8 :=
          M.call_closure
            α0
            [
              α4;
              Value.StructTuple
                "erc20::Event::Approval"
                [
                  Value.StructRecord
                    "erc20::Approval"
                    [ ("owner", α5); ("spender", α6); ("value", α7) ]
                ]
            ] in
        M.alloc α8 in
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_approve : M.IsAssociatedFunction Self "approve" approve.
  
  (*
      fn transfer_from(&mut self, from: AccountId, to: AccountId, value: Balance) -> Result<()> {
          let caller = self.env().caller();
          let allowance = self.allowance_impl(&from, &caller);
          if allowance < value {
              return Err(Error::InsufficientAllowance);
          }
          self.transfer_from_to(&from, &to, value)?;
          self.allowances.insert((from, caller), allowance - value);
          Ok(())
      }
  *)
  Definition transfer_from (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; from; to; value ] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* value := M.alloc value in
      let* caller :=
        let* α0 := M.get_associated_function (Ty.path "erc20::Env") "caller" [] in
        let* α1 := M.get_associated_function (Ty.path "erc20::Erc20") "env" [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call_closure α0 [ α4 ] in
        M.alloc α5 in
      let* allowance :=
        let* α0 := M.get_associated_function (Ty.path "erc20::Erc20") "allowance_impl" [] in
        let* α1 := M.read self in
        let* α2 := M.call_closure α0 [ α1; from; caller ] in
        M.alloc α2 in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 := M.read allowance in
                let* α1 := M.read value in
                let* α2 := M.alloc (BinOp.Pure.lt α0 α1) in
                M.pure (M.use α2) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 :=
                M.return_
                  (Value.StructTuple
                    "core::result::Result::Err"
                    [ Value.StructTuple "erc20::Error::InsufficientAllowance" [] ]) in
              let* α1 := M.read α0 in
              let* α2 := M.never_to_any α1 in
              M.alloc α2;
            fun γ => M.alloc (Value.Tuple [])
          ] in
      let* _ :=
        let* α0 :=
          M.get_trait_method
            "core::ops::try_trait::Try"
            (Ty.apply (Ty.path "core::result::Result") [ Ty.tuple []; Ty.path "erc20::Error" ])
            []
            "branch"
            [] in
        let* α1 := M.get_associated_function (Ty.path "erc20::Erc20") "transfer_from_to" [] in
        let* α2 := M.read self in
        let* α3 := M.read value in
        let* α4 := M.call_closure α1 [ α2; from; to; α3 ] in
        let* α5 := M.call_closure α0 [ α4 ] in
        let* α6 := M.alloc α5 in
        M.match_operator
          α6
          [
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Break"
                  0 in
              let* residual := M.copy γ0_0 in
              let* α0 :=
                M.get_trait_method
                  "core::ops::try_trait::FromResidual"
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    [ Ty.tuple []; Ty.path "erc20::Error" ])
                  [
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [ Ty.path "core::convert::Infallible"; Ty.path "erc20::Error" ]
                  ]
                  "from_residual"
                  [] in
              let* α1 := M.read residual in
              let* α2 := M.call_closure α0 [ α1 ] in
              let* α3 := M.return_ α2 in
              let* α4 := M.read α3 in
              let* α5 := M.never_to_any α4 in
              M.alloc α5;
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Continue"
                  0 in
              let* val := M.copy γ0_0 in
              M.pure val
          ] in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply
              (Ty.path "erc20::Mapping")
              [ Ty.tuple [ Ty.path "erc20::AccountId"; Ty.path "erc20::AccountId" ]; Ty.path "u128"
              ])
            "insert"
            [] in
        let* α1 := M.read self in
        let* α2 := M.read from in
        let* α3 := M.read caller in
        let* α4 := M.read allowance in
        let* α5 := M.read value in
        let* α6 := BinOp.Panic.sub α4 α5 in
        let* α7 :=
          M.call_closure
            α0
            [ M.get_struct_record_field α1 "erc20::Erc20" "allowances"; Value.Tuple [ α2; α3 ]; α6
            ] in
        M.alloc α7 in
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_transfer_from :
    M.IsAssociatedFunction Self "transfer_from" transfer_from.
End Impl_erc20_Erc20.
End Wrap_Impl_erc20_Erc20_2.
Import Wrap_Impl_erc20_Erc20_2.
