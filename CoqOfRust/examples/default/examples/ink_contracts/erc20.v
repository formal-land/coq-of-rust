(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Require Import CoqOfRust.examples.default.examples.ink_contracts.Lib.

Module Mapping := Mapping.

(* Module  Mapping. (*
Section Mapping.
  Context (K V : Set).
  
  Record t : Set := {
    _key : core.marker.PhantomData.t K;
    _value : core.marker.PhantomData.t V;
  }.
  
  Definition Get__key :=
    Ref.map (fun α => Some α.(_key)) (fun β α => Some (α <| _key := β |>)).
  Definition Get__value :=
    Ref.map (fun α => Some α.(_value)) (fun β α => Some (α <| _value := β |>)).
End Mapping.
End Mapping.

Module  Impl_core_default_Default_for_erc20_Mapping_t_K_V.
Section Impl_core_default_Default_for_erc20_Mapping_t_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := erc20.Mapping.t K V.
  
  (*
  Default
  *)
  Definition default : M (erc20.Mapping.t K V) :=
    ltac:(M.monadic (
      {|
        erc20.Mapping._key :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default
              (Self := core.marker.PhantomData.t K)
              (Trait := ℐ)))
          |);
        erc20.Mapping._value :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default
              (Self := core.marker.PhantomData.t V)
              (Trait := ℐ)))
          |);
      |}
    )).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_erc20_Mapping_t_K_V.
End Impl_core_default_Default_for_erc20_Mapping_t_K_V.

Module  Impl_erc20_Mapping_t_K_V.
Section Impl_erc20_Mapping_t_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := erc20.Mapping.t K V.
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition get
      (self : ref Self)
      (_key : ref K)
      : M (core.option.Option.t V) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let _key := M.alloc (| _key |) in
      never_to_any (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
  
  (*
      fn insert(&mut self, _key: K, _value: V) {
          unimplemented!()
      }
  *)
  Definition insert (self : mut_ref Self) (_key : K) (_value : V) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let _key := M.alloc (| _key |) in
      let _value := M.alloc (| _value |) in
      never_to_any (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_insert :
    Notations.DoubleColon Self "insert" := {
    Notations.double_colon := insert;
  }.
End Impl_erc20_Mapping_t_K_V. *)
End Impl_erc20_Mapping_t_K_V. *)

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_erc20_AccountId_t.
Section Impl_core_default_Default_for_erc20_AccountId_t.
  Definition Self : Set := erc20.AccountId.t.
  
  (*
  Default
  *)
  Definition default : M erc20.AccountId.t :=
    ltac:(M.monadic (
      erc20.AccountId.Build_t
        (M.call (|ltac:(M.get_method (fun ℐ =>
          core.default.Default.default (Self := u128.t) (Trait := ℐ)))
        |))
    )).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_erc20_AccountId_t.
End Impl_core_default_Default_for_erc20_AccountId_t.

Module  Impl_core_clone_Clone_for_erc20_AccountId_t.
Section Impl_core_clone_Clone_for_erc20_AccountId_t.
  Definition Self : Set := erc20.AccountId.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M erc20.AccountId.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.clone.AssertParamIsClone.t u128.t))
            [ fun γ => (deref (M.read (| self |))) : M.Val erc20.AccountId.t ])
      |)
    )).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_erc20_AccountId_t.
End Impl_core_clone_Clone_for_erc20_AccountId_t.

Module  Impl_core_marker_Copy_for_erc20_AccountId_t.
Section Impl_core_marker_Copy_for_erc20_AccountId_t.
  Definition Self : Set := erc20.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_erc20_AccountId_t.
End Impl_core_marker_Copy_for_erc20_AccountId_t.

Ltac Balance := exact u128.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : erc20.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module  Erc20.
Section Erc20.
  Record t : Set := {
    total_supply : ltac:(erc20.Balance);
    balances : erc20.Mapping.t erc20.AccountId.t ltac:(erc20.Balance);
    allowances :
      erc20.Mapping.t
        (erc20.AccountId.t * erc20.AccountId.t)
        ltac:(erc20.Balance);
  }.
  
  Definition Get_total_supply :=
    Ref.map
      (fun α => Some α.(total_supply))
      (fun β α => Some (α <| total_supply := β |>)).
  Definition Get_balances :=
    Ref.map
      (fun α => Some α.(balances))
      (fun β α => Some (α <| balances := β |>)).
  Definition Get_allowances :=
    Ref.map
      (fun α => Some α.(allowances))
      (fun β α => Some (α <| allowances := β |>)).
End Erc20.
End Erc20.

Module  Impl_core_default_Default_for_erc20_Erc20_t.
Section Impl_core_default_Default_for_erc20_Erc20_t.
  Definition Self : Set := erc20.Erc20.t.
  
  (*
  Default
  *)
  Definition default : M erc20.Erc20.t :=
    ltac:(M.monadic (
      {|
        erc20.Erc20.total_supply :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default (Self := u128.t) (Trait := ℐ)))
          |);
        erc20.Erc20.balances :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default
              (Self := erc20.Mapping.t erc20.AccountId.t u128.t)
              (Trait := ℐ)))
          |);
        erc20.Erc20.allowances :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default
              (Self :=
                erc20.Mapping.t (erc20.AccountId.t * erc20.AccountId.t) u128.t)
              (Trait := ℐ)))
          |);
      |}
    )).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_erc20_Erc20_t.
End Impl_core_default_Default_for_erc20_Erc20_t.

Module  Transfer.
Section Transfer.
  Record t : Set := {
    from : core.option.Option.t erc20.AccountId.t;
    to : core.option.Option.t erc20.AccountId.t;
    value : ltac:(erc20.Balance);
  }.
  
  Definition Get_from :=
    Ref.map (fun α => Some α.(from)) (fun β α => Some (α <| from := β |>)).
  Definition Get_to :=
    Ref.map (fun α => Some α.(to)) (fun β α => Some (α <| to := β |>)).
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End Transfer.
End Transfer.

Module  Approval.
Section Approval.
  Record t : Set := {
    owner : erc20.AccountId.t;
    spender : erc20.AccountId.t;
    value : ltac:(erc20.Balance);
  }.
  
  Definition Get_owner :=
    Ref.map (fun α => Some α.(owner)) (fun β α => Some (α <| owner := β |>)).
  Definition Get_spender :=
    Ref.map
      (fun α => Some α.(spender))
      (fun β α => Some (α <| spender := β |>)).
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End Approval.
End Approval.

Module Event.
  Inductive t : Set :=
  | Transfer (_ : erc20.Transfer.t)
  | Approval (_ : erc20.Approval.t).
  
  Definition Get_Transfer_0 :=
    Ref.map
      (fun α => match α with | Transfer α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | Transfer _ => Some (Transfer β) | _ => None end).
  
  Definition Get_Approval_0 :=
    Ref.map
      (fun α => match α with | Approval α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | Approval _ => Some (Approval β) | _ => None end).
End Event.

Module Error.
  Inductive t : Set :=
  | InsufficientBalance
  | InsufficientAllowance.
End Error.

Ltac Result T := exact (core.result.Result.t T erc20.Error.t).

Module  Impl_erc20_Env_t.
Section Impl_erc20_Env_t.
  Definition Self : Set := erc20.Env.t.
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (self : ref Self) : M erc20.AccountId.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (| erc20.Env.Get_caller (deref (M.read (| self |))) |)
    )).
  
  Global Instance AssociatedFunction_caller :
    Notations.DoubleColon Self "caller" := {
    Notations.double_colon := caller;
  }.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (self : ref Self) (_event : erc20.Event.t) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let _event := M.alloc (| _event |) in
      never_to_any (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_emit_event :
    Notations.DoubleColon Self "emit_event" := {
    Notations.double_colon := emit_event;
  }.
End Impl_erc20_Env_t.
End Impl_erc20_Env_t.

Module  Impl_erc20_Erc20_t.
Section Impl_erc20_Erc20_t.
  Definition Self : Set := erc20.Erc20.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env : M erc20.Env.t :=
    ltac:(M.monadic (
      never_to_any (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon Self "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (self : ref Self) : M erc20.Env.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.call (|erc20.Erc20.t::["init_env"] |)
    )).
  
  Global Instance AssociatedFunction_env : Notations.DoubleColon Self "env" := {
    Notations.double_colon := env;
  }.
End Impl_erc20_Erc20_t.
End Impl_erc20_Erc20_t.

Module  Impl_erc20_Erc20_t_2.
Section Impl_erc20_Erc20_t_2.
  Definition Self : Set := erc20.Erc20.t.
  
  (*
      fn new(total_supply: Balance) -> Self {
          let mut balances = Mapping::default();
          let caller = Self::init_env().caller();
          balances.insert(caller, total_supply);
          Self::init_env().emit_event(Event::Transfer(Transfer {
              from: None,
              to: Some(caller),
              value: total_supply,
          }));
          Self {
              total_supply,
              balances,
              allowances: Default::default(),
          }
      }
  *)
  Definition new (total_supply : ltac:(erc20.Balance)) : M Self :=
    ltac:(M.monadic (
      let total_supply := M.alloc (| total_supply |) in
      M.read (|
        let balances : M.Val (erc20.Mapping.t erc20.AccountId.t u128.t) :=
          M.alloc (|
            M.call (|ltac:(M.get_method (fun ℐ =>
              core.default.Default.default
                (Self := erc20.Mapping.t erc20.AccountId.t u128.t)
                (Trait := ℐ)))
            |)
          |) in
        let caller : M.Val erc20.AccountId.t :=
          M.alloc (|
            M.call (|(erc20.Env.t::["caller"]
              (borrow (M.alloc (| M.call (|erc20.Erc20.t::["init_env"] |) |))))
            |)
          |) in
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|((erc20.Mapping.t erc20.AccountId.t u128.t)::["insert"]
              (borrow_mut balances)
              (M.read (| caller |))
              (M.read (| total_supply |)))
            |)
          |) in
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(erc20.Env.t::["emit_event"]
              (borrow (M.alloc (| M.call (|erc20.Erc20.t::["init_env"] |) |)))
              (erc20.Event.Transfer
                {|
                  erc20.Transfer.from := core.option.Option.None;
                  erc20.Transfer.to :=
                    core.option.Option.Some (M.read (| caller |));
                  erc20.Transfer.value := M.read (| total_supply |);
                |}))
            |)
          |) in
        M.alloc (|
          {|
            erc20.Erc20.total_supply := M.read (| total_supply |);
            erc20.Erc20.balances := M.read (| balances |);
            erc20.Erc20.allowances :=
              M.call (|ltac:(M.get_method (fun ℐ =>
                core.default.Default.default
                  (Self :=
                    erc20.Mapping.t
                      (erc20.AccountId.t * erc20.AccountId.t)
                      u128.t)
                  (Trait := ℐ)))
              |);
          |}
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      fn total_supply(&self) -> Balance {
          self.total_supply
      }
  *)
  Definition total_supply (self : ref Self) : M ltac:(erc20.Balance) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (| erc20.Erc20.Get_total_supply (deref (M.read (| self |))) |)
    )).
  
  Global Instance AssociatedFunction_total_supply :
    Notations.DoubleColon Self "total_supply" := {
    Notations.double_colon := total_supply;
  }.
  
  (*
      fn balance_of_impl(&self, owner: &AccountId) -> Balance {
          self.balances.get(owner).unwrap_or_default()
      }
  *)
  Definition balance_of_impl
      (self : ref Self)
      (owner : ref erc20.AccountId.t)
      : M ltac:(erc20.Balance) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let owner := M.alloc (| owner |) in
      M.call (|((core.option.Option.t u128.t)::["unwrap_or_default"]
        (M.call (|((erc20.Mapping.t erc20.AccountId.t u128.t)::["get"]
          (borrow (erc20.Erc20.Get_balances (deref (M.read (| self |)))))
          (M.read (| owner |)))
        |)))
      |)
    )).
  
  Global Instance AssociatedFunction_balance_of_impl :
    Notations.DoubleColon Self "balance_of_impl" := {
    Notations.double_colon := balance_of_impl;
  }.
  
  (*
      fn balance_of(&self, owner: AccountId) -> Balance {
          self.balance_of_impl(&owner)
      }
  *)
  Definition balance_of
      (self : ref Self)
      (owner : erc20.AccountId.t)
      : M ltac:(erc20.Balance) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let owner := M.alloc (| owner |) in
      M.call (|(erc20.Erc20.t::["balance_of_impl"]
        (M.read (| self |))
        (borrow owner))
      |)
    )).
  
  Global Instance AssociatedFunction_balance_of :
    Notations.DoubleColon Self "balance_of" := {
    Notations.double_colon := balance_of;
  }.
  
  (*
      fn allowance_impl(&self, owner: &AccountId, spender: &AccountId) -> Balance {
          self.allowances.get(&( *owner, *spender)).unwrap_or_default()
      }
  *)
  Definition allowance_impl
      (self : ref Self)
      (owner : ref erc20.AccountId.t)
      (spender : ref erc20.AccountId.t)
      : M ltac:(erc20.Balance) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let owner := M.alloc (| owner |) in
      let spender := M.alloc (| spender |) in
      M.call (|((core.option.Option.t u128.t)::["unwrap_or_default"]
        (M.call (|((erc20.Mapping.t
              (erc20.AccountId.t * erc20.AccountId.t)
              u128.t)::["get"]
          (borrow (erc20.Erc20.Get_allowances (deref (M.read (| self |)))))
          (borrow
            (M.alloc (|
              (M.read (| deref (M.read (| owner |)) |),
                M.read (| deref (M.read (| spender |)) |))
            |))))
        |)))
      |)
    )).
  
  Global Instance AssociatedFunction_allowance_impl :
    Notations.DoubleColon Self "allowance_impl" := {
    Notations.double_colon := allowance_impl;
  }.
  
  (*
      fn allowance(&self, owner: AccountId, spender: AccountId) -> Balance {
          self.allowance_impl(&owner, &spender)
      }
  *)
  Definition allowance
      (self : ref Self)
      (owner : erc20.AccountId.t)
      (spender : erc20.AccountId.t)
      : M ltac:(erc20.Balance) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let owner := M.alloc (| owner |) in
      let spender := M.alloc (| spender |) in
      M.call (|(erc20.Erc20.t::["allowance_impl"]
        (M.read (| self |))
        (borrow owner)
        (borrow spender))
      |)
    )).
  
  Global Instance AssociatedFunction_allowance :
    Notations.DoubleColon Self "allowance" := {
    Notations.double_colon := allowance;
  }.
  
  (*
      fn transfer_from_to(&mut self, from: &AccountId, to: &AccountId, value: Balance) -> Result<()> {
          let from_balance = self.balance_of_impl(from);
          if from_balance < value {
              return Err(Error::InsufficientBalance);
          }
  
          self.balances.insert( *from, from_balance - value);
          let to_balance = self.balance_of_impl(to);
          self.balances.insert( *to, to_balance + value);
          self.env().emit_event(Event::Transfer(Transfer {
              from: Some( *from),
              to: Some( *to),
              value,
          }));
          Ok(())
      }
  *)
  Definition transfer_from_to
      (self : mut_ref Self)
      (from : ref erc20.AccountId.t)
      (to : ref erc20.AccountId.t)
      (value : ltac:(erc20.Balance))
      : M ltac:(erc20.Result unit) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let from := M.alloc (| from |) in
      let to := M.alloc (| to |) in
      let value := M.alloc (| value |) in
      let return_ := M.return_ (R := ltac:(erc20.Result unit)) in
      M.catch_return
        (M.read (|
          let from_balance : M.Val u128.t :=
            M.alloc (|
              M.call (|(erc20.Erc20.t::["balance_of_impl"]
                (borrow (deref (M.read (| self |))))
                (M.read (| from |)))
              |)
            |) in
          let _ : M.Val unit :=
            if
              M.read (|
                use
                  (M.alloc (|
                    BinOp.Pure.lt
                      (M.read (| from_balance |))
                      (M.read (| value |))
                  |))
              |)
            then
              M.alloc (|
                never_to_any (|
                  M.read (|
                    return_
                      (core.result.Result.Err erc20.Error.InsufficientBalance)
                  |)
                |)
              |)
            else
              M.alloc (| tt |) in
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|((erc20.Mapping.t erc20.AccountId.t u128.t)::["insert"]
                (borrow_mut
                  (erc20.Erc20.Get_balances (deref (M.read (| self |)))))
                (M.read (| deref (M.read (| from |)) |))
                (BinOp.Panic.sub (|
                  M.read (| from_balance |),
                  M.read (| value |)
                |)))
              |)
            |) in
          let to_balance : M.Val u128.t :=
            M.alloc (|
              M.call (|(erc20.Erc20.t::["balance_of_impl"]
                (borrow (deref (M.read (| self |))))
                (M.read (| to |)))
              |)
            |) in
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|((erc20.Mapping.t erc20.AccountId.t u128.t)::["insert"]
                (borrow_mut
                  (erc20.Erc20.Get_balances (deref (M.read (| self |)))))
                (M.read (| deref (M.read (| to |)) |))
                (BinOp.Panic.add (| M.read (| to_balance |), M.read (| value |)
                |)))
              |)
            |) in
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(erc20.Env.t::["emit_event"]
                (borrow
                  (M.alloc (|
                    M.call (|(erc20.Erc20.t::["env"]
                      (borrow (deref (M.read (| self |)))))
                    |)
                  |)))
                (erc20.Event.Transfer
                  {|
                    erc20.Transfer.from :=
                      core.option.Option.Some
                        (M.read (| deref (M.read (| from |)) |));
                    erc20.Transfer.to :=
                      core.option.Option.Some
                        (M.read (| deref (M.read (| to |)) |));
                    erc20.Transfer.value := M.read (| value |);
                  |}))
              |)
            |) in
          M.alloc (| core.result.Result.Ok tt |)
        |))
    )).
  
  Global Instance AssociatedFunction_transfer_from_to :
    Notations.DoubleColon Self "transfer_from_to" := {
    Notations.double_colon := transfer_from_to;
  }.
  
  (*
      fn transfer(&mut self, to: AccountId, value: Balance) -> Result<()> {
          let from = self.env().caller();
          self.transfer_from_to(&from, &to, value)
      }
  *)
  Definition transfer
      (self : mut_ref Self)
      (to : erc20.AccountId.t)
      (value : ltac:(erc20.Balance))
      : M ltac:(erc20.Result unit) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let to := M.alloc (| to |) in
      let value := M.alloc (| value |) in
      M.read (|
        let from : M.Val erc20.AccountId.t :=
          M.alloc (|
            M.call (|(erc20.Env.t::["caller"]
              (borrow
                (M.alloc (|
                  M.call (|(erc20.Erc20.t::["env"]
                    (borrow (deref (M.read (| self |)))))
                  |)
                |))))
            |)
          |) in
        M.alloc (|
          M.call (|(erc20.Erc20.t::["transfer_from_to"]
            (M.read (| self |))
            (borrow from)
            (borrow to)
            (M.read (| value |)))
          |)
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_transfer :
    Notations.DoubleColon Self "transfer" := {
    Notations.double_colon := transfer;
  }.
  
  (*
      fn approve(&mut self, spender: AccountId, value: Balance) -> Result<()> {
          let owner = self.env().caller();
          self.allowances.insert((owner, spender), value);
          self.env().emit_event(Event::Approval(Approval {
              owner,
              spender,
              value,
          }));
          Ok(())
      }
  *)
  Definition approve
      (self : mut_ref Self)
      (spender : erc20.AccountId.t)
      (value : ltac:(erc20.Balance))
      : M ltac:(erc20.Result unit) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let spender := M.alloc (| spender |) in
      let value := M.alloc (| value |) in
      M.read (|
        let owner : M.Val erc20.AccountId.t :=
          M.alloc (|
            M.call (|(erc20.Env.t::["caller"]
              (borrow
                (M.alloc (|
                  M.call (|(erc20.Erc20.t::["env"]
                    (borrow (deref (M.read (| self |)))))
                  |)
                |))))
            |)
          |) in
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|((erc20.Mapping.t
                  (erc20.AccountId.t * erc20.AccountId.t)
                  u128.t)::["insert"]
              (borrow_mut
                (erc20.Erc20.Get_allowances (deref (M.read (| self |)))))
              (M.read (| owner |), M.read (| spender |))
              (M.read (| value |)))
            |)
          |) in
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(erc20.Env.t::["emit_event"]
              (borrow
                (M.alloc (|
                  M.call (|(erc20.Erc20.t::["env"]
                    (borrow (deref (M.read (| self |)))))
                  |)
                |)))
              (erc20.Event.Approval
                {|
                  erc20.Approval.owner := M.read (| owner |);
                  erc20.Approval.spender := M.read (| spender |);
                  erc20.Approval.value := M.read (| value |);
                |}))
            |)
          |) in
        M.alloc (| core.result.Result.Ok tt |)
      |)
    )).
  
  Global Instance AssociatedFunction_approve :
    Notations.DoubleColon Self "approve" := {
    Notations.double_colon := approve;
  }.
  
  (*
      fn transfer_from(&mut self, from: AccountId, to: AccountId, value: Balance) -> Result<()> {
          let caller = self.env().caller();
          let allowance = self.allowance_impl(&from, &caller);
          if allowance < value {
              return Err(Error::InsufficientAllowance);
          }
          self.transfer_from_to(&from, &to, value)?;
          self.allowances.insert((from, caller), allowance - value);
          Ok(())
      }
  *)
  Definition transfer_from
      (self : mut_ref Self)
      (from : erc20.AccountId.t)
      (to : erc20.AccountId.t)
      (value : ltac:(erc20.Balance))
      : M ltac:(erc20.Result unit) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let from := M.alloc (| from |) in
      let to := M.alloc (| to |) in
      let value := M.alloc (| value |) in
      let return_ := M.return_ (R := ltac:(erc20.Result unit)) in
      M.catch_return
        (M.read (|
          let caller : M.Val erc20.AccountId.t :=
            M.alloc (|
              M.call (|(erc20.Env.t::["caller"]
                (borrow
                  (M.alloc (|
                    M.call (|(erc20.Erc20.t::["env"]
                      (borrow (deref (M.read (| self |)))))
                    |)
                  |))))
              |)
            |) in
          let allowance : M.Val u128.t :=
            M.alloc (|
              M.call (|(erc20.Erc20.t::["allowance_impl"]
                (borrow (deref (M.read (| self |))))
                (borrow from)
                (borrow caller))
              |)
            |) in
          let _ : M.Val unit :=
            if
              M.read (|
                use
                  (M.alloc (|
                    BinOp.Pure.lt (M.read (| allowance |)) (M.read (| value |))
                  |))
              |)
            then
              M.alloc (|
                never_to_any (|
                  M.read (|
                    return_
                      (core.result.Result.Err erc20.Error.InsufficientAllowance)
                  |)
                |)
              |)
            else
              M.alloc (| tt |) in
          let _ : M.Val unit :=
            ltac:
              (M.monadic_match_operator
                (M.alloc (|
                  M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self := core.result.Result.t unit erc20.Error.t)
                        (Trait := ℐ)))
                    (M.call (|(erc20.Erc20.t::["transfer_from_to"]
                      (M.read (| self |))
                      (borrow from)
                      (borrow to)
                      (M.read (| value |)))
                    |)))
                  |)
                |))
                [
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              erc20.Error.t)
                            unit)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Break _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                      let residual := M.copy (| γ0_0 |) in
                      M.alloc (|
                        never_to_any (|
                          M.read (|
                            return_
                              (M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.try_trait.FromResidual.from_residual
                                    (Self :=
                                      core.result.Result.t unit erc20.Error.t)
                                    (R :=
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        erc20.Error.t)
                                    (Trait := ℐ)))
                                (M.read (| residual |)))
                              |))
                          |)
                        |)
                      |)
                    | _ => M.break_match(||)
                    end :
                    M.Val unit;
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              erc20.Error.t)
                            unit)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Continue _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                      let val := M.copy (| γ0_0 |) in
                      val
                    | _ => M.break_match(||)
                    end :
                    M.Val unit
                ]) in
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|((erc20.Mapping.t
                    (erc20.AccountId.t * erc20.AccountId.t)
                    u128.t)::["insert"]
                (borrow_mut
                  (erc20.Erc20.Get_allowances (deref (M.read (| self |)))))
                (M.read (| from |), M.read (| caller |))
                (BinOp.Panic.sub (| M.read (| allowance |), M.read (| value |)
                |)))
              |)
            |) in
          M.alloc (| core.result.Result.Ok tt |)
        |))
    )).
  
  Global Instance AssociatedFunction_transfer_from :
    Notations.DoubleColon Self "transfer_from" := {
    Notations.double_colon := transfer_from;
  }.
End Impl_erc20_Erc20_t_2.
End Impl_erc20_Erc20_t_2.
