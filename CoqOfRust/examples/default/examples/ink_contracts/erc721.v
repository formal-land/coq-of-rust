(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructRecord
  {
    name := "Mapping";
    ty_params := [ "K"; "V" ];
    fields :=
      [
        ("_key", Ty.apply (Ty.path "core::marker::PhantomData") [ K ] []);
        ("_value", Ty.apply (Ty.path "core::marker::PhantomData") [ V ] [])
      ];
  } *)

Module Impl_core_default_Default_for_erc721_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t := Ty.apply (Ty.path "erc721::Mapping") [ K; V ] [].
  
  (*
  Default
  *)
  Definition default (K V : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self K V in
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "core::marker::PhantomData") [ K ] [])
          []
          []
          "default"
          []
          [] in
      let* α1 := M.call_closure α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "core::marker::PhantomData") [ V ] [])
          []
          []
          "default"
          []
          [] in
      let* α3 := M.call_closure α2 [] in
      M.pure (Value.StructRecord "erc721::Mapping" [ ("_key", α1); ("_value", α3) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    forall (K V : Ty.t),
    M.IsTraitInstance
      "core::default::Default"
      (Self K V)
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method (default K V)) ].
End Impl_core_default_Default_for_erc721_Mapping_K_V.

Module Impl_erc721_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t := Ty.apply (Ty.path "erc721::Mapping") [ K; V ] [].
  
  (*
      fn contains(&self, _key: &K) -> bool {
          unimplemented!()
      }
  *)
  Definition contains (K V : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self K V in
    match τ, α with
    | [], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_contains :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "contains" (contains K V).
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition get (K V : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self K V in
    match τ, α with
    | [], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_get :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "get" (get K V).
  
  (*
      fn insert(&mut self, _key: K, _value: V) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition insert (K V : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self K V in
    match τ, α with
    | [], [ self; _key; _value ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* _value := M.alloc _value in
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_insert :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "insert" (insert K V).
  
  (*
      fn remove(&self, _key: K) {
          unimplemented!()
      }
  *)
  Definition remove (K V : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self K V in
    match τ, α with
    | [], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_remove :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "remove" (remove K V).
  
  (*
      fn size(&self, _key: K) -> Option<u32> {
          unimplemented!()
      }
  *)
  Definition size (K V : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self K V in
    match τ, α with
    | [], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_size :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "size" (size K V).
  
  (*
      fn take(&self, _key: K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition take (K V : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self K V in
    match τ, α with
    | [], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_take :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "take" (take K V).
End Impl_erc721_Mapping_K_V.

(* StructTuple
  {
    name := "AccountId";
    ty_params := [];
    fields := [ Ty.path "u128" ];
  } *)

Module Impl_core_default_Default_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.path "erc721::AccountId".
  
  (*
  Default
  *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method "core::default::Default" (Ty.path "u128") [] [] "default" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.pure (Value.StructTuple "erc721::AccountId" [ α1 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_erc721_AccountId.

Module Impl_core_clone_Clone_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.path "erc721::AccountId".
  
  (*
  Clone
  *)
  Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.match_operator Value.DeclaredButUndefined [ fun γ => M.read self ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_erc721_AccountId.

Module Impl_core_marker_Copy_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.path "erc721::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance "core::marker::Copy" Self (* Trait polymorphic types *) [] (* Instance *) [].
End Impl_core_marker_Copy_for_erc721_AccountId.

Module Impl_core_marker_StructuralPartialEq_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.path "erc721::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralPartialEq_for_erc721_AccountId.

Module Impl_core_cmp_PartialEq_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.path "erc721::AccountId".
  
  (*
  PartialEq
  *)
  Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 := M.read self in
      let* α1 := M.read (M.get_struct_tuple_field α0 "erc721::AccountId" 0) in
      let* α2 := M.read other in
      let* α3 := M.read (M.get_struct_tuple_field α2 "erc721::AccountId" 0) in
      M.pure (BinOp.Pure.eq α1 α3)
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_erc721_AccountId.

Module Impl_core_convert_From_array_u8_32_for_erc721_AccountId.
  Definition Self : Ty.t := Ty.path "erc721::AccountId".
  
  (*
      fn from(_value: [u8; 32]) -> Self {
          unimplemented!()
      }
  *)
  Definition from (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ _value ] =>
      let* _value := M.alloc _value in
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::convert::From"
      Self
      (* Trait polymorphic types *)
        [ (* T *) Ty.apply (Ty.path "array") [ Ty.path "u8" ] [ Value.Integer Integer.Usize 32 ] ]
      (* Instance *) [ ("from", InstanceField.Method from) ].
End Impl_core_convert_From_array_u8_32_for_erc721_AccountId.

Axiom Balance : (Ty.path "erc721::Balance") = (Ty.path "u128").

(* StructRecord
  {
    name := "Env";
    ty_params := [];
    fields := [ ("caller", Ty.path "erc721::AccountId") ];
  } *)

Axiom TokenId : (Ty.path "erc721::TokenId") = (Ty.path "u32").

(* StructRecord
  {
    name := "Erc721";
    ty_params := [];
    fields :=
      [
        ("token_owner",
          Ty.apply (Ty.path "erc721::Mapping") [ Ty.path "u32"; Ty.path "erc721::AccountId" ] []);
        ("token_approvals",
          Ty.apply (Ty.path "erc721::Mapping") [ Ty.path "u32"; Ty.path "erc721::AccountId" ] []);
        ("owned_tokens_count",
          Ty.apply (Ty.path "erc721::Mapping") [ Ty.path "erc721::AccountId"; Ty.path "u32" ] []);
        ("operator_approvals",
          Ty.apply
            (Ty.path "erc721::Mapping")
            [ Ty.tuple [ Ty.path "erc721::AccountId"; Ty.path "erc721::AccountId" ]; Ty.tuple [] ]
            [])
      ];
  } *)

Module Impl_core_default_Default_for_erc721_Erc721.
  Definition Self : Ty.t := Ty.path "erc721::Erc721".
  
  (*
  Default
  *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "erc721::Mapping") [ Ty.path "u32"; Ty.path "erc721::AccountId" ] [])
          []
          []
          "default"
          []
          [] in
      let* α1 := M.call_closure α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "erc721::Mapping") [ Ty.path "u32"; Ty.path "erc721::AccountId" ] [])
          []
          []
          "default"
          []
          [] in
      let* α3 := M.call_closure α2 [] in
      let* α4 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "erc721::Mapping") [ Ty.path "erc721::AccountId"; Ty.path "u32" ] [])
          []
          []
          "default"
          []
          [] in
      let* α5 := M.call_closure α4 [] in
      let* α6 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply
            (Ty.path "erc721::Mapping")
            [ Ty.tuple [ Ty.path "erc721::AccountId"; Ty.path "erc721::AccountId" ]; Ty.tuple [] ]
            [])
          []
          []
          "default"
          []
          [] in
      let* α7 := M.call_closure α6 [] in
      M.pure
        (Value.StructRecord
          "erc721::Erc721"
          [
            ("token_owner", α1);
            ("token_approvals", α3);
            ("owned_tokens_count", α5);
            ("operator_approvals", α7)
          ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_erc721_Erc721.

(* Enum Error *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "NotOwner";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "NotApproved";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "TokenExists";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "TokenNotFound";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "CannotInsert";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "CannotFetchValue";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "NotAllowed";
        item := StructTuple [];
        discriminant := None;
      }
    ];
} *)

Module Impl_core_marker_StructuralPartialEq_for_erc721_Error.
  Definition Self : Ty.t := Ty.path "erc721::Error".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralPartialEq_for_erc721_Error.

Module Impl_core_cmp_PartialEq_for_erc721_Error.
  Definition Self : Ty.t := Ty.path "erc721::Error".
  
  (*
  PartialEq
  *)
  Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag :=
        let* α0 :=
          M.get_function "core::intrinsics::discriminant_value" [ Ty.path "erc721::Error" ] [] in
        let* α1 := M.read self in
        let* α2 := M.call_closure α0 [ α1 ] in
        M.alloc α2 in
      let* __arg1_tag :=
        let* α0 :=
          M.get_function "core::intrinsics::discriminant_value" [ Ty.path "erc721::Error" ] [] in
        let* α1 := M.read other in
        let* α2 := M.call_closure α0 [ α1 ] in
        M.alloc α2 in
      let* α0 := M.read __self_tag in
      let* α1 := M.read __arg1_tag in
      let* α0 := M.alloc (BinOp.Pure.eq α0 α1) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_erc721_Error.

Module Impl_core_marker_StructuralEq_for_erc721_Error.
  Definition Self : Ty.t := Ty.path "erc721::Error".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralEq_for_erc721_Error.

Module Impl_core_cmp_Eq_for_erc721_Error.
  Definition Self : Ty.t := Ty.path "erc721::Error".
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      M.pure (Value.Tuple [])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
End Impl_core_cmp_Eq_for_erc721_Error.

Module Impl_core_clone_Clone_for_erc721_Error.
  Definition Self : Ty.t := Ty.path "erc721::Error".
  
  (*
  Clone
  *)
  Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_erc721_Error.

Module Impl_core_marker_Copy_for_erc721_Error.
  Definition Self : Ty.t := Ty.path "erc721::Error".
  
  Axiom Implements :
    M.IsTraitInstance "core::marker::Copy" Self (* Trait polymorphic types *) [] (* Instance *) [].
End Impl_core_marker_Copy_for_erc721_Error.

(* StructRecord
  {
    name := "Transfer";
    ty_params := [];
    fields :=
      [
        ("from", Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc721::AccountId" ] []);
        ("to", Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc721::AccountId" ] []);
        ("id", Ty.path "u32")
      ];
  } *)

(* StructRecord
  {
    name := "Approval";
    ty_params := [];
    fields :=
      [
        ("from", Ty.path "erc721::AccountId");
        ("to", Ty.path "erc721::AccountId");
        ("id", Ty.path "u32")
      ];
  } *)

(* StructRecord
  {
    name := "ApprovalForAll";
    ty_params := [];
    fields :=
      [
        ("owner", Ty.path "erc721::AccountId");
        ("operator", Ty.path "erc721::AccountId");
        ("approved", Ty.path "bool")
      ];
  } *)

(* Enum Event *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "Transfer";
        item := StructTuple [ Ty.path "erc721::Transfer" ];
        discriminant := None;
      };
      {
        name := "Approval";
        item := StructTuple [ Ty.path "erc721::Approval" ];
        discriminant := None;
      };
      {
        name := "ApprovalForAll";
        item := StructTuple [ Ty.path "erc721::ApprovalForAll" ];
        discriminant := None;
      }
    ];
} *)

Module Impl_erc721_Env.
  Definition Self : Ty.t := Ty.path "erc721::Env".
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (M.get_struct_record_field α0 "erc721::Env" "caller")
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_caller : M.IsAssociatedFunction Self "caller" caller.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; _event ] =>
      let* self := M.alloc self in
      let* _event := M.alloc _event in
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_emit_event : M.IsAssociatedFunction Self "emit_event" emit_event.
End Impl_erc721_Env.

Module Impl_erc721_Erc721.
  Definition Self : Ty.t := Ty.path "erc721::Erc721".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_init_env : M.IsAssociatedFunction Self "init_env" init_env.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.get_associated_function (Ty.path "erc721::Erc721") "init_env" [] [] in
      M.call_closure α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_env : M.IsAssociatedFunction Self "env" env.
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.path "erc721::Erc721")
          []
          []
          "default"
          []
          [] in
      M.call_closure α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  
  (*
      fn balance_of_or_zero(&self, of: &AccountId) -> u32 {
          self.owned_tokens_count.get(of).unwrap_or(0 as u32)
      }
  *)
  Definition balance_of_or_zero (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; of ] =>
      let* self := M.alloc self in
      let* of := M.alloc of in
      let* α0 :=
        M.get_associated_function
          (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ] [])
          "unwrap_or"
          []
          [] in
      let* α1 :=
        M.get_associated_function
          (Ty.apply (Ty.path "erc721::Mapping") [ Ty.path "erc721::AccountId"; Ty.path "u32" ] [])
          "get"
          []
          [] in
      let* α2 := M.read self in
      let* α3 := M.read of in
      let* α4 :=
        M.call_closure
          α1
          [ M.get_struct_record_field α2 "erc721::Erc721" "owned_tokens_count"; α3 ] in
      let* α5 := M.alloc (Value.Integer Integer.U32 0) in
      let* α6 := M.read (M.use α5) in
      M.call_closure α0 [ α4; α6 ]
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_balance_of_or_zero :
    M.IsAssociatedFunction Self "balance_of_or_zero" balance_of_or_zero.
  
  (*
      fn clear_approval(&mut self, id: TokenId) {
          self.token_approvals.remove(id);
      }
  *)
  Definition clear_approval (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; id ] =>
      let* self := M.alloc self in
      let* id := M.alloc id in
      let* _ :=
        let* α0 :=
          M.get_associated_function
            (Ty.apply (Ty.path "erc721::Mapping") [ Ty.path "u32"; Ty.path "erc721::AccountId" ] [])
            "remove"
            []
            [] in
        let* α1 := M.read self in
        let* α2 := M.read id in
        let* α3 :=
          M.call_closure
            α0
            [ M.get_struct_record_field α1 "erc721::Erc721" "token_approvals"; α2 ] in
        M.alloc α3 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_clear_approval :
    M.IsAssociatedFunction Self "clear_approval" clear_approval.
  
  (*
      fn approved_for_all(&self, owner: AccountId, operator: AccountId) -> bool {
          self.operator_approvals.contains(&(owner, operator))
      }
  *)
  Definition approved_for_all (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; owner; operator ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* operator := M.alloc operator in
      let* α0 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "erc721::Mapping")
            [ Ty.tuple [ Ty.path "erc721::AccountId"; Ty.path "erc721::AccountId" ]; Ty.tuple [] ]
            [])
          "contains"
          []
          [] in
      let* α1 := M.read self in
      let* α2 := M.read owner in
      let* α3 := M.read operator in
      let* α4 := M.alloc (Value.Tuple [ α2; α3 ]) in
      M.call_closure α0 [ M.get_struct_record_field α1 "erc721::Erc721" "operator_approvals"; α4 ]
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_approved_for_all :
    M.IsAssociatedFunction Self "approved_for_all" approved_for_all.
  
  (*
      pub fn owner_of(&self, id: TokenId) -> Option<AccountId> {
          self.token_owner.get(&id)
      }
  *)
  Definition owner_of (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; id ] =>
      let* self := M.alloc self in
      let* id := M.alloc id in
      let* α0 :=
        M.get_associated_function
          (Ty.apply (Ty.path "erc721::Mapping") [ Ty.path "u32"; Ty.path "erc721::AccountId" ] [])
          "get"
          []
          [] in
      let* α1 := M.read self in
      M.call_closure α0 [ M.get_struct_record_field α1 "erc721::Erc721" "token_owner"; id ]
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_owner_of : M.IsAssociatedFunction Self "owner_of" owner_of.
  
  (*
      fn approved_or_owner(&self, from: Option<AccountId>, id: TokenId) -> bool {
          let owner = self.owner_of(id);
          from != Some(AccountId::from([0x0; 32]))
              && (from == owner
                  || from == self.token_approvals.get(&id)
                  || self.approved_for_all(
                      owner.expect("Error with AccountId"),
                      from.expect("Error with AccountId"),
                  ))
      }
  *)
  Definition approved_or_owner (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; from; id ] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* id := M.alloc id in
      let* owner :=
        let* α0 := M.get_associated_function (Ty.path "erc721::Erc721") "owner_of" [] [] in
        let* α1 := M.read self in
        let* α2 := M.read id in
        let* α3 := M.call_closure α0 [ α1; α2 ] in
        M.alloc α3 in
      let* α0 :=
        M.get_trait_method
          "core::cmp::PartialEq"
          (Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc721::AccountId" ] [])
          [ Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc721::AccountId" ] [] ]
          [ Value.Bool true ]
          "ne"
          []
          [] in
      let* α1 :=
        M.get_trait_method
          "core::convert::From"
          (Ty.path "erc721::AccountId")
          [ Ty.apply (Ty.path "array") [ Ty.path "u8" ] [ Value.Integer Integer.Usize 32 ] ]
          []
          "from"
          []
          [] in
      let* α2 := M.call_closure α1 [ repeat (Value.Integer Integer.U8 0) 32 ] in
      let* α3 := M.alloc (Value.StructTuple "core::option::Option::Some" [ α2 ]) in
      let* α4 := M.call_closure α0 [ from; α3 ] in
      let* α5 :=
        LogicalOp.and
          α4
          (let* α0 :=
            M.get_trait_method
              "core::cmp::PartialEq"
              (Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc721::AccountId" ] [])
              [ Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc721::AccountId" ] [] ]
              [ Value.Bool true ]
              "eq"
              []
              [] in
          let* α1 := M.call_closure α0 [ from; owner ] in
          let* α2 :=
            LogicalOp.or
              α1
              (let* α0 :=
                M.get_trait_method
                  "core::cmp::PartialEq"
                  (Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc721::AccountId" ] [])
                  [ Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc721::AccountId" ] [] ]
                  [ Value.Bool true ]
                  "eq"
                  []
                  [] in
              let* α1 :=
                M.get_associated_function
                  (Ty.apply
                    (Ty.path "erc721::Mapping")
                    [ Ty.path "u32"; Ty.path "erc721::AccountId" ]
                    [])
                  "get"
                  []
                  [] in
              let* α2 := M.read self in
              let* α3 :=
                M.call_closure
                  α1
                  [ M.get_struct_record_field α2 "erc721::Erc721" "token_approvals"; id ] in
              let* α4 := M.alloc α3 in
              M.call_closure α0 [ from; α4 ]) in
          LogicalOp.or
            α2
            (let* α0 :=
              M.get_associated_function (Ty.path "erc721::Erc721") "approved_for_all" [] [] in
            let* α1 := M.read self in
            let* α2 :=
              M.get_associated_function
                (Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc721::AccountId" ] [])
                "expect"
                []
                [ Value.Bool true ] in
            let* α3 := M.read owner in
            let* α4 := M.read (mk_str "Error with AccountId") in
            let* α5 := M.call_closure α2 [ α3; α4 ] in
            let* α6 :=
              M.get_associated_function
                (Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc721::AccountId" ] [])
                "expect"
                []
                [ Value.Bool true ] in
            let* α7 := M.read from in
            let* α8 := M.read (mk_str "Error with AccountId") in
            let* α9 := M.call_closure α6 [ α7; α8 ] in
            M.call_closure α0 [ α1; α5; α9 ])) in
      let* α0 := M.alloc α5 in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_approved_or_owner :
    M.IsAssociatedFunction Self "approved_or_owner" approved_or_owner.
  
  (*
      fn exists(&self, id: TokenId) -> bool {
          self.token_owner.contains(&id)
      }
  *)
  Definition exists_ (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; id ] =>
      let* self := M.alloc self in
      let* id := M.alloc id in
      let* α0 :=
        M.get_associated_function
          (Ty.apply (Ty.path "erc721::Mapping") [ Ty.path "u32"; Ty.path "erc721::AccountId" ] [])
          "contains"
          []
          [] in
      let* α1 := M.read self in
      M.call_closure α0 [ M.get_struct_record_field α1 "erc721::Erc721" "token_owner"; id ]
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_exists_ : M.IsAssociatedFunction Self "exists_" exists_.
  
  (*
      pub fn balance_of(&self, owner: AccountId) -> u32 {
          self.balance_of_or_zero(&owner)
      }
  *)
  Definition balance_of (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; owner ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* α0 := M.get_associated_function (Ty.path "erc721::Erc721") "balance_of_or_zero" [] [] in
      let* α1 := M.read self in
      M.call_closure α0 [ α1; owner ]
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_balance_of : M.IsAssociatedFunction Self "balance_of" balance_of.
  
  (*
      pub fn get_approved(&self, id: TokenId) -> Option<AccountId> {
          self.token_approvals.get(&id)
      }
  *)
  Definition get_approved (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; id ] =>
      let* self := M.alloc self in
      let* id := M.alloc id in
      let* α0 :=
        M.get_associated_function
          (Ty.apply (Ty.path "erc721::Mapping") [ Ty.path "u32"; Ty.path "erc721::AccountId" ] [])
          "get"
          []
          [] in
      let* α1 := M.read self in
      M.call_closure α0 [ M.get_struct_record_field α1 "erc721::Erc721" "token_approvals"; id ]
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_get_approved : M.IsAssociatedFunction Self "get_approved" get_approved.
  
  (*
      pub fn is_approved_for_all(&self, owner: AccountId, operator: AccountId) -> bool {
          self.approved_for_all(owner, operator)
      }
  *)
  Definition is_approved_for_all (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; owner; operator ] =>
      let* self := M.alloc self in
      let* owner := M.alloc owner in
      let* operator := M.alloc operator in
      let* α0 := M.get_associated_function (Ty.path "erc721::Erc721") "approved_for_all" [] [] in
      let* α1 := M.read self in
      let* α2 := M.read owner in
      let* α3 := M.read operator in
      M.call_closure α0 [ α1; α2; α3 ]
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_is_approved_for_all :
    M.IsAssociatedFunction Self "is_approved_for_all" is_approved_for_all.
  
  (*
      fn approve_for_all(&mut self, to: AccountId, approved: bool) -> Result<(), Error> {
          let caller = self.env().caller();
          if to == caller {
              return Err(Error::NotAllowed);
          }
          self.env().emit_event(Event::ApprovalForAll(ApprovalForAll {
              owner: caller,
              operator: to,
              approved,
          }));
  
          if approved {
              self.operator_approvals.insert((caller, to), ());
          } else {
              self.operator_approvals.remove((caller, to));
          }
  
          Ok(())
      }
  *)
  Definition approve_for_all (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; to; approved ] =>
      let* self := M.alloc self in
      let* to := M.alloc to in
      let* approved := M.alloc approved in
      let* caller :=
        let* α0 := M.get_associated_function (Ty.path "erc721::Env") "caller" [] [] in
        let* α1 := M.get_associated_function (Ty.path "erc721::Erc721") "env" [] [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call_closure α0 [ α4 ] in
        M.alloc α5 in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 :=
                  M.get_trait_method
                    "core::cmp::PartialEq"
                    (Ty.path "erc721::AccountId")
                    [ Ty.path "erc721::AccountId" ]
                    [ Value.Bool true ]
                    "eq"
                    []
                    [] in
                let* α1 := M.call_closure α0 [ to; caller ] in
                let* α2 := M.alloc α1 in
                M.pure (M.use α2) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 :=
                M.return_
                  (Value.StructTuple
                    "core::result::Result::Err"
                    [ Value.StructTuple "erc721::Error::NotAllowed" [] ]) in
              let* α1 := M.read α0 in
              let* α2 := M.never_to_any α1 in
              M.alloc α2;
            fun γ => M.alloc (Value.Tuple [])
          ] in
      let* _ :=
        let* α0 := M.get_associated_function (Ty.path "erc721::Env") "emit_event" [] [] in
        let* α1 := M.get_associated_function (Ty.path "erc721::Erc721") "env" [] [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read caller in
        let* α6 := M.read to in
        let* α7 := M.read approved in
        let* α8 :=
          M.call_closure
            α0
            [
              α4;
              Value.StructTuple
                "erc721::Event::ApprovalForAll"
                [
                  Value.StructRecord
                    "erc721::ApprovalForAll"
                    [ ("owner", α5); ("operator", α6); ("approved", α7) ]
                ]
            ] in
        M.alloc α8 in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let γ := M.use approved in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* _ :=
                let* α0 :=
                  M.get_associated_function
                    (Ty.apply
                      (Ty.path "erc721::Mapping")
                      [
                        Ty.tuple [ Ty.path "erc721::AccountId"; Ty.path "erc721::AccountId" ];
                        Ty.tuple []
                      ]
                      [])
                    "insert"
                    []
                    [] in
                let* α1 := M.read self in
                let* α2 := M.read caller in
                let* α3 := M.read to in
                let* α4 :=
                  M.call_closure
                    α0
                    [
                      M.get_struct_record_field α1 "erc721::Erc721" "operator_approvals";
                      Value.Tuple [ α2; α3 ];
                      Value.Tuple []
                    ] in
                M.alloc α4 in
              M.alloc (Value.Tuple []);
            fun γ =>
              let* _ :=
                let* α0 :=
                  M.get_associated_function
                    (Ty.apply
                      (Ty.path "erc721::Mapping")
                      [
                        Ty.tuple [ Ty.path "erc721::AccountId"; Ty.path "erc721::AccountId" ];
                        Ty.tuple []
                      ]
                      [])
                    "remove"
                    []
                    [] in
                let* α1 := M.read self in
                let* α2 := M.read caller in
                let* α3 := M.read to in
                let* α4 :=
                  M.call_closure
                    α0
                    [
                      M.get_struct_record_field α1 "erc721::Erc721" "operator_approvals";
                      Value.Tuple [ α2; α3 ]
                    ] in
                M.alloc α4 in
              M.alloc (Value.Tuple [])
          ] in
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_approve_for_all :
    M.IsAssociatedFunction Self "approve_for_all" approve_for_all.
  
  (*
      pub fn set_approval_for_all(&mut self, to: AccountId, approved: bool) -> Result<(), Error> {
          self.approve_for_all(to, approved)?;
          Ok(())
      }
  *)
  Definition set_approval_for_all (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; to; approved ] =>
      let* self := M.alloc self in
      let* to := M.alloc to in
      let* approved := M.alloc approved in
      let* _ :=
        let* α0 :=
          M.get_trait_method
            "core::ops::try_trait::Try"
            (Ty.apply (Ty.path "core::result::Result") [ Ty.tuple []; Ty.path "erc721::Error" ] [])
            []
            []
            "branch"
            []
            [] in
        let* α1 := M.get_associated_function (Ty.path "erc721::Erc721") "approve_for_all" [] [] in
        let* α2 := M.read self in
        let* α3 := M.read to in
        let* α4 := M.read approved in
        let* α5 := M.call_closure α1 [ α2; α3; α4 ] in
        let* α6 := M.call_closure α0 [ α5 ] in
        let* α7 := M.alloc α6 in
        M.match_operator
          α7
          [
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Break"
                  0 in
              let* residual := M.copy γ0_0 in
              let* α0 :=
                M.get_trait_method
                  "core::ops::try_trait::FromResidual"
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    [ Ty.tuple []; Ty.path "erc721::Error" ]
                    [])
                  [
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [ Ty.path "core::convert::Infallible"; Ty.path "erc721::Error" ]
                      []
                  ]
                  []
                  "from_residual"
                  []
                  [] in
              let* α1 := M.read residual in
              let* α2 := M.call_closure α0 [ α1 ] in
              let* α3 := M.return_ α2 in
              let* α4 := M.read α3 in
              let* α5 := M.never_to_any α4 in
              M.alloc α5;
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Continue"
                  0 in
              let* val := M.copy γ0_0 in
              M.pure val
          ] in
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_set_approval_for_all :
    M.IsAssociatedFunction Self "set_approval_for_all" set_approval_for_all.
  
  (*
      fn approve_for(&mut self, to: &AccountId, id: TokenId) -> Result<(), Error> {
          let caller = self.env().caller();
          let owner = self.owner_of(id);
          if !(owner == Some(caller)
              || self.approved_for_all(owner.expect("Error with AccountId"), caller))
          {
              return Err(Error::NotAllowed);
          };
  
          if *to == AccountId::from([0x0; 32]) {
              return Err(Error::NotAllowed);
          };
  
          if self.token_approvals.contains(&id) {
              return Err(Error::CannotInsert);
          } else {
              self.token_approvals.insert(id, *to);
          }
  
          self.env().emit_event(Event::Approval(Approval {
              from: caller,
              to: *to,
              id,
          }));
  
          Ok(())
      }
  *)
  Definition approve_for (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; to; id ] =>
      let* self := M.alloc self in
      let* to := M.alloc to in
      let* id := M.alloc id in
      let* caller :=
        let* α0 := M.get_associated_function (Ty.path "erc721::Env") "caller" [] [] in
        let* α1 := M.get_associated_function (Ty.path "erc721::Erc721") "env" [] [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call_closure α0 [ α4 ] in
        M.alloc α5 in
      let* owner :=
        let* α0 := M.get_associated_function (Ty.path "erc721::Erc721") "owner_of" [] [] in
        let* α1 := M.read self in
        let* α2 := M.read id in
        let* α3 := M.call_closure α0 [ α1; α2 ] in
        M.alloc α3 in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 :=
                  M.get_trait_method
                    "core::cmp::PartialEq"
                    (Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc721::AccountId" ] [])
                    [ Ty.apply (Ty.path "core::option::Option") [ Ty.path "erc721::AccountId" ] [] ]
                    [ Value.Bool true ]
                    "eq"
                    []
                    [] in
                let* α1 := M.read caller in
                let* α2 := M.alloc (Value.StructTuple "core::option::Option::Some" [ α1 ]) in
                let* α3 := M.call_closure α0 [ owner; α2 ] in
                let* α4 :=
                  LogicalOp.or
                    α3
                    (let* α0 :=
                      M.get_associated_function
                        (Ty.path "erc721::Erc721")
                        "approved_for_all"
                        []
                        [] in
                    let* α1 := M.read self in
                    let* α2 :=
                      M.get_associated_function
                        (Ty.apply
                          (Ty.path "core::option::Option")
                          [ Ty.path "erc721::AccountId" ]
                          [])
                        "expect"
                        []
                        [ Value.Bool true ] in
                    let* α3 := M.read owner in
                    let* α4 := M.read (mk_str "Error with AccountId") in
                    let* α5 := M.call_closure α2 [ α3; α4 ] in
                    let* α6 := M.read caller in
                    M.call_closure α0 [ α1; α5; α6 ]) in
                let* α5 := M.alloc (UnOp.Pure.not α4) in
                M.pure (M.use α5) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 :=
                M.return_
                  (Value.StructTuple
                    "core::result::Result::Err"
                    [ Value.StructTuple "erc721::Error::NotAllowed" [] ]) in
              let* α1 := M.read α0 in
              let* α2 := M.never_to_any α1 in
              M.alloc α2;
            fun γ => M.alloc (Value.Tuple [])
          ] in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 :=
                  M.get_trait_method
                    "core::cmp::PartialEq"
                    (Ty.path "erc721::AccountId")
                    [ Ty.path "erc721::AccountId" ]
                    [ Value.Bool true ]
                    "eq"
                    []
                    [] in
                let* α1 := M.read to in
                let* α2 :=
                  M.get_trait_method
                    "core::convert::From"
                    (Ty.path "erc721::AccountId")
                    [ Ty.apply (Ty.path "array") [ Ty.path "u8" ] [ Value.Integer Integer.Usize 32 ]
                    ]
                    []
                    "from"
                    []
                    [] in
                let* α3 := M.call_closure α2 [ repeat (Value.Integer Integer.U8 0) 32 ] in
                let* α4 := M.alloc α3 in
                let* α5 := M.call_closure α0 [ α1; α4 ] in
                let* α6 := M.alloc α5 in
                M.pure (M.use α6) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 :=
                M.return_
                  (Value.StructTuple
                    "core::result::Result::Err"
                    [ Value.StructTuple "erc721::Error::NotAllowed" [] ]) in
              let* α1 := M.read α0 in
              let* α2 := M.never_to_any α1 in
              M.alloc α2;
            fun γ => M.alloc (Value.Tuple [])
          ] in
      let* _ :=
        let* α0 := M.alloc (Value.Tuple []) in
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 :=
                  M.get_associated_function
                    (Ty.apply
                      (Ty.path "erc721::Mapping")
                      [ Ty.path "u32"; Ty.path "erc721::AccountId" ]
                      [])
                    "contains"
                    []
                    [] in
                let* α1 := M.read self in
                let* α2 :=
                  M.call_closure
                    α0
                    [ M.get_struct_record_field α1 "erc721::Erc721" "token_approvals"; id ] in
                let* α3 := M.alloc α2 in
                M.pure (M.use α3) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 :=
                M.return_
                  (Value.StructTuple
                    "core::result::Result::Err"
                    [ Value.StructTuple "erc721::Error::CannotInsert" [] ]) in
              let* α1 := M.read α0 in
              let* α2 := M.never_to_any α1 in
              M.alloc α2;
            fun γ =>
              let* _ :=
                let* α0 :=
                  M.get_associated_function
                    (Ty.apply
                      (Ty.path "erc721::Mapping")
                      [ Ty.path "u32"; Ty.path "erc721::AccountId" ]
                      [])
                    "insert"
                    []
                    [] in
                let* α1 := M.read self in
                let* α2 := M.read id in
                let* α3 := M.read to in
                let* α4 := M.read α3 in
                let* α5 :=
                  M.call_closure
                    α0
                    [ M.get_struct_record_field α1 "erc721::Erc721" "token_approvals"; α2; α4 ] in
                M.alloc α5 in
              M.alloc (Value.Tuple [])
          ] in
      let* _ :=
        let* α0 := M.get_associated_function (Ty.path "erc721::Env") "emit_event" [] [] in
        let* α1 := M.get_associated_function (Ty.path "erc721::Erc721") "env" [] [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.read caller in
        let* α6 := M.read to in
        let* α7 := M.read α6 in
        let* α8 := M.read id in
        let* α9 :=
          M.call_closure
            α0
            [
              α4;
              Value.StructTuple
                "erc721::Event::Approval"
                [ Value.StructRecord "erc721::Approval" [ ("from", α5); ("to", α7); ("id", α8) ] ]
            ] in
        M.alloc α9 in
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_approve_for : M.IsAssociatedFunction Self "approve_for" approve_for.
  
  (*
      pub fn approve(&mut self, to: AccountId, id: TokenId) -> Result<(), Error> {
          self.approve_for(&to, id)?;
          Ok(())
      }
  *)
  Definition approve (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; to; id ] =>
      let* self := M.alloc self in
      let* to := M.alloc to in
      let* id := M.alloc id in
      let* _ :=
        let* α0 :=
          M.get_trait_method
            "core::ops::try_trait::Try"
            (Ty.apply (Ty.path "core::result::Result") [ Ty.tuple []; Ty.path "erc721::Error" ] [])
            []
            []
            "branch"
            []
            [] in
        let* α1 := M.get_associated_function (Ty.path "erc721::Erc721") "approve_for" [] [] in
        let* α2 := M.read self in
        let* α3 := M.read id in
        let* α4 := M.call_closure α1 [ α2; to; α3 ] in
        let* α5 := M.call_closure α0 [ α4 ] in
        let* α6 := M.alloc α5 in
        M.match_operator
          α6
          [
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Break"
                  0 in
              let* residual := M.copy γ0_0 in
              let* α0 :=
                M.get_trait_method
                  "core::ops::try_trait::FromResidual"
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    [ Ty.tuple []; Ty.path "erc721::Error" ]
                    [])
                  [
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [ Ty.path "core::convert::Infallible"; Ty.path "erc721::Error" ]
                      []
                  ]
                  []
                  "from_residual"
                  []
                  [] in
              let* α1 := M.read residual in
              let* α2 := M.call_closure α0 [ α1 ] in
              let* α3 := M.return_ α2 in
              let* α4 := M.read α3 in
              let* α5 := M.never_to_any α4 in
              M.alloc α5;
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Continue"
                  0 in
              let* val := M.copy γ0_0 in
              M.pure val
          ] in
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_approve : M.IsAssociatedFunction Self "approve" approve.
  
  (*
      fn remove_token_from(&mut self, from: &AccountId, id: TokenId) -> Result<(), Error> {
          let Self {
              token_owner,
              owned_tokens_count,
              ..
          } = self;
  
          if !token_owner.contains(&id) {
              return Err(Error::TokenNotFound);
          }
  
          let count = owned_tokens_count
              .get(from)
              .map(|c| c - (1 as u32))
              .ok_or(Error::CannotFetchValue)?;
          owned_tokens_count.insert( *from, count);
          token_owner.remove(id);
  
          Ok(())
      }
  *)
  Definition remove_token_from (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; from; id ] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* id := M.alloc id in
      let* α0 :=
        M.match_operator
          self
          [
            fun γ =>
              let* γ := M.read γ in
              let* γ1_0 :=
                M.get_struct_record_field_or_break_match γ "erc721::Erc721" "token_owner" in
              let* γ1_1 :=
                M.get_struct_record_field_or_break_match γ "erc721::Erc721" "owned_tokens_count" in
              let* token_owner := M.alloc γ1_0 in
              let* owned_tokens_count := M.alloc γ1_1 in
              let* _ :=
                let* α0 := M.alloc (Value.Tuple []) in
                M.match_operator
                  α0
                  [
                    fun γ =>
                      let* γ :=
                        let* α0 :=
                          M.get_associated_function
                            (Ty.apply
                              (Ty.path "erc721::Mapping")
                              [ Ty.path "u32"; Ty.path "erc721::AccountId" ]
                              [])
                            "contains"
                            []
                            [] in
                        let* α1 := M.read token_owner in
                        let* α2 := M.call_closure α0 [ α1; id ] in
                        let* α3 := M.alloc (UnOp.Pure.not α2) in
                        M.pure (M.use α3) in
                      let* _ :=
                        let* α0 := M.read γ in
                        M.is_constant_or_break_match α0 (Value.Bool true) in
                      let* α0 :=
                        M.return_
                          (Value.StructTuple
                            "core::result::Result::Err"
                            [ Value.StructTuple "erc721::Error::TokenNotFound" [] ]) in
                      let* α1 := M.read α0 in
                      let* α2 := M.never_to_any α1 in
                      M.alloc α2;
                    fun γ => M.alloc (Value.Tuple [])
                  ] in
              let* count :=
                let* α0 :=
                  M.get_trait_method
                    "core::ops::try_trait::Try"
                    (Ty.apply
                      (Ty.path "core::result::Result")
                      [ Ty.path "u32"; Ty.path "erc721::Error" ]
                      [])
                    []
                    []
                    "branch"
                    []
                    [] in
                let* α1 :=
                  M.get_associated_function
                    (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ] [])
                    "ok_or"
                    [ Ty.path "erc721::Error" ]
                    [] in
                let* α2 :=
                  M.get_associated_function
                    (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ] [])
                    "map"
                    [ Ty.path "u32"; Ty.function [ Ty.tuple [ Ty.path "u32" ] ] (Ty.path "u32") ]
                    [] in
                let* α3 :=
                  M.get_associated_function
                    (Ty.apply
                      (Ty.path "erc721::Mapping")
                      [ Ty.path "erc721::AccountId"; Ty.path "u32" ]
                      [])
                    "get"
                    []
                    [] in
                let* α4 := M.read owned_tokens_count in
                let* α5 := M.read from in
                let* α6 := M.call_closure α3 [ α4; α5 ] in
                let* α7 :=
                  M.call_closure
                    α2
                    [
                      α6;
                      M.closure
                        (fun γ =>
                          match γ with
                          | [ α0 ] =>
                            let* α0 := M.alloc α0 in
                            M.match_operator
                              α0
                              [
                                fun γ =>
                                  let* c := M.copy γ in
                                  let* α0 := M.read c in
                                  let* α1 := M.alloc (Value.Integer Integer.U32 1) in
                                  let* α2 := M.read (M.use α1) in
                                  BinOp.Panic.sub α0 α2
                              ]
                          | _ => M.impossible
                          end)
                    ] in
                let* α8 :=
                  M.call_closure
                    α1
                    [ α7; Value.StructTuple "erc721::Error::CannotFetchValue" [] ] in
                let* α9 := M.call_closure α0 [ α8 ] in
                let* α10 := M.alloc α9 in
                let* α11 :=
                  M.match_operator
                    α10
                    [
                      fun γ =>
                        let* γ0_0 :=
                          M.get_struct_tuple_field_or_break_match
                            γ
                            "core::ops::control_flow::ControlFlow::Break"
                            0 in
                        let* residual := M.copy γ0_0 in
                        let* α0 :=
                          M.get_trait_method
                            "core::ops::try_trait::FromResidual"
                            (Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "erc721::Error" ]
                              [])
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.path "core::convert::Infallible"; Ty.path "erc721::Error" ]
                                []
                            ]
                            []
                            "from_residual"
                            []
                            [] in
                        let* α1 := M.read residual in
                        let* α2 := M.call_closure α0 [ α1 ] in
                        let* α3 := M.return_ α2 in
                        let* α4 := M.read α3 in
                        let* α5 := M.never_to_any α4 in
                        M.alloc α5;
                      fun γ =>
                        let* γ0_0 :=
                          M.get_struct_tuple_field_or_break_match
                            γ
                            "core::ops::control_flow::ControlFlow::Continue"
                            0 in
                        let* val := M.copy γ0_0 in
                        M.pure val
                    ] in
                M.copy α11 in
              let* _ :=
                let* α0 :=
                  M.get_associated_function
                    (Ty.apply
                      (Ty.path "erc721::Mapping")
                      [ Ty.path "erc721::AccountId"; Ty.path "u32" ]
                      [])
                    "insert"
                    []
                    [] in
                let* α1 := M.read owned_tokens_count in
                let* α2 := M.read from in
                let* α3 := M.read α2 in
                let* α4 := M.read count in
                let* α5 := M.call_closure α0 [ α1; α3; α4 ] in
                M.alloc α5 in
              let* _ :=
                let* α0 :=
                  M.get_associated_function
                    (Ty.apply
                      (Ty.path "erc721::Mapping")
                      [ Ty.path "u32"; Ty.path "erc721::AccountId" ]
                      [])
                    "remove"
                    []
                    [] in
                let* α1 := M.read token_owner in
                let* α2 := M.read id in
                let* α3 := M.call_closure α0 [ α1; α2 ] in
                M.alloc α3 in
              M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ])
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_remove_token_from :
    M.IsAssociatedFunction Self "remove_token_from" remove_token_from.
  
  (*
      fn add_token_to(&mut self, to: &AccountId, id: TokenId) -> Result<(), Error> {
          let Self {
              token_owner,
              owned_tokens_count,
              ..
          } = self;
  
          if token_owner.contains(&id) {
              return Err(Error::TokenExists);
          }
  
          if *to == AccountId::from([0x0; 32]) {
              return Err(Error::NotAllowed);
          };
  
          let count = owned_tokens_count
              .get(to)
              .map(|c| c + (1 as u32))
              .unwrap_or(1);
  
          owned_tokens_count.insert( *to, count);
          token_owner.insert(id, *to);
  
          Ok(())
      }
  *)
  Parameter add_token_to : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_add_token_to : M.IsAssociatedFunction Self "add_token_to" add_token_to.
  
  (*
      fn transfer_token_from(
          &mut self,
          from: &AccountId,
          to: &AccountId,
          id: TokenId,
      ) -> Result<(), Error> {
          let caller = self.env().caller();
          if !self.exists(id) {
              return Err(Error::TokenNotFound);
          };
          if !self.approved_or_owner(Some(caller), id) {
              return Err(Error::NotApproved);
          };
          self.clear_approval(id);
          self.remove_token_from(from, id)?;
          self.add_token_to(to, id)?;
          self.env().emit_event(Event::Transfer(Transfer {
              from: Some( *from),
              to: Some( *to),
              id,
          }));
          Ok(())
      }
  *)
  Parameter transfer_token_from : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_transfer_token_from :
    M.IsAssociatedFunction Self "transfer_token_from" transfer_token_from.
  
  (*
      pub fn transfer(&mut self, destination: AccountId, id: TokenId) -> Result<(), Error> {
          let caller = self.env().caller();
          self.transfer_token_from(&caller, &destination, id)?;
          Ok(())
      }
  *)
  Definition transfer (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; destination; id ] =>
      let* self := M.alloc self in
      let* destination := M.alloc destination in
      let* id := M.alloc id in
      let* caller :=
        let* α0 := M.get_associated_function (Ty.path "erc721::Env") "caller" [] [] in
        let* α1 := M.get_associated_function (Ty.path "erc721::Erc721") "env" [] [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call_closure α0 [ α4 ] in
        M.alloc α5 in
      let* _ :=
        let* α0 :=
          M.get_trait_method
            "core::ops::try_trait::Try"
            (Ty.apply (Ty.path "core::result::Result") [ Ty.tuple []; Ty.path "erc721::Error" ] [])
            []
            []
            "branch"
            []
            [] in
        let* α1 :=
          M.get_associated_function (Ty.path "erc721::Erc721") "transfer_token_from" [] [] in
        let* α2 := M.read self in
        let* α3 := M.read id in
        let* α4 := M.call_closure α1 [ α2; caller; destination; α3 ] in
        let* α5 := M.call_closure α0 [ α4 ] in
        let* α6 := M.alloc α5 in
        M.match_operator
          α6
          [
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Break"
                  0 in
              let* residual := M.copy γ0_0 in
              let* α0 :=
                M.get_trait_method
                  "core::ops::try_trait::FromResidual"
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    [ Ty.tuple []; Ty.path "erc721::Error" ]
                    [])
                  [
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [ Ty.path "core::convert::Infallible"; Ty.path "erc721::Error" ]
                      []
                  ]
                  []
                  "from_residual"
                  []
                  [] in
              let* α1 := M.read residual in
              let* α2 := M.call_closure α0 [ α1 ] in
              let* α3 := M.return_ α2 in
              let* α4 := M.read α3 in
              let* α5 := M.never_to_any α4 in
              M.alloc α5;
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Continue"
                  0 in
              let* val := M.copy γ0_0 in
              M.pure val
          ] in
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_transfer : M.IsAssociatedFunction Self "transfer" transfer.
  
  (*
      pub fn transfer_from(
          &mut self,
          from: AccountId,
          to: AccountId,
          id: TokenId,
      ) -> Result<(), Error> {
          self.transfer_token_from(&from, &to, id)?;
          Ok(())
      }
  *)
  Definition transfer_from (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; from; to; id ] =>
      let* self := M.alloc self in
      let* from := M.alloc from in
      let* to := M.alloc to in
      let* id := M.alloc id in
      let* _ :=
        let* α0 :=
          M.get_trait_method
            "core::ops::try_trait::Try"
            (Ty.apply (Ty.path "core::result::Result") [ Ty.tuple []; Ty.path "erc721::Error" ] [])
            []
            []
            "branch"
            []
            [] in
        let* α1 :=
          M.get_associated_function (Ty.path "erc721::Erc721") "transfer_token_from" [] [] in
        let* α2 := M.read self in
        let* α3 := M.read id in
        let* α4 := M.call_closure α1 [ α2; from; to; α3 ] in
        let* α5 := M.call_closure α0 [ α4 ] in
        let* α6 := M.alloc α5 in
        M.match_operator
          α6
          [
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Break"
                  0 in
              let* residual := M.copy γ0_0 in
              let* α0 :=
                M.get_trait_method
                  "core::ops::try_trait::FromResidual"
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    [ Ty.tuple []; Ty.path "erc721::Error" ]
                    [])
                  [
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [ Ty.path "core::convert::Infallible"; Ty.path "erc721::Error" ]
                      []
                  ]
                  []
                  "from_residual"
                  []
                  [] in
              let* α1 := M.read residual in
              let* α2 := M.call_closure α0 [ α1 ] in
              let* α3 := M.return_ α2 in
              let* α4 := M.read α3 in
              let* α5 := M.never_to_any α4 in
              M.alloc α5;
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Continue"
                  0 in
              let* val := M.copy γ0_0 in
              M.pure val
          ] in
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_transfer_from :
    M.IsAssociatedFunction Self "transfer_from" transfer_from.
  
  (*
      pub fn mint(&mut self, id: TokenId) -> Result<(), Error> {
          let caller = self.env().caller();
          self.add_token_to(&caller, id)?;
          self.env().emit_event(Event::Transfer(Transfer {
              from: Some(AccountId::from([0x0; 32])),
              to: Some(caller),
              id,
          }));
          Ok(())
      }
  *)
  Definition mint (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; id ] =>
      let* self := M.alloc self in
      let* id := M.alloc id in
      let* caller :=
        let* α0 := M.get_associated_function (Ty.path "erc721::Env") "caller" [] [] in
        let* α1 := M.get_associated_function (Ty.path "erc721::Erc721") "env" [] [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 := M.call_closure α0 [ α4 ] in
        M.alloc α5 in
      let* _ :=
        let* α0 :=
          M.get_trait_method
            "core::ops::try_trait::Try"
            (Ty.apply (Ty.path "core::result::Result") [ Ty.tuple []; Ty.path "erc721::Error" ] [])
            []
            []
            "branch"
            []
            [] in
        let* α1 := M.get_associated_function (Ty.path "erc721::Erc721") "add_token_to" [] [] in
        let* α2 := M.read self in
        let* α3 := M.read id in
        let* α4 := M.call_closure α1 [ α2; caller; α3 ] in
        let* α5 := M.call_closure α0 [ α4 ] in
        let* α6 := M.alloc α5 in
        M.match_operator
          α6
          [
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Break"
                  0 in
              let* residual := M.copy γ0_0 in
              let* α0 :=
                M.get_trait_method
                  "core::ops::try_trait::FromResidual"
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    [ Ty.tuple []; Ty.path "erc721::Error" ]
                    [])
                  [
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [ Ty.path "core::convert::Infallible"; Ty.path "erc721::Error" ]
                      []
                  ]
                  []
                  "from_residual"
                  []
                  [] in
              let* α1 := M.read residual in
              let* α2 := M.call_closure α0 [ α1 ] in
              let* α3 := M.return_ α2 in
              let* α4 := M.read α3 in
              let* α5 := M.never_to_any α4 in
              M.alloc α5;
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Continue"
                  0 in
              let* val := M.copy γ0_0 in
              M.pure val
          ] in
      let* _ :=
        let* α0 := M.get_associated_function (Ty.path "erc721::Env") "emit_event" [] [] in
        let* α1 := M.get_associated_function (Ty.path "erc721::Erc721") "env" [] [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 :=
          M.get_trait_method
            "core::convert::From"
            (Ty.path "erc721::AccountId")
            [ Ty.apply (Ty.path "array") [ Ty.path "u8" ] [ Value.Integer Integer.Usize 32 ] ]
            []
            "from"
            []
            [] in
        let* α6 := M.call_closure α5 [ repeat (Value.Integer Integer.U8 0) 32 ] in
        let* α7 := M.read caller in
        let* α8 := M.read id in
        let* α9 :=
          M.call_closure
            α0
            [
              α4;
              Value.StructTuple
                "erc721::Event::Transfer"
                [
                  Value.StructRecord
                    "erc721::Transfer"
                    [
                      ("from", Value.StructTuple "core::option::Option::Some" [ α6 ]);
                      ("to", Value.StructTuple "core::option::Option::Some" [ α7 ]);
                      ("id", α8)
                    ]
                ]
            ] in
        M.alloc α9 in
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_mint : M.IsAssociatedFunction Self "mint" mint.
  
  (*
      pub fn burn(&mut self, id: TokenId) -> Result<(), Error> {
          let caller = self.env().caller();
          let Self {
              token_owner,
              owned_tokens_count,
              ..
          } = self;
  
          let owner = token_owner.get(&id).ok_or(Error::TokenNotFound)?;
          if owner != caller {
              return Err(Error::NotOwner);
          };
  
          let count = owned_tokens_count
              .get(&caller)
              .map(|c| c - 1)
              .ok_or(Error::CannotFetchValue)?;
          owned_tokens_count.insert(caller, count);
          token_owner.remove(id);
  
          self.env().emit_event(Event::Transfer(Transfer {
              from: Some(caller),
              to: Some(AccountId::from([0x0; 32])),
              id,
          }));
  
          Ok(())
      }
  *)
  Parameter burn : (list Ty.t) -> (list Value.t) -> M.
  
  Axiom AssociatedFunction_burn : M.IsAssociatedFunction Self "burn" burn.
End Impl_erc721_Erc721.
