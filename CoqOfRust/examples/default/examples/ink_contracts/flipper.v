(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Flipper.
Section Flipper.
  Record t : Set := {
    value : bool.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End Flipper.
End Flipper.

Module  Impl_flipper_Flipper_t.
Section Impl_flipper_Flipper_t.
  Definition Self : Set := flipper.Flipper.t.
  
  (*
      pub fn new(init_value: bool) -> Self {
          Self { value: init_value }
      }
  *)
  Definition new (init_value : bool.t) : M Self :=
    ltac:(M.monadic (
      let init_value := M.alloc (| init_value |) in
      {| flipper.Flipper.value := M.read (| init_value |); |}
    )).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn new_default() -> Self {
          Self::new(Default::default())
      }
  *)
  Definition new_default : M Self :=
    ltac:(M.monadic (
      M.call (|(flipper.Flipper.t::["new"]
        (M.call (|ltac:(M.get_method (fun ℐ =>
          core.default.Default.default (Self := bool.t) (Trait := ℐ)))
        |)))
      |)
    )).
  
  Global Instance AssociatedFunction_new_default :
    Notations.DoubleColon Self "new_default" := {
    Notations.double_colon := new_default;
  }.
  
  (*
      pub fn flip(&mut self) {
          self.value = !self.value;
      }
  *)
  Definition flip (self : mut_ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        let _ : M.Val unit :=
          assign (|
            flipper.Flipper.Get_value (deref (M.read (| self |))),
            UnOp.not
              (M.read (| flipper.Flipper.Get_value (deref (M.read (| self |)))
              |))
          |) in
        M.alloc (| tt |)
      |)
    )).
  
  Global Instance AssociatedFunction_flip :
    Notations.DoubleColon Self "flip" := {
    Notations.double_colon := flip;
  }.
  
  (*
      pub fn get(&self) -> bool {
          self.value
      }
  *)
  Definition get (self : ref Self) : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (| flipper.Flipper.Get_value (deref (M.read (| self |))) |)
    )).
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
End Impl_flipper_Flipper_t.
End Impl_flipper_Flipper_t.
