(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructRecord
  {
    name := "Incrementer";
    ty_params := [];
    fields := [ ("value", Ty.path "i32") ];
  } *)

Module Impl_incrementer_Incrementer.
  Definition Self : Ty.t := Ty.path "incrementer::Incrementer".
  
  (*
      pub fn new(init_value: i32) -> Self {
          Self { value: init_value }
      }
  *)
  Definition new (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ init_value ] =>
      let* init_value := M.alloc init_value in
      let* α0 := M.read init_value in
      M.pure (Value.StructRecord "incrementer::Incrementer" [ ("value", α0) ])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  
  (*
      pub fn new_default() -> Self {
          Self::new(Default::default())
      }
  *)
  Definition new_default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 := M.get_associated_function (Ty.path "incrementer::Incrementer") "new" [] [] in
      let* α1 :=
        M.get_trait_method "core::default::Default" (Ty.path "i32") [] [] "default" [] [] in
      let* α2 := M.call_closure α1 [] in
      M.call_closure α0 [ α2 ]
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new_default : M.IsAssociatedFunction Self "new_default" new_default.
  
  (*
      pub fn inc(&mut self, by: i32) {
          self.value += by;
      }
  *)
  Definition inc (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; by_ ] =>
      let* self := M.alloc self in
      let* by_ := M.alloc by_ in
      let* _ :=
        let* β :=
          let* α0 := M.read self in
          M.pure (M.get_struct_record_field α0 "incrementer::Incrementer" "value") in
        let* α0 := M.read β in
        let* α1 := M.read by_ in
        let* α2 := BinOp.Panic.add α0 α1 in
        M.assign β α2 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_inc : M.IsAssociatedFunction Self "inc" inc.
  
  (*
      pub fn get(&self) -> i32 {
          self.value
      }
  *)
  Definition get (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (M.get_struct_record_field α0 "incrementer::Incrementer" "value")
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_get : M.IsAssociatedFunction Self "get" get.
End Impl_incrementer_Incrementer.
