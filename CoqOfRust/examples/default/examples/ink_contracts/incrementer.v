(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Incrementer.
Section Incrementer.
  Record t : Set := {
    value : i32.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End Incrementer.
End Incrementer.

Module  Impl_incrementer_Incrementer_t.
Section Impl_incrementer_Incrementer_t.
  Definition Self : Set := incrementer.Incrementer.t.
  
  (*
      pub fn new(init_value: i32) -> Self {
          Self { value: init_value }
      }
  *)
  Definition new (init_value : i32.t) : M Self :=
    let* init_value := M.alloc init_value in
    let* α0 : i32.t := M.read init_value in
    M.pure {| incrementer.Incrementer.value := α0; |}.
  
  Axiom new_is_impl : impl Self "new" = new.
  
  (*
      pub fn new_default() -> Self {
          Self::new(Default::default())
      }
  *)
  Definition new_default : M Self :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.default.Default.default (Self := i32.t) (Trait := ℐ))) in
    let* α1 : i32.t := M.call α0 in
    M.call (impl incrementer.Incrementer.t "new" α1).
  
  Axiom new_default_is_impl : impl Self "new_default" = new_default.
  
  (*
      pub fn inc(&mut self, by: i32) {
          self.value += by;
      }
  *)
  Definition inc (self : mut_ref Self) (by_ : i32.t) : M unit :=
    let* self := M.alloc self in
    let* by_ := M.alloc by_ in
    let* _ : M.Val unit :=
      let* β : M.Val i32.t :=
        let* α0 : mut_ref incrementer.Incrementer.t := M.read self in
        M.pure (incrementer.Incrementer.Get_value (deref α0)) in
      let* α0 := M.read β in
      let* α1 : i32.t := M.read by_ in
      let* α2 := BinOp.Panic.add α0 α1 in
      assign β α2 in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Axiom inc_is_impl : impl Self "inc" = inc.
  
  (*
      pub fn get(&self) -> i32 {
          self.value
      }
  *)
  Definition get (self : ref Self) : M i32.t :=
    let* self := M.alloc self in
    let* α0 : ref incrementer.Incrementer.t := M.read self in
    M.read (incrementer.Incrementer.Get_value (deref α0)).
  
  Axiom get_is_impl : impl Self "get" = get.
End Impl_incrementer_Incrementer_t.
End Impl_incrementer_Incrementer_t.
