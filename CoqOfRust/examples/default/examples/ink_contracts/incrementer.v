(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Incrementer.
Section Incrementer.
  Record t : Set := {
    value : i32.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End Incrementer.
End Incrementer.

Module  Impl_incrementer_Incrementer_t.
Section Impl_incrementer_Incrementer_t.
  Definition Self : Set := incrementer.Incrementer.t.
  
  (*
      pub fn new(init_value: i32) -> Self {
          Self { value: init_value }
      }
  *)
  Definition new (init_value : i32.t) : M Self :=
    ltac:(M.monadic ((
      let init_value := M.alloc (| init_value |) in
      {| incrementer.Incrementer.value := M.read (| init_value |);
      |} : incrementer.Incrementer.t
    ) : Self)).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn new_default() -> Self {
          Self::new(Default::default())
      }
  *)
  Definition new_default : M Self :=
    ltac:(M.monadic ((
      M.call (|(incrementer.Incrementer.t::["new"]
        (M.call (|ltac:(M.get_method (fun ℐ =>
          core.default.Default.default (Self := i32.t) (Trait := ℐ)))
        |)))
      |)
    ) : Self)).
  
  Global Instance AssociatedFunction_new_default :
    Notations.DoubleColon Self "new_default" := {
    Notations.double_colon := new_default;
  }.
  
  (*
      pub fn inc(&mut self, by: i32) {
          self.value += by;
      }
  *)
  Definition inc (self : mut_ref Self) (by_ : i32.t) : M unit :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let by_ := M.alloc (| by_ |) in
      M.read (|
        let _ : M.Val unit :=
          let β : M.Val i32.t :=
            incrementer.Incrementer.Get_value (deref (M.read (| self |))) in
          assign (| β, BinOp.Panic.add (| M.read (| β |), M.read (| by_ |) |)
          |) in
        M.alloc (| tt |)
      |)
    ) : unit)).
  
  Global Instance AssociatedFunction_inc : Notations.DoubleColon Self "inc" := {
    Notations.double_colon := inc;
  }.
  
  (*
      pub fn get(&self) -> i32 {
          self.value
      }
  *)
  Definition get (self : ref Self) : M i32.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (| incrementer.Incrementer.Get_value (deref (M.read (| self |))) |)
    ) : i32.t)).
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
End Impl_incrementer_Incrementer_t.
End Impl_incrementer_Incrementer_t.
