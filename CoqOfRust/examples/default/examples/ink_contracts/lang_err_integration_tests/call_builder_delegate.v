(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Ltac Hash := exact (array u8.t).

Module LangError.
  Inductive t : Set :=
  | CouldNotReadInput.
End LangError.

Module  CallBuilderDelegateTest.
Section CallBuilderDelegateTest.
  Record t : Set := {
    value : i32.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End CallBuilderDelegateTest.
End CallBuilderDelegateTest.

Module  Impl_core_default_Default_for_call_builder_delegate_CallBuilderDelegateTest_t.
Section Impl_core_default_Default_for_call_builder_delegate_CallBuilderDelegateTest_t.
  Definition Self : Set := call_builder_delegate.CallBuilderDelegateTest.t.
  
  (*
  Default
  *)
  Definition default : M call_builder_delegate.CallBuilderDelegateTest.t :=
    ltac:(M.monadic ((
      {|
        call_builder_delegate.CallBuilderDelegateTest.value :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default (Self := i32.t) (Trait := ℐ)))
          |);
      |} : call_builder_delegate.CallBuilderDelegateTest.t
    ) : call_builder_delegate.CallBuilderDelegateTest.t)).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_call_builder_delegate_CallBuilderDelegateTest_t.
End Impl_core_default_Default_for_call_builder_delegate_CallBuilderDelegateTest_t.

Module  Impl_call_builder_delegate_CallBuilderDelegateTest_t.
Section Impl_call_builder_delegate_CallBuilderDelegateTest_t.
  Definition Self : Set := call_builder_delegate.CallBuilderDelegateTest.t.
  
  (*
      pub fn new(value: i32) -> Self {
          Self { value }
      }
  *)
  Definition new (value : i32.t) : M Self :=
    ltac:(M.monadic ((
      let value := M.alloc (| value |) in
      {|
        call_builder_delegate.CallBuilderDelegateTest.value :=
          M.read (| value |);
      |} : call_builder_delegate.CallBuilderDelegateTest.t
    ) : Self)).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn delegate(&mut self, code_hash: Hash, selector: [u8; 4]) -> Option<LangError> {
          // let result = build_call::<DefaultEnvironment>()
          //     .delegate(code_hash)
          //     .exec_input(ExecutionInput::new(Selector::new(selector)))
          //     .returns::<bool>()
          //     .try_invoke()
          //     .expect("Error from the Contracts pallet.");
  
          // match result {
          //     Ok(_) => None,
          //     Err(e @ ink::LangError::CouldNotReadInput) => Some(e),
          //     Err(_) => {
          //         unimplemented!("No other `LangError` variants exist at the moment.")
          //     }
          // }
          None
      }
  *)
  Definition delegate
      (self : mut_ref Self)
      (code_hash : ltac:(call_builder_delegate.Hash))
      (selector : array u8.t)
      : M (core.option.Option.t call_builder_delegate.LangError.t) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let code_hash := M.alloc (| code_hash |) in
      let selector := M.alloc (| selector |) in
      core.option.Option.None
    ) : core.option.Option.t call_builder_delegate.LangError.t)).
  
  Global Instance AssociatedFunction_delegate :
    Notations.DoubleColon Self "delegate" := {
    Notations.double_colon := delegate;
  }.
  
  (*
      pub fn invoke(&mut self, code_hash: Hash, selector: [u8; 4]) -> i32 {
          // use ink::env::call::build_call;
  
          // build_call::<DefaultEnvironment>()
          //     .delegate(code_hash)
          //     .exec_input(ExecutionInput::new(Selector::new(selector)))
          //     .returns::<i32>()
          //     .invoke()
          0
      }
  *)
  Definition invoke
      (self : mut_ref Self)
      (code_hash : ltac:(call_builder_delegate.Hash))
      (selector : array u8.t)
      : M i32.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let code_hash := M.alloc (| code_hash |) in
      let selector := M.alloc (| selector |) in
      (Integer.of_Z 0) : i32.t
    ) : i32.t)).
  
  Global Instance AssociatedFunction_invoke :
    Notations.DoubleColon Self "invoke" := {
    Notations.double_colon := invoke;
  }.
End Impl_call_builder_delegate_CallBuilderDelegateTest_t.
End Impl_call_builder_delegate_CallBuilderDelegateTest_t.
