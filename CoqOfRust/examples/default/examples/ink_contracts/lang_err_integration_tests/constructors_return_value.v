(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_constructors_return_value_AccountId_t.
Section Impl_core_default_Default_for_constructors_return_value_AccountId_t.
  Definition Self : Set := constructors_return_value.AccountId.t.
  
  (*
  Default
  *)
  Definition default : M constructors_return_value.AccountId.t :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.default.Default.default (Self := u128.t) (Trait := ℐ))) in
    let* α1 : u128.t := M.call α0 in
    M.pure (constructors_return_value.AccountId.Build_t α1).
  
  Axiom default_is_impl : impl Self "default" = default.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_constructors_return_value_AccountId_t.
End Impl_core_default_Default_for_constructors_return_value_AccountId_t.

Module  Impl_core_clone_Clone_for_constructors_return_value_AccountId_t.
Section Impl_core_clone_Clone_for_constructors_return_value_AccountId_t.
  Definition Self : Set := constructors_return_value.AccountId.t.
  
  (*
  Clone
  *)
  Definition clone
      (self : ref Self)
      : M constructors_return_value.AccountId.t :=
    let* self := M.alloc self in
    let* α0 : M.Val constructors_return_value.AccountId.t :=
      match_operator
        (DeclaredButUndefinedVariable
          (A := core.clone.AssertParamIsClone.t u128.t))
        [
          fun γ =>
            (let* α0 : ref constructors_return_value.AccountId.t :=
              M.read self in
            M.pure (deref α0)) :
            M (M.Val constructors_return_value.AccountId.t)
        ] in
    M.read α0.
  
  Axiom clone_is_impl : impl Self "clone" = clone.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_constructors_return_value_AccountId_t.
End Impl_core_clone_Clone_for_constructors_return_value_AccountId_t.

Module  Impl_core_marker_Copy_for_constructors_return_value_AccountId_t.
Section Impl_core_marker_Copy_for_constructors_return_value_AccountId_t.
  Definition Self : Set := constructors_return_value.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_constructors_return_value_AccountId_t.
End Impl_core_marker_Copy_for_constructors_return_value_AccountId_t.

Module  Impl_core_convert_From_array_u8_t_for_constructors_return_value_AccountId_t.
Section Impl_core_convert_From_array_u8_t_for_constructors_return_value_AccountId_t.
  Definition Self : Set := constructors_return_value.AccountId.t.
  
  (*
      fn from(_value: [u8; 32]) -> Self {
          unimplemented!()
      }
  *)
  Definition from (_value : array u8.t) : M Self :=
    let* _value := M.alloc _value in
    let* α0 : ref str.t := M.read (mk_str "not implemented") in
    let* α1 : never.t := M.call (core.panicking.panic α0) in
    never_to_any α1.
  
  Axiom from_is_impl : impl Self "from" = from.
  
  Global Instance ℐ : core.convert.From.Trait Self (T := array u8.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_array_u8_t_for_constructors_return_value_AccountId_t.
End Impl_core_convert_From_array_u8_t_for_constructors_return_value_AccountId_t.

Ltac Balance := exact u128.t.

Module  ConstructorsReturnValue.
Section ConstructorsReturnValue.
  Record t : Set := {
    value : bool.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End ConstructorsReturnValue.
End ConstructorsReturnValue.

Module LangError.
  Inductive t : Set :=
  | CouldNotReadInput.
End LangError.

Ltac ConstructorResult T :=
  exact (core.result.Result.t T constructors_return_value.LangError.t).

Module  ConstructorError.
Section ConstructorError.
  Inductive t : Set := Build.
End ConstructorError.
End ConstructorError.

Module  Impl_core_fmt_Debug_for_constructors_return_value_ConstructorError_t.
Section Impl_core_fmt_Debug_for_constructors_return_value_ConstructorError_t.
  Definition Self : Set := constructors_return_value.ConstructorError.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "ConstructorError") in
    M.call (impl core.fmt.Formatter.t "write_str" α0 α1).
  
  Axiom fmt_is_impl : impl Self "fmt" = fmt.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_constructors_return_value_ConstructorError_t.
End Impl_core_fmt_Debug_for_constructors_return_value_ConstructorError_t.

Module  ReturnFlags.
Section ReturnFlags.
  Inductive t : Set := Build.
End ReturnFlags.
End ReturnFlags.

Module  Impl_constructors_return_value_ReturnFlags_t.
Section Impl_constructors_return_value_ReturnFlags_t.
  Definition Self : Set := constructors_return_value.ReturnFlags.t.
  
  (*
      fn new_with_reverted(has_reverted: bool) -> Self {
          unimplemented!()
      }
  *)
  Definition new_with_reverted (has_reverted : bool.t) : M Self :=
    let* has_reverted := M.alloc has_reverted in
    let* α0 : ref str.t := M.read (mk_str "not implemented") in
    let* α1 : never.t := M.call (core.panicking.panic α0) in
    never_to_any α1.
  
  Axiom new_with_reverted_is_impl :
      impl Self "new_with_reverted" = new_with_reverted.
End Impl_constructors_return_value_ReturnFlags_t.
End Impl_constructors_return_value_ReturnFlags_t.

(*
fn return_value<R>(return_flags: ReturnFlags, return_value: &R) -> ! {
    unimplemented!()
}
*)
Definition return_value
    {R : Set}
    (return_flags : constructors_return_value.ReturnFlags.t)
    (return_value : ref R)
    : M never.t :=
  let* return_flags := M.alloc return_flags in
  let* return_value := M.alloc return_value in
  let* α0 : ref str.t := M.read (mk_str "not implemented") in
  M.call (core.panicking.panic α0).

Module  Impl_constructors_return_value_ConstructorsReturnValue_t.
Section Impl_constructors_return_value_ConstructorsReturnValue_t.
  Definition Self : Set := constructors_return_value.ConstructorsReturnValue.t.
  
  (*
      pub fn new(init_value: bool) -> Self {
          Self { value: init_value }
      }
  *)
  Definition new (init_value : bool.t) : M Self :=
    let* init_value := M.alloc init_value in
    let* α0 : bool.t := M.read init_value in
    M.pure {| constructors_return_value.ConstructorsReturnValue.value := α0; |}.
  
  Axiom new_is_impl : impl Self "new" = new.
  
  (*
      pub fn try_new(succeed: bool) -> Result<Self, ConstructorError> {
          if succeed {
              Ok(Self::new(true))
          } else {
              Err(ConstructorError)
          }
      }
  *)
  Definition try_new
      (succeed : bool.t)
      :
        M
          (core.result.Result.t
            Self
            constructors_return_value.ConstructorError.t) :=
    let* succeed := M.alloc succeed in
    let* α0 : bool.t := M.read (use succeed) in
    let* α1 :
        M.Val
          (core.result.Result.t
            constructors_return_value.ConstructorsReturnValue.t
            constructors_return_value.ConstructorError.t) :=
      if α0 then
        let* α0 : constructors_return_value.ConstructorsReturnValue.t :=
          M.call
            (impl constructors_return_value.ConstructorsReturnValue.t "new"
              true) in
        M.alloc (core.result.Result.Ok α0)
      else
        M.alloc
          (core.result.Result.Err
            constructors_return_value.ConstructorError.Build) in
    M.read α1.
  
  Axiom try_new_is_impl : impl Self "try_new" = try_new.
  
  (*
      pub fn revert_new(_init_value: bool) -> Self {
          return_value::<ConstructorResult<AccountId>>(
              ReturnFlags::new_with_reverted(true),
              &Ok(AccountId::from([0u8; 32])),
          )
      }
  *)
  Definition revert_new (_init_value : bool.t) : M Self :=
    let* _init_value := M.alloc _init_value in
    let* α0 : constructors_return_value.ReturnFlags.t :=
      M.call
        (impl constructors_return_value.ReturnFlags.t "new_with_reverted"
          true) in
    let* α1 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.convert.From.from
          (Self := constructors_return_value.AccountId.t)
          (T := array u8.t)
          (Trait := ℐ))) in
    let* α2 : constructors_return_value.AccountId.t :=
      M.call (α1 (repeat ((Integer.of_Z 0) : u8.t) 32)) in
    let* α3 :
        M.Val
          (core.result.Result.t
            constructors_return_value.AccountId.t
            constructors_return_value.LangError.t) :=
      M.alloc (core.result.Result.Ok α2) in
    let* α4 : never.t :=
      M.call (constructors_return_value.return_value α0 (borrow α3)) in
    never_to_any α4.
  
  Axiom revert_new_is_impl : impl Self "revert_new" = revert_new.
  
  (*
      pub fn try_revert_new(init_value: bool) -> Result<Self, ConstructorError> {
          let value = if init_value {
              Ok(Ok(AccountId::from([0u8; 32])))
          } else {
              Err(LangError::CouldNotReadInput)
          };
  
          return_value::<ConstructorResult<Result<AccountId, ConstructorError>>>(
              ReturnFlags::new_with_reverted(true),
              &value,
          )
      }
  *)
  Definition try_revert_new
      (init_value : bool.t)
      :
        M
          (core.result.Result.t
            Self
            constructors_return_value.ConstructorError.t) :=
    let* init_value := M.alloc init_value in
    let* value :
        M.Val
          (core.result.Result.t
            (core.result.Result.t
              constructors_return_value.AccountId.t
              constructors_return_value.ConstructorError.t)
            constructors_return_value.LangError.t) :=
      let* α0 : bool.t := M.read (use init_value) in
      let* α1 :
          M.Val
            (core.result.Result.t
              (core.result.Result.t
                constructors_return_value.AccountId.t
                constructors_return_value.ConstructorError.t)
              constructors_return_value.LangError.t) :=
        if α0 then
          let* α0 : _ :=
            ltac:(M.get_method (fun ℐ =>
              core.convert.From.from
                (Self := constructors_return_value.AccountId.t)
                (T := array u8.t)
                (Trait := ℐ))) in
          let* α1 : constructors_return_value.AccountId.t :=
            M.call (α0 (repeat ((Integer.of_Z 0) : u8.t) 32)) in
          M.alloc (core.result.Result.Ok (core.result.Result.Ok α1))
        else
          M.alloc
            (core.result.Result.Err
              constructors_return_value.LangError.CouldNotReadInput) in
      M.copy α1 in
    let* α0 : constructors_return_value.ReturnFlags.t :=
      M.call
        (impl constructors_return_value.ReturnFlags.t "new_with_reverted"
          true) in
    let* α1 : never.t :=
      M.call (constructors_return_value.return_value α0 (borrow value)) in
    let* α2 :
        core.result.Result.t
          constructors_return_value.ConstructorsReturnValue.t
          constructors_return_value.ConstructorError.t :=
      never_to_any α1 in
    let* α0 :
        M.Val
          (core.result.Result.t
            constructors_return_value.ConstructorsReturnValue.t
            constructors_return_value.ConstructorError.t) :=
      M.alloc α2 in
    M.read α0.
  
  Axiom try_revert_new_is_impl : impl Self "try_revert_new" = try_revert_new.
  
  (*
      pub fn get_value(&self) -> bool {
          self.value
      }
  *)
  Definition get_value (self : ref Self) : M bool.t :=
    let* self := M.alloc self in
    let* α0 : ref constructors_return_value.ConstructorsReturnValue.t :=
      M.read self in
    M.read
      (constructors_return_value.ConstructorsReturnValue.Get_value (deref α0)).
  
  Axiom get_value_is_impl : impl Self "get_value" = get_value.
End Impl_constructors_return_value_ConstructorsReturnValue_t.
End Impl_constructors_return_value_ConstructorsReturnValue_t.
