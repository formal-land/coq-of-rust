(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_constructors_return_value_AccountId_t.
Section Impl_core_default_Default_for_constructors_return_value_AccountId_t.
  Definition Self : Set := constructors_return_value.AccountId.t.
  
  (*
  Default
  *)
  Definition default : M constructors_return_value.AccountId.t :=
    ltac:(M.monadic (
      constructors_return_value.AccountId.Build_t
        (M.call (|ltac:(M.get_method (fun ℐ =>
          core.default.Default.default (Self := u128.t) (Trait := ℐ)))
        |))
    )).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_constructors_return_value_AccountId_t.
End Impl_core_default_Default_for_constructors_return_value_AccountId_t.

Module  Impl_core_clone_Clone_for_constructors_return_value_AccountId_t.
Section Impl_core_clone_Clone_for_constructors_return_value_AccountId_t.
  Definition Self : Set := constructors_return_value.AccountId.t.
  
  (*
  Clone
  *)
  Definition clone
      (self : ref Self)
      : M constructors_return_value.AccountId.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.clone.AssertParamIsClone.t u128.t))
            [
              fun γ =>
                (deref (M.read (| self |))) :
                M.Val constructors_return_value.AccountId.t
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_constructors_return_value_AccountId_t.
End Impl_core_clone_Clone_for_constructors_return_value_AccountId_t.

Module  Impl_core_marker_Copy_for_constructors_return_value_AccountId_t.
Section Impl_core_marker_Copy_for_constructors_return_value_AccountId_t.
  Definition Self : Set := constructors_return_value.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_constructors_return_value_AccountId_t.
End Impl_core_marker_Copy_for_constructors_return_value_AccountId_t.

Module  Impl_core_convert_From_array_u8_t_for_constructors_return_value_AccountId_t.
Section Impl_core_convert_From_array_u8_t_for_constructors_return_value_AccountId_t.
  Definition Self : Set := constructors_return_value.AccountId.t.
  
  (*
      fn from(_value: [u8; 32]) -> Self {
          unimplemented!()
      }
  *)
  Definition from (_value : array u8.t) : M Self :=
    ltac:(M.monadic (
      let _value := M.alloc (| _value |) in
      never_to_any (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ : core.convert.From.Trait Self (T := array u8.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_array_u8_t_for_constructors_return_value_AccountId_t.
End Impl_core_convert_From_array_u8_t_for_constructors_return_value_AccountId_t.

Ltac Balance := exact u128.t.

Module  ConstructorsReturnValue.
Section ConstructorsReturnValue.
  Record t : Set := {
    value : bool.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End ConstructorsReturnValue.
End ConstructorsReturnValue.

Module LangError.
  Inductive t : Set :=
  | CouldNotReadInput.
End LangError.

Ltac ConstructorResult T :=
  exact (core.result.Result.t T constructors_return_value.LangError.t).

Module  ConstructorError.
Section ConstructorError.
  Inductive t : Set := Build.
End ConstructorError.
End ConstructorError.

Module  Impl_core_fmt_Debug_for_constructors_return_value_ConstructorError_t.
Section Impl_core_fmt_Debug_for_constructors_return_value_ConstructorError_t.
  Definition Self : Set := constructors_return_value.ConstructorError.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["write_str"]
        (M.read (| f |))
        (M.read (| mk_str "ConstructorError" |)))
      |)
    )).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_constructors_return_value_ConstructorError_t.
End Impl_core_fmt_Debug_for_constructors_return_value_ConstructorError_t.

Module  ReturnFlags.
Section ReturnFlags.
  Inductive t : Set := Build.
End ReturnFlags.
End ReturnFlags.

Module  Impl_constructors_return_value_ReturnFlags_t.
Section Impl_constructors_return_value_ReturnFlags_t.
  Definition Self : Set := constructors_return_value.ReturnFlags.t.
  
  (*
      fn new_with_reverted(has_reverted: bool) -> Self {
          unimplemented!()
      }
  *)
  Definition new_with_reverted (has_reverted : bool.t) : M Self :=
    ltac:(M.monadic (
      let has_reverted := M.alloc (| has_reverted |) in
      never_to_any (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_new_with_reverted :
    Notations.DoubleColon Self "new_with_reverted" := {
    Notations.double_colon := new_with_reverted;
  }.
End Impl_constructors_return_value_ReturnFlags_t.
End Impl_constructors_return_value_ReturnFlags_t.

(*
fn return_value<R>(return_flags: ReturnFlags, return_value: &R) -> ! {
    unimplemented!()
}
*)
Definition return_value
    {R : Set}
    (return_flags : constructors_return_value.ReturnFlags.t)
    (return_value : ref R)
    : M never.t :=
  ltac:(M.monadic (
    let return_flags := M.alloc (| return_flags |) in
    let return_value := M.alloc (| return_value |) in
    M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |))) |)
  )).

Module  Impl_constructors_return_value_ConstructorsReturnValue_t.
Section Impl_constructors_return_value_ConstructorsReturnValue_t.
  Definition Self : Set := constructors_return_value.ConstructorsReturnValue.t.
  
  (*
      pub fn new(init_value: bool) -> Self {
          Self { value: init_value }
      }
  *)
  Definition new (init_value : bool.t) : M Self :=
    ltac:(M.monadic (
      let init_value := M.alloc (| init_value |) in
      {|
        constructors_return_value.ConstructorsReturnValue.value :=
          M.read (| init_value |);
      |}
    )).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn try_new(succeed: bool) -> Result<Self, ConstructorError> {
          if succeed {
              Ok(Self::new(true))
          } else {
              Err(ConstructorError)
          }
      }
  *)
  Definition try_new
      (succeed : bool.t)
      :
        M
          (core.result.Result.t
            Self
            constructors_return_value.ConstructorError.t) :=
    ltac:(M.monadic (
      let succeed := M.alloc (| succeed |) in
      M.read (|
        if M.read (| use succeed |) then
          M.alloc (|
            core.result.Result.Ok
              (M.call (|(constructors_return_value.ConstructorsReturnValue.t::["new"]
                true)
              |))
          |)
        else
          M.alloc (|
            core.result.Result.Err
              constructors_return_value.ConstructorError.Build
          |)
      |)
    )).
  
  Global Instance AssociatedFunction_try_new :
    Notations.DoubleColon Self "try_new" := {
    Notations.double_colon := try_new;
  }.
  
  (*
      pub fn revert_new(_init_value: bool) -> Self {
          return_value::<ConstructorResult<AccountId>>(
              ReturnFlags::new_with_reverted(true),
              &Ok(AccountId::from([0u8; 32])),
          )
      }
  *)
  Definition revert_new (_init_value : bool.t) : M Self :=
    ltac:(M.monadic (
      let _init_value := M.alloc (| _init_value |) in
      never_to_any (|
        M.call (|(constructors_return_value.return_value
          (M.call (|(constructors_return_value.ReturnFlags.t::["new_with_reverted"]
            true)
          |))
          (borrow
            (M.alloc (|
              core.result.Result.Ok
                (M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.convert.From.from
                      (Self := constructors_return_value.AccountId.t)
                      (T := array u8.t)
                      (Trait := ℐ)))
                  (repeat ((Integer.of_Z 0) : u8.t) 32))
                |))
            |))))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_revert_new :
    Notations.DoubleColon Self "revert_new" := {
    Notations.double_colon := revert_new;
  }.
  
  (*
      pub fn try_revert_new(init_value: bool) -> Result<Self, ConstructorError> {
          let value = if init_value {
              Ok(Ok(AccountId::from([0u8; 32])))
          } else {
              Err(LangError::CouldNotReadInput)
          };
  
          return_value::<ConstructorResult<Result<AccountId, ConstructorError>>>(
              ReturnFlags::new_with_reverted(true),
              &value,
          )
      }
  *)
  Definition try_revert_new
      (init_value : bool.t)
      :
        M
          (core.result.Result.t
            Self
            constructors_return_value.ConstructorError.t) :=
    ltac:(M.monadic (
      let init_value := M.alloc (| init_value |) in
      M.read (|
        let value :
            M.Val
              (core.result.Result.t
                (core.result.Result.t
                  constructors_return_value.AccountId.t
                  constructors_return_value.ConstructorError.t)
                constructors_return_value.LangError.t) :=
          M.copy (|
            if M.read (| use init_value |) then
              M.alloc (|
                core.result.Result.Ok
                  (core.result.Result.Ok
                    (M.call (|(ltac:(M.get_method (fun ℐ =>
                        core.convert.From.from
                          (Self := constructors_return_value.AccountId.t)
                          (T := array u8.t)
                          (Trait := ℐ)))
                      (repeat ((Integer.of_Z 0) : u8.t) 32))
                    |)))
              |)
            else
              M.alloc (|
                core.result.Result.Err
                  constructors_return_value.LangError.CouldNotReadInput
              |)
          |) in
        M.alloc (|
          never_to_any (|
            M.call (|(constructors_return_value.return_value
              (M.call (|(constructors_return_value.ReturnFlags.t::["new_with_reverted"]
                true)
              |))
              (borrow value))
            |)
          |)
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_try_revert_new :
    Notations.DoubleColon Self "try_revert_new" := {
    Notations.double_colon := try_revert_new;
  }.
  
  (*
      pub fn get_value(&self) -> bool {
          self.value
      }
  *)
  Definition get_value (self : ref Self) : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        constructors_return_value.ConstructorsReturnValue.Get_value
          (deref (M.read (| self |)))
      |)
    )).
  
  Global Instance AssociatedFunction_get_value :
    Notations.DoubleColon Self "get_value" := {
    Notations.double_colon := get_value;
  }.
End Impl_constructors_return_value_ConstructorsReturnValue_t.
End Impl_constructors_return_value_ConstructorsReturnValue_t.
