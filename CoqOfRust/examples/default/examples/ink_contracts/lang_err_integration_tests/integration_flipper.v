(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Flipper.
Section Flipper.
  Record t : Set := {
    value : bool.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End Flipper.
End Flipper.

Module  FlipperError.
Section FlipperError.
  Inductive t : Set := Build.
End FlipperError.
End FlipperError.

Module  Impl_core_fmt_Debug_for_integration_flipper_FlipperError_t.
Section Impl_core_fmt_Debug_for_integration_flipper_FlipperError_t.
  Definition Self : Set := integration_flipper.FlipperError.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["write_str"]
        (M.read (| f |))
        (M.read (| mk_str "FlipperError" |)))
      |)
    ) : ltac:(core.fmt.Result))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_integration_flipper_FlipperError_t.
End Impl_core_fmt_Debug_for_integration_flipper_FlipperError_t.

Module  Impl_integration_flipper_Flipper_t.
Section Impl_integration_flipper_Flipper_t.
  Definition Self : Set := integration_flipper.Flipper.t.
  
  (*
      pub fn new(init_value: bool) -> Self {
          Self { value: init_value }
      }
  *)
  Definition new (init_value : bool.t) : M Self :=
    ltac:(M.monadic ((
      let init_value := M.alloc (| init_value |) in
      {| integration_flipper.Flipper.value := M.read (| init_value |);
      |} : integration_flipper.Flipper.t
    ) : Self)).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn new_default() -> Self {
          Self::new(Default::default())
      }
  *)
  Definition new_default : M Self :=
    ltac:(M.monadic ((
      M.call (|(integration_flipper.Flipper.t::["new"]
        (M.call (|ltac:(M.get_method (fun ℐ =>
          core.default.Default.default (Self := bool.t) (Trait := ℐ)))
        |)))
      |)
    ) : Self)).
  
  Global Instance AssociatedFunction_new_default :
    Notations.DoubleColon Self "new_default" := {
    Notations.double_colon := new_default;
  }.
  
  (*
      pub fn try_new(succeed: bool) -> Result<Self, FlipperError> {
          if succeed {
              Ok(Self::new(true))
          } else {
              Err(FlipperError)
          }
      }
  *)
  Definition try_new
      (succeed : bool.t)
      : M (core.result.Result.t Self integration_flipper.FlipperError.t) :=
    ltac:(M.monadic ((
      let succeed := M.alloc (| succeed |) in
      M.read (|
        if M.read (| use succeed |) then
          M.alloc (|
            core.result.Result.Ok
              (M.call (|(integration_flipper.Flipper.t::["new"] true) |))
          |)
        else
          M.alloc (|
            core.result.Result.Err integration_flipper.FlipperError.Build
          |)
      |)
    ) : core.result.Result.t Self integration_flipper.FlipperError.t)).
  
  Global Instance AssociatedFunction_try_new :
    Notations.DoubleColon Self "try_new" := {
    Notations.double_colon := try_new;
  }.
  
  (*
      pub fn flip(&mut self) {
          self.value = !self.value;
      }
  *)
  Definition flip (self : mut_ref Self) : M unit :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        let _ : M.Val unit :=
          assign (|
            integration_flipper.Flipper.Get_value (deref (M.read (| self |))),
            UnOp.not
              (M.read (|
                integration_flipper.Flipper.Get_value
                  (deref (M.read (| self |)))
              |))
          |) in
        M.alloc (| tt |)
      |)
    ) : unit)).
  
  Global Instance AssociatedFunction_flip :
    Notations.DoubleColon Self "flip" := {
    Notations.double_colon := flip;
  }.
  
  (*
      pub fn get(&self) -> bool {
          self.value
      }
  *)
  Definition get (self : ref Self) : M bool.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        integration_flipper.Flipper.Get_value (deref (M.read (| self |)))
      |)
    ) : bool.t)).
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
  
  (*
      pub fn err_flip(&mut self) -> Result<(), ()> {
          self.flip();
          Err(())
      }
  *)
  Definition err_flip
      (self : mut_ref Self)
      : M (core.result.Result.t unit unit) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(integration_flipper.Flipper.t::["flip"]
              (M.read (| self |)))
            |)
          |) in
        M.alloc (| core.result.Result.Err tt |)
      |)
    ) : core.result.Result.t unit unit)).
  
  Global Instance AssociatedFunction_err_flip :
    Notations.DoubleColon Self "err_flip" := {
    Notations.double_colon := err_flip;
  }.
End Impl_integration_flipper_Flipper_t.
End Impl_integration_flipper_Flipper_t.
