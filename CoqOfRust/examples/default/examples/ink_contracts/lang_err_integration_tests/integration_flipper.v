(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructRecord
  {
    name := "Flipper";
    ty_params := [];
    fields := [ ("value", Ty.path "bool") ];
  } *)

(* StructTuple
  {
    name := "FlipperError";
    ty_params := [];
  } *)

Module Impl_core_fmt_Debug_for_integration_flipper_FlipperError.
  Definition Self : Ty.t := Ty.path "integration_flipper::FlipperError".
  
  (* Debug *)
  Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 := M.get_associated_function (Ty.path "core::fmt::Formatter") "write_str" [] in
      let* α1 := M.read f in
      let* α2 := M.read (mk_str "FlipperError") in
      M.call_closure α0 [ α1; α2 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_integration_flipper_FlipperError.

Module Impl_integration_flipper_Flipper.
  Definition Self : Ty.t := Ty.path "integration_flipper::Flipper".
  
  (*
      pub fn new(init_value: bool) -> Self {
          Self { value: init_value }
      }
  *)
  Definition new (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ init_value ] =>
      let* init_value := M.alloc init_value in
      let* α0 := M.read init_value in
      M.pure (Value.StructRecord "integration_flipper::Flipper" [ ("value", α0) ])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  
  (*
      pub fn new_default() -> Self {
          Self::new(Default::default())
      }
  *)
  Definition new_default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 := M.get_associated_function (Ty.path "integration_flipper::Flipper") "new" [] in
      let* α1 := M.get_trait_method "core::default::Default" (Ty.path "bool") [] "default" [] in
      let* α2 := M.call_closure α1 [] in
      M.call_closure α0 [ α2 ]
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new_default : M.IsAssociatedFunction Self "new_default" new_default.
  
  (*
      pub fn try_new(succeed: bool) -> Result<Self, FlipperError> {
          if succeed {
              Ok(Self::new(true))
          } else {
              Err(FlipperError)
          }
      }
  *)
  Definition try_new (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ succeed ] =>
      let* succeed := M.alloc succeed in
      let* α0 := M.alloc (Value.Tuple []) in
      let* α1 :=
        M.match_operator
          α0
          [
            fun γ =>
              let γ := M.use succeed in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 :=
                M.get_associated_function (Ty.path "integration_flipper::Flipper") "new" [] in
              let* α1 := M.call_closure α0 [ Value.Bool true ] in
              M.alloc (Value.StructTuple "core::result::Result::Ok" [ α1 ]);
            fun γ =>
              M.alloc
                (Value.StructTuple
                  "core::result::Result::Err"
                  [ Value.StructTuple "integration_flipper::FlipperError" [] ])
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_try_new : M.IsAssociatedFunction Self "try_new" try_new.
  
  (*
      pub fn flip(&mut self) {
          self.value = !self.value;
      }
  *)
  Definition flip (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* α0 := M.read self in
        let* α1 := M.read self in
        let* α2 := M.read (M.get_struct_record_field α1 "integration_flipper::Flipper" "value") in
        M.assign
          (M.get_struct_record_field α0 "integration_flipper::Flipper" "value")
          (UnOp.Pure.not α2) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_flip : M.IsAssociatedFunction Self "flip" flip.
  
  (*
      pub fn get(&self) -> bool {
          self.value
      }
  *)
  Definition get (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (M.get_struct_record_field α0 "integration_flipper::Flipper" "value")
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_get : M.IsAssociatedFunction Self "get" get.
  
  (*
      pub fn err_flip(&mut self) -> Result<(), ()> {
          self.flip();
          Err(())
      }
  *)
  Definition err_flip (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* α0 := M.get_associated_function (Ty.path "integration_flipper::Flipper") "flip" [] in
        let* α1 := M.read self in
        let* α2 := M.call_closure α0 [ α1 ] in
        M.alloc α2 in
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Err" [ Value.Tuple [] ]) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_err_flip : M.IsAssociatedFunction Self "err_flip" err_flip.
End Impl_integration_flipper_Flipper.
