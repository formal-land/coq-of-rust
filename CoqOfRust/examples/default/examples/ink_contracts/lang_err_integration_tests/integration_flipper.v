(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Flipper.
Section Flipper.
  Record t : Set := {
    value : bool.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End Flipper.
End Flipper.

Module  FlipperError.
Section FlipperError.
  Inductive t : Set := Build.
End FlipperError.
End FlipperError.

Module  Impl_core_fmt_Debug_for_integration_flipper_FlipperError_t.
Section Impl_core_fmt_Debug_for_integration_flipper_FlipperError_t.
  Definition Self : Set := integration_flipper.FlipperError.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "FlipperError") in
    M.call (impl core.fmt.Formatter.t "write_str" α0 α1).
  
  Axiom fmt_is_impl : impl Self "fmt" = fmt.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_integration_flipper_FlipperError_t.
End Impl_core_fmt_Debug_for_integration_flipper_FlipperError_t.

Module  Impl_integration_flipper_Flipper_t.
Section Impl_integration_flipper_Flipper_t.
  Definition Self : Set := integration_flipper.Flipper.t.
  
  (*
      pub fn new(init_value: bool) -> Self {
          Self { value: init_value }
      }
  *)
  Definition new (init_value : bool.t) : M Self :=
    let* init_value := M.alloc init_value in
    let* α0 : bool.t := M.read init_value in
    M.pure {| integration_flipper.Flipper.value := α0; |}.
  
  Axiom new_is_impl : impl Self "new" = new.
  
  (*
      pub fn new_default() -> Self {
          Self::new(Default::default())
      }
  *)
  Definition new_default : M Self :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.default.Default.default (Self := bool.t) (Trait := ℐ))) in
    let* α1 : bool.t := M.call α0 in
    M.call (impl integration_flipper.Flipper.t "new" α1).
  
  Axiom new_default_is_impl : impl Self "new_default" = new_default.
  
  (*
      pub fn try_new(succeed: bool) -> Result<Self, FlipperError> {
          if succeed {
              Ok(Self::new(true))
          } else {
              Err(FlipperError)
          }
      }
  *)
  Definition try_new
      (succeed : bool.t)
      : M (core.result.Result.t Self integration_flipper.FlipperError.t) :=
    let* succeed := M.alloc succeed in
    let* α0 : bool.t := M.read (use succeed) in
    let* α1 :
        M.Val
          (core.result.Result.t
            integration_flipper.Flipper.t
            integration_flipper.FlipperError.t) :=
      if α0 then
        let* α0 : integration_flipper.Flipper.t :=
          M.call (impl integration_flipper.Flipper.t "new" true) in
        M.alloc (core.result.Result.Ok α0)
      else
        M.alloc
          (core.result.Result.Err integration_flipper.FlipperError.Build) in
    M.read α1.
  
  Axiom try_new_is_impl : impl Self "try_new" = try_new.
  
  (*
      pub fn flip(&mut self) {
          self.value = !self.value;
      }
  *)
  Definition flip (self : mut_ref Self) : M unit :=
    let* self := M.alloc self in
    let* _ : M.Val unit :=
      let* α0 : mut_ref integration_flipper.Flipper.t := M.read self in
      let* α1 : mut_ref integration_flipper.Flipper.t := M.read self in
      let* α2 : bool.t :=
        M.read (integration_flipper.Flipper.Get_value (deref α1)) in
      assign (integration_flipper.Flipper.Get_value (deref α0)) (UnOp.not α2) in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Axiom flip_is_impl : impl Self "flip" = flip.
  
  (*
      pub fn get(&self) -> bool {
          self.value
      }
  *)
  Definition get (self : ref Self) : M bool.t :=
    let* self := M.alloc self in
    let* α0 : ref integration_flipper.Flipper.t := M.read self in
    M.read (integration_flipper.Flipper.Get_value (deref α0)).
  
  Axiom get_is_impl : impl Self "get" = get.
  
  (*
      pub fn err_flip(&mut self) -> Result<(), ()> {
          self.flip();
          Err(())
      }
  *)
  Definition err_flip
      (self : mut_ref Self)
      : M (core.result.Result.t unit unit) :=
    let* self := M.alloc self in
    let* _ : M.Val unit :=
      let* α0 : mut_ref integration_flipper.Flipper.t := M.read self in
      let* α1 : unit := M.call (impl integration_flipper.Flipper.t "flip" α0) in
      M.alloc α1 in
    let* α0 : M.Val (core.result.Result.t unit unit) :=
      M.alloc (core.result.Result.Err tt) in
    M.read α0.
  
  Axiom err_flip_is_impl : impl Self "err_flip" = err_flip.
End Impl_integration_flipper_Flipper_t.
End Impl_integration_flipper_Flipper_t.
