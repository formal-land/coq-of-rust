(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructRecord
  {
    name := "Mapping";
    ty_params := [ "K"; "V" ];
    fields :=
      [
        ("_key", Ty.apply (Ty.path "core::marker::PhantomData") [ K ] []);
        ("_value", Ty.apply (Ty.path "core::marker::PhantomData") [ V ] [])
      ];
  } *)

Module Impl_core_default_Default_for_mother_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t := Ty.apply (Ty.path "mother::Mapping") [ K; V ] [].
  
  (*
  Default
  *)
  Definition default (K V : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self K V in
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "core::marker::PhantomData") [ K ] [])
          []
          []
          "default"
          []
          [] in
      let* α1 := M.call_closure α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "core::marker::PhantomData") [ V ] [])
          []
          []
          "default"
          []
          [] in
      let* α3 := M.call_closure α2 [] in
      M.pure (Value.StructRecord "mother::Mapping" [ ("_key", α1); ("_value", α3) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    forall (K V : Ty.t),
    M.IsTraitInstance
      "core::default::Default"
      (Self K V)
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method (default K V)) ].
End Impl_core_default_Default_for_mother_Mapping_K_V.

Module Impl_mother_Mapping_K_V.
  Definition Self (K V : Ty.t) : Ty.t := Ty.apply (Ty.path "mother::Mapping") [ K; V ] [].
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition get (K V : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self K V in
    match τ, α with
    | [], [ self; _key ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_get :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "get" (get K V).
  
  (*
      fn insert(&mut self, _key: K, _value: V) {
          unimplemented!()
      }
  *)
  Definition insert (K V : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self K V in
    match τ, α with
    | [], [ self; _key; _value ] =>
      let* self := M.alloc self in
      let* _key := M.alloc _key in
      let* _value := M.alloc _value in
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_insert :
    forall (K V : Ty.t),
    M.IsAssociatedFunction (Self K V) "insert" (insert K V).
End Impl_mother_Mapping_K_V.

(* StructTuple
  {
    name := "AccountId";
    ty_params := [];
    fields := [ Ty.path "u128" ];
  } *)

Module Impl_core_default_Default_for_mother_AccountId.
  Definition Self : Ty.t := Ty.path "mother::AccountId".
  
  (*
  Default
  *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method "core::default::Default" (Ty.path "u128") [] [] "default" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.pure (Value.StructTuple "mother::AccountId" [ α1 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_mother_AccountId.

Module Impl_core_clone_Clone_for_mother_AccountId.
  Definition Self : Ty.t := Ty.path "mother::AccountId".
  
  (*
  Clone
  *)
  Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.match_operator Value.DeclaredButUndefined [ fun γ => M.read self ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_mother_AccountId.

Module Impl_core_marker_Copy_for_mother_AccountId.
  Definition Self : Ty.t := Ty.path "mother::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance "core::marker::Copy" Self (* Trait polymorphic types *) [] (* Instance *) [].
End Impl_core_marker_Copy_for_mother_AccountId.

Module Impl_core_marker_StructuralPartialEq_for_mother_AccountId.
  Definition Self : Ty.t := Ty.path "mother::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_AccountId.

Module Impl_core_cmp_PartialEq_for_mother_AccountId.
  Definition Self : Ty.t := Ty.path "mother::AccountId".
  
  (*
  PartialEq
  *)
  Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 := M.read self in
      let* α1 := M.read (M.get_struct_tuple_field α0 "mother::AccountId" 0) in
      let* α2 := M.read other in
      let* α3 := M.read (M.get_struct_tuple_field α2 "mother::AccountId" 0) in
      M.pure (BinOp.Pure.eq α1 α3)
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_mother_AccountId.

Module Impl_core_marker_StructuralEq_for_mother_AccountId.
  Definition Self : Ty.t := Ty.path "mother::AccountId".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralEq_for_mother_AccountId.

Module Impl_core_cmp_Eq_for_mother_AccountId.
  Definition Self : Ty.t := Ty.path "mother::AccountId".
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.match_operator Value.DeclaredButUndefined [ fun γ => M.alloc (Value.Tuple []) ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
End Impl_core_cmp_Eq_for_mother_AccountId.

Axiom Balance : (Ty.path "mother::Balance") = (Ty.path "u128").

Axiom BlockNumber : (Ty.path "mother::BlockNumber") = (Ty.path "u32").

Axiom Hash :
  (Ty.path "mother::Hash") =
    (Ty.apply (Ty.path "array") [ Ty.path "u8" ] [ Value.Integer Integer.Usize 32 ]).

(* StructRecord
  {
    name := "Env";
    ty_params := [];
    fields := [ ("caller", Ty.path "mother::AccountId") ];
  } *)

(* StructTuple
  {
    name := "Bids";
    ty_params := [];
    fields :=
      [
        Ty.apply
          (Ty.path "alloc::vec::Vec")
          [
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.tuple [ Ty.path "mother::AccountId"; Ty.path "u128" ] ]
                  [];
                Ty.path "alloc::alloc::Global"
              ]
              [];
            Ty.path "alloc::alloc::Global"
          ]
          []
      ];
  } *)

Module Impl_core_default_Default_for_mother_Bids.
  Definition Self : Ty.t := Ty.path "mother::Bids".
  
  (*
  Default
  *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply
            (Ty.path "alloc::vec::Vec")
            [
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    [ Ty.tuple [ Ty.path "mother::AccountId"; Ty.path "u128" ] ]
                    [];
                  Ty.path "alloc::alloc::Global"
                ]
                [];
              Ty.path "alloc::alloc::Global"
            ]
            [])
          []
          []
          "default"
          []
          [] in
      let* α1 := M.call_closure α0 [] in
      M.pure (Value.StructTuple "mother::Bids" [ α1 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_mother_Bids.

Module Impl_core_marker_StructuralPartialEq_for_mother_Bids.
  Definition Self : Ty.t := Ty.path "mother::Bids".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_Bids.

Module Impl_core_cmp_PartialEq_for_mother_Bids.
  Definition Self : Ty.t := Ty.path "mother::Bids".
  
  (*
  PartialEq
  *)
  Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 :=
        M.get_trait_method
          "core::cmp::PartialEq"
          (Ty.apply
            (Ty.path "alloc::vec::Vec")
            [
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    [ Ty.tuple [ Ty.path "mother::AccountId"; Ty.path "u128" ] ]
                    [];
                  Ty.path "alloc::alloc::Global"
                ]
                [];
              Ty.path "alloc::alloc::Global"
            ]
            [])
          [
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      [ Ty.tuple [ Ty.path "mother::AccountId"; Ty.path "u128" ] ]
                      [];
                    Ty.path "alloc::alloc::Global"
                  ]
                  [];
                Ty.path "alloc::alloc::Global"
              ]
              []
          ]
          [ Value.Bool true ]
          "eq"
          []
          [] in
      let* α1 := M.read self in
      let* α2 := M.read other in
      M.call_closure
        α0
        [ M.get_struct_tuple_field α1 "mother::Bids" 0; M.get_struct_tuple_field α2 "mother::Bids" 0
        ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_mother_Bids.

Module Impl_core_marker_StructuralEq_for_mother_Bids.
  Definition Self : Ty.t := Ty.path "mother::Bids".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralEq_for_mother_Bids.

Module Impl_core_cmp_Eq_for_mother_Bids.
  Definition Self : Ty.t := Ty.path "mother::Bids".
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.match_operator Value.DeclaredButUndefined [ fun γ => M.alloc (Value.Tuple []) ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
End Impl_core_cmp_Eq_for_mother_Bids.

Module Impl_core_clone_Clone_for_mother_Bids.
  Definition Self : Ty.t := Ty.path "mother::Bids".
  
  (*
  Clone
  *)
  Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.get_trait_method
          "core::clone::Clone"
          (Ty.apply
            (Ty.path "alloc::vec::Vec")
            [
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    [ Ty.tuple [ Ty.path "mother::AccountId"; Ty.path "u128" ] ]
                    [];
                  Ty.path "alloc::alloc::Global"
                ]
                [];
              Ty.path "alloc::alloc::Global"
            ]
            [])
          []
          []
          "clone"
          []
          [] in
      let* α1 := M.read self in
      let* α2 := M.call_closure α0 [ M.get_struct_tuple_field α1 "mother::Bids" 0 ] in
      M.pure (Value.StructTuple "mother::Bids" [ α2 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_mother_Bids.

(* Enum Outline *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "NoWinner";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "WinnerDetected";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "PayoutCompleted";
        item := StructTuple [];
        discriminant := None;
      }
    ];
} *)

Module Impl_core_marker_StructuralPartialEq_for_mother_Outline.
  Definition Self : Ty.t := Ty.path "mother::Outline".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_Outline.

Module Impl_core_cmp_PartialEq_for_mother_Outline.
  Definition Self : Ty.t := Ty.path "mother::Outline".
  
  (*
  PartialEq
  *)
  Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag :=
        let* α0 :=
          M.get_function "core::intrinsics::discriminant_value" [ Ty.path "mother::Outline" ] [] in
        let* α1 := M.read self in
        let* α2 := M.call_closure α0 [ α1 ] in
        M.alloc α2 in
      let* __arg1_tag :=
        let* α0 :=
          M.get_function "core::intrinsics::discriminant_value" [ Ty.path "mother::Outline" ] [] in
        let* α1 := M.read other in
        let* α2 := M.call_closure α0 [ α1 ] in
        M.alloc α2 in
      let* α0 := M.read __self_tag in
      let* α1 := M.read __arg1_tag in
      let* α0 := M.alloc (BinOp.Pure.eq α0 α1) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_mother_Outline.

Module Impl_core_marker_StructuralEq_for_mother_Outline.
  Definition Self : Ty.t := Ty.path "mother::Outline".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralEq_for_mother_Outline.

Module Impl_core_cmp_Eq_for_mother_Outline.
  Definition Self : Ty.t := Ty.path "mother::Outline".
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      M.pure (Value.Tuple [])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
End Impl_core_cmp_Eq_for_mother_Outline.

Module Impl_core_clone_Clone_for_mother_Outline.
  Definition Self : Ty.t := Ty.path "mother::Outline".
  
  (*
  Clone
  *)
  Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.match_operator
          self
          [
            fun γ =>
              let* γ := M.read γ in
              M.alloc (Value.StructTuple "mother::Outline::NoWinner" []);
            fun γ =>
              let* γ := M.read γ in
              M.alloc (Value.StructTuple "mother::Outline::WinnerDetected" []);
            fun γ =>
              let* γ := M.read γ in
              M.alloc (Value.StructTuple "mother::Outline::PayoutCompleted" [])
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_mother_Outline.

(* Enum Status *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "NotStarted";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "OpeningPeriod";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "EndingPeriod";
        item := StructTuple [ Ty.path "u32" ];
        discriminant := None;
      };
      {
        name := "Ended";
        item := StructTuple [ Ty.path "mother::Outline" ];
        discriminant := None;
      };
      {
        name := "RfDelay";
        item := StructTuple [ Ty.path "u32" ];
        discriminant := None;
      }
    ];
} *)

Module Impl_core_marker_StructuralPartialEq_for_mother_Status.
  Definition Self : Ty.t := Ty.path "mother::Status".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_Status.

Module Impl_core_cmp_PartialEq_for_mother_Status.
  Definition Self : Ty.t := Ty.path "mother::Status".
  
  (*
  PartialEq
  *)
  Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag :=
        let* α0 :=
          M.get_function "core::intrinsics::discriminant_value" [ Ty.path "mother::Status" ] [] in
        let* α1 := M.read self in
        let* α2 := M.call_closure α0 [ α1 ] in
        M.alloc α2 in
      let* __arg1_tag :=
        let* α0 :=
          M.get_function "core::intrinsics::discriminant_value" [ Ty.path "mother::Status" ] [] in
        let* α1 := M.read other in
        let* α2 := M.call_closure α0 [ α1 ] in
        M.alloc α2 in
      let* α0 := M.read __self_tag in
      let* α1 := M.read __arg1_tag in
      let* α2 :=
        LogicalOp.and
          (BinOp.Pure.eq α0 α1)
          (let* α0 := M.read self in
          let* α1 := M.read other in
          let* α2 := M.alloc (Value.Tuple [ α0; α1 ]) in
          let* α3 :=
            M.match_operator
              α2
              [
                fun γ =>
                  let γ0_0 := M.get_tuple_field γ 0 in
                  let γ0_1 := M.get_tuple_field γ 1 in
                  let* γ0_0 := M.read γ0_0 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match γ0_0 "mother::Status::EndingPeriod" 0 in
                  let* __self_0 := M.alloc γ2_0 in
                  let* γ0_1 := M.read γ0_1 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match γ0_1 "mother::Status::EndingPeriod" 0 in
                  let* __arg1_0 := M.alloc γ2_0 in
                  let* α0 := M.read __self_0 in
                  let* α1 := M.read α0 in
                  let* α2 := M.read __arg1_0 in
                  let* α3 := M.read α2 in
                  M.alloc (BinOp.Pure.eq α1 α3);
                fun γ =>
                  let γ0_0 := M.get_tuple_field γ 0 in
                  let γ0_1 := M.get_tuple_field γ 1 in
                  let* γ0_0 := M.read γ0_0 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match γ0_0 "mother::Status::Ended" 0 in
                  let* __self_0 := M.alloc γ2_0 in
                  let* γ0_1 := M.read γ0_1 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match γ0_1 "mother::Status::Ended" 0 in
                  let* __arg1_0 := M.alloc γ2_0 in
                  let* α0 :=
                    M.get_trait_method
                      "core::cmp::PartialEq"
                      (Ty.path "mother::Outline")
                      [ Ty.path "mother::Outline" ]
                      [ Value.Bool true ]
                      "eq"
                      []
                      [] in
                  let* α1 := M.read __self_0 in
                  let* α2 := M.read __arg1_0 in
                  let* α3 := M.call_closure α0 [ α1; α2 ] in
                  M.alloc α3;
                fun γ =>
                  let γ0_0 := M.get_tuple_field γ 0 in
                  let γ0_1 := M.get_tuple_field γ 1 in
                  let* γ0_0 := M.read γ0_0 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match γ0_0 "mother::Status::RfDelay" 0 in
                  let* __self_0 := M.alloc γ2_0 in
                  let* γ0_1 := M.read γ0_1 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match γ0_1 "mother::Status::RfDelay" 0 in
                  let* __arg1_0 := M.alloc γ2_0 in
                  let* α0 := M.read __self_0 in
                  let* α1 := M.read α0 in
                  let* α2 := M.read __arg1_0 in
                  let* α3 := M.read α2 in
                  M.alloc (BinOp.Pure.eq α1 α3);
                fun γ => M.alloc (Value.Bool true)
              ] in
          M.read α3) in
      let* α0 := M.alloc α2 in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_mother_Status.

Module Impl_core_marker_StructuralEq_for_mother_Status.
  Definition Self : Ty.t := Ty.path "mother::Status".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralEq_for_mother_Status.

Module Impl_core_cmp_Eq_for_mother_Status.
  Definition Self : Ty.t := Ty.path "mother::Status".
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.match_operator
          Value.DeclaredButUndefined
          [
            fun γ =>
              M.match_operator Value.DeclaredButUndefined [ fun γ => M.alloc (Value.Tuple []) ]
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
End Impl_core_cmp_Eq_for_mother_Status.

Module Impl_core_clone_Clone_for_mother_Status.
  Definition Self : Ty.t := Ty.path "mother::Status".
  
  (*
  Clone
  *)
  Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.match_operator
          self
          [
            fun γ =>
              let* γ := M.read γ in
              M.alloc (Value.StructTuple "mother::Status::NotStarted" []);
            fun γ =>
              let* γ := M.read γ in
              M.alloc (Value.StructTuple "mother::Status::OpeningPeriod" []);
            fun γ =>
              let* γ := M.read γ in
              let* γ1_0 :=
                M.get_struct_tuple_field_or_break_match γ "mother::Status::EndingPeriod" 0 in
              let* __self_0 := M.alloc γ1_0 in
              let* α0 :=
                M.get_trait_method "core::clone::Clone" (Ty.path "u32") [] [] "clone" [] [] in
              let* α1 := M.read __self_0 in
              let* α2 := M.call_closure α0 [ α1 ] in
              M.alloc (Value.StructTuple "mother::Status::EndingPeriod" [ α2 ]);
            fun γ =>
              let* γ := M.read γ in
              let* γ1_0 := M.get_struct_tuple_field_or_break_match γ "mother::Status::Ended" 0 in
              let* __self_0 := M.alloc γ1_0 in
              let* α0 :=
                M.get_trait_method
                  "core::clone::Clone"
                  (Ty.path "mother::Outline")
                  []
                  []
                  "clone"
                  []
                  [] in
              let* α1 := M.read __self_0 in
              let* α2 := M.call_closure α0 [ α1 ] in
              M.alloc (Value.StructTuple "mother::Status::Ended" [ α2 ]);
            fun γ =>
              let* γ := M.read γ in
              let* γ1_0 := M.get_struct_tuple_field_or_break_match γ "mother::Status::RfDelay" 0 in
              let* __self_0 := M.alloc γ1_0 in
              let* α0 :=
                M.get_trait_method "core::clone::Clone" (Ty.path "u32") [] [] "clone" [] [] in
              let* α1 := M.read __self_0 in
              let* α2 := M.call_closure α0 [ α1 ] in
              M.alloc (Value.StructTuple "mother::Status::RfDelay" [ α2 ])
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_mother_Status.

(* StructRecord
  {
    name := "Auction";
    ty_params := [];
    fields :=
      [
        ("name", Ty.path "alloc::string::String");
        ("subject", Ty.apply (Ty.path "array") [ Ty.path "u8" ] [ Value.Integer Integer.Usize 32 ]);
        ("bids", Ty.path "mother::Bids");
        ("terms", Ty.apply (Ty.path "array") [ Ty.path "u32" ] [ Value.Integer Integer.Usize 3 ]);
        ("status", Ty.path "mother::Status");
        ("finalized", Ty.path "bool");
        ("vector",
          Ty.apply (Ty.path "alloc::vec::Vec") [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ] [])
      ];
  } *)

Module Impl_core_marker_StructuralPartialEq_for_mother_Auction.
  Definition Self : Ty.t := Ty.path "mother::Auction".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_Auction.

Module Impl_core_cmp_PartialEq_for_mother_Auction.
  Definition Self : Ty.t := Ty.path "mother::Auction".
  
  (*
  PartialEq
  *)
  Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 :=
        M.get_trait_method
          "core::cmp::PartialEq"
          (Ty.path "alloc::string::String")
          [ Ty.path "alloc::string::String" ]
          [ Value.Bool true ]
          "eq"
          []
          [] in
      let* α1 := M.read self in
      let* α2 := M.read other in
      let* α3 :=
        M.call_closure
          α0
          [
            M.get_struct_record_field α1 "mother::Auction" "name";
            M.get_struct_record_field α2 "mother::Auction" "name"
          ] in
      let* α4 :=
        LogicalOp.and
          α3
          (let* α0 :=
            M.get_trait_method
              "core::cmp::PartialEq"
              (Ty.apply (Ty.path "array") [ Ty.path "u8" ] [ Value.Integer Integer.Usize 32 ])
              [ Ty.apply (Ty.path "array") [ Ty.path "u8" ] [ Value.Integer Integer.Usize 32 ] ]
              [ Value.Bool true ]
              "eq"
              []
              [] in
          let* α1 := M.read self in
          let* α2 := M.read other in
          M.call_closure
            α0
            [
              M.get_struct_record_field α1 "mother::Auction" "subject";
              M.get_struct_record_field α2 "mother::Auction" "subject"
            ]) in
      let* α5 :=
        LogicalOp.and
          α4
          (let* α0 :=
            M.get_trait_method
              "core::cmp::PartialEq"
              (Ty.path "mother::Bids")
              [ Ty.path "mother::Bids" ]
              [ Value.Bool true ]
              "eq"
              []
              [] in
          let* α1 := M.read self in
          let* α2 := M.read other in
          M.call_closure
            α0
            [
              M.get_struct_record_field α1 "mother::Auction" "bids";
              M.get_struct_record_field α2 "mother::Auction" "bids"
            ]) in
      let* α6 :=
        LogicalOp.and
          α5
          (let* α0 :=
            M.get_trait_method
              "core::cmp::PartialEq"
              (Ty.apply (Ty.path "array") [ Ty.path "u32" ] [ Value.Integer Integer.Usize 3 ])
              [ Ty.apply (Ty.path "array") [ Ty.path "u32" ] [ Value.Integer Integer.Usize 3 ] ]
              [ Value.Bool true ]
              "eq"
              []
              [] in
          let* α1 := M.read self in
          let* α2 := M.read other in
          M.call_closure
            α0
            [
              M.get_struct_record_field α1 "mother::Auction" "terms";
              M.get_struct_record_field α2 "mother::Auction" "terms"
            ]) in
      let* α7 :=
        LogicalOp.and
          α6
          (let* α0 :=
            M.get_trait_method
              "core::cmp::PartialEq"
              (Ty.path "mother::Status")
              [ Ty.path "mother::Status" ]
              [ Value.Bool true ]
              "eq"
              []
              [] in
          let* α1 := M.read self in
          let* α2 := M.read other in
          M.call_closure
            α0
            [
              M.get_struct_record_field α1 "mother::Auction" "status";
              M.get_struct_record_field α2 "mother::Auction" "status"
            ]) in
      let* α8 :=
        LogicalOp.and
          α7
          (let* α0 := M.read self in
          let* α1 := M.read (M.get_struct_record_field α0 "mother::Auction" "finalized") in
          let* α2 := M.read other in
          let* α3 := M.read (M.get_struct_record_field α2 "mother::Auction" "finalized") in
          M.pure (BinOp.Pure.eq α1 α3)) in
      LogicalOp.and
        α8
        (let* α0 :=
          M.get_trait_method
            "core::cmp::PartialEq"
            (Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
              [])
            [
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                []
            ]
            [ Value.Bool true ]
            "eq"
            []
            [] in
        let* α1 := M.read self in
        let* α2 := M.read other in
        M.call_closure
          α0
          [
            M.get_struct_record_field α1 "mother::Auction" "vector";
            M.get_struct_record_field α2 "mother::Auction" "vector"
          ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_mother_Auction.

Module Impl_core_marker_StructuralEq_for_mother_Auction.
  Definition Self : Ty.t := Ty.path "mother::Auction".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralEq_for_mother_Auction.

Module Impl_core_cmp_Eq_for_mother_Auction.
  Definition Self : Ty.t := Ty.path "mother::Auction".
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.match_operator
          Value.DeclaredButUndefined
          [
            fun γ =>
              M.match_operator
                Value.DeclaredButUndefined
                [
                  fun γ =>
                    M.match_operator
                      Value.DeclaredButUndefined
                      [
                        fun γ =>
                          M.match_operator
                            Value.DeclaredButUndefined
                            [
                              fun γ =>
                                M.match_operator
                                  Value.DeclaredButUndefined
                                  [
                                    fun γ =>
                                      M.match_operator
                                        Value.DeclaredButUndefined
                                        [
                                          fun γ =>
                                            M.match_operator
                                              Value.DeclaredButUndefined
                                              [ fun γ => M.alloc (Value.Tuple []) ]
                                        ]
                                  ]
                            ]
                      ]
                ]
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
End Impl_core_cmp_Eq_for_mother_Auction.

Module Impl_core_clone_Clone_for_mother_Auction.
  Definition Self : Ty.t := Ty.path "mother::Auction".
  
  (*
  Clone
  *)
  Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.get_trait_method
          "core::clone::Clone"
          (Ty.path "alloc::string::String")
          []
          []
          "clone"
          []
          [] in
      let* α1 := M.read self in
      let* α2 := M.call_closure α0 [ M.get_struct_record_field α1 "mother::Auction" "name" ] in
      let* α3 :=
        M.get_trait_method
          "core::clone::Clone"
          (Ty.apply (Ty.path "array") [ Ty.path "u8" ] [ Value.Integer Integer.Usize 32 ])
          []
          []
          "clone"
          []
          [] in
      let* α4 := M.read self in
      let* α5 := M.call_closure α3 [ M.get_struct_record_field α4 "mother::Auction" "subject" ] in
      let* α6 :=
        M.get_trait_method "core::clone::Clone" (Ty.path "mother::Bids") [] [] "clone" [] [] in
      let* α7 := M.read self in
      let* α8 := M.call_closure α6 [ M.get_struct_record_field α7 "mother::Auction" "bids" ] in
      let* α9 :=
        M.get_trait_method
          "core::clone::Clone"
          (Ty.apply (Ty.path "array") [ Ty.path "u32" ] [ Value.Integer Integer.Usize 3 ])
          []
          []
          "clone"
          []
          [] in
      let* α10 := M.read self in
      let* α11 := M.call_closure α9 [ M.get_struct_record_field α10 "mother::Auction" "terms" ] in
      let* α12 :=
        M.get_trait_method "core::clone::Clone" (Ty.path "mother::Status") [] [] "clone" [] [] in
      let* α13 := M.read self in
      let* α14 := M.call_closure α12 [ M.get_struct_record_field α13 "mother::Auction" "status" ] in
      let* α15 := M.get_trait_method "core::clone::Clone" (Ty.path "bool") [] [] "clone" [] [] in
      let* α16 := M.read self in
      let* α17 :=
        M.call_closure α15 [ M.get_struct_record_field α16 "mother::Auction" "finalized" ] in
      let* α18 :=
        M.get_trait_method
          "core::clone::Clone"
          (Ty.apply (Ty.path "alloc::vec::Vec") [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ] [])
          []
          []
          "clone"
          []
          [] in
      let* α19 := M.read self in
      let* α20 := M.call_closure α18 [ M.get_struct_record_field α19 "mother::Auction" "vector" ] in
      M.pure
        (Value.StructRecord
          "mother::Auction"
          [
            ("name", α2);
            ("subject", α5);
            ("bids", α8);
            ("terms", α11);
            ("status", α14);
            ("finalized", α17);
            ("vector", α20)
          ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_mother_Auction.

Module Impl_core_default_Default_for_mother_Auction.
  Definition Self : Ty.t := Ty.path "mother::Auction".
  
  (*
      fn default() -> Auction {
          Auction {
              name: String::default(),
              subject: Hash::default(),
              bids: Bids::default(),
              terms: <[BlockNumber; 3]>::default(),
              status: Status::OpeningPeriod,
              finalized: false,
              vector: <Vec<u8>>::default(),
          }
      }
  *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.path "alloc::string::String")
          []
          []
          "default"
          []
          [] in
      let* α1 := M.call_closure α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "array") [ Ty.path "u8" ] [ Value.Integer Integer.Usize 32 ])
          []
          []
          "default"
          []
          [] in
      let* α3 := M.call_closure α2 [] in
      let* α4 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.path "mother::Bids")
          []
          []
          "default"
          []
          [] in
      let* α5 := M.call_closure α4 [] in
      let* α6 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "array") [ Ty.path "u32" ] [ Value.Integer Integer.Usize 3 ])
          []
          []
          "default"
          []
          [] in
      let* α7 := M.call_closure α6 [] in
      let* α8 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "alloc::vec::Vec") [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ] [])
          []
          []
          "default"
          []
          [] in
      let* α9 := M.call_closure α8 [] in
      M.pure
        (Value.StructRecord
          "mother::Auction"
          [
            ("name", α1);
            ("subject", α3);
            ("bids", α5);
            ("terms", α7);
            ("status", Value.StructTuple "mother::Status::OpeningPeriod" []);
            ("finalized", Value.Bool false);
            ("vector", α9)
          ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_mother_Auction.

(* Enum Failure *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "Revert";
        item := StructTuple [ Ty.path "alloc::string::String" ];
        discriminant := None;
      };
      {
        name := "Panic";
        item := StructTuple [];
        discriminant := None;
      }
    ];
} *)

Module Impl_core_marker_StructuralPartialEq_for_mother_Failure.
  Definition Self : Ty.t := Ty.path "mother::Failure".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralPartialEq_for_mother_Failure.

Module Impl_core_cmp_PartialEq_for_mother_Failure.
  Definition Self : Ty.t := Ty.path "mother::Failure".
  
  (*
  PartialEq
  *)
  Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* __self_tag :=
        let* α0 :=
          M.get_function "core::intrinsics::discriminant_value" [ Ty.path "mother::Failure" ] [] in
        let* α1 := M.read self in
        let* α2 := M.call_closure α0 [ α1 ] in
        M.alloc α2 in
      let* __arg1_tag :=
        let* α0 :=
          M.get_function "core::intrinsics::discriminant_value" [ Ty.path "mother::Failure" ] [] in
        let* α1 := M.read other in
        let* α2 := M.call_closure α0 [ α1 ] in
        M.alloc α2 in
      let* α0 := M.read __self_tag in
      let* α1 := M.read __arg1_tag in
      let* α2 :=
        LogicalOp.and
          (BinOp.Pure.eq α0 α1)
          (let* α0 := M.read self in
          let* α1 := M.read other in
          let* α2 := M.alloc (Value.Tuple [ α0; α1 ]) in
          let* α3 :=
            M.match_operator
              α2
              [
                fun γ =>
                  let γ0_0 := M.get_tuple_field γ 0 in
                  let γ0_1 := M.get_tuple_field γ 1 in
                  let* γ0_0 := M.read γ0_0 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match γ0_0 "mother::Failure::Revert" 0 in
                  let* __self_0 := M.alloc γ2_0 in
                  let* γ0_1 := M.read γ0_1 in
                  let* γ2_0 :=
                    M.get_struct_tuple_field_or_break_match γ0_1 "mother::Failure::Revert" 0 in
                  let* __arg1_0 := M.alloc γ2_0 in
                  let* α0 :=
                    M.get_trait_method
                      "core::cmp::PartialEq"
                      (Ty.path "alloc::string::String")
                      [ Ty.path "alloc::string::String" ]
                      [ Value.Bool true ]
                      "eq"
                      []
                      [] in
                  let* α1 := M.read __self_0 in
                  let* α2 := M.read __arg1_0 in
                  let* α3 := M.call_closure α0 [ α1; α2 ] in
                  M.alloc α3;
                fun γ => M.alloc (Value.Bool true)
              ] in
          M.read α3) in
      let* α0 := M.alloc α2 in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_mother_Failure.

Module Impl_core_marker_StructuralEq_for_mother_Failure.
  Definition Self : Ty.t := Ty.path "mother::Failure".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralEq_for_mother_Failure.

Module Impl_core_cmp_Eq_for_mother_Failure.
  Definition Self : Ty.t := Ty.path "mother::Failure".
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 :=
        M.match_operator Value.DeclaredButUndefined [ fun γ => M.alloc (Value.Tuple []) ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
End Impl_core_cmp_Eq_for_mother_Failure.

(* StructRecord
  {
    name := "AuctionEchoed";
    ty_params := [];
    fields := [ ("auction", Ty.path "mother::Auction") ];
  } *)

(* Enum Event *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "AuctionEchoed";
        item := StructTuple [ Ty.path "mother::AuctionEchoed" ];
        discriminant := None;
      }
    ];
} *)

Module Impl_mother_Env.
  Definition Self : Ty.t := Ty.path "mother::Env".
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (M.get_struct_record_field α0 "mother::Env" "caller")
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_caller : M.IsAssociatedFunction Self "caller" caller.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; _event ] =>
      let* self := M.alloc self in
      let* _event := M.alloc _event in
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_emit_event : M.IsAssociatedFunction Self "emit_event" emit_event.
End Impl_mother_Env.

(* StructRecord
  {
    name := "Mother";
    ty_params := [];
    fields :=
      [
        ("auction", Ty.path "mother::Auction");
        ("balances",
          Ty.apply (Ty.path "mother::Mapping") [ Ty.path "mother::AccountId"; Ty.path "u128" ] [])
      ];
  } *)

Module Impl_core_default_Default_for_mother_Mother.
  Definition Self : Ty.t := Ty.path "mother::Mother".
  
  (*
  Default
  *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.path "mother::Auction")
          []
          []
          "default"
          []
          [] in
      let* α1 := M.call_closure α0 [] in
      let* α2 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "mother::Mapping") [ Ty.path "mother::AccountId"; Ty.path "u128" ] [])
          []
          []
          "default"
          []
          [] in
      let* α3 := M.call_closure α2 [] in
      M.pure (Value.StructRecord "mother::Mother" [ ("auction", α1); ("balances", α3) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_mother_Mother.

Module Impl_mother_Mother.
  Definition Self : Ty.t := Ty.path "mother::Mother".
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 := M.get_function "core::panicking::panic" [] [ Value.Bool true ] in
      let* α1 := M.read (mk_str "not implemented") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.never_to_any α2
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_init_env : M.IsAssociatedFunction Self "init_env" init_env.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.get_associated_function (Ty.path "mother::Mother") "init_env" [] [] in
      M.call_closure α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_env : M.IsAssociatedFunction Self "env" env.
  
  (*
      pub fn new(auction: Auction) -> Self {
          Self {
              balances: Default::default(),
              auction,
          }
      }
  *)
  Definition new (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ auction ] =>
      let* auction := M.alloc auction in
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.apply (Ty.path "mother::Mapping") [ Ty.path "mother::AccountId"; Ty.path "u128" ] [])
          []
          []
          "default"
          []
          [] in
      let* α1 := M.call_closure α0 [] in
      let* α2 := M.read auction in
      M.pure (Value.StructRecord "mother::Mother" [ ("balances", α1); ("auction", α2) ])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  
  (*
      pub fn new_default() -> Self {
          Default::default()
      }
  *)
  Definition new_default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* α0 :=
        M.get_trait_method
          "core::default::Default"
          (Ty.path "mother::Mother")
          []
          []
          "default"
          []
          [] in
      M.call_closure α0 []
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new_default : M.IsAssociatedFunction Self "new_default" new_default.
  
  (*
      pub fn failed_new(fail: bool) -> Result<Self, Failure> {
          if fail {
              Err(Failure::Revert("Reverting instantiation".to_string()))
          } else {
              Ok(Default::default())
          }
      }
  *)
  Definition failed_new (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ fail ] =>
      let* fail := M.alloc fail in
      let* α0 := M.alloc (Value.Tuple []) in
      let* α1 :=
        M.match_operator
          α0
          [
            fun γ =>
              let γ := M.use fail in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 :=
                M.get_trait_method
                  "alloc::string::ToString"
                  (Ty.path "str")
                  []
                  []
                  "to_string"
                  []
                  [] in
              let* α1 := M.read (mk_str "Reverting instantiation") in
              let* α2 := M.call_closure α0 [ α1 ] in
              M.alloc
                (Value.StructTuple
                  "core::result::Result::Err"
                  [ Value.StructTuple "mother::Failure::Revert" [ α2 ] ]);
            fun γ =>
              let* α0 :=
                M.get_trait_method
                  "core::default::Default"
                  (Ty.path "mother::Mother")
                  []
                  []
                  "default"
                  []
                  [] in
              let* α1 := M.call_closure α0 [] in
              M.alloc (Value.StructTuple "core::result::Result::Ok" [ α1 ])
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_failed_new : M.IsAssociatedFunction Self "failed_new" failed_new.
  
  (*
      pub fn echo_auction(&mut self, auction: Auction) -> Auction {
          self.env().emit_event(Event::AuctionEchoed(AuctionEchoed {
              auction: auction.clone(),
          }));
          auction
      }
  *)
  Definition echo_auction (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; auction ] =>
      let* self := M.alloc self in
      let* auction := M.alloc auction in
      let* _ :=
        let* α0 := M.get_associated_function (Ty.path "mother::Env") "emit_event" [] [] in
        let* α1 := M.get_associated_function (Ty.path "mother::Mother") "env" [] [] in
        let* α2 := M.read self in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.alloc α3 in
        let* α5 :=
          M.get_trait_method "core::clone::Clone" (Ty.path "mother::Auction") [] [] "clone" [] [] in
        let* α6 := M.call_closure α5 [ auction ] in
        let* α7 :=
          M.call_closure
            α0
            [
              α4;
              Value.StructTuple
                "mother::Event::AuctionEchoed"
                [ Value.StructRecord "mother::AuctionEchoed" [ ("auction", α6) ] ]
            ] in
        M.alloc α7 in
      M.read auction
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_echo_auction : M.IsAssociatedFunction Self "echo_auction" echo_auction.
  
  (*
      pub fn revert_or_trap(&mut self, fail: Option<Failure>) -> Result<(), Failure> {
          match fail {
              Some(Failure::Revert(_)) => {
                  Err(Failure::Revert("Reverting on user demand!".to_string()))
              }
              Some(Failure::Panic) => {
                  panic!("Trapping on user demand!")
              }
              None => Ok(()),
          }
      }
  *)
  Definition revert_or_trap (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; fail ] =>
      let* self := M.alloc self in
      let* fail := M.alloc fail in
      let* α0 :=
        M.match_operator
          fail
          [
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match γ "core::option::Option::Some" 0 in
              let* γ1_0 :=
                M.get_struct_tuple_field_or_break_match γ0_0 "mother::Failure::Revert" 0 in
              let* α0 :=
                M.get_trait_method
                  "alloc::string::ToString"
                  (Ty.path "str")
                  []
                  []
                  "to_string"
                  []
                  [] in
              let* α1 := M.read (mk_str "Reverting on user demand!") in
              let* α2 := M.call_closure α0 [ α1 ] in
              M.alloc
                (Value.StructTuple
                  "core::result::Result::Err"
                  [ Value.StructTuple "mother::Failure::Revert" [ α2 ] ]);
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match γ "core::option::Option::Some" 0 in
              let* α0 :=
                M.get_function
                  "std::panicking::begin_panic"
                  [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ]
                  [] in
              let* α1 := M.read (mk_str "Trapping on user demand!") in
              let* α2 := M.call_closure α0 [ α1 ] in
              let* α3 := M.never_to_any α2 in
              M.alloc α3;
            fun γ => M.alloc (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ])
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_revert_or_trap :
    M.IsAssociatedFunction Self "revert_or_trap" revert_or_trap.
  
  (*
      pub fn debug_log(&mut self, _message: String) {
          println!("debug_log: {}", _message);
      }
  *)
  Definition debug_log (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; _message ] =>
      let* self := M.alloc self in
      let* _message := M.alloc _message in
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] [] in
          let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
          let* α5 :=
            (* Unsize *)
              let* α2 := M.read (mk_str "debug_log: ") in
              let* α3 := M.read (mk_str "
") in
              let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
              M.pure (M.pointer_coercion α4) in
          let* α9 :=
            (* Unsize *)
              let* α6 :=
                M.get_associated_function
                  (Ty.path "core::fmt::rt::Argument")
                  "new_display"
                  [ Ty.path "alloc::string::String" ]
                  [] in
              let* α7 := M.call_closure α6 [ _message ] in
              let* α8 := M.alloc (Value.Array [ α7 ]) in
              M.pure (M.pointer_coercion α8) in
          let* α10 := M.call_closure α1 [ α5; α9 ] in
          let* α11 := M.call_closure α0 [ α10 ] in
          M.alloc α11 in
        M.alloc (Value.Tuple []) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_debug_log : M.IsAssociatedFunction Self "debug_log" debug_log.
End Impl_mother_Mother.
