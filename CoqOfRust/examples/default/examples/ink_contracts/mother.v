(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Mapping.
Section Mapping.
  Context (K V : Set).
  
  Record t : Set := {
    _key : core.marker.PhantomData.t K;
    _value : core.marker.PhantomData.t V;
  }.
  
  Definition Get__key :=
    Ref.map (fun α => Some α.(_key)) (fun β α => Some (α <| _key := β |>)).
  Definition Get__value :=
    Ref.map (fun α => Some α.(_value)) (fun β α => Some (α <| _value := β |>)).
End Mapping.
End Mapping.

Module  Impl_core_default_Default_for_mother_Mapping_t_K_V.
Section Impl_core_default_Default_for_mother_Mapping_t_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := mother.Mapping.t K V.
  
  (*
  Default
  *)
  Definition default : M (mother.Mapping.t K V) :=
    ltac:(M.monadic (
      {|
        mother.Mapping._key :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default
              (Self := core.marker.PhantomData.t K)
              (Trait := ℐ)))
          |);
        mother.Mapping._value :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default
              (Self := core.marker.PhantomData.t V)
              (Trait := ℐ)))
          |);
      |} : mother.Mapping.t K V
    )).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_mother_Mapping_t_K_V.
End Impl_core_default_Default_for_mother_Mapping_t_K_V.

Module  Impl_mother_Mapping_t_K_V.
Section Impl_mother_Mapping_t_K_V.
  Context {K V : Set}.
  
  Definition Self : Set := mother.Mapping.t K V.
  
  (*
      fn get(&self, _key: &K) -> Option<V> {
          unimplemented!()
      }
  *)
  Definition get
      (self : ref Self)
      (_key : ref K)
      : M (core.option.Option.t V) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let _key := M.alloc (| _key |) in
      (never_to_any (B := core.option.Option.t V)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
  
  (*
      fn insert(&mut self, _key: K, _value: V) {
          unimplemented!()
      }
  *)
  Definition insert (self : mut_ref Self) (_key : K) (_value : V) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let _key := M.alloc (| _key |) in
      let _value := M.alloc (| _value |) in
      (never_to_any (B := unit)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_insert :
    Notations.DoubleColon Self "insert" := {
    Notations.double_colon := insert;
  }.
End Impl_mother_Mapping_t_K_V.
End Impl_mother_Mapping_t_K_V.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_mother_AccountId_t.
Section Impl_core_default_Default_for_mother_AccountId_t.
  Definition Self : Set := mother.AccountId.t.
  
  (*
  Default
  *)
  Definition default : M mother.AccountId.t :=
    ltac:(M.monadic (
      mother.AccountId.Build_t
        (M.call (|ltac:(M.get_method (fun ℐ =>
          core.default.Default.default (Self := u128.t) (Trait := ℐ)))
        |))
    )).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_mother_AccountId_t.
End Impl_core_default_Default_for_mother_AccountId_t.

Module  Impl_core_clone_Clone_for_mother_AccountId_t.
Section Impl_core_clone_Clone_for_mother_AccountId_t.
  Definition Self : Set := mother.AccountId.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M mother.AccountId.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.clone.AssertParamIsClone.t u128.t))
            [
              fun (γ : M.Val (core.clone.AssertParamIsClone.t u128.t)) =>
                (deref (M.read (| self |))) : M.Val mother.AccountId.t
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_mother_AccountId_t.
End Impl_core_clone_Clone_for_mother_AccountId_t.

Module  Impl_core_marker_Copy_for_mother_AccountId_t.
Section Impl_core_marker_Copy_for_mother_AccountId_t.
  Definition Self : Set := mother.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_mother_AccountId_t.
End Impl_core_marker_Copy_for_mother_AccountId_t.

Module  Impl_core_marker_StructuralPartialEq_for_mother_AccountId_t.
Section Impl_core_marker_StructuralPartialEq_for_mother_AccountId_t.
  Definition Self : Set := mother.AccountId.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_mother_AccountId_t.
End Impl_core_marker_StructuralPartialEq_for_mother_AccountId_t.

Module  Impl_core_cmp_PartialEq_for_mother_AccountId_t.
Section Impl_core_cmp_PartialEq_for_mother_AccountId_t.
  Definition Self : Set := mother.AccountId.t.
  
  (*
  PartialEq
  *)
  Definition eq (self : ref Self) (other : ref mother.AccountId.t) : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let other := M.alloc (| other |) in
      BinOp.Pure.eq
        (M.read (| mother.AccountId.Get_0 (deref (M.read (| self |))) |))
        (M.read (| mother.AccountId.Get_0 (deref (M.read (| other |))) |))
    )).
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_mother_AccountId_t.
End Impl_core_cmp_PartialEq_for_mother_AccountId_t.

Module  Impl_core_marker_StructuralEq_for_mother_AccountId_t.
Section Impl_core_marker_StructuralEq_for_mother_AccountId_t.
  Definition Self : Set := mother.AccountId.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_mother_AccountId_t.
End Impl_core_marker_StructuralEq_for_mother_AccountId_t.

Module  Impl_core_cmp_Eq_for_mother_AccountId_t.
Section Impl_core_cmp_Eq_for_mother_AccountId_t.
  Definition Self : Set := mother.AccountId.t.
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.cmp.AssertParamIsEq.t u128.t))
            [
              fun (γ : M.Val (core.cmp.AssertParamIsEq.t u128.t)) =>
                (M.alloc (| tt |)) : M.Val unit
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_mother_AccountId_t.
End Impl_core_cmp_Eq_for_mother_AccountId_t.

Ltac Balance := exact u128.t.

Ltac BlockNumber := exact u32.t.

Ltac Hash := exact (array u8.t).

Module  Env.
Section Env.
  Record t : Set := {
    caller : mother.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module  Bids.
Section Bids.
  Record t : Set := {
    x0 :
      alloc.vec.Vec.t
        (alloc.vec.Vec.t
          (core.option.Option.t (mother.AccountId.t * ltac:(mother.Balance)))
          alloc.vec.Vec.Default.A)
        alloc.vec.Vec.Default.A;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End Bids.
End Bids.

Module  Impl_core_default_Default_for_mother_Bids_t.
Section Impl_core_default_Default_for_mother_Bids_t.
  Definition Self : Set := mother.Bids.t.
  
  (*
  Default
  *)
  Definition default : M mother.Bids.t :=
    ltac:(M.monadic (
      mother.Bids.Build_t
        (M.call (|ltac:(M.get_method (fun ℐ =>
          core.default.Default.default
            (Self :=
              alloc.vec.Vec.t
                (alloc.vec.Vec.t
                  (core.option.Option.t (mother.AccountId.t * u128.t))
                  alloc.alloc.Global.t)
                alloc.alloc.Global.t)
            (Trait := ℐ)))
        |))
    )).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_mother_Bids_t.
End Impl_core_default_Default_for_mother_Bids_t.

Module  Impl_core_marker_StructuralPartialEq_for_mother_Bids_t.
Section Impl_core_marker_StructuralPartialEq_for_mother_Bids_t.
  Definition Self : Set := mother.Bids.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_mother_Bids_t.
End Impl_core_marker_StructuralPartialEq_for_mother_Bids_t.

Module  Impl_core_cmp_PartialEq_for_mother_Bids_t.
Section Impl_core_cmp_PartialEq_for_mother_Bids_t.
  Definition Self : Set := mother.Bids.t.
  
  (*
  PartialEq
  *)
  Definition eq (self : ref Self) (other : ref mother.Bids.t) : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let other := M.alloc (| other |) in
      M.call (|(ltac:(M.get_method (fun ℐ =>
          core.cmp.PartialEq.eq
            (Self :=
              alloc.vec.Vec.t
                (alloc.vec.Vec.t
                  (core.option.Option.t (mother.AccountId.t * u128.t))
                  alloc.alloc.Global.t)
                alloc.alloc.Global.t)
            (Rhs :=
              alloc.vec.Vec.t
                (alloc.vec.Vec.t
                  (core.option.Option.t (mother.AccountId.t * u128.t))
                  alloc.alloc.Global.t)
                alloc.alloc.Global.t)
            (Trait := ℐ)))
        (borrow (mother.Bids.Get_0 (deref (M.read (| self |)))))
        (borrow (mother.Bids.Get_0 (deref (M.read (| other |))))))
      |)
    )).
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_mother_Bids_t.
End Impl_core_cmp_PartialEq_for_mother_Bids_t.

Module  Impl_core_marker_StructuralEq_for_mother_Bids_t.
Section Impl_core_marker_StructuralEq_for_mother_Bids_t.
  Definition Self : Set := mother.Bids.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_mother_Bids_t.
End Impl_core_marker_StructuralEq_for_mother_Bids_t.

Module  Impl_core_cmp_Eq_for_mother_Bids_t.
Section Impl_core_cmp_Eq_for_mother_Bids_t.
  Definition Self : Set := mother.Bids.t.
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A :=
                core.cmp.AssertParamIsEq.t
                  (alloc.vec.Vec.t
                    (alloc.vec.Vec.t
                      (core.option.Option.t (mother.AccountId.t * u128.t))
                      alloc.alloc.Global.t)
                    alloc.alloc.Global.t)))
            [
              fun
                  (γ :
                    M.Val
                      (core.cmp.AssertParamIsEq.t
                        (alloc.vec.Vec.t
                          (alloc.vec.Vec.t
                            (core.option.Option.t (mother.AccountId.t * u128.t))
                            alloc.alloc.Global.t)
                          alloc.alloc.Global.t))) =>
                (M.alloc (| tt |)) : M.Val unit
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_mother_Bids_t.
End Impl_core_cmp_Eq_for_mother_Bids_t.

Module  Impl_core_clone_Clone_for_mother_Bids_t.
Section Impl_core_clone_Clone_for_mother_Bids_t.
  Definition Self : Set := mother.Bids.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M mother.Bids.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      mother.Bids.Build_t
        (M.call (|(ltac:(M.get_method (fun ℐ =>
            core.clone.Clone.clone
              (Self :=
                alloc.vec.Vec.t
                  (alloc.vec.Vec.t
                    (core.option.Option.t (mother.AccountId.t * u128.t))
                    alloc.alloc.Global.t)
                  alloc.alloc.Global.t)
              (Trait := ℐ)))
          (borrow (mother.Bids.Get_0 (deref (M.read (| self |))))))
        |))
    )).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_mother_Bids_t.
End Impl_core_clone_Clone_for_mother_Bids_t.

Module Outline.
  Inductive t : Set :=
  | NoWinner
  | WinnerDetected
  | PayoutCompleted.
End Outline.

Module  Impl_core_marker_StructuralPartialEq_for_mother_Outline_t.
Section Impl_core_marker_StructuralPartialEq_for_mother_Outline_t.
  Definition Self : Set := mother.Outline.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_mother_Outline_t.
End Impl_core_marker_StructuralPartialEq_for_mother_Outline_t.

Module  Impl_core_cmp_PartialEq_for_mother_Outline_t.
Section Impl_core_cmp_PartialEq_for_mother_Outline_t.
  Definition Self : Set := mother.Outline.t.
  
  (*
  PartialEq
  *)
  Definition eq (self : ref Self) (other : ref mother.Outline.t) : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let other := M.alloc (| other |) in
      M.read (|
        let __self_tag : M.Val isize.t :=
          M.alloc (|
            M.call (|(core.intrinsics.discriminant_value (M.read (| self |))) |)
          |) in
        let __arg1_tag : M.Val isize.t :=
          M.alloc (|
            M.call (|(core.intrinsics.discriminant_value (M.read (| other |)))
            |)
          |) in
        M.alloc (|
          BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_mother_Outline_t.
End Impl_core_cmp_PartialEq_for_mother_Outline_t.

Module  Impl_core_marker_StructuralEq_for_mother_Outline_t.
Section Impl_core_marker_StructuralEq_for_mother_Outline_t.
  Definition Self : Set := mother.Outline.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_mother_Outline_t.
End Impl_core_marker_StructuralEq_for_mother_Outline_t.

Module  Impl_core_cmp_Eq_for_mother_Outline_t.
Section Impl_core_cmp_Eq_for_mother_Outline_t.
  Definition Self : Set := mother.Outline.t.
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      tt
    )).
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_mother_Outline_t.
End Impl_core_cmp_Eq_for_mother_Outline_t.

Module  Impl_core_clone_Clone_for_mother_Outline_t.
Section Impl_core_clone_Clone_for_mother_Outline_t.
  Definition Self : Set := mother.Outline.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M mother.Outline.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            self
            [
              fun (γ : M.Val (ref mother.Outline.t)) =>
                (let γ := deref (M.read (| γ |)) in
                match M.read (| γ |) with
                | mother.Outline.NoWinner =>
                  M.alloc (| mother.Outline.NoWinner |)
                | _ => M.break_match(||)
                end) :
                M.Val mother.Outline.t;
              fun (γ : M.Val (ref mother.Outline.t)) =>
                (let γ := deref (M.read (| γ |)) in
                match M.read (| γ |) with
                | mother.Outline.WinnerDetected =>
                  M.alloc (| mother.Outline.WinnerDetected |)
                | _ => M.break_match(||)
                end) :
                M.Val mother.Outline.t;
              fun (γ : M.Val (ref mother.Outline.t)) =>
                (let γ := deref (M.read (| γ |)) in
                match M.read (| γ |) with
                | mother.Outline.PayoutCompleted =>
                  M.alloc (| mother.Outline.PayoutCompleted |)
                | _ => M.break_match(||)
                end) :
                M.Val mother.Outline.t
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_mother_Outline_t.
End Impl_core_clone_Clone_for_mother_Outline_t.

Module Status.
  Inductive t : Set :=
  | NotStarted
  | OpeningPeriod
  | EndingPeriod (_ : ltac:(mother.BlockNumber))
  | Ended (_ : mother.Outline.t)
  | RfDelay (_ : ltac:(mother.BlockNumber)).
  
  Definition Get_EndingPeriod_0 :=
    Ref.map
      (fun α => match α with | EndingPeriod α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | EndingPeriod _ => Some (EndingPeriod β) | _ => None end).
  
  Definition Get_Ended_0 :=
    Ref.map
      (fun α => match α with | Ended α0 => Some α0 | _ => None end)
      (fun β α => match α with | Ended _ => Some (Ended β) | _ => None end).
  
  Definition Get_RfDelay_0 :=
    Ref.map
      (fun α => match α with | RfDelay α0 => Some α0 | _ => None end)
      (fun β α => match α with | RfDelay _ => Some (RfDelay β) | _ => None end).
End Status.

Module  Impl_core_marker_StructuralPartialEq_for_mother_Status_t.
Section Impl_core_marker_StructuralPartialEq_for_mother_Status_t.
  Definition Self : Set := mother.Status.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_mother_Status_t.
End Impl_core_marker_StructuralPartialEq_for_mother_Status_t.

Module  Impl_core_cmp_PartialEq_for_mother_Status_t.
Section Impl_core_cmp_PartialEq_for_mother_Status_t.
  Definition Self : Set := mother.Status.t.
  
  (*
  PartialEq
  *)
  Definition eq (self : ref Self) (other : ref mother.Status.t) : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let other := M.alloc (| other |) in
      M.read (|
        let __self_tag : M.Val isize.t :=
          M.alloc (|
            M.call (|(core.intrinsics.discriminant_value (M.read (| self |))) |)
          |) in
        let __arg1_tag : M.Val isize.t :=
          M.alloc (|
            M.call (|(core.intrinsics.discriminant_value (M.read (| other |)))
            |)
          |) in
        M.alloc (|
          BinOp.Pure.and
            (BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)))
            (M.read (|
              ltac:
                (M.monadic_match_operator
                  (M.alloc (| (M.read (| self |), M.read (| other |)) |))
                  [
                    fun
                        (γ :
                          M.Val
                            ((ref mother.Status.t) * (ref mother.Status.t))) =>
                      match M.read (| γ |) with
                      | (_, _) =>
                        let γ0_0 := Tuple.Access.left γ in
                        let γ0_1 := Tuple.Access.right γ in
                        let γ0_0 := deref (M.read (| γ0_0 |)) in
                        match M.read (| γ0_0 |) with
                        | mother.Status.EndingPeriod _ =>
                          let γ2_0 := mother.Status.Get_EndingPeriod_0 γ0_0 in
                          let __self_0 := M.alloc (| borrow γ2_0 |) in
                          let γ0_1 := deref (M.read (| γ0_1 |)) in
                          match M.read (| γ0_1 |) with
                          | mother.Status.EndingPeriod _ =>
                            let γ2_0 := mother.Status.Get_EndingPeriod_0 γ0_1 in
                            let __arg1_0 := M.alloc (| borrow γ2_0 |) in
                            M.alloc (|
                              BinOp.Pure.eq
                                (M.read (| deref (M.read (| __self_0 |)) |))
                                (M.read (| deref (M.read (| __arg1_0 |)) |))
                            |)
                          | _ => M.break_match(||)
                          end
                        | _ => M.break_match(||)
                        end
                      end :
                      M.Val bool.t;
                    fun
                        (γ :
                          M.Val
                            ((ref mother.Status.t) * (ref mother.Status.t))) =>
                      match M.read (| γ |) with
                      | (_, _) =>
                        let γ0_0 := Tuple.Access.left γ in
                        let γ0_1 := Tuple.Access.right γ in
                        let γ0_0 := deref (M.read (| γ0_0 |)) in
                        match M.read (| γ0_0 |) with
                        | mother.Status.Ended _ =>
                          let γ2_0 := mother.Status.Get_Ended_0 γ0_0 in
                          let __self_0 := M.alloc (| borrow γ2_0 |) in
                          let γ0_1 := deref (M.read (| γ0_1 |)) in
                          match M.read (| γ0_1 |) with
                          | mother.Status.Ended _ =>
                            let γ2_0 := mother.Status.Get_Ended_0 γ0_1 in
                            let __arg1_0 := M.alloc (| borrow γ2_0 |) in
                            M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.cmp.PartialEq.eq
                                    (Self := mother.Outline.t)
                                    (Rhs := mother.Outline.t)
                                    (Trait := ℐ)))
                                (M.read (| __self_0 |))
                                (M.read (| __arg1_0 |)))
                              |)
                            |)
                          | _ => M.break_match(||)
                          end
                        | _ => M.break_match(||)
                        end
                      end :
                      M.Val bool.t;
                    fun
                        (γ :
                          M.Val
                            ((ref mother.Status.t) * (ref mother.Status.t))) =>
                      match M.read (| γ |) with
                      | (_, _) =>
                        let γ0_0 := Tuple.Access.left γ in
                        let γ0_1 := Tuple.Access.right γ in
                        let γ0_0 := deref (M.read (| γ0_0 |)) in
                        match M.read (| γ0_0 |) with
                        | mother.Status.RfDelay _ =>
                          let γ2_0 := mother.Status.Get_RfDelay_0 γ0_0 in
                          let __self_0 := M.alloc (| borrow γ2_0 |) in
                          let γ0_1 := deref (M.read (| γ0_1 |)) in
                          match M.read (| γ0_1 |) with
                          | mother.Status.RfDelay _ =>
                            let γ2_0 := mother.Status.Get_RfDelay_0 γ0_1 in
                            let __arg1_0 := M.alloc (| borrow γ2_0 |) in
                            M.alloc (|
                              BinOp.Pure.eq
                                (M.read (| deref (M.read (| __self_0 |)) |))
                                (M.read (| deref (M.read (| __arg1_0 |)) |))
                            |)
                          | _ => M.break_match(||)
                          end
                        | _ => M.break_match(||)
                        end
                      end :
                      M.Val bool.t;
                    fun
                        (γ :
                          M.Val
                            ((ref mother.Status.t) * (ref mother.Status.t))) =>
                      (M.alloc (| true |)) : M.Val bool.t
                  ])
            |))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_mother_Status_t.
End Impl_core_cmp_PartialEq_for_mother_Status_t.

Module  Impl_core_marker_StructuralEq_for_mother_Status_t.
Section Impl_core_marker_StructuralEq_for_mother_Status_t.
  Definition Self : Set := mother.Status.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_mother_Status_t.
End Impl_core_marker_StructuralEq_for_mother_Status_t.

Module  Impl_core_cmp_Eq_for_mother_Status_t.
Section Impl_core_cmp_Eq_for_mother_Status_t.
  Definition Self : Set := mother.Status.t.
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.cmp.AssertParamIsEq.t u32.t))
            [
              fun (γ : M.Val (core.cmp.AssertParamIsEq.t u32.t)) =>
                (ltac:
                  (M.monadic_match_operator
                    (DeclaredButUndefinedVariable
                      (A := core.cmp.AssertParamIsEq.t mother.Outline.t))
                    [
                      fun
                          (γ :
                            M.Val
                              (core.cmp.AssertParamIsEq.t mother.Outline.t)) =>
                        (M.alloc (| tt |)) : M.Val unit
                    ])) :
                M.Val unit
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_mother_Status_t.
End Impl_core_cmp_Eq_for_mother_Status_t.

Module  Impl_core_clone_Clone_for_mother_Status_t.
Section Impl_core_clone_Clone_for_mother_Status_t.
  Definition Self : Set := mother.Status.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M mother.Status.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            self
            [
              fun (γ : M.Val (ref mother.Status.t)) =>
                (let γ := deref (M.read (| γ |)) in
                match M.read (| γ |) with
                | mother.Status.NotStarted =>
                  M.alloc (| mother.Status.NotStarted |)
                | _ => M.break_match(||)
                end) :
                M.Val mother.Status.t;
              fun (γ : M.Val (ref mother.Status.t)) =>
                (let γ := deref (M.read (| γ |)) in
                match M.read (| γ |) with
                | mother.Status.OpeningPeriod =>
                  M.alloc (| mother.Status.OpeningPeriod |)
                | _ => M.break_match(||)
                end) :
                M.Val mother.Status.t;
              fun (γ : M.Val (ref mother.Status.t)) =>
                (let γ := deref (M.read (| γ |)) in
                match M.read (| γ |) with
                | mother.Status.EndingPeriod _ =>
                  let γ1_0 := mother.Status.Get_EndingPeriod_0 γ in
                  let __self_0 := M.alloc (| borrow γ1_0 |) in
                  M.alloc (|
                    mother.Status.EndingPeriod
                      (M.call (|(ltac:(M.get_method (fun ℐ =>
                          core.clone.Clone.clone (Self := u32.t) (Trait := ℐ)))
                        (M.read (| __self_0 |)))
                      |))
                  |)
                | _ => M.break_match(||)
                end) :
                M.Val mother.Status.t;
              fun (γ : M.Val (ref mother.Status.t)) =>
                (let γ := deref (M.read (| γ |)) in
                match M.read (| γ |) with
                | mother.Status.Ended _ =>
                  let γ1_0 := mother.Status.Get_Ended_0 γ in
                  let __self_0 := M.alloc (| borrow γ1_0 |) in
                  M.alloc (|
                    mother.Status.Ended
                      (M.call (|(ltac:(M.get_method (fun ℐ =>
                          core.clone.Clone.clone
                            (Self := mother.Outline.t)
                            (Trait := ℐ)))
                        (M.read (| __self_0 |)))
                      |))
                  |)
                | _ => M.break_match(||)
                end) :
                M.Val mother.Status.t;
              fun (γ : M.Val (ref mother.Status.t)) =>
                (let γ := deref (M.read (| γ |)) in
                match M.read (| γ |) with
                | mother.Status.RfDelay _ =>
                  let γ1_0 := mother.Status.Get_RfDelay_0 γ in
                  let __self_0 := M.alloc (| borrow γ1_0 |) in
                  M.alloc (|
                    mother.Status.RfDelay
                      (M.call (|(ltac:(M.get_method (fun ℐ =>
                          core.clone.Clone.clone (Self := u32.t) (Trait := ℐ)))
                        (M.read (| __self_0 |)))
                      |))
                  |)
                | _ => M.break_match(||)
                end) :
                M.Val mother.Status.t
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_mother_Status_t.
End Impl_core_clone_Clone_for_mother_Status_t.

Module  Auction.
Section Auction.
  Record t : Set := {
    name : alloc.string.String.t;
    subject : ltac:(mother.Hash);
    bids : mother.Bids.t;
    terms : array ltac:(mother.BlockNumber);
    status : mother.Status.t;
    finalized : bool.t;
    vector : alloc.vec.Vec.t u8.t alloc.vec.Vec.Default.A;
  }.
  
  Definition Get_name :=
    Ref.map (fun α => Some α.(name)) (fun β α => Some (α <| name := β |>)).
  Definition Get_subject :=
    Ref.map
      (fun α => Some α.(subject))
      (fun β α => Some (α <| subject := β |>)).
  Definition Get_bids :=
    Ref.map (fun α => Some α.(bids)) (fun β α => Some (α <| bids := β |>)).
  Definition Get_terms :=
    Ref.map (fun α => Some α.(terms)) (fun β α => Some (α <| terms := β |>)).
  Definition Get_status :=
    Ref.map (fun α => Some α.(status)) (fun β α => Some (α <| status := β |>)).
  Definition Get_finalized :=
    Ref.map
      (fun α => Some α.(finalized))
      (fun β α => Some (α <| finalized := β |>)).
  Definition Get_vector :=
    Ref.map (fun α => Some α.(vector)) (fun β α => Some (α <| vector := β |>)).
End Auction.
End Auction.

Module  Impl_core_marker_StructuralPartialEq_for_mother_Auction_t.
Section Impl_core_marker_StructuralPartialEq_for_mother_Auction_t.
  Definition Self : Set := mother.Auction.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_mother_Auction_t.
End Impl_core_marker_StructuralPartialEq_for_mother_Auction_t.

Module  Impl_core_cmp_PartialEq_for_mother_Auction_t.
Section Impl_core_cmp_PartialEq_for_mother_Auction_t.
  Definition Self : Set := mother.Auction.t.
  
  (*
  PartialEq
  *)
  Definition eq (self : ref Self) (other : ref mother.Auction.t) : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let other := M.alloc (| other |) in
      BinOp.Pure.and
        (BinOp.Pure.and
          (BinOp.Pure.and
            (BinOp.Pure.and
              (BinOp.Pure.and
                (BinOp.Pure.and
                  (M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.cmp.PartialEq.eq
                        (Self := alloc.string.String.t)
                        (Rhs := alloc.string.String.t)
                        (Trait := ℐ)))
                    (borrow
                      (mother.Auction.Get_name (deref (M.read (| self |)))))
                    (borrow
                      (mother.Auction.Get_name (deref (M.read (| other |))))))
                  |))
                  (M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.cmp.PartialEq.eq
                        (Self := array u8.t)
                        (Rhs := array u8.t)
                        (Trait := ℐ)))
                    (borrow
                      (mother.Auction.Get_subject (deref (M.read (| self |)))))
                    (borrow
                      (mother.Auction.Get_subject
                        (deref (M.read (| other |))))))
                  |)))
                (M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.cmp.PartialEq.eq
                      (Self := mother.Bids.t)
                      (Rhs := mother.Bids.t)
                      (Trait := ℐ)))
                  (borrow (mother.Auction.Get_bids (deref (M.read (| self |)))))
                  (borrow
                    (mother.Auction.Get_bids (deref (M.read (| other |))))))
                |)))
              (M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.cmp.PartialEq.eq
                    (Self := array u32.t)
                    (Rhs := array u32.t)
                    (Trait := ℐ)))
                (borrow (mother.Auction.Get_terms (deref (M.read (| self |)))))
                (borrow
                  (mother.Auction.Get_terms (deref (M.read (| other |))))))
              |)))
            (M.call (|(ltac:(M.get_method (fun ℐ =>
                core.cmp.PartialEq.eq
                  (Self := mother.Status.t)
                  (Rhs := mother.Status.t)
                  (Trait := ℐ)))
              (borrow (mother.Auction.Get_status (deref (M.read (| self |)))))
              (borrow (mother.Auction.Get_status (deref (M.read (| other |))))))
            |)))
          (Bool.eqb
            (M.read (| mother.Auction.Get_finalized (deref (M.read (| self |)))
            |))
            (M.read (| mother.Auction.Get_finalized (deref (M.read (| other |)))
            |))))
        (M.call (|(ltac:(M.get_method (fun ℐ =>
            core.cmp.PartialEq.eq
              (Self := alloc.vec.Vec.t u8.t alloc.alloc.Global.t)
              (Rhs := alloc.vec.Vec.t u8.t alloc.alloc.Global.t)
              (Trait := ℐ)))
          (borrow (mother.Auction.Get_vector (deref (M.read (| self |)))))
          (borrow (mother.Auction.Get_vector (deref (M.read (| other |))))))
        |))
    )).
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_mother_Auction_t.
End Impl_core_cmp_PartialEq_for_mother_Auction_t.

Module  Impl_core_marker_StructuralEq_for_mother_Auction_t.
Section Impl_core_marker_StructuralEq_for_mother_Auction_t.
  Definition Self : Set := mother.Auction.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_mother_Auction_t.
End Impl_core_marker_StructuralEq_for_mother_Auction_t.

Module  Impl_core_cmp_Eq_for_mother_Auction_t.
Section Impl_core_cmp_Eq_for_mother_Auction_t.
  Definition Self : Set := mother.Auction.t.
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.cmp.AssertParamIsEq.t alloc.string.String.t))
            [
              fun
                  (γ :
                    M.Val (core.cmp.AssertParamIsEq.t alloc.string.String.t)) =>
                (ltac:
                  (M.monadic_match_operator
                    (DeclaredButUndefinedVariable
                      (A := core.cmp.AssertParamIsEq.t (array u8.t)))
                    [
                      fun
                          (γ :
                            M.Val (core.cmp.AssertParamIsEq.t (array u8.t))) =>
                        (ltac:
                          (M.monadic_match_operator
                            (DeclaredButUndefinedVariable
                              (A := core.cmp.AssertParamIsEq.t mother.Bids.t))
                            [
                              fun
                                  (γ :
                                    M.Val
                                      (core.cmp.AssertParamIsEq.t
                                        mother.Bids.t)) =>
                                (ltac:
                                  (M.monadic_match_operator
                                    (DeclaredButUndefinedVariable
                                      (A :=
                                        core.cmp.AssertParamIsEq.t
                                          (array u32.t)))
                                    [
                                      fun
                                          (γ :
                                            M.Val
                                              (core.cmp.AssertParamIsEq.t
                                                (array u32.t))) =>
                                        (ltac:
                                          (M.monadic_match_operator
                                            (DeclaredButUndefinedVariable
                                              (A :=
                                                core.cmp.AssertParamIsEq.t
                                                  mother.Status.t))
                                            [
                                              fun
                                                  (γ :
                                                    M.Val
                                                      (core.cmp.AssertParamIsEq.t
                                                        mother.Status.t)) =>
                                                (ltac:
                                                  (M.monadic_match_operator
                                                    (DeclaredButUndefinedVariable
                                                      (A :=
                                                        core.cmp.AssertParamIsEq.t
                                                          bool.t))
                                                    [
                                                      fun
                                                          (γ :
                                                            M.Val
                                                              (core.cmp.AssertParamIsEq.t
                                                                bool.t)) =>
                                                        (ltac:
                                                          (M.monadic_match_operator
                                                            (DeclaredButUndefinedVariable
                                                              (A :=
                                                                core.cmp.AssertParamIsEq.t
                                                                  (alloc.vec.Vec.t
                                                                    u8.t
                                                                    alloc.alloc.Global.t)))
                                                            [
                                                              fun
                                                                  (γ :
                                                                    M.Val
                                                                      (core.cmp.AssertParamIsEq.t
                                                                        (alloc.vec.Vec.t
                                                                          u8.t
                                                                          alloc.alloc.Global.t))) =>
                                                                (M.alloc (| tt
                                                                |)) :
                                                                M.Val unit
                                                            ])) :
                                                        M.Val unit
                                                    ])) :
                                                M.Val unit
                                            ])) :
                                        M.Val unit
                                    ])) :
                                M.Val unit
                            ])) :
                        M.Val unit
                    ])) :
                M.Val unit
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_mother_Auction_t.
End Impl_core_cmp_Eq_for_mother_Auction_t.

Module  Impl_core_clone_Clone_for_mother_Auction_t.
Section Impl_core_clone_Clone_for_mother_Auction_t.
  Definition Self : Set := mother.Auction.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M mother.Auction.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      {|
        mother.Auction.name :=
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.clone.Clone.clone
                (Self := alloc.string.String.t)
                (Trait := ℐ)))
            (borrow (mother.Auction.Get_name (deref (M.read (| self |))))))
          |);
        mother.Auction.subject :=
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.clone.Clone.clone (Self := array u8.t) (Trait := ℐ)))
            (borrow (mother.Auction.Get_subject (deref (M.read (| self |))))))
          |);
        mother.Auction.bids :=
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.clone.Clone.clone (Self := mother.Bids.t) (Trait := ℐ)))
            (borrow (mother.Auction.Get_bids (deref (M.read (| self |))))))
          |);
        mother.Auction.terms :=
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.clone.Clone.clone (Self := array u32.t) (Trait := ℐ)))
            (borrow (mother.Auction.Get_terms (deref (M.read (| self |))))))
          |);
        mother.Auction.status :=
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.clone.Clone.clone (Self := mother.Status.t) (Trait := ℐ)))
            (borrow (mother.Auction.Get_status (deref (M.read (| self |))))))
          |);
        mother.Auction.finalized :=
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.clone.Clone.clone (Self := bool.t) (Trait := ℐ)))
            (borrow (mother.Auction.Get_finalized (deref (M.read (| self |))))))
          |);
        mother.Auction.vector :=
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.clone.Clone.clone
                (Self := alloc.vec.Vec.t u8.t alloc.alloc.Global.t)
                (Trait := ℐ)))
            (borrow (mother.Auction.Get_vector (deref (M.read (| self |))))))
          |);
      |} : mother.Auction.t
    )).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_mother_Auction_t.
End Impl_core_clone_Clone_for_mother_Auction_t.

Module  Impl_core_default_Default_for_mother_Auction_t.
Section Impl_core_default_Default_for_mother_Auction_t.
  Definition Self : Set := mother.Auction.t.
  
  (*
      fn default() -> Auction {
          Auction {
              name: String::default(),
              subject: Hash::default(),
              bids: Bids::default(),
              terms: <[BlockNumber; 3]>::default(),
              status: Status::OpeningPeriod,
              finalized: false,
              vector: <Vec<u8>>::default(),
          }
      }
  *)
  Definition default : M mother.Auction.t :=
    ltac:(M.monadic (
      {|
        mother.Auction.name :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default
              (Self := alloc.string.String.t)
              (Trait := ℐ)))
          |);
        mother.Auction.subject :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default (Self := array u8.t) (Trait := ℐ)))
          |);
        mother.Auction.bids :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default (Self := mother.Bids.t) (Trait := ℐ)))
          |);
        mother.Auction.terms :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default (Self := array u32.t) (Trait := ℐ)))
          |);
        mother.Auction.status := mother.Status.OpeningPeriod;
        mother.Auction.finalized := false;
        mother.Auction.vector :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default
              (Self := alloc.vec.Vec.t u8.t alloc.alloc.Global.t)
              (Trait := ℐ)))
          |);
      |} : mother.Auction.t
    )).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_mother_Auction_t.
End Impl_core_default_Default_for_mother_Auction_t.

Module Failure.
  Inductive t : Set :=
  | Revert (_ : alloc.string.String.t)
  | Panic.
  
  Definition Get_Revert_0 :=
    Ref.map
      (fun α => match α with | Revert α0 => Some α0 | _ => None end)
      (fun β α => match α with | Revert _ => Some (Revert β) | _ => None end).
End Failure.

Module  Impl_core_marker_StructuralPartialEq_for_mother_Failure_t.
Section Impl_core_marker_StructuralPartialEq_for_mother_Failure_t.
  Definition Self : Set := mother.Failure.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_mother_Failure_t.
End Impl_core_marker_StructuralPartialEq_for_mother_Failure_t.

Module  Impl_core_cmp_PartialEq_for_mother_Failure_t.
Section Impl_core_cmp_PartialEq_for_mother_Failure_t.
  Definition Self : Set := mother.Failure.t.
  
  (*
  PartialEq
  *)
  Definition eq (self : ref Self) (other : ref mother.Failure.t) : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let other := M.alloc (| other |) in
      M.read (|
        let __self_tag : M.Val isize.t :=
          M.alloc (|
            M.call (|(core.intrinsics.discriminant_value (M.read (| self |))) |)
          |) in
        let __arg1_tag : M.Val isize.t :=
          M.alloc (|
            M.call (|(core.intrinsics.discriminant_value (M.read (| other |)))
            |)
          |) in
        M.alloc (|
          BinOp.Pure.and
            (BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)))
            (M.read (|
              ltac:
                (M.monadic_match_operator
                  (M.alloc (| (M.read (| self |), M.read (| other |)) |))
                  [
                    fun
                        (γ :
                          M.Val
                            ((ref mother.Failure.t)
                            *
                            (ref mother.Failure.t))) =>
                      match M.read (| γ |) with
                      | (_, _) =>
                        let γ0_0 := Tuple.Access.left γ in
                        let γ0_1 := Tuple.Access.right γ in
                        let γ0_0 := deref (M.read (| γ0_0 |)) in
                        match M.read (| γ0_0 |) with
                        | mother.Failure.Revert _ =>
                          let γ2_0 := mother.Failure.Get_Revert_0 γ0_0 in
                          let __self_0 := M.alloc (| borrow γ2_0 |) in
                          let γ0_1 := deref (M.read (| γ0_1 |)) in
                          match M.read (| γ0_1 |) with
                          | mother.Failure.Revert _ =>
                            let γ2_0 := mother.Failure.Get_Revert_0 γ0_1 in
                            let __arg1_0 := M.alloc (| borrow γ2_0 |) in
                            M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.cmp.PartialEq.eq
                                    (Self := alloc.string.String.t)
                                    (Rhs := alloc.string.String.t)
                                    (Trait := ℐ)))
                                (M.read (| __self_0 |))
                                (M.read (| __arg1_0 |)))
                              |)
                            |)
                          | _ => M.break_match(||)
                          end
                        | _ => M.break_match(||)
                        end
                      end :
                      M.Val bool.t;
                    fun
                        (γ :
                          M.Val
                            ((ref mother.Failure.t)
                            *
                            (ref mother.Failure.t))) =>
                      (M.alloc (| true |)) : M.Val bool.t
                  ])
            |))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_mother_Failure_t.
End Impl_core_cmp_PartialEq_for_mother_Failure_t.

Module  Impl_core_marker_StructuralEq_for_mother_Failure_t.
Section Impl_core_marker_StructuralEq_for_mother_Failure_t.
  Definition Self : Set := mother.Failure.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_mother_Failure_t.
End Impl_core_marker_StructuralEq_for_mother_Failure_t.

Module  Impl_core_cmp_Eq_for_mother_Failure_t.
Section Impl_core_cmp_Eq_for_mother_Failure_t.
  Definition Self : Set := mother.Failure.t.
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.cmp.AssertParamIsEq.t alloc.string.String.t))
            [
              fun
                  (γ :
                    M.Val (core.cmp.AssertParamIsEq.t alloc.string.String.t)) =>
                (M.alloc (| tt |)) : M.Val unit
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_mother_Failure_t.
End Impl_core_cmp_Eq_for_mother_Failure_t.

Module  AuctionEchoed.
Section AuctionEchoed.
  Record t : Set := {
    auction : mother.Auction.t;
  }.
  
  Definition Get_auction :=
    Ref.map
      (fun α => Some α.(auction))
      (fun β α => Some (α <| auction := β |>)).
End AuctionEchoed.
End AuctionEchoed.

Module Event.
  Inductive t : Set :=
  | AuctionEchoed (_ : mother.AuctionEchoed.t).
  
  Definition Get_AuctionEchoed_0 :=
    Ref.map
      (fun α => match α with | AuctionEchoed α0 => Some α0 end)
      (fun β α => match α with | AuctionEchoed _ => Some (AuctionEchoed β) end).
End Event.

Module  Impl_mother_Env_t.
Section Impl_mother_Env_t.
  Definition Self : Set := mother.Env.t.
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (self : ref Self) : M mother.AccountId.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (| mother.Env.Get_caller (deref (M.read (| self |))) |)
    )).
  
  Global Instance AssociatedFunction_caller :
    Notations.DoubleColon Self "caller" := {
    Notations.double_colon := caller;
  }.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event (self : ref Self) (_event : mother.Event.t) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let _event := M.alloc (| _event |) in
      (never_to_any (B := unit)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_emit_event :
    Notations.DoubleColon Self "emit_event" := {
    Notations.double_colon := emit_event;
  }.
End Impl_mother_Env_t.
End Impl_mother_Env_t.

Module  Mother.
Section Mother.
  Record t : Set := {
    auction : mother.Auction.t;
    balances : mother.Mapping.t mother.AccountId.t ltac:(mother.Balance);
  }.
  
  Definition Get_auction :=
    Ref.map
      (fun α => Some α.(auction))
      (fun β α => Some (α <| auction := β |>)).
  Definition Get_balances :=
    Ref.map
      (fun α => Some α.(balances))
      (fun β α => Some (α <| balances := β |>)).
End Mother.
End Mother.

Module  Impl_core_default_Default_for_mother_Mother_t.
Section Impl_core_default_Default_for_mother_Mother_t.
  Definition Self : Set := mother.Mother.t.
  
  (*
  Default
  *)
  Definition default : M mother.Mother.t :=
    ltac:(M.monadic (
      {|
        mother.Mother.auction :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default
              (Self := mother.Auction.t)
              (Trait := ℐ)))
          |);
        mother.Mother.balances :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default
              (Self := mother.Mapping.t mother.AccountId.t u128.t)
              (Trait := ℐ)))
          |);
      |} : mother.Mother.t
    )).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_mother_Mother_t.
End Impl_core_default_Default_for_mother_Mother_t.

Module  Impl_mother_Mother_t.
Section Impl_mother_Mother_t.
  Definition Self : Set := mother.Mother.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env : M mother.Env.t :=
    ltac:(M.monadic (
      (never_to_any (B := mother.Env.t)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon Self "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (self : ref Self) : M mother.Env.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.call (|mother.Mother.t::["init_env"] |)
    )).
  
  Global Instance AssociatedFunction_env : Notations.DoubleColon Self "env" := {
    Notations.double_colon := env;
  }.
  
  (*
      pub fn new(auction: Auction) -> Self {
          Self {
              balances: Default::default(),
              auction,
          }
      }
  *)
  Definition new (auction : mother.Auction.t) : M Self :=
    ltac:(M.monadic (
      let auction := M.alloc (| auction |) in
      {|
        mother.Mother.balances :=
          M.call (|ltac:(M.get_method (fun ℐ =>
            core.default.Default.default
              (Self := mother.Mapping.t mother.AccountId.t u128.t)
              (Trait := ℐ)))
          |);
        mother.Mother.auction := M.read (| auction |);
      |} : mother.Mother.t
    )).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn new_default() -> Self {
          Default::default()
      }
  *)
  Definition new_default : M Self :=
    ltac:(M.monadic (
      M.call (|ltac:(M.get_method (fun ℐ =>
        core.default.Default.default (Self := mother.Mother.t) (Trait := ℐ)))
      |)
    )).
  
  Global Instance AssociatedFunction_new_default :
    Notations.DoubleColon Self "new_default" := {
    Notations.double_colon := new_default;
  }.
  
  (*
      pub fn failed_new(fail: bool) -> Result<Self, Failure> {
          if fail {
              Err(Failure::Revert("Reverting instantiation".to_string()))
          } else {
              Ok(Default::default())
          }
      }
  *)
  Definition failed_new
      (fail : bool.t)
      : M (core.result.Result.t Self mother.Failure.t) :=
    ltac:(M.monadic (
      let fail := M.alloc (| fail |) in
      M.read (|
        if M.read (| use fail |) then
          M.alloc (|
            core.result.Result.Err
              (mother.Failure.Revert
                (M.call (|(ltac:(M.get_method (fun ℐ =>
                    alloc.string.ToString.to_string
                      (Self := str.t)
                      (Trait := ℐ)))
                  (M.read (| mk_str "Reverting instantiation" |)))
                |)))
          |)
        else
          M.alloc (|
            core.result.Result.Ok
              (M.call (|ltac:(M.get_method (fun ℐ =>
                core.default.Default.default
                  (Self := mother.Mother.t)
                  (Trait := ℐ)))
              |))
          |)
      |)
    )).
  
  Global Instance AssociatedFunction_failed_new :
    Notations.DoubleColon Self "failed_new" := {
    Notations.double_colon := failed_new;
  }.
  
  (*
      pub fn echo_auction(&mut self, auction: Auction) -> Auction {
          self.env().emit_event(Event::AuctionEchoed(AuctionEchoed {
              auction: auction.clone(),
          }));
          auction
      }
  *)
  Definition echo_auction
      (self : mut_ref Self)
      (auction : mother.Auction.t)
      : M mother.Auction.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let auction := M.alloc (| auction |) in
      M.read (|
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(mother.Env.t::["emit_event"]
              (borrow
                (M.alloc (|
                  M.call (|(mother.Mother.t::["env"]
                    (borrow (deref (M.read (| self |)))))
                  |)
                |)))
              (mother.Event.AuctionEchoed
                ({|
                  mother.AuctionEchoed.auction :=
                    M.call (|(ltac:(M.get_method (fun ℐ =>
                        core.clone.Clone.clone
                          (Self := mother.Auction.t)
                          (Trait := ℐ)))
                      (borrow auction))
                    |);
                |} : mother.AuctionEchoed.t)))
            |)
          |) in
        auction
      |)
    )).
  
  Global Instance AssociatedFunction_echo_auction :
    Notations.DoubleColon Self "echo_auction" := {
    Notations.double_colon := echo_auction;
  }.
  
  (*
      pub fn revert_or_trap(&mut self, fail: Option<Failure>) -> Result<(), Failure> {
          match fail {
              Some(Failure::Revert(_)) => {
                  Err(Failure::Revert("Reverting on user demand!".to_string()))
              }
              Some(Failure::Panic) => {
                  panic!("Trapping on user demand!")
              }
              None => Ok(()),
          }
      }
  *)
  Definition revert_or_trap
      (self : mut_ref Self)
      (fail : core.option.Option.t mother.Failure.t)
      : M (core.result.Result.t unit mother.Failure.t) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let fail := M.alloc (| fail |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            fail
            [
              fun (γ : M.Val (core.option.Option.t mother.Failure.t)) =>
                match M.read (| γ |) with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  match M.read (| γ0_0 |) with
                  | mother.Failure.Revert _ =>
                    let γ1_0 := mother.Failure.Get_Revert_0 γ0_0 in
                    M.alloc (|
                      core.result.Result.Err
                        (mother.Failure.Revert
                          (M.call (|(ltac:(M.get_method (fun ℐ =>
                              alloc.string.ToString.to_string
                                (Self := str.t)
                                (Trait := ℐ)))
                            (M.read (| mk_str "Reverting on user demand!" |)))
                          |)))
                    |)
                  | _ => M.break_match(||)
                  end
                | _ => M.break_match(||)
                end :
                M.Val (core.result.Result.t unit mother.Failure.t);
              fun (γ : M.Val (core.option.Option.t mother.Failure.t)) =>
                match M.read (| γ |) with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  match M.read (| γ0_0 |) with
                  | mother.Failure.Panic =>
                    M.alloc (|
                      (never_to_any
                        (B := core.result.Result.t unit mother.Failure.t)) (|
                        M.call (|(std.panicking.begin_panic
                          (M.read (| mk_str "Trapping on user demand!" |)))
                        |)
                      |)
                    |)
                  | _ => M.break_match(||)
                  end
                | _ => M.break_match(||)
                end :
                M.Val (core.result.Result.t unit mother.Failure.t);
              fun (γ : M.Val (core.option.Option.t mother.Failure.t)) =>
                match M.read (| γ |) with
                | core.option.Option.None =>
                  M.alloc (| core.result.Result.Ok tt |)
                | _ => M.break_match(||)
                end :
                M.Val (core.result.Result.t unit mother.Failure.t)
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_revert_or_trap :
    Notations.DoubleColon Self "revert_or_trap" := {
    Notations.double_colon := revert_or_trap;
  }.
  
  (*
      pub fn debug_log(&mut self, _message: String) {
          println!("debug_log: {}", _message);
      }
  *)
  Definition debug_log
      (self : mut_ref Self)
      (_message : alloc.string.String.t)
      : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let _message := M.alloc (| _message |) in
      M.read (|
        let _ : M.Val unit :=
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(std.io.stdio._print
                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.read (| mk_str "debug_log: " |);
                          M.read (| mk_str "
" |)
                        ]
                      |))))
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.call (|(core.fmt.rt.Argument.t::["new_display"]
                            (borrow _message))
                          |)
                        ]
                      |)))))
                |)))
              |)
            |) in
          M.alloc (| tt |) in
        M.alloc (| tt |)
      |)
    )).
  
  Global Instance AssociatedFunction_debug_log :
    Notations.DoubleColon Self "debug_log" := {
    Notations.double_colon := debug_log;
  }.
End Impl_mother_Mother_t.
End Impl_mother_Mother_t.
