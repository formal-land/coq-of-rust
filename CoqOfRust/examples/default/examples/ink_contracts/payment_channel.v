(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  AccountId.
Section AccountId.
  Record t : Set := {
    x0 : u128.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End AccountId.
End AccountId.

Module  Impl_core_default_Default_for_payment_channel_AccountId_t.
Section Impl_core_default_Default_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  (*
  Default
  *)
  Definition default : M payment_channel.AccountId.t :=
    ltac:(M.monadic (
      payment_channel.AccountId.Build_t
        (M.call (|ltac:(M.get_method (fun ℐ =>
          core.default.Default.default (Self := u128.t) (Trait := ℐ)))
        |))
    )).
  
  Global Instance AssociatedFunction_default :
    Notations.DoubleColon Self "default" := {
    Notations.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_payment_channel_AccountId_t.
End Impl_core_default_Default_for_payment_channel_AccountId_t.

Module  Impl_core_clone_Clone_for_payment_channel_AccountId_t.
Section Impl_core_clone_Clone_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M payment_channel.AccountId.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.clone.AssertParamIsClone.t u128.t))
            [
              fun (γ : M.Val (core.clone.AssertParamIsClone.t u128.t)) =>
                (deref (M.read (| self |))) : M.Val payment_channel.AccountId.t
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_payment_channel_AccountId_t.
End Impl_core_clone_Clone_for_payment_channel_AccountId_t.

Module  Impl_core_marker_Copy_for_payment_channel_AccountId_t.
Section Impl_core_marker_Copy_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_payment_channel_AccountId_t.
End Impl_core_marker_Copy_for_payment_channel_AccountId_t.

Module  Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId_t.
Section Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId_t.
End Impl_core_marker_StructuralPartialEq_for_payment_channel_AccountId_t.

Module  Impl_core_cmp_PartialEq_for_payment_channel_AccountId_t.
Section Impl_core_cmp_PartialEq_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  (*
  PartialEq
  *)
  Definition eq
      (self : ref Self)
      (other : ref payment_channel.AccountId.t)
      : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let other := M.alloc (| other |) in
      BinOp.Pure.eq
        (M.read (| payment_channel.AccountId.Get_0 (deref (M.read (| self |)))
        |))
        (M.read (| payment_channel.AccountId.Get_0 (deref (M.read (| other |)))
        |))
    )).
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_payment_channel_AccountId_t.
End Impl_core_cmp_PartialEq_for_payment_channel_AccountId_t.

Module  Impl_core_marker_StructuralEq_for_payment_channel_AccountId_t.
Section Impl_core_marker_StructuralEq_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_payment_channel_AccountId_t.
End Impl_core_marker_StructuralEq_for_payment_channel_AccountId_t.

Module  Impl_core_cmp_Eq_for_payment_channel_AccountId_t.
Section Impl_core_cmp_Eq_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.cmp.AssertParamIsEq.t u128.t))
            [
              fun (γ : M.Val (core.cmp.AssertParamIsEq.t u128.t)) =>
                (M.alloc (| tt |)) : M.Val unit
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_payment_channel_AccountId_t.
End Impl_core_cmp_Eq_for_payment_channel_AccountId_t.

Module  Impl_core_convert_From_array_u8_t_for_payment_channel_AccountId_t.
Section Impl_core_convert_From_array_u8_t_for_payment_channel_AccountId_t.
  Definition Self : Set := payment_channel.AccountId.t.
  
  (*
      fn from(value: [u8; 32]) -> Self {
          unimplemented!()
      }
  *)
  Definition from (value : array u8.t) : M Self :=
    ltac:(M.monadic (
      let value := M.alloc (| value |) in
      (never_to_any (B := payment_channel.AccountId.t)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ : core.convert.From.Trait Self (T := array u8.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_array_u8_t_for_payment_channel_AccountId_t.
End Impl_core_convert_From_array_u8_t_for_payment_channel_AccountId_t.

Ltac Balance := exact u128.t.

Ltac Timestamp := exact u64.t.

Module  Env.
Section Env.
  Record t : Set := {
    caller : payment_channel.AccountId.t;
  }.
  
  Definition Get_caller :=
    Ref.map (fun α => Some α.(caller)) (fun β α => Some (α <| caller := β |>)).
End Env.
End Env.

Module  PaymentChannel.
Section PaymentChannel.
  Record t : Set := {
    sender : payment_channel.AccountId.t;
    recipient : payment_channel.AccountId.t;
    expiration : core.option.Option.t ltac:(payment_channel.Timestamp);
    withdrawn : ltac:(payment_channel.Balance);
    close_duration : ltac:(payment_channel.Timestamp);
  }.
  
  Definition Get_sender :=
    Ref.map (fun α => Some α.(sender)) (fun β α => Some (α <| sender := β |>)).
  Definition Get_recipient :=
    Ref.map
      (fun α => Some α.(recipient))
      (fun β α => Some (α <| recipient := β |>)).
  Definition Get_expiration :=
    Ref.map
      (fun α => Some α.(expiration))
      (fun β α => Some (α <| expiration := β |>)).
  Definition Get_withdrawn :=
    Ref.map
      (fun α => Some α.(withdrawn))
      (fun β α => Some (α <| withdrawn := β |>)).
  Definition Get_close_duration :=
    Ref.map
      (fun α => Some α.(close_duration))
      (fun β α => Some (α <| close_duration := β |>)).
End PaymentChannel.
End PaymentChannel.

Module Error.
  Inductive t : Set :=
  | CallerIsNotSender
  | CallerIsNotRecipient
  | AmountIsLessThanWithdrawn
  | TransferFailed
  | NotYetExpired
  | InvalidSignature.
End Error.

Module  Impl_core_marker_StructuralPartialEq_for_payment_channel_Error_t.
Section Impl_core_marker_StructuralPartialEq_for_payment_channel_Error_t.
  Definition Self : Set := payment_channel.Error.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_payment_channel_Error_t.
End Impl_core_marker_StructuralPartialEq_for_payment_channel_Error_t.

Module  Impl_core_cmp_PartialEq_for_payment_channel_Error_t.
Section Impl_core_cmp_PartialEq_for_payment_channel_Error_t.
  Definition Self : Set := payment_channel.Error.t.
  
  (*
  PartialEq
  *)
  Definition eq
      (self : ref Self)
      (other : ref payment_channel.Error.t)
      : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let other := M.alloc (| other |) in
      M.read (|
        let __self_tag : M.Val isize.t :=
          M.alloc (|
            M.call (|(core.intrinsics.discriminant_value (M.read (| self |))) |)
          |) in
        let __arg1_tag : M.Val isize.t :=
          M.alloc (|
            M.call (|(core.intrinsics.discriminant_value (M.read (| other |)))
            |)
          |) in
        M.alloc (|
          BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_payment_channel_Error_t.
End Impl_core_cmp_PartialEq_for_payment_channel_Error_t.

Module  Impl_core_marker_StructuralEq_for_payment_channel_Error_t.
Section Impl_core_marker_StructuralEq_for_payment_channel_Error_t.
  Definition Self : Set := payment_channel.Error.t.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_payment_channel_Error_t.
End Impl_core_marker_StructuralEq_for_payment_channel_Error_t.

Module  Impl_core_cmp_Eq_for_payment_channel_Error_t.
Section Impl_core_cmp_Eq_for_payment_channel_Error_t.
  Definition Self : Set := payment_channel.Error.t.
  
  (*
  Eq
  *)
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      tt
    )).
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notations.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notations.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_payment_channel_Error_t.
End Impl_core_cmp_Eq_for_payment_channel_Error_t.

Ltac Result T := exact (core.result.Result.t T payment_channel.Error.t).

Module  SenderCloseStarted.
Section SenderCloseStarted.
  Record t : Set := {
    expiration : ltac:(payment_channel.Timestamp);
    close_duration : ltac:(payment_channel.Timestamp);
  }.
  
  Definition Get_expiration :=
    Ref.map
      (fun α => Some α.(expiration))
      (fun β α => Some (α <| expiration := β |>)).
  Definition Get_close_duration :=
    Ref.map
      (fun α => Some α.(close_duration))
      (fun β α => Some (α <| close_duration := β |>)).
End SenderCloseStarted.
End SenderCloseStarted.

Module Event.
  Inductive t : Set :=
  | SenderCloseStarted (_ : payment_channel.SenderCloseStarted.t).
  
  Definition Get_SenderCloseStarted_0 :=
    Ref.map
      (fun α => match α with | SenderCloseStarted α0 => Some α0 end)
      (fun β α =>
        match α with | SenderCloseStarted _ => Some (SenderCloseStarted β) end).
End Event.

Module  Impl_payment_channel_Env_t.
Section Impl_payment_channel_Env_t.
  Definition Self : Set := payment_channel.Env.t.
  
  (*
      fn caller(&self) -> AccountId {
          self.caller
      }
  *)
  Definition caller (self : ref Self) : M payment_channel.AccountId.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (| payment_channel.Env.Get_caller (deref (M.read (| self |))) |)
    )).
  
  Global Instance AssociatedFunction_caller :
    Notations.DoubleColon Self "caller" := {
    Notations.double_colon := caller;
  }.
  
  (*
      fn emit_event(&self, _event: Event) {
          unimplemented!()
      }
  *)
  Definition emit_event
      (self : ref Self)
      (_event : payment_channel.Event.t)
      : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let _event := M.alloc (| _event |) in
      (never_to_any (B := unit)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_emit_event :
    Notations.DoubleColon Self "emit_event" := {
    Notations.double_colon := emit_event;
  }.
  
  (*
      fn terminate_contract(&self, sender: AccountId) {
          unimplemented!()
      }
  *)
  Definition terminate_contract
      (self : ref Self)
      (sender : payment_channel.AccountId.t)
      : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let sender := M.alloc (| sender |) in
      (never_to_any (B := unit)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_terminate_contract :
    Notations.DoubleColon Self "terminate_contract" := {
    Notations.double_colon := terminate_contract;
  }.
  
  (*
      fn transfer(&self, recipient: AccountId, amount: Balance) -> Result<()> {
          unimplemented!()
      }
  *)
  Definition transfer
      (self : ref Self)
      (recipient : payment_channel.AccountId.t)
      (amount : ltac:(payment_channel.Balance))
      : M ltac:(payment_channel.Result unit) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let recipient := M.alloc (| recipient |) in
      let amount := M.alloc (| amount |) in
      (never_to_any (B := core.result.Result.t unit payment_channel.Error.t)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_transfer :
    Notations.DoubleColon Self "transfer" := {
    Notations.double_colon := transfer;
  }.
  
  (*
      fn block_timestamp(&self) -> Timestamp {
          unimplemented!()
      }
  *)
  Definition block_timestamp
      (self : ref Self)
      : M ltac:(payment_channel.Timestamp) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      (never_to_any (B := u64.t)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_block_timestamp :
    Notations.DoubleColon Self "block_timestamp" := {
    Notations.double_colon := block_timestamp;
  }.
  
  (*
      fn balance(&self) -> Balance {
          unimplemented!()
      }
  *)
  Definition balance (self : ref Self) : M ltac:(payment_channel.Balance) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      (never_to_any (B := u128.t)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_balance :
    Notations.DoubleColon Self "balance" := {
    Notations.double_colon := balance;
  }.
  
  (*
      fn account_id(&self) -> AccountId {
          unimplemented!()
      }
  *)
  Definition account_id (self : ref Self) : M payment_channel.AccountId.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      (never_to_any (B := payment_channel.AccountId.t)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_account_id :
    Notations.DoubleColon Self "account_id" := {
    Notations.double_colon := account_id;
  }.
End Impl_payment_channel_Env_t.
End Impl_payment_channel_Env_t.

Module  HashOutput.
Section HashOutput.
  Class Trait (Self : Set) : Type := {
    Type_ : Set;
    ℒ_0 :: core.default.Default.Trait Type_;
  }.
  
  Global Instance Method_Type_ `(Trait) :
    Notations.DoubleColonType Self "Type_" := {
    Notations.double_colon_type := Type_;
  }.
End HashOutput.
End HashOutput.

Module  CryptoHash.
Section CryptoHash.
  Class Trait (Self : Set) : Type := {
    hash :
      (ref (slice u8.t)) ->
        (mut_ref
          (payment_channel.HashOutput.Type_
            (Self := Self)
            (Trait := ltac:(refine _))))
        ->
        M unit;
  }.
  
End CryptoHash.
End CryptoHash.

(*
pub fn hash_encoded<H, T>(input: &T, output: &mut <H as HashOutput>::Type)
where
    H: CryptoHash,
{
    unimplemented!()
}
*)
Definition hash_encoded
    {H T : Set}
    (input : ref T)
    (output
      :
      mut_ref
        (payment_channel.HashOutput.Type_
          (Self := H)
          (Trait := ltac:(refine ℋ_0.(CryptoHash.ℒ_0)))))
    : M unit :=
  ltac:(M.monadic (
    let input := M.alloc (| input |) in
    let output := M.alloc (| output |) in
    (never_to_any (B := unit)) (|
      M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |))) |)
    |)
  )).

(*
pub fn ecdsa_recover(
    signature: &[u8; 65],
    message_hash: &[u8; 32],
    output: &mut [u8; 33],
) -> Result<()> {
    unimplemented!()
}
*)
Definition ecdsa_recover
    (signature : ref (array u8.t))
    (message_hash : ref (array u8.t))
    (output : mut_ref (array u8.t))
    : M ltac:(payment_channel.Result unit) :=
  ltac:(M.monadic (
    let signature := M.alloc (| signature |) in
    let message_hash := M.alloc (| message_hash |) in
    let output := M.alloc (| output |) in
    (never_to_any (B := core.result.Result.t unit payment_channel.Error.t)) (|
      M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |))) |)
    |)
  )).

Module Sha2x256.
  Inductive t : Set :=
  .
End Sha2x256.

Module Keccak256.
  Inductive t : Set :=
  .
End Keccak256.

Module Blake2x256.
  Inductive t : Set :=
  .
End Blake2x256.

Module Blake2x128.
  Inductive t : Set :=
  .
End Blake2x128.

Module  Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256_t.
Section Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256_t.
  Definition Self : Set := payment_channel.Sha2x256.t.
  
  (*
      type Type = [u8; 32];
  *)
  Definition Type_ : Set := array u8.t.
  
  Global Instance ℐ : payment_channel.HashOutput.Trait Self := {
    payment_channel.HashOutput.Type_ := Type_;
  }.
End Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256_t.
End Impl_payment_channel_HashOutput_for_payment_channel_Sha2x256_t.

Module  Impl_payment_channel_HashOutput_for_payment_channel_Keccak256_t.
Section Impl_payment_channel_HashOutput_for_payment_channel_Keccak256_t.
  Definition Self : Set := payment_channel.Keccak256.t.
  
  (*
      type Type = [u8; 32];
  *)
  Definition Type_ : Set := array u8.t.
  
  Global Instance ℐ : payment_channel.HashOutput.Trait Self := {
    payment_channel.HashOutput.Type_ := Type_;
  }.
End Impl_payment_channel_HashOutput_for_payment_channel_Keccak256_t.
End Impl_payment_channel_HashOutput_for_payment_channel_Keccak256_t.

Module  Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256_t.
Section Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256_t.
  Definition Self : Set := payment_channel.Blake2x256.t.
  
  (*
      type Type = [u8; 32];
  *)
  Definition Type_ : Set := array u8.t.
  
  Global Instance ℐ : payment_channel.HashOutput.Trait Self := {
    payment_channel.HashOutput.Type_ := Type_;
  }.
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256_t.
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x256_t.

Module  Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128_t.
Section Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128_t.
  Definition Self : Set := payment_channel.Blake2x128.t.
  
  (*
      type Type = [u8; 16];
  *)
  Definition Type_ : Set := array u8.t.
  
  Global Instance ℐ : payment_channel.HashOutput.Trait Self := {
    payment_channel.HashOutput.Type_ := Type_;
  }.
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128_t.
End Impl_payment_channel_HashOutput_for_payment_channel_Blake2x128_t.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256_t.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256_t.
  Definition Self : Set := payment_channel.Sha2x256.t.
  
  (*
      fn hash(input: &[u8], output: &mut <Self as HashOutput>::Type) {
          unimplemented!()
      }
  *)
  Definition hash
      (input : ref (slice u8.t))
      (output
        :
        mut_ref
          (payment_channel.HashOutput.Type_
            (Self := Self)
            (Trait := ltac:(refine _))))
      : M unit :=
    ltac:(M.monadic (
      let input := M.alloc (| input |) in
      let output := M.alloc (| output |) in
      (never_to_any (B := unit)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_hash :
    Notations.DoubleColon Self "hash" := {
    Notations.double_colon := hash;
  }.
  
  Global Instance ℐ : payment_channel.CryptoHash.Trait Self := {
    payment_channel.CryptoHash.hash := hash;
  }.
End Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256_t.
End Impl_payment_channel_CryptoHash_for_payment_channel_Sha2x256_t.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256_t.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256_t.
  Definition Self : Set := payment_channel.Keccak256.t.
  
  (*
      fn hash(input: &[u8], output: &mut <Self as HashOutput>::Type) {
          unimplemented!()
      }
  *)
  Definition hash
      (input : ref (slice u8.t))
      (output
        :
        mut_ref
          (payment_channel.HashOutput.Type_
            (Self := Self)
            (Trait := ltac:(refine _))))
      : M unit :=
    ltac:(M.monadic (
      let input := M.alloc (| input |) in
      let output := M.alloc (| output |) in
      (never_to_any (B := unit)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_hash :
    Notations.DoubleColon Self "hash" := {
    Notations.double_colon := hash;
  }.
  
  Global Instance ℐ : payment_channel.CryptoHash.Trait Self := {
    payment_channel.CryptoHash.hash := hash;
  }.
End Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256_t.
End Impl_payment_channel_CryptoHash_for_payment_channel_Keccak256_t.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256_t.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256_t.
  Definition Self : Set := payment_channel.Blake2x256.t.
  
  (*
      fn hash(input: &[u8], output: &mut <Self as HashOutput>::Type) {
          unimplemented!()
      }
  *)
  Definition hash
      (input : ref (slice u8.t))
      (output
        :
        mut_ref
          (payment_channel.HashOutput.Type_
            (Self := Self)
            (Trait := ltac:(refine _))))
      : M unit :=
    ltac:(M.monadic (
      let input := M.alloc (| input |) in
      let output := M.alloc (| output |) in
      (never_to_any (B := unit)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_hash :
    Notations.DoubleColon Self "hash" := {
    Notations.double_colon := hash;
  }.
  
  Global Instance ℐ : payment_channel.CryptoHash.Trait Self := {
    payment_channel.CryptoHash.hash := hash;
  }.
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256_t.
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x256_t.

Module  Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128_t.
Section Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128_t.
  Definition Self : Set := payment_channel.Blake2x128.t.
  
  (*
      fn hash(input: &[u8], output: &mut <Self as HashOutput>::Type) {
          unimplemented!()
      }
  *)
  Definition hash
      (input : ref (slice u8.t))
      (output
        :
        mut_ref
          (payment_channel.HashOutput.Type_
            (Self := Self)
            (Trait := ltac:(refine _))))
      : M unit :=
    ltac:(M.monadic (
      let input := M.alloc (| input |) in
      let output := M.alloc (| output |) in
      (never_to_any (B := unit)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_hash :
    Notations.DoubleColon Self "hash" := {
    Notations.double_colon := hash;
  }.
  
  Global Instance ℐ : payment_channel.CryptoHash.Trait Self := {
    payment_channel.CryptoHash.hash := hash;
  }.
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128_t.
End Impl_payment_channel_CryptoHash_for_payment_channel_Blake2x128_t.

Module  Impl_payment_channel_PaymentChannel_t.
Section Impl_payment_channel_PaymentChannel_t.
  Definition Self : Set := payment_channel.PaymentChannel.t.
  
  (*
      fn init_env() -> Env {
          unimplemented!()
      }
  *)
  Definition init_env : M payment_channel.Env.t :=
    ltac:(M.monadic (
      (never_to_any (B := payment_channel.Env.t)) (|
        M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |)))
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_init_env :
    Notations.DoubleColon Self "init_env" := {
    Notations.double_colon := init_env;
  }.
  
  (*
      fn env(&self) -> Env {
          Self::init_env()
      }
  *)
  Definition env (self : ref Self) : M payment_channel.Env.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.call (|payment_channel.PaymentChannel.t::["init_env"] |)
    )).
  
  Global Instance AssociatedFunction_env : Notations.DoubleColon Self "env" := {
    Notations.double_colon := env;
  }.
  
  (*
      fn is_signature_valid(&self, amount: Balance, signature: [u8; 65]) -> bool {
          let encodable = (self.env().account_id(), amount);
          let mut message = <Sha2x256 as HashOutput>::Type::default();
          hash_encoded::<Sha2x256, _>(&encodable, &mut message);
  
          let mut pub_key = [0; 33];
          ecdsa_recover(&signature, &message, &mut pub_key)
              .unwrap_or_else(|err| panic!("recover failed: {err:?}"));
          let mut signature_account_id = [0; 32];
          <Blake2x256 as CryptoHash>::hash(&pub_key, &mut signature_account_id);
  
          self.recipient == signature_account_id.into()
      }
  *)
  Definition is_signature_valid
      (self : ref Self)
      (amount : ltac:(payment_channel.Balance))
      (signature : array u8.t)
      : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let amount := M.alloc (| amount |) in
      let signature := M.alloc (| signature |) in
      M.read (|
        let encodable : M.Val (payment_channel.AccountId.t * u128.t) :=
          M.alloc (|
            (M.call (|(payment_channel.Env.t::["account_id"]
                (borrow
                  (M.alloc (|
                    M.call (|(payment_channel.PaymentChannel.t::["env"]
                      (M.read (| self |)))
                    |)
                  |))))
              |),
              M.read (| amount |))
          |) in
        let message : M.Val (array u8.t) :=
          M.alloc (|
            M.call (|ltac:(M.get_method (fun ℐ =>
              core.default.Default.default (Self := array u8.t) (Trait := ℐ)))
            |)
          |) in
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(payment_channel.hash_encoded
              (borrow encodable)
              (borrow_mut message))
            |)
          |) in
        let pub_key : M.Val (array u8.t) :=
          M.alloc (| repeat ((Integer.of_Z 0) : u8.t) 33 |) in
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|((core.result.Result.t
                  unit
                  payment_channel.Error.t)::["unwrap_or_else"]
              (M.call (|(payment_channel.ecdsa_recover
                (borrow signature)
                (borrow message)
                (borrow_mut pub_key))
              |))
              (fun (α0 : payment_channel.Error.t) =>
                (ltac:
                  (M.monadic_match_operator
                    (M.alloc (| α0 |))
                    [
                      fun γ =>
                        (let err := M.copy (| γ |) in
                        (never_to_any (B := unit)) (|
                          M.call (|(std.panicking.begin_panic
                            (M.read (| mk_str "recover failed: {err:?}" |)))
                          |)
                        |)) :
                        unit
                    ])) :
                unit))
            |)
          |) in
        let signature_account_id : M.Val (array u8.t) :=
          M.alloc (| repeat ((Integer.of_Z 0) : u8.t) 32 |) in
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(ltac:(M.get_method (fun ℐ =>
                payment_channel.CryptoHash.hash
                  (Self := payment_channel.Blake2x256.t)
                  (Trait := ℐ)))
              (pointer_coercion "Unsize" (borrow pub_key))
              (borrow_mut signature_account_id))
            |)
          |) in
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.cmp.PartialEq.eq
                (Self := payment_channel.AccountId.t)
                (Rhs := payment_channel.AccountId.t)
                (Trait := ℐ)))
            (borrow
              (payment_channel.PaymentChannel.Get_recipient
                (deref (M.read (| self |)))))
            (borrow
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.convert.Into.into
                      (Self := array u8.t)
                      (T := payment_channel.AccountId.t)
                      (Trait := ℐ)))
                  (M.read (| signature_account_id |)))
                |)
              |))))
          |)
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_is_signature_valid :
    Notations.DoubleColon Self "is_signature_valid" := {
    Notations.double_colon := is_signature_valid;
  }.
  
  (*
      pub fn new(recipient: AccountId, close_duration: Timestamp) -> Self {
          Self {
              sender: Self::init_env().caller(),
              recipient,
              expiration: None,
              withdrawn: 0,
              close_duration,
          }
      }
  *)
  Definition new
      (recipient : payment_channel.AccountId.t)
      (close_duration : ltac:(payment_channel.Timestamp))
      : M Self :=
    ltac:(M.monadic (
      let recipient := M.alloc (| recipient |) in
      let close_duration := M.alloc (| close_duration |) in
      {|
        payment_channel.PaymentChannel.sender :=
          M.call (|(payment_channel.Env.t::["caller"]
            (borrow
              (M.alloc (|
                M.call (|payment_channel.PaymentChannel.t::["init_env"] |)
              |))))
          |);
        payment_channel.PaymentChannel.recipient := M.read (| recipient |);
        payment_channel.PaymentChannel.expiration := core.option.Option.None;
        payment_channel.PaymentChannel.withdrawn := (Integer.of_Z 0) : u128.t;
        payment_channel.PaymentChannel.close_duration :=
          M.read (| close_duration |);
      |} : payment_channel.PaymentChannel.t
    )).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      fn close_inner(&mut self, amount: Balance, signature: [u8; 65]) -> Result<()> {
          if self.env().caller() != self.recipient {
              return Err(Error::CallerIsNotRecipient);
          }
  
          if amount < self.withdrawn {
              return Err(Error::AmountIsLessThanWithdrawn);
          }
  
          // Signature validation
          if !self.is_signature_valid(amount, signature) {
              return Err(Error::InvalidSignature);
          }
  
          self.env()
              .transfer(self.recipient, amount - self.withdrawn)
              .map_err(|_| Error::TransferFailed)?;
  
          Ok(())
      }
  *)
  Definition close_inner
      (self : mut_ref Self)
      (amount : ltac:(payment_channel.Balance))
      (signature : array u8.t)
      : M ltac:(payment_channel.Result unit) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let amount := M.alloc (| amount |) in
      let signature := M.alloc (| signature |) in
      let return_ := M.return_ (R := ltac:(payment_channel.Result unit)) in
      M.catch_return
        (M.read (|
          let _ : M.Val unit :=
            if
              M.read (|
                use
                  (M.alloc (|
                    M.call (|(ltac:(M.get_method (fun ℐ =>
                        core.cmp.PartialEq.ne
                          (Self := payment_channel.AccountId.t)
                          (Rhs := payment_channel.AccountId.t)
                          (Trait := ℐ)))
                      (borrow
                        (M.alloc (|
                          M.call (|(payment_channel.Env.t::["caller"]
                            (borrow
                              (M.alloc (|
                                M.call (|(payment_channel.PaymentChannel.t::["env"]
                                  (borrow (deref (M.read (| self |)))))
                                |)
                              |))))
                          |)
                        |)))
                      (borrow
                        (payment_channel.PaymentChannel.Get_recipient
                          (deref (M.read (| self |))))))
                    |)
                  |))
              |)
            then
              M.alloc (|
                (never_to_any (B := unit)) (|
                  M.read (|
                    return_
                      (core.result.Result.Err
                        payment_channel.Error.CallerIsNotRecipient)
                  |)
                |)
              |)
            else
              M.alloc (| tt |) in
          let _ : M.Val unit :=
            if
              M.read (|
                use
                  (M.alloc (|
                    BinOp.Pure.lt
                      (M.read (| amount |))
                      (M.read (|
                        payment_channel.PaymentChannel.Get_withdrawn
                          (deref (M.read (| self |)))
                      |))
                  |))
              |)
            then
              M.alloc (|
                (never_to_any (B := unit)) (|
                  M.read (|
                    return_
                      (core.result.Result.Err
                        payment_channel.Error.AmountIsLessThanWithdrawn)
                  |)
                |)
              |)
            else
              M.alloc (| tt |) in
          let _ : M.Val unit :=
            if
              M.read (|
                use
                  (M.alloc (|
                    UnOp.not
                      (M.call (|(payment_channel.PaymentChannel.t::["is_signature_valid"]
                        (borrow (deref (M.read (| self |))))
                        (M.read (| amount |))
                        (M.read (| signature |)))
                      |))
                  |))
              |)
            then
              M.alloc (|
                (never_to_any (B := unit)) (|
                  M.read (|
                    return_
                      (core.result.Result.Err
                        payment_channel.Error.InvalidSignature)
                  |)
                |)
              |)
            else
              M.alloc (| tt |) in
          let _ : M.Val unit :=
            ltac:
              (M.monadic_match_operator
                (M.alloc (|
                  M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t unit payment_channel.Error.t)
                        (Trait := ℐ)))
                    (M.call (|((core.result.Result.t
                          unit
                          payment_channel.Error.t)::["map_err"]
                      (M.call (|(payment_channel.Env.t::["transfer"]
                        (borrow
                          (M.alloc (|
                            M.call (|(payment_channel.PaymentChannel.t::["env"]
                              (borrow (deref (M.read (| self |)))))
                            |)
                          |)))
                        (M.read (|
                          payment_channel.PaymentChannel.Get_recipient
                            (deref (M.read (| self |)))
                        |))
                        (BinOp.Panic.sub (|
                          M.read (| amount |),
                          M.read (|
                            payment_channel.PaymentChannel.Get_withdrawn
                              (deref (M.read (| self |)))
                          |)
                        |)))
                      |))
                      (fun (α0 : payment_channel.Error.t) =>
                        (ltac:
                          (M.monadic_match_operator
                            (M.alloc (| α0 |))
                            [
                              fun γ =>
                                payment_channel.Error.TransferFailed :
                                payment_channel.Error.t
                            ])) :
                        payment_channel.Error.t))
                    |)))
                  |)
                |))
                [
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              payment_channel.Error.t)
                            unit)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Break _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                      let residual := M.copy (| γ0_0 |) in
                      M.alloc (|
                        (never_to_any (B := unit)) (|
                          M.read (|
                            return_
                              (M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.try_trait.FromResidual.from_residual
                                    (Self :=
                                      core.result.Result.t
                                        unit
                                        payment_channel.Error.t)
                                    (R :=
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        payment_channel.Error.t)
                                    (Trait := ℐ)))
                                (M.read (| residual |)))
                              |))
                          |)
                        |)
                      |)
                    | _ => M.break_match(||)
                    end :
                    M.Val unit;
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              payment_channel.Error.t)
                            unit)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Continue _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                      let val := M.copy (| γ0_0 |) in
                      val
                    | _ => M.break_match(||)
                    end :
                    M.Val unit
                ]) in
          M.alloc (| core.result.Result.Ok tt |)
        |))
    )).
  
  Global Instance AssociatedFunction_close_inner :
    Notations.DoubleColon Self "close_inner" := {
    Notations.double_colon := close_inner;
  }.
  
  (*
      pub fn close(&mut self, amount: Balance, signature: [u8; 65]) -> Result<()> {
          self.close_inner(amount, signature)?;
          self.env().terminate_contract(self.sender);
  
          Ok(())
      }
  *)
  Definition close
      (self : mut_ref Self)
      (amount : ltac:(payment_channel.Balance))
      (signature : array u8.t)
      : M ltac:(payment_channel.Result unit) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let amount := M.alloc (| amount |) in
      let signature := M.alloc (| signature |) in
      let return_ := M.return_ (R := ltac:(payment_channel.Result unit)) in
      M.catch_return
        (M.read (|
          let _ : M.Val unit :=
            ltac:
              (M.monadic_match_operator
                (M.alloc (|
                  M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t unit payment_channel.Error.t)
                        (Trait := ℐ)))
                    (M.call (|(payment_channel.PaymentChannel.t::["close_inner"]
                      (M.read (| self |))
                      (M.read (| amount |))
                      (M.read (| signature |)))
                    |)))
                  |)
                |))
                [
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              payment_channel.Error.t)
                            unit)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Break _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                      let residual := M.copy (| γ0_0 |) in
                      M.alloc (|
                        (never_to_any (B := unit)) (|
                          M.read (|
                            return_
                              (M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.try_trait.FromResidual.from_residual
                                    (Self :=
                                      core.result.Result.t
                                        unit
                                        payment_channel.Error.t)
                                    (R :=
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        payment_channel.Error.t)
                                    (Trait := ℐ)))
                                (M.read (| residual |)))
                              |))
                          |)
                        |)
                      |)
                    | _ => M.break_match(||)
                    end :
                    M.Val unit;
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              payment_channel.Error.t)
                            unit)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Continue _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                      let val := M.copy (| γ0_0 |) in
                      val
                    | _ => M.break_match(||)
                    end :
                    M.Val unit
                ]) in
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(payment_channel.Env.t::["terminate_contract"]
                (borrow
                  (M.alloc (|
                    M.call (|(payment_channel.PaymentChannel.t::["env"]
                      (borrow (deref (M.read (| self |)))))
                    |)
                  |)))
                (M.read (|
                  payment_channel.PaymentChannel.Get_sender
                    (deref (M.read (| self |)))
                |)))
              |)
            |) in
          M.alloc (| core.result.Result.Ok tt |)
        |))
    )).
  
  Global Instance AssociatedFunction_close :
    Notations.DoubleColon Self "close" := {
    Notations.double_colon := close;
  }.
  
  (*
      pub fn start_sender_close(&mut self) -> Result<()> {
          if self.env().caller() != self.sender {
              return Err(Error::CallerIsNotSender);
          }
  
          let now = self.env().block_timestamp();
          let expiration = now + self.close_duration;
  
          self.env()
              .emit_event(Event::SenderCloseStarted(SenderCloseStarted {
                  expiration,
                  close_duration: self.close_duration,
              }));
  
          self.expiration = Some(expiration);
  
          Ok(())
      }
  *)
  Definition start_sender_close
      (self : mut_ref Self)
      : M ltac:(payment_channel.Result unit) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let return_ := M.return_ (R := ltac:(payment_channel.Result unit)) in
      M.catch_return
        (M.read (|
          let _ : M.Val unit :=
            if
              M.read (|
                use
                  (M.alloc (|
                    M.call (|(ltac:(M.get_method (fun ℐ =>
                        core.cmp.PartialEq.ne
                          (Self := payment_channel.AccountId.t)
                          (Rhs := payment_channel.AccountId.t)
                          (Trait := ℐ)))
                      (borrow
                        (M.alloc (|
                          M.call (|(payment_channel.Env.t::["caller"]
                            (borrow
                              (M.alloc (|
                                M.call (|(payment_channel.PaymentChannel.t::["env"]
                                  (borrow (deref (M.read (| self |)))))
                                |)
                              |))))
                          |)
                        |)))
                      (borrow
                        (payment_channel.PaymentChannel.Get_sender
                          (deref (M.read (| self |))))))
                    |)
                  |))
              |)
            then
              M.alloc (|
                (never_to_any (B := unit)) (|
                  M.read (|
                    return_
                      (core.result.Result.Err
                        payment_channel.Error.CallerIsNotSender)
                  |)
                |)
              |)
            else
              M.alloc (| tt |) in
          let now : M.Val u64.t :=
            M.alloc (|
              M.call (|(payment_channel.Env.t::["block_timestamp"]
                (borrow
                  (M.alloc (|
                    M.call (|(payment_channel.PaymentChannel.t::["env"]
                      (borrow (deref (M.read (| self |)))))
                    |)
                  |))))
              |)
            |) in
          let expiration : M.Val u64.t :=
            M.alloc (|
              BinOp.Panic.add (|
                M.read (| now |),
                M.read (|
                  payment_channel.PaymentChannel.Get_close_duration
                    (deref (M.read (| self |)))
                |)
              |)
            |) in
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(payment_channel.Env.t::["emit_event"]
                (borrow
                  (M.alloc (|
                    M.call (|(payment_channel.PaymentChannel.t::["env"]
                      (borrow (deref (M.read (| self |)))))
                    |)
                  |)))
                (payment_channel.Event.SenderCloseStarted
                  ({|
                    payment_channel.SenderCloseStarted.expiration :=
                      M.read (| expiration |);
                    payment_channel.SenderCloseStarted.close_duration :=
                      M.read (|
                        payment_channel.PaymentChannel.Get_close_duration
                          (deref (M.read (| self |)))
                      |);
                  |} : payment_channel.SenderCloseStarted.t)))
              |)
            |) in
          let _ : M.Val unit :=
            assign (|
              payment_channel.PaymentChannel.Get_expiration
                (deref (M.read (| self |))),
              core.option.Option.Some (M.read (| expiration |))
            |) in
          M.alloc (| core.result.Result.Ok tt |)
        |))
    )).
  
  Global Instance AssociatedFunction_start_sender_close :
    Notations.DoubleColon Self "start_sender_close" := {
    Notations.double_colon := start_sender_close;
  }.
  
  (*
      pub fn claim_timeout(&mut self) -> Result<()> {
          match self.expiration {
              Some(expiration) => {
                  // expiration is set. Check if it's reached and if so, release the
                  // funds and terminate the contract.
                  let now = self.env().block_timestamp();
                  if now < expiration {
                      return Err(Error::NotYetExpired);
                  }
  
                  self.env().terminate_contract(self.sender);
  
                  Ok(())
              }
  
              None => Err(Error::NotYetExpired),
          }
      }
  *)
  Definition claim_timeout
      (self : mut_ref Self)
      : M ltac:(payment_channel.Result unit) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let return_ := M.return_ (R := ltac:(payment_channel.Result unit)) in
      M.catch_return
        (M.read (|
          ltac:
            (M.monadic_match_operator
              (payment_channel.PaymentChannel.Get_expiration
                (deref (M.read (| self |))))
              [
                fun (γ : M.Val (core.option.Option.t u64.t)) =>
                  match M.read (| γ |) with
                  | core.option.Option.Some _ =>
                    let γ0_0 := core.option.Option.Get_Some_0 γ in
                    let expiration := M.copy (| γ0_0 |) in
                    let now : M.Val u64.t :=
                      M.alloc (|
                        M.call (|(payment_channel.Env.t::["block_timestamp"]
                          (borrow
                            (M.alloc (|
                              M.call (|(payment_channel.PaymentChannel.t::["env"]
                                (borrow (deref (M.read (| self |)))))
                              |)
                            |))))
                        |)
                      |) in
                    let _ : M.Val unit :=
                      if
                        M.read (|
                          use
                            (M.alloc (|
                              BinOp.Pure.lt
                                (M.read (| now |))
                                (M.read (| expiration |))
                            |))
                        |)
                      then
                        M.alloc (|
                          (never_to_any (B := unit)) (|
                            M.read (|
                              return_
                                (core.result.Result.Err
                                  payment_channel.Error.NotYetExpired)
                            |)
                          |)
                        |)
                      else
                        M.alloc (| tt |) in
                    let _ : M.Val unit :=
                      M.alloc (|
                        M.call (|(payment_channel.Env.t::["terminate_contract"]
                          (borrow
                            (M.alloc (|
                              M.call (|(payment_channel.PaymentChannel.t::["env"]
                                (borrow (deref (M.read (| self |)))))
                              |)
                            |)))
                          (M.read (|
                            payment_channel.PaymentChannel.Get_sender
                              (deref (M.read (| self |)))
                          |)))
                        |)
                      |) in
                    M.alloc (| core.result.Result.Ok tt |)
                  | _ => M.break_match(||)
                  end :
                  M.Val (core.result.Result.t unit payment_channel.Error.t);
                fun (γ : M.Val (core.option.Option.t u64.t)) =>
                  match M.read (| γ |) with
                  | core.option.Option.None =>
                    M.alloc (|
                      core.result.Result.Err payment_channel.Error.NotYetExpired
                    |)
                  | _ => M.break_match(||)
                  end :
                  M.Val (core.result.Result.t unit payment_channel.Error.t)
              ])
        |))
    )).
  
  Global Instance AssociatedFunction_claim_timeout :
    Notations.DoubleColon Self "claim_timeout" := {
    Notations.double_colon := claim_timeout;
  }.
  
  (*
      pub fn withdraw(&mut self, amount: Balance, signature: [u8; 65]) -> Result<()> {
          if self.env().caller() != self.recipient {
              return Err(Error::CallerIsNotRecipient);
          }
  
          // Signature validation
          if !self.is_signature_valid(amount, signature) {
              return Err(Error::InvalidSignature);
          }
  
          // Make sure there's something to withdraw (guards against underflow)
          if amount < self.withdrawn {
              return Err(Error::AmountIsLessThanWithdrawn);
          }
  
          let amount_to_withdraw = amount - self.withdrawn;
          self.withdrawn += amount_to_withdraw;
  
          self.env()
              .transfer(self.recipient, amount_to_withdraw)
              .map_err(|_| Error::TransferFailed)?;
  
          Ok(())
      }
  *)
  Definition withdraw
      (self : mut_ref Self)
      (amount : ltac:(payment_channel.Balance))
      (signature : array u8.t)
      : M ltac:(payment_channel.Result unit) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let amount := M.alloc (| amount |) in
      let signature := M.alloc (| signature |) in
      let return_ := M.return_ (R := ltac:(payment_channel.Result unit)) in
      M.catch_return
        (M.read (|
          let _ : M.Val unit :=
            if
              M.read (|
                use
                  (M.alloc (|
                    M.call (|(ltac:(M.get_method (fun ℐ =>
                        core.cmp.PartialEq.ne
                          (Self := payment_channel.AccountId.t)
                          (Rhs := payment_channel.AccountId.t)
                          (Trait := ℐ)))
                      (borrow
                        (M.alloc (|
                          M.call (|(payment_channel.Env.t::["caller"]
                            (borrow
                              (M.alloc (|
                                M.call (|(payment_channel.PaymentChannel.t::["env"]
                                  (borrow (deref (M.read (| self |)))))
                                |)
                              |))))
                          |)
                        |)))
                      (borrow
                        (payment_channel.PaymentChannel.Get_recipient
                          (deref (M.read (| self |))))))
                    |)
                  |))
              |)
            then
              M.alloc (|
                (never_to_any (B := unit)) (|
                  M.read (|
                    return_
                      (core.result.Result.Err
                        payment_channel.Error.CallerIsNotRecipient)
                  |)
                |)
              |)
            else
              M.alloc (| tt |) in
          let _ : M.Val unit :=
            if
              M.read (|
                use
                  (M.alloc (|
                    UnOp.not
                      (M.call (|(payment_channel.PaymentChannel.t::["is_signature_valid"]
                        (borrow (deref (M.read (| self |))))
                        (M.read (| amount |))
                        (M.read (| signature |)))
                      |))
                  |))
              |)
            then
              M.alloc (|
                (never_to_any (B := unit)) (|
                  M.read (|
                    return_
                      (core.result.Result.Err
                        payment_channel.Error.InvalidSignature)
                  |)
                |)
              |)
            else
              M.alloc (| tt |) in
          let _ : M.Val unit :=
            if
              M.read (|
                use
                  (M.alloc (|
                    BinOp.Pure.lt
                      (M.read (| amount |))
                      (M.read (|
                        payment_channel.PaymentChannel.Get_withdrawn
                          (deref (M.read (| self |)))
                      |))
                  |))
              |)
            then
              M.alloc (|
                (never_to_any (B := unit)) (|
                  M.read (|
                    return_
                      (core.result.Result.Err
                        payment_channel.Error.AmountIsLessThanWithdrawn)
                  |)
                |)
              |)
            else
              M.alloc (| tt |) in
          let amount_to_withdraw : M.Val u128.t :=
            M.alloc (|
              BinOp.Panic.sub (|
                M.read (| amount |),
                M.read (|
                  payment_channel.PaymentChannel.Get_withdrawn
                    (deref (M.read (| self |)))
                |)
              |)
            |) in
          let _ : M.Val unit :=
            let β : M.Val u128.t :=
              payment_channel.PaymentChannel.Get_withdrawn
                (deref (M.read (| self |))) in
            assign (|
              β,
              BinOp.Panic.add (| M.read (| β |), M.read (| amount_to_withdraw |)
              |)
            |) in
          let _ : M.Val unit :=
            ltac:
              (M.monadic_match_operator
                (M.alloc (|
                  M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t unit payment_channel.Error.t)
                        (Trait := ℐ)))
                    (M.call (|((core.result.Result.t
                          unit
                          payment_channel.Error.t)::["map_err"]
                      (M.call (|(payment_channel.Env.t::["transfer"]
                        (borrow
                          (M.alloc (|
                            M.call (|(payment_channel.PaymentChannel.t::["env"]
                              (borrow (deref (M.read (| self |)))))
                            |)
                          |)))
                        (M.read (|
                          payment_channel.PaymentChannel.Get_recipient
                            (deref (M.read (| self |)))
                        |))
                        (M.read (| amount_to_withdraw |)))
                      |))
                      (fun (α0 : payment_channel.Error.t) =>
                        (ltac:
                          (M.monadic_match_operator
                            (M.alloc (| α0 |))
                            [
                              fun γ =>
                                payment_channel.Error.TransferFailed :
                                payment_channel.Error.t
                            ])) :
                        payment_channel.Error.t))
                    |)))
                  |)
                |))
                [
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              payment_channel.Error.t)
                            unit)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Break _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                      let residual := M.copy (| γ0_0 |) in
                      M.alloc (|
                        (never_to_any (B := unit)) (|
                          M.read (|
                            return_
                              (M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.try_trait.FromResidual.from_residual
                                    (Self :=
                                      core.result.Result.t
                                        unit
                                        payment_channel.Error.t)
                                    (R :=
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        payment_channel.Error.t)
                                    (Trait := ℐ)))
                                (M.read (| residual |)))
                              |))
                          |)
                        |)
                      |)
                    | _ => M.break_match(||)
                    end :
                    M.Val unit;
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              payment_channel.Error.t)
                            unit)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Continue _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                      let val := M.copy (| γ0_0 |) in
                      val
                    | _ => M.break_match(||)
                    end :
                    M.Val unit
                ]) in
          M.alloc (| core.result.Result.Ok tt |)
        |))
    )).
  
  Global Instance AssociatedFunction_withdraw :
    Notations.DoubleColon Self "withdraw" := {
    Notations.double_colon := withdraw;
  }.
  
  (*
      pub fn get_sender(&self) -> AccountId {
          self.sender
      }
  *)
  Definition get_sender (self : ref Self) : M payment_channel.AccountId.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        payment_channel.PaymentChannel.Get_sender (deref (M.read (| self |)))
      |)
    )).
  
  Global Instance AssociatedFunction_get_sender :
    Notations.DoubleColon Self "get_sender" := {
    Notations.double_colon := get_sender;
  }.
  
  (*
      pub fn get_recipient(&self) -> AccountId {
          self.recipient
      }
  *)
  Definition get_recipient (self : ref Self) : M payment_channel.AccountId.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        payment_channel.PaymentChannel.Get_recipient (deref (M.read (| self |)))
      |)
    )).
  
  Global Instance AssociatedFunction_get_recipient :
    Notations.DoubleColon Self "get_recipient" := {
    Notations.double_colon := get_recipient;
  }.
  
  (*
      pub fn get_expiration(&self) -> Option<Timestamp> {
          self.expiration
      }
  *)
  Definition get_expiration
      (self : ref Self)
      : M (core.option.Option.t ltac:(payment_channel.Timestamp)) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        payment_channel.PaymentChannel.Get_expiration
          (deref (M.read (| self |)))
      |)
    )).
  
  Global Instance AssociatedFunction_get_expiration :
    Notations.DoubleColon Self "get_expiration" := {
    Notations.double_colon := get_expiration;
  }.
  
  (*
      pub fn get_withdrawn(&self) -> Balance {
          self.withdrawn
      }
  *)
  Definition get_withdrawn
      (self : ref Self)
      : M ltac:(payment_channel.Balance) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        payment_channel.PaymentChannel.Get_withdrawn (deref (M.read (| self |)))
      |)
    )).
  
  Global Instance AssociatedFunction_get_withdrawn :
    Notations.DoubleColon Self "get_withdrawn" := {
    Notations.double_colon := get_withdrawn;
  }.
  
  (*
      pub fn get_close_duration(&self) -> Timestamp {
          self.close_duration
      }
  *)
  Definition get_close_duration
      (self : ref Self)
      : M ltac:(payment_channel.Timestamp) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        payment_channel.PaymentChannel.Get_close_duration
          (deref (M.read (| self |)))
      |)
    )).
  
  Global Instance AssociatedFunction_get_close_duration :
    Notations.DoubleColon Self "get_close_duration" := {
    Notations.double_colon := get_close_duration;
  }.
  
  (*
      pub fn get_balance(&self) -> Balance {
          self.env().balance()
      }
  *)
  Definition get_balance (self : ref Self) : M ltac:(payment_channel.Balance) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.call (|(payment_channel.Env.t::["balance"]
        (borrow
          (M.alloc (|
            M.call (|(payment_channel.PaymentChannel.t::["env"]
              (M.read (| self |)))
            |)
          |))))
      |)
    )).
  
  Global Instance AssociatedFunction_get_balance :
    Notations.DoubleColon Self "get_balance" := {
    Notations.double_colon := get_balance;
  }.
End Impl_payment_channel_PaymentChannel_t.
End Impl_payment_channel_PaymentChannel_t.
