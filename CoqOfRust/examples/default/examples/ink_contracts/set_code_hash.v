(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Error.
  Inductive t : Set :=
  .
End Error.

(*
fn set_code_hash<E>(code_hash: &E) -> Result<(), Error> {
    unimplemented!()
}
*)
Definition set_code_hash
    {E : Set}
    (code_hash : ref E)
    : M (core.result.Result.t unit set_code_hash.Error.t) :=
  let* code_hash := M.alloc code_hash in
  let* α0 : ref str.t := M.read (mk_str "not implemented") in
  let* α1 : never.t := M.call (core.panicking.panic α0) in
  never_to_any α1.

Module  Incrementer.
Section Incrementer.
  Record t : Set := {
    count : u32.t;
  }.
  
  Definition Get_count :=
    Ref.map (fun α => Some α.(count)) (fun β α => Some (α <| count := β |>)).
End Incrementer.
End Incrementer.

Module  Impl_core_default_Default_for_set_code_hash_Incrementer_t.
Section Impl_core_default_Default_for_set_code_hash_Incrementer_t.
  Definition Self : Set := set_code_hash.Incrementer.t.
  
  (*
  Default
  *)
  Definition default : M set_code_hash.Incrementer.t :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.default.Default.default (Self := u32.t) (Trait := ℐ))) in
    let* α1 : u32.t := M.call α0 in
    M.pure {| set_code_hash.Incrementer.count := α1; |}.
  
  Axiom default_is_impl : impl Self "default" = default.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_set_code_hash_Incrementer_t.
End Impl_core_default_Default_for_set_code_hash_Incrementer_t.

Module  Impl_set_code_hash_Incrementer_t.
Section Impl_set_code_hash_Incrementer_t.
  Definition Self : Set := set_code_hash.Incrementer.t.
  
  (*
      pub fn new() -> Self {
          Default::default()
      }
  *)
  Definition new : M Self :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.default.Default.default
          (Self := set_code_hash.Incrementer.t)
          (Trait := ℐ))) in
    M.call α0.
  
  Axiom new_is_impl : impl Self "new" = new.
  
  (*
      pub fn inc(&mut self) {
          self.count += 1;
          println!(
              "The new count is {}, it was modified using the original contract code.",
              self.count
          );
      }
  *)
  Definition inc (self : mut_ref Self) : M unit :=
    let* self := M.alloc self in
    let* _ : M.Val unit :=
      let* β : M.Val u32.t :=
        let* α0 : mut_ref set_code_hash.Incrementer.t := M.read self in
        M.pure (set_code_hash.Incrementer.Get_count (deref α0)) in
      let* α0 := M.read β in
      let* α1 := BinOp.Panic.add α0 ((Integer.of_Z 1) : u32.t) in
      assign β α1 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : ref str.t := M.read (mk_str "The new count is ") in
        let* α1 : ref str.t :=
          M.read
            (mk_str ", it was modified using the original contract code.
") in
        let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
        let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
        let* α4 : ref (slice (ref str.t)) :=
          M.read (pointer_coercion "Unsize" α3) in
        let* α5 : mut_ref set_code_hash.Incrementer.t := M.read self in
        let* α6 : core.fmt.rt.Argument.t :=
          M.call
            (impl core.fmt.rt.Argument.t "new_display"
              (borrow (set_code_hash.Incrementer.Get_count (deref α5)))) in
        let* α7 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α6 ] in
        let* α8 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
          M.alloc (borrow α7) in
        let* α9 : ref (slice core.fmt.rt.Argument.t) :=
          M.read (pointer_coercion "Unsize" α8) in
        let* α10 : core.fmt.Arguments.t :=
          M.call (impl core.fmt.Arguments.t "new_v1" α4 α9) in
        let* α11 : unit := M.call (std.io.stdio._print α10) in
        M.alloc α11 in
      M.alloc tt in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Axiom inc_is_impl : impl Self "inc" = inc.
  
  (*
      pub fn get(&self) -> u32 {
          self.count
      }
  *)
  Definition get (self : ref Self) : M u32.t :=
    let* self := M.alloc self in
    let* α0 : ref set_code_hash.Incrementer.t := M.read self in
    M.read (set_code_hash.Incrementer.Get_count (deref α0)).
  
  Axiom get_is_impl : impl Self "get" = get.
  
  (*
      pub fn set_code(&mut self, code_hash: [u8; 32]) {
          set_code_hash(&code_hash).unwrap_or_else(|err| {
              panic!("Failed to `set_code_hash` to {code_hash:?} due to {err:?}")
          });
          println!("Switched code hash to {:?}.", code_hash);
      }
  *)
  Definition set_code (self : mut_ref Self) (code_hash : array u8.t) : M unit :=
    let* self := M.alloc self in
    let* code_hash := M.alloc code_hash in
    let* _ : M.Val unit :=
      let* α0 : core.result.Result.t unit set_code_hash.Error.t :=
        M.call (set_code_hash.set_code_hash (borrow code_hash)) in
      let* α1 : unit :=
        M.call
          (impl
              (core.result.Result.t unit set_code_hash.Error.t)
              "unwrap_or_else"
            α0
            (fun (α0 : set_code_hash.Error.t) =>
              (let* α0 := M.alloc α0 in
              match_operator
                α0
                [
                  fun γ =>
                    (let* err := M.copy γ in
                    let* α0 : ref str.t :=
                      M.read
                        (mk_str
                          "Failed to `set_code_hash` to {code_hash:?} due to {err:?}") in
                    let* α1 : never.t :=
                      M.call (std.panicking.begin_panic α0) in
                    never_to_any α1) :
                    M unit
                ]) :
              M unit)) in
      M.alloc α1 in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : ref str.t := M.read (mk_str "Switched code hash to ") in
        let* α1 : ref str.t := M.read (mk_str ".
") in
        let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
        let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
        let* α4 : ref (slice (ref str.t)) :=
          M.read (pointer_coercion "Unsize" α3) in
        let* α5 : core.fmt.rt.Argument.t :=
          M.call (impl core.fmt.rt.Argument.t "new_debug" (borrow code_hash)) in
        let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
        let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
          M.alloc (borrow α6) in
        let* α8 : ref (slice core.fmt.rt.Argument.t) :=
          M.read (pointer_coercion "Unsize" α7) in
        let* α9 : core.fmt.Arguments.t :=
          M.call (impl core.fmt.Arguments.t "new_v1" α4 α8) in
        let* α10 : unit := M.call (std.io.stdio._print α9) in
        M.alloc α10 in
      M.alloc tt in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Axiom set_code_is_impl : impl Self "set_code" = set_code.
End Impl_set_code_hash_Incrementer_t.
End Impl_set_code_hash_Incrementer_t.
