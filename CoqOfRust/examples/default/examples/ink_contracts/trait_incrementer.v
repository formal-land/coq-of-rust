(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Increment.
Section Increment.
  Class Trait (Self : Set) : Type := {
    inc : (mut_ref Self) -> M unit;
    get : (ref Self) -> M u64.t;
  }.
  
End Increment.
End Increment.

Module  Reset.
Section Reset.
  Class Trait (Self : Set) : Type := {
    reset : (mut_ref Self) -> M unit;
  }.
  
End Reset.
End Reset.

Module  Incrementer.
Section Incrementer.
  Record t : Set := {
    value : u64.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End Incrementer.
End Incrementer.

Module  Impl_trait_incrementer_Incrementer_t.
Section Impl_trait_incrementer_Incrementer_t.
  Definition Self : Set := trait_incrementer.Incrementer.t.
  
  (*
      pub fn new(init_value: u64) -> Self {
          Self { value: init_value }
      }
  *)
  Definition new (init_value : u64.t) : M Self :=
    ltac:(M.monadic (
      let init_value := M.alloc (| init_value |) in
      {| trait_incrementer.Incrementer.value := M.read (| init_value |);
      |} : trait_incrementer.Incrementer.t
    )).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn inc_by(&mut self, delta: u64) {
          self.value += delta;
      }
  *)
  Definition inc_by (self : mut_ref Self) (delta : u64.t) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let delta := M.alloc (| delta |) in
      M.read (|
        let _ : M.Val unit :=
          let β : M.Val u64.t :=
            trait_incrementer.Incrementer.Get_value
              (deref (M.read (| self |))) in
          assign (| β, BinOp.Panic.add (| M.read (| β |), M.read (| delta |) |)
          |) in
        M.alloc (| tt |)
      |)
    )).
  
  Global Instance AssociatedFunction_inc_by :
    Notations.DoubleColon Self "inc_by" := {
    Notations.double_colon := inc_by;
  }.
End Impl_trait_incrementer_Incrementer_t.
End Impl_trait_incrementer_Incrementer_t.

Module  Impl_trait_incrementer_Increment_for_trait_incrementer_Incrementer_t.
Section Impl_trait_incrementer_Increment_for_trait_incrementer_Incrementer_t.
  Definition Self : Set := trait_incrementer.Incrementer.t.
  
  (*
      fn inc(&mut self) {
          self.inc_by(1)
      }
  *)
  Definition inc (self : mut_ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.call (|(trait_incrementer.Incrementer.t::["inc_by"]
        (M.read (| self |))
        ((Integer.of_Z 1) : u64.t))
      |)
    )).
  
  Global Instance AssociatedFunction_inc : Notations.DoubleColon Self "inc" := {
    Notations.double_colon := inc;
  }.
  
  (*
      fn get(&self) -> u64 {
          self.value
      }
  *)
  Definition get (self : ref Self) : M u64.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        trait_incrementer.Incrementer.Get_value (deref (M.read (| self |)))
      |)
    )).
  
  Global Instance AssociatedFunction_get : Notations.DoubleColon Self "get" := {
    Notations.double_colon := get;
  }.
  
  Global Instance ℐ : trait_incrementer.Increment.Trait Self := {
    trait_incrementer.Increment.inc := inc;
    trait_incrementer.Increment.get := get;
  }.
End Impl_trait_incrementer_Increment_for_trait_incrementer_Incrementer_t.
End Impl_trait_incrementer_Increment_for_trait_incrementer_Incrementer_t.

Module  Impl_trait_incrementer_Reset_for_trait_incrementer_Incrementer_t.
Section Impl_trait_incrementer_Reset_for_trait_incrementer_Incrementer_t.
  Definition Self : Set := trait_incrementer.Incrementer.t.
  
  (*
      fn reset(&mut self) {
          self.value = 0;
      }
  *)
  Definition reset (self : mut_ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        let _ : M.Val unit :=
          assign (|
            trait_incrementer.Incrementer.Get_value (deref (M.read (| self |))),
            (Integer.of_Z 0) : u64.t
          |) in
        M.alloc (| tt |)
      |)
    )).
  
  Global Instance AssociatedFunction_reset :
    Notations.DoubleColon Self "reset" := {
    Notations.double_colon := reset;
  }.
  
  Global Instance ℐ : trait_incrementer.Reset.Trait Self := {
    trait_incrementer.Reset.reset := reset;
  }.
End Impl_trait_incrementer_Reset_for_trait_incrementer_Incrementer_t.
End Impl_trait_incrementer_Reset_for_trait_incrementer_Incrementer_t.
