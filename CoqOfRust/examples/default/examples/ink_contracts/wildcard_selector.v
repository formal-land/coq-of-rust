(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn decode_input<T>() -> Result<T, ()> {
    unimplemented!()
}
*)
Definition decode_input {T : Set} : M (core.result.Result.t T unit) :=
  ltac:(M.monadic ((
    (never_to_any (B := core.result.Result.t T unit)) (|
      M.call (|(core.panicking.panic (M.read (| mk_str "not implemented" |))) |)
    |)
  ) : core.result.Result.t T unit)).

Module  WildcardSelector.
Section WildcardSelector.
  Inductive t : Set := Build.
End WildcardSelector.
End WildcardSelector.

Module  Impl_wildcard_selector_WildcardSelector_t.
Section Impl_wildcard_selector_WildcardSelector_t.
  Definition Self : Set := wildcard_selector.WildcardSelector.t.
  
  (*
      pub fn new() -> Self {
          Self {}
      }
  *)
  Definition new : M Self :=
    ltac:(M.monadic (( wildcard_selector.WildcardSelector.Build
    ) : Self)).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      pub fn wildcard(&mut self) {
          let (_selector, _message) = decode_input::<([u8; 4], String)>().unwrap();
          println!("Wildcard selector: {:?}, message: {}", _selector, _message);
      }
  *)
  Definition wildcard (self : mut_ref Self) : M unit :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|((core.result.Result.t
                    ((array u8.t) * alloc.string.String.t)
                    unit)::["unwrap"]
                (M.call (|wildcard_selector.decode_input |)))
              |)
            |))
            [
              fun (γ : M.Val ((array u8.t) * alloc.string.String.t)) =>
                match M.read (| γ |) with
                | (_, _) =>
                  let γ0_0 := Tuple.Access.left γ in
                  let γ0_1 := Tuple.Access.right γ in
                  let _selector := M.copy (| γ0_0 |) in
                  let _message := M.copy (| γ0_1 |) in
                  let _ : M.Val unit :=
                    let _ : M.Val unit :=
                      M.alloc (|
                        M.call (|(std.io.stdio._print
                          (M.call (|(core.fmt.Arguments.t::["new_v1"]
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.read (| mk_str "Wildcard selector: " |);
                                    M.read (| mk_str ", message: " |);
                                    M.read (| mk_str "
" |)
                                  ]
                                |))))
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                      (borrow _selector))
                                    |);
                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                      (borrow _message))
                                    |)
                                  ]
                                |)))))
                          |)))
                        |)
                      |) in
                    M.alloc (| tt |) in
                  M.alloc (| tt |)
                end :
                M.Val unit
            ])
      |)
    ) : unit)).
  
  Global Instance AssociatedFunction_wildcard :
    Notations.DoubleColon Self "wildcard" := {
    Notations.double_colon := wildcard;
  }.
  
  (*
      pub fn wildcard_complement(&mut self, _message: String) {
          println!("Wildcard complement message: {}", _message);
      }
  *)
  Definition wildcard_complement
      (self : mut_ref Self)
      (_message : alloc.string.String.t)
      : M unit :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let _message := M.alloc (| _message |) in
      M.read (|
        let _ : M.Val unit :=
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(std.io.stdio._print
                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.read (| mk_str "Wildcard complement message: " |);
                          M.read (| mk_str "
" |)
                        ]
                      |))))
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.call (|(core.fmt.rt.Argument.t::["new_display"]
                            (borrow _message))
                          |)
                        ]
                      |)))))
                |)))
              |)
            |) in
          M.alloc (| tt |) in
        M.alloc (| tt |)
      |)
    ) : unit)).
  
  Global Instance AssociatedFunction_wildcard_complement :
    Notations.DoubleColon Self "wildcard_complement" := {
    Notations.double_colon := wildcard_complement;
  }.
End Impl_wildcard_selector_WildcardSelector_t.
End Impl_wildcard_selector_WildcardSelector_t.
