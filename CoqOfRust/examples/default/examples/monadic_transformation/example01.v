(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn id(x: u64) -> u64 {
    x
}
*)
Definition id (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ x ] =>
    let* x := M.alloc x in
    M.read x
  | _, _ => M.impossible
  end.

(*
fn tri(a: u64, b: u64, c: u64) {}
*)
Definition tri (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ a; b; c ] =>
    let* a := M.alloc a in
    let* b := M.alloc b in
    let* c := M.alloc c in
    M.pure (Value.Tuple [])
  | _, _ => M.impossible
  end.

(*
fn main() {
    id(0);
    id(id(0));
    id(id(id(0)));
    id(id(id(id(0))));
    tri(id(1), id(2), 3);
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* _ :=
      let* α0 := M.get_function "example01::id" [] [] in
      let* α1 := M.call_closure α0 [ Value.Integer Integer.U64 0 ] in
      M.alloc α1 in
    let* _ :=
      let* α0 := M.get_function "example01::id" [] [] in
      let* α1 := M.get_function "example01::id" [] [] in
      let* α2 := M.call_closure α1 [ Value.Integer Integer.U64 0 ] in
      let* α3 := M.call_closure α0 [ α2 ] in
      M.alloc α3 in
    let* _ :=
      let* α0 := M.get_function "example01::id" [] [] in
      let* α1 := M.get_function "example01::id" [] [] in
      let* α2 := M.get_function "example01::id" [] [] in
      let* α3 := M.call_closure α2 [ Value.Integer Integer.U64 0 ] in
      let* α4 := M.call_closure α1 [ α3 ] in
      let* α5 := M.call_closure α0 [ α4 ] in
      M.alloc α5 in
    let* _ :=
      let* α0 := M.get_function "example01::id" [] [] in
      let* α1 := M.get_function "example01::id" [] [] in
      let* α2 := M.get_function "example01::id" [] [] in
      let* α3 := M.get_function "example01::id" [] [] in
      let* α4 := M.call_closure α3 [ Value.Integer Integer.U64 0 ] in
      let* α5 := M.call_closure α2 [ α4 ] in
      let* α6 := M.call_closure α1 [ α5 ] in
      let* α7 := M.call_closure α0 [ α6 ] in
      M.alloc α7 in
    let* _ :=
      let* α0 := M.get_function "example01::tri" [] [] in
      let* α1 := M.get_function "example01::id" [] [] in
      let* α2 := M.call_closure α1 [ Value.Integer Integer.U64 1 ] in
      let* α3 := M.get_function "example01::id" [] [] in
      let* α4 := M.call_closure α3 [ Value.Integer Integer.U64 2 ] in
      let* α5 := M.call_closure α0 [ α2; α4; Value.Integer Integer.U64 3 ] in
      M.alloc α5 in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
