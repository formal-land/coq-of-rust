(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn id(x: u64) -> u64 {
    x
}
*)
Definition id (x : u64.t) : M u64.t :=
  ltac:(M.monadic (
    let x := M.alloc (| x |) in
    M.read (| x |)
  )).

(*
fn tri(a: u64, b: u64, c: u64) {}
*)
Definition tri (a : u64.t) (b : u64.t) (c : u64.t) : M unit :=
  ltac:(M.monadic (
    let a := M.alloc (| a |) in
    let b := M.alloc (| b |) in
    let c := M.alloc (| c |) in
    tt
  )).

(*
fn main() {
    id(0);
    id(id(0));
    id(id(id(0)));
    id(id(id(id(0))));
    tri(id(1), id(2), 3);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let _ : M.Val u64.t :=
        M.alloc (| M.call (|(example01.id ((Integer.of_Z 0) : u64.t)) |) |) in
      let _ : M.Val u64.t :=
        M.alloc (|
          M.call (|(example01.id
            (M.call (|(example01.id ((Integer.of_Z 0) : u64.t)) |)))
          |)
        |) in
      let _ : M.Val u64.t :=
        M.alloc (|
          M.call (|(example01.id
            (M.call (|(example01.id
              (M.call (|(example01.id ((Integer.of_Z 0) : u64.t)) |)))
            |)))
          |)
        |) in
      let _ : M.Val u64.t :=
        M.alloc (|
          M.call (|(example01.id
            (M.call (|(example01.id
              (M.call (|(example01.id
                (M.call (|(example01.id ((Integer.of_Z 0) : u64.t)) |)))
              |)))
            |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(example01.tri
            (M.call (|(example01.id ((Integer.of_Z 1) : u64.t)) |))
            (M.call (|(example01.id ((Integer.of_Z 2) : u64.t)) |))
            ((Integer.of_Z 3) : u64.t))
          |)
        |) in
      M.alloc (| tt |)
    |)
  )).
