(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    (1, 2, 3, 4);
    vec![5, 6, 7, 8];
}
*)
Definition main (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [] =>
    ltac:(M.monadic
      (M.read (|
        let _ :=
          M.alloc (|
            M.of_value (|
              Value.Tuple
                [
                  A.to_value (M.of_value (| Value.Integer 1 |));
                  A.to_value (M.of_value (| Value.Integer 2 |));
                  A.to_value (M.of_value (| Value.Integer 3 |));
                  A.to_value (M.of_value (| Value.Integer 4 |))
                ]
            |)
          |) in
        let _ :=
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply (Ty.path "slice") [ Ty.path "i32" ],
                "into_vec",
                [ Ty.path "alloc::alloc::Global" ]
              |),
              [
                (* Unsize *)
                M.pointer_coercion (|
                  M.read (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          [
                            Ty.apply (Ty.path "array") [ Ty.path "i32" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "new",
                        []
                      |),
                      [
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value (M.of_value (| Value.Integer 5 |));
                                A.to_value (M.of_value (| Value.Integer 6 |));
                                A.to_value (M.of_value (| Value.Integer 7 |));
                                A.to_value (M.of_value (| Value.Integer 8 |))
                              ]
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              ]
            |)
          |) in
        M.alloc (| M.of_value (| Value.Tuple [] |) |)
      |)))
  | _, _ => M.impossible
  end.
