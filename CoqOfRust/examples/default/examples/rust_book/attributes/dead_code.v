(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* fn used_function() {} *)
Definition used_function (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [] => ltac:(M.monadic (Value.Tuple []))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_used_function :
  M.IsFunction.C "dead_code::used_function" used_function.
Admitted.
Global Typeclasses Opaque used_function.

(* fn unused_function() {} *)
Definition unused_function (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [] => ltac:(M.monadic (Value.Tuple []))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_unused_function :
  M.IsFunction.C "dead_code::unused_function" unused_function.
Admitted.
Global Typeclasses Opaque unused_function.

(* fn noisy_unused_function() {} *)
Definition noisy_unused_function (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [] => ltac:(M.monadic (Value.Tuple []))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_noisy_unused_function :
  M.IsFunction.C "dead_code::noisy_unused_function" noisy_unused_function.
Admitted.
Global Typeclasses Opaque noisy_unused_function.

(*
fn main() {
    used_function();
}
*)
Definition main (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [] =>
    ltac:(M.monadic
      (M.read (|
        let~ _ : Ty.tuple [] :=
          M.alloc (|
            M.call_closure (|
              Ty.tuple [],
              M.get_function (| "dead_code::used_function", [], [] |),
              []
            |)
          |) in
        M.alloc (| Value.Tuple [] |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_main : M.IsFunction.C "dead_code::main" main.
Admitted.
Global Typeclasses Opaque main.
