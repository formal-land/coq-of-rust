(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn foo<A>(o: Option<A>) {
    match o {
        Some(_a) => println!("some"),
        None => println!("nothing"),
    }
}
*)
Definition foo {A : Set} (o : core.option.Option.t A) : M unit :=
  ltac:(M.monadic (
    let o := M.alloc (| o |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          o
          [
            fun (γ : M.Val (core.option.Option.t A)) =>
              match M.read (| γ |) with
              | core.option.Option.Some _ =>
                let γ0_0 := core.option.Option.Get_Some_0 γ in
                let _a := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_const"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (| [ M.read (| mk_str "some
" |) ] |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun (γ : M.Val (core.option.Option.t A)) =>
              match M.read (| γ |) with
              | core.option.Option.None =>
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_const"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (| [ M.read (| mk_str "nothing
" |) ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit
          ])
    |)
  )).

Module tests.
  (*
      fn test_file() {
          // Opens the file ferris.txt or creates one if it doesn't exist.
          let mut file = OpenOptions::new()
              .append(true)
              .create(true)
              .open("ferris.txt")
              .expect("Failed to open ferris.txt");
  
          // Print "Ferris" 5 times.
          for _ in 0..5 {
              file.write_all("Ferris\n".as_bytes())
                  .expect("Could not write to ferris.txt");
          }
      }
  *)
  Definition test_file : M unit :=
    ltac:(M.monadic (
      M.read (|
        let file : M.Val std.fs.File.t :=
          M.alloc (|
            M.call (|((core.result.Result.t
                  std.fs.File.t
                  std.io.error.Error.t)::["expect"]
              (M.call (|(std.fs.OpenOptions.t::["open"]
                (borrow
                  (deref
                    (M.call (|(std.fs.OpenOptions.t::["create"]
                      (M.call (|(std.fs.OpenOptions.t::["append"]
                        (borrow_mut
                          (M.alloc (| M.call (|std.fs.OpenOptions.t::["new"] |)
                          |)))
                        true)
                      |))
                      true)
                    |))))
                (M.read (| mk_str "ferris.txt" |)))
              |))
              (M.read (| mk_str "Failed to open ferris.txt" |)))
            |)
          |) in
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self := core.ops.range.Range.t i32.t)
                      (Trait := ℐ)))
                  {|
                    core.ops.range.Range.start := (Integer.of_Z 0) : i32.t;
                    core.ops.range.Range.end_ := (Integer.of_Z 5) : i32.t;
                  |})
                |)
              |))
              [
                fun (γ : M.Val (core.ops.range.Range.t i32.t)) =>
                  (let iter := M.copy (| γ |) in
                  M.loop
                    (let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self := core.ops.range.Range.t i32.t)
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun (γ : M.Val (core.option.Option.t i32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  never_to_any (| M.read (| M.break |) |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun (γ : M.Val (core.option.Option.t i32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                let _ : M.Val unit :=
                                  M.alloc (|
                                    M.call (|((core.result.Result.t
                                          unit
                                          std.io.error.Error.t)::["expect"]
                                      (M.call (|(ltac:(M.get_method (fun ℐ =>
                                          std.io.Write.write_all
                                            (Self := std.fs.File.t)
                                            (Trait := ℐ)))
                                        (borrow_mut file)
                                        (M.call (|(str.t::["as_bytes"]
                                          (M.read (| mk_str "Ferris
" |)))
                                        |)))
                                      |))
                                      (M.read (|
                                        mk_str "Could not write to ferris.txt"
                                      |)))
                                    |)
                                  |) in
                                M.alloc (| tt |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |))) :
                  M.Val unit
              ]))
      |)
    )).
  
  (*
      fn test_file_also() {
          // Opens the file ferris.txt or creates one if it doesn't exist.
          let mut file = OpenOptions::new()
              .append(true)
              .create(true)
              .open("ferris.txt")
              .expect("Failed to open ferris.txt");
  
          // Print "Corro" 5 times.
          for _ in 0..5 {
              file.write_all("Corro\n".as_bytes())
                  .expect("Could not write to ferris.txt");
          }
      }
  *)
  Definition test_file_also : M unit :=
    ltac:(M.monadic (
      M.read (|
        let file : M.Val std.fs.File.t :=
          M.alloc (|
            M.call (|((core.result.Result.t
                  std.fs.File.t
                  std.io.error.Error.t)::["expect"]
              (M.call (|(std.fs.OpenOptions.t::["open"]
                (borrow
                  (deref
                    (M.call (|(std.fs.OpenOptions.t::["create"]
                      (M.call (|(std.fs.OpenOptions.t::["append"]
                        (borrow_mut
                          (M.alloc (| M.call (|std.fs.OpenOptions.t::["new"] |)
                          |)))
                        true)
                      |))
                      true)
                    |))))
                (M.read (| mk_str "ferris.txt" |)))
              |))
              (M.read (| mk_str "Failed to open ferris.txt" |)))
            |)
          |) in
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self := core.ops.range.Range.t i32.t)
                      (Trait := ℐ)))
                  {|
                    core.ops.range.Range.start := (Integer.of_Z 0) : i32.t;
                    core.ops.range.Range.end_ := (Integer.of_Z 5) : i32.t;
                  |})
                |)
              |))
              [
                fun (γ : M.Val (core.ops.range.Range.t i32.t)) =>
                  (let iter := M.copy (| γ |) in
                  M.loop
                    (let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self := core.ops.range.Range.t i32.t)
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun (γ : M.Val (core.option.Option.t i32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  never_to_any (| M.read (| M.break |) |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun (γ : M.Val (core.option.Option.t i32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                let _ : M.Val unit :=
                                  M.alloc (|
                                    M.call (|((core.result.Result.t
                                          unit
                                          std.io.error.Error.t)::["expect"]
                                      (M.call (|(ltac:(M.get_method (fun ℐ =>
                                          std.io.Write.write_all
                                            (Self := std.fs.File.t)
                                            (Trait := ℐ)))
                                        (borrow_mut file)
                                        (M.call (|(str.t::["as_bytes"]
                                          (M.read (| mk_str "Corro
" |)))
                                        |)))
                                      |))
                                      (M.read (|
                                        mk_str "Could not write to ferris.txt"
                                      |)))
                                    |)
                                  |) in
                                M.alloc (| tt |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |))) :
                  M.Val unit
              ]))
      |)
    )).
End tests.
