(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Circle.
Section Circle.
  Record t : Set := {
    radius : i32.t;
  }.
  
  Definition Get_radius :=
    Ref.map (fun α => Some α.(radius)) (fun β α => Some (α <| radius := β |>)).
End Circle.
End Circle.

Module  Impl_core_fmt_Display_for_converting_to_string_Circle_t.
Section Impl_core_fmt_Display_for_converting_to_string_Circle_t.
  Definition Self : Set := converting_to_string.Circle.t.
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          write!(f, "Circle of radius {}", self.radius)
      }
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["write_fmt"]
        (M.read (| f |))
        (M.call (|(core.fmt.Arguments.t::["new_v1"]
          (pointer_coercion
            "Unsize"
            (borrow
              (M.alloc (| [ M.read (| mk_str "Circle of radius " |) ] |))))
          (pointer_coercion
            "Unsize"
            (borrow
              (M.alloc (|
                [
                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                    (borrow
                      (converting_to_string.Circle.Get_radius
                        (deref (M.read (| self |))))))
                  |)
                ]
              |)))))
        |)))
      |)
    )).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt := fmt;
  }.
End Impl_core_fmt_Display_for_converting_to_string_Circle_t.
End Impl_core_fmt_Display_for_converting_to_string_Circle_t.

(*
fn main() {
    let circle = Circle { radius: 6 };
    circle.to_string();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let circle : M.Val converting_to_string.Circle.t :=
        M.alloc (|
          {| converting_to_string.Circle.radius := (Integer.of_Z 6) : i32.t;
          |} : converting_to_string.Circle.t
        |) in
      let _ : M.Val alloc.string.String.t :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              alloc.string.ToString.to_string
                (Self := converting_to_string.Circle.t)
                (Trait := ℐ)))
            (borrow circle))
          |)
        |) in
      M.alloc (| tt |)
    |)
  )).
