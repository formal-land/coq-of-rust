(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructRecord
  {
    name := "Number";
    ty_params := [];
    fields := [ ("value", Ty.path "i32") ];
  } *)

Module Impl_core_convert_From_i32_for_from_Number.
  Definition Self : Ty.t := Ty.path "from::Number".
  
  (*
      fn from(item: i32) -> Self {
          Number { value: item }
      }
  *)
  Definition from (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ item ] =>
      let* item := M.alloc item in
      let* α0 := M.read item in
      M.pure (Value.StructRecord "from::Number" [ ("value", α0) ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::convert::From"
      Self
      (* Trait polymorphic types *) [ (* T *) Ty.path "i32" ]
      (* Instance *) [ ("from", InstanceField.Method from) ].
End Impl_core_convert_From_i32_for_from_Number.

(*
fn main() {
    Number::from(30);
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "core::convert::From"
          (Ty.path "from::Number")
          [ Ty.path "i32" ]
          []
          "from"
          []
          [] in
      let* α1 := M.call_closure α0 [ Value.Integer Integer.I32 30 ] in
      M.alloc α1 in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
