(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Number.
Section Number.
  Record t : Set := {
    value : i32.t;
  }.
  
  Definition Get_value :=
    Ref.map (fun α => Some α.(value)) (fun β α => Some (α <| value := β |>)).
End Number.
End Number.

Module  Impl_core_convert_From_i32_t_for_into_Number_t.
Section Impl_core_convert_From_i32_t_for_into_Number_t.
  Definition Self : Set := into.Number.t.
  
  (*
      fn from(item: i32) -> Self {
          Number { value: item }
      }
  *)
  Definition from (item : i32.t) : M Self :=
    ltac:(M.monadic (
      let item := M.alloc (| item |) in
      {| into.Number.value := M.read (| item |); |}
    )).
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ : core.convert.From.Trait Self (T := i32.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_i32_t_for_into_Number_t.
End Impl_core_convert_From_i32_t_for_into_Number_t.

(*
fn main() {
    <i32 as std::convert::Into<Number>>::into(5);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let _ : M.Val into.Number.t :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.convert.Into.into
                (Self := i32.t)
                (T := into.Number.t)
                (Trait := ℐ)))
            ((Integer.of_Z 5) : i32.t))
          |)
        |) in
      M.alloc (| tt |)
    |)
  )).
