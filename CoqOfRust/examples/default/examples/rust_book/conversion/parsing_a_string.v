(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    "12".parse::<i32>();
    "true".parse::<bool>();
    "unparsable".parse::<u32>();
}
*)
Definition main (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [] =>
    ltac:(M.monadic
      (M.read (|
        let~ _ :
            Ty.apply
              (Ty.path "*")
              []
              [
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.path "i32"; Ty.path "core::num::error::ParseIntError" ]
              ] :=
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.path "i32"; Ty.path "core::num::error::ParseIntError" ],
              M.get_associated_function (| Ty.path "str", "parse", [], [ Ty.path "i32" ] |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "12" |) |) |) ]
            |)
          |) in
        let~ _ :
            Ty.apply
              (Ty.path "*")
              []
              [
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.path "bool"; Ty.path "core::str::error::ParseBoolError" ]
              ] :=
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.path "bool"; Ty.path "core::str::error::ParseBoolError" ],
              M.get_associated_function (| Ty.path "str", "parse", [], [ Ty.path "bool" ] |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "true" |) |) |) ]
            |)
          |) in
        let~ _ :
            Ty.apply
              (Ty.path "*")
              []
              [
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.path "u32"; Ty.path "core::num::error::ParseIntError" ]
              ] :=
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.path "u32"; Ty.path "core::num::error::ParseIntError" ],
              M.get_associated_function (| Ty.path "str", "parse", [], [ Ty.path "u32" ] |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "unparsable" |) |) |) ]
            |)
          |) in
        M.alloc (| Value.Tuple [] |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_main : M.IsFunction.C "parsing_a_string::main" main.
Admitted.
Global Typeclasses Opaque main.
