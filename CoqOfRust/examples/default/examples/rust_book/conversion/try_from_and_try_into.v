(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructTuple
  {
    name := "EvenNumber";
    ty_params := [];
    fields := [ Ty.path "i32" ];
  } *)

Module Impl_core_fmt_Debug_for_try_from_and_try_into_EvenNumber.
  Definition Self : Ty.t := Ty.path "try_from_and_try_into::EvenNumber".
  
  (* Debug *)
  Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :=
        M.get_associated_function (Ty.path "core::fmt::Formatter") "debug_tuple_field1_finish" [] in
      let* α1 := M.read f in
      let* α2 := M.read (mk_str "EvenNumber") in
      let* α5 :=
        (* Unsize *)
          let* α3 := M.read self in
          let* α4 := M.alloc (M.get_struct_tuple_field α3 "try_from_and_try_into::EvenNumber" 0) in
          M.pure (M.pointer_coercion α4) in
      M.call_closure α0 [ α1; α2; α5 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_try_from_and_try_into_EvenNumber.

Module Impl_core_marker_StructuralPartialEq_for_try_from_and_try_into_EvenNumber.
  Definition Self : Ty.t := Ty.path "try_from_and_try_into::EvenNumber".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [].
End Impl_core_marker_StructuralPartialEq_for_try_from_and_try_into_EvenNumber.

Module Impl_core_cmp_PartialEq_for_try_from_and_try_into_EvenNumber.
  Definition Self : Ty.t := Ty.path "try_from_and_try_into::EvenNumber".
  
  (* PartialEq *)
  Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; other ] =>
      let* self := M.alloc self in
      let* other := M.alloc other in
      let* α0 := M.read self in
      let* α1 := M.read (M.get_struct_tuple_field α0 "try_from_and_try_into::EvenNumber" 0) in
      let* α2 := M.read other in
      let* α3 := M.read (M.get_struct_tuple_field α2 "try_from_and_try_into::EvenNumber" 0) in
      M.pure (BinOp.Pure.eq α1 α3)
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_for_try_from_and_try_into_EvenNumber.

Module Impl_core_convert_TryFrom_i32_for_try_from_and_try_into_EvenNumber.
  Definition Self : Ty.t := Ty.path "try_from_and_try_into::EvenNumber".
  
  (*     type Error = (); *)
  Definition _Error : Ty.t := Ty.tuple [].
  
  (*
      fn try_from(value: i32) -> Result<Self, Self::Error> {
          if value % 2 == 0 {
              Ok(EvenNumber(value))
          } else {
              Err(())
          }
      }
  *)
  Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ value ] =>
      let* value := M.alloc value in
      let* α0 := M.alloc (Value.Tuple []) in
      let* α1 :=
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 := M.read value in
                let* α1 := BinOp.Panic.rem α0 (Value.Integer Integer.I32 2) in
                let* α2 := M.alloc (BinOp.Pure.eq α1 (Value.Integer Integer.I32 0)) in
                M.pure (M.use α2) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* α0 := M.read value in
              M.alloc
                (Value.StructTuple
                  "core::result::Result::Ok"
                  [ Value.StructTuple "try_from_and_try_into::EvenNumber" [ α0 ] ]);
            fun γ => M.alloc (Value.StructTuple "core::result::Result::Err" [ Value.Tuple [] ])
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::convert::TryFrom"
      Self
      (* Trait polymorphic types *) [ (* T *) Ty.path "i32" ]
      (* Instance *)
        [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
End Impl_core_convert_TryFrom_i32_for_try_from_and_try_into_EvenNumber.

(*
fn main() {
    // TryFrom

    assert_eq!(EvenNumber::try_from(8), Ok(EvenNumber(8)));
    assert_eq!(EvenNumber::try_from(5), Err(()));

    // TryInto

    let result: Result<EvenNumber, ()> = 8i32.try_into();
    assert_eq!(result, Ok(EvenNumber(8)));
    let result: Result<EvenNumber, ()> = 5i32.try_into();
    assert_eq!(result, Err(()));
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "core::convert::TryFrom"
          (Ty.path "try_from_and_try_into::EvenNumber")
          [ Ty.path "i32" ]
          "try_from"
          [] in
      let* α1 := M.call_closure α0 [ Value.Integer Integer.I32 8 ] in
      let* α2 := M.alloc α1 in
      let* α3 :=
        M.alloc
          (Value.StructTuple
            "core::result::Result::Ok"
            [ Value.StructTuple "try_from_and_try_into::EvenNumber" [ Value.Integer Integer.I32 8 ]
            ]) in
      let* α4 := M.alloc (Value.Tuple [ α2; α3 ]) in
      M.match_operator
        α4
        [
          fun γ =>
            let γ0_0 := M.get_tuple_field γ 0 in
            let γ0_1 := M.get_tuple_field γ 1 in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 := M.alloc (Value.Tuple []) in
            M.match_operator
              α0
              [
                fun γ =>
                  let* γ :=
                    let* α0 :=
                      M.get_trait_method
                        "core::cmp::PartialEq"
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ])
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ]
                        ]
                        "eq"
                        [] in
                    let* α1 := M.read left_val in
                    let* α2 := M.read right_val in
                    let* α3 := M.call_closure α0 [ α1; α2 ] in
                    let* α4 := M.alloc (UnOp.Pure.not α3) in
                    M.pure (M.use α4) in
                  let* _ :=
                    let* α0 := M.read γ in
                    M.is_constant_or_break_match α0 (Value.Bool true) in
                  let* kind := M.alloc (Value.StructTuple "core::panicking::AssertKind::Eq" []) in
                  let* α0 :=
                    M.get_function
                      "core::panicking::assert_failed"
                      [
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ];
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ]
                      ] in
                  let* α1 := M.read kind in
                  let* α2 := M.read left_val in
                  let* α3 := M.read right_val in
                  let* α4 :=
                    M.call_closure
                      α0
                      [ α1; α2; α3; Value.StructTuple "core::option::Option::None" [] ] in
                  let* α0 := M.alloc α4 in
                  let* α1 := M.read α0 in
                  let* α2 := M.never_to_any α1 in
                  M.alloc α2;
                fun γ => M.alloc (Value.Tuple [])
              ]
        ] in
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "core::convert::TryFrom"
          (Ty.path "try_from_and_try_into::EvenNumber")
          [ Ty.path "i32" ]
          "try_from"
          [] in
      let* α1 := M.call_closure α0 [ Value.Integer Integer.I32 5 ] in
      let* α2 := M.alloc α1 in
      let* α3 := M.alloc (Value.StructTuple "core::result::Result::Err" [ Value.Tuple [] ]) in
      let* α4 := M.alloc (Value.Tuple [ α2; α3 ]) in
      M.match_operator
        α4
        [
          fun γ =>
            let γ0_0 := M.get_tuple_field γ 0 in
            let γ0_1 := M.get_tuple_field γ 1 in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 := M.alloc (Value.Tuple []) in
            M.match_operator
              α0
              [
                fun γ =>
                  let* γ :=
                    let* α0 :=
                      M.get_trait_method
                        "core::cmp::PartialEq"
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ])
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ]
                        ]
                        "eq"
                        [] in
                    let* α1 := M.read left_val in
                    let* α2 := M.read right_val in
                    let* α3 := M.call_closure α0 [ α1; α2 ] in
                    let* α4 := M.alloc (UnOp.Pure.not α3) in
                    M.pure (M.use α4) in
                  let* _ :=
                    let* α0 := M.read γ in
                    M.is_constant_or_break_match α0 (Value.Bool true) in
                  let* kind := M.alloc (Value.StructTuple "core::panicking::AssertKind::Eq" []) in
                  let* α0 :=
                    M.get_function
                      "core::panicking::assert_failed"
                      [
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ];
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ]
                      ] in
                  let* α1 := M.read kind in
                  let* α2 := M.read left_val in
                  let* α3 := M.read right_val in
                  let* α4 :=
                    M.call_closure
                      α0
                      [ α1; α2; α3; Value.StructTuple "core::option::Option::None" [] ] in
                  let* α0 := M.alloc α4 in
                  let* α1 := M.read α0 in
                  let* α2 := M.never_to_any α1 in
                  M.alloc α2;
                fun γ => M.alloc (Value.Tuple [])
              ]
        ] in
    let* result :=
      let* α0 :=
        M.get_trait_method
          "core::convert::TryInto"
          (Ty.path "i32")
          [ Ty.path "try_from_and_try_into::EvenNumber" ]
          "try_into"
          [] in
      let* α1 := M.call_closure α0 [ Value.Integer Integer.I32 8 ] in
      M.alloc α1 in
    let* _ :=
      let* α0 :=
        M.alloc
          (Value.StructTuple
            "core::result::Result::Ok"
            [ Value.StructTuple "try_from_and_try_into::EvenNumber" [ Value.Integer Integer.I32 8 ]
            ]) in
      let* α1 := M.alloc (Value.Tuple [ result; α0 ]) in
      M.match_operator
        α1
        [
          fun γ =>
            let γ0_0 := M.get_tuple_field γ 0 in
            let γ0_1 := M.get_tuple_field γ 1 in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 := M.alloc (Value.Tuple []) in
            M.match_operator
              α0
              [
                fun γ =>
                  let* γ :=
                    let* α0 :=
                      M.get_trait_method
                        "core::cmp::PartialEq"
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ])
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ]
                        ]
                        "eq"
                        [] in
                    let* α1 := M.read left_val in
                    let* α2 := M.read right_val in
                    let* α3 := M.call_closure α0 [ α1; α2 ] in
                    let* α4 := M.alloc (UnOp.Pure.not α3) in
                    M.pure (M.use α4) in
                  let* _ :=
                    let* α0 := M.read γ in
                    M.is_constant_or_break_match α0 (Value.Bool true) in
                  let* kind := M.alloc (Value.StructTuple "core::panicking::AssertKind::Eq" []) in
                  let* α0 :=
                    M.get_function
                      "core::panicking::assert_failed"
                      [
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ];
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ]
                      ] in
                  let* α1 := M.read kind in
                  let* α2 := M.read left_val in
                  let* α3 := M.read right_val in
                  let* α4 :=
                    M.call_closure
                      α0
                      [ α1; α2; α3; Value.StructTuple "core::option::Option::None" [] ] in
                  let* α0 := M.alloc α4 in
                  let* α1 := M.read α0 in
                  let* α2 := M.never_to_any α1 in
                  M.alloc α2;
                fun γ => M.alloc (Value.Tuple [])
              ]
        ] in
    let* result :=
      let* α0 :=
        M.get_trait_method
          "core::convert::TryInto"
          (Ty.path "i32")
          [ Ty.path "try_from_and_try_into::EvenNumber" ]
          "try_into"
          [] in
      let* α1 := M.call_closure α0 [ Value.Integer Integer.I32 5 ] in
      M.alloc α1 in
    let* _ :=
      let* α0 := M.alloc (Value.StructTuple "core::result::Result::Err" [ Value.Tuple [] ]) in
      let* α1 := M.alloc (Value.Tuple [ result; α0 ]) in
      M.match_operator
        α1
        [
          fun γ =>
            let γ0_0 := M.get_tuple_field γ 0 in
            let γ0_1 := M.get_tuple_field γ 1 in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 := M.alloc (Value.Tuple []) in
            M.match_operator
              α0
              [
                fun γ =>
                  let* γ :=
                    let* α0 :=
                      M.get_trait_method
                        "core::cmp::PartialEq"
                        (Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ])
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ]
                        ]
                        "eq"
                        [] in
                    let* α1 := M.read left_val in
                    let* α2 := M.read right_val in
                    let* α3 := M.call_closure α0 [ α1; α2 ] in
                    let* α4 := M.alloc (UnOp.Pure.not α3) in
                    M.pure (M.use α4) in
                  let* _ :=
                    let* α0 := M.read γ in
                    M.is_constant_or_break_match α0 (Value.Bool true) in
                  let* kind := M.alloc (Value.StructTuple "core::panicking::AssertKind::Eq" []) in
                  let* α0 :=
                    M.get_function
                      "core::panicking::assert_failed"
                      [
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ];
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "try_from_and_try_into::EvenNumber"; Ty.tuple [] ]
                      ] in
                  let* α1 := M.read kind in
                  let* α2 := M.read left_val in
                  let* α3 := M.read right_val in
                  let* α4 :=
                    M.call_closure
                      α0
                      [ α1; α2; α3; Value.StructTuple "core::option::Option::None" [] ] in
                  let* α0 := M.alloc α4 in
                  let* α1 := M.read α0 in
                  let* α2 := M.never_to_any α1 in
                  M.alloc α2;
                fun γ => M.alloc (Value.Tuple [])
              ]
        ] in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
