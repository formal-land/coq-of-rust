(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition value_LANGUAGE : Value.t := M.run (M.alloc (mk_str "Rust")).

Definition value_THRESHOLD : Value.t := M.run (M.alloc (Value.Integer Integer.I32 10)).

(*
fn is_big(n: i32) -> bool {
    // Access constant in some function
    n > THRESHOLD
}
*)
Definition is_big (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ n ] =>
    let* n := M.alloc n in
    let* α0 := M.read n in
    let* α1 := M.get_constant "constants::THRESHOLD" in
    let* α2 := M.read α1 in
    M.pure (BinOp.Pure.gt α0 α2)
  | _, _ => M.impossible
  end.

(*
fn main() {
    let n = 16;

    // Access constant in the main thread
    println!("This is {}", LANGUAGE);
    println!("The threshold is {}", THRESHOLD);
    println!("{} is {}", n, if is_big(n) { "big" } else { "small" });

    // Error! Cannot modify a `const`.
    // THRESHOLD = 5;
    // FIXME ^ Comment out this line
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* n := M.alloc (Value.Integer Integer.I32 16) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α5 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "This is ") in
            let* α3 := M.read (mk_str "
") in
            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
            M.pure (M.pointer_coercion α4) in
        let* α11 :=
          (* Unsize *)
            let* α6 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_display"
                [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ]
                [] in
            let* α7 := M.get_constant "constants::LANGUAGE" in
            let* α8 := M.read α7 in
            let* α9 := M.call_closure α6 [ α8 ] in
            let* α10 := M.alloc (Value.Array [ α9 ]) in
            M.pure (M.pointer_coercion α10) in
        let* α12 := M.call_closure α1 [ α5; α11 ] in
        let* α13 := M.call_closure α0 [ α12 ] in
        M.alloc α13 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α5 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "The threshold is ") in
            let* α3 := M.read (mk_str "
") in
            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
            M.pure (M.pointer_coercion α4) in
        let* α10 :=
          (* Unsize *)
            let* α6 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_display"
                [ Ty.path "i32" ]
                [] in
            let* α7 := M.get_constant "constants::THRESHOLD" in
            let* α8 := M.call_closure α6 [ α7 ] in
            let* α9 := M.alloc (Value.Array [ α8 ]) in
            M.pure (M.pointer_coercion α9) in
        let* α11 := M.call_closure α1 [ α5; α10 ] in
        let* α12 := M.call_closure α0 [ α11 ] in
        M.alloc α12 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α6 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "") in
            let* α3 := M.read (mk_str " is ") in
            let* α4 := M.read (mk_str "
") in
            let* α5 := M.alloc (Value.Array [ α2; α3; α4 ]) in
            M.pure (M.pointer_coercion α5) in
        let* α14 :=
          (* Unsize *)
            let* α7 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_display"
                [ Ty.path "i32" ]
                [] in
            let* α8 := M.call_closure α7 [ n ] in
            let* α9 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_display"
                [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ]
                [] in
            let* α10 := M.alloc (Value.Tuple []) in
            let* α11 :=
              M.match_operator
                α10
                [
                  fun γ =>
                    let* γ :=
                      let* α0 := M.get_function "constants::is_big" [] [] in
                      let* α1 := M.read n in
                      let* α2 := M.call_closure α0 [ α1 ] in
                      let* α3 := M.alloc α2 in
                      M.pure (M.use α3) in
                    let* _ :=
                      let* α0 := M.read γ in
                      M.is_constant_or_break_match α0 (Value.Bool true) in
                    M.pure (mk_str "big");
                  fun γ =>
                    let* α0 := M.read (mk_str "small") in
                    M.alloc α0
                ] in
            let* α12 := M.call_closure α9 [ α11 ] in
            let* α13 := M.alloc (Value.Array [ α8; α12 ]) in
            M.pure (M.pointer_coercion α13) in
        let* α15 := M.call_closure α1 [ α6; α14 ] in
        let* α16 := M.call_closure α0 [ α15 ] in
        M.alloc α16 in
      M.alloc (Value.Tuple []) in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
