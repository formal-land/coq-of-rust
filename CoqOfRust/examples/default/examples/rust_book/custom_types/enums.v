(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module WebEvent.
  Module Click.
    Record t : Set := {
      x : i64.t;
      y : i64.t;
    }.
  End Click.
  
  Inductive t : Set :=
  | PageLoad
  | PageUnload
  | KeyPress (_ : char.t)
  | Paste (_ : alloc.string.String.t)
  | Click (_ : Click.t).
  
  Definition Get_KeyPress_0 :=
    Ref.map
      (fun α => match α with | KeyPress α0 => Some α0 | _ => None end)
      (fun β α =>
        match α with | KeyPress _ => Some (KeyPress β) | _ => None end).
  
  Definition Get_Paste_0 :=
    Ref.map
      (fun α => match α with | Paste α0 => Some α0 | _ => None end)
      (fun β α => match α with | Paste _ => Some (Paste β) | _ => None end).
  
  Definition Get_Click_x :=
    Ref.map
      (fun α => match α with | Click α => Some α.(Click.x) | _ => None end)
      (fun β α =>
        match α with
        | Click α => Some (Click (α <| Click.x := β |>))
        | _ => None
        end).
  
  Definition Get_Click_y :=
    Ref.map
      (fun α => match α with | Click α => Some α.(Click.y) | _ => None end)
      (fun β α =>
        match α with
        | Click α => Some (Click (α <| Click.y := β |>))
        | _ => None
        end).
End WebEvent.

(*
fn inspect(event: WebEvent) {
    match event {
        WebEvent::PageLoad => println!("page loaded, réfé"),
        WebEvent::PageUnload => println!("page unloaded"),
        // Destructure `c` from inside the `enum`.
        WebEvent::KeyPress(c) => println!("pressed '{}'.", c),
        WebEvent::Paste(s) => println!("pasted \"{}\".", s),
        // Destructure `Click` into `x` and `y`.
        WebEvent::Click { x, y } => {
            println!("clicked at x={}, y={}.", x, y);
        }
    }
}
*)
Definition inspect (event : enums.WebEvent.t) : M unit :=
  ltac:(M.monadic ((
    let event := M.alloc (| event |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          event
          [
            fun (γ : M.Val enums.WebEvent.t) =>
              match M.read (| γ |) with
              | enums.WebEvent.PageLoad =>
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_const"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (|
                                  mk_str
                                    ("page loaded, r" ++
                                      String.String
                                        "233"
                                        ("f" ++ String.String "233" "
"))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun (γ : M.Val enums.WebEvent.t) =>
              match M.read (| γ |) with
              | enums.WebEvent.PageUnload =>
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_const"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (| [ M.read (| mk_str "page unloaded
" |) ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun (γ : M.Val enums.WebEvent.t) =>
              match M.read (| γ |) with
              | enums.WebEvent.KeyPress _ =>
                let γ0_0 := enums.WebEvent.Get_KeyPress_0 γ in
                let c := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "pressed '" |);
                                M.read (| mk_str "'.
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow c))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun (γ : M.Val enums.WebEvent.t) =>
              match M.read (| γ |) with
              | enums.WebEvent.Paste _ =>
                let γ0_0 := enums.WebEvent.Get_Paste_0 γ in
                let s := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "pasted """ |);
                                M.read (| mk_str """.
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow s))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun (γ : M.Val enums.WebEvent.t) =>
              match M.read (| γ |) with
              |
                  enums.WebEvent.Click
                  {| enums.WebEvent.Click.x := _; enums.WebEvent.Click.y := _;
                  |}
                  =>
                let γ0_0 := enums.WebEvent.Get_Click_x γ in
                let γ0_1 := enums.WebEvent.Get_Click_y γ in
                let x := M.copy (| γ0_0 |) in
                let y := M.copy (| γ0_1 |) in
                let _ : M.Val unit :=
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (| mk_str "clicked at x=" |);
                                  M.read (| mk_str ", y=" |);
                                  M.read (| mk_str ".
" |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                    (borrow x))
                                  |);
                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                    (borrow y))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit
          ])
    |)
  ) : unit)).

(*
fn main() {
    let pressed = WebEvent::KeyPress('x');
    // `to_owned()` creates an owned `String` from a string slice.
    let pasted = WebEvent::Paste("my text".to_owned());
    let click = WebEvent::Click { x: 20, y: 80 };
    let load = WebEvent::PageLoad;
    let unload = WebEvent::PageUnload;

    inspect(pressed);
    inspect(pasted);
    inspect(click);
    inspect(load);
    inspect(unload);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let pressed : M.Val enums.WebEvent.t :=
        M.alloc (| enums.WebEvent.KeyPress "x"%char |) in
      let pasted : M.Val enums.WebEvent.t :=
        M.alloc (|
          enums.WebEvent.Paste
            (M.call (|(ltac:(M.get_method (fun ℐ =>
                alloc.borrow.ToOwned.to_owned (Self := str.t) (Trait := ℐ)))
              (M.read (| mk_str "my text" |)))
            |))
        |) in
      let click : M.Val enums.WebEvent.t :=
        M.alloc (|
          enums.WebEvent.Click
            {|
            enums.WebEvent.Click.x := (Integer.of_Z 20) : i64.t;
            enums.WebEvent.Click.y := (Integer.of_Z 80) : i64.t;
          |} : enums.WebEvent.t
        |) in
      let load : M.Val enums.WebEvent.t :=
        M.alloc (| enums.WebEvent.PageLoad |) in
      let unload : M.Val enums.WebEvent.t :=
        M.alloc (| enums.WebEvent.PageUnload |) in
      let _ : M.Val unit :=
        M.alloc (| M.call (|(enums.inspect (M.read (| pressed |))) |) |) in
      let _ : M.Val unit :=
        M.alloc (| M.call (|(enums.inspect (M.read (| pasted |))) |) |) in
      let _ : M.Val unit :=
        M.alloc (| M.call (|(enums.inspect (M.read (| click |))) |) |) in
      let _ : M.Val unit :=
        M.alloc (| M.call (|(enums.inspect (M.read (| load |))) |) |) in
      let _ : M.Val unit :=
        M.alloc (| M.call (|(enums.inspect (M.read (| unload |))) |) |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
