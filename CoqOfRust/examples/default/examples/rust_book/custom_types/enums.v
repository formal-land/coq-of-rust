(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum WebEvent *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "PageLoad";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "PageUnload";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "KeyPress";
        item := StructTuple [ Ty.path "char" ];
        discriminant := None;
      };
      {
        name := "Paste";
        item := StructTuple [ Ty.path "alloc::string::String" ];
        discriminant := None;
      };
      {
        name := "Click";
        item := StructRecord [ ("x", Ty.path "i64"); ("y", Ty.path "i64") ];
        discriminant := None;
      }
    ];
} *)

(*
fn inspect(event: WebEvent) {
    match event {
        WebEvent::PageLoad => println!("page loaded, réfé"),
        WebEvent::PageUnload => println!("page unloaded"),
        // Destructure `c` from inside the `enum`.
        WebEvent::KeyPress(c) => println!("pressed '{}'.", c),
        WebEvent::Paste(s) => println!("pasted \"{}\".", s),
        // Destructure `Click` into `x` and `y`.
        WebEvent::Click { x, y } => {
            println!("clicked at x={}, y={}.", x, y);
        }
    }
}
*)
Definition inspect (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ event ] =>
    let* event := M.alloc event in
    let* α0 :=
      M.match_operator
        event
        [
          fun γ =>
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" [] [] in
              let* α1 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Arguments")
                  "new_const"
                  []
                  [ Value.Bool true ] in
              let* α4 :=
                (* Unsize *)
                  let* α2 :=
                    M.read
                      (mk_str
                        ("page loaded, r"
                          ++
                          (String.String "233" ("f" ++ (String.String "233" "
"))))) in
                  let* α3 := M.alloc (Value.Array [ α2 ]) in
                  M.pure (M.pointer_coercion α3) in
              let* α5 := M.call_closure α1 [ α4 ] in
              let* α6 := M.call_closure α0 [ α5 ] in
              M.alloc α6 in
            M.alloc (Value.Tuple []);
          fun γ =>
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" [] [] in
              let* α1 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Arguments")
                  "new_const"
                  []
                  [ Value.Bool true ] in
              let* α4 :=
                (* Unsize *)
                  let* α2 := M.read (mk_str "page unloaded
") in
                  let* α3 := M.alloc (Value.Array [ α2 ]) in
                  M.pure (M.pointer_coercion α3) in
              let* α5 := M.call_closure α1 [ α4 ] in
              let* α6 := M.call_closure α0 [ α5 ] in
              M.alloc α6 in
            M.alloc (Value.Tuple []);
          fun γ =>
            let* γ0_0 := M.get_struct_tuple_field_or_break_match γ "enums::WebEvent::KeyPress" 0 in
            let* c := M.copy γ0_0 in
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" [] [] in
              let* α1 :=
                M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
              let* α5 :=
                (* Unsize *)
                  let* α2 := M.read (mk_str "pressed '") in
                  let* α3 := M.read (mk_str "'.
") in
                  let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                  M.pure (M.pointer_coercion α4) in
              let* α9 :=
                (* Unsize *)
                  let* α6 :=
                    M.get_associated_function
                      (Ty.path "core::fmt::rt::Argument")
                      "new_display"
                      [ Ty.path "char" ]
                      [] in
                  let* α7 := M.call_closure α6 [ c ] in
                  let* α8 := M.alloc (Value.Array [ α7 ]) in
                  M.pure (M.pointer_coercion α8) in
              let* α10 := M.call_closure α1 [ α5; α9 ] in
              let* α11 := M.call_closure α0 [ α10 ] in
              M.alloc α11 in
            M.alloc (Value.Tuple []);
          fun γ =>
            let* γ0_0 := M.get_struct_tuple_field_or_break_match γ "enums::WebEvent::Paste" 0 in
            let* s := M.copy γ0_0 in
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" [] [] in
              let* α1 :=
                M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
              let* α5 :=
                (* Unsize *)
                  let* α2 := M.read (mk_str "pasted """) in
                  let* α3 := M.read (mk_str """.
") in
                  let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                  M.pure (M.pointer_coercion α4) in
              let* α9 :=
                (* Unsize *)
                  let* α6 :=
                    M.get_associated_function
                      (Ty.path "core::fmt::rt::Argument")
                      "new_display"
                      [ Ty.path "alloc::string::String" ]
                      [] in
                  let* α7 := M.call_closure α6 [ s ] in
                  let* α8 := M.alloc (Value.Array [ α7 ]) in
                  M.pure (M.pointer_coercion α8) in
              let* α10 := M.call_closure α1 [ α5; α9 ] in
              let* α11 := M.call_closure α0 [ α10 ] in
              M.alloc α11 in
            M.alloc (Value.Tuple []);
          fun γ =>
            let* γ0_0 := M.get_struct_record_field_or_break_match γ "enums::WebEvent::Click" "x" in
            let* γ0_1 := M.get_struct_record_field_or_break_match γ "enums::WebEvent::Click" "y" in
            let* x := M.copy γ0_0 in
            let* y := M.copy γ0_1 in
            let* _ :=
              let* _ :=
                let* α0 := M.get_function "std::io::stdio::_print" [] [] in
                let* α1 :=
                  M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
                let* α6 :=
                  (* Unsize *)
                    let* α2 := M.read (mk_str "clicked at x=") in
                    let* α3 := M.read (mk_str ", y=") in
                    let* α4 := M.read (mk_str ".
") in
                    let* α5 := M.alloc (Value.Array [ α2; α3; α4 ]) in
                    M.pure (M.pointer_coercion α5) in
                let* α12 :=
                  (* Unsize *)
                    let* α7 :=
                      M.get_associated_function
                        (Ty.path "core::fmt::rt::Argument")
                        "new_display"
                        [ Ty.path "i64" ]
                        [] in
                    let* α8 := M.call_closure α7 [ x ] in
                    let* α9 :=
                      M.get_associated_function
                        (Ty.path "core::fmt::rt::Argument")
                        "new_display"
                        [ Ty.path "i64" ]
                        [] in
                    let* α10 := M.call_closure α9 [ y ] in
                    let* α11 := M.alloc (Value.Array [ α8; α10 ]) in
                    M.pure (M.pointer_coercion α11) in
                let* α13 := M.call_closure α1 [ α6; α12 ] in
                let* α14 := M.call_closure α0 [ α13 ] in
                M.alloc α14 in
              M.alloc (Value.Tuple []) in
            M.alloc (Value.Tuple [])
        ] in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let pressed = WebEvent::KeyPress('x');
    // `to_owned()` creates an owned `String` from a string slice.
    let pasted = WebEvent::Paste("my text".to_owned());
    let click = WebEvent::Click { x: 20, y: 80 };
    let load = WebEvent::PageLoad;
    let unload = WebEvent::PageUnload;

    inspect(pressed);
    inspect(pasted);
    inspect(click);
    inspect(load);
    inspect(unload);
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* pressed :=
      M.alloc (Value.StructTuple "enums::WebEvent::KeyPress" [ Value.UnicodeChar 120 ]) in
    let* pasted :=
      let* α0 :=
        M.get_trait_method "alloc::borrow::ToOwned" (Ty.path "str") [] [] "to_owned" [] [] in
      let* α1 := M.read (mk_str "my text") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.alloc (Value.StructTuple "enums::WebEvent::Paste" [ α2 ]) in
    let* click :=
      M.alloc
        (Value.StructRecord
          "enums::WebEvent::Click"
          [ ("x", Value.Integer Integer.I64 20); ("y", Value.Integer Integer.I64 80) ]) in
    let* load := M.alloc (Value.StructTuple "enums::WebEvent::PageLoad" []) in
    let* unload := M.alloc (Value.StructTuple "enums::WebEvent::PageUnload" []) in
    let* _ :=
      let* α0 := M.get_function "enums::inspect" [] [] in
      let* α1 := M.read pressed in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.get_function "enums::inspect" [] [] in
      let* α1 := M.read pasted in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.get_function "enums::inspect" [] [] in
      let* α1 := M.read click in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.get_function "enums::inspect" [] [] in
      let* α1 := M.read load in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.get_function "enums::inspect" [] [] in
      let* α1 := M.read unload in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.alloc α2 in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
