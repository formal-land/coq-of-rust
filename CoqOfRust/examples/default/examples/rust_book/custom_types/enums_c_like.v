(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
Enum Number
{
  ty_params := [];
  variants :=
    [
      {
        name := "Zero";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "One";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "Two";
        item := StructTuple [];
        discriminant := None;
      }
    ];
}
*)

(*
Enum Color
{
  ty_params := [];
  variants :=
    [
      {
        name := "Red";
        item := StructTuple [];
        discriminant := Some 16711680;
      };
      {
        name := "Green";
        item := StructTuple [];
        discriminant := Some 65280;
      };
      {
        name := "Blue";
        item := StructTuple [];
        discriminant := Some 255;
      }
    ];
}
*)

(*
fn main() {
    // `enums` can be cast as integers.
    println!("zero is {}", Number::Zero as i32);
    println!("one is {}", Number::One as i32);

    println!("roses are #{:06x}", Color::Red as i32);
    println!("violets are #{:06x}", Color::Blue as i32);
}
*)
Definition main (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [] =>
    ltac:(M.monadic
      (M.read (|
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value (M.read (| M.of_value (| Value.String "zero is " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_display",
                                      [ Ty.path "i32" ]
                                    |),
                                    [
                                      M.alloc (|
                                        M.rust_cast (| M.of_value (| Value.Integer 0 |) |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value (M.read (| M.of_value (| Value.String "one is " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_display",
                                      [ Ty.path "i32" ]
                                    |),
                                    [
                                      M.alloc (|
                                        M.rust_cast (| M.of_value (| Value.Integer 1 |) |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "core::fmt::Arguments",
                      "new_v1_formatted",
                      []
                    |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (| M.of_value (| Value.String "roses are #" |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_lower_hex",
                                      [ Ty.path "i32" ]
                                    |),
                                    [
                                      M.alloc (|
                                        M.rust_cast (|
                                          BinOp.Panic.add (|
                                            Integer.Isize,
                                            M.get_constant (|
                                              "enums_c_like::Color::Red_discriminant"
                                            |),
                                            M.of_value (| Value.Integer 0 |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Placeholder",
                                      "new",
                                      []
                                    |),
                                    [
                                      M.of_value (| Value.Integer 0 |);
                                      M.of_value (| Value.UnicodeChar 32 |);
                                      M.of_value (|
                                        Value.StructTuple "core::fmt::rt::Alignment::Unknown" []
                                      |);
                                      M.of_value (| Value.Integer 8 |);
                                      M.of_value (|
                                        Value.StructTuple "core::fmt::rt::Count::Implied" []
                                      |);
                                      M.of_value (|
                                        Value.StructTuple
                                          "core::fmt::rt::Count::Is"
                                          [ A.to_value (M.of_value (| Value.Integer 6 |)) ]
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::rt::UnsafeArg",
                          "new",
                          []
                        |),
                        []
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "core::fmt::Arguments",
                      "new_v1_formatted",
                      []
                    |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (| M.of_value (| Value.String "violets are #" |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_lower_hex",
                                      [ Ty.path "i32" ]
                                    |),
                                    [
                                      M.alloc (|
                                        M.rust_cast (|
                                          BinOp.Panic.add (|
                                            Integer.Isize,
                                            M.get_constant (|
                                              "enums_c_like::Color::Blue_discriminant"
                                            |),
                                            M.of_value (| Value.Integer 0 |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Placeholder",
                                      "new",
                                      []
                                    |),
                                    [
                                      M.of_value (| Value.Integer 0 |);
                                      M.of_value (| Value.UnicodeChar 32 |);
                                      M.of_value (|
                                        Value.StructTuple "core::fmt::rt::Alignment::Unknown" []
                                      |);
                                      M.of_value (| Value.Integer 8 |);
                                      M.of_value (|
                                        Value.StructTuple "core::fmt::rt::Count::Implied" []
                                      |);
                                      M.of_value (|
                                        Value.StructTuple
                                          "core::fmt::rt::Count::Is"
                                          [ A.to_value (M.of_value (| Value.Integer 6 |)) ]
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::rt::UnsafeArg",
                          "new",
                          []
                        |),
                        []
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        M.alloc (| M.of_value (| Value.Tuple [] |) |)
      |)))
  | _, _ => M.impossible
  end.
