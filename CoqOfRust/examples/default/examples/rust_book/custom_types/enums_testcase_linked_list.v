(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum List *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "Cons";
        item :=
          StructTuple
            [
              Ty.path "u32";
              Ty.apply
                (Ty.path "alloc::boxed::Box")
                [ Ty.path "enums_testcase_linked_list::List"; Ty.path "alloc::alloc::Global" ]
                []
            ];
        discriminant := None;
      };
      {
        name := "Nil";
        item := StructTuple [];
        discriminant := None;
      }
    ];
} *)

Module Impl_enums_testcase_linked_list_List.
  Definition Self : Ty.t := Ty.path "enums_testcase_linked_list::List".
  
  (*
      fn new() -> List {
          // `Nil` has type `List`
          Nil
      }
  *)
  Definition new (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] => M.pure (Value.StructTuple "enums_testcase_linked_list::List::Nil" [])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  
  (*
      fn prepend(self, elem: u32) -> List {
          // `Cons` also has type List
          Cons(elem, Box::new(self))
      }
  *)
  Definition prepend (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; elem ] =>
      let* self := M.alloc self in
      let* elem := M.alloc elem in
      let* α0 := M.read elem in
      let* α1 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "alloc::boxed::Box")
            [ Ty.path "enums_testcase_linked_list::List"; Ty.path "alloc::alloc::Global" ]
            [])
          "new"
          []
          [] in
      let* α2 := M.read self in
      let* α3 := M.call_closure α1 [ α2 ] in
      M.pure (Value.StructTuple "enums_testcase_linked_list::List::Cons" [ α0; α3 ])
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_prepend : M.IsAssociatedFunction Self "prepend" prepend.
  
  (*
      fn len(&self) -> u32 {
          // `self` has to be matched, because the behavior of this method
          // depends on the variant of `self`
          // `self` has type `&List`, and `*self` has type `List`, matching on a
          // concrete type `T` is preferred over a match on a reference `&T`
          // after Rust 2018 you can use self here and tail (with no ref) below as well,
          // rust will infer &s and ref tail.
          // See https://doc.rust-lang.org/edition-guide/rust-2018/ownership-and-lifetimes/default-match-bindings.html
          match *self {
              // Can't take ownership of the tail, because `self` is borrowed;
              // instead take a reference to the tail
              Cons(_, ref tail) => 1 + tail.len(),
              // Base Case: An empty list has zero length
              Nil => 0,
          }
      }
  *)
  Definition len (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      let* α1 :=
        M.match_operator
          α0
          [
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "enums_testcase_linked_list::List::Cons"
                  0 in
              let* γ0_1 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "enums_testcase_linked_list::List::Cons"
                  1 in
              let* tail := M.alloc γ0_1 in
              let* α0 :=
                M.get_associated_function
                  (Ty.path "enums_testcase_linked_list::List")
                  "len"
                  []
                  [] in
              let* α1 := M.read tail in
              let* α2 := M.read α1 in
              let* α3 := M.call_closure α0 [ α2 ] in
              let* α4 := BinOp.Panic.add (Value.Integer Integer.U32 1) α3 in
              M.alloc α4;
            fun γ => M.alloc (Value.Integer Integer.U32 0)
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_len : M.IsAssociatedFunction Self "len" len.
  
  (*
      fn stringify(&self) -> String {
          match *self {
              Cons(head, ref tail) => {
                  // `format!` is similar to `print!`, but returns a heap
                  // allocated string instead of printing to the console
                  format!("{}, {}", head, tail.stringify())
              }
              Nil => {
                  format!("Nil")
              }
          }
      }
  *)
  Definition stringify (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      let* α1 :=
        M.match_operator
          α0
          [
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "enums_testcase_linked_list::List::Cons"
                  0 in
              let* γ0_1 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "enums_testcase_linked_list::List::Cons"
                  1 in
              let* head := M.copy γ0_0 in
              let* tail := M.alloc γ0_1 in
              let* res :=
                let* α0 := M.get_function "alloc::fmt::format" [] [] in
                let* α1 :=
                  M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
                let* α5 :=
                  (* Unsize *)
                    let* α2 := M.read (mk_str "") in
                    let* α3 := M.read (mk_str ", ") in
                    let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                    M.pure (M.pointer_coercion α4) in
                let* α16 :=
                  (* Unsize *)
                    let* α6 :=
                      M.get_associated_function
                        (Ty.path "core::fmt::rt::Argument")
                        "new_display"
                        [ Ty.path "u32" ]
                        [] in
                    let* α7 := M.call_closure α6 [ head ] in
                    let* α8 :=
                      M.get_associated_function
                        (Ty.path "core::fmt::rt::Argument")
                        "new_display"
                        [ Ty.path "alloc::string::String" ]
                        [] in
                    let* α9 :=
                      M.get_associated_function
                        (Ty.path "enums_testcase_linked_list::List")
                        "stringify"
                        []
                        [] in
                    let* α10 := M.read tail in
                    let* α11 := M.read α10 in
                    let* α12 := M.call_closure α9 [ α11 ] in
                    let* α13 := M.alloc α12 in
                    let* α14 := M.call_closure α8 [ α13 ] in
                    let* α15 := M.alloc (Value.Array [ α7; α14 ]) in
                    M.pure (M.pointer_coercion α15) in
                let* α17 := M.call_closure α1 [ α5; α16 ] in
                let* α18 := M.call_closure α0 [ α17 ] in
                M.alloc α18 in
              M.pure res;
            fun γ =>
              let* res :=
                let* α0 := M.get_function "alloc::fmt::format" [] [] in
                let* α1 :=
                  M.get_associated_function
                    (Ty.path "core::fmt::Arguments")
                    "new_const"
                    []
                    [ Value.Bool true ] in
                let* α4 :=
                  (* Unsize *)
                    let* α2 := M.read (mk_str "Nil") in
                    let* α3 := M.alloc (Value.Array [ α2 ]) in
                    M.pure (M.pointer_coercion α3) in
                let* α5 := M.call_closure α1 [ α4 ] in
                let* α6 := M.call_closure α0 [ α5 ] in
                M.alloc α6 in
              M.pure res
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_stringify : M.IsAssociatedFunction Self "stringify" stringify.
End Impl_enums_testcase_linked_list_List.

(*
fn main() {
    // Create an empty linked list
    let mut list = List::new();

    // Prepend some elements
    list = list.prepend(1);
    list = list.prepend(2);
    list = list.prepend(3);

    // Show the final state of the list
    println!("linked list has length: {}", list.len());
    println!("{}", list.stringify());
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* list :=
      let* α0 :=
        M.get_associated_function (Ty.path "enums_testcase_linked_list::List") "new" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.alloc α1 in
    let* _ :=
      let* α0 :=
        M.get_associated_function (Ty.path "enums_testcase_linked_list::List") "prepend" [] [] in
      let* α1 := M.read list in
      let* α2 := M.call_closure α0 [ α1; Value.Integer Integer.U32 1 ] in
      M.assign list α2 in
    let* _ :=
      let* α0 :=
        M.get_associated_function (Ty.path "enums_testcase_linked_list::List") "prepend" [] [] in
      let* α1 := M.read list in
      let* α2 := M.call_closure α0 [ α1; Value.Integer Integer.U32 2 ] in
      M.assign list α2 in
    let* _ :=
      let* α0 :=
        M.get_associated_function (Ty.path "enums_testcase_linked_list::List") "prepend" [] [] in
      let* α1 := M.read list in
      let* α2 := M.call_closure α0 [ α1; Value.Integer Integer.U32 3 ] in
      M.assign list α2 in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α5 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "linked list has length: ") in
            let* α3 := M.read (mk_str "
") in
            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
            M.pure (M.pointer_coercion α4) in
        let* α12 :=
          (* Unsize *)
            let* α6 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_display"
                [ Ty.path "u32" ]
                [] in
            let* α7 :=
              M.get_associated_function (Ty.path "enums_testcase_linked_list::List") "len" [] [] in
            let* α8 := M.call_closure α7 [ list ] in
            let* α9 := M.alloc α8 in
            let* α10 := M.call_closure α6 [ α9 ] in
            let* α11 := M.alloc (Value.Array [ α10 ]) in
            M.pure (M.pointer_coercion α11) in
        let* α13 := M.call_closure α1 [ α5; α12 ] in
        let* α14 := M.call_closure α0 [ α13 ] in
        M.alloc α14 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α5 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "") in
            let* α3 := M.read (mk_str "
") in
            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
            M.pure (M.pointer_coercion α4) in
        let* α12 :=
          (* Unsize *)
            let* α6 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_display"
                [ Ty.path "alloc::string::String" ]
                [] in
            let* α7 :=
              M.get_associated_function
                (Ty.path "enums_testcase_linked_list::List")
                "stringify"
                []
                [] in
            let* α8 := M.call_closure α7 [ list ] in
            let* α9 := M.alloc α8 in
            let* α10 := M.call_closure α6 [ α9 ] in
            let* α11 := M.alloc (Value.Array [ α10 ]) in
            M.pure (M.pointer_coercion α11) in
        let* α13 := M.call_closure α1 [ α5; α12 ] in
        let* α14 := M.call_closure α0 [ α13 ] in
        M.alloc α14 in
      M.alloc (Value.Tuple []) in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
