(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module List.
  Inductive t : Set :=
  |
    Cons
    (_ : u32.t)
    (_ :
      alloc.boxed.Box.t
        enums_testcase_linked_list.List.t
        alloc.boxed.Box.Default.A)
  | Nil.
  
  Definition Get_Cons_0 :=
    Ref.map
      (fun α => match α with | Cons α0 _ => Some α0 | _ => None end)
      (fun β α => match α with | Cons _ α1 => Some (Cons β α1) | _ => None end).
  
  Definition Get_Cons_1 :=
    Ref.map
      (fun α => match α with | Cons _ α1 => Some α1 | _ => None end)
      (fun β α => match α with | Cons α0 _ => Some (Cons α0 β) | _ => None end).
End List.

Module  Impl_enums_testcase_linked_list_List_t.
Section Impl_enums_testcase_linked_list_List_t.
  Definition Self : Set := enums_testcase_linked_list.List.t.
  
  (*
      fn new() -> List {
          // `Nil` has type `List`
          Nil
      }
  *)
  Definition new : M enums_testcase_linked_list.List.t :=
    ltac:(M.monadic (( enums_testcase_linked_list.List.Nil
    ) : enums_testcase_linked_list.List.t)).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      fn prepend(self, elem: u32) -> List {
          // `Cons` also has type List
          Cons(elem, Box::new(self))
      }
  *)
  Definition prepend
      (self : Self)
      (elem : u32.t)
      : M enums_testcase_linked_list.List.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let elem := M.alloc (| elem |) in
      enums_testcase_linked_list.List.Cons
        (M.read (| elem |))
        (M.call (|((alloc.boxed.Box.t
              enums_testcase_linked_list.List.t
              alloc.alloc.Global.t)::["new"]
          (M.read (| self |)))
        |))
    ) : enums_testcase_linked_list.List.t)).
  
  Global Instance AssociatedFunction_prepend :
    Notations.DoubleColon Self "prepend" := {
    Notations.double_colon := prepend;
  }.
  
  (*
      fn len(&self) -> u32 {
          // `self` has to be matched, because the behavior of this method
          // depends on the variant of `self`
          // `self` has type `&List`, and `*self` has type `List`, matching on a
          // concrete type `T` is preferred over a match on a reference `&T`
          // after Rust 2018 you can use self here and tail (with no ref) below as well,
          // rust will infer &s and ref tail.
          // See https://doc.rust-lang.org/edition-guide/rust-2018/ownership-and-lifetimes/default-match-bindings.html
          match *self {
              // Can't take ownership of the tail, because `self` is borrowed;
              // instead take a reference to the tail
              Cons(_, ref tail) => 1 + tail.len(),
              // Base Case: An empty list has zero length
              Nil => 0,
          }
      }
  *)
  Definition len (self : ref Self) : M u32.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (deref (M.read (| self |)))
            [
              fun (γ : M.Val enums_testcase_linked_list.List.t) =>
                match M.read (| γ |) with
                | enums_testcase_linked_list.List.Cons _ _ =>
                  let γ0_0 := enums_testcase_linked_list.List.Get_Cons_0 γ in
                  let γ0_1 := enums_testcase_linked_list.List.Get_Cons_1 γ in
                  let tail := M.alloc (| borrow γ0_1 |) in
                  M.alloc (|
                    BinOp.Panic.add (|
                      (Integer.of_Z 1) : u32.t,
                      M.call (|(enums_testcase_linked_list.List.t::["len"]
                        (borrow
                          (deref (M.read (| deref (M.read (| tail |)) |)))))
                      |)
                    |)
                  |)
                | _ => M.break_match(||)
                end :
                M.Val u32.t;
              fun (γ : M.Val enums_testcase_linked_list.List.t) =>
                match M.read (| γ |) with
                | enums_testcase_linked_list.List.Nil =>
                  M.alloc (| (Integer.of_Z 0) : u32.t |)
                | _ => M.break_match(||)
                end :
                M.Val u32.t
            ])
      |)
    ) : u32.t)).
  
  Global Instance AssociatedFunction_len : Notations.DoubleColon Self "len" := {
    Notations.double_colon := len;
  }.
  
  (*
      fn stringify(&self) -> String {
          match *self {
              Cons(head, ref tail) => {
                  // `format!` is similar to `print!`, but returns a heap
                  // allocated string instead of printing to the console
                  format!("{}, {}", head, tail.stringify())
              }
              Nil => {
                  format!("Nil")
              }
          }
      }
  *)
  Definition stringify (self : ref Self) : M alloc.string.String.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (deref (M.read (| self |)))
            [
              fun (γ : M.Val enums_testcase_linked_list.List.t) =>
                match M.read (| γ |) with
                | enums_testcase_linked_list.List.Cons _ _ =>
                  let γ0_0 := enums_testcase_linked_list.List.Get_Cons_0 γ in
                  let γ0_1 := enums_testcase_linked_list.List.Get_Cons_1 γ in
                  let head := M.copy (| γ0_0 |) in
                  let tail := M.alloc (| borrow γ0_1 |) in
                  let res : M.Val alloc.string.String.t :=
                    M.alloc (|
                      M.call (|(alloc.fmt.format
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (| mk_str "" |);
                                  M.read (| mk_str ", " |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                    (borrow head))
                                  |);
                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                    (borrow
                                      (M.alloc (|
                                        M.call (|(enums_testcase_linked_list.List.t::["stringify"]
                                          (borrow
                                            (deref
                                              (M.read (|
                                                deref (M.read (| tail |))
                                              |)))))
                                        |)
                                      |))))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  res
                | _ => M.break_match(||)
                end :
                M.Val alloc.string.String.t;
              fun (γ : M.Val enums_testcase_linked_list.List.t) =>
                match M.read (| γ |) with
                | enums_testcase_linked_list.List.Nil =>
                  let res : M.Val alloc.string.String.t :=
                    M.alloc (|
                      M.call (|(alloc.fmt.format
                        (M.call (|(core.fmt.Arguments.t::["new_const"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (| [ M.read (| mk_str "Nil" |) ] |)))))
                        |)))
                      |)
                    |) in
                  res
                | _ => M.break_match(||)
                end :
                M.Val alloc.string.String.t
            ])
      |)
    ) : alloc.string.String.t)).
  
  Global Instance AssociatedFunction_stringify :
    Notations.DoubleColon Self "stringify" := {
    Notations.double_colon := stringify;
  }.
End Impl_enums_testcase_linked_list_List_t.
End Impl_enums_testcase_linked_list_List_t.

(*
fn main() {
    // Create an empty linked list
    let mut list = List::new();

    // Prepend some elements
    list = list.prepend(1);
    list = list.prepend(2);
    list = list.prepend(3);

    // Show the final state of the list
    println!("linked list has length: {}", list.len());
    println!("{}", list.stringify());
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let list : M.Val enums_testcase_linked_list.List.t :=
        M.alloc (| M.call (|enums_testcase_linked_list.List.t::["new"] |) |) in
      let _ : M.Val unit :=
        assign (|
          list,
          M.call (|(enums_testcase_linked_list.List.t::["prepend"]
            (M.read (| list |))
            ((Integer.of_Z 1) : u32.t))
          |)
        |) in
      let _ : M.Val unit :=
        assign (|
          list,
          M.call (|(enums_testcase_linked_list.List.t::["prepend"]
            (M.read (| list |))
            ((Integer.of_Z 2) : u32.t))
          |)
        |) in
      let _ : M.Val unit :=
        assign (|
          list,
          M.call (|(enums_testcase_linked_list.List.t::["prepend"]
            (M.read (| list |))
            ((Integer.of_Z 3) : u32.t))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "linked list has length: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(enums_testcase_linked_list.List.t::["len"]
                                (borrow list))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "" |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(enums_testcase_linked_list.List.t::["stringify"]
                                (borrow list))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
