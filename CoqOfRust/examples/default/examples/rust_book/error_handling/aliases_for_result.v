(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Ltac AliasedResult T :=
  exact (core.result.Result.t T core.num.error.ParseIntError.t).

(*
fn multiply(first_number_str: &str, second_number_str: &str) -> AliasedResult<i32> {
    first_number_str.parse::<i32>().and_then(|first_number| {
        second_number_str
            .parse::<i32>()
            .map(|second_number| first_number * second_number)
    })
}
*)
Definition multiply
    (first_number_str : ref str.t)
    (second_number_str : ref str.t)
    : M ltac:(aliases_for_result.AliasedResult i32.t) :=
  ltac:(M.monadic ((
    let first_number_str := M.alloc (| first_number_str |) in
    let second_number_str := M.alloc (| second_number_str |) in
    M.call (|((core.result.Result.t
          i32.t
          core.num.error.ParseIntError.t)::["and_then"]
      (M.call (|(str.t::["parse"] (M.read (| first_number_str |))) |))
      (fun (α0 : i32.t) =>
        (ltac:
          (M.monadic_match_operator
            (M.alloc (| α0 |))
            [
              fun γ =>
                (let first_number := M.copy (| γ |) in
                M.call (|((core.result.Result.t
                      i32.t
                      core.num.error.ParseIntError.t)::["map"]
                  (M.call (|(str.t::["parse"] (M.read (| second_number_str |)))
                  |))
                  (fun (α0 : i32.t) =>
                    (ltac:
                      (M.monadic_match_operator
                        (M.alloc (| α0 |))
                        [
                          fun γ =>
                            (let second_number := M.copy (| γ |) in
                            BinOp.Panic.mul (|
                              M.read (| first_number |),
                              M.read (| second_number |)
                            |)) :
                            i32.t
                        ])) :
                    i32.t))
                |)) :
                core.result.Result.t i32.t core.num.error.ParseIntError.t
            ])) :
        core.result.Result.t i32.t core.num.error.ParseIntError.t))
    |)
  ) : ltac:(aliases_for_result.AliasedResult i32.t))).

(*
fn print(result: AliasedResult<i32>) {
    match result {
        Ok(n) => println!("n is {}", n),
        Err(e) => println!("Error: {}", e),
    }
}
*)
Definition print
    (result : ltac:(aliases_for_result.AliasedResult i32.t))
    : M unit :=
  ltac:(M.monadic ((
    let result := M.alloc (| result |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          result
          [
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      i32.t
                      core.num.error.ParseIntError.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Ok _ =>
                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                let n := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "n is " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow n))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      i32.t
                      core.num.error.ParseIntError.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Err _ =>
                let γ0_0 := core.result.Result.Get_Err_0 γ in
                let e := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "Error: " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow e))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit
          ])
    |)
  ) : unit)).

(*
fn main() {
    print(multiply("10", "2"));
    print(multiply("t", "2"));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(aliases_for_result.print
            (M.call (|(aliases_for_result.multiply
              (M.read (| mk_str "10" |))
              (M.read (| mk_str "2" |)))
            |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(aliases_for_result.print
            (M.call (|(aliases_for_result.multiply
              (M.read (| mk_str "t" |))
              (M.read (| mk_str "2" |)))
            |)))
          |)
        |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
