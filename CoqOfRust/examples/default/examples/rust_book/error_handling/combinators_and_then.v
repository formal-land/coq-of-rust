(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Food.
  Inductive t : Set :=
  | CordonBleu
  | Steak
  | Sushi.
End Food.

Module  Impl_core_fmt_Debug_for_combinators_and_then_Food_t.
Section Impl_core_fmt_Debug_for_combinators_and_then_Food_t.
  Definition Self : Set := combinators_and_then.Food.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["write_str"]
        (M.read (| f |))
        (M.read (|
          ltac:
            (M.monadic_match_operator
              self
              [
                fun (γ : M.Val (ref combinators_and_then.Food.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  | combinators_and_then.Food.CordonBleu =>
                    M.alloc (| M.read (| mk_str "CordonBleu" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t);
                fun (γ : M.Val (ref combinators_and_then.Food.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  | combinators_and_then.Food.Steak =>
                    M.alloc (| M.read (| mk_str "Steak" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t);
                fun (γ : M.Val (ref combinators_and_then.Food.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  | combinators_and_then.Food.Sushi =>
                    M.alloc (| M.read (| mk_str "Sushi" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t)
              ])
        |)))
      |)
    ) : ltac:(core.fmt.Result))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_combinators_and_then_Food_t.
End Impl_core_fmt_Debug_for_combinators_and_then_Food_t.

Module Day.
  Inductive t : Set :=
  | Monday
  | Tuesday
  | Wednesday.
End Day.

Module  Impl_core_fmt_Debug_for_combinators_and_then_Day_t.
Section Impl_core_fmt_Debug_for_combinators_and_then_Day_t.
  Definition Self : Set := combinators_and_then.Day.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["write_str"]
        (M.read (| f |))
        (M.read (|
          ltac:
            (M.monadic_match_operator
              self
              [
                fun (γ : M.Val (ref combinators_and_then.Day.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  | combinators_and_then.Day.Monday =>
                    M.alloc (| M.read (| mk_str "Monday" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t);
                fun (γ : M.Val (ref combinators_and_then.Day.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  | combinators_and_then.Day.Tuesday =>
                    M.alloc (| M.read (| mk_str "Tuesday" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t);
                fun (γ : M.Val (ref combinators_and_then.Day.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  | combinators_and_then.Day.Wednesday =>
                    M.alloc (| M.read (| mk_str "Wednesday" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t)
              ])
        |)))
      |)
    ) : ltac:(core.fmt.Result))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_combinators_and_then_Day_t.
End Impl_core_fmt_Debug_for_combinators_and_then_Day_t.

(*
fn have_ingredients(food: Food) -> Option<Food> {
    match food {
        Food::Sushi => None,
        _ => Some(food),
    }
}
*)
Definition have_ingredients
    (food : combinators_and_then.Food.t)
    : M (core.option.Option.t combinators_and_then.Food.t) :=
  ltac:(M.monadic ((
    let food := M.alloc (| food |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          food
          [
            fun (γ : M.Val combinators_and_then.Food.t) =>
              match M.read (| γ |) with
              | combinators_and_then.Food.Sushi =>
                M.alloc (| core.option.Option.None |)
              | _ => M.break_match(||)
              end :
              M.Val (core.option.Option.t combinators_and_then.Food.t);
            fun (γ : M.Val combinators_and_then.Food.t) =>
              (M.alloc (| core.option.Option.Some (M.read (| food |)) |)) :
              M.Val (core.option.Option.t combinators_and_then.Food.t)
          ])
    |)
  ) : core.option.Option.t combinators_and_then.Food.t)).

(*
fn have_recipe(food: Food) -> Option<Food> {
    match food {
        Food::CordonBleu => None,
        _ => Some(food),
    }
}
*)
Definition have_recipe
    (food : combinators_and_then.Food.t)
    : M (core.option.Option.t combinators_and_then.Food.t) :=
  ltac:(M.monadic ((
    let food := M.alloc (| food |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          food
          [
            fun (γ : M.Val combinators_and_then.Food.t) =>
              match M.read (| γ |) with
              | combinators_and_then.Food.CordonBleu =>
                M.alloc (| core.option.Option.None |)
              | _ => M.break_match(||)
              end :
              M.Val (core.option.Option.t combinators_and_then.Food.t);
            fun (γ : M.Val combinators_and_then.Food.t) =>
              (M.alloc (| core.option.Option.Some (M.read (| food |)) |)) :
              M.Val (core.option.Option.t combinators_and_then.Food.t)
          ])
    |)
  ) : core.option.Option.t combinators_and_then.Food.t)).

(*
fn cookable_v1(food: Food) -> Option<Food> {
    match have_recipe(food) {
        None => None,
        Some(food) => match have_ingredients(food) {
            None => None,
            Some(food) => Some(food),
        },
    }
}
*)
Definition cookable_v1
    (food : combinators_and_then.Food.t)
    : M (core.option.Option.t combinators_and_then.Food.t) :=
  ltac:(M.monadic ((
    let food := M.alloc (| food |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          (M.alloc (|
            M.call (|(combinators_and_then.have_recipe (M.read (| food |))) |)
          |))
          [
            fun
                (γ :
                  M.Val (core.option.Option.t combinators_and_then.Food.t)) =>
              match M.read (| γ |) with
              | core.option.Option.None => M.alloc (| core.option.Option.None |)
              | _ => M.break_match(||)
              end :
              M.Val (core.option.Option.t combinators_and_then.Food.t);
            fun
                (γ :
                  M.Val (core.option.Option.t combinators_and_then.Food.t)) =>
              match M.read (| γ |) with
              | core.option.Option.Some _ =>
                let γ0_0 := core.option.Option.Get_Some_0 γ in
                let food := M.copy (| γ0_0 |) in
                ltac:
                  (M.monadic_match_operator
                    (M.alloc (|
                      M.call (|(combinators_and_then.have_ingredients
                        (M.read (| food |)))
                      |)
                    |))
                    [
                      fun
                          (γ :
                            M.Val
                              (core.option.Option.t
                                combinators_and_then.Food.t)) =>
                        match M.read (| γ |) with
                        | core.option.Option.None =>
                          M.alloc (| core.option.Option.None |)
                        | _ => M.break_match(||)
                        end :
                        M.Val
                          (core.option.Option.t combinators_and_then.Food.t);
                      fun
                          (γ :
                            M.Val
                              (core.option.Option.t
                                combinators_and_then.Food.t)) =>
                        match M.read (| γ |) with
                        | core.option.Option.Some _ =>
                          let γ0_0 := core.option.Option.Get_Some_0 γ in
                          let food := M.copy (| γ0_0 |) in
                          M.alloc (| core.option.Option.Some (M.read (| food |))
                          |)
                        | _ => M.break_match(||)
                        end :
                        M.Val (core.option.Option.t combinators_and_then.Food.t)
                    ])
              | _ => M.break_match(||)
              end :
              M.Val (core.option.Option.t combinators_and_then.Food.t)
          ])
    |)
  ) : core.option.Option.t combinators_and_then.Food.t)).

(*
fn cookable_v2(food: Food) -> Option<Food> {
    have_recipe(food).and_then(have_ingredients)
}
*)
Definition cookable_v2
    (food : combinators_and_then.Food.t)
    : M (core.option.Option.t combinators_and_then.Food.t) :=
  ltac:(M.monadic ((
    let food := M.alloc (| food |) in
    M.call (|((core.option.Option.t combinators_and_then.Food.t)::["and_then"]
      (M.call (|(combinators_and_then.have_recipe (M.read (| food |))) |))
      combinators_and_then.have_ingredients)
    |)
  ) : core.option.Option.t combinators_and_then.Food.t)).

(*
fn eat(food: Food, day: Day) {
    match cookable_v2(food) {
        Some(food) => println!("Yay! On {:?} we get to eat {:?}.", day, food),
        None => println!("Oh no. We don't get to eat on {:?}?", day),
    }
}
*)
Definition eat
    (food : combinators_and_then.Food.t)
    (day : combinators_and_then.Day.t)
    : M unit :=
  ltac:(M.monadic ((
    let food := M.alloc (| food |) in
    let day := M.alloc (| day |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          (M.alloc (|
            M.call (|(combinators_and_then.cookable_v2 (M.read (| food |))) |)
          |))
          [
            fun
                (γ :
                  M.Val (core.option.Option.t combinators_and_then.Food.t)) =>
              match M.read (| γ |) with
              | core.option.Option.Some _ =>
                let γ0_0 := core.option.Option.Get_Some_0 γ in
                let food := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "Yay! On " |);
                                M.read (| mk_str " we get to eat " |);
                                M.read (| mk_str ".
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                  (borrow day))
                                |);
                                M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                  (borrow food))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun
                (γ :
                  M.Val (core.option.Option.t combinators_and_then.Food.t)) =>
              match M.read (| γ |) with
              | core.option.Option.None =>
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (|
                                  mk_str "Oh no. We don't get to eat on "
                                |);
                                M.read (| mk_str "?
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                  (borrow day))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit
          ])
    |)
  ) : unit)).

(*
fn main() {
    let (cordon_bleu, steak, sushi) = (Food::CordonBleu, Food::Steak, Food::Sushi);

    eat(cordon_bleu, Day::Monday);
    eat(steak, Day::Tuesday);
    eat(sushi, Day::Wednesday);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      ltac:
        (M.monadic_match_operator
          (M.alloc (|
            (combinators_and_then.Food.CordonBleu,
              combinators_and_then.Food.Steak,
              combinators_and_then.Food.Sushi)
          |))
          [
            fun
                (γ :
                  M.Val
                    ((combinators_and_then.Food.t * combinators_and_then.Food.t)
                    *
                    combinators_and_then.Food.t)) =>
              match M.read (| γ |) with
              | (_, _, _) =>
                let γ0_0 := Tuple.Access.left (Tuple.Access.left γ) in
                let γ0_1 := Tuple.Access.right (Tuple.Access.left γ) in
                let γ0_2 := Tuple.Access.right γ in
                let cordon_bleu := M.copy (| γ0_0 |) in
                let steak := M.copy (| γ0_1 |) in
                let sushi := M.copy (| γ0_2 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(combinators_and_then.eat
                      (M.read (| cordon_bleu |))
                      combinators_and_then.Day.Monday)
                    |)
                  |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(combinators_and_then.eat
                      (M.read (| steak |))
                      combinators_and_then.Day.Tuesday)
                    |)
                  |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(combinators_and_then.eat
                      (M.read (| sushi |))
                      combinators_and_then.Day.Wednesday)
                    |)
                  |) in
                M.alloc (| tt |)
              end :
              M.Val unit
          ])
    |)
  ) : unit)).
