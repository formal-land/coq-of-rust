(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
Enum Food
{
  ty_params := [];
  variants :=
    [
      {
        name := "CordonBleu";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "Steak";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "Sushi";
        item := StructTuple [];
        discriminant := None;
      }
    ];
}
*)

Module Impl_core_fmt_Debug_for_combinators_and_then_Food.
  Definition Self : Ty.t := Ty.path "combinators_and_then::Food".
  
  (* Debug *)
  Definition fmt (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ self; f ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let f := M.alloc (| f |) in
        M.call_closure (|
          M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
          [
            M.read (| f |);
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      M.alloc (| M.read (| M.of_value (| Value.String "CordonBleu" |) |) |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      M.alloc (| M.read (| M.of_value (| Value.String "Steak" |) |) |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      M.alloc (| M.read (| M.of_value (| Value.String "Sushi" |) |) |)))
                ]
              |)
            |)
          ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_combinators_and_then_Food.

(*
Enum Day
{
  ty_params := [];
  variants :=
    [
      {
        name := "Monday";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "Tuesday";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "Wednesday";
        item := StructTuple [];
        discriminant := None;
      }
    ];
}
*)

Module Impl_core_fmt_Debug_for_combinators_and_then_Day.
  Definition Self : Ty.t := Ty.path "combinators_and_then::Day".
  
  (* Debug *)
  Definition fmt (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ self; f ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let f := M.alloc (| f |) in
        M.call_closure (|
          M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
          [
            M.read (| f |);
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      M.alloc (| M.read (| M.of_value (| Value.String "Monday" |) |) |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      M.alloc (| M.read (| M.of_value (| Value.String "Tuesday" |) |) |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      M.alloc (| M.read (| M.of_value (| Value.String "Wednesday" |) |) |)))
                ]
              |)
            |)
          ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_combinators_and_then_Day.

(*
fn have_ingredients(food: Food) -> Option<Food> {
    match food {
        Food::Sushi => None,
        _ => Some(food),
    }
}
*)
Definition have_ingredients (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [ food ] =>
    ltac:(M.monadic
      (let food := M.alloc (| food |) in
      M.read (|
        M.match_operator (|
          food,
          [
            fun γ =>
              ltac:(M.monadic
                (M.alloc (| M.of_value (| Value.StructTuple "core::option::Option::None" [] |) |)));
            fun γ =>
              ltac:(M.monadic
                (M.alloc (|
                  M.of_value (|
                    Value.StructTuple
                      "core::option::Option::Some"
                      [ A.to_value (M.read (| food |)) ]
                  |)
                |)))
          ]
        |)
      |)))
  | _, _ => M.impossible
  end.

(*
fn have_recipe(food: Food) -> Option<Food> {
    match food {
        Food::CordonBleu => None,
        _ => Some(food),
    }
}
*)
Definition have_recipe (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [ food ] =>
    ltac:(M.monadic
      (let food := M.alloc (| food |) in
      M.read (|
        M.match_operator (|
          food,
          [
            fun γ =>
              ltac:(M.monadic
                (M.alloc (| M.of_value (| Value.StructTuple "core::option::Option::None" [] |) |)));
            fun γ =>
              ltac:(M.monadic
                (M.alloc (|
                  M.of_value (|
                    Value.StructTuple
                      "core::option::Option::Some"
                      [ A.to_value (M.read (| food |)) ]
                  |)
                |)))
          ]
        |)
      |)))
  | _, _ => M.impossible
  end.

(*
fn cookable_v1(food: Food) -> Option<Food> {
    match have_recipe(food) {
        None => None,
        Some(food) => match have_ingredients(food) {
            None => None,
            Some(food) => Some(food),
        },
    }
}
*)
Definition cookable_v1 (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [ food ] =>
    ltac:(M.monadic
      (let food := M.alloc (| food |) in
      M.read (|
        M.match_operator (|
          M.alloc (|
            M.call_closure (|
              M.get_function (| "combinators_and_then::have_recipe", [] |),
              [ M.read (| food |) ]
            |)
          |),
          [
            fun γ =>
              ltac:(M.monadic
                (M.alloc (| M.of_value (| Value.StructTuple "core::option::Option::None" [] |) |)));
            fun γ =>
              ltac:(M.monadic
                (let γ0_0 :=
                  M.SubPointer.get_struct_tuple_field (| γ, "core::option::Option::Some", 0 |) in
                let food := M.copy (| γ0_0 |) in
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "combinators_and_then::have_ingredients", [] |),
                      [ M.read (| food |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          M.of_value (| Value.StructTuple "core::option::Option::None" [] |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let food := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.of_value (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [ A.to_value (M.read (| food |)) ]
                          |)
                        |)))
                  ]
                |)))
          ]
        |)
      |)))
  | _, _ => M.impossible
  end.

(*
fn cookable_v2(food: Food) -> Option<Food> {
    have_recipe(food).and_then(have_ingredients)
}
*)
Definition cookable_v2 (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [ food ] =>
    ltac:(M.monadic
      (let food := M.alloc (| food |) in
      M.call_closure (|
        M.get_associated_function (|
          Ty.apply (Ty.path "core::option::Option") [ Ty.path "combinators_and_then::Food" ],
          "and_then",
          [
            Ty.path "combinators_and_then::Food";
            Ty.function
              [ Ty.path "combinators_and_then::Food" ]
              (Ty.apply (Ty.path "core::option::Option") [ Ty.path "combinators_and_then::Food" ])
          ]
        |),
        [
          M.call_closure (|
            M.get_function (| "combinators_and_then::have_recipe", [] |),
            [ M.read (| food |) ]
          |);
          M.get_function (| "combinators_and_then::have_ingredients", [] |)
        ]
      |)))
  | _, _ => M.impossible
  end.

(*
fn eat(food: Food, day: Day) {
    match cookable_v2(food) {
        Some(food) => println!("Yay! On {:?} we get to eat {:?}.", day, food),
        None => println!("Oh no. We don't get to eat on {:?}?", day),
    }
}
*)
Definition eat (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [ food; day ] =>
    ltac:(M.monadic
      (let food := M.alloc (| food |) in
      let day := M.alloc (| day |) in
      M.read (|
        M.match_operator (|
          M.alloc (|
            M.call_closure (|
              M.get_function (| "combinators_and_then::cookable_v2", [] |),
              [ M.read (| food |) ]
            |)
          |),
          [
            fun γ =>
              ltac:(M.monadic
                (let γ0_0 :=
                  M.SubPointer.get_struct_tuple_field (| γ, "core::option::Option::Some", 0 |) in
                let food := M.copy (| γ0_0 |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "std::io::stdio::_print", [] |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            []
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion (|
                              M.alloc (|
                                M.of_value (|
                                  Value.Array
                                    [
                                      A.to_value
                                        (M.read (| M.of_value (| Value.String "Yay! On " |) |));
                                      A.to_value
                                        (M.read (|
                                          M.of_value (| Value.String " we get to eat " |)
                                        |));
                                      A.to_value (M.read (| M.of_value (| Value.String ".
" |) |))
                                    ]
                                |)
                              |)
                            |);
                            (* Unsize *)
                            M.pointer_coercion (|
                              M.alloc (|
                                M.of_value (|
                                  Value.Array
                                    [
                                      A.to_value
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [ Ty.path "combinators_and_then::Day" ]
                                          |),
                                          [ day ]
                                        |));
                                      A.to_value
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [ Ty.path "combinators_and_then::Food" ]
                                          |),
                                          [ food ]
                                        |))
                                    ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (| M.of_value (| Value.Tuple [] |) |)));
            fun γ =>
              ltac:(M.monadic
                (let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "std::io::stdio::_print", [] |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            []
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion (|
                              M.alloc (|
                                M.of_value (|
                                  Value.Array
                                    [
                                      A.to_value
                                        (M.read (|
                                          M.of_value (|
                                            Value.String "Oh no. We don't get to eat on "
                                          |)
                                        |));
                                      A.to_value (M.read (| M.of_value (| Value.String "?
" |) |))
                                    ]
                                |)
                              |)
                            |);
                            (* Unsize *)
                            M.pointer_coercion (|
                              M.alloc (|
                                M.of_value (|
                                  Value.Array
                                    [
                                      A.to_value
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [ Ty.path "combinators_and_then::Day" ]
                                          |),
                                          [ day ]
                                        |))
                                    ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (| M.of_value (| Value.Tuple [] |) |)))
          ]
        |)
      |)))
  | _, _ => M.impossible
  end.

(*
fn main() {
    let (cordon_bleu, steak, sushi) = (Food::CordonBleu, Food::Steak, Food::Sushi);

    eat(cordon_bleu, Day::Monday);
    eat(steak, Day::Tuesday);
    eat(sushi, Day::Wednesday);
}
*)
Definition main (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [] =>
    ltac:(M.monadic
      (M.read (|
        M.match_operator (|
          M.alloc (|
            M.of_value (|
              Value.Tuple
                [
                  A.to_value
                    (M.of_value (|
                      Value.StructTuple "combinators_and_then::Food::CordonBleu" []
                    |));
                  A.to_value
                    (M.of_value (| Value.StructTuple "combinators_and_then::Food::Steak" [] |));
                  A.to_value
                    (M.of_value (| Value.StructTuple "combinators_and_then::Food::Sushi" [] |))
                ]
            |)
          |),
          [
            fun γ =>
              ltac:(M.monadic
                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                let cordon_bleu := M.copy (| γ0_0 |) in
                let steak := M.copy (| γ0_1 |) in
                let sushi := M.copy (| γ0_2 |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "combinators_and_then::eat", [] |),
                      [
                        M.read (| cordon_bleu |);
                        M.of_value (| Value.StructTuple "combinators_and_then::Day::Monday" [] |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "combinators_and_then::eat", [] |),
                      [
                        M.read (| steak |);
                        M.of_value (| Value.StructTuple "combinators_and_then::Day::Tuesday" [] |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "combinators_and_then::eat", [] |),
                      [
                        M.read (| sushi |);
                        M.of_value (| Value.StructTuple "combinators_and_then::Day::Wednesday" [] |)
                      ]
                    |)
                  |) in
                M.alloc (| M.of_value (| Value.Tuple [] |) |)))
          ]
        |)
      |)))
  | _, _ => M.impossible
  end.
