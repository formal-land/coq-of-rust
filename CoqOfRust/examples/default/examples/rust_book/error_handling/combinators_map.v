(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum Food *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "Apple";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "Carrot";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "Potato";
        item := StructTuple [];
        discriminant := None;
      }
    ];
} *)

Module Impl_core_fmt_Debug_for_combinators_map_Food.
  Definition Self : Ty.t := Ty.path "combinators_map::Food".
  
  (*
  Debug
  *)
  Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 := M.get_associated_function (Ty.path "core::fmt::Formatter") "write_str" [] [] in
      let* α1 := M.read f in
      let* α2 :=
        M.match_operator
          self
          [
            fun γ =>
              let* γ := M.read γ in
              let* α0 := M.read (mk_str "Apple") in
              M.alloc α0;
            fun γ =>
              let* γ := M.read γ in
              let* α0 := M.read (mk_str "Carrot") in
              M.alloc α0;
            fun γ =>
              let* γ := M.read γ in
              let* α0 := M.read (mk_str "Potato") in
              M.alloc α0
          ] in
      let* α3 := M.read α2 in
      M.call_closure α0 [ α1; α3 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_combinators_map_Food.

(* StructTuple
  {
    name := "Peeled";
    ty_params := [];
    fields := [ Ty.path "combinators_map::Food" ];
  } *)

Module Impl_core_fmt_Debug_for_combinators_map_Peeled.
  Definition Self : Ty.t := Ty.path "combinators_map::Peeled".
  
  (*
  Debug
  *)
  Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :=
        M.get_associated_function
          (Ty.path "core::fmt::Formatter")
          "debug_tuple_field1_finish"
          []
          [] in
      let* α1 := M.read f in
      let* α2 := M.read (mk_str "Peeled") in
      let* α5 :=
        (* Unsize *)
          let* α3 := M.read self in
          let* α4 := M.alloc (M.get_struct_tuple_field α3 "combinators_map::Peeled" 0) in
          M.pure (M.pointer_coercion α4) in
      M.call_closure α0 [ α1; α2; α5 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_combinators_map_Peeled.

(* StructTuple
  {
    name := "Chopped";
    ty_params := [];
    fields := [ Ty.path "combinators_map::Food" ];
  } *)

Module Impl_core_fmt_Debug_for_combinators_map_Chopped.
  Definition Self : Ty.t := Ty.path "combinators_map::Chopped".
  
  (*
  Debug
  *)
  Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :=
        M.get_associated_function
          (Ty.path "core::fmt::Formatter")
          "debug_tuple_field1_finish"
          []
          [] in
      let* α1 := M.read f in
      let* α2 := M.read (mk_str "Chopped") in
      let* α5 :=
        (* Unsize *)
          let* α3 := M.read self in
          let* α4 := M.alloc (M.get_struct_tuple_field α3 "combinators_map::Chopped" 0) in
          M.pure (M.pointer_coercion α4) in
      M.call_closure α0 [ α1; α2; α5 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_combinators_map_Chopped.

(* StructTuple
  {
    name := "Cooked";
    ty_params := [];
    fields := [ Ty.path "combinators_map::Food" ];
  } *)

Module Impl_core_fmt_Debug_for_combinators_map_Cooked.
  Definition Self : Ty.t := Ty.path "combinators_map::Cooked".
  
  (*
  Debug
  *)
  Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :=
        M.get_associated_function
          (Ty.path "core::fmt::Formatter")
          "debug_tuple_field1_finish"
          []
          [] in
      let* α1 := M.read f in
      let* α2 := M.read (mk_str "Cooked") in
      let* α5 :=
        (* Unsize *)
          let* α3 := M.read self in
          let* α4 := M.alloc (M.get_struct_tuple_field α3 "combinators_map::Cooked" 0) in
          M.pure (M.pointer_coercion α4) in
      M.call_closure α0 [ α1; α2; α5 ]
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_combinators_map_Cooked.

(*
fn peel(food: Option<Food>) -> Option<Peeled> {
    match food {
        Some(food) => Some(Peeled(food)),
        None => None,
    }
}
*)
Definition peel (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ food ] =>
    let* food := M.alloc food in
    let* α0 :=
      M.match_operator
        food
        [
          fun γ =>
            let* γ0_0 := M.get_struct_tuple_field_or_break_match γ "core::option::Option::Some" 0 in
            let* food := M.copy γ0_0 in
            let* α0 := M.read food in
            M.alloc
              (Value.StructTuple
                "core::option::Option::Some"
                [ Value.StructTuple "combinators_map::Peeled" [ α0 ] ]);
          fun γ => M.alloc (Value.StructTuple "core::option::Option::None" [])
        ] in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn chop(peeled: Option<Peeled>) -> Option<Chopped> {
    match peeled {
        Some(Peeled(food)) => Some(Chopped(food)),
        None => None,
    }
}
*)
Definition chop (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ peeled ] =>
    let* peeled := M.alloc peeled in
    let* α0 :=
      M.match_operator
        peeled
        [
          fun γ =>
            let* γ0_0 := M.get_struct_tuple_field_or_break_match γ "core::option::Option::Some" 0 in
            let* γ1_0 := M.get_struct_tuple_field_or_break_match γ0_0 "combinators_map::Peeled" 0 in
            let* food := M.copy γ1_0 in
            let* α0 := M.read food in
            M.alloc
              (Value.StructTuple
                "core::option::Option::Some"
                [ Value.StructTuple "combinators_map::Chopped" [ α0 ] ]);
          fun γ => M.alloc (Value.StructTuple "core::option::Option::None" [])
        ] in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn cook(chopped: Option<Chopped>) -> Option<Cooked> {
    chopped.map(|Chopped(food)| Cooked(food))
}
*)
Definition cook (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ chopped ] =>
    let* chopped := M.alloc chopped in
    let* α0 :=
      M.get_associated_function
        (Ty.apply (Ty.path "core::option::Option") [ Ty.path "combinators_map::Chopped" ] [])
        "map"
        [
          Ty.path "combinators_map::Cooked";
          Ty.function
            [ Ty.tuple [ Ty.path "combinators_map::Chopped" ] ]
            (Ty.path "combinators_map::Cooked")
        ]
        [] in
    let* α1 := M.read chopped in
    M.call_closure
      α0
      [
        α1;
        M.closure
          (fun γ =>
            match γ with
            | [ α0 ] =>
              let* α0 := M.alloc α0 in
              M.match_operator
                α0
                [
                  fun γ =>
                    let* γ0_0 :=
                      M.get_struct_tuple_field_or_break_match γ "combinators_map::Chopped" 0 in
                    let* food := M.copy γ0_0 in
                    let* α0 := M.read food in
                    M.pure (Value.StructTuple "combinators_map::Cooked" [ α0 ])
                ]
            | _ => M.impossible
            end)
      ]
  | _, _ => M.impossible
  end.

(*
fn process(food: Option<Food>) -> Option<Cooked> {
    food.map(|f| Peeled(f))
        .map(|Peeled(f)| Chopped(f))
        .map(|Chopped(f)| Cooked(f))
}
*)
Definition process (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ food ] =>
    let* food := M.alloc food in
    let* α0 :=
      M.get_associated_function
        (Ty.apply (Ty.path "core::option::Option") [ Ty.path "combinators_map::Chopped" ] [])
        "map"
        [
          Ty.path "combinators_map::Cooked";
          Ty.function
            [ Ty.tuple [ Ty.path "combinators_map::Chopped" ] ]
            (Ty.path "combinators_map::Cooked")
        ]
        [] in
    let* α1 :=
      M.get_associated_function
        (Ty.apply (Ty.path "core::option::Option") [ Ty.path "combinators_map::Peeled" ] [])
        "map"
        [
          Ty.path "combinators_map::Chopped";
          Ty.function
            [ Ty.tuple [ Ty.path "combinators_map::Peeled" ] ]
            (Ty.path "combinators_map::Chopped")
        ]
        [] in
    let* α2 :=
      M.get_associated_function
        (Ty.apply (Ty.path "core::option::Option") [ Ty.path "combinators_map::Food" ] [])
        "map"
        [
          Ty.path "combinators_map::Peeled";
          Ty.function
            [ Ty.tuple [ Ty.path "combinators_map::Food" ] ]
            (Ty.path "combinators_map::Peeled")
        ]
        [] in
    let* α3 := M.read food in
    let* α4 :=
      M.call_closure
        α2
        [
          α3;
          M.closure
            (fun γ =>
              match γ with
              | [ α0 ] =>
                let* α0 := M.alloc α0 in
                M.match_operator
                  α0
                  [
                    fun γ =>
                      let* f := M.copy γ in
                      let* α0 := M.read f in
                      M.pure (Value.StructTuple "combinators_map::Peeled" [ α0 ])
                  ]
              | _ => M.impossible
              end)
        ] in
    let* α5 :=
      M.call_closure
        α1
        [
          α4;
          M.closure
            (fun γ =>
              match γ with
              | [ α0 ] =>
                let* α0 := M.alloc α0 in
                M.match_operator
                  α0
                  [
                    fun γ =>
                      let* γ0_0 :=
                        M.get_struct_tuple_field_or_break_match γ "combinators_map::Peeled" 0 in
                      let* f := M.copy γ0_0 in
                      let* α0 := M.read f in
                      M.pure (Value.StructTuple "combinators_map::Chopped" [ α0 ])
                  ]
              | _ => M.impossible
              end)
        ] in
    M.call_closure
      α0
      [
        α5;
        M.closure
          (fun γ =>
            match γ with
            | [ α0 ] =>
              let* α0 := M.alloc α0 in
              M.match_operator
                α0
                [
                  fun γ =>
                    let* γ0_0 :=
                      M.get_struct_tuple_field_or_break_match γ "combinators_map::Chopped" 0 in
                    let* f := M.copy γ0_0 in
                    let* α0 := M.read f in
                    M.pure (Value.StructTuple "combinators_map::Cooked" [ α0 ])
                ]
            | _ => M.impossible
            end)
      ]
  | _, _ => M.impossible
  end.

(*
fn eat(food: Option<Cooked>) {
    match food {
        Some(food) => println!("Mmm. I love {:?}", food),
        None => println!("Oh no! It wasn't edible."),
    }
}
*)
Definition eat (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ food ] =>
    let* food := M.alloc food in
    let* α0 :=
      M.match_operator
        food
        [
          fun γ =>
            let* γ0_0 := M.get_struct_tuple_field_or_break_match γ "core::option::Option::Some" 0 in
            let* food := M.copy γ0_0 in
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" [] [] in
              let* α1 :=
                M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
              let* α5 :=
                (* Unsize *)
                  let* α2 := M.read (mk_str "Mmm. I love ") in
                  let* α3 := M.read (mk_str "
") in
                  let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                  M.pure (M.pointer_coercion α4) in
              let* α9 :=
                (* Unsize *)
                  let* α6 :=
                    M.get_associated_function
                      (Ty.path "core::fmt::rt::Argument")
                      "new_debug"
                      [ Ty.path "combinators_map::Cooked" ]
                      [] in
                  let* α7 := M.call_closure α6 [ food ] in
                  let* α8 := M.alloc (Value.Array [ α7 ]) in
                  M.pure (M.pointer_coercion α8) in
              let* α10 := M.call_closure α1 [ α5; α9 ] in
              let* α11 := M.call_closure α0 [ α10 ] in
              M.alloc α11 in
            M.alloc (Value.Tuple []);
          fun γ =>
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" [] [] in
              let* α1 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Arguments")
                  "new_const"
                  []
                  [ Value.Bool true ] in
              let* α4 :=
                (* Unsize *)
                  let* α2 := M.read (mk_str "Oh no! It wasn't edible.
") in
                  let* α3 := M.alloc (Value.Array [ α2 ]) in
                  M.pure (M.pointer_coercion α3) in
              let* α5 := M.call_closure α1 [ α4 ] in
              let* α6 := M.call_closure α0 [ α5 ] in
              M.alloc α6 in
            M.alloc (Value.Tuple [])
        ] in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let apple = Some(Food::Apple);
    let carrot = Some(Food::Carrot);
    let potato = None;

    let cooked_apple = cook(chop(peel(apple)));
    let cooked_carrot = cook(chop(peel(carrot)));
    // Let's try the simpler looking `process()` now.
    let cooked_potato = process(potato);

    eat(cooked_apple);
    eat(cooked_carrot);
    eat(cooked_potato);
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* apple :=
      M.alloc
        (Value.StructTuple
          "core::option::Option::Some"
          [ Value.StructTuple "combinators_map::Food::Apple" [] ]) in
    let* carrot :=
      M.alloc
        (Value.StructTuple
          "core::option::Option::Some"
          [ Value.StructTuple "combinators_map::Food::Carrot" [] ]) in
    let* potato := M.alloc (Value.StructTuple "core::option::Option::None" []) in
    let* cooked_apple :=
      let* α0 := M.get_function "combinators_map::cook" [] [] in
      let* α1 := M.get_function "combinators_map::chop" [] [] in
      let* α2 := M.get_function "combinators_map::peel" [] [] in
      let* α3 := M.read apple in
      let* α4 := M.call_closure α2 [ α3 ] in
      let* α5 := M.call_closure α1 [ α4 ] in
      let* α6 := M.call_closure α0 [ α5 ] in
      M.alloc α6 in
    let* cooked_carrot :=
      let* α0 := M.get_function "combinators_map::cook" [] [] in
      let* α1 := M.get_function "combinators_map::chop" [] [] in
      let* α2 := M.get_function "combinators_map::peel" [] [] in
      let* α3 := M.read carrot in
      let* α4 := M.call_closure α2 [ α3 ] in
      let* α5 := M.call_closure α1 [ α4 ] in
      let* α6 := M.call_closure α0 [ α5 ] in
      M.alloc α6 in
    let* cooked_potato :=
      let* α0 := M.get_function "combinators_map::process" [] [] in
      let* α1 := M.read potato in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.get_function "combinators_map::eat" [] [] in
      let* α1 := M.read cooked_apple in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.get_function "combinators_map::eat" [] [] in
      let* α1 := M.read cooked_carrot in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.get_function "combinators_map::eat" [] [] in
      let* α1 := M.read cooked_potato in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.alloc α2 in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
