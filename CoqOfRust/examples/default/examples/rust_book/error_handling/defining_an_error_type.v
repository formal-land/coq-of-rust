(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  DoubleError.
Section DoubleError.
  Inductive t : Set := Build.
End DoubleError.
End DoubleError.

Module  Impl_core_fmt_Debug_for_defining_an_error_type_DoubleError_t.
Section Impl_core_fmt_Debug_for_defining_an_error_type_DoubleError_t.
  Definition Self : Set := defining_an_error_type.DoubleError.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["write_str"]
        (M.read (| f |))
        (M.read (| mk_str "DoubleError" |)))
      |)
    )).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_defining_an_error_type_DoubleError_t.
End Impl_core_fmt_Debug_for_defining_an_error_type_DoubleError_t.

Module  Impl_core_clone_Clone_for_defining_an_error_type_DoubleError_t.
Section Impl_core_clone_Clone_for_defining_an_error_type_DoubleError_t.
  Definition Self : Set := defining_an_error_type.DoubleError.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M defining_an_error_type.DoubleError.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      defining_an_error_type.DoubleError.Build
    )).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_defining_an_error_type_DoubleError_t.
End Impl_core_clone_Clone_for_defining_an_error_type_DoubleError_t.

Ltac Result T :=
  exact (core.result.Result.t T defining_an_error_type.DoubleError.t).

Module  Impl_core_fmt_Display_for_defining_an_error_type_DoubleError_t.
Section Impl_core_fmt_Display_for_defining_an_error_type_DoubleError_t.
  Definition Self : Set := defining_an_error_type.DoubleError.t.
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          write!(f, "invalid first item to double")
      }
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["write_fmt"]
        (M.read (| f |))
        (M.call (|(core.fmt.Arguments.t::["new_const"]
          (pointer_coercion
            "Unsize"
            (borrow
              (M.alloc (| [ M.read (| mk_str "invalid first item to double" |) ]
              |)))))
        |)))
      |)
    )).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt := fmt;
  }.
End Impl_core_fmt_Display_for_defining_an_error_type_DoubleError_t.
End Impl_core_fmt_Display_for_defining_an_error_type_DoubleError_t.

(*
fn double_first(vec: Vec<&str>) -> Result<i32> {
    vec.first()
        // Change the error to our new type.
        .ok_or(DoubleError)
        .and_then(|s| {
            s.parse::<i32>()
                // Update to the new error type here also.
                .map_err(|_| DoubleError)
                .map(|i| 2 * i)
        })
}
*)
Definition double_first
    (vec : alloc.vec.Vec.t (ref str.t) alloc.vec.Vec.Default.A)
    : M ltac:(defining_an_error_type.Result i32.t) :=
  ltac:(M.monadic (
    let vec := M.alloc (| vec |) in
    M.call (|((core.result.Result.t
          (ref (ref str.t))
          defining_an_error_type.DoubleError.t)::["and_then"]
      (M.call (|((core.option.Option.t (ref (ref str.t)))::["ok_or"]
        (M.call (|((slice (ref str.t))::["first"]
          (M.call (|(ltac:(M.get_method (fun ℐ =>
              core.ops.deref.Deref.deref
                (Self := alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t)
                (Trait := ℐ)))
            (borrow vec))
          |)))
        |))
        defining_an_error_type.DoubleError.Build)
      |))
      (fun (α0 : ref (ref str.t)) =>
        (ltac:
          (M.monadic_match_operator
            (M.alloc (| α0 |))
            [
              fun γ =>
                (let s := M.copy (| γ |) in
                M.call (|((core.result.Result.t
                      i32.t
                      defining_an_error_type.DoubleError.t)::["map"]
                  (M.call (|((core.result.Result.t
                        i32.t
                        core.num.error.ParseIntError.t)::["map_err"]
                    (M.call (|(str.t::["parse"]
                      (M.read (| deref (M.read (| s |)) |)))
                    |))
                    (fun (α0 : core.num.error.ParseIntError.t) =>
                      (ltac:
                        (M.monadic_match_operator
                          (M.alloc (| α0 |))
                          [
                            fun γ =>
                              defining_an_error_type.DoubleError.Build :
                              defining_an_error_type.DoubleError.t
                          ])) :
                      defining_an_error_type.DoubleError.t))
                  |))
                  (fun (α0 : i32.t) =>
                    (ltac:
                      (M.monadic_match_operator
                        (M.alloc (| α0 |))
                        [
                          fun γ =>
                            (let i := M.copy (| γ |) in
                            BinOp.Panic.mul (|
                              (Integer.of_Z 2) : i32.t,
                              M.read (| i |)
                            |)) :
                            i32.t
                        ])) :
                    i32.t))
                |)) :
                core.result.Result.t i32.t defining_an_error_type.DoubleError.t
            ])) :
        core.result.Result.t i32.t defining_an_error_type.DoubleError.t))
    |)
  )).

(*
fn print(result: Result<i32>) {
    match result {
        Ok(n) => println!("The first doubled is {}", n),
        Err(e) => println!("Error: {}", e),
    }
}
*)
Definition print
    (result : ltac:(defining_an_error_type.Result i32.t))
    : M unit :=
  ltac:(M.monadic (
    let result := M.alloc (| result |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          result
          [
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      i32.t
                      defining_an_error_type.DoubleError.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Ok _ =>
                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                let n := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "The first doubled is " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow n))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      i32.t
                      defining_an_error_type.DoubleError.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Err _ =>
                let γ0_0 := core.result.Result.Get_Err_0 γ in
                let e := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "Error: " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow e))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit
          ])
    |)
  )).

(*
fn main() {
    let numbers = vec!["42", "93", "18"];
    let empty = vec![];
    let strings = vec!["tofu", "93", "18"];

    print(double_first(numbers));
    print(double_first(empty));
    print(double_first(strings));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let numbers : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((slice (ref str.t))::["into_vec"]
            (pointer_coercion
              "Unsize"
              (M.read (|
                M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                  (M.alloc (|
                    [
                      M.read (| mk_str "42" |);
                      M.read (| mk_str "93" |);
                      M.read (| mk_str "18" |)
                    ]
                  |)))
                |)
              |))))
          |)
        |) in
      let empty : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|(alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t)::["new"]
          |)
        |) in
      let strings : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((slice (ref str.t))::["into_vec"]
            (pointer_coercion
              "Unsize"
              (M.read (|
                M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                  (M.alloc (|
                    [
                      M.read (| mk_str "tofu" |);
                      M.read (| mk_str "93" |);
                      M.read (| mk_str "18" |)
                    ]
                  |)))
                |)
              |))))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(defining_an_error_type.print
            (M.call (|(defining_an_error_type.double_first
              (M.read (| numbers |)))
            |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(defining_an_error_type.print
            (M.call (|(defining_an_error_type.double_first (M.read (| empty |)))
            |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(defining_an_error_type.print
            (M.call (|(defining_an_error_type.double_first
              (M.read (| strings |)))
            |)))
          |)
        |) in
      M.alloc (| tt |)
    |)
  )).
