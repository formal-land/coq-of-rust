(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn multiply(first_number_str: &str, second_number_str: &str) -> Result<i32, ParseIntError> {
    let first_number = first_number_str.parse::<i32>()?;
    let second_number = second_number_str.parse::<i32>()?;

    Ok(first_number * second_number)
}
*)
Definition multiply
    (first_number_str : ref str.t)
    (second_number_str : ref str.t)
    : M (core.result.Result.t i32.t core.num.error.ParseIntError.t) :=
  ltac:(M.monadic ((
    let first_number_str := M.alloc (| first_number_str |) in
    let second_number_str := M.alloc (| second_number_str |) in
    let return_ :=
      M.return_
        (R := core.result.Result.t i32.t core.num.error.ParseIntError.t) in
    M.catch_return
      (M.read (|
        let first_number : M.Val i32.t :=
          M.copy (|
            ltac:
              (M.monadic_match_operator
                (M.alloc (|
                  M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            i32.t
                            core.num.error.ParseIntError.t)
                        (Trait := ℐ)))
                    (M.call (|(str.t::["parse"] (M.read (| first_number_str |)))
                    |)))
                  |)
                |))
                [
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              core.num.error.ParseIntError.t)
                            i32.t)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Break _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                      let residual := M.copy (| γ0_0 |) in
                      M.alloc (|
                        (never_to_any (B := i32.t)) (|
                          M.read (|
                            return_
                              (M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.try_trait.FromResidual.from_residual
                                    (Self :=
                                      core.result.Result.t
                                        i32.t
                                        core.num.error.ParseIntError.t)
                                    (R :=
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        core.num.error.ParseIntError.t)
                                    (Trait := ℐ)))
                                (M.read (| residual |)))
                              |))
                          |)
                        |)
                      |)
                    | _ => M.break_match(||)
                    end :
                    M.Val i32.t;
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              core.num.error.ParseIntError.t)
                            i32.t)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Continue _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                      let val := M.copy (| γ0_0 |) in
                      val
                    | _ => M.break_match(||)
                    end :
                    M.Val i32.t
                ])
          |) in
        let second_number : M.Val i32.t :=
          M.copy (|
            ltac:
              (M.monadic_match_operator
                (M.alloc (|
                  M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            i32.t
                            core.num.error.ParseIntError.t)
                        (Trait := ℐ)))
                    (M.call (|(str.t::["parse"]
                      (M.read (| second_number_str |)))
                    |)))
                  |)
                |))
                [
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              core.num.error.ParseIntError.t)
                            i32.t)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Break _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                      let residual := M.copy (| γ0_0 |) in
                      M.alloc (|
                        (never_to_any (B := i32.t)) (|
                          M.read (|
                            return_
                              (M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.try_trait.FromResidual.from_residual
                                    (Self :=
                                      core.result.Result.t
                                        i32.t
                                        core.num.error.ParseIntError.t)
                                    (R :=
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        core.num.error.ParseIntError.t)
                                    (Trait := ℐ)))
                                (M.read (| residual |)))
                              |))
                          |)
                        |)
                      |)
                    | _ => M.break_match(||)
                    end :
                    M.Val i32.t;
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              core.num.error.ParseIntError.t)
                            i32.t)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Continue _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                      let val := M.copy (| γ0_0 |) in
                      val
                    | _ => M.break_match(||)
                    end :
                    M.Val i32.t
                ])
          |) in
        M.alloc (|
          core.result.Result.Ok
            (BinOp.Panic.mul (|
              M.read (| first_number |),
              M.read (| second_number |)
            |))
        |)
      |))
  ) : core.result.Result.t i32.t core.num.error.ParseIntError.t)).

(*
fn print(result: Result<i32, ParseIntError>) {
    match result {
        Ok(n) => println!("n is {}", n),
        Err(e) => println!("Error: {}", e),
    }
}
*)
Definition print
    (result : core.result.Result.t i32.t core.num.error.ParseIntError.t)
    : M unit :=
  ltac:(M.monadic ((
    let result := M.alloc (| result |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          result
          [
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      i32.t
                      core.num.error.ParseIntError.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Ok _ =>
                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                let n := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "n is " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow n))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      i32.t
                      core.num.error.ParseIntError.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Err _ =>
                let γ0_0 := core.result.Result.Get_Err_0 γ in
                let e := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "Error: " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow e))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit
          ])
    |)
  ) : unit)).

(*
fn main() {
    print(multiply("10", "2"));
    print(multiply("t", "2"));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(introducing_question_mark.print
            (M.call (|(introducing_question_mark.multiply
              (M.read (| mk_str "10" |))
              (M.read (| mk_str "2" |)))
            |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(introducing_question_mark.print
            (M.call (|(introducing_question_mark.multiply
              (M.read (| mk_str "t" |))
              (M.read (| mk_str "2" |)))
            |)))
          |)
        |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
