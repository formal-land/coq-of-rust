(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn multiply(first_number_str: &str, second_number_str: &str) -> Result<i32, ParseIntError> {
    match first_number_str.parse::<i32>() {
        Ok(first_number) => match second_number_str.parse::<i32>() {
            Ok(second_number) => Ok(first_number * second_number),
            Err(e) => Err(e),
        },
        Err(e) => Err(e),
    }
}
*)
Definition multiply
    (first_number_str : ref str.t)
    (second_number_str : ref str.t)
    : M (core.result.Result.t i32.t core.num.error.ParseIntError.t) :=
  ltac:(M.monadic (
    let first_number_str := M.alloc (| first_number_str |) in
    let second_number_str := M.alloc (| second_number_str |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          (M.alloc (|
            M.call (|(str.t::["parse"] (M.read (| first_number_str |))) |)
          |))
          [
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      i32.t
                      core.num.error.ParseIntError.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Ok _ =>
                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                let first_number := M.copy (| γ0_0 |) in
                ltac:
                  (M.monadic_match_operator
                    (M.alloc (|
                      M.call (|(str.t::["parse"]
                        (M.read (| second_number_str |)))
                      |)
                    |))
                    [
                      fun
                          (γ :
                            M.Val
                              (core.result.Result.t
                                i32.t
                                core.num.error.ParseIntError.t)) =>
                        match M.read (| γ |) with
                        | core.result.Result.Ok _ =>
                          let γ0_0 := core.result.Result.Get_Ok_0 γ in
                          let second_number := M.copy (| γ0_0 |) in
                          M.alloc (|
                            core.result.Result.Ok
                              (BinOp.Panic.mul (|
                                M.read (| first_number |),
                                M.read (| second_number |)
                              |))
                          |)
                        | _ => M.break_match(||)
                        end :
                        M.Val
                          (core.result.Result.t
                            i32.t
                            core.num.error.ParseIntError.t);
                      fun
                          (γ :
                            M.Val
                              (core.result.Result.t
                                i32.t
                                core.num.error.ParseIntError.t)) =>
                        match M.read (| γ |) with
                        | core.result.Result.Err _ =>
                          let γ0_0 := core.result.Result.Get_Err_0 γ in
                          let e := M.copy (| γ0_0 |) in
                          M.alloc (| core.result.Result.Err (M.read (| e |)) |)
                        | _ => M.break_match(||)
                        end :
                        M.Val
                          (core.result.Result.t
                            i32.t
                            core.num.error.ParseIntError.t)
                    ])
              | _ => M.break_match(||)
              end :
              M.Val (core.result.Result.t i32.t core.num.error.ParseIntError.t);
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      i32.t
                      core.num.error.ParseIntError.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Err _ =>
                let γ0_0 := core.result.Result.Get_Err_0 γ in
                let e := M.copy (| γ0_0 |) in
                M.alloc (| core.result.Result.Err (M.read (| e |)) |)
              | _ => M.break_match(||)
              end :
              M.Val (core.result.Result.t i32.t core.num.error.ParseIntError.t)
          ])
    |)
  )).

(*
fn print(result: Result<i32, ParseIntError>) {
    match result {
        Ok(n) => println!("n is {}", n),
        Err(e) => println!("Error: {}", e),
    }
}
*)
Definition print
    (result : core.result.Result.t i32.t core.num.error.ParseIntError.t)
    : M unit :=
  ltac:(M.monadic (
    let result := M.alloc (| result |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          result
          [
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      i32.t
                      core.num.error.ParseIntError.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Ok _ =>
                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                let n := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "n is " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow n))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      i32.t
                      core.num.error.ParseIntError.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Err _ =>
                let γ0_0 := core.result.Result.Get_Err_0 γ in
                let e := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "Error: " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow e))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit
          ])
    |)
  )).

(*
fn main() {
    // This still presents a reasonable answer.
    let twenty = multiply("10", "2");
    print(twenty);

    // The following now provides a much more helpful error message.
    let tt = multiply("t", "2");
    print(tt);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let twenty :
          M.Val (core.result.Result.t i32.t core.num.error.ParseIntError.t) :=
        M.alloc (|
          M.call (|(map_in_result_via_match.multiply
            (M.read (| mk_str "10" |))
            (M.read (| mk_str "2" |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(map_in_result_via_match.print (M.read (| twenty |))) |)
        |) in
      let tt_ :
          M.Val (core.result.Result.t i32.t core.num.error.ParseIntError.t) :=
        M.alloc (|
          M.call (|(map_in_result_via_match.multiply
            (M.read (| mk_str "t" |))
            (M.read (| mk_str "2" |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(map_in_result_via_match.print (M.read (| tt_ |))) |)
        |) in
      M.alloc (| tt |)
    |)
  )).
