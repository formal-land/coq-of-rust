(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn double_first(vec: Vec<&str>) -> i32 {
    let first = vec.first().unwrap(); // Generate error 1
    2 * first.parse::<i32>().unwrap() // Generate error 2
}
*)
Definition double_first
    (vec : alloc.vec.Vec.t (ref str.t) alloc.vec.Vec.Default.A)
    : M i32.t :=
  ltac:(M.monadic (
    let vec := M.alloc (| vec |) in
    M.read (|
      let first : M.Val (ref (ref str.t)) :=
        M.alloc (|
          M.call (|((core.option.Option.t (ref (ref str.t)))::["unwrap"]
            (M.call (|((slice (ref str.t))::["first"]
              (M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.ops.deref.Deref.deref
                    (Self := alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t)
                    (Trait := ℐ)))
                (borrow vec))
              |)))
            |)))
          |)
        |) in
      M.alloc (|
        BinOp.Panic.mul (|
          (Integer.of_Z 2) : i32.t,
          M.call (|((core.result.Result.t
                i32.t
                core.num.error.ParseIntError.t)::["unwrap"]
            (M.call (|(str.t::["parse"]
              (M.read (| deref (M.read (| first |)) |)))
            |)))
          |)
        |)
      |)
    |)
  )).

(*
fn main() {
    let numbers = vec!["42", "93", "18"];
    let empty = vec![];
    let strings = vec!["tofu", "93", "18"];

    println!("The first doubled is {}", double_first(numbers));

    println!("The first doubled is {}", double_first(empty));
    // Error 1: the input vector is empty

    println!("The first doubled is {}", double_first(strings));
    // Error 2: the element doesn't parse to a number
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let numbers : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((slice (ref str.t))::["into_vec"]
            (pointer_coercion
              "Unsize"
              (M.read (|
                M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                  (M.alloc (|
                    [
                      M.read (| mk_str "42" |);
                      M.read (| mk_str "93" |);
                      M.read (| mk_str "18" |)
                    ]
                  |)))
                |)
              |))))
          |)
        |) in
      let empty : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|(alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t)::["new"]
          |)
        |) in
      let strings : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((slice (ref str.t))::["into_vec"]
            (pointer_coercion
              "Unsize"
              (M.read (|
                M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                  (M.alloc (|
                    [
                      M.read (| mk_str "tofu" |);
                      M.read (| mk_str "93" |);
                      M.read (| mk_str "18" |)
                    ]
                  |)))
                |)
              |))))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "The first doubled is " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(multiple_error_types.double_first
                                (M.read (| numbers |)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "The first doubled is " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(multiple_error_types.double_first
                                (M.read (| empty |)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "The first doubled is " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(multiple_error_types.double_first
                                (M.read (| strings |)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
