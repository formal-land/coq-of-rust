(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Ltac Result T :=
  exact
    (core.result.Result.t
      T
      (alloc.boxed.Box.t
        (dyn [core.error.Error.Trait])
        alloc.boxed.Box.Default.A)).

Module  EmptyVec.
Section EmptyVec.
  Inductive t : Set := Build.
End EmptyVec.
End EmptyVec.

Module  Impl_core_fmt_Debug_for_other_uses_of_question_mark_EmptyVec_t.
Section Impl_core_fmt_Debug_for_other_uses_of_question_mark_EmptyVec_t.
  Definition Self : Set := other_uses_of_question_mark.EmptyVec.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["write_str"]
        (M.read (| f |))
        (M.read (| mk_str "EmptyVec" |)))
      |)
    ) : ltac:(core.fmt.Result))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_other_uses_of_question_mark_EmptyVec_t.
End Impl_core_fmt_Debug_for_other_uses_of_question_mark_EmptyVec_t.

Module  Impl_core_fmt_Display_for_other_uses_of_question_mark_EmptyVec_t.
Section Impl_core_fmt_Display_for_other_uses_of_question_mark_EmptyVec_t.
  Definition Self : Set := other_uses_of_question_mark.EmptyVec.t.
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          write!(f, "invalid first item to double")
      }
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["write_fmt"]
        (M.read (| f |))
        (M.call (|(core.fmt.Arguments.t::["new_const"]
          (pointer_coercion
            "Unsize"
            (borrow
              (M.alloc (| [ M.read (| mk_str "invalid first item to double" |) ]
              |)))))
        |)))
      |)
    ) : ltac:(core.fmt.Result))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt := fmt;
  }.
End Impl_core_fmt_Display_for_other_uses_of_question_mark_EmptyVec_t.
End Impl_core_fmt_Display_for_other_uses_of_question_mark_EmptyVec_t.

Module  Impl_core_error_Error_for_other_uses_of_question_mark_EmptyVec_t.
Section Impl_core_error_Error_for_other_uses_of_question_mark_EmptyVec_t.
  Definition Self : Set := other_uses_of_question_mark.EmptyVec.t.
  
  Global Instance ℐ : core.error.Error.Required.Trait Self := {
    core.error.Error.source := Datatypes.None;
    core.error.Error.type_id := Datatypes.None;
    core.error.Error.description := Datatypes.None;
    core.error.Error.cause := Datatypes.None;
    core.error.Error.provide := Datatypes.None;
  }.
End Impl_core_error_Error_for_other_uses_of_question_mark_EmptyVec_t.
End Impl_core_error_Error_for_other_uses_of_question_mark_EmptyVec_t.

(*
fn double_first(vec: Vec<&str>) -> Result<i32> {
    let first = vec.first().ok_or(EmptyVec)?;
    let parsed = first.parse::<i32>()?;
    Ok(2 * parsed)
}
*)
Definition double_first
    (vec : alloc.vec.Vec.t (ref str.t) alloc.vec.Vec.Default.A)
    : M ltac:(other_uses_of_question_mark.Result i32.t) :=
  ltac:(M.monadic ((
    let vec := M.alloc (| vec |) in
    let return_ :=
      M.return_ (R := ltac:(other_uses_of_question_mark.Result i32.t)) in
    ltac:
      (M.monadic_catch_return
        (M.read (|
          let first : M.Val (ref (ref str.t)) :=
            M.copy (|
              ltac:
                (M.monadic_match_operator
                  (M.alloc (|
                    M.call (|(ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.Try.branch
                          (Self :=
                            core.result.Result.t
                              (ref (ref str.t))
                              other_uses_of_question_mark.EmptyVec.t)
                          (Trait := ℐ)))
                      (M.call (|((core.option.Option.t
                            (ref (ref str.t)))::["ok_or"]
                        (M.call (|((slice (ref str.t))::["first"]
                          (M.call (|(ltac:(M.get_method (fun ℐ =>
                              core.ops.deref.Deref.deref
                                (Self :=
                                  alloc.vec.Vec.t
                                    (ref str.t)
                                    alloc.alloc.Global.t)
                                (Trait := ℐ)))
                            (borrow vec))
                          |)))
                        |))
                        other_uses_of_question_mark.EmptyVec.Build)
                      |)))
                    |)
                  |))
                  [
                    fun
                        (γ :
                          M.Val
                            (core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t
                                core.convert.Infallible.t
                                other_uses_of_question_mark.EmptyVec.t)
                              (ref (ref str.t)))) =>
                      match M.read (| γ |) with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          (never_to_any (B := ref (ref str.t))) (|
                            M.read (|
                              return_
                                (|
                                  M.call (|(ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            i32.t
                                            (alloc.boxed.Box.t
                                              (dyn [core.error.Error.Trait])
                                              alloc.alloc.Global.t))
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            other_uses_of_question_mark.EmptyVec.t)
                                        (Trait := ℐ)))
                                    (M.read (| residual |)))
                                  |)
                                |)
                            |)
                          |)
                        |)
                      | _ => M.break_match(||)
                      end :
                      M.Val (ref (ref str.t));
                    fun
                        (γ :
                          M.Val
                            (core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t
                                core.convert.Infallible.t
                                other_uses_of_question_mark.EmptyVec.t)
                              (ref (ref str.t)))) =>
                      match M.read (| γ |) with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let val := M.copy (| γ0_0 |) in
                        val
                      | _ => M.break_match(||)
                      end :
                      M.Val (ref (ref str.t))
                  ])
            |) in
          let parsed : M.Val i32.t :=
            M.copy (|
              ltac:
                (M.monadic_match_operator
                  (M.alloc (|
                    M.call (|(ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.Try.branch
                          (Self :=
                            core.result.Result.t
                              i32.t
                              core.num.error.ParseIntError.t)
                          (Trait := ℐ)))
                      (M.call (|(str.t::["parse"]
                        (M.read (| deref (M.read (| first |)) |)))
                      |)))
                    |)
                  |))
                  [
                    fun
                        (γ :
                          M.Val
                            (core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t
                                core.convert.Infallible.t
                                core.num.error.ParseIntError.t)
                              i32.t)) =>
                      match M.read (| γ |) with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          (never_to_any (B := i32.t)) (|
                            M.read (|
                              return_
                                (|
                                  M.call (|(ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self :=
                                          core.result.Result.t
                                            i32.t
                                            (alloc.boxed.Box.t
                                              (dyn [core.error.Error.Trait])
                                              alloc.alloc.Global.t))
                                        (R :=
                                          core.result.Result.t
                                            core.convert.Infallible.t
                                            core.num.error.ParseIntError.t)
                                        (Trait := ℐ)))
                                    (M.read (| residual |)))
                                  |)
                                |)
                            |)
                          |)
                        |)
                      | _ => M.break_match(||)
                      end :
                      M.Val i32.t;
                    fun
                        (γ :
                          M.Val
                            (core.ops.control_flow.ControlFlow.t
                              (core.result.Result.t
                                core.convert.Infallible.t
                                core.num.error.ParseIntError.t)
                              i32.t)) =>
                      match M.read (| γ |) with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let val := M.copy (| γ0_0 |) in
                        val
                      | _ => M.break_match(||)
                      end :
                      M.Val i32.t
                  ])
            |) in
          M.alloc (|
            core.result.Result.Ok
              (BinOp.Panic.mul (| (Integer.of_Z 2) : i32.t, M.read (| parsed |)
              |))
          |)
        |)))
  ) : ltac:(other_uses_of_question_mark.Result i32.t))).

(*
fn print(result: Result<i32>) {
    match result {
        Ok(n) => println!("The first doubled is {}", n),
        Err(e) => println!("Error: {}", e),
    }
}
*)
Definition print
    (result : ltac:(other_uses_of_question_mark.Result i32.t))
    : M unit :=
  ltac:(M.monadic ((
    let result := M.alloc (| result |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          result
          [
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      i32.t
                      (alloc.boxed.Box.t
                        (dyn [core.error.Error.Trait])
                        alloc.alloc.Global.t))) =>
              match M.read (| γ |) with
              | core.result.Result.Ok _ =>
                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                let n := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "The first doubled is " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow n))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      i32.t
                      (alloc.boxed.Box.t
                        (dyn [core.error.Error.Trait])
                        alloc.alloc.Global.t))) =>
              match M.read (| γ |) with
              | core.result.Result.Err _ =>
                let γ0_0 := core.result.Result.Get_Err_0 γ in
                let e := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "Error: " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow e))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit
          ])
    |)
  ) : unit)).

(*
fn main() {
    let numbers = vec!["42", "93", "18"];
    let empty = vec![];
    let strings = vec!["tofu", "93", "18"];

    print(double_first(numbers));
    print(double_first(empty));
    print(double_first(strings));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let numbers : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((slice (ref str.t))::["into_vec"]
            (pointer_coercion
              "Unsize"
              (M.read (|
                M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                  (M.alloc (|
                    [
                      M.read (| mk_str "42" |);
                      M.read (| mk_str "93" |);
                      M.read (| mk_str "18" |)
                    ]
                  |)))
                |)
              |))))
          |)
        |) in
      let empty : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|(alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t)::["new"]
          |)
        |) in
      let strings : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((slice (ref str.t))::["into_vec"]
            (pointer_coercion
              "Unsize"
              (M.read (|
                M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                  (M.alloc (|
                    [
                      M.read (| mk_str "tofu" |);
                      M.read (| mk_str "93" |);
                      M.read (| mk_str "18" |)
                    ]
                  |)))
                |)
              |))))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(other_uses_of_question_mark.print
            (M.call (|(other_uses_of_question_mark.double_first
              (M.read (| numbers |)))
            |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(other_uses_of_question_mark.print
            (M.call (|(other_uses_of_question_mark.double_first
              (M.read (| empty |)))
            |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(other_uses_of_question_mark.print
            (M.call (|(other_uses_of_question_mark.double_first
              (M.read (| strings |)))
            |)))
          |)
        |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
