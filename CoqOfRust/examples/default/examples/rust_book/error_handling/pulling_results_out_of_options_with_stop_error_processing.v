(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn double_first(vec: Vec<&str>) -> Result<Option<i32>, ParseIntError> {
    let opt = vec.first().map(|first| first.parse::<i32>().map(|n| 2 * n));

    opt.map_or(Ok(None), |r| r.map(Some))
}
*)
Definition double_first
    (vec : alloc.vec.Vec.t (ref str.t) alloc.vec.Vec.Default.A)
    :
      M
        (core.result.Result.t
          (core.option.Option.t i32.t)
          core.num.error.ParseIntError.t) :=
  ltac:(M.monadic ((
    let vec := M.alloc (| vec |) in
    M.read (|
      let opt :
          M.Val
            (core.option.Option.t
              (core.result.Result.t i32.t core.num.error.ParseIntError.t)) :=
        M.alloc (|
          M.call (|((core.option.Option.t (ref (ref str.t)))::["map"]
            (M.call (|((slice (ref str.t))::["first"]
              (M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.ops.deref.Deref.deref
                    (Self := alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t)
                    (Trait := ℐ)))
                (borrow vec))
              |)))
            |))
            (fun (α0 : ref (ref str.t)) =>
              (ltac:
                (M.monadic_match_operator
                  (M.alloc (| α0 |))
                  [
                    fun γ =>
                      (let first := M.copy (| γ |) in
                      M.call (|((core.result.Result.t
                            i32.t
                            core.num.error.ParseIntError.t)::["map"]
                        (M.call (|(str.t::["parse"]
                          (M.read (| deref (M.read (| first |)) |)))
                        |))
                        (fun (α0 : i32.t) =>
                          (ltac:
                            (M.monadic_match_operator
                              (M.alloc (| α0 |))
                              [
                                fun γ =>
                                  (let n := M.copy (| γ |) in
                                  BinOp.Panic.mul (|
                                    (Integer.of_Z 2) : i32.t,
                                    M.read (| n |)
                                  |)) :
                                  i32.t
                              ])) :
                          i32.t))
                      |)) :
                      core.result.Result.t i32.t core.num.error.ParseIntError.t
                  ])) :
              core.result.Result.t i32.t core.num.error.ParseIntError.t))
          |)
        |) in
      M.alloc (|
        M.call (|((core.option.Option.t
              (core.result.Result.t
                i32.t
                core.num.error.ParseIntError.t))::["map_or"]
          (M.read (| opt |))
          (core.result.Result.Ok core.option.Option.None)
          (fun
              (α0 :
                core.result.Result.t i32.t core.num.error.ParseIntError.t) =>
            (ltac:
              (M.monadic_match_operator
                (M.alloc (| α0 |))
                [
                  fun γ =>
                    (let r := M.copy (| γ |) in
                    M.call (|((core.result.Result.t
                          i32.t
                          core.num.error.ParseIntError.t)::["map"]
                      (M.read (| r |))
                      core.option.Option.Some)
                    |)) :
                    core.result.Result.t
                      (core.option.Option.t i32.t)
                      core.num.error.ParseIntError.t
                ])) :
            core.result.Result.t
              (core.option.Option.t i32.t)
              core.num.error.ParseIntError.t))
        |)
      |)
    |)
  ) : core.result.Result.t
    (core.option.Option.t i32.t)
    core.num.error.ParseIntError.t)).

(*
fn main() {
    let numbers = vec!["42", "93", "18"];
    let empty = vec![];
    let strings = vec!["tofu", "93", "18"];

    println!("The first doubled is {:?}", double_first(numbers));
    println!("The first doubled is {:?}", double_first(empty));
    println!("The first doubled is {:?}", double_first(strings));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let numbers : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((slice (ref str.t))::["into_vec"]
            (pointer_coercion
              "Unsize"
              (M.read (|
                M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                  (M.alloc (|
                    [
                      M.read (| mk_str "42" |);
                      M.read (| mk_str "93" |);
                      M.read (| mk_str "18" |)
                    ]
                  |)))
                |)
              |))))
          |)
        |) in
      let empty : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|(alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t)::["new"]
          |)
        |) in
      let strings : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((slice (ref str.t))::["into_vec"]
            (pointer_coercion
              "Unsize"
              (M.read (|
                M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                  (M.alloc (|
                    [
                      M.read (| mk_str "tofu" |);
                      M.read (| mk_str "93" |);
                      M.read (| mk_str "18" |)
                    ]
                  |)))
                |)
              |))))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "The first doubled is " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|(pulling_results_out_of_options_with_stop_error_processing.double_first
                                (M.read (| numbers |)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "The first doubled is " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|(pulling_results_out_of_options_with_stop_error_processing.double_first
                                (M.read (| empty |)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "The first doubled is " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|(pulling_results_out_of_options_with_stop_error_processing.double_first
                                (M.read (| strings |)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
