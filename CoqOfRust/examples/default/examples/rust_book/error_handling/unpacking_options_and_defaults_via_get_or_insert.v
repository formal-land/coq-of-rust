(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Fruit.
  Inductive t : Set :=
  | Apple
  | Orange
  | Banana
  | Kiwi
  | Lemon.
End Fruit.

Module  Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_Fruit_t.
Section Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_Fruit_t.
  Definition Self : Set :=
    unpacking_options_and_defaults_via_get_or_insert.Fruit.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["write_str"]
        (M.read (| f |))
        (M.read (|
          ltac:
            (M.monadic_match_operator
              self
              [
                fun
                    (γ :
                      M.Val
                        (ref
                          unpacking_options_and_defaults_via_get_or_insert.Fruit.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  |
                      unpacking_options_and_defaults_via_get_or_insert.Fruit.Apple
                      =>
                    M.alloc (| M.read (| mk_str "Apple" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t);
                fun
                    (γ :
                      M.Val
                        (ref
                          unpacking_options_and_defaults_via_get_or_insert.Fruit.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  |
                      unpacking_options_and_defaults_via_get_or_insert.Fruit.Orange
                      =>
                    M.alloc (| M.read (| mk_str "Orange" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t);
                fun
                    (γ :
                      M.Val
                        (ref
                          unpacking_options_and_defaults_via_get_or_insert.Fruit.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  |
                      unpacking_options_and_defaults_via_get_or_insert.Fruit.Banana
                      =>
                    M.alloc (| M.read (| mk_str "Banana" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t);
                fun
                    (γ :
                      M.Val
                        (ref
                          unpacking_options_and_defaults_via_get_or_insert.Fruit.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  |
                      unpacking_options_and_defaults_via_get_or_insert.Fruit.Kiwi
                      =>
                    M.alloc (| M.read (| mk_str "Kiwi" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t);
                fun
                    (γ :
                      M.Val
                        (ref
                          unpacking_options_and_defaults_via_get_or_insert.Fruit.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  |
                      unpacking_options_and_defaults_via_get_or_insert.Fruit.Lemon
                      =>
                    M.alloc (| M.read (| mk_str "Lemon" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t)
              ])
        |)))
      |)
    )).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_Fruit_t.
End Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_Fruit_t.

(*
fn main() {
    let mut my_fruit: Option<Fruit> = None;
    let apple = Fruit::Apple;
    let first_available_fruit = my_fruit.get_or_insert(apple);
    println!("my_fruit is: {:?}", first_available_fruit);
    println!("first_available_fruit is: {:?}", first_available_fruit);
    // my_fruit is: Apple
    // first_available_fruit is: Apple
    //println!("Variable named `apple` is moved: {:?}", apple);
    // TODO: uncomment the line above to see the compiler error
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let my_fruit :
          M.Val
            (core.option.Option.t
              unpacking_options_and_defaults_via_get_or_insert.Fruit.t) :=
        M.alloc (| core.option.Option.None |) in
      let apple :
          M.Val unpacking_options_and_defaults_via_get_or_insert.Fruit.t :=
        M.alloc (| unpacking_options_and_defaults_via_get_or_insert.Fruit.Apple
        |) in
      let first_available_fruit :
          M.Val
            (mut_ref
              unpacking_options_and_defaults_via_get_or_insert.Fruit.t) :=
        M.alloc (|
          M.call (|((core.option.Option.t
                unpacking_options_and_defaults_via_get_or_insert.Fruit.t)::["get_or_insert"]
            (borrow_mut my_fruit)
            (M.read (| apple |)))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "my_fruit is: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow first_available_fruit))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "first_available_fruit is: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow first_available_fruit))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
