(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Fruit.
  Inductive t : Set :=
  | Apple
  | Orange
  | Banana
  | Kiwi
  | Lemon.
End Fruit.

Module  Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_with_Fruit_t.
Section Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_with_Fruit_t.
  Definition Self : Set :=
    unpacking_options_and_defaults_via_get_or_insert_with.Fruit.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["write_str"]
        (M.read (| f |))
        (M.read (|
          ltac:
            (M.monadic_match_operator
              self
              [
                fun
                    (γ :
                      M.Val
                        (ref
                          unpacking_options_and_defaults_via_get_or_insert_with.Fruit.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  |
                      unpacking_options_and_defaults_via_get_or_insert_with.Fruit.Apple
                      =>
                    M.alloc (| M.read (| mk_str "Apple" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t);
                fun
                    (γ :
                      M.Val
                        (ref
                          unpacking_options_and_defaults_via_get_or_insert_with.Fruit.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  |
                      unpacking_options_and_defaults_via_get_or_insert_with.Fruit.Orange
                      =>
                    M.alloc (| M.read (| mk_str "Orange" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t);
                fun
                    (γ :
                      M.Val
                        (ref
                          unpacking_options_and_defaults_via_get_or_insert_with.Fruit.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  |
                      unpacking_options_and_defaults_via_get_or_insert_with.Fruit.Banana
                      =>
                    M.alloc (| M.read (| mk_str "Banana" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t);
                fun
                    (γ :
                      M.Val
                        (ref
                          unpacking_options_and_defaults_via_get_or_insert_with.Fruit.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  |
                      unpacking_options_and_defaults_via_get_or_insert_with.Fruit.Kiwi
                      =>
                    M.alloc (| M.read (| mk_str "Kiwi" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t);
                fun
                    (γ :
                      M.Val
                        (ref
                          unpacking_options_and_defaults_via_get_or_insert_with.Fruit.t)) =>
                  (let γ := deref (M.read (| γ |)) in
                  match M.read (| γ |) with
                  |
                      unpacking_options_and_defaults_via_get_or_insert_with.Fruit.Lemon
                      =>
                    M.alloc (| M.read (| mk_str "Lemon" |) |)
                  | _ => M.break_match(||)
                  end) :
                  M.Val (ref str.t)
              ])
        |)))
      |)
    ) : ltac:(core.fmt.Result))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_with_Fruit_t.
End Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_with_Fruit_t.

(*
fn main() {
    let mut my_fruit: Option<Fruit> = None;
    let get_lemon_as_fallback = || {
        println!("Providing lemon as fallback");
        Fruit::Lemon
    };
    let first_available_fruit = my_fruit.get_or_insert_with(get_lemon_as_fallback);
    println!("my_fruit is: {:?}", first_available_fruit);
    println!("first_available_fruit is: {:?}", first_available_fruit);
    // Providing lemon as fallback
    // my_fruit is: Lemon
    // first_available_fruit is: Lemon

    // If the Option has a value, it is left unchanged, and the closure is not invoked
    let mut my_apple = Some(Fruit::Apple);
    let should_be_apple = my_apple.get_or_insert_with(get_lemon_as_fallback);
    println!("should_be_apple is: {:?}", should_be_apple);
    println!("my_apple is unchanged: {:?}", my_apple);
    // The output is a follows. Note that the closure `get_lemon_as_fallback` is not invoked
    // should_be_apple is: Apple
    // my_apple is unchanged: Some(Apple)
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let my_fruit :
          M.Val
            (core.option.Option.t
              unpacking_options_and_defaults_via_get_or_insert_with.Fruit.t) :=
        M.alloc (| core.option.Option.None |) in
      let get_lemon_as_fallback :
          M.Val
            (unit ->
              unpacking_options_and_defaults_via_get_or_insert_with.Fruit.t) :=
        M.alloc (|
          fun (α0 : unit) =>
            (ltac:
              (M.monadic_match_operator
                (M.alloc (| α0 |))
                [
                  fun γ =>
                    (M.read (|
                      let _ : M.Val unit :=
                        let _ : M.Val unit :=
                          M.alloc (|
                            M.call (|(std.io.stdio._print
                              (M.call (|(core.fmt.Arguments.t::["new_const"]
                                (pointer_coercion
                                  "Unsize"
                                  (borrow
                                    (M.alloc (|
                                      [
                                        M.read (|
                                          mk_str "Providing lemon as fallback
"
                                        |)
                                      ]
                                    |)))))
                              |)))
                            |)
                          |) in
                        M.alloc (| tt |) in
                      M.alloc (|
                        unpacking_options_and_defaults_via_get_or_insert_with.Fruit.Lemon
                      |)
                    |)) :
                    unpacking_options_and_defaults_via_get_or_insert_with.Fruit.t
                ])) :
            unpacking_options_and_defaults_via_get_or_insert_with.Fruit.t
        |) in
      let first_available_fruit :
          M.Val
            (mut_ref
              unpacking_options_and_defaults_via_get_or_insert_with.Fruit.t) :=
        M.alloc (|
          M.call (|((core.option.Option.t
                unpacking_options_and_defaults_via_get_or_insert_with.Fruit.t)::["get_or_insert_with"]
            (borrow_mut my_fruit)
            (M.read (| get_lemon_as_fallback |)))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "my_fruit is: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow first_available_fruit))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "first_available_fruit is: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow first_available_fruit))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let my_apple :
          M.Val
            (core.option.Option.t
              unpacking_options_and_defaults_via_get_or_insert_with.Fruit.t) :=
        M.alloc (|
          core.option.Option.Some
            unpacking_options_and_defaults_via_get_or_insert_with.Fruit.Apple
        |) in
      let should_be_apple :
          M.Val
            (mut_ref
              unpacking_options_and_defaults_via_get_or_insert_with.Fruit.t) :=
        M.alloc (|
          M.call (|((core.option.Option.t
                unpacking_options_and_defaults_via_get_or_insert_with.Fruit.t)::["get_or_insert_with"]
            (borrow_mut my_apple)
            (M.read (| get_lemon_as_fallback |)))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "should_be_apple is: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow should_be_apple))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "my_apple is unchanged: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow my_apple))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
