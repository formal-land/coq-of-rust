(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  PhoneNumber.
Section PhoneNumber.
  Record t : Set := {
    area_code : core.option.Option.t u8.t;
    number : u32.t;
  }.
  
  Definition Get_area_code :=
    Ref.map
      (fun α => Some α.(area_code))
      (fun β α => Some (α <| area_code := β |>)).
  Definition Get_number :=
    Ref.map (fun α => Some α.(number)) (fun β α => Some (α <| number := β |>)).
End PhoneNumber.
End PhoneNumber.

Module  Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.
Section Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.
  Definition Self : Set := unpacking_options_via_question_mark.PhoneNumber.t.
  
  (*
  Clone
  *)
  Definition clone
      (self : ref Self)
      : M unpacking_options_via_question_mark.PhoneNumber.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A :=
                core.clone.AssertParamIsClone.t (core.option.Option.t u8.t)))
            [
              fun
                  (γ :
                    M.Val
                      (core.clone.AssertParamIsClone.t
                        (core.option.Option.t u8.t))) =>
                (ltac:
                  (M.monadic_match_operator
                    (DeclaredButUndefinedVariable
                      (A := core.clone.AssertParamIsClone.t u32.t))
                    [
                      fun (γ : M.Val (core.clone.AssertParamIsClone.t u32.t)) =>
                        (deref (M.read (| self |))) :
                        M.Val unpacking_options_via_question_mark.PhoneNumber.t
                    ])) :
                M.Val unpacking_options_via_question_mark.PhoneNumber.t
            ])
      |)
    ) : unpacking_options_via_question_mark.PhoneNumber.t)).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_PhoneNumber_t.

Module  Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.
Section Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.
  Definition Self : Set := unpacking_options_via_question_mark.PhoneNumber.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_PhoneNumber_t.

Module  Job.
Section Job.
  Record t : Set := {
    phone_number :
      core.option.Option.t unpacking_options_via_question_mark.PhoneNumber.t;
  }.
  
  Definition Get_phone_number :=
    Ref.map
      (fun α => Some α.(phone_number))
      (fun β α => Some (α <| phone_number := β |>)).
End Job.
End Job.

Module  Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.
Section Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.
  Definition Self : Set := unpacking_options_via_question_mark.Job.t.
  
  (*
  Clone
  *)
  Definition clone
      (self : ref Self)
      : M unpacking_options_via_question_mark.Job.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A :=
                core.clone.AssertParamIsClone.t
                  (core.option.Option.t
                    unpacking_options_via_question_mark.PhoneNumber.t)))
            [
              fun
                  (γ :
                    M.Val
                      (core.clone.AssertParamIsClone.t
                        (core.option.Option.t
                          unpacking_options_via_question_mark.PhoneNumber.t))) =>
                (deref (M.read (| self |))) :
                M.Val unpacking_options_via_question_mark.Job.t
            ])
      |)
    ) : unpacking_options_via_question_mark.Job.t)).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.
End Impl_core_clone_Clone_for_unpacking_options_via_question_mark_Job_t.

Module  Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.
Section Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.
  Definition Self : Set := unpacking_options_via_question_mark.Job.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.
End Impl_core_marker_Copy_for_unpacking_options_via_question_mark_Job_t.

Module  Person.
Section Person.
  Record t : Set := {
    job : core.option.Option.t unpacking_options_via_question_mark.Job.t;
  }.
  
  Definition Get_job :=
    Ref.map (fun α => Some α.(job)) (fun β α => Some (α <| job := β |>)).
End Person.
End Person.

Module  Impl_unpacking_options_via_question_mark_Person_t.
Section Impl_unpacking_options_via_question_mark_Person_t.
  Definition Self : Set := unpacking_options_via_question_mark.Person.t.
  
  (*
      fn work_phone_area_code(&self) -> Option<u8> {
          // This would need many nested `match` statements without the `?` operator.
          // It would take a lot more code - try writing it yourself and see which
          // is easier.
          self.job?.phone_number?.area_code
      }
  *)
  Definition work_phone_area_code
      (self : ref Self)
      : M (core.option.Option.t u8.t) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let return_ := M.return_ (R := core.option.Option.t u8.t) in
      ltac:
        (M.monadic_catch_return
          (M.read (|
            unpacking_options_via_question_mark.PhoneNumber.Get_area_code
              (ltac:
                (M.monadic_match_operator
                  (M.alloc (|
                    M.call (|(ltac:(M.get_method (fun ℐ =>
                        core.ops.try_trait.Try.branch
                          (Self :=
                            core.option.Option.t
                              unpacking_options_via_question_mark.PhoneNumber.t)
                          (Trait := ℐ)))
                      (M.read (|
                        unpacking_options_via_question_mark.Job.Get_phone_number
                          (ltac:
                            (M.monadic_match_operator
                              (M.alloc (|
                                M.call (|(ltac:(M.get_method (fun ℐ =>
                                    core.ops.try_trait.Try.branch
                                      (Self :=
                                        core.option.Option.t
                                          unpacking_options_via_question_mark.Job.t)
                                      (Trait := ℐ)))
                                  (M.read (|
                                    unpacking_options_via_question_mark.Person.Get_job
                                      (deref (M.read (| self |)))
                                  |)))
                                |)
                              |))
                              [
                                fun
                                    (γ :
                                      M.Val
                                        (core.ops.control_flow.ControlFlow.t
                                          (core.option.Option.t
                                            core.convert.Infallible.t)
                                          unpacking_options_via_question_mark.Job.t)) =>
                                  match M.read (| γ |) with
                                  | core.ops.control_flow.ControlFlow.Break _ =>
                                    let γ0_0 :=
                                      core.ops.control_flow.ControlFlow.Get_Break_0
                                        γ in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      (never_to_any
                                        (B :=
                                          unpacking_options_via_question_mark.Job.t)) (|
                                        M.read (|
                                          return_
                                            (|
                                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                                  core.ops.try_trait.FromResidual.from_residual
                                                    (Self :=
                                                      core.option.Option.t u8.t)
                                                    (R :=
                                                      core.option.Option.t
                                                        core.convert.Infallible.t)
                                                    (Trait := ℐ)))
                                                (M.read (| residual |)))
                                              |)
                                            |)
                                        |)
                                      |)
                                    |)
                                  | _ => M.break_match(||)
                                  end :
                                  M.Val
                                    unpacking_options_via_question_mark.Job.t;
                                fun
                                    (γ :
                                      M.Val
                                        (core.ops.control_flow.ControlFlow.t
                                          (core.option.Option.t
                                            core.convert.Infallible.t)
                                          unpacking_options_via_question_mark.Job.t)) =>
                                  match M.read (| γ |) with
                                  |
                                      core.ops.control_flow.ControlFlow.Continue
                                        _
                                      =>
                                    let γ0_0 :=
                                      core.ops.control_flow.ControlFlow.Get_Continue_0
                                        γ in
                                    let val := M.copy (| γ0_0 |) in
                                    val
                                  | _ => M.break_match(||)
                                  end :
                                  M.Val
                                    unpacking_options_via_question_mark.Job.t
                              ]))
                      |)))
                    |)
                  |))
                  [
                    fun
                        (γ :
                          M.Val
                            (core.ops.control_flow.ControlFlow.t
                              (core.option.Option.t core.convert.Infallible.t)
                              unpacking_options_via_question_mark.PhoneNumber.t)) =>
                      match M.read (| γ |) with
                      | core.ops.control_flow.ControlFlow.Break _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          (never_to_any
                            (B :=
                              unpacking_options_via_question_mark.PhoneNumber.t)) (|
                            M.read (|
                              return_
                                (|
                                  M.call (|(ltac:(M.get_method (fun ℐ =>
                                      core.ops.try_trait.FromResidual.from_residual
                                        (Self := core.option.Option.t u8.t)
                                        (R :=
                                          core.option.Option.t
                                            core.convert.Infallible.t)
                                        (Trait := ℐ)))
                                    (M.read (| residual |)))
                                  |)
                                |)
                            |)
                          |)
                        |)
                      | _ => M.break_match(||)
                      end :
                      M.Val unpacking_options_via_question_mark.PhoneNumber.t;
                    fun
                        (γ :
                          M.Val
                            (core.ops.control_flow.ControlFlow.t
                              (core.option.Option.t core.convert.Infallible.t)
                              unpacking_options_via_question_mark.PhoneNumber.t)) =>
                      match M.read (| γ |) with
                      | core.ops.control_flow.ControlFlow.Continue _ =>
                        let γ0_0 :=
                          core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                        let val := M.copy (| γ0_0 |) in
                        val
                      | _ => M.break_match(||)
                      end :
                      M.Val unpacking_options_via_question_mark.PhoneNumber.t
                  ]))
          |)))
    ) : core.option.Option.t u8.t)).
  
  Global Instance AssociatedFunction_work_phone_area_code :
    Notations.DoubleColon Self "work_phone_area_code" := {
    Notations.double_colon := work_phone_area_code;
  }.
End Impl_unpacking_options_via_question_mark_Person_t.
End Impl_unpacking_options_via_question_mark_Person_t.

(*
fn main() {
    let p = Person {
        job: Some(Job {
            phone_number: Some(PhoneNumber {
                area_code: Some(61),
                number: 439222222,
            }),
        }),
    };

    assert_eq!(p.work_phone_area_code(), Some(61));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let p : M.Val unpacking_options_via_question_mark.Person.t :=
        M.alloc (|
          {|
            unpacking_options_via_question_mark.Person.job :=
              core.option.Option.Some
                ({|
                  unpacking_options_via_question_mark.Job.phone_number :=
                    core.option.Option.Some
                      ({|
                        unpacking_options_via_question_mark.PhoneNumber.area_code :=
                          core.option.Option.Some ((Integer.of_Z 61) : u8.t);
                        unpacking_options_via_question_mark.PhoneNumber.number :=
                          (Integer.of_Z 439222222) : u32.t;
                      |} : unpacking_options_via_question_mark.PhoneNumber.t);
                |} : unpacking_options_via_question_mark.Job.t);
          |} : unpacking_options_via_question_mark.Person.t
        |) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            (M.alloc (|
              (borrow
                  (M.alloc (|
                    M.call (|(unpacking_options_via_question_mark.Person.t::["work_phone_area_code"]
                      (borrow p))
                    |)
                  |)),
                borrow
                  (M.alloc (| core.option.Option.Some ((Integer.of_Z 61) : u8.t)
                  |)))
            |))
            [
              fun
                  (γ :
                    M.Val
                      ((ref (core.option.Option.t u8.t))
                      *
                      (ref (core.option.Option.t u8.t)))) =>
                match M.read (| γ |) with
                | (_, _) =>
                  let γ0_0 := Tuple.Access.left γ in
                  let γ0_1 := Tuple.Access.right γ in
                  let left_val := M.copy (| γ0_0 |) in
                  let right_val := M.copy (| γ0_1 |) in
                  if
                    M.read (|
                      use
                        (M.alloc (|
                          UnOp.not
                            (M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.cmp.PartialEq.eq
                                  (Self := core.option.Option.t u8.t)
                                  (Rhs := core.option.Option.t u8.t)
                                  (Trait := ℐ)))
                              (M.read (| left_val |))
                              (M.read (| right_val |)))
                            |))
                        |))
                    |)
                  then
                    M.alloc (|
                      (never_to_any (B := unit)) (|
                        M.read (|
                          let kind : M.Val core.panicking.AssertKind.t :=
                            M.alloc (| core.panicking.AssertKind.Eq |) in
                          M.alloc (|
                            M.call (|(core.panicking.assert_failed
                              (M.read (| kind |))
                              (M.read (| left_val |))
                              (M.read (| right_val |))
                              core.option.Option.None)
                            |)
                          |)
                        |)
                      |)
                    |)
                  else
                    M.alloc (| tt |)
                end :
                M.Val unit
            ]) in
      M.alloc (| tt |)
    |)
  ) : unit)).
