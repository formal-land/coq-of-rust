(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Enum DoubleError *)
(* {
  ty_params := [];
  variants :=
    [
      {
        name := "EmptyVec";
        item := StructTuple [];
        discriminant := None;
      };
      {
        name := "Parse";
        item := StructTuple [ Ty.path "core::num::error::ParseIntError" ];
        discriminant := None;
      }
    ];
} *)

Module Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t := Ty.path "wrapping_errors::DoubleError".
  
  (*
  Debug
  *)
  Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 :=
        M.match_operator
          self
          [
            fun γ =>
              let* γ := M.read γ in
              let* α0 :=
                M.get_associated_function (Ty.path "core::fmt::Formatter") "write_str" [] [] in
              let* α1 := M.read f in
              let* α2 := M.read (mk_str "EmptyVec") in
              let* α3 := M.call_closure α0 [ α1; α2 ] in
              M.alloc α3;
            fun γ =>
              let* γ := M.read γ in
              let* γ1_0 :=
                M.get_struct_tuple_field_or_break_match γ "wrapping_errors::DoubleError::Parse" 0 in
              let* __self_0 := M.alloc γ1_0 in
              let* α0 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Formatter")
                  "debug_tuple_field1_finish"
                  []
                  [] in
              let* α1 := M.read f in
              let* α2 := M.read (mk_str "Parse") in
              let* α3 := (* Unsize *) M.pure (M.pointer_coercion __self_0) in
              let* α4 := M.call_closure α0 [ α1; α2; α3 ] in
              M.alloc α4
          ] in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_wrapping_errors_DoubleError.

Axiom Result :
  forall (T : Ty.t),
  (Ty.apply (Ty.path "wrapping_errors::Result") [ T ] []) =
    (Ty.apply (Ty.path "core::result::Result") [ T; Ty.path "wrapping_errors::DoubleError" ] []).

Module Impl_core_fmt_Display_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t := Ty.path "wrapping_errors::DoubleError".
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          match *self {
              DoubleError::EmptyVec => write!(f, "please use a vector with at least one element"),
              // The wrapped error contains additional information and is available
              // via the source() method.
              DoubleError::Parse(..) => write!(f, "the provided string could not be parsed as int"),
          }
      }
  *)
  Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; f ] =>
      let* self := M.alloc self in
      let* f := M.alloc f in
      let* α0 := M.read self in
      let* α1 :=
        M.match_operator
          α0
          [
            fun γ =>
              let* α0 :=
                M.get_associated_function (Ty.path "core::fmt::Formatter") "write_fmt" [] [] in
              let* α1 := M.read f in
              let* α2 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Arguments")
                  "new_const"
                  []
                  [ Value.Bool true ] in
              let* α5 :=
                (* Unsize *)
                  let* α3 := M.read (mk_str "please use a vector with at least one element") in
                  let* α4 := M.alloc (Value.Array [ α3 ]) in
                  M.pure (M.pointer_coercion α4) in
              let* α6 := M.call_closure α2 [ α5 ] in
              let* α7 := M.call_closure α0 [ α1; α6 ] in
              M.alloc α7;
            fun γ =>
              let* α0 :=
                M.get_associated_function (Ty.path "core::fmt::Formatter") "write_fmt" [] [] in
              let* α1 := M.read f in
              let* α2 :=
                M.get_associated_function
                  (Ty.path "core::fmt::Arguments")
                  "new_const"
                  []
                  [ Value.Bool true ] in
              let* α5 :=
                (* Unsize *)
                  let* α3 := M.read (mk_str "the provided string could not be parsed as int") in
                  let* α4 := M.alloc (Value.Array [ α3 ]) in
                  M.pure (M.pointer_coercion α4) in
              let* α6 := M.call_closure α2 [ α5 ] in
              let* α7 := M.call_closure α0 [ α1; α6 ] in
              M.alloc α7
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Display"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Display_for_wrapping_errors_DoubleError.

Module Impl_core_error_Error_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t := Ty.path "wrapping_errors::DoubleError".
  
  (*
      fn source(&self) -> Option<&(dyn error::Error + 'static)> {
          match *self {
              DoubleError::EmptyVec => None,
              // The cause is the underlying implementation error type. Is implicitly
              // cast to the trait object `&error::Error`. This works because the
              // underlying type already implements the `Error` trait.
              DoubleError::Parse(ref e) => Some(e),
          }
      }
  *)
  Definition source (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      let* α1 :=
        M.match_operator
          α0
          [
            fun γ => M.alloc (Value.StructTuple "core::option::Option::None" []);
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match γ "wrapping_errors::DoubleError::Parse" 0 in
              let* e := M.alloc γ0_0 in
              let* α1 :=
                (* Unsize *)
                  let* α0 := M.read e in
                  M.pure (M.pointer_coercion α0) in
              M.alloc (Value.StructTuple "core::option::Option::Some" [ α1 ])
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::error::Error"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("source", InstanceField.Method source) ].
End Impl_core_error_Error_for_wrapping_errors_DoubleError.

Module Impl_core_convert_From_core_num_error_ParseIntError_for_wrapping_errors_DoubleError.
  Definition Self : Ty.t := Ty.path "wrapping_errors::DoubleError".
  
  (*
      fn from(err: ParseIntError) -> DoubleError {
          DoubleError::Parse(err)
      }
  *)
  Definition from (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ err ] =>
      let* err := M.alloc err in
      let* α0 := M.read err in
      M.pure (Value.StructTuple "wrapping_errors::DoubleError::Parse" [ α0 ])
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::convert::From"
      Self
      (* Trait polymorphic types *) [ (* T *) Ty.path "core::num::error::ParseIntError" ]
      (* Instance *) [ ("from", InstanceField.Method from) ].
End Impl_core_convert_From_core_num_error_ParseIntError_for_wrapping_errors_DoubleError.

(*
fn double_first(vec: Vec<&str>) -> Result<i32> {
    let first = vec.first().ok_or(DoubleError::EmptyVec)?;
    // Here we implicitly use the `ParseIntError` implementation of `From` (which
    // we defined above) in order to create a `DoubleError`.
    let parsed = first.parse::<i32>()?;

    Ok(2 * parsed)
}
*)
Definition double_first (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ vec ] =>
    let* vec := M.alloc vec in
    let* first :=
      let* α0 :=
        M.get_trait_method
          "core::ops::try_trait::Try"
          (Ty.apply
            (Ty.path "core::result::Result")
            [
              Ty.apply (Ty.path "&") [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ] [];
              Ty.path "wrapping_errors::DoubleError"
            ]
            [])
          []
          []
          "branch"
          []
          [] in
      let* α1 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "core::option::Option")
            [ Ty.apply (Ty.path "&") [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ] [] ]
            [])
          "ok_or"
          [ Ty.path "wrapping_errors::DoubleError" ]
          [] in
      let* α2 :=
        M.get_associated_function
          (Ty.apply (Ty.path "slice") [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ] [])
          "first"
          []
          [ Value.Bool true ] in
      let* α3 :=
        M.get_trait_method
          "core::ops::deref::Deref"
          (Ty.apply
            (Ty.path "alloc::vec::Vec")
            [ Ty.apply (Ty.path "&") [ Ty.path "str" ] []; Ty.path "alloc::alloc::Global" ]
            [])
          []
          []
          "deref"
          []
          [] in
      let* α4 := M.call_closure α3 [ vec ] in
      let* α5 := M.call_closure α2 [ α4 ] in
      let* α6 :=
        M.call_closure α1 [ α5; Value.StructTuple "wrapping_errors::DoubleError::EmptyVec" [] ] in
      let* α7 := M.call_closure α0 [ α6 ] in
      let* α8 := M.alloc α7 in
      let* α9 :=
        M.match_operator
          α8
          [
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Break"
                  0 in
              let* residual := M.copy γ0_0 in
              let* α0 :=
                M.get_trait_method
                  "core::ops::try_trait::FromResidual"
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    [ Ty.path "i32"; Ty.path "wrapping_errors::DoubleError" ]
                    [])
                  [
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [ Ty.path "core::convert::Infallible"; Ty.path "wrapping_errors::DoubleError"
                      ]
                      []
                  ]
                  []
                  "from_residual"
                  []
                  [] in
              let* α1 := M.read residual in
              let* α2 := M.call_closure α0 [ α1 ] in
              let* α3 := M.return_ α2 in
              let* α4 := M.read α3 in
              let* α5 := M.never_to_any α4 in
              M.alloc α5;
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Continue"
                  0 in
              let* val := M.copy γ0_0 in
              M.pure val
          ] in
      M.copy α9 in
    let* parsed :=
      let* α0 :=
        M.get_trait_method
          "core::ops::try_trait::Try"
          (Ty.apply
            (Ty.path "core::result::Result")
            [ Ty.path "i32"; Ty.path "core::num::error::ParseIntError" ]
            [])
          []
          []
          "branch"
          []
          [] in
      let* α1 := M.get_associated_function (Ty.path "str") "parse" [ Ty.path "i32" ] [] in
      let* α2 := M.read first in
      let* α3 := M.read α2 in
      let* α4 := M.call_closure α1 [ α3 ] in
      let* α5 := M.call_closure α0 [ α4 ] in
      let* α6 := M.alloc α5 in
      let* α7 :=
        M.match_operator
          α6
          [
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Break"
                  0 in
              let* residual := M.copy γ0_0 in
              let* α0 :=
                M.get_trait_method
                  "core::ops::try_trait::FromResidual"
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    [ Ty.path "i32"; Ty.path "wrapping_errors::DoubleError" ]
                    [])
                  [
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [
                        Ty.path "core::convert::Infallible";
                        Ty.path "core::num::error::ParseIntError"
                      ]
                      []
                  ]
                  []
                  "from_residual"
                  []
                  [] in
              let* α1 := M.read residual in
              let* α2 := M.call_closure α0 [ α1 ] in
              let* α3 := M.return_ α2 in
              let* α4 := M.read α3 in
              let* α5 := M.never_to_any α4 in
              M.alloc α5;
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match
                  γ
                  "core::ops::control_flow::ControlFlow::Continue"
                  0 in
              let* val := M.copy γ0_0 in
              M.pure val
          ] in
      M.copy α7 in
    let* α0 := M.read parsed in
    let* α1 := BinOp.Panic.mul (Value.Integer Integer.I32 2) α0 in
    let* α0 := M.alloc (Value.StructTuple "core::result::Result::Ok" [ α1 ]) in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn print(result: Result<i32>) {
    match result {
        Ok(n) => println!("The first doubled is {}", n),
        Err(e) => {
            println!("Error: {}", e);
            if let Some(source) = e.source() {
                println!("  Caused by: {}", source);
            }
        }
    }
}
*)
Definition print (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ result ] =>
    let* result := M.alloc result in
    let* α0 :=
      M.match_operator
        result
        [
          fun γ =>
            let* γ0_0 := M.get_struct_tuple_field_or_break_match γ "core::result::Result::Ok" 0 in
            let* n := M.copy γ0_0 in
            let* _ :=
              let* α0 := M.get_function "std::io::stdio::_print" [] [] in
              let* α1 :=
                M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
              let* α5 :=
                (* Unsize *)
                  let* α2 := M.read (mk_str "The first doubled is ") in
                  let* α3 := M.read (mk_str "
") in
                  let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                  M.pure (M.pointer_coercion α4) in
              let* α9 :=
                (* Unsize *)
                  let* α6 :=
                    M.get_associated_function
                      (Ty.path "core::fmt::rt::Argument")
                      "new_display"
                      [ Ty.path "i32" ]
                      [] in
                  let* α7 := M.call_closure α6 [ n ] in
                  let* α8 := M.alloc (Value.Array [ α7 ]) in
                  M.pure (M.pointer_coercion α8) in
              let* α10 := M.call_closure α1 [ α5; α9 ] in
              let* α11 := M.call_closure α0 [ α10 ] in
              M.alloc α11 in
            M.alloc (Value.Tuple []);
          fun γ =>
            let* γ0_0 := M.get_struct_tuple_field_or_break_match γ "core::result::Result::Err" 0 in
            let* e := M.copy γ0_0 in
            let* _ :=
              let* _ :=
                let* α0 := M.get_function "std::io::stdio::_print" [] [] in
                let* α1 :=
                  M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
                let* α5 :=
                  (* Unsize *)
                    let* α2 := M.read (mk_str "Error: ") in
                    let* α3 := M.read (mk_str "
") in
                    let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                    M.pure (M.pointer_coercion α4) in
                let* α9 :=
                  (* Unsize *)
                    let* α6 :=
                      M.get_associated_function
                        (Ty.path "core::fmt::rt::Argument")
                        "new_display"
                        [ Ty.path "wrapping_errors::DoubleError" ]
                        [] in
                    let* α7 := M.call_closure α6 [ e ] in
                    let* α8 := M.alloc (Value.Array [ α7 ]) in
                    M.pure (M.pointer_coercion α8) in
                let* α10 := M.call_closure α1 [ α5; α9 ] in
                let* α11 := M.call_closure α0 [ α10 ] in
                M.alloc α11 in
              M.alloc (Value.Tuple []) in
            let* α0 := M.alloc (Value.Tuple []) in
            M.match_operator
              α0
              [
                fun γ =>
                  let* γ :=
                    let* α0 :=
                      M.get_trait_method
                        "core::error::Error"
                        (Ty.path "wrapping_errors::DoubleError")
                        []
                        []
                        "source"
                        []
                        [] in
                    let* α1 := M.call_closure α0 [ e ] in
                    M.alloc α1 in
                  let* γ0_0 :=
                    M.get_struct_tuple_field_or_break_match γ "core::option::Option::Some" 0 in
                  let* source := M.copy γ0_0 in
                  let* _ :=
                    let* _ :=
                      let* α0 := M.get_function "std::io::stdio::_print" [] [] in
                      let* α1 :=
                        M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
                      let* α5 :=
                        (* Unsize *)
                          let* α2 := M.read (mk_str "  Caused by: ") in
                          let* α3 := M.read (mk_str "
") in
                          let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                          M.pure (M.pointer_coercion α4) in
                      let* α9 :=
                        (* Unsize *)
                          let* α6 :=
                            M.get_associated_function
                              (Ty.path "core::fmt::rt::Argument")
                              "new_display"
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  [ Ty.dyn [ ("core::error::Error::Trait", []) ] ]
                                  []
                              ]
                              [] in
                          let* α7 := M.call_closure α6 [ source ] in
                          let* α8 := M.alloc (Value.Array [ α7 ]) in
                          M.pure (M.pointer_coercion α8) in
                      let* α10 := M.call_closure α1 [ α5; α9 ] in
                      let* α11 := M.call_closure α0 [ α10 ] in
                      M.alloc α11 in
                    M.alloc (Value.Tuple []) in
                  M.alloc (Value.Tuple []);
                fun γ => M.alloc (Value.Tuple [])
              ]
        ] in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let numbers = vec!["42", "93", "18"];
    let empty = vec![];
    let strings = vec!["tofu", "93", "18"];

    print(double_first(numbers));
    print(double_first(empty));
    print(double_first(strings));
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* numbers :=
      let* α0 :=
        M.get_associated_function
          (Ty.apply (Ty.path "slice") [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ] [])
          "into_vec"
          [ Ty.path "alloc::alloc::Global" ]
          [] in
      let* α8 :=
        (* Unsize *)
          let* α1 :=
            M.get_associated_function
              (Ty.apply
                (Ty.path "alloc::boxed::Box")
                [
                  Ty.apply
                    (Ty.path "array")
                    [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ]
                    [ Value.Integer Integer.Usize 3 ];
                  Ty.path "alloc::alloc::Global"
                ]
                [])
              "new"
              []
              [] in
          let* α2 := M.read (mk_str "42") in
          let* α3 := M.read (mk_str "93") in
          let* α4 := M.read (mk_str "18") in
          let* α5 := M.alloc (Value.Array [ α2; α3; α4 ]) in
          let* α6 := M.call_closure α1 [ α5 ] in
          let* α7 := M.read α6 in
          M.pure (M.pointer_coercion α7) in
      let* α9 := M.call_closure α0 [ α8 ] in
      M.alloc α9 in
    let* empty :=
      let* α0 :=
        M.get_associated_function
          (Ty.apply
            (Ty.path "alloc::vec::Vec")
            [ Ty.apply (Ty.path "&") [ Ty.path "str" ] []; Ty.path "alloc::alloc::Global" ]
            [])
          "new"
          []
          [] in
      let* α1 := M.call_closure α0 [] in
      M.alloc α1 in
    let* strings :=
      let* α0 :=
        M.get_associated_function
          (Ty.apply (Ty.path "slice") [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ] [])
          "into_vec"
          [ Ty.path "alloc::alloc::Global" ]
          [] in
      let* α8 :=
        (* Unsize *)
          let* α1 :=
            M.get_associated_function
              (Ty.apply
                (Ty.path "alloc::boxed::Box")
                [
                  Ty.apply
                    (Ty.path "array")
                    [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ]
                    [ Value.Integer Integer.Usize 3 ];
                  Ty.path "alloc::alloc::Global"
                ]
                [])
              "new"
              []
              [] in
          let* α2 := M.read (mk_str "tofu") in
          let* α3 := M.read (mk_str "93") in
          let* α4 := M.read (mk_str "18") in
          let* α5 := M.alloc (Value.Array [ α2; α3; α4 ]) in
          let* α6 := M.call_closure α1 [ α5 ] in
          let* α7 := M.read α6 in
          M.pure (M.pointer_coercion α7) in
      let* α9 := M.call_closure α0 [ α8 ] in
      M.alloc α9 in
    let* _ :=
      let* α0 := M.get_function "wrapping_errors::print" [] [] in
      let* α1 := M.get_function "wrapping_errors::double_first" [] [] in
      let* α2 := M.read numbers in
      let* α3 := M.call_closure α1 [ α2 ] in
      let* α4 := M.call_closure α0 [ α3 ] in
      M.alloc α4 in
    let* _ :=
      let* α0 := M.get_function "wrapping_errors::print" [] [] in
      let* α1 := M.get_function "wrapping_errors::double_first" [] [] in
      let* α2 := M.read empty in
      let* α3 := M.call_closure α1 [ α2 ] in
      let* α4 := M.call_closure α0 [ α3 ] in
      M.alloc α4 in
    let* _ :=
      let* α0 := M.get_function "wrapping_errors::print" [] [] in
      let* α1 := M.get_function "wrapping_errors::double_first" [] [] in
      let* α2 := M.read strings in
      let* α3 := M.call_closure α1 [ α2 ] in
      let* α4 := M.call_closure α0 [ α3 ] in
      M.alloc α4 in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
