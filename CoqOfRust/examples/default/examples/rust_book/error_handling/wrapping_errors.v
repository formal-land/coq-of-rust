(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module DoubleError.
  Inductive t : Set :=
  | EmptyVec
  | Parse (_ : core.num.error.ParseIntError.t).
  
  Definition Get_Parse_0 :=
    Ref.map
      (fun α => match α with | Parse α0 => Some α0 | _ => None end)
      (fun β α => match α with | Parse _ => Some (Parse β) | _ => None end).
End DoubleError.

Module  Impl_core_fmt_Debug_for_wrapping_errors_DoubleError_t.
Section Impl_core_fmt_Debug_for_wrapping_errors_DoubleError_t.
  Definition Self : Set := wrapping_errors.DoubleError.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            self
            [
              fun (γ : M.Val (ref wrapping_errors.DoubleError.t)) =>
                (let γ := deref (M.read (| γ |)) in
                match M.read (| γ |) with
                | wrapping_errors.DoubleError.EmptyVec =>
                  M.alloc (|
                    M.call (|(core.fmt.Formatter.t::["write_str"]
                      (M.read (| f |))
                      (M.read (| mk_str "EmptyVec" |)))
                    |)
                  |)
                | _ => M.break_match(||)
                end) :
                M.Val (core.result.Result.t unit core.fmt.Error.t);
              fun (γ : M.Val (ref wrapping_errors.DoubleError.t)) =>
                (let γ := deref (M.read (| γ |)) in
                match M.read (| γ |) with
                | wrapping_errors.DoubleError.Parse _ =>
                  let γ1_0 := wrapping_errors.DoubleError.Get_Parse_0 γ in
                  let __self_0 := M.alloc (| borrow γ1_0 |) in
                  M.alloc (|
                    M.call (|(core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      (M.read (| f |))
                      (M.read (| mk_str "Parse" |))
                      (pointer_coercion "Unsize" (borrow __self_0)))
                    |)
                  |)
                | _ => M.break_match(||)
                end) :
                M.Val (core.result.Result.t unit core.fmt.Error.t)
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_wrapping_errors_DoubleError_t.
End Impl_core_fmt_Debug_for_wrapping_errors_DoubleError_t.

Ltac Result T := exact (core.result.Result.t T wrapping_errors.DoubleError.t).

Module  Impl_core_fmt_Display_for_wrapping_errors_DoubleError_t.
Section Impl_core_fmt_Display_for_wrapping_errors_DoubleError_t.
  Definition Self : Set := wrapping_errors.DoubleError.t.
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          match *self {
              DoubleError::EmptyVec => write!(f, "please use a vector with at least one element"),
              // The wrapped error contains additional information and is available
              // via the source() method.
              DoubleError::Parse(..) => write!(f, "the provided string could not be parsed as int"),
          }
      }
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (deref (M.read (| self |)))
            [
              fun (γ : M.Val wrapping_errors.DoubleError.t) =>
                match M.read (| γ |) with
                | wrapping_errors.DoubleError.EmptyVec =>
                  M.alloc (|
                    M.call (|(core.fmt.Formatter.t::["write_fmt"]
                      (M.read (| f |))
                      (M.call (|(core.fmt.Arguments.t::["new_const"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (|
                                  mk_str
                                    "please use a vector with at least one element"
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |)
                | _ => M.break_match(||)
                end :
                M.Val (core.result.Result.t unit core.fmt.Error.t);
              fun (γ : M.Val wrapping_errors.DoubleError.t) =>
                match M.read (| γ |) with
                | wrapping_errors.DoubleError.Parse =>
                  M.alloc (|
                    M.call (|(core.fmt.Formatter.t::["write_fmt"]
                      (M.read (| f |))
                      (M.call (|(core.fmt.Arguments.t::["new_const"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (|
                                  mk_str
                                    "the provided string could not be parsed as int"
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |)
                | _ => M.break_match(||)
                end :
                M.Val (core.result.Result.t unit core.fmt.Error.t)
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt := fmt;
  }.
End Impl_core_fmt_Display_for_wrapping_errors_DoubleError_t.
End Impl_core_fmt_Display_for_wrapping_errors_DoubleError_t.

Module  Impl_core_error_Error_for_wrapping_errors_DoubleError_t.
Section Impl_core_error_Error_for_wrapping_errors_DoubleError_t.
  Definition Self : Set := wrapping_errors.DoubleError.t.
  
  (*
      fn source(&self) -> Option<&(dyn error::Error + 'static)> {
          match *self {
              DoubleError::EmptyVec => None,
              // The cause is the underlying implementation error type. Is implicitly
              // cast to the trait object `&error::Error`. This works because the
              // underlying type already implements the `Error` trait.
              DoubleError::Parse(ref e) => Some(e),
          }
      }
  *)
  Definition source
      (self : ref Self)
      : M (core.option.Option.t (ref (dyn [core.error.Error.Trait]))) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (deref (M.read (| self |)))
            [
              fun (γ : M.Val wrapping_errors.DoubleError.t) =>
                match M.read (| γ |) with
                | wrapping_errors.DoubleError.EmptyVec =>
                  M.alloc (| core.option.Option.None |)
                | _ => M.break_match(||)
                end :
                M.Val
                  (core.option.Option.t (ref (dyn [core.error.Error.Trait])));
              fun (γ : M.Val wrapping_errors.DoubleError.t) =>
                match M.read (| γ |) with
                | wrapping_errors.DoubleError.Parse _ =>
                  let γ0_0 := wrapping_errors.DoubleError.Get_Parse_0 γ in
                  let e := M.alloc (| borrow γ0_0 |) in
                  M.alloc (|
                    core.option.Option.Some
                      (pointer_coercion "Unsize" (M.read (| e |)))
                  |)
                | _ => M.break_match(||)
                end :
                M.Val
                  (core.option.Option.t (ref (dyn [core.error.Error.Trait])))
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_source :
    Notations.DoubleColon Self "source" := {
    Notations.double_colon := source;
  }.
  
  Global Instance ℐ : core.error.Error.Required.Trait Self := {
    core.error.Error.source := Datatypes.Some source;
    core.error.Error.type_id := Datatypes.None;
    core.error.Error.description := Datatypes.None;
    core.error.Error.cause := Datatypes.None;
    core.error.Error.provide := Datatypes.None;
  }.
End Impl_core_error_Error_for_wrapping_errors_DoubleError_t.
End Impl_core_error_Error_for_wrapping_errors_DoubleError_t.

Module  Impl_core_convert_From_core_num_error_ParseIntError_t_for_wrapping_errors_DoubleError_t.
Section Impl_core_convert_From_core_num_error_ParseIntError_t_for_wrapping_errors_DoubleError_t.
  Definition Self : Set := wrapping_errors.DoubleError.t.
  
  (*
      fn from(err: ParseIntError) -> DoubleError {
          DoubleError::Parse(err)
      }
  *)
  Definition from
      (err : core.num.error.ParseIntError.t)
      : M wrapping_errors.DoubleError.t :=
    ltac:(M.monadic (
      let err := M.alloc (| err |) in
      wrapping_errors.DoubleError.Parse (M.read (| err |))
    )).
  
  Global Instance AssociatedFunction_from :
    Notations.DoubleColon Self "from" := {
    Notations.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait Self (T := core.num.error.ParseIntError.t) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_core_num_error_ParseIntError_t_for_wrapping_errors_DoubleError_t.
End Impl_core_convert_From_core_num_error_ParseIntError_t_for_wrapping_errors_DoubleError_t.

(*
fn double_first(vec: Vec<&str>) -> Result<i32> {
    let first = vec.first().ok_or(DoubleError::EmptyVec)?;
    // Here we implicitly use the `ParseIntError` implementation of `From` (which
    // we defined above) in order to create a `DoubleError`.
    let parsed = first.parse::<i32>()?;

    Ok(2 * parsed)
}
*)
Definition double_first
    (vec : alloc.vec.Vec.t (ref str.t) alloc.vec.Vec.Default.A)
    : M ltac:(wrapping_errors.Result i32.t) :=
  ltac:(M.monadic (
    let vec := M.alloc (| vec |) in
    let return_ := M.return_ (R := ltac:(wrapping_errors.Result i32.t)) in
    M.catch_return
      (M.read (|
        let first : M.Val (ref (ref str.t)) :=
          M.copy (|
            ltac:
              (M.monadic_match_operator
                (M.alloc (|
                  M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            (ref (ref str.t))
                            wrapping_errors.DoubleError.t)
                        (Trait := ℐ)))
                    (M.call (|((core.option.Option.t
                          (ref (ref str.t)))::["ok_or"]
                      (M.call (|((slice (ref str.t))::["first"]
                        (M.call (|(ltac:(M.get_method (fun ℐ =>
                            core.ops.deref.Deref.deref
                              (Self :=
                                alloc.vec.Vec.t
                                  (ref str.t)
                                  alloc.alloc.Global.t)
                              (Trait := ℐ)))
                          (borrow vec))
                        |)))
                      |))
                      wrapping_errors.DoubleError.EmptyVec)
                    |)))
                  |)
                |))
                [
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              wrapping_errors.DoubleError.t)
                            (ref (ref str.t)))) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Break _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                      let residual := M.copy (| γ0_0 |) in
                      M.alloc (|
                        never_to_any (|
                          M.read (|
                            return_
                              (M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.try_trait.FromResidual.from_residual
                                    (Self :=
                                      core.result.Result.t
                                        i32.t
                                        wrapping_errors.DoubleError.t)
                                    (R :=
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        wrapping_errors.DoubleError.t)
                                    (Trait := ℐ)))
                                (M.read (| residual |)))
                              |))
                          |)
                        |)
                      |)
                    | _ => M.break_match(||)
                    end :
                    M.Val (ref (ref str.t));
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              wrapping_errors.DoubleError.t)
                            (ref (ref str.t)))) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Continue _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                      let val := M.copy (| γ0_0 |) in
                      val
                    | _ => M.break_match(||)
                    end :
                    M.Val (ref (ref str.t))
                ])
          |) in
        let parsed : M.Val i32.t :=
          M.copy (|
            ltac:
              (M.monadic_match_operator
                (M.alloc (|
                  M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            i32.t
                            core.num.error.ParseIntError.t)
                        (Trait := ℐ)))
                    (M.call (|(str.t::["parse"]
                      (M.read (| deref (M.read (| first |)) |)))
                    |)))
                  |)
                |))
                [
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              core.num.error.ParseIntError.t)
                            i32.t)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Break _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                      let residual := M.copy (| γ0_0 |) in
                      M.alloc (|
                        never_to_any (|
                          M.read (|
                            return_
                              (M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.try_trait.FromResidual.from_residual
                                    (Self :=
                                      core.result.Result.t
                                        i32.t
                                        wrapping_errors.DoubleError.t)
                                    (R :=
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        core.num.error.ParseIntError.t)
                                    (Trait := ℐ)))
                                (M.read (| residual |)))
                              |))
                          |)
                        |)
                      |)
                    | _ => M.break_match(||)
                    end :
                    M.Val i32.t;
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              core.num.error.ParseIntError.t)
                            i32.t)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Continue _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                      let val := M.copy (| γ0_0 |) in
                      val
                    | _ => M.break_match(||)
                    end :
                    M.Val i32.t
                ])
          |) in
        M.alloc (|
          core.result.Result.Ok
            (BinOp.Panic.mul (| (Integer.of_Z 2) : i32.t, M.read (| parsed |)
            |))
        |)
      |))
  )).

(*
fn print(result: Result<i32>) {
    match result {
        Ok(n) => println!("The first doubled is {}", n),
        Err(e) => {
            println!("Error: {}", e);
            if let Some(source) = e.source() {
                println!("  Caused by: {}", source);
            }
        }
    }
}
*)
Definition print (result : ltac:(wrapping_errors.Result i32.t)) : M unit :=
  ltac:(M.monadic (
    let result := M.alloc (| result |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          result
          [
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      i32.t
                      wrapping_errors.DoubleError.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Ok _ =>
                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                let n := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "The first doubled is " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow n))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      i32.t
                      wrapping_errors.DoubleError.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Err _ =>
                let γ0_0 := core.result.Result.Get_Err_0 γ in
                let e := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (| mk_str "Error: " |);
                                  M.read (| mk_str "
" |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                    (borrow e))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |) in
                ltac:
                  (M.monadic_match_operator
                    (M.alloc (|
                      M.call (|(ltac:(M.get_method (fun ℐ =>
                          core.error.Error.source
                            (Self := wrapping_errors.DoubleError.t)
                            (Trait := ℐ)))
                        (borrow e))
                      |)
                    |))
                    [
                      fun
                          (γ :
                            M.Val
                              (core.option.Option.t
                                (ref (dyn [core.error.Error.Trait])))) =>
                        match M.read (| γ |) with
                        | core.option.Option.Some _ =>
                          let γ0_0 := core.option.Option.Get_Some_0 γ in
                          let source := M.copy (| γ0_0 |) in
                          let _ : M.Val unit :=
                            let _ : M.Val unit :=
                              M.alloc (|
                                M.call (|(std.io.stdio._print
                                  (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                    (pointer_coercion
                                      "Unsize"
                                      (borrow
                                        (M.alloc (|
                                          [
                                            M.read (| mk_str "  Caused by: " |);
                                            M.read (| mk_str "
" |)
                                          ]
                                        |))))
                                    (pointer_coercion
                                      "Unsize"
                                      (borrow
                                        (M.alloc (|
                                          [
                                            M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                              (borrow source))
                                            |)
                                          ]
                                        |)))))
                                  |)))
                                |)
                              |) in
                            M.alloc (| tt |) in
                          M.alloc (| tt |)
                        | _ => M.break_match(||)
                        end :
                        M.Val unit;
                      fun
                          (γ :
                            M.Val
                              (core.option.Option.t
                                (ref (dyn [core.error.Error.Trait])))) =>
                        (M.alloc (| tt |)) : M.Val unit
                    ])
              | _ => M.break_match(||)
              end :
              M.Val unit
          ])
    |)
  )).

(*
fn main() {
    let numbers = vec!["42", "93", "18"];
    let empty = vec![];
    let strings = vec!["tofu", "93", "18"];

    print(double_first(numbers));
    print(double_first(empty));
    print(double_first(strings));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let numbers : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((slice (ref str.t))::["into_vec"]
            (pointer_coercion
              "Unsize"
              (M.read (|
                M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                  (M.alloc (|
                    [
                      M.read (| mk_str "42" |);
                      M.read (| mk_str "93" |);
                      M.read (| mk_str "18" |)
                    ]
                  |)))
                |)
              |))))
          |)
        |) in
      let empty : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|(alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t)::["new"]
          |)
        |) in
      let strings : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((slice (ref str.t))::["into_vec"]
            (pointer_coercion
              "Unsize"
              (M.read (|
                M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                  (M.alloc (|
                    [
                      M.read (| mk_str "tofu" |);
                      M.read (| mk_str "93" |);
                      M.read (| mk_str "18" |)
                    ]
                  |)))
                |)
              |))))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(wrapping_errors.print
            (M.call (|(wrapping_errors.double_first (M.read (| numbers |))) |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(wrapping_errors.print
            (M.call (|(wrapping_errors.double_first (M.read (| empty |))) |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(wrapping_errors.print
            (M.call (|(wrapping_errors.double_first (M.read (| strings |))) |)))
          |)
        |) in
      M.alloc (| tt |)
    |)
  )).
