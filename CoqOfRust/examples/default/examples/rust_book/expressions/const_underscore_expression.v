(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module underscore.
  (* StructRecord
    {
      name := "Foo";
      const_params := [];
      ty_params := [];
      fields := [ ("test", Ty.path "bool") ];
    } *)
  Module Impl_const_underscore_expression_BarTrait_for_const_underscore_expression_Bar.
    Definition Self : Ty.t := Ty.path "const_underscore_expression::Bar".
    
    (*
            fn show(self: Self) -> String {
                self.test
            }
    *)
    Definition show (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              self,
              "const_underscore_expression::Bar",
              "test"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "const_underscore_expression::BarTrait"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("show", InstanceField.Method show) ].
  End Impl_const_underscore_expression_BarTrait_for_const_underscore_expression_Bar.
End underscore.

(* StructRecord
  {
    name := "Bar";
    const_params := [];
    ty_params := [];
    fields := [ ("test", Ty.path "alloc::string::String") ];
  } *)

(* Trait *)
(* Empty module 'BarTrait' *)

