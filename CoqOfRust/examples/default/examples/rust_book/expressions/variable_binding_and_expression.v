(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // variable binding
    let x = 5;

    // expression;
    x;
    x + 1;
    15;
}
*)
Definition main (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [] =>
    ltac:(M.monadic
      (M.read (|
        let~ x : Ty.apply (Ty.path "*") [] [ Ty.path "i32" ] :=
          M.alloc (| Value.Integer IntegerKind.I32 5 |) in
        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.path "i32" ] := x in
        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.path "i32" ] :=
          M.alloc (|
            M.call_closure (|
              Ty.path "i32",
              BinOp.Wrap.add,
              [ M.read (| x |); Value.Integer IntegerKind.I32 1 ]
            |)
          |) in
        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.path "i32" ] :=
          M.alloc (| Value.Integer IntegerKind.I32 15 |) in
        M.alloc (| Value.Tuple [] |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_main :
  M.IsFunction.C "variable_binding_and_expression::main" main.
Admitted.
Global Typeclasses Opaque main.
