(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // variable binding
    let x = 5;

    // expression;
    x;
    x + 1;
    15;
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    ltac:(M.monadic
      (M.read (|
        let~ x := M.alloc (| Value.Integer IntegerKind.I32 5 |) in
        let~ _ := x in
        let~ _ :=
          M.alloc (| BinOp.Wrap.add (| M.read (| x |), Value.Integer IntegerKind.I32 1 |) |) in
        let~ _ := M.alloc (| Value.Integer IntegerKind.I32 15 |) in
        M.alloc (| Value.Tuple [] |)
      |)))
  | _, _ => M.impossible "wrong number of arguments"
  end.

Axiom Function_main : M.IsFunction "variable_binding_and_expression::main" main.
