(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // variable binding
    let x = 5;

    // expression;
    x;
    x + 1;
    15;
}
*)
Definition main (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [] =>
    ltac:(M.monadic
      (M.read (|
        let x := M.alloc (| M.of_value (| Value.Integer 5 |) |) in
        let _ := x in
        let _ :=
          M.alloc (|
            BinOp.Panic.add (| Integer.I32, M.read (| x |), M.of_value (| Value.Integer 1 |) |)
          |) in
        let _ := M.alloc (| M.of_value (| Value.Integer 15 |) |) in
        M.alloc (| M.of_value (| Value.Tuple [] |) |)
      |)))
  | _, _ => M.impossible
  end.
