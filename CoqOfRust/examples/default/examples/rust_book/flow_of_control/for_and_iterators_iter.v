(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let names = vec!["Bob", "Frank", "Ferris"];

    for name in names.iter() {
        match name {
            &"Ferris" => println!("There is a rustacean among us!"),
            // TODO ^ Try deleting the & and matching just "Ferris"
            _ => println!("Hello {}", name),
        }
    }

    println!("names: {:?}", names);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let names : M.Val (alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((slice (ref str.t))::["into_vec"]
            (pointer_coercion
              "Unsize"
              (M.read (|
                M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                  (M.alloc (|
                    [
                      M.read (| mk_str "Bob" |);
                      M.read (| mk_str "Frank" |);
                      M.read (| mk_str "Ferris" |)
                    ]
                  |)))
                |)
              |))))
          |)
        |) in
      let _ : M.Val unit :=
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self := core.slice.iter.Iter.t (ref str.t))
                      (Trait := ℐ)))
                  (M.call (|((slice (ref str.t))::["iter"]
                    (M.call (|(ltac:(M.get_method (fun ℐ =>
                        core.ops.deref.Deref.deref
                          (Self :=
                            alloc.vec.Vec.t (ref str.t) alloc.alloc.Global.t)
                          (Trait := ℐ)))
                      (borrow names))
                    |)))
                  |)))
                |)
              |))
              [
                fun (γ : M.Val (core.slice.iter.Iter.t (ref str.t))) =>
                  (let iter := M.copy (| γ |) in
                  M.loop
                    (let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self := core.slice.iter.Iter.t (ref str.t))
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun
                                (γ :
                                  M.Val
                                    (core.option.Option.t (ref (ref str.t)))) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  (never_to_any (B := unit)) (|
                                    M.read (| M.break |)
                                  |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun
                                (γ :
                                  M.Val
                                    (core.option.Option.t (ref (ref str.t)))) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                let name := M.copy (| γ0_0 |) in
                                ltac:
                                  (M.monadic_match_operator
                                    name
                                    [
                                      fun (γ : M.Val (ref (ref str.t))) =>
                                        (let γ := deref (M.read (| γ |)) in
                                        let _ : M.Val unit :=
                                          M.alloc (|
                                            M.call (|(std.io.stdio._print
                                              (M.call (|(core.fmt.Arguments.t::["new_const"]
                                                (pointer_coercion
                                                  "Unsize"
                                                  (borrow
                                                    (M.alloc (|
                                                      [
                                                        M.read (|
                                                          mk_str
                                                            "There is a rustacean among us!
"
                                                        |)
                                                      ]
                                                    |)))))
                                              |)))
                                            |)
                                          |) in
                                        M.alloc (| tt |)) :
                                        M.Val unit;
                                      fun (γ : M.Val (ref (ref str.t))) =>
                                        (let _ : M.Val unit :=
                                          M.alloc (|
                                            M.call (|(std.io.stdio._print
                                              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                                (pointer_coercion
                                                  "Unsize"
                                                  (borrow
                                                    (M.alloc (|
                                                      [
                                                        M.read (|
                                                          mk_str "Hello "
                                                        |);
                                                        M.read (| mk_str "
" |)
                                                      ]
                                                    |))))
                                                (pointer_coercion
                                                  "Unsize"
                                                  (borrow
                                                    (M.alloc (|
                                                      [
                                                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                          (borrow name))
                                                        |)
                                                      ]
                                                    |)))))
                                              |)))
                                            |)
                                          |) in
                                        M.alloc (| tt |)) :
                                        M.Val unit
                                    ])
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |))) :
                  M.Val unit
              ])) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "names: " |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow names))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
