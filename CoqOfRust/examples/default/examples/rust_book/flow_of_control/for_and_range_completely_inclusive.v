(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // `n` will take the values: 1, 2, ..., 100 in each iteration
    for n in 1..=100 {
        if n % 15 == 0 {
            println!("fizzbuzz");
        } else if n % 3 == 0 {
            println!("fizz");
        } else if n % 5 == 0 {
            println!("buzz");
        } else {
            println!("{}", n);
        }
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      use
        (ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.iter.traits.collect.IntoIterator.into_iter
                    (Self := core.ops.range.RangeInclusive.t i32.t)
                    (Trait := ℐ)))
                (M.call (|((core.ops.range.RangeInclusive.t i32.t)::["new"]
                  ((Integer.of_Z 1) : i32.t)
                  ((Integer.of_Z 100) : i32.t))
                |)))
              |)
            |))
            [
              fun (γ : M.Val (core.ops.range.RangeInclusive.t i32.t)) =>
                (let iter := M.copy (| γ |) in
                ltac: (M.monadic_loop (
                  let _ : M.Val unit :=
                    ltac:
                      (M.monadic_match_operator
                        (M.alloc (|
                          M.call (|(ltac:(M.get_method (fun ℐ =>
                              core.iter.traits.iterator.Iterator.next
                                (Self := core.ops.range.RangeInclusive.t i32.t)
                                (Trait := ℐ)))
                            (borrow_mut iter))
                          |)
                        |))
                        [
                          fun (γ : M.Val (core.option.Option.t i32.t)) =>
                            match M.read (| γ |) with
                            | core.option.Option.None =>
                              M.alloc (|
                                (never_to_any (B := unit)) (|
                                  M.read (| M.break (||) |)
                                |)
                              |)
                            | _ => M.break_match(||)
                            end :
                            M.Val unit;
                          fun (γ : M.Val (core.option.Option.t i32.t)) =>
                            match M.read (| γ |) with
                            | core.option.Option.Some _ =>
                              let γ0_0 := core.option.Option.Get_Some_0 γ in
                              let n := M.copy (| γ0_0 |) in
                              if
                                M.read (|
                                  use
                                    (M.alloc (|
                                      BinOp.Pure.eq
                                        (BinOp.Panic.rem (|
                                          M.read (| n |),
                                          (Integer.of_Z 15) : i32.t
                                        |))
                                        ((Integer.of_Z 0) : i32.t)
                                    |))
                                |)
                              then
                                let _ : M.Val unit :=
                                  let _ : M.Val unit :=
                                    M.alloc (|
                                      M.call (|(std.io.stdio._print
                                        (M.call (|(core.fmt.Arguments.t::["new_const"]
                                          (pointer_coercion
                                            "Unsize"
                                            (borrow
                                              (M.alloc (|
                                                [
                                                  M.read (| mk_str "fizzbuzz
"
                                                  |)
                                                ]
                                              |)))))
                                        |)))
                                      |)
                                    |) in
                                  M.alloc (| tt |) in
                                M.alloc (| tt |)
                              else
                                if
                                  M.read (|
                                    use
                                      (M.alloc (|
                                        BinOp.Pure.eq
                                          (BinOp.Panic.rem (|
                                            M.read (| n |),
                                            (Integer.of_Z 3) : i32.t
                                          |))
                                          ((Integer.of_Z 0) : i32.t)
                                      |))
                                  |)
                                then
                                  let _ : M.Val unit :=
                                    let _ : M.Val unit :=
                                      M.alloc (|
                                        M.call (|(std.io.stdio._print
                                          (M.call (|(core.fmt.Arguments.t::["new_const"]
                                            (pointer_coercion
                                              "Unsize"
                                              (borrow
                                                (M.alloc (|
                                                  [ M.read (| mk_str "fizz
" |)
                                                  ]
                                                |)))))
                                          |)))
                                        |)
                                      |) in
                                    M.alloc (| tt |) in
                                  M.alloc (| tt |)
                                else
                                  if
                                    M.read (|
                                      use
                                        (M.alloc (|
                                          BinOp.Pure.eq
                                            (BinOp.Panic.rem (|
                                              M.read (| n |),
                                              (Integer.of_Z 5) : i32.t
                                            |))
                                            ((Integer.of_Z 0) : i32.t)
                                        |))
                                    |)
                                  then
                                    let _ : M.Val unit :=
                                      let _ : M.Val unit :=
                                        M.alloc (|
                                          M.call (|(std.io.stdio._print
                                            (M.call (|(core.fmt.Arguments.t::["new_const"]
                                              (pointer_coercion
                                                "Unsize"
                                                (borrow
                                                  (M.alloc (|
                                                    [
                                                      M.read (| mk_str "buzz
"
                                                      |)
                                                    ]
                                                  |)))))
                                            |)))
                                          |)
                                        |) in
                                      M.alloc (| tt |) in
                                    M.alloc (| tt |)
                                  else
                                    let _ : M.Val unit :=
                                      let _ : M.Val unit :=
                                        M.alloc (|
                                          M.call (|(std.io.stdio._print
                                            (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                              (pointer_coercion
                                                "Unsize"
                                                (borrow
                                                  (M.alloc (|
                                                    [
                                                      M.read (| mk_str "" |);
                                                      M.read (| mk_str "
" |)
                                                    ]
                                                  |))))
                                              (pointer_coercion
                                                "Unsize"
                                                (borrow
                                                  (M.alloc (|
                                                    [
                                                      M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                        (borrow n))
                                                      |)
                                                    ]
                                                  |)))))
                                            |)))
                                          |)
                                        |) in
                                      M.alloc (| tt |) in
                                    M.alloc (| tt |)
                            | _ => M.break_match(||)
                            end :
                            M.Val unit
                        ]) in
                  M.alloc (| tt |)))) :
                M.Val unit
            ]))
    |)
  ) : unit)).
