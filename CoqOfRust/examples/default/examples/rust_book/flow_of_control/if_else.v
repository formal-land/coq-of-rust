(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let n = 5;

    if n < 0 {
        print!("{} is negative", n);
    } else if n > 0 {
        print!("{} is positive", n);
    } else {
        print!("{} is zero", n);
    }

    let big_n = if n < 10 && n > -10 {
        println!(", and is a small number, increase ten-fold");

        // This expression returns an `i32`.
        10 * n
    } else {
        println!(", and is a big number, halve the number");

        // This expression must return an `i32` as well.
        n / 2
        // TODO ^ Try suppressing this expression with a semicolon.
    };
    //   ^ Don't forget to put a semicolon here! All `let` bindings need it.

    println!("{} -> {}", n, big_n);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let n : M.Val i32.t := M.alloc (| (Integer.of_Z 5) : i32.t |) in
      let _ : M.Val unit :=
        if
          M.read (|
            use
              (M.alloc (|
                BinOp.Pure.lt (M.read (| n |)) ((Integer.of_Z 0) : i32.t)
              |))
          |)
        then
          let _ : M.Val unit :=
            let _ : M.Val unit :=
              M.alloc (|
                M.call (|(std.io.stdio._print
                  (M.call (|(core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion
                      "Unsize"
                      (borrow
                        (M.alloc (|
                          [
                            M.read (| mk_str "" |);
                            M.read (| mk_str " is negative" |)
                          ]
                        |))))
                    (pointer_coercion
                      "Unsize"
                      (borrow
                        (M.alloc (|
                          [
                            M.call (|(core.fmt.rt.Argument.t::["new_display"]
                              (borrow n))
                            |)
                          ]
                        |)))))
                  |)))
                |)
              |) in
            M.alloc (| tt |) in
          M.alloc (| tt |)
        else
          if
            M.read (|
              use
                (M.alloc (|
                  BinOp.Pure.gt (M.read (| n |)) ((Integer.of_Z 0) : i32.t)
                |))
            |)
          then
            let _ : M.Val unit :=
              let _ : M.Val unit :=
                M.alloc (|
                  M.call (|(std.io.stdio._print
                    (M.call (|(core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion
                        "Unsize"
                        (borrow
                          (M.alloc (|
                            [
                              M.read (| mk_str "" |);
                              M.read (| mk_str " is positive" |)
                            ]
                          |))))
                      (pointer_coercion
                        "Unsize"
                        (borrow
                          (M.alloc (|
                            [
                              M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                (borrow n))
                              |)
                            ]
                          |)))))
                    |)))
                  |)
                |) in
              M.alloc (| tt |) in
            M.alloc (| tt |)
          else
            let _ : M.Val unit :=
              let _ : M.Val unit :=
                M.alloc (|
                  M.call (|(std.io.stdio._print
                    (M.call (|(core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion
                        "Unsize"
                        (borrow
                          (M.alloc (|
                            [
                              M.read (| mk_str "" |);
                              M.read (| mk_str " is zero" |)
                            ]
                          |))))
                      (pointer_coercion
                        "Unsize"
                        (borrow
                          (M.alloc (|
                            [
                              M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                (borrow n))
                              |)
                            ]
                          |)))))
                    |)))
                  |)
                |) in
              M.alloc (| tt |) in
            M.alloc (| tt |) in
      let big_n : M.Val i32.t :=
        M.copy (|
          if
            M.read (|
              use
                (M.alloc (|
                  BinOp.Pure.and
                    (BinOp.Pure.lt (M.read (| n |)) ((Integer.of_Z 10) : i32.t))
                    (BinOp.Pure.gt
                      (M.read (| n |))
                      ((Integer.of_Z (-10)) : i32.t))
                |))
            |)
          then
            let _ : M.Val unit :=
              let _ : M.Val unit :=
                M.alloc (|
                  M.call (|(std.io.stdio._print
                    (M.call (|(core.fmt.Arguments.t::["new_const"]
                      (pointer_coercion
                        "Unsize"
                        (borrow
                          (M.alloc (|
                            [
                              M.read (|
                                mk_str
                                  ", and is a small number, increase ten-fold
"
                              |)
                            ]
                          |)))))
                    |)))
                  |)
                |) in
              M.alloc (| tt |) in
            M.alloc (|
              BinOp.Panic.mul (| (Integer.of_Z 10) : i32.t, M.read (| n |) |)
            |)
          else
            let _ : M.Val unit :=
              let _ : M.Val unit :=
                M.alloc (|
                  M.call (|(std.io.stdio._print
                    (M.call (|(core.fmt.Arguments.t::["new_const"]
                      (pointer_coercion
                        "Unsize"
                        (borrow
                          (M.alloc (|
                            [
                              M.read (|
                                mk_str
                                  ", and is a big number, halve the number
"
                              |)
                            ]
                          |)))))
                    |)))
                  |)
                |) in
              M.alloc (| tt |) in
            M.alloc (|
              BinOp.Panic.div (| M.read (| n |), (Integer.of_Z 2) : i32.t |)
            |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "" |);
                        M.read (| mk_str " -> " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow n))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow big_n))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
