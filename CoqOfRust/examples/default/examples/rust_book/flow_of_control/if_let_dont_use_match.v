(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Make `optional` of type `Option<i32>`
    let optional = Some(7);

    match optional {
        Some(i) => {
            println!("This is a really long string and `{:?}`", i);
            // ^ Needed 2 indentations just so we could destructure
            // `i` from the option.
        }
        _ => {}
        // ^ Required because `match` is exhaustive. Doesn't it seem
        // like wasted space?
    };
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let optional : M.Val (core.option.Option.t i32.t) :=
        M.alloc (| core.option.Option.Some ((Integer.of_Z 7) : i32.t) |) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            optional
            [
              fun (γ : M.Val (core.option.Option.t i32.t)) =>
                match M.read (| γ |) with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let i := M.copy (| γ0_0 |) in
                  let _ : M.Val unit :=
                    let _ : M.Val unit :=
                      M.alloc (|
                        M.call (|(std.io.stdio._print
                          (M.call (|(core.fmt.Arguments.t::["new_v1"]
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.read (|
                                      mk_str
                                        "This is a really long string and `"
                                    |);
                                    M.read (| mk_str "`
" |)
                                  ]
                                |))))
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                      (borrow i))
                                    |)
                                  ]
                                |)))))
                          |)))
                        |)
                      |) in
                    M.alloc (| tt |) in
                  M.alloc (| tt |)
                | _ => M.break_match(||)
                end :
                M.Val unit;
              fun (γ : M.Val (core.option.Option.t i32.t)) =>
                (M.alloc (| tt |)) : M.Val unit
            ]) in
      M.alloc (| tt |)
    |)
  )).
