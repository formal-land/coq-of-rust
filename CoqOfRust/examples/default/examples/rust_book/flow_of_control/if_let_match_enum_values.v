(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Foo.
  Inductive t : Set :=
  | Bar
  | Baz
  | Qux (_ : u32.t).
  
  Definition Get_Qux_0 :=
    Ref.map
      (fun α => match α with | Qux α0 => Some α0 | _ => None end)
      (fun β α => match α with | Qux _ => Some (Qux β) | _ => None end).
End Foo.

(*
fn main() {
    // Create example variables
    let a = Foo::Bar;
    let b = Foo::Baz;
    let c = Foo::Qux(100);

    // Variable a matches Foo::Bar
    if let Foo::Bar = a {
        println!("a is foobar");
    }

    // Variable b does not match Foo::Bar
    // So this will print nothing
    if let Foo::Bar = b {
        println!("b is foobar");
    }

    // Variable c matches Foo::Qux which has a value
    // Similar to Some() in the previous example
    if let Foo::Qux(value) = c {
        println!("c is {}", value);
    }

    // Binding also works with `if let`
    if let Foo::Qux(value @ 100) = c {
        println!("c is one hundred");
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let a : M.Val if_let_match_enum_values.Foo.t :=
        M.alloc (| if_let_match_enum_values.Foo.Bar |) in
      let b : M.Val if_let_match_enum_values.Foo.t :=
        M.alloc (| if_let_match_enum_values.Foo.Baz |) in
      let c : M.Val if_let_match_enum_values.Foo.t :=
        M.alloc (| if_let_match_enum_values.Foo.Qux ((Integer.of_Z 100) : u32.t)
        |) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            a
            [
              fun (γ : M.Val if_let_match_enum_values.Foo.t) =>
                match M.read (| γ |) with
                | if_let_match_enum_values.Foo.Bar =>
                  let _ : M.Val unit :=
                    let _ : M.Val unit :=
                      M.alloc (|
                        M.call (|(std.io.stdio._print
                          (M.call (|(core.fmt.Arguments.t::["new_const"]
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [ M.read (| mk_str "a is foobar
" |) ]
                                |)))))
                          |)))
                        |)
                      |) in
                    M.alloc (| tt |) in
                  M.alloc (| tt |)
                | _ => M.break_match(||)
                end :
                M.Val unit;
              fun (γ : M.Val if_let_match_enum_values.Foo.t) =>
                (M.alloc (| tt |)) : M.Val unit
            ]) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            b
            [
              fun (γ : M.Val if_let_match_enum_values.Foo.t) =>
                match M.read (| γ |) with
                | if_let_match_enum_values.Foo.Bar =>
                  let _ : M.Val unit :=
                    let _ : M.Val unit :=
                      M.alloc (|
                        M.call (|(std.io.stdio._print
                          (M.call (|(core.fmt.Arguments.t::["new_const"]
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [ M.read (| mk_str "b is foobar
" |) ]
                                |)))))
                          |)))
                        |)
                      |) in
                    M.alloc (| tt |) in
                  M.alloc (| tt |)
                | _ => M.break_match(||)
                end :
                M.Val unit;
              fun (γ : M.Val if_let_match_enum_values.Foo.t) =>
                (M.alloc (| tt |)) : M.Val unit
            ]) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            c
            [
              fun (γ : M.Val if_let_match_enum_values.Foo.t) =>
                match M.read (| γ |) with
                | if_let_match_enum_values.Foo.Qux _ =>
                  let γ0_0 := if_let_match_enum_values.Foo.Get_Qux_0 γ in
                  let value := M.copy (| γ0_0 |) in
                  let _ : M.Val unit :=
                    let _ : M.Val unit :=
                      M.alloc (|
                        M.call (|(std.io.stdio._print
                          (M.call (|(core.fmt.Arguments.t::["new_v1"]
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.read (| mk_str "c is " |);
                                    M.read (| mk_str "
" |)
                                  ]
                                |))))
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                      (borrow value))
                                    |)
                                  ]
                                |)))))
                          |)))
                        |)
                      |) in
                    M.alloc (| tt |) in
                  M.alloc (| tt |)
                | _ => M.break_match(||)
                end :
                M.Val unit;
              fun (γ : M.Val if_let_match_enum_values.Foo.t) =>
                (M.alloc (| tt |)) : M.Val unit
            ]) in
      ltac:
        (M.monadic_match_operator
          c
          [
            fun (γ : M.Val if_let_match_enum_values.Foo.t) =>
              match M.read (| γ |) with
              | if_let_match_enum_values.Foo.Qux _ =>
                let γ0_0 := if_let_match_enum_values.Foo.Get_Qux_0 γ in
                let value := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_const"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [ M.read (| mk_str "c is one hundred
" |) ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun (γ : M.Val if_let_match_enum_values.Foo.t) =>
              (M.alloc (| tt |)) : M.Val unit
          ])
    |)
  )).
