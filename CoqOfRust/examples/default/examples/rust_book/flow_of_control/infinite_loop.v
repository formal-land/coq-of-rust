(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let mut count = 0u32;

    println!("Let's count until infinity!");

    // Infinite loop
    loop {
        count += 1;

        if count == 3 {
            println!("three");

            // Skip the rest of this iteration
            continue;
        }

        println!("{}", count);

        if count == 5 {
            println!("OK, that's enough");

            // Exit this loop
            break;
        }
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let count : M.Val u32.t := M.alloc (| (Integer.of_Z 0) : u32.t |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "Let's count until infinity!
" |) ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.loop
        (let _ : M.Val unit :=
          let β : M.Val u32.t := count in
          assign (|
            β,
            BinOp.Panic.add (| M.read (| β |), (Integer.of_Z 1) : u32.t |)
          |) in
        let _ : M.Val unit :=
          if
            M.read (|
              use
                (M.alloc (|
                  BinOp.Pure.eq (M.read (| count |)) ((Integer.of_Z 3) : u32.t)
                |))
            |)
          then
            M.alloc (|
              never_to_any (|
                M.read (|
                  let _ : M.Val unit :=
                    let _ : M.Val unit :=
                      M.alloc (|
                        M.call (|(std.io.stdio._print
                          (M.call (|(core.fmt.Arguments.t::["new_const"]
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (| [ M.read (| mk_str "three
" |) ]
                                |)))))
                          |)))
                        |)
                      |) in
                    M.alloc (| tt |) in
                  M.continue
                |)
              |)
            |)
          else
            M.alloc (| tt |) in
        let _ : M.Val unit :=
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(std.io.stdio._print
                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [ M.read (| mk_str "" |); M.read (| mk_str "
" |) ]
                      |))))
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.call (|(core.fmt.rt.Argument.t::["new_display"]
                            (borrow count))
                          |)
                        ]
                      |)))))
                |)))
              |)
            |) in
          M.alloc (| tt |) in
        if
          M.read (|
            use
              (M.alloc (|
                BinOp.Pure.eq (M.read (| count |)) ((Integer.of_Z 5) : u32.t)
              |))
          |)
        then
          M.alloc (|
            never_to_any (|
              M.read (|
                let _ : M.Val unit :=
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_const"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [ M.read (| mk_str "OK, that's enough
" |) ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |) in
                M.break
              |)
            |)
          |)
        else
          M.alloc (| tt |))
    |)
  )).
