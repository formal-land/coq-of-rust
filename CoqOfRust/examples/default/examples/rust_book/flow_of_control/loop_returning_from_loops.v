(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let mut counter = 0;

    let result = loop {
        counter += 1;

        if counter == 10 {
            break counter * 2;
        }
    };

    assert_eq!(result, 20);
}
*)
Definition main (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [] =>
    ltac:(M.monadic
      (M.read (|
        let counter := M.alloc (| M.of_value (| Value.Integer 0 |) |) in
        let result :=
          M.copy (|
            M.loop (|
              ltac:(M.monadic
                (let _ :=
                  let β := counter in
                  M.write (|
                    β,
                    BinOp.Panic.add (|
                      Integer.I32,
                      M.read (| β |),
                      M.of_value (| Value.Integer 1 |)
                    |)
                  |) in
                M.match_operator (|
                  M.alloc (| M.of_value (| Value.Tuple [] |) |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.Pure.eq (|
                                M.read (| counter |),
                                M.of_value (| Value.Integer 10 |)
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                    fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
                  ]
                |)))
            |)
          |) in
        let _ :=
          M.match_operator (|
            M.alloc (|
              M.of_value (|
                Value.Tuple
                  [ A.to_value result; A.to_value (M.alloc (| M.of_value (| Value.Integer 20 |) |))
                  ]
              |)
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                  let left_val := M.copy (| γ0_0 |) in
                  let right_val := M.copy (| γ0_1 |) in
                  M.match_operator (|
                    M.alloc (| M.of_value (| Value.Tuple [] |) |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not (|
                                  BinOp.Pure.eq (|
                                    M.read (| M.read (| left_val |) |),
                                    M.read (| M.read (| right_val |) |)
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let kind :=
                                  M.alloc (|
                                    M.of_value (|
                                      Value.StructTuple "core::panicking::AssertKind::Eq" []
                                    |)
                                  |) in
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_function (|
                                      "core::panicking::assert_failed",
                                      [ Ty.path "i32"; Ty.path "i32" ]
                                    |),
                                    [
                                      M.read (| kind |);
                                      M.read (| left_val |);
                                      M.read (| right_val |);
                                      M.of_value (|
                                        Value.StructTuple "core::option::Option::None" []
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| M.of_value (| Value.Tuple [] |) |)))
                    ]
                  |)))
            ]
          |) in
        M.alloc (| M.of_value (| Value.Tuple [] |) |)
      |)))
  | _, _ => M.impossible
  end.
