(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn age() -> u32 {
    15
}
*)
Definition age (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [] => ltac:(M.monadic (M.of_value (| Value.Integer 15 |)))
  | _, _ => M.impossible
  end.

(*
fn main() {
    println!("Tell me what type of person you are");

    match age() {
        0 => println!("I haven't celebrated my first birthday yet"),
        // Could `match` 1 ..= 12 directly but then what age
        // would the child be? Instead, bind to `n` for the
        // sequence of 1 ..= 12. Now the age can be reported.
        n @ 1..=12 => println!("I'm a child of age {:?}", n),
        n @ 13..=19 => println!("I'm a teen of age {:?}", n),
        // Nothing bound. Return the result.
        n => println!("I'm an old person of age {:?}", n),
    }
}
*)
Definition main (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [] =>
    ltac:(M.monadic
      (M.read (|
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_const", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (|
                                    M.of_value (|
                                      Value.String "Tell me what type of person you are
"
                                    |)
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        M.match_operator (|
          M.alloc (| M.call_closure (| M.get_function (| "match_binding::age", [] |), [] |) |),
          [
            fun γ =>
              ltac:(M.monadic
                (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 0 |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "std::io::stdio::_print", [] |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_const",
                            []
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion (|
                              M.alloc (|
                                M.of_value (|
                                  Value.Array
                                    [
                                      A.to_value
                                        (M.read (|
                                          M.of_value (|
                                            Value.String
                                              "I haven't celebrated my first birthday yet
"
                                          |)
                                        |))
                                    ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (| M.of_value (| Value.Tuple [] |) |)));
            fun γ =>
              ltac:(M.monadic
                (let n := M.copy (| γ |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "std::io::stdio::_print", [] |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            []
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion (|
                              M.alloc (|
                                M.of_value (|
                                  Value.Array
                                    [
                                      A.to_value
                                        (M.read (|
                                          M.of_value (| Value.String "I'm a child of age " |)
                                        |));
                                      A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                                    ]
                                |)
                              |)
                            |);
                            (* Unsize *)
                            M.pointer_coercion (|
                              M.alloc (|
                                M.of_value (|
                                  Value.Array
                                    [
                                      A.to_value
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [ Ty.path "u32" ]
                                          |),
                                          [ n ]
                                        |))
                                    ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (| M.of_value (| Value.Tuple [] |) |)));
            fun γ =>
              ltac:(M.monadic
                (let n := M.copy (| γ |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "std::io::stdio::_print", [] |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            []
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion (|
                              M.alloc (|
                                M.of_value (|
                                  Value.Array
                                    [
                                      A.to_value
                                        (M.read (|
                                          M.of_value (| Value.String "I'm a teen of age " |)
                                        |));
                                      A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                                    ]
                                |)
                              |)
                            |);
                            (* Unsize *)
                            M.pointer_coercion (|
                              M.alloc (|
                                M.of_value (|
                                  Value.Array
                                    [
                                      A.to_value
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [ Ty.path "u32" ]
                                          |),
                                          [ n ]
                                        |))
                                    ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (| M.of_value (| Value.Tuple [] |) |)));
            fun γ =>
              ltac:(M.monadic
                (let n := M.copy (| γ |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "std::io::stdio::_print", [] |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            []
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion (|
                              M.alloc (|
                                M.of_value (|
                                  Value.Array
                                    [
                                      A.to_value
                                        (M.read (|
                                          M.of_value (| Value.String "I'm an old person of age " |)
                                        |));
                                      A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                                    ]
                                |)
                              |)
                            |);
                            (* Unsize *)
                            M.pointer_coercion (|
                              M.alloc (|
                                M.of_value (|
                                  Value.Array
                                    [
                                      A.to_value
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [ Ty.path "u32" ]
                                          |),
                                          [ n ]
                                        |))
                                    ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (| M.of_value (| Value.Tuple [] |) |)))
          ]
        |)
      |)))
  | _, _ => M.impossible
  end.
