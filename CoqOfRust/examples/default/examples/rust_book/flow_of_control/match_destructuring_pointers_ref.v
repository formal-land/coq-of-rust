(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Assign a reference of type `i32`. The `&` signifies there
    // is a reference being assigned.
    let reference = &4;

    match reference {
        // If `reference` is pattern matched against `&val`, it results
        // in a comparison like:
        // `&i32`
        // `&val`
        // ^ We see that if the matching `&`s are dropped, then the `i32`
        // should be assigned to `val`.
        &val => println!("Got a value via destructuring: {:?}", val),
    }

    // To avoid the `&`, you dereference before matching.
    match *reference {
        val => println!("Got a value via dereferencing: {:?}", val),
    }

    // What if you don't start with a reference? `reference` was a `&`
    // because the right side was already a reference. This is not
    // a reference because the right side is not one.
    let _not_a_reference = 3;

    // Rust provides `ref` for exactly this purpose. It modifies the
    // assignment so that a reference is created for the element; this
    // reference is assigned.
    let ref _is_a_reference = 3;

    // Accordingly, by defining 2 values without references, references
    // can be retrieved via `ref` and `ref mut`.
    let value = 5;
    let mut mut_value = 6;

    // Use `ref` keyword to create a reference.
    match value {
        ref r => println!("Got a reference to a value: {:?}", r),
    }

    // Use `ref mut` similarly.
    match mut_value {
        ref mut m => {
            // Got a reference. Gotta dereference it before we can
            // add anything to it.
            *m += 10;
            println!("We added 10. `mut_value`: {:?}", m);
        }
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let reference : M.Val (ref i32.t) :=
        M.alloc (| borrow (M.alloc (| (Integer.of_Z 4) : i32.t |)) |) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            reference
            [
              fun (γ : M.Val (ref i32.t)) =>
                (let γ := deref (M.read (| γ |)) in
                let val := M.copy (| γ |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (|
                                  mk_str "Got a value via destructuring: "
                                |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                  (borrow val))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)) :
                M.Val unit
            ]) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            (deref (M.read (| reference |)))
            [
              fun (γ : M.Val i32.t) =>
                (let val := M.copy (| γ |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (|
                                  mk_str "Got a value via dereferencing: "
                                |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                  (borrow val))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)) :
                M.Val unit
            ]) in
      let _not_a_reference : M.Val i32.t :=
        M.alloc (| (Integer.of_Z 3) : i32.t |) in
      ltac:
        (M.monadic_match_operator
          (M.alloc (| (Integer.of_Z 3) : i32.t |))
          [
            fun (γ : M.Val i32.t) =>
              (let _is_a_reference := M.alloc (| borrow γ |) in
              let value : M.Val i32.t :=
                M.alloc (| (Integer.of_Z 5) : i32.t |) in
              let mut_value : M.Val i32.t :=
                M.alloc (| (Integer.of_Z 6) : i32.t |) in
              let _ : M.Val unit :=
                ltac:
                  (M.monadic_match_operator
                    value
                    [
                      fun (γ : M.Val i32.t) =>
                        (let r := M.alloc (| borrow γ |) in
                        let _ : M.Val unit :=
                          M.alloc (|
                            M.call (|(std.io.stdio._print
                              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                (pointer_coercion
                                  "Unsize"
                                  (borrow
                                    (M.alloc (|
                                      [
                                        M.read (|
                                          mk_str "Got a reference to a value: "
                                        |);
                                        M.read (| mk_str "
" |)
                                      ]
                                    |))))
                                (pointer_coercion
                                  "Unsize"
                                  (borrow
                                    (M.alloc (|
                                      [
                                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                          (borrow r))
                                        |)
                                      ]
                                    |)))))
                              |)))
                            |)
                          |) in
                        M.alloc (| tt |)) :
                        M.Val unit
                    ]) in
              ltac:
                (M.monadic_match_operator
                  mut_value
                  [
                    fun (γ : M.Val i32.t) =>
                      (let m := M.alloc (| borrow_mut γ |) in
                      let _ : M.Val unit :=
                        let β : M.Val i32.t := deref (M.read (| m |)) in
                        assign (|
                          β,
                          BinOp.Panic.add (|
                            M.read (| β |),
                            (Integer.of_Z 10) : i32.t
                          |)
                        |) in
                      let _ : M.Val unit :=
                        let _ : M.Val unit :=
                          M.alloc (|
                            M.call (|(std.io.stdio._print
                              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                (pointer_coercion
                                  "Unsize"
                                  (borrow
                                    (M.alloc (|
                                      [
                                        M.read (|
                                          mk_str "We added 10. `mut_value`: "
                                        |);
                                        M.read (| mk_str "
" |)
                                      ]
                                    |))))
                                (pointer_coercion
                                  "Unsize"
                                  (borrow
                                    (M.alloc (|
                                      [
                                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                          (borrow m))
                                        |)
                                      ]
                                    |)))))
                              |)))
                            |)
                          |) in
                        M.alloc (| tt |) in
                      M.alloc (| tt |)) :
                      M.Val unit
                  ])) :
              M.Val unit
          ])
    |)
  )).
