(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Foo.
Section Foo.
  Record t : Set := {
    x : u32.t * u32.t;
    y : u32.t;
  }.
  
  Definition Get_x :=
    Ref.map (fun α => Some α.(x)) (fun β α => Some (α <| x := β |>)).
  Definition Get_y :=
    Ref.map (fun α => Some α.(y)) (fun β α => Some (α <| y := β |>)).
End Foo.
End Foo.

(*
fn main() {
    // Try changing the values in the struct to see what happens
    let foo = Foo { x: (1, 2), y: 3 };

    match foo {
        Foo { x: (1, b), y } => println!("First of x is 1, b = {},  y = {} ", b, y),

        // you can destructure structs and rename the variables,
        // the order is not important
        Foo { y: 2, x: i } => println!("y is 2, i = {:?}", i),

        // and you can also ignore some variables:
        Foo { y, .. } => println!("y = {}, we don't care about x", y),
        // this will give an error: pattern does not mention field `x`
        //Foo { y } => println!("y = {}", y),
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let foo : M.Val match_destructuring_structs.Foo.t :=
        M.alloc (|
          {|
            match_destructuring_structs.Foo.x :=
              ((Integer.of_Z 1) : u32.t, (Integer.of_Z 2) : u32.t);
            match_destructuring_structs.Foo.y := (Integer.of_Z 3) : u32.t;
          |}
        |) in
      ltac:
        (M.monadic_match_operator
          foo
          [
            fun (γ : M.Val match_destructuring_structs.Foo.t) =>
              match M.read (| γ |) with
              |
                  {|
                    match_destructuring_structs.Foo.x := _;
                    match_destructuring_structs.Foo.y := _;
                  |}
                  =>
                let γ0_0 := match_destructuring_structs.Foo.Get_x γ in
                let γ0_1 := match_destructuring_structs.Foo.Get_y γ in
                match M.read (| γ0_0 |) with
                | (_, _) =>
                  let γ1_0 := Tuple.Access.left γ0_0 in
                  let γ1_1 := Tuple.Access.right γ0_0 in
                  let b := M.copy (| γ1_1 |) in
                  let y := M.copy (| γ0_1 |) in
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (| mk_str "First of x is 1, b = " |);
                                  M.read (| mk_str ",  y = " |);
                                  M.read (| mk_str " 
" |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                    (borrow b))
                                  |);
                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                    (borrow y))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |)
                end
              end :
              M.Val unit;
            fun (γ : M.Val match_destructuring_structs.Foo.t) =>
              match M.read (| γ |) with
              |
                  {|
                    match_destructuring_structs.Foo.y := _;
                    match_destructuring_structs.Foo.x := _;
                  |}
                  =>
                let γ0_0 := match_destructuring_structs.Foo.Get_y γ in
                let γ0_1 := match_destructuring_structs.Foo.Get_x γ in
                let i := M.copy (| γ0_1 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "y is 2, i = " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                  (borrow i))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              end :
              M.Val unit;
            fun (γ : M.Val match_destructuring_structs.Foo.t) =>
              match M.read (| γ |) with
              | {| match_destructuring_structs.Foo.y := _; |} =>
                let γ0_0 := match_destructuring_structs.Foo.Get_y γ in
                let y := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "y = " |);
                                M.read (| mk_str ", we don't care about x
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow y))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              end :
              M.Val unit
          ])
    |)
  )).
