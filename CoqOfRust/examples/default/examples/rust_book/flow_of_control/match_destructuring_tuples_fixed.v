(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let triple = (0, -2, 3);
    // TODO ^ Try different values for `triple`

    println!("Tell me about {:?}", triple);
    // Match can be used to destructure a tuple
    match triple {
        // Destructure the second and third elements
        (0, y, z) => println!("First is `0`, `y` is {:?}, and `z` is {:?}", y, z),
        (1, _, _) => println!("First is `1` and the rest doesn't matter"),
        (.., 2) => println!("last is `2` and the rest doesn't matter"),
        (3, _, 4) => println!("First is `3`, last is `4`, and the rest doesn't matter"),
        // `..` can be used to ignore the rest of the tuple
        _ => println!("It doesn't matter what they are"),
        // `_` means don't bind the value to a variable
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let triple : M.Val ((i32.t * i32.t) * i32.t) :=
        M.alloc (|
          ((Integer.of_Z 0) : i32.t,
            (Integer.of_Z (-2)) : i32.t,
            (Integer.of_Z 3) : i32.t)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Tell me about " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow triple))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      ltac:
        (M.monadic_match_operator
          triple
          [
            fun (γ : M.Val ((i32.t * i32.t) * i32.t)) =>
              match M.read (| γ |) with
              | (_, _, _) =>
                let γ0_0 := Tuple.Access.left (Tuple.Access.left γ) in
                let γ0_1 := Tuple.Access.right (Tuple.Access.left γ) in
                let γ0_2 := Tuple.Access.right γ in
                let y := M.copy (| γ0_1 |) in
                let z := M.copy (| γ0_2 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "First is `0`, `y` is " |);
                                M.read (| mk_str ", and `z` is " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                  (borrow y))
                                |);
                                M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                  (borrow z))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              end :
              M.Val unit;
            fun (γ : M.Val ((i32.t * i32.t) * i32.t)) =>
              match M.read (| γ |) with
              | (_, _, _) =>
                let γ0_0 := Tuple.Access.left (Tuple.Access.left γ) in
                let γ0_1 := Tuple.Access.right (Tuple.Access.left γ) in
                let γ0_2 := Tuple.Access.right γ in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_const"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (|
                                  mk_str
                                    "First is `1` and the rest doesn't matter
"
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              end :
              M.Val unit;
            fun (γ : M.Val ((i32.t * i32.t) * i32.t)) =>
              match M.read (| γ |) with
              | (_) =>
                let γ0_0 := γ in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_const"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (|
                                  mk_str
                                    "last is `2` and the rest doesn't matter
"
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              end :
              M.Val unit;
            fun (γ : M.Val ((i32.t * i32.t) * i32.t)) =>
              match M.read (| γ |) with
              | (_, _, _) =>
                let γ0_0 := Tuple.Access.left (Tuple.Access.left γ) in
                let γ0_1 := Tuple.Access.right (Tuple.Access.left γ) in
                let γ0_2 := Tuple.Access.right γ in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_const"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (|
                                  mk_str
                                    "First is `3`, last is `4`, and the rest doesn't matter
"
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              end :
              M.Val unit;
            fun (γ : M.Val ((i32.t * i32.t) * i32.t)) =>
              (let _ : M.Val unit :=
                M.alloc (|
                  M.call (|(std.io.stdio._print
                    (M.call (|(core.fmt.Arguments.t::["new_const"]
                      (pointer_coercion
                        "Unsize"
                        (borrow
                          (M.alloc (|
                            [
                              M.read (|
                                mk_str "It doesn't matter what they are
"
                              |)
                            ]
                          |)))))
                    |)))
                  |)
                |) in
              M.alloc (| tt |)) :
              M.Val unit
          ])
    |)
  ) : unit)).
