(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // A counter variable
    let mut n = 1;

    // Loop while `n` is less than 101
    while n < 101 {
        if n % 15 == 0 {
            println!("fizzbuzz");
        } else if n % 3 == 0 {
            println!("fizz");
        } else if n % 5 == 0 {
            println!("buzz");
        } else {
            println!("{}", n);
        }

        // Increment counter
        n += 1;
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let n : M.Val i32.t := M.alloc (| (Integer.of_Z 1) : i32.t |) in
      M.loop
        (if
          M.read (|
            use
              (M.alloc (|
                BinOp.Pure.lt (M.read (| n |)) ((Integer.of_Z 101) : i32.t)
              |))
          |)
        then
          let _ : M.Val unit :=
            if
              M.read (|
                use
                  (M.alloc (|
                    BinOp.Pure.eq
                      (BinOp.Panic.rem (|
                        M.read (| n |),
                        (Integer.of_Z 15) : i32.t
                      |))
                      ((Integer.of_Z 0) : i32.t)
                  |))
              |)
            then
              let _ : M.Val unit :=
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_const"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (| [ M.read (| mk_str "fizzbuzz
" |) ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |) in
              M.alloc (| tt |)
            else
              if
                M.read (|
                  use
                    (M.alloc (|
                      BinOp.Pure.eq
                        (BinOp.Panic.rem (|
                          M.read (| n |),
                          (Integer.of_Z 3) : i32.t
                        |))
                        ((Integer.of_Z 0) : i32.t)
                    |))
                |)
              then
                let _ : M.Val unit :=
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_const"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (| [ M.read (| mk_str "fizz
" |) ] |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |) in
                M.alloc (| tt |)
              else
                if
                  M.read (|
                    use
                      (M.alloc (|
                        BinOp.Pure.eq
                          (BinOp.Panic.rem (|
                            M.read (| n |),
                            (Integer.of_Z 5) : i32.t
                          |))
                          ((Integer.of_Z 0) : i32.t)
                      |))
                  |)
                then
                  let _ : M.Val unit :=
                    let _ : M.Val unit :=
                      M.alloc (|
                        M.call (|(std.io.stdio._print
                          (M.call (|(core.fmt.Arguments.t::["new_const"]
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (| [ M.read (| mk_str "buzz
" |) ]
                                |)))))
                          |)))
                        |)
                      |) in
                    M.alloc (| tt |) in
                  M.alloc (| tt |)
                else
                  let _ : M.Val unit :=
                    let _ : M.Val unit :=
                      M.alloc (|
                        M.call (|(std.io.stdio._print
                          (M.call (|(core.fmt.Arguments.t::["new_v1"]
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.read (| mk_str "" |);
                                    M.read (| mk_str "
" |)
                                  ]
                                |))))
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                      (borrow n))
                                    |)
                                  ]
                                |)))))
                          |)))
                        |)
                      |) in
                    M.alloc (| tt |) in
                  M.alloc (| tt |) in
          let _ : M.Val unit :=
            let β : M.Val i32.t := n in
            assign (|
              β,
              BinOp.Panic.add (| M.read (| β |), (Integer.of_Z 1) : i32.t |)
            |) in
          M.alloc (| tt |)
        else
          M.alloc (|
            (never_to_any (B := unit)) (|
              M.read (|
                let _ : M.Val unit :=
                  M.alloc (|
                    (never_to_any (B := unit)) (| M.read (| M.break |) |)
                  |) in
                M.alloc (| tt |)
              |)
            |)
          |))
    |)
  )).
