(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Make `optional` of type `Option<i32>`
    let mut optional = Some(0);

    // This reads: "while `let` destructures `optional` into
    // `Some(i)`, evaluate the block (`{}`). Else `break`".
    while let Some(i) = optional {
        if i > 9 {
            println!("Greater than 9, quit!");
            optional = None;
        } else {
            println!("`i` is `{:?}`. Try again.", i);
            optional = Some(i + 1);
        }
        // ^ Less rightward drift and doesn't require
        // explicitly handling the failing case.
    }
    // ^ `if let` had additional optional `else`/`else if`
    // clauses. `while let` does not have these.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let optional : M.Val (core.option.Option.t i32.t) :=
        M.alloc (| core.option.Option.Some ((Integer.of_Z 0) : i32.t) |) in
      M.loop
        (ltac:
          (M.monadic_match_operator
            optional
            [
              fun (γ : M.Val (core.option.Option.t i32.t)) =>
                match M.read (| γ |) with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let i := M.copy (| γ0_0 |) in
                  if
                    M.read (|
                      use
                        (M.alloc (|
                          BinOp.Pure.gt
                            (M.read (| i |))
                            ((Integer.of_Z 9) : i32.t)
                        |))
                    |)
                  then
                    let _ : M.Val unit :=
                      let _ : M.Val unit :=
                        M.alloc (|
                          M.call (|(std.io.stdio._print
                            (M.call (|(core.fmt.Arguments.t::["new_const"]
                              (pointer_coercion
                                "Unsize"
                                (borrow
                                  (M.alloc (|
                                    [
                                      M.read (| mk_str "Greater than 9, quit!
"
                                      |)
                                    ]
                                  |)))))
                            |)))
                          |)
                        |) in
                      M.alloc (| tt |) in
                    let _ : M.Val unit :=
                      assign (| optional, core.option.Option.None |) in
                    M.alloc (| tt |)
                  else
                    let _ : M.Val unit :=
                      let _ : M.Val unit :=
                        M.alloc (|
                          M.call (|(std.io.stdio._print
                            (M.call (|(core.fmt.Arguments.t::["new_v1"]
                              (pointer_coercion
                                "Unsize"
                                (borrow
                                  (M.alloc (|
                                    [
                                      M.read (| mk_str "`i` is `" |);
                                      M.read (| mk_str "`. Try again.
" |)
                                    ]
                                  |))))
                              (pointer_coercion
                                "Unsize"
                                (borrow
                                  (M.alloc (|
                                    [
                                      M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                        (borrow i))
                                      |)
                                    ]
                                  |)))))
                            |)))
                          |)
                        |) in
                      M.alloc (| tt |) in
                    let _ : M.Val unit :=
                      assign (|
                        optional,
                        core.option.Option.Some
                          (BinOp.Panic.add (|
                            M.read (| i |),
                            (Integer.of_Z 1) : i32.t
                          |))
                      |) in
                    M.alloc (| tt |)
                | _ => M.break_match(||)
                end :
                M.Val unit;
              fun (γ : M.Val (core.option.Option.t i32.t)) =>
                (M.alloc (|
                  never_to_any (|
                    M.read (|
                      let _ : M.Val unit :=
                        M.alloc (| never_to_any (| M.read (| M.break |) |) |) in
                      M.alloc (| tt |)
                    |)
                  |)
                |)) :
                M.Val unit
            ]))
    |)
  )).
