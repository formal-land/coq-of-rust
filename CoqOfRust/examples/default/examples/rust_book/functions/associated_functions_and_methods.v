(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Point.
Section Point.
  Record t : Set := {
    x : f64.t;
    y : f64.t;
  }.
  
  Definition Get_x :=
    Ref.map (fun α => Some α.(x)) (fun β α => Some (α <| x := β |>)).
  Definition Get_y :=
    Ref.map (fun α => Some α.(y)) (fun β α => Some (α <| y := β |>)).
End Point.
End Point.

Module  Impl_associated_functions_and_methods_Point_t.
Section Impl_associated_functions_and_methods_Point_t.
  Definition Self : Set := associated_functions_and_methods.Point.t.
  
  (*
      fn origin() -> Point {
          Point { y: 0.0, x: 1.0 }
      }
  *)
  Definition origin : M associated_functions_and_methods.Point.t :=
    ltac:(M.monadic ((
      {|
        associated_functions_and_methods.Point.y :=
          M.read (| UnsupportedLiteral : M.Val f64.t |);
        associated_functions_and_methods.Point.x :=
          M.read (| UnsupportedLiteral : M.Val f64.t |);
      |} : associated_functions_and_methods.Point.t
    ) : associated_functions_and_methods.Point.t)).
  
  Global Instance AssociatedFunction_origin :
    Notations.DoubleColon Self "origin" := {
    Notations.double_colon := origin;
  }.
  
  (*
      fn new(x: f64, y: f64) -> Point {
          Point { x: x, y: y }
      }
  *)
  Definition new
      (x : f64.t)
      (y : f64.t)
      : M associated_functions_and_methods.Point.t :=
    ltac:(M.monadic ((
      let x := M.alloc (| x |) in
      let y := M.alloc (| y |) in
      {|
        associated_functions_and_methods.Point.x := M.read (| x |);
        associated_functions_and_methods.Point.y := M.read (| y |);
      |} : associated_functions_and_methods.Point.t
    ) : associated_functions_and_methods.Point.t)).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
End Impl_associated_functions_and_methods_Point_t.
End Impl_associated_functions_and_methods_Point_t.

Module  Rectangle.
Section Rectangle.
  Record t : Set := {
    p1 : associated_functions_and_methods.Point.t;
    p2 : associated_functions_and_methods.Point.t;
  }.
  
  Definition Get_p1 :=
    Ref.map (fun α => Some α.(p1)) (fun β α => Some (α <| p1 := β |>)).
  Definition Get_p2 :=
    Ref.map (fun α => Some α.(p2)) (fun β α => Some (α <| p2 := β |>)).
End Rectangle.
End Rectangle.

Module  Impl_associated_functions_and_methods_Rectangle_t.
Section Impl_associated_functions_and_methods_Rectangle_t.
  Definition Self : Set := associated_functions_and_methods.Rectangle.t.
  
  (*
      fn get_p1(&self) -> Point {
          self.p1
      }
  *)
  Definition get_p1
      (self : ref Self)
      : M associated_functions_and_methods.Point.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        associated_functions_and_methods.Rectangle.Get_p1
          (deref (M.read (| self |)))
      |)
    ) : associated_functions_and_methods.Point.t)).
  
  Global Instance AssociatedFunction_get_p1 :
    Notations.DoubleColon Self "get_p1" := {
    Notations.double_colon := get_p1;
  }.
  
  (*
      fn area(&self) -> f64 {
          // `self` gives access to the struct fields via the dot operator
          let Point { x: x1, y: y1 } = self.p1;
          let Point { x: x2, y: y2 } = self.p2;
  
          // `abs` is a `f64` method that returns the absolute value of the
          // caller
          ((x1 - x2) * (y1 - y2)).abs()
      }
  *)
  Definition area (self : ref Self) : M f64.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (associated_functions_and_methods.Rectangle.Get_p1
              (deref (M.read (| self |))))
            [
              fun (γ : M.Val associated_functions_and_methods.Point.t) =>
                match M.read (| γ |) with
                |
                    {|
                      associated_functions_and_methods.Point.x := _;
                      associated_functions_and_methods.Point.y := _;
                    |}
                    =>
                  let γ0_0 := associated_functions_and_methods.Point.Get_x γ in
                  let γ0_1 := associated_functions_and_methods.Point.Get_y γ in
                  let x1 := M.copy (| γ0_0 |) in
                  let y1 := M.copy (| γ0_1 |) in
                  ltac:
                    (M.monadic_match_operator
                      (associated_functions_and_methods.Rectangle.Get_p2
                        (deref (M.read (| self |))))
                      [
                        fun
                            (γ :
                              M.Val associated_functions_and_methods.Point.t) =>
                          match M.read (| γ |) with
                          |
                              {|
                                associated_functions_and_methods.Point.x := _;
                                associated_functions_and_methods.Point.y := _;
                              |}
                              =>
                            let γ0_0 :=
                              associated_functions_and_methods.Point.Get_x γ in
                            let γ0_1 :=
                              associated_functions_and_methods.Point.Get_y γ in
                            let x2 := M.copy (| γ0_0 |) in
                            let y2 := M.copy (| γ0_1 |) in
                            M.alloc (|
                              M.call (|(f64.t::["abs"]
                                (BinOp.Panic.mul (|
                                  BinOp.Panic.sub (|
                                    M.read (| x1 |),
                                    M.read (| x2 |)
                                  |),
                                  BinOp.Panic.sub (|
                                    M.read (| y1 |),
                                    M.read (| y2 |)
                                  |)
                                |)))
                              |)
                            |)
                          end :
                          M.Val f64.t
                      ])
                end :
                M.Val f64.t
            ])
      |)
    ) : f64.t)).
  
  Global Instance AssociatedFunction_area :
    Notations.DoubleColon Self "area" := {
    Notations.double_colon := area;
  }.
  
  (*
      fn perimeter(&self) -> f64 {
          let Point { x: x1, y: y1 } = self.p1;
          let Point { x: x2, y: y2 } = self.p2;
  
          2.0 * ((x1 - x2).abs() + (y1 - y2).abs())
      }
  *)
  Definition perimeter (self : ref Self) : M f64.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (associated_functions_and_methods.Rectangle.Get_p1
              (deref (M.read (| self |))))
            [
              fun (γ : M.Val associated_functions_and_methods.Point.t) =>
                match M.read (| γ |) with
                |
                    {|
                      associated_functions_and_methods.Point.x := _;
                      associated_functions_and_methods.Point.y := _;
                    |}
                    =>
                  let γ0_0 := associated_functions_and_methods.Point.Get_x γ in
                  let γ0_1 := associated_functions_and_methods.Point.Get_y γ in
                  let x1 := M.copy (| γ0_0 |) in
                  let y1 := M.copy (| γ0_1 |) in
                  ltac:
                    (M.monadic_match_operator
                      (associated_functions_and_methods.Rectangle.Get_p2
                        (deref (M.read (| self |))))
                      [
                        fun
                            (γ :
                              M.Val associated_functions_and_methods.Point.t) =>
                          match M.read (| γ |) with
                          |
                              {|
                                associated_functions_and_methods.Point.x := _;
                                associated_functions_and_methods.Point.y := _;
                              |}
                              =>
                            let γ0_0 :=
                              associated_functions_and_methods.Point.Get_x γ in
                            let γ0_1 :=
                              associated_functions_and_methods.Point.Get_y γ in
                            let x2 := M.copy (| γ0_0 |) in
                            let y2 := M.copy (| γ0_1 |) in
                            M.alloc (|
                              BinOp.Panic.mul (|
                                M.read (| UnsupportedLiteral : M.Val f64.t |),
                                BinOp.Panic.add (|
                                  M.call (|(f64.t::["abs"]
                                    (BinOp.Panic.sub (|
                                      M.read (| x1 |),
                                      M.read (| x2 |)
                                    |)))
                                  |),
                                  M.call (|(f64.t::["abs"]
                                    (BinOp.Panic.sub (|
                                      M.read (| y1 |),
                                      M.read (| y2 |)
                                    |)))
                                  |)
                                |)
                              |)
                            |)
                          end :
                          M.Val f64.t
                      ])
                end :
                M.Val f64.t
            ])
      |)
    ) : f64.t)).
  
  Global Instance AssociatedFunction_perimeter :
    Notations.DoubleColon Self "perimeter" := {
    Notations.double_colon := perimeter;
  }.
  
  (*
      fn translate(&mut self, x: f64, y: f64) {
          self.p1.x += x;
          self.p2.x += x;
  
          self.p1.y += y;
          self.p2.y += y;
      }
  *)
  Definition translate (self : mut_ref Self) (x : f64.t) (y : f64.t) : M unit :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let x := M.alloc (| x |) in
      let y := M.alloc (| y |) in
      M.read (|
        let _ : M.Val unit :=
          let β : M.Val f64.t :=
            associated_functions_and_methods.Point.Get_x
              (associated_functions_and_methods.Rectangle.Get_p1
                (deref (M.read (| self |)))) in
          assign (| β, BinOp.Panic.add (| M.read (| β |), M.read (| x |) |)
          |) in
        let _ : M.Val unit :=
          let β : M.Val f64.t :=
            associated_functions_and_methods.Point.Get_x
              (associated_functions_and_methods.Rectangle.Get_p2
                (deref (M.read (| self |)))) in
          assign (| β, BinOp.Panic.add (| M.read (| β |), M.read (| x |) |)
          |) in
        let _ : M.Val unit :=
          let β : M.Val f64.t :=
            associated_functions_and_methods.Point.Get_y
              (associated_functions_and_methods.Rectangle.Get_p1
                (deref (M.read (| self |)))) in
          assign (| β, BinOp.Panic.add (| M.read (| β |), M.read (| y |) |)
          |) in
        let _ : M.Val unit :=
          let β : M.Val f64.t :=
            associated_functions_and_methods.Point.Get_y
              (associated_functions_and_methods.Rectangle.Get_p2
                (deref (M.read (| self |)))) in
          assign (| β, BinOp.Panic.add (| M.read (| β |), M.read (| y |) |)
          |) in
        M.alloc (| tt |)
      |)
    ) : unit)).
  
  Global Instance AssociatedFunction_translate :
    Notations.DoubleColon Self "translate" := {
    Notations.double_colon := translate;
  }.
End Impl_associated_functions_and_methods_Rectangle_t.
End Impl_associated_functions_and_methods_Rectangle_t.

Module  Pair.
Section Pair.
  Record t : Set := {
    x0 : alloc.boxed.Box.t i32.t alloc.boxed.Box.Default.A;
    x1 : alloc.boxed.Box.t i32.t alloc.boxed.Box.Default.A;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
  Definition Get_1 :=
    Ref.map (fun α => Some α.(x1)) (fun β α => Some (α <| x1 := β |>)).
End Pair.
End Pair.

Module  Impl_associated_functions_and_methods_Pair_t.
Section Impl_associated_functions_and_methods_Pair_t.
  Definition Self : Set := associated_functions_and_methods.Pair.t.
  
  (*
      fn destroy(self) {
          // Destructure `self`
          let Pair(first, second) = self;
  
          println!("Destroying Pair({}, {})", first, second);
  
          // `first` and `second` go out of scope and get freed
      }
  *)
  Definition destroy (self : Self) : M unit :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            self
            [
              fun (γ : M.Val associated_functions_and_methods.Pair.t) =>
                match M.read (| γ |) with
                | associated_functions_and_methods.Pair.Build_t _ _ =>
                  let γ0_0 := associated_functions_and_methods.Pair.Get_0 γ in
                  let γ0_1 := associated_functions_and_methods.Pair.Get_1 γ in
                  let first := M.copy (| γ0_0 |) in
                  let second := M.copy (| γ0_1 |) in
                  let _ : M.Val unit :=
                    let _ : M.Val unit :=
                      M.alloc (|
                        M.call (|(std.io.stdio._print
                          (M.call (|(core.fmt.Arguments.t::["new_v1"]
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.read (| mk_str "Destroying Pair(" |);
                                    M.read (| mk_str ", " |);
                                    M.read (| mk_str ")
" |)
                                  ]
                                |))))
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                      (borrow first))
                                    |);
                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                      (borrow second))
                                    |)
                                  ]
                                |)))))
                          |)))
                        |)
                      |) in
                    M.alloc (| tt |) in
                  M.alloc (| tt |)
                end :
                M.Val unit
            ])
      |)
    ) : unit)).
  
  Global Instance AssociatedFunction_destroy :
    Notations.DoubleColon Self "destroy" := {
    Notations.double_colon := destroy;
  }.
End Impl_associated_functions_and_methods_Pair_t.
End Impl_associated_functions_and_methods_Pair_t.

(*
fn main() {
    let rectangle = Rectangle {
        // Associated functions are called using double colons
        p1: Point::origin(),
        p2: Point::new(3.0, 4.0),
    };

    // Methods are called using the dot operator
    // Note that the first argument `&self` is implicitly passed, i.e.
    // `rectangle.perimeter()` === `Rectangle::perimeter(&rectangle)`
    println!("Rectangle perimeter: {}", rectangle.perimeter());
    println!("Rectangle area: {}", rectangle.area());

    let mut square = Rectangle {
        p1: Point::origin(),
        p2: Point::new(1.0, 1.0),
    };

    // Error! `rectangle` is immutable, but this method requires a mutable
    // object
    //rectangle.translate(1.0, 0.0);
    // TODO ^ Try uncommenting this line

    // Okay! Mutable objects can call mutable methods
    square.translate(1.0, 1.0);

    let pair = Pair(Box::new(1), Box::new(2));

    pair.destroy();

    // Error! Previous `destroy` call "consumed" `pair`
    //pair.destroy();
    // TODO ^ Try uncommenting this line
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let rectangle : M.Val associated_functions_and_methods.Rectangle.t :=
        M.alloc (|
          {|
            associated_functions_and_methods.Rectangle.p1 :=
              M.call (|associated_functions_and_methods.Point.t::["origin"] |);
            associated_functions_and_methods.Rectangle.p2 :=
              M.call (|(associated_functions_and_methods.Point.t::["new"]
                (M.read (| UnsupportedLiteral : M.Val f64.t |))
                (M.read (| UnsupportedLiteral : M.Val f64.t |)))
              |);
          |} : associated_functions_and_methods.Rectangle.t
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Rectangle perimeter: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(associated_functions_and_methods.Rectangle.t::["perimeter"]
                                (borrow rectangle))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Rectangle area: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(associated_functions_and_methods.Rectangle.t::["area"]
                                (borrow rectangle))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let square : M.Val associated_functions_and_methods.Rectangle.t :=
        M.alloc (|
          {|
            associated_functions_and_methods.Rectangle.p1 :=
              M.call (|associated_functions_and_methods.Point.t::["origin"] |);
            associated_functions_and_methods.Rectangle.p2 :=
              M.call (|(associated_functions_and_methods.Point.t::["new"]
                (M.read (| UnsupportedLiteral : M.Val f64.t |))
                (M.read (| UnsupportedLiteral : M.Val f64.t |)))
              |);
          |} : associated_functions_and_methods.Rectangle.t
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(associated_functions_and_methods.Rectangle.t::["translate"]
            (borrow_mut square)
            (M.read (| UnsupportedLiteral : M.Val f64.t |))
            (M.read (| UnsupportedLiteral : M.Val f64.t |)))
          |)
        |) in
      let pair : M.Val associated_functions_and_methods.Pair.t :=
        M.alloc (|
          associated_functions_and_methods.Pair.Build_t
            (M.call (|((alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"]
              ((Integer.of_Z 1) : i32.t))
            |))
            (M.call (|((alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"]
              ((Integer.of_Z 2) : i32.t))
            |))
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(associated_functions_and_methods.Pair.t::["destroy"]
            (M.read (| pair |)))
          |)
        |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
