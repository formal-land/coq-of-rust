(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    fn sum_odd_numbers(up_to: u32) -> u32 {
        let mut acc = 0;
        for i in 0..up_to {
            // Notice that the return type of this match expression must be u32
            // because of the type of the "addition" variable.
            let addition: u32 = match i % 2 == 1 {
                // The "i" variable is of type u32, which is perfectly fine.
                true => i,
                // On the other hand, the "continue" expression does not return
                // u32, but it is still fine, because it never returns and therefore
                // does not violate the type requirements of the match expression.
                false => continue,
            };
            acc += addition;
        }
        acc
    }
    println!(
        "Sum of odd numbers up to 9 (excluding): {}",
        sum_odd_numbers(9)
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (|
                          mk_str "Sum of odd numbers up to 9 (excluding): "
                        |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|("unimplemented parent_kind"
                                ((Integer.of_Z 9) : u32.t))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).

(*
    fn sum_odd_numbers(up_to: u32) -> u32 {
        let mut acc = 0;
        for i in 0..up_to {
            // Notice that the return type of this match expression must be u32
            // because of the type of the "addition" variable.
            let addition: u32 = match i % 2 == 1 {
                // The "i" variable is of type u32, which is perfectly fine.
                true => i,
                // On the other hand, the "continue" expression does not return
                // u32, but it is still fine, because it never returns and therefore
                // does not violate the type requirements of the match expression.
                false => continue,
            };
            acc += addition;
        }
        acc
    }
*)
Definition sum_odd_numbers (up_to : u32.t) : M u32.t :=
  ltac:(M.monadic ((
    let up_to := M.alloc (| up_to |) in
    M.read (|
      let acc : M.Val u32.t := M.alloc (| (Integer.of_Z 0) : u32.t |) in
      let _ : M.Val unit :=
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self := core.ops.range.Range.t u32.t)
                      (Trait := ℐ)))
                  ({|
                    core.ops.range.Range.start := (Integer.of_Z 0) : u32.t;
                    core.ops.range.Range.end_ := M.read (| up_to |);
                  |} : core.ops.range.Range.t u32.t))
                |)
              |))
              [
                fun (γ : M.Val (core.ops.range.Range.t u32.t)) =>
                  (let iter := M.copy (| γ |) in
                  ltac: (M.monadic_loop (
                    let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self := core.ops.range.Range.t u32.t)
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun (γ : M.Val (core.option.Option.t u32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  (never_to_any (B := unit)) (|
                                    M.read (| M.break (||) |)
                                  |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun (γ : M.Val (core.option.Option.t u32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                let i := M.copy (| γ0_0 |) in
                                let addition : M.Val u32.t :=
                                  M.copy (|
                                    ltac:
                                      (M.monadic_match_operator
                                        (M.alloc (|
                                          BinOp.Pure.eq
                                            (BinOp.Panic.rem (|
                                              M.read (| i |),
                                              (Integer.of_Z 2) : u32.t
                                            |))
                                            ((Integer.of_Z 1) : u32.t)
                                        |))
                                        [
                                          fun (γ : M.Val bool.t) =>
                                            i : M.Val u32.t;
                                          fun (γ : M.Val bool.t) =>
                                            (M.alloc (|
                                              (never_to_any (B := u32.t)) (|
                                                M.read (| M.continue (||) |)
                                              |)
                                            |)) :
                                            M.Val u32.t
                                        ])
                                  |) in
                                let _ : M.Val unit :=
                                  let β : M.Val u32.t := acc in
                                  assign (|
                                    β,
                                    BinOp.Panic.add (|
                                      M.read (| β |),
                                      M.read (| addition |)
                                    |)
                                  |) in
                                M.alloc (| tt |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |)))) :
                  M.Val unit
              ])) in
      acc
    |)
  ) : u32.t)).
