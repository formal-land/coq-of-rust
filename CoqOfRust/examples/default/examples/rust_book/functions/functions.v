(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn is_divisible_by(lhs: u32, rhs: u32) -> bool {
    // Corner case, early return
    if rhs == 0 {
        return false;
    }

    // This is an expression, the `return` keyword is not necessary here
    lhs % rhs == 0
}
*)
Definition is_divisible_by (lhs : u32.t) (rhs : u32.t) : M bool.t :=
  ltac:(M.monadic ((
    let lhs := M.alloc (| lhs |) in
    let rhs := M.alloc (| rhs |) in
    let return_ := M.return_ (R := bool.t) in
    M.catch_return
      (M.read (|
        let _ : M.Val unit :=
          if
            M.read (|
              use
                (M.alloc (|
                  BinOp.Pure.eq (M.read (| rhs |)) ((Integer.of_Z 0) : u32.t)
                |))
            |)
          then
            M.alloc (|
              (never_to_any (B := unit)) (| M.read (| return_ false |) |)
            |)
          else
            M.alloc (| tt |) in
        M.alloc (|
          BinOp.Pure.eq
            (BinOp.Panic.rem (| M.read (| lhs |), M.read (| rhs |) |))
            ((Integer.of_Z 0) : u32.t)
        |)
      |))
  ) : bool.t)).

(*
fn fizzbuzz(n: u32) -> () {
    if is_divisible_by(n, 15) {
        println!("fizzbuzz");
    } else if is_divisible_by(n, 3) {
        println!("fizz");
    } else if is_divisible_by(n, 5) {
        println!("buzz");
    } else {
        println!("{}", n);
    }
}
*)
Definition fizzbuzz (n : u32.t) : M unit :=
  ltac:(M.monadic ((
    let n := M.alloc (| n |) in
    M.read (|
      if
        M.read (|
          use
            (M.alloc (|
              M.call (|(functions.is_divisible_by
                (M.read (| n |))
                ((Integer.of_Z 15) : u32.t))
              |)
            |))
        |)
      then
        let _ : M.Val unit :=
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(std.io.stdio._print
                (M.call (|(core.fmt.Arguments.t::["new_const"]
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (| [ M.read (| mk_str "fizzbuzz
" |) ] |)))))
                |)))
              |)
            |) in
          M.alloc (| tt |) in
        M.alloc (| tt |)
      else
        if
          M.read (|
            use
              (M.alloc (|
                M.call (|(functions.is_divisible_by
                  (M.read (| n |))
                  ((Integer.of_Z 3) : u32.t))
                |)
              |))
          |)
        then
          let _ : M.Val unit :=
            let _ : M.Val unit :=
              M.alloc (|
                M.call (|(std.io.stdio._print
                  (M.call (|(core.fmt.Arguments.t::["new_const"]
                    (pointer_coercion
                      "Unsize"
                      (borrow (M.alloc (| [ M.read (| mk_str "fizz
" |) ] |)))))
                  |)))
                |)
              |) in
            M.alloc (| tt |) in
          M.alloc (| tt |)
        else
          if
            M.read (|
              use
                (M.alloc (|
                  M.call (|(functions.is_divisible_by
                    (M.read (| n |))
                    ((Integer.of_Z 5) : u32.t))
                  |)
                |))
            |)
          then
            let _ : M.Val unit :=
              let _ : M.Val unit :=
                M.alloc (|
                  M.call (|(std.io.stdio._print
                    (M.call (|(core.fmt.Arguments.t::["new_const"]
                      (pointer_coercion
                        "Unsize"
                        (borrow
                          (M.alloc (| [ M.read (| mk_str "buzz
" |) ] |)))))
                    |)))
                  |)
                |) in
              M.alloc (| tt |) in
            M.alloc (| tt |)
          else
            let _ : M.Val unit :=
              let _ : M.Val unit :=
                M.alloc (|
                  M.call (|(std.io.stdio._print
                    (M.call (|(core.fmt.Arguments.t::["new_v1"]
                      (pointer_coercion
                        "Unsize"
                        (borrow
                          (M.alloc (|
                            [ M.read (| mk_str "" |); M.read (| mk_str "
" |) ]
                          |))))
                      (pointer_coercion
                        "Unsize"
                        (borrow
                          (M.alloc (|
                            [
                              M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                (borrow n))
                              |)
                            ]
                          |)))))
                    |)))
                  |)
                |) in
              M.alloc (| tt |) in
            M.alloc (| tt |)
    |)
  ) : unit)).

(*
fn fizzbuzz_to(n: u32) {
    for n in 1..=n {
        fizzbuzz(n);
    }
}
*)
Definition fizzbuzz_to (n : u32.t) : M unit :=
  ltac:(M.monadic ((
    let n := M.alloc (| n |) in
    M.read (|
      use
        (ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.iter.traits.collect.IntoIterator.into_iter
                    (Self := core.ops.range.RangeInclusive.t u32.t)
                    (Trait := ℐ)))
                (M.call (|((core.ops.range.RangeInclusive.t u32.t)::["new"]
                  ((Integer.of_Z 1) : u32.t)
                  (M.read (| n |)))
                |)))
              |)
            |))
            [
              fun (γ : M.Val (core.ops.range.RangeInclusive.t u32.t)) =>
                (let iter := M.copy (| γ |) in
                M.loop
                  (let _ : M.Val unit :=
                    ltac:
                      (M.monadic_match_operator
                        (M.alloc (|
                          M.call (|(ltac:(M.get_method (fun ℐ =>
                              core.iter.traits.iterator.Iterator.next
                                (Self := core.ops.range.RangeInclusive.t u32.t)
                                (Trait := ℐ)))
                            (borrow_mut iter))
                          |)
                        |))
                        [
                          fun (γ : M.Val (core.option.Option.t u32.t)) =>
                            match M.read (| γ |) with
                            | core.option.Option.None =>
                              M.alloc (|
                                (never_to_any (B := unit)) (|
                                  M.read (| M.break |)
                                |)
                              |)
                            | _ => M.break_match(||)
                            end :
                            M.Val unit;
                          fun (γ : M.Val (core.option.Option.t u32.t)) =>
                            match M.read (| γ |) with
                            | core.option.Option.Some _ =>
                              let γ0_0 := core.option.Option.Get_Some_0 γ in
                              let n := M.copy (| γ0_0 |) in
                              let _ : M.Val unit :=
                                M.alloc (|
                                  M.call (|(functions.fizzbuzz (M.read (| n |)))
                                  |)
                                |) in
                              M.alloc (| tt |)
                            | _ => M.break_match(||)
                            end :
                            M.Val unit
                        ]) in
                  M.alloc (| tt |))) :
                M.Val unit
            ]))
    |)
  ) : unit)).

(*
fn main() {
    // We can use this function here, and define it somewhere later
    fizzbuzz_to(100);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(functions.fizzbuzz_to ((Integer.of_Z 100) : u32.t)) |)
        |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
