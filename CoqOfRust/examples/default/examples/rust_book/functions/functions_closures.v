(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let outer_var = 42;

    // A regular function can't refer to variables in the enclosing environment
    //fn function(i: i32) -> i32 { i + outer_var }
    // TODO: uncomment the line above and see the compiler error. The compiler
    // suggests that we define a closure instead.

    // Closures are anonymous, here we are binding them to references
    // Annotation is identical to function annotation but is optional
    // as are the `{}` wrapping the body. These nameless functions
    // are assigned to appropriately named variables.
    let closure_annotated = |i: i32| -> i32 { i + outer_var };
    let closure_inferred = |i| i + outer_var;

    // Call the closures.
    println!("closure_annotated: {}", closure_annotated(1));
    println!("closure_inferred: {}", closure_inferred(1));
    // Once closure's type has been inferred, it cannot be inferred again with another type.
    //println!("cannot reuse closure_inferred with another type: {}", closure_inferred(42i64));
    // TODO: uncomment the line above and see the compiler error.

    // A closure taking no arguments which returns an `i32`.
    // The return type is inferred.
    let one = || 1;
    println!("closure returning one: {}", one());
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let outer_var : M.Val i32.t := M.alloc (| (Integer.of_Z 42) : i32.t |) in
      let closure_annotated : M.Val (i32.t -> i32.t) :=
        M.alloc (|
          fun (α0 : i32.t) =>
            (ltac:
              (M.monadic_match_operator
                (M.alloc (| α0 |))
                [
                  fun γ =>
                    (let i := M.copy (| γ |) in
                    BinOp.Panic.add (| M.read (| i |), M.read (| outer_var |)
                    |)) :
                    i32.t
                ])) :
            i32.t
        |) in
      let closure_inferred : M.Val (i32.t -> i32.t) :=
        M.alloc (|
          fun (α0 : i32.t) =>
            (ltac:
              (M.monadic_match_operator
                (M.alloc (| α0 |))
                [
                  fun γ =>
                    (let i := M.copy (| γ |) in
                    BinOp.Panic.add (| M.read (| i |), M.read (| outer_var |)
                    |)) :
                    i32.t
                ])) :
            i32.t
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "closure_annotated: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.function.Fn.call
                                    (Self := i32.t -> i32.t)
                                    (Args := i32.t)
                                    (Trait := ℐ)))
                                (borrow closure_annotated)
                                ((Integer.of_Z 1) : i32.t))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "closure_inferred: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.function.Fn.call
                                    (Self := i32.t -> i32.t)
                                    (Args := i32.t)
                                    (Trait := ℐ)))
                                (borrow closure_inferred)
                                ((Integer.of_Z 1) : i32.t))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let one : M.Val (unit -> i32.t) :=
        M.alloc (|
          fun (α0 : unit) =>
            (ltac:
              (M.monadic_match_operator
                (M.alloc (| α0 |))
                [ fun γ => ((Integer.of_Z 1) : i32.t) : i32.t ])) :
            i32.t
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "closure returning one: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.function.Fn.call
                                    (Self := unit -> i32.t)
                                    (Args := unit)
                                    (Trait := ℐ)))
                                (borrow one)
                                tt)
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
