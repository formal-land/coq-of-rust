(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn apply<F>(f: F)
where
    // The closure takes no input and returns nothing.
    F: FnOnce(),
{
    // ^ TODO: Try changing this to `Fn` or `FnMut`.

    f();
}
*)
Definition apply {F : Set} (f : F) : M unit :=
  ltac:(M.monadic ((
    let f := M.alloc (| f |) in
    M.read (|
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.ops.function.FnOnce.call_once
                (Self := F)
                (Args := unit)
                (Trait := ℐ)))
            (M.read (| f |))
            tt)
          |)
        |) in
      M.alloc (| tt |)
    |)
  ) : unit)).

(*
fn apply_to_3<F>(f: F) -> i32
where
    // The closure takes an `i32` and returns an `i32`.
    F: Fn(i32) -> i32,
{
    f(3)
}
*)
Definition apply_to_3 {F : Set} (f : F) : M i32.t :=
  ltac:(M.monadic ((
    let f := M.alloc (| f |) in
    M.call (|(ltac:(M.get_method (fun ℐ =>
        core.ops.function.Fn.call (Self := F) (Args := i32.t) (Trait := ℐ)))
      (borrow f)
      ((Integer.of_Z 3) : i32.t))
    |)
  ) : i32.t)).

(*
fn main() {
    use std::mem;

    let greeting = "hello";
    // A non-copy type.
    // `to_owned` creates owned data from borrowed one
    let mut farewell = "goodbye".to_owned();

    // Capture 2 variables: `greeting` by reference and
    // `farewell` by value.
    let diary = || {
        // `greeting` is by reference: requires `Fn`.
        println!("I said {}.", greeting);

        // Mutation forces `farewell` to be captured by
        // mutable reference. Now requires `FnMut`.
        farewell.push_str("!!!");
        println!("Then I screamed {}.", farewell);
        println!("Now I can sleep. zzzzz");

        // Manually calling drop forces `farewell` to
        // be captured by value. Now requires `FnOnce`.
        mem::drop(farewell);
    };

    // Call the function which applies the closure.
    apply(diary);

    // `double` satisfies `apply_to_3`'s trait bound
    let double = |x| 2 * x;

    println!("3 doubled: {}", apply_to_3(double));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let greeting : M.Val (ref str.t) := M.copy (| mk_str "hello" |) in
      let farewell : M.Val alloc.string.String.t :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              alloc.borrow.ToOwned.to_owned (Self := str.t) (Trait := ℐ)))
            (M.read (| mk_str "goodbye" |)))
          |)
        |) in
      let diary : M.Val (unit -> unit) :=
        M.alloc (|
          fun (α0 : unit) =>
            (ltac:
              (M.monadic_match_operator
                (M.alloc (| α0 |))
                [
                  fun γ =>
                    (M.read (|
                      let _ : M.Val unit :=
                        let _ : M.Val unit :=
                          M.alloc (|
                            M.call (|(std.io.stdio._print
                              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                (pointer_coercion
                                  "Unsize"
                                  (borrow
                                    (M.alloc (|
                                      [
                                        M.read (| mk_str "I said " |);
                                        M.read (| mk_str ".
" |)
                                      ]
                                    |))))
                                (pointer_coercion
                                  "Unsize"
                                  (borrow
                                    (M.alloc (|
                                      [
                                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                          (borrow greeting))
                                        |)
                                      ]
                                    |)))))
                              |)))
                            |)
                          |) in
                        M.alloc (| tt |) in
                      let _ : M.Val unit :=
                        M.alloc (|
                          M.call (|(alloc.string.String.t::["push_str"]
                            (borrow_mut farewell)
                            (M.read (| mk_str "!!!" |)))
                          |)
                        |) in
                      let _ : M.Val unit :=
                        let _ : M.Val unit :=
                          M.alloc (|
                            M.call (|(std.io.stdio._print
                              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                (pointer_coercion
                                  "Unsize"
                                  (borrow
                                    (M.alloc (|
                                      [
                                        M.read (| mk_str "Then I screamed " |);
                                        M.read (| mk_str ".
" |)
                                      ]
                                    |))))
                                (pointer_coercion
                                  "Unsize"
                                  (borrow
                                    (M.alloc (|
                                      [
                                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                          (borrow farewell))
                                        |)
                                      ]
                                    |)))))
                              |)))
                            |)
                          |) in
                        M.alloc (| tt |) in
                      let _ : M.Val unit :=
                        let _ : M.Val unit :=
                          M.alloc (|
                            M.call (|(std.io.stdio._print
                              (M.call (|(core.fmt.Arguments.t::["new_const"]
                                (pointer_coercion
                                  "Unsize"
                                  (borrow
                                    (M.alloc (|
                                      [
                                        M.read (|
                                          mk_str "Now I can sleep. zzzzz
"
                                        |)
                                      ]
                                    |)))))
                              |)))
                            |)
                          |) in
                        M.alloc (| tt |) in
                      let _ : M.Val unit :=
                        M.alloc (|
                          M.call (|(core.mem.drop (M.read (| farewell |))) |)
                        |) in
                      M.alloc (| tt |)
                    |)) :
                    unit
                ])) :
            unit
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(functions_closures_as_input_parameters.apply
            (M.read (| diary |)))
          |)
        |) in
      let double : M.Val (i32.t -> i32.t) :=
        M.alloc (|
          fun (α0 : i32.t) =>
            (ltac:
              (M.monadic_match_operator
                (M.alloc (| α0 |))
                [
                  fun γ =>
                    (let x := M.copy (| γ |) in
                    BinOp.Panic.mul (| (Integer.of_Z 2) : i32.t, M.read (| x |)
                    |)) :
                    i32.t
                ])) :
            i32.t
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "3 doubled: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(functions_closures_as_input_parameters.apply_to_3
                                (M.read (| double |)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
