(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn create_fn() -> impl Fn() {
    let text = "Fn".to_owned();

    move || println!("This is a: {}", text)
}
*)
Definition create_fn : M _ (* OpaqueTy *) :=
  ltac:(M.monadic ((
    M.read (|
      let text : M.Val alloc.string.String.t :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              alloc.borrow.ToOwned.to_owned (Self := str.t) (Trait := ℐ)))
            (M.read (| mk_str "Fn" |)))
          |)
        |) in
      M.alloc (|
        fun (α0 : unit) =>
          (ltac:
            (M.monadic_match_operator
              (M.alloc (| α0 |))
              [
                fun γ =>
                  (M.read (|
                    let _ : M.Val unit :=
                      M.alloc (|
                        M.call (|(std.io.stdio._print
                          (M.call (|(core.fmt.Arguments.t::["new_v1"]
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.read (| mk_str "This is a: " |);
                                    M.read (| mk_str "
" |)
                                  ]
                                |))))
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                      (borrow text))
                                    |)
                                  ]
                                |)))))
                          |)))
                        |)
                      |) in
                    M.alloc (| tt |)
                  |)) :
                  unit
              ])) :
          unit
      |)
    |)
  ) : _ (* OpaqueTy *))).

Error OpaqueTy.

(*
fn create_fnmut() -> impl FnMut() {
    let text = "FnMut".to_owned();

    move || println!("This is a: {}", text)
}
*)
Definition create_fnmut : M _ (* OpaqueTy *) :=
  ltac:(M.monadic ((
    M.read (|
      let text : M.Val alloc.string.String.t :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              alloc.borrow.ToOwned.to_owned (Self := str.t) (Trait := ℐ)))
            (M.read (| mk_str "FnMut" |)))
          |)
        |) in
      M.alloc (|
        fun (α0 : unit) =>
          (ltac:
            (M.monadic_match_operator
              (M.alloc (| α0 |))
              [
                fun γ =>
                  (M.read (|
                    let _ : M.Val unit :=
                      M.alloc (|
                        M.call (|(std.io.stdio._print
                          (M.call (|(core.fmt.Arguments.t::["new_v1"]
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.read (| mk_str "This is a: " |);
                                    M.read (| mk_str "
" |)
                                  ]
                                |))))
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                      (borrow text))
                                    |)
                                  ]
                                |)))))
                          |)))
                        |)
                      |) in
                    M.alloc (| tt |)
                  |)) :
                  unit
              ])) :
          unit
      |)
    |)
  ) : _ (* OpaqueTy *))).

Error OpaqueTy.

(*
fn create_fnonce() -> impl FnOnce() {
    let text = "FnOnce".to_owned();

    move || println!("This is a: {}", text)
}
*)
Definition create_fnonce : M _ (* OpaqueTy *) :=
  ltac:(M.monadic ((
    M.read (|
      let text : M.Val alloc.string.String.t :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              alloc.borrow.ToOwned.to_owned (Self := str.t) (Trait := ℐ)))
            (M.read (| mk_str "FnOnce" |)))
          |)
        |) in
      M.alloc (|
        fun (α0 : unit) =>
          (ltac:
            (M.monadic_match_operator
              (M.alloc (| α0 |))
              [
                fun γ =>
                  (M.read (|
                    let _ : M.Val unit :=
                      M.alloc (|
                        M.call (|(std.io.stdio._print
                          (M.call (|(core.fmt.Arguments.t::["new_v1"]
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.read (| mk_str "This is a: " |);
                                    M.read (| mk_str "
" |)
                                  ]
                                |))))
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                      (borrow text))
                                    |)
                                  ]
                                |)))))
                          |)))
                        |)
                      |) in
                    M.alloc (| tt |)
                  |)) :
                  unit
              ])) :
          unit
      |)
    |)
  ) : _ (* OpaqueTy *))).

Error OpaqueTy.

(*
fn main() {
    let fn_plain = create_fn();
    let mut fn_mut = create_fnmut();
    let fn_once = create_fnonce();

    fn_plain();
    fn_mut();
    fn_once();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let fn_plain : M.Val _ :=
        M.alloc (| M.call (|functions_closures_as_output_parameters.create_fn |)
        |) in
      let fn_mut : M.Val _ :=
        M.alloc (|
          M.call (|functions_closures_as_output_parameters.create_fnmut |)
        |) in
      let fn_once : M.Val _ :=
        M.alloc (|
          M.call (|functions_closures_as_output_parameters.create_fnonce |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.ops.function.Fn.call
                (Self := _)
                (Args := unit)
                (Trait := ℐ)))
            (borrow fn_plain)
            tt)
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.ops.function.FnMut.call_mut
                (Self := _)
                (Args := unit)
                (Trait := ℐ)))
            (borrow_mut fn_mut)
            tt)
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.ops.function.FnOnce.call_once
                (Self := _)
                (Args := unit)
                (Trait := ℐ)))
            (M.read (| fn_once |))
            tt)
          |)
        |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
