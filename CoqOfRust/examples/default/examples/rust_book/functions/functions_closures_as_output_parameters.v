(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn create_fn() -> impl Fn() {
    let text = "Fn".to_owned();

    move || println!("This is a: {}", text)
}
*)
Definition create_fn (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* text :=
      let* α0 :=
        M.get_trait_method "alloc::borrow::ToOwned" (Ty.path "str") [] [] "to_owned" [] [] in
      let* α1 := M.read (mk_str "Fn") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.alloc α2 in
    let* α0 :=
      M.alloc
        (M.closure
          (fun γ =>
            match γ with
            | [ α0 ] =>
              let* α0 := M.alloc α0 in
              M.match_operator
                α0
                [
                  fun γ =>
                    let* _ :=
                      let* α0 := M.get_function "std::io::stdio::_print" [] [] in
                      let* α1 :=
                        M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
                      let* α5 :=
                        (* Unsize *)
                          let* α2 := M.read (mk_str "This is a: ") in
                          let* α3 := M.read (mk_str "
") in
                          let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                          M.pure (M.pointer_coercion α4) in
                      let* α9 :=
                        (* Unsize *)
                          let* α6 :=
                            M.get_associated_function
                              (Ty.path "core::fmt::rt::Argument")
                              "new_display"
                              [ Ty.path "alloc::string::String" ]
                              [] in
                          let* α7 := M.call_closure α6 [ text ] in
                          let* α8 := M.alloc (Value.Array [ α7 ]) in
                          M.pure (M.pointer_coercion α8) in
                      let* α10 := M.call_closure α1 [ α5; α9 ] in
                      let* α11 := M.call_closure α0 [ α10 ] in
                      M.alloc α11 in
                    let* α0 := M.alloc (Value.Tuple []) in
                    M.read α0
                ]
            | _ => M.impossible
            end)) in
    M.read α0
  | _, _ => M.impossible
  end.

Module create_fn.
  (* Error OpaqueTy *)
End create_fn.

(*
fn create_fnmut() -> impl FnMut() {
    let text = "FnMut".to_owned();

    move || println!("This is a: {}", text)
}
*)
Definition create_fnmut (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* text :=
      let* α0 :=
        M.get_trait_method "alloc::borrow::ToOwned" (Ty.path "str") [] [] "to_owned" [] [] in
      let* α1 := M.read (mk_str "FnMut") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.alloc α2 in
    let* α0 :=
      M.alloc
        (M.closure
          (fun γ =>
            match γ with
            | [ α0 ] =>
              let* α0 := M.alloc α0 in
              M.match_operator
                α0
                [
                  fun γ =>
                    let* _ :=
                      let* α0 := M.get_function "std::io::stdio::_print" [] [] in
                      let* α1 :=
                        M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
                      let* α5 :=
                        (* Unsize *)
                          let* α2 := M.read (mk_str "This is a: ") in
                          let* α3 := M.read (mk_str "
") in
                          let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                          M.pure (M.pointer_coercion α4) in
                      let* α9 :=
                        (* Unsize *)
                          let* α6 :=
                            M.get_associated_function
                              (Ty.path "core::fmt::rt::Argument")
                              "new_display"
                              [ Ty.path "alloc::string::String" ]
                              [] in
                          let* α7 := M.call_closure α6 [ text ] in
                          let* α8 := M.alloc (Value.Array [ α7 ]) in
                          M.pure (M.pointer_coercion α8) in
                      let* α10 := M.call_closure α1 [ α5; α9 ] in
                      let* α11 := M.call_closure α0 [ α10 ] in
                      M.alloc α11 in
                    let* α0 := M.alloc (Value.Tuple []) in
                    M.read α0
                ]
            | _ => M.impossible
            end)) in
    M.read α0
  | _, _ => M.impossible
  end.

Module create_fnmut.
  (* Error OpaqueTy *)
End create_fnmut.

(*
fn create_fnonce() -> impl FnOnce() {
    let text = "FnOnce".to_owned();

    move || println!("This is a: {}", text)
}
*)
Definition create_fnonce (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* text :=
      let* α0 :=
        M.get_trait_method "alloc::borrow::ToOwned" (Ty.path "str") [] [] "to_owned" [] [] in
      let* α1 := M.read (mk_str "FnOnce") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.alloc α2 in
    let* α0 :=
      M.alloc
        (M.closure
          (fun γ =>
            match γ with
            | [ α0 ] =>
              let* α0 := M.alloc α0 in
              M.match_operator
                α0
                [
                  fun γ =>
                    let* _ :=
                      let* α0 := M.get_function "std::io::stdio::_print" [] [] in
                      let* α1 :=
                        M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
                      let* α5 :=
                        (* Unsize *)
                          let* α2 := M.read (mk_str "This is a: ") in
                          let* α3 := M.read (mk_str "
") in
                          let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                          M.pure (M.pointer_coercion α4) in
                      let* α9 :=
                        (* Unsize *)
                          let* α6 :=
                            M.get_associated_function
                              (Ty.path "core::fmt::rt::Argument")
                              "new_display"
                              [ Ty.path "alloc::string::String" ]
                              [] in
                          let* α7 := M.call_closure α6 [ text ] in
                          let* α8 := M.alloc (Value.Array [ α7 ]) in
                          M.pure (M.pointer_coercion α8) in
                      let* α10 := M.call_closure α1 [ α5; α9 ] in
                      let* α11 := M.call_closure α0 [ α10 ] in
                      M.alloc α11 in
                    let* α0 := M.alloc (Value.Tuple []) in
                    M.read α0
                ]
            | _ => M.impossible
            end)) in
    M.read α0
  | _, _ => M.impossible
  end.

Module create_fnonce.
  (* Error OpaqueTy *)
End create_fnonce.

(*
fn main() {
    let fn_plain = create_fn();
    let mut fn_mut = create_fnmut();
    let fn_once = create_fnonce();

    fn_plain();
    fn_mut();
    fn_once();
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* fn_plain :=
      let* α0 := M.get_function "functions_closures_as_output_parameters::create_fn" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.alloc α1 in
    let* fn_mut :=
      let* α0 := M.get_function "functions_closures_as_output_parameters::create_fnmut" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.alloc α1 in
    let* fn_once :=
      let* α0 := M.get_function "functions_closures_as_output_parameters::create_fnonce" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.alloc α1 in
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "core::ops::function::Fn"
          Ty.associated
          [ Ty.tuple [] ]
          []
          "call"
          []
          [] in
      let* α1 := M.call_closure α0 [ fn_plain; Value.Tuple [] ] in
      M.alloc α1 in
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "core::ops::function::FnMut"
          Ty.associated
          [ Ty.tuple [] ]
          []
          "call_mut"
          []
          [] in
      let* α1 := M.call_closure α0 [ fn_mut; Value.Tuple [] ] in
      M.alloc α1 in
    let* _ :=
      let* α0 :=
        M.get_trait_method
          "core::ops::function::FnOnce"
          Ty.associated
          [ Ty.tuple [] ]
          []
          "call_once"
          []
          [] in
      let* α1 := M.read fn_once in
      let* α2 := M.call_closure α0 [ α1; Value.Tuple [] ] in
      M.alloc α2 in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
