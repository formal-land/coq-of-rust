(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let vec = vec![1, 9, 3, 3, 13, 2];

    // `iter()` for vecs yields `&i32` and `position()` does not take a reference, so
    // we have to destructure `&i32` to `i32`
    let index_of_first_even_number = vec.iter().position(|&x| x % 2 == 0);
    assert_eq!(index_of_first_even_number, Some(5));

    // `into_iter()` for vecs yields `i32` and `position()` does not take a reference, so
    // we do not have to destructure
    let index_of_first_negative_number = vec.into_iter().position(|x| x < 0);
    assert_eq!(index_of_first_negative_number, None);
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* vec :=
      let* α0 :=
        M.get_associated_function
          (Ty.apply (Ty.path "slice") [ Ty.path "i32" ] [])
          "into_vec"
          [ Ty.path "alloc::alloc::Global" ]
          [] in
      let* α5 :=
        (* Unsize *)
          let* α1 :=
            M.get_associated_function
              (Ty.apply
                (Ty.path "alloc::boxed::Box")
                [
                  Ty.apply (Ty.path "array") [ Ty.path "i32" ] [ Value.Integer Integer.Usize 6 ];
                  Ty.path "alloc::alloc::Global"
                ]
                [])
              "new"
              []
              [] in
          let* α2 :=
            M.alloc
              (Value.Array
                [
                  Value.Integer Integer.I32 1;
                  Value.Integer Integer.I32 9;
                  Value.Integer Integer.I32 3;
                  Value.Integer Integer.I32 3;
                  Value.Integer Integer.I32 13;
                  Value.Integer Integer.I32 2
                ]) in
          let* α3 := M.call_closure α1 [ α2 ] in
          let* α4 := M.read α3 in
          M.pure (M.pointer_coercion α4) in
      let* α6 := M.call_closure α0 [ α5 ] in
      M.alloc α6 in
    let* index_of_first_even_number :=
      let* α0 :=
        M.get_trait_method
          "core::iter::traits::iterator::Iterator"
          (Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "i32" ] [])
          []
          []
          "position"
          [
            Ty.function
              [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "i32" ] [] ] ]
              (Ty.path "bool")
          ]
          [] in
      let* α1 :=
        M.get_associated_function (Ty.apply (Ty.path "slice") [ Ty.path "i32" ] []) "iter" [] [] in
      let* α2 :=
        M.get_trait_method
          "core::ops::deref::Deref"
          (Ty.apply
            (Ty.path "alloc::vec::Vec")
            [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ]
            [])
          []
          []
          "deref"
          []
          [] in
      let* α3 := M.call_closure α2 [ vec ] in
      let* α4 := M.call_closure α1 [ α3 ] in
      let* α5 := M.alloc α4 in
      let* α6 :=
        M.call_closure
          α0
          [
            α5;
            M.closure
              (fun γ =>
                match γ with
                | [ α0 ] =>
                  let* α0 := M.alloc α0 in
                  M.match_operator
                    α0
                    [
                      fun γ =>
                        let* γ := M.read γ in
                        let* x := M.copy γ in
                        let* α0 := M.read x in
                        let* α1 := BinOp.Panic.rem α0 (Value.Integer Integer.I32 2) in
                        M.pure (BinOp.Pure.eq α1 (Value.Integer Integer.I32 0))
                    ]
                | _ => M.impossible
                end)
          ] in
      M.alloc α6 in
    let* _ :=
      let* α0 :=
        M.alloc
          (Value.StructTuple "core::option::Option::Some" [ Value.Integer Integer.Usize 5 ]) in
      let* α1 := M.alloc (Value.Tuple [ index_of_first_even_number; α0 ]) in
      M.match_operator
        α1
        [
          fun γ =>
            let γ0_0 := M.get_tuple_field γ 0 in
            let γ0_1 := M.get_tuple_field γ 1 in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 := M.alloc (Value.Tuple []) in
            M.match_operator
              α0
              [
                fun γ =>
                  let* γ :=
                    let* α0 :=
                      M.get_trait_method
                        "core::cmp::PartialEq"
                        (Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ] [])
                        [ Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ] [] ]
                        [ Value.Bool true ]
                        "eq"
                        []
                        [] in
                    let* α1 := M.read left_val in
                    let* α2 := M.read right_val in
                    let* α3 := M.call_closure α0 [ α1; α2 ] in
                    let* α4 := M.alloc (UnOp.Pure.not α3) in
                    M.pure (M.use α4) in
                  let* _ :=
                    let* α0 := M.read γ in
                    M.is_constant_or_break_match α0 (Value.Bool true) in
                  let* kind := M.alloc (Value.StructTuple "core::panicking::AssertKind::Eq" []) in
                  let* α0 :=
                    M.get_function
                      "core::panicking::assert_failed"
                      [
                        Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ] [];
                        Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ] []
                      ]
                      [] in
                  let* α1 := M.read kind in
                  let* α2 := M.read left_val in
                  let* α3 := M.read right_val in
                  let* α4 :=
                    M.call_closure
                      α0
                      [ α1; α2; α3; Value.StructTuple "core::option::Option::None" [] ] in
                  let* α0 := M.alloc α4 in
                  let* α1 := M.read α0 in
                  let* α2 := M.never_to_any α1 in
                  M.alloc α2;
                fun γ => M.alloc (Value.Tuple [])
              ]
        ] in
    let* index_of_first_negative_number :=
      let* α0 :=
        M.get_trait_method
          "core::iter::traits::iterator::Iterator"
          (Ty.apply
            (Ty.path "alloc::vec::into_iter::IntoIter")
            [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ]
            [])
          []
          []
          "position"
          [ Ty.function [ Ty.tuple [ Ty.path "i32" ] ] (Ty.path "bool") ]
          [] in
      let* α1 :=
        M.get_trait_method
          "core::iter::traits::collect::IntoIterator"
          (Ty.apply
            (Ty.path "alloc::vec::Vec")
            [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ]
            [])
          []
          []
          "into_iter"
          []
          [] in
      let* α2 := M.read vec in
      let* α3 := M.call_closure α1 [ α2 ] in
      let* α4 := M.alloc α3 in
      let* α5 :=
        M.call_closure
          α0
          [
            α4;
            M.closure
              (fun γ =>
                match γ with
                | [ α0 ] =>
                  let* α0 := M.alloc α0 in
                  M.match_operator
                    α0
                    [
                      fun γ =>
                        let* x := M.copy γ in
                        let* α0 := M.read x in
                        M.pure (BinOp.Pure.lt α0 (Value.Integer Integer.I32 0))
                    ]
                | _ => M.impossible
                end)
          ] in
      M.alloc α5 in
    let* _ :=
      let* α0 := M.alloc (Value.StructTuple "core::option::Option::None" []) in
      let* α1 := M.alloc (Value.Tuple [ index_of_first_negative_number; α0 ]) in
      M.match_operator
        α1
        [
          fun γ =>
            let γ0_0 := M.get_tuple_field γ 0 in
            let γ0_1 := M.get_tuple_field γ 1 in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 := M.alloc (Value.Tuple []) in
            M.match_operator
              α0
              [
                fun γ =>
                  let* γ :=
                    let* α0 :=
                      M.get_trait_method
                        "core::cmp::PartialEq"
                        (Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ] [])
                        [ Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ] [] ]
                        [ Value.Bool true ]
                        "eq"
                        []
                        [] in
                    let* α1 := M.read left_val in
                    let* α2 := M.read right_val in
                    let* α3 := M.call_closure α0 [ α1; α2 ] in
                    let* α4 := M.alloc (UnOp.Pure.not α3) in
                    M.pure (M.use α4) in
                  let* _ :=
                    let* α0 := M.read γ in
                    M.is_constant_or_break_match α0 (Value.Bool true) in
                  let* kind := M.alloc (Value.StructTuple "core::panicking::AssertKind::Eq" []) in
                  let* α0 :=
                    M.get_function
                      "core::panicking::assert_failed"
                      [
                        Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ] [];
                        Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ] []
                      ]
                      [] in
                  let* α1 := M.read kind in
                  let* α2 := M.read left_val in
                  let* α3 := M.read right_val in
                  let* α4 :=
                    M.call_closure
                      α0
                      [ α1; α2; α3; Value.StructTuple "core::option::Option::None" [] ] in
                  let* α0 := M.alloc α4 in
                  let* α1 := M.read α0 in
                  let* α2 := M.never_to_any α1 in
                  M.alloc α2;
                fun γ => M.alloc (Value.Tuple [])
              ]
        ] in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
