(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let vec = vec![1, 9, 3, 3, 13, 2];

    // `iter()` for vecs yields `&i32` and `position()` does not take a reference, so
    // we have to destructure `&i32` to `i32`
    let index_of_first_even_number = vec.iter().position(|&x| x % 2 == 0);
    assert_eq!(index_of_first_even_number, Some(5));

    // `into_iter()` for vecs yields `i32` and `position()` does not take a reference, so
    // we do not have to destructure
    let index_of_first_negative_number = vec.into_iter().position(|x| x < 0);
    assert_eq!(index_of_first_negative_number, None);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let vec : M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((slice i32.t)::["into_vec"]
            (pointer_coercion
              "Unsize"
              (M.read (|
                M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                  (M.alloc (|
                    [
                      (Integer.of_Z 1) : i32.t;
                      (Integer.of_Z 9) : i32.t;
                      (Integer.of_Z 3) : i32.t;
                      (Integer.of_Z 3) : i32.t;
                      (Integer.of_Z 13) : i32.t;
                      (Integer.of_Z 2) : i32.t
                    ]
                  |)))
                |)
              |))))
          |)
        |) in
      let index_of_first_even_number : M.Val (core.option.Option.t usize.t) :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.iter.traits.iterator.Iterator.position
                (Self := core.slice.iter.Iter.t i32.t)
                (P := (ref i32.t) -> bool.t)
                (Trait := ℐ)))
            (borrow_mut
              (M.alloc (|
                M.call (|((slice i32.t)::["iter"]
                  (M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.ops.deref.Deref.deref
                        (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
                        (Trait := ℐ)))
                    (borrow vec))
                  |)))
                |)
              |)))
            (fun (α0 : ref i32.t) =>
              (ltac:
                (M.monadic_match_operator
                  (M.alloc (| α0 |))
                  [
                    fun γ =>
                      (let γ := deref (M.read (| γ |)) in
                      let x := M.copy (| γ |) in
                      BinOp.Pure.eq
                        (BinOp.Panic.rem (|
                          M.read (| x |),
                          (Integer.of_Z 2) : i32.t
                        |))
                        ((Integer.of_Z 0) : i32.t)) :
                      bool.t
                  ])) :
              bool.t))
          |)
        |) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            (M.alloc (|
              (borrow index_of_first_even_number,
                borrow
                  (M.alloc (|
                    core.option.Option.Some ((Integer.of_Z 5) : usize.t)
                  |)))
            |))
            [
              fun
                  (γ :
                    M.Val
                      ((ref (core.option.Option.t usize.t))
                      *
                      (ref (core.option.Option.t usize.t)))) =>
                match M.read (| γ |) with
                | (_, _) =>
                  let γ0_0 := Tuple.Access.left γ in
                  let γ0_1 := Tuple.Access.right γ in
                  let left_val := M.copy (| γ0_0 |) in
                  let right_val := M.copy (| γ0_1 |) in
                  if
                    M.read (|
                      use
                        (M.alloc (|
                          UnOp.not
                            (M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.cmp.PartialEq.eq
                                  (Self := core.option.Option.t usize.t)
                                  (Rhs := core.option.Option.t usize.t)
                                  (Trait := ℐ)))
                              (M.read (| left_val |))
                              (M.read (| right_val |)))
                            |))
                        |))
                    |)
                  then
                    M.alloc (|
                      (never_to_any (B := unit)) (|
                        M.read (|
                          let kind : M.Val core.panicking.AssertKind.t :=
                            M.alloc (| core.panicking.AssertKind.Eq |) in
                          M.alloc (|
                            M.call (|(core.panicking.assert_failed
                              (M.read (| kind |))
                              (M.read (| left_val |))
                              (M.read (| right_val |))
                              core.option.Option.None)
                            |)
                          |)
                        |)
                      |)
                    |)
                  else
                    M.alloc (| tt |)
                end :
                M.Val unit
            ]) in
      let index_of_first_negative_number :
          M.Val (core.option.Option.t usize.t) :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.iter.traits.iterator.Iterator.position
                (Self :=
                  alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
                (P := i32.t -> bool.t)
                (Trait := ℐ)))
            (borrow_mut
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
                      (Trait := ℐ)))
                  (M.read (| vec |)))
                |)
              |)))
            (fun (α0 : i32.t) =>
              (ltac:
                (M.monadic_match_operator
                  (M.alloc (| α0 |))
                  [
                    fun γ =>
                      (let x := M.copy (| γ |) in
                      BinOp.Pure.lt
                        (M.read (| x |))
                        ((Integer.of_Z 0) : i32.t)) :
                      bool.t
                  ])) :
              bool.t))
          |)
        |) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            (M.alloc (|
              (borrow index_of_first_negative_number,
                borrow (M.alloc (| core.option.Option.None |)))
            |))
            [
              fun
                  (γ :
                    M.Val
                      ((ref (core.option.Option.t usize.t))
                      *
                      (ref (core.option.Option.t usize.t)))) =>
                match M.read (| γ |) with
                | (_, _) =>
                  let γ0_0 := Tuple.Access.left γ in
                  let γ0_1 := Tuple.Access.right γ in
                  let left_val := M.copy (| γ0_0 |) in
                  let right_val := M.copy (| γ0_1 |) in
                  if
                    M.read (|
                      use
                        (M.alloc (|
                          UnOp.not
                            (M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.cmp.PartialEq.eq
                                  (Self := core.option.Option.t usize.t)
                                  (Rhs := core.option.Option.t usize.t)
                                  (Trait := ℐ)))
                              (M.read (| left_val |))
                              (M.read (| right_val |)))
                            |))
                        |))
                    |)
                  then
                    M.alloc (|
                      (never_to_any (B := unit)) (|
                        M.read (|
                          let kind : M.Val core.panicking.AssertKind.t :=
                            M.alloc (| core.panicking.AssertKind.Eq |) in
                          M.alloc (|
                            M.call (|(core.panicking.assert_failed
                              (M.read (| kind |))
                              (M.read (| left_val |))
                              (M.read (| right_val |))
                              core.option.Option.None)
                            |)
                          |)
                        |)
                      |)
                    |)
                  else
                    M.alloc (| tt |)
                end :
                M.Val unit
            ]) in
      M.alloc (| tt |)
    |)
  )).
