(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // `Vec` has non-copy semantics.
    let haystack = vec![1, 2, 3];

    let contains = move |needle| haystack.contains(needle);

    println!("{}", contains(&1));
    println!("{}", contains(&4));

    // println!("There're {} elements in vec", haystack.len());
    // ^ Uncommenting above line will result in compile-time error
    // because borrow checker doesn't allow re-using variable after it
    // has been moved.

    // Removing `move` from closure's signature will cause closure
    // to borrow _haystack_ variable immutably, hence _haystack_ is still
    // available and uncommenting above line will not cause an error.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let haystack : M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((slice i32.t)::["into_vec"]
            (pointer_coercion
              "Unsize"
              (M.read (|
                M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                  (M.alloc (|
                    [
                      (Integer.of_Z 1) : i32.t;
                      (Integer.of_Z 2) : i32.t;
                      (Integer.of_Z 3) : i32.t
                    ]
                  |)))
                |)
              |))))
          |)
        |) in
      let contains : M.Val ((ref i32.t) -> bool.t) :=
        M.alloc (|
          fun (α0 : ref i32.t) =>
            (ltac:
              (M.monadic_match_operator
                (M.alloc (| α0 |))
                [
                  fun γ =>
                    (let needle := M.copy (| γ |) in
                    M.call (|((slice i32.t)::["contains"]
                      (M.call (|(ltac:(M.get_method (fun ℐ =>
                          core.ops.deref.Deref.deref
                            (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
                            (Trait := ℐ)))
                        (borrow haystack))
                      |))
                      (M.read (| needle |)))
                    |)) :
                    bool.t
                ])) :
            bool.t
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "" |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.function.Fn.call
                                    (Self := (ref i32.t) -> bool.t)
                                    (Args := ref i32.t)
                                    (Trait := ℐ)))
                                (borrow contains)
                                (borrow
                                    (M.alloc (| (Integer.of_Z 1) : i32.t |))))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "" |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.function.Fn.call
                                    (Self := (ref i32.t) -> bool.t)
                                    (Args := ref i32.t)
                                    (Trait := ℐ)))
                                (borrow contains)
                                (borrow
                                    (M.alloc (| (Integer.of_Z 4) : i32.t |))))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
