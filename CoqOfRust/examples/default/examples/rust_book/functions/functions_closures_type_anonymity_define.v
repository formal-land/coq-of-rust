(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // `F` must be generic.
    fn apply<F>(f: F)
    where
        F: FnOnce(),
    {
        f();
    }
}
*)
Definition main (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [] => ltac:(M.monadic (Value.Tuple []))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_main :
  M.IsFunction.C "functions_closures_type_anonymity_define::main" main.
Admitted.
Global Typeclasses Opaque main.

Module main.
  (*
      fn apply<F>(f: F)
      where
          F: FnOnce(),
      {
          f();
      }
  *)
  Definition apply (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ f ] =>
      ltac:(M.monadic
        (let f := M.alloc (| f |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::ops::function::FnOnce",
                  F,
                  [],
                  [ Ty.tuple [] ],
                  "call_once",
                  [],
                  []
                |),
                [ M.read (| f |); Value.Tuple [] ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_apply :
    M.IsFunction.C "functions_closures_type_anonymity_define::main::apply" apply.
  Admitted.
  Global Typeclasses Opaque apply.
End main.
