(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn apply<F>(f: F)
where
    F: Fn(),
{
    f();
}
*)
Definition apply {F : Set} (f : F) : M unit :=
  ltac:(M.monadic ((
    let f := M.alloc (| f |) in
    M.read (|
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.ops.function.Fn.call
                (Self := F)
                (Args := unit)
                (Trait := ℐ)))
            (borrow f)
            tt)
          |)
        |) in
      M.alloc (| tt |)
    |)
  ) : unit)).

(*
fn main() {
    let x = 7;

    // Capture `x` into an anonymous type and implement
    // `Fn` for it. Store it in `print`.
    let print = || println!("{}", x);

    apply(print);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let x : M.Val i32.t := M.alloc (| (Integer.of_Z 7) : i32.t |) in
      let print : M.Val (unit -> unit) :=
        M.alloc (|
          fun (α0 : unit) =>
            (ltac:
              (M.monadic_match_operator
                (M.alloc (| α0 |))
                [
                  fun γ =>
                    (M.read (|
                      let _ : M.Val unit :=
                        M.alloc (|
                          M.call (|(std.io.stdio._print
                            (M.call (|(core.fmt.Arguments.t::["new_v1"]
                              (pointer_coercion
                                "Unsize"
                                (borrow
                                  (M.alloc (|
                                    [
                                      M.read (| mk_str "" |);
                                      M.read (| mk_str "
" |)
                                    ]
                                  |))))
                              (pointer_coercion
                                "Unsize"
                                (borrow
                                  (M.alloc (|
                                    [
                                      M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                        (borrow x))
                                      |)
                                    ]
                                  |)))))
                            |)))
                          |)
                        |) in
                      M.alloc (| tt |)
                    |)) :
                    unit
                ])) :
            unit
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(functions_closures_type_anonymity_define_and_use.apply
            (M.read (| print |)))
          |)
        |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
