(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  SomeType.
Section SomeType.
  Record t : Set := {
    x0 : u32.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End SomeType.
End SomeType.

Module  OtherType.
Section OtherType.
  Record t : Set := {
    x0 : bool.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End OtherType.
End OtherType.

Module  Impl_functions_order_SomeType_t.
Section Impl_functions_order_SomeType_t.
  Definition Self : Set := functions_order.SomeType.t.
  
  (*
      fn meth2(self) {}
  *)
  Definition meth2 (self : Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      tt
    )).
  
  Global Instance AssociatedFunction_meth2 :
    Notations.DoubleColon Self "meth2" := {
    Notations.double_colon := meth2;
  }.
  
  (*
      pub fn meth1(self) {
          self.meth2();
      }
  *)
  Definition meth1 (self : Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(functions_order.SomeType.t::["meth2"] (M.read (| self |)))
            |)
          |) in
        M.alloc (| tt |)
      |)
    )).
  
  Global Instance AssociatedFunction_meth1 :
    Notations.DoubleColon Self "meth1" := {
    Notations.double_colon := meth1;
  }.
End Impl_functions_order_SomeType_t.
End Impl_functions_order_SomeType_t.

Module  SomeTrait.
Section SomeTrait.
  Class Trait (Self : Set) : Type := {
    some_trait_foo : (ref Self) -> M unit;
    some_trait_bar : (ref Self) -> M unit;
  }.
  
End SomeTrait.
End SomeTrait.

Module  Impl_functions_order_SomeTrait_for_functions_order_SomeType_t.
Section Impl_functions_order_SomeTrait_for_functions_order_SomeType_t.
  Definition Self : Set := functions_order.SomeType.t.
  
  (*
      fn some_trait_bar(&self) {}
  *)
  Definition some_trait_bar (self : ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      tt
    )).
  
  Global Instance AssociatedFunction_some_trait_bar :
    Notations.DoubleColon Self "some_trait_bar" := {
    Notations.double_colon := some_trait_bar;
  }.
  
  (*
      fn some_trait_foo(&self) {
          self.some_trait_bar()
      }
  *)
  Definition some_trait_foo (self : ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.call (|(some_trait_bar (M.read (| self |))) |)
    )).
  
  Global Instance AssociatedFunction_some_trait_foo :
    Notations.DoubleColon Self "some_trait_foo" := {
    Notations.double_colon := some_trait_foo;
  }.
  
  Global Instance ℐ : functions_order.SomeTrait.Trait Self := {
    functions_order.SomeTrait.some_trait_bar := some_trait_bar;
    functions_order.SomeTrait.some_trait_foo := some_trait_foo;
  }.
End Impl_functions_order_SomeTrait_for_functions_order_SomeType_t.
End Impl_functions_order_SomeTrait_for_functions_order_SomeType_t.

Module  Impl_functions_order_SomeTrait_for_functions_order_OtherType_t.
Section Impl_functions_order_SomeTrait_for_functions_order_OtherType_t.
  Definition Self : Set := functions_order.OtherType.t.
  
  (*
      fn some_trait_foo(&self) {}
  *)
  Definition some_trait_foo (self : ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      tt
    )).
  
  Global Instance AssociatedFunction_some_trait_foo :
    Notations.DoubleColon Self "some_trait_foo" := {
    Notations.double_colon := some_trait_foo;
  }.
  
  (*
      fn some_trait_bar(&self) {}
  *)
  Definition some_trait_bar (self : ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      tt
    )).
  
  Global Instance AssociatedFunction_some_trait_bar :
    Notations.DoubleColon Self "some_trait_bar" := {
    Notations.double_colon := some_trait_bar;
  }.
  
  Global Instance ℐ : functions_order.SomeTrait.Trait Self := {
    functions_order.SomeTrait.some_trait_foo := some_trait_foo;
    functions_order.SomeTrait.some_trait_bar := some_trait_bar;
  }.
End Impl_functions_order_SomeTrait_for_functions_order_OtherType_t.
End Impl_functions_order_SomeTrait_for_functions_order_OtherType_t.

(*
fn depends_on_trait_impl(u: u32, b: bool) {
    OtherType(b).some_trait_foo();
    SomeType(u).some_trait_foo();
}
*)
Definition depends_on_trait_impl (u : u32.t) (b : bool.t) : M unit :=
  ltac:(M.monadic (
    let u := M.alloc (| u |) in
    let b := M.alloc (| b |) in
    M.read (|
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              functions_order.SomeTrait.some_trait_foo
                (Self := functions_order.OtherType.t)
                (Trait := ℐ)))
            (borrow
              (M.alloc (| functions_order.OtherType.Build_t (M.read (| b |))
              |))))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              functions_order.SomeTrait.some_trait_foo
                (Self := functions_order.SomeType.t)
                (Trait := ℐ)))
            (borrow
              (M.alloc (| functions_order.SomeType.Build_t (M.read (| u |))
              |))))
          |)
        |) in
      M.alloc (| tt |)
    |)
  )).

Module inner_mod.
  (*
      fn tar() {}
  *)
  Definition tar : M unit := ltac:(M.monadic ( tt )).
  
  (*
      pub fn bar() {
          // functions_order::inner_mod::bar
          tar();
      }
  *)
  Definition bar : M unit :=
    ltac:(M.monadic (
      M.read (|
        let _ : M.Val unit :=
          M.alloc (| M.call (|functions_order.inner_mod.tar |) |) in
        M.alloc (| tt |)
      |)
    )).
  
  Module nested_mod.
    (*
            fn tack() {}
    *)
    Definition tack : M unit := ltac:(M.monadic ( tt )).
    
    (*
            pub fn tick() {
                tack();
            }
    *)
    Definition tick : M unit :=
      ltac:(M.monadic (
        M.read (|
          let _ : M.Val unit :=
            M.alloc (| M.call (|functions_order.inner_mod.nested_mod.tack |)
            |) in
          M.alloc (| tt |)
        |)
      )).
  End nested_mod.
End inner_mod.

(*
fn foo() {}
*)
Definition foo : M unit := ltac:(M.monadic ( tt )).

(*
fn main() {
    // functions_order::main
    foo();
    inner_mod::bar();
    SomeType(0).meth1();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let _ : M.Val unit := M.alloc (| M.call (|functions_order.foo |) |) in
      let _ : M.Val unit :=
        M.alloc (| M.call (|functions_order.inner_mod.bar |) |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(functions_order.SomeType.t::["meth1"]
            (functions_order.SomeType.Build_t ((Integer.of_Z 0) : u32.t)))
          |)
        |) in
      M.alloc (| tt |)
    |)
  )).
