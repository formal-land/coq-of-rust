(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn is_odd(n: u32) -> bool {
    n % 2 == 1
}
*)
Definition is_odd (n : u32.t) : M bool.t :=
  ltac:(M.monadic (
    let n := M.alloc (| n |) in
    BinOp.Pure.eq
      (BinOp.Panic.rem (| M.read (| n |), (Integer.of_Z 2) : u32.t |))
      ((Integer.of_Z 1) : u32.t)
  )).

(*
fn main() {
    println!("Find the sum of all the squared odd numbers under 1000");
    let upper = 1000;

    // Imperative approach
    // Declare accumulator variable
    let mut acc = 0;
    // Iterate: 0, 1, 2, ... to infinity
    for n in 0.. {
        // Square the number
        let n_squared = n * n;

        if n_squared >= upper {
            // Break loop if exceeded the upper limit
            break;
        } else if is_odd(n_squared) {
            // Accumulate value, if it's odd
            acc += n_squared;
        }
    }
    println!("imperative style: {}", acc);

    // Functional approach
    let sum_of_squared_odd_numbers: u32 = (0..)
        .map(|n| n * n) // All natural numbers squared
        .take_while(|&n_squared| n_squared < upper) // Below upper limit
        .filter(|&n_squared| is_odd(n_squared)) // That are odd
        .sum(); // Sum them
    println!("functional style: {}", sum_of_squared_odd_numbers);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (|
                          mk_str
                            "Find the sum of all the squared odd numbers under 1000
"
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let upper : M.Val u32.t := M.alloc (| (Integer.of_Z 1000) : u32.t |) in
      let acc : M.Val u32.t := M.alloc (| (Integer.of_Z 0) : u32.t |) in
      let _ : M.Val unit :=
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self := core.ops.range.RangeFrom.t u32.t)
                      (Trait := ℐ)))
                  {| core.ops.range.RangeFrom.start := (Integer.of_Z 0) : u32.t;
                  |} : core.ops.range.RangeFrom.t u32.t)
                |)
              |))
              [
                fun (γ : M.Val (core.ops.range.RangeFrom.t u32.t)) =>
                  (let iter := M.copy (| γ |) in
                  M.loop
                    (let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self := core.ops.range.RangeFrom.t u32.t)
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun (γ : M.Val (core.option.Option.t u32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  never_to_any (| M.read (| M.break |) |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun (γ : M.Val (core.option.Option.t u32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                let n := M.copy (| γ0_0 |) in
                                let n_squared : M.Val u32.t :=
                                  M.alloc (|
                                    BinOp.Panic.mul (|
                                      M.read (| n |),
                                      M.read (| n |)
                                    |)
                                  |) in
                                if
                                  M.read (|
                                    use
                                      (M.alloc (|
                                        BinOp.Pure.ge
                                          (M.read (| n_squared |))
                                          (M.read (| upper |))
                                      |))
                                  |)
                                then
                                  M.alloc (|
                                    never_to_any (| M.read (| M.break |) |)
                                  |)
                                else
                                  if
                                    M.read (|
                                      use
                                        (M.alloc (|
                                          M.call (|(higher_order_functions.is_odd
                                            (M.read (| n_squared |)))
                                          |)
                                        |))
                                    |)
                                  then
                                    let _ : M.Val unit :=
                                      let β : M.Val u32.t := acc in
                                      assign (|
                                        β,
                                        BinOp.Panic.add (|
                                          M.read (| β |),
                                          M.read (| n_squared |)
                                        |)
                                      |) in
                                    M.alloc (| tt |)
                                  else
                                    M.alloc (| tt |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |))) :
                  M.Val unit
              ])) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "imperative style: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow acc))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let sum_of_squared_odd_numbers : M.Val u32.t :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.iter.traits.iterator.Iterator.sum
                (Self :=
                  core.iter.adapters.filter.Filter.t
                    (core.iter.adapters.take_while.TakeWhile.t
                      (core.iter.adapters.map.Map.t
                        (core.ops.range.RangeFrom.t u32.t)
                        (u32.t -> u32.t))
                      ((ref u32.t) -> bool.t))
                    ((ref u32.t) -> bool.t))
                (S := u32.t)
                (Trait := ℐ)))
            (M.call (|(ltac:(M.get_method (fun ℐ =>
                core.iter.traits.iterator.Iterator.filter
                  (Self :=
                    core.iter.adapters.take_while.TakeWhile.t
                      (core.iter.adapters.map.Map.t
                        (core.ops.range.RangeFrom.t u32.t)
                        (u32.t -> u32.t))
                      ((ref u32.t) -> bool.t))
                  (P := (ref u32.t) -> bool.t)
                  (Trait := ℐ)))
              (M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.iter.traits.iterator.Iterator.take_while
                    (Self :=
                      core.iter.adapters.map.Map.t
                        (core.ops.range.RangeFrom.t u32.t)
                        (u32.t -> u32.t))
                    (P := (ref u32.t) -> bool.t)
                    (Trait := ℐ)))
                (M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.iterator.Iterator.map
                      (Self := core.ops.range.RangeFrom.t u32.t)
                      (B := u32.t)
                      (F := u32.t -> u32.t)
                      (Trait := ℐ)))
                  {| core.ops.range.RangeFrom.start := (Integer.of_Z 0) : u32.t;
                  |} : core.ops.range.RangeFrom.t u32.t
                  (fun (α0 : u32.t) =>
                    (ltac:
                      (M.monadic_match_operator
                        (M.alloc (| α0 |))
                        [
                          fun γ =>
                            (let n := M.copy (| γ |) in
                            BinOp.Panic.mul (| M.read (| n |), M.read (| n |)
                            |)) :
                            u32.t
                        ])) :
                    u32.t))
                |))
                (fun (α0 : ref u32.t) =>
                  (ltac:
                    (M.monadic_match_operator
                      (M.alloc (| α0 |))
                      [
                        fun γ =>
                          (let γ := deref (M.read (| γ |)) in
                          let n_squared := M.copy (| γ |) in
                          BinOp.Pure.lt
                            (M.read (| n_squared |))
                            (M.read (| upper |))) :
                          bool.t
                      ])) :
                  bool.t))
              |))
              (fun (α0 : ref u32.t) =>
                (ltac:
                  (M.monadic_match_operator
                    (M.alloc (| α0 |))
                    [
                      fun γ =>
                        (let γ := deref (M.read (| γ |)) in
                        let n_squared := M.copy (| γ |) in
                        M.call (|(higher_order_functions.is_odd
                          (M.read (| n_squared |)))
                        |)) :
                        bool.t
                    ])) :
                bool.t))
            |)))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "functional style: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow sum_of_squared_odd_numbers))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
