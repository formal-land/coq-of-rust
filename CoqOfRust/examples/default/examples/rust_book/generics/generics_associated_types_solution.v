(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Container.
Section Container.
  Record t : Set := {
    x0 : i32.t;
    x1 : i32.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
  Definition Get_1 :=
    Ref.map (fun α => Some α.(x1)) (fun β α => Some (α <| x1 := β |>)).
End Container.
End Container.

Module  Contains.
Section Contains.
  Class Trait (Self : Set) : Type := {
    A : Set;
    B : Set;
    contains : (ref Self) -> (ref A.t) -> (ref B.t) -> M bool.t;
    first : (ref Self) -> M i32.t;
    last : (ref Self) -> M i32.t;
    a : (ref Self) -> M A.t;
  }.
  
  Global Instance Method_A `(Trait) : Notations.DoubleColonType Self "A" := {
    Notations.double_colon_type := A;
  }.
  Global Instance Method_B `(Trait) : Notations.DoubleColonType Self "B" := {
    Notations.double_colon_type := B;
  }.
End Contains.
End Contains.

Module  Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container_t.
Section Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container_t.
  Definition Self : Set := generics_associated_types_solution.Container.t.
  
  (*
      type A = i32;
  *)
  Definition A : Set := i32.t.
  
  (*
      type B = i32;
  *)
  Definition B : Set := i32.t.
  
  (*
      fn contains(&self, number_1: &i32, number_2: &i32) -> bool {
          (&self.0 == number_1) && (&self.1 == number_2)
      }
  *)
  Definition contains
      (self : ref Self)
      (number_1 : ref i32.t)
      (number_2 : ref i32.t)
      : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let number_1 := M.alloc (| number_1 |) in
      let number_2 := M.alloc (| number_2 |) in
      BinOp.Pure.and
        (M.call (|(ltac:(M.get_method (fun ℐ =>
            core.cmp.PartialEq.eq
              (Self := ref i32.t)
              (Rhs := ref i32.t)
              (Trait := ℐ)))
          (borrow
            (M.alloc (|
              borrow
                (generics_associated_types_solution.Container.Get_0
                  (deref (M.read (| self |))))
            |)))
          (borrow number_1))
        |))
        (M.call (|(ltac:(M.get_method (fun ℐ =>
            core.cmp.PartialEq.eq
              (Self := ref i32.t)
              (Rhs := ref i32.t)
              (Trait := ℐ)))
          (borrow
            (M.alloc (|
              borrow
                (generics_associated_types_solution.Container.Get_1
                  (deref (M.read (| self |))))
            |)))
          (borrow number_2))
        |))
    )).
  
  Global Instance AssociatedFunction_contains :
    Notations.DoubleColon Self "contains" := {
    Notations.double_colon := contains;
  }.
  
  (*
      fn first(&self) -> i32 {
          self.0
      }
  *)
  Definition first (self : ref Self) : M i32.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        generics_associated_types_solution.Container.Get_0
          (deref (M.read (| self |)))
      |)
    )).
  
  Global Instance AssociatedFunction_first :
    Notations.DoubleColon Self "first" := {
    Notations.double_colon := first;
  }.
  
  (*
      fn last(&self) -> i32 {
          self.1
      }
  *)
  Definition last (self : ref Self) : M i32.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        generics_associated_types_solution.Container.Get_1
          (deref (M.read (| self |)))
      |)
    )).
  
  Global Instance AssociatedFunction_last :
    Notations.DoubleColon Self "last" := {
    Notations.double_colon := last;
  }.
  
  (*
      fn a(&self) -> i32 {
          self.0
      }
  *)
  Definition a (self : ref Self) : M i32.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        generics_associated_types_solution.Container.Get_0
          (deref (M.read (| self |)))
      |)
    )).
  
  Global Instance AssociatedFunction_a : Notations.DoubleColon Self "a" := {
    Notations.double_colon := a;
  }.
  
  Global Instance ℐ :
    generics_associated_types_solution.Contains.Trait Self := {
    generics_associated_types_solution.Contains.A := A;
    generics_associated_types_solution.Contains.B := B;
    generics_associated_types_solution.Contains.contains := contains;
    generics_associated_types_solution.Contains.first := first;
    generics_associated_types_solution.Contains.last := last;
    generics_associated_types_solution.Contains.a := a;
  }.
End Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container_t.
End Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container_t.

(*
fn difference<C: Contains>(container: &C) -> i32 {
    container.last() - container.first()
}
*)
Definition difference {C : Set} (container : ref C) : M i32.t :=
  ltac:(M.monadic (
    let container := M.alloc (| container |) in
    BinOp.Panic.sub (|
      M.call (|(ltac:(M.get_method (fun ℐ =>
          generics_associated_types_solution.Contains.last
            (Self := C)
            (Trait := ℐ)))
        (M.read (| container |)))
      |),
      M.call (|(ltac:(M.get_method (fun ℐ =>
          generics_associated_types_solution.Contains.first
            (Self := C)
            (Trait := ℐ)))
        (M.read (| container |)))
      |)
    |)
  )).

(*
fn get_a<C: Contains>(container: &C) -> C::A {
    container.a()
}
*)
Definition get_a {C : Set} (container : ref C) : M C::type["A"].t :=
  ltac:(M.monadic (
    let container := M.alloc (| container |) in
    M.call (|(ltac:(M.get_method (fun ℐ =>
        generics_associated_types_solution.Contains.a (Self := C) (Trait := ℐ)))
      (M.read (| container |)))
    |)
  )).

(*
fn main() {
    let number_1 = 3;
    let number_2 = 10;

    let container = Container(number_1, number_2);

    println!(
        "Does container contain {} and {}: {}",
        &number_1,
        &number_2,
        container.contains(&number_1, &number_2)
    );
    println!("First number: {}", container.first());
    println!("Last number: {}", container.last());

    println!("The difference is: {}", difference(&container));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let number_1 : M.Val i32.t := M.alloc (| (Integer.of_Z 3) : i32.t |) in
      let number_2 : M.Val i32.t := M.alloc (| (Integer.of_Z 10) : i32.t |) in
      let container : M.Val generics_associated_types_solution.Container.t :=
        M.alloc (|
          generics_associated_types_solution.Container.Build_t
            (M.read (| number_1 |))
            (M.read (| number_2 |))
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Does container contain " |);
                        M.read (| mk_str " and " |);
                        M.read (| mk_str ": " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow (M.alloc (| borrow number_1 |))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow (M.alloc (| borrow number_2 |))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  generics_associated_types_solution.Contains.contains
                                    (Self :=
                                      generics_associated_types_solution.Container.t)
                                    (Trait := ℐ)))
                                (borrow container)
                                (borrow number_1)
                                (borrow number_2))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "First number: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  generics_associated_types_solution.Contains.first
                                    (Self :=
                                      generics_associated_types_solution.Container.t)
                                    (Trait := ℐ)))
                                (borrow container))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Last number: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  generics_associated_types_solution.Contains.last
                                    (Self :=
                                      generics_associated_types_solution.Container.t)
                                    (Trait := ℐ)))
                                (borrow container))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "The difference is: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(generics_associated_types_solution.difference
                                (borrow container))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
