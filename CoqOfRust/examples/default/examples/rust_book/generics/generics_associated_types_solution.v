(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Container.
Section Container.
  Record t : Set := {
    x0 : i32.t;
    x1 : i32.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
  Definition Get_1 :=
    Ref.map (fun α => Some α.(x1)) (fun β α => Some (α <| x1 := β |>)).
End Container.
End Container.

Module  Contains.
Section Contains.
  Class Trait (Self : Set) : Type := {
    A : Set;
    B : Set;
    contains : (ref Self) -> (ref A.t) -> (ref B.t) -> M bool.t;
    first : (ref Self) -> M i32.t;
    last : (ref Self) -> M i32.t;
    a : (ref Self) -> M A.t;
  }.
  
  Global Instance Method_A `(Trait) : Notations.DoubleColonType Self "A" := {
    Notations.double_colon_type := A;
  }.
  Global Instance Method_B `(Trait) : Notations.DoubleColonType Self "B" := {
    Notations.double_colon_type := B;
  }.
End Contains.
End Contains.

Module  Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container_t.
Section Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container_t.
  Definition Self : Set := generics_associated_types_solution.Container.t.
  
  (*
      type A = i32;
  *)
  Definition A : Set := i32.t.
  
  (*
      type B = i32;
  *)
  Definition B : Set := i32.t.
  
  (*
      fn contains(&self, number_1: &i32, number_2: &i32) -> bool {
          (&self.0 == number_1) && (&self.1 == number_2)
      }
  *)
  Definition contains
      (self : ref Self)
      (number_1 : ref i32.t)
      (number_2 : ref i32.t)
      : M bool.t :=
    let* self := M.alloc self in
    let* number_1 := M.alloc number_1 in
    let* number_2 := M.alloc number_2 in
    let* α0 : (ref (ref i32.t)) -> (ref (ref i32.t)) -> M bool.t :=
      ltac:(M.get_method (fun ℐ =>
        core.cmp.PartialEq.eq
          (Self := ref i32.t)
          (Rhs := ref i32.t)
          (Trait := ℐ))) in
    let* α1 : ref generics_associated_types_solution.Container.t :=
      M.read self in
    let* α2 : M.Val (ref i32.t) :=
      M.alloc
        (borrow
          (generics_associated_types_solution.Container.Get_0 (deref α1))) in
    let* α3 : bool.t := M.call (α0 (borrow α2) (borrow number_1)) in
    let* α4 : (ref (ref i32.t)) -> (ref (ref i32.t)) -> M bool.t :=
      ltac:(M.get_method (fun ℐ =>
        core.cmp.PartialEq.eq
          (Self := ref i32.t)
          (Rhs := ref i32.t)
          (Trait := ℐ))) in
    let* α5 : ref generics_associated_types_solution.Container.t :=
      M.read self in
    let* α6 : M.Val (ref i32.t) :=
      M.alloc
        (borrow
          (generics_associated_types_solution.Container.Get_1 (deref α5))) in
    let* α7 : bool.t := M.call (α4 (borrow α6) (borrow number_2)) in
    M.pure (BinOp.Pure.and α3 α7).
  
  Global Instance AssociatedFunction_contains :
    Notations.DoubleColon Self "contains" := {
    Notations.double_colon := contains;
  }.
  
  (*
      fn first(&self) -> i32 {
          self.0
      }
  *)
  Definition first (self : ref Self) : M i32.t :=
    let* self := M.alloc self in
    let* α0 : ref generics_associated_types_solution.Container.t :=
      M.read self in
    M.read (generics_associated_types_solution.Container.Get_0 (deref α0)).
  
  Global Instance AssociatedFunction_first :
    Notations.DoubleColon Self "first" := {
    Notations.double_colon := first;
  }.
  
  (*
      fn last(&self) -> i32 {
          self.1
      }
  *)
  Definition last (self : ref Self) : M i32.t :=
    let* self := M.alloc self in
    let* α0 : ref generics_associated_types_solution.Container.t :=
      M.read self in
    M.read (generics_associated_types_solution.Container.Get_1 (deref α0)).
  
  Global Instance AssociatedFunction_last :
    Notations.DoubleColon Self "last" := {
    Notations.double_colon := last;
  }.
  
  (*
      fn a(&self) -> i32 {
          self.0
      }
  *)
  Definition a (self : ref Self) : M i32.t :=
    let* self := M.alloc self in
    let* α0 : ref generics_associated_types_solution.Container.t :=
      M.read self in
    M.read (generics_associated_types_solution.Container.Get_0 (deref α0)).
  
  Global Instance AssociatedFunction_a : Notations.DoubleColon Self "a" := {
    Notations.double_colon := a;
  }.
  
  Global Instance ℐ :
    generics_associated_types_solution.Contains.Trait Self := {
    generics_associated_types_solution.Contains.A := A;
    generics_associated_types_solution.Contains.B := B;
    generics_associated_types_solution.Contains.contains := contains;
    generics_associated_types_solution.Contains.first := first;
    generics_associated_types_solution.Contains.last := last;
    generics_associated_types_solution.Contains.a := a;
  }.
End Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container_t.
End Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container_t.

(*
fn difference<C: Contains>(container: &C) -> i32 {
    container.last() - container.first()
}
*)
Definition difference {C : Set} (container : ref C) : M i32.t :=
  let* container := M.alloc container in
  let* α0 : (ref C) -> M i32.t :=
    ltac:(M.get_method (fun ℐ =>
      generics_associated_types_solution.Contains.last
        (Self := C)
        (Trait := ℐ))) in
  let* α1 : ref C := M.read container in
  let* α2 : i32.t := M.call (α0 α1) in
  let* α3 : (ref C) -> M i32.t :=
    ltac:(M.get_method (fun ℐ =>
      generics_associated_types_solution.Contains.first
        (Self := C)
        (Trait := ℐ))) in
  let* α4 : ref C := M.read container in
  let* α5 : i32.t := M.call (α3 α4) in
  BinOp.Panic.sub α2 α5.

(*
fn get_a<C: Contains>(container: &C) -> C::A {
    container.a()
}
*)
Definition get_a {C : Set} (container : ref C) : M C::type["A"].t :=
  let* container := M.alloc container in
  let* α0 : (ref C) -> M _ :=
    ltac:(M.get_method (fun ℐ =>
      generics_associated_types_solution.Contains.a
        (Self := C)
        (Trait := ℐ))) in
  let* α1 : ref C := M.read container in
  M.call (α0 α1).

(*
fn main() {
    let number_1 = 3;
    let number_2 = 10;

    let container = Container(number_1, number_2);

    println!(
        "Does container contain {} and {}: {}",
        &number_1,
        &number_2,
        container.contains(&number_1, &number_2)
    );
    println!("First number: {}", container.first());
    println!("Last number: {}", container.last());

    println!("The difference is: {}", difference(&container));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* number_1 : M.Val i32.t := M.alloc ((Integer.of_Z 3) : i32.t) in
  let* number_2 : M.Val i32.t := M.alloc ((Integer.of_Z 10) : i32.t) in
  let* container : M.Val generics_associated_types_solution.Container.t :=
    let* α0 : i32.t := M.read number_1 in
    let* α1 : i32.t := M.read number_2 in
    M.alloc (generics_associated_types_solution.Container.Build_t α0 α1) in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "Does container contain ") in
      let* α1 : ref str.t := M.read (mk_str " and ") in
      let* α2 : ref str.t := M.read (mk_str ": ") in
      let* α3 : ref str.t := M.read (mk_str "
") in
      let* α4 : M.Val (array (ref str.t)) := M.alloc [ α0; α1; α2; α3 ] in
      let* α5 : M.Val (ref i32.t) := M.alloc (borrow number_1) in
      let* α6 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_display"] (borrow α5)) in
      let* α7 : M.Val (ref i32.t) := M.alloc (borrow number_2) in
      let* α8 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_display"] (borrow α7)) in
      let* α9 :
          (ref generics_associated_types_solution.Container.t) ->
            (ref _) ->
            (ref _) ->
            M bool.t :=
        ltac:(M.get_method (fun ℐ =>
          generics_associated_types_solution.Contains.contains
            (Self := generics_associated_types_solution.Container.t)
            (Trait := ℐ))) in
      let* α10 : bool.t :=
        M.call (α9 (borrow container) (borrow number_1) (borrow number_2)) in
      let* α11 : M.Val bool.t := M.alloc α10 in
      let* α12 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_display"] (borrow α11)) in
      let* α13 : M.Val (array core.fmt.rt.Argument.t) :=
        M.alloc [ α6; α8; α12 ] in
      let* α14 : core.fmt.Arguments.t :=
        M.call
          (core.fmt.Arguments.t::["new_v1"]
            (pointer_coercion "Unsize" (borrow α4))
            (pointer_coercion "Unsize" (borrow α13))) in
      let* α15 : unit := M.call (std.io.stdio._print α14) in
      M.alloc α15 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "First number: ") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 :
          (ref generics_associated_types_solution.Container.t) -> M i32.t :=
        ltac:(M.get_method (fun ℐ =>
          generics_associated_types_solution.Contains.first
            (Self := generics_associated_types_solution.Container.t)
            (Trait := ℐ))) in
      let* α4 : i32.t := M.call (α3 (borrow container)) in
      let* α5 : M.Val i32.t := M.alloc α4 in
      let* α6 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_display"] (borrow α5)) in
      let* α7 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α6 ] in
      let* α8 : core.fmt.Arguments.t :=
        M.call
          (core.fmt.Arguments.t::["new_v1"]
            (pointer_coercion "Unsize" (borrow α2))
            (pointer_coercion "Unsize" (borrow α7))) in
      let* α9 : unit := M.call (std.io.stdio._print α8) in
      M.alloc α9 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "Last number: ") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 :
          (ref generics_associated_types_solution.Container.t) -> M i32.t :=
        ltac:(M.get_method (fun ℐ =>
          generics_associated_types_solution.Contains.last
            (Self := generics_associated_types_solution.Container.t)
            (Trait := ℐ))) in
      let* α4 : i32.t := M.call (α3 (borrow container)) in
      let* α5 : M.Val i32.t := M.alloc α4 in
      let* α6 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_display"] (borrow α5)) in
      let* α7 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α6 ] in
      let* α8 : core.fmt.Arguments.t :=
        M.call
          (core.fmt.Arguments.t::["new_v1"]
            (pointer_coercion "Unsize" (borrow α2))
            (pointer_coercion "Unsize" (borrow α7))) in
      let* α9 : unit := M.call (std.io.stdio._print α8) in
      M.alloc α9 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "The difference is: ") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 : i32.t :=
        M.call
          (generics_associated_types_solution.difference (borrow container)) in
      let* α4 : M.Val i32.t := M.alloc α3 in
      let* α5 : core.fmt.rt.Argument.t :=
        M.call (core.fmt.rt.Argument.t::["new_display"] (borrow α4)) in
      let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
      let* α7 : core.fmt.Arguments.t :=
        M.call
          (core.fmt.Arguments.t::["new_v1"]
            (pointer_coercion "Unsize" (borrow α2))
            (pointer_coercion "Unsize" (borrow α6))) in
      let* α8 : unit := M.call (std.io.stdio._print α7) in
      M.alloc α8 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
