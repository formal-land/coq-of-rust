(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  HasArea.
Section HasArea.
  Class Trait (Self : Set) : Type := {
    area : (ref Self) -> M f64.t;
  }.
  
End HasArea.
End HasArea.

Module  Rectangle.
Section Rectangle.
  Record t : Set := {
    length : f64.t;
    height : f64.t;
  }.
  
  Definition Get_length :=
    Ref.map (fun α => Some α.(length)) (fun β α => Some (α <| length := β |>)).
  Definition Get_height :=
    Ref.map (fun α => Some α.(height)) (fun β α => Some (α <| height := β |>)).
End Rectangle.
End Rectangle.

Module  Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.
Section Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.
  Definition Self : Set := generics_bounds.Rectangle.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["debug_struct_field2_finish"]
        (M.read (| f |))
        (M.read (| mk_str "Rectangle" |))
        (M.read (| mk_str "length" |))
        (pointer_coercion
          "Unsize"
          (borrow
            (generics_bounds.Rectangle.Get_length (deref (M.read (| self |))))))
        (M.read (| mk_str "height" |))
        (pointer_coercion
          "Unsize"
          (borrow
            (M.alloc (|
              borrow
                (generics_bounds.Rectangle.Get_height
                  (deref (M.read (| self |))))
            |)))))
      |)
    ) : ltac:(core.fmt.Result))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle_t.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module  Triangle.
Section Triangle.
  Record t : Set := {
    length : f64.t;
    height : f64.t;
  }.
  
  Definition Get_length :=
    Ref.map (fun α => Some α.(length)) (fun β α => Some (α <| length := β |>)).
  Definition Get_height :=
    Ref.map (fun α => Some α.(height)) (fun β α => Some (α <| height := β |>)).
End Triangle.
End Triangle.

Module  Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.
Section Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.
  Definition Self : Set := generics_bounds.Rectangle.t.
  
  (*
      fn area(&self) -> f64 {
          self.length * self.height
      }
  *)
  Definition area (self : ref Self) : M f64.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      BinOp.Panic.mul (|
        M.read (|
          generics_bounds.Rectangle.Get_length (deref (M.read (| self |)))
        |),
        M.read (|
          generics_bounds.Rectangle.Get_height (deref (M.read (| self |)))
        |)
      |)
    ) : f64.t)).
  
  Global Instance AssociatedFunction_area :
    Notations.DoubleColon Self "area" := {
    Notations.double_colon := area;
  }.
  
  Global Instance ℐ : generics_bounds.HasArea.Trait Self := {
    generics_bounds.HasArea.area := area;
  }.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle_t.

(*
fn print_debug<T: Debug>(t: &T) {
    println!("{:?}", t);
}
*)
Definition print_debug {T : Set} (t : ref T) : M unit :=
  ltac:(M.monadic ((
    let t := M.alloc (| t |) in
    M.read (|
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "" |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow t))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).

(*
fn area<T: HasArea>(t: &T) -> f64 {
    t.area()
}
*)
Definition area {T : Set} (t : ref T) : M f64.t :=
  ltac:(M.monadic ((
    let t := M.alloc (| t |) in
    M.call (|(ltac:(M.get_method (fun ℐ =>
        generics_bounds.HasArea.area (Self := T) (Trait := ℐ)))
      (M.read (| t |)))
    |)
  ) : f64.t)).

(*
fn main() {
    let rectangle = Rectangle {
        length: 3.0,
        height: 4.0,
    };
    let _triangle = Triangle {
        length: 3.0,
        height: 4.0,
    };

    print_debug(&rectangle);
    println!("Area: {}", rectangle.area());

    //print_debug(&_triangle);
    //println!("Area: {}", _triangle.area());
    // ^ TODO: Try uncommenting these.
    // | Error: Does not implement either `Debug` or `HasArea`.
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let rectangle : M.Val generics_bounds.Rectangle.t :=
        M.alloc (|
          {|
            generics_bounds.Rectangle.length :=
              M.read (| UnsupportedLiteral : M.Val f64.t |);
            generics_bounds.Rectangle.height :=
              M.read (| UnsupportedLiteral : M.Val f64.t |);
          |} : generics_bounds.Rectangle.t
        |) in
      let _triangle : M.Val generics_bounds.Triangle.t :=
        M.alloc (|
          {|
            generics_bounds.Triangle.length :=
              M.read (| UnsupportedLiteral : M.Val f64.t |);
            generics_bounds.Triangle.height :=
              M.read (| UnsupportedLiteral : M.Val f64.t |);
          |} : generics_bounds.Triangle.t
        |) in
      let _ : M.Val unit :=
        M.alloc (| M.call (|(generics_bounds.print_debug (borrow rectangle)) |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "Area: " |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  generics_bounds.HasArea.area
                                    (Self := generics_bounds.Rectangle.t)
                                    (Trait := ℐ)))
                                (borrow rectangle))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
