(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  A.
Section A.
  Inductive t : Set := Build.
End A.
End A.

Module  S.
Section S.
  Record t : Set := {
    x0 : generics_functions.A.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End S.
End S.

Module  SGen.
Section SGen.
  Context {T : Set}.
  
  Record t : Set := {
    x0 : T;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End SGen.
End SGen.

(*
fn reg_fn(_s: S) {}
*)
Definition reg_fn (_s : generics_functions.S.t) : M unit :=
  ltac:(M.monadic (
    let _s := M.alloc (| _s |) in
    tt
  )).

(*
fn gen_spec_t(_s: SGen<A>) {}
*)
Definition gen_spec_t
    (_s : generics_functions.SGen.t generics_functions.A.t)
    : M unit :=
  ltac:(M.monadic (
    let _s := M.alloc (| _s |) in
    tt
  )).

(*
fn gen_spec_i32(_s: SGen<i32>) {}
*)
Definition gen_spec_i32 (_s : generics_functions.SGen.t i32.t) : M unit :=
  ltac:(M.monadic (
    let _s := M.alloc (| _s |) in
    tt
  )).

(*
fn generic<T>(_s: SGen<T>) {}
*)
Definition generic {T : Set} (_s : generics_functions.SGen.t T) : M unit :=
  ltac:(M.monadic (
    let _s := M.alloc (| _s |) in
    tt
  )).

(*
fn main() {
    // Using the non-generic functions
    reg_fn(S(A)); // Concrete type.
    gen_spec_t(SGen(A)); // Implicitly specified type parameter `A`.
    gen_spec_i32(SGen(6)); // Implicitly specified type parameter `i32`.

    // Explicitly specified type parameter `char` to `generic()`.
    generic::<char>(SGen('a'));

    // Implicitly specified type parameter `char` to `generic()`.
    generic(SGen('c'));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(generics_functions.reg_fn
            (generics_functions.S.Build_t generics_functions.A.Build))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(generics_functions.gen_spec_t
            (generics_functions.SGen.Build_t generics_functions.A.Build))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(generics_functions.gen_spec_i32
            (generics_functions.SGen.Build_t ((Integer.of_Z 6) : i32.t)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(generics_functions.generic
            (generics_functions.SGen.Build_t "a"%char))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(generics_functions.generic
            (generics_functions.SGen.Build_t "c"%char))
          |)
        |) in
      M.alloc (| tt |)
    |)
  )).
