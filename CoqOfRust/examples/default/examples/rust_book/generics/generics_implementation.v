(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Val.
Section Val.
  Record t : Set := {
    val : f64.t;
  }.
  
  Definition Get_val :=
    Ref.map (fun α => Some α.(val)) (fun β α => Some (α <| val := β |>)).
End Val.
End Val.

Module  GenVal.
Section GenVal.
  Context (T : Set).
  
  Record t : Set := {
    gen_val : T;
  }.
  
  Definition Get_gen_val :=
    Ref.map
      (fun α => Some α.(gen_val))
      (fun β α => Some (α <| gen_val := β |>)).
End GenVal.
End GenVal.

Module  Impl_generics_implementation_Val_t.
Section Impl_generics_implementation_Val_t.
  Definition Self : Set := generics_implementation.Val.t.
  
  (*
      fn value(&self) -> &f64 {
          &self.val
      }
  *)
  Definition value (self : ref Self) : M (ref f64.t) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      borrow (generics_implementation.Val.Get_val (deref (M.read (| self |))))
    )).
  
  Global Instance AssociatedFunction_value :
    Notations.DoubleColon Self "value" := {
    Notations.double_colon := value;
  }.
End Impl_generics_implementation_Val_t.
End Impl_generics_implementation_Val_t.

Module  Impl_generics_implementation_GenVal_t_T.
Section Impl_generics_implementation_GenVal_t_T.
  Context {T : Set}.
  
  Definition Self : Set := generics_implementation.GenVal.t T.
  
  (*
      fn value(&self) -> &T {
          &self.gen_val
      }
  *)
  Definition value (self : ref Self) : M (ref T) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      borrow
        (generics_implementation.GenVal.Get_gen_val (deref (M.read (| self |))))
    )).
  
  Global Instance AssociatedFunction_value :
    Notations.DoubleColon Self "value" := {
    Notations.double_colon := value;
  }.
End Impl_generics_implementation_GenVal_t_T.
End Impl_generics_implementation_GenVal_t_T.

(*
fn main() {
    let x = Val { val: 3.0 };
    let y = GenVal { gen_val: 3i32 };

    println!("{}, {}", x.value(), y.value());
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let x : M.Val generics_implementation.Val.t :=
        M.alloc (|
          {|
            generics_implementation.Val.val :=
              M.read (| UnsupportedLiteral : M.Val f64.t |);
          |}
        |) in
      let y : M.Val (generics_implementation.GenVal.t i32.t) :=
        M.alloc (|
          {| generics_implementation.GenVal.gen_val := (Integer.of_Z 3) : i32.t;
          |}
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "" |);
                        M.read (| mk_str ", " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(generics_implementation.Val.t::["value"]
                                (borrow x))
                              |)
                            |))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|((generics_implementation.GenVal.t
                                    i32.t)::["value"]
                                (borrow y))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
