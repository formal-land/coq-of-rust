(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Years.
Section Years.
  Record t : Set := {
    x0 : i64.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End Years.
End Years.

Module  Days.
Section Days.
  Record t : Set := {
    x0 : i64.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End Days.
End Days.

Module  Impl_generics_new_type_idiom_Years_t.
Section Impl_generics_new_type_idiom_Years_t.
  Definition Self : Set := generics_new_type_idiom.Years.t.
  
  (*
      pub fn to_days(&self) -> Days {
          Days(self.0 * 365)
      }
  *)
  Definition to_days (self : ref Self) : M generics_new_type_idiom.Days.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      generics_new_type_idiom.Days.Build_t
        (BinOp.Panic.mul (|
          M.read (|
            generics_new_type_idiom.Years.Get_0 (deref (M.read (| self |)))
          |),
          (Integer.of_Z 365) : i64.t
        |))
    ) : generics_new_type_idiom.Days.t)).
  
  Global Instance AssociatedFunction_to_days :
    Notations.DoubleColon Self "to_days" := {
    Notations.double_colon := to_days;
  }.
End Impl_generics_new_type_idiom_Years_t.
End Impl_generics_new_type_idiom_Years_t.

Module  Impl_generics_new_type_idiom_Days_t.
Section Impl_generics_new_type_idiom_Days_t.
  Definition Self : Set := generics_new_type_idiom.Days.t.
  
  (*
      pub fn to_years(&self) -> Years {
          Years(self.0 / 365)
      }
  *)
  Definition to_years (self : ref Self) : M generics_new_type_idiom.Years.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      generics_new_type_idiom.Years.Build_t
        (BinOp.Panic.div (|
          M.read (|
            generics_new_type_idiom.Days.Get_0 (deref (M.read (| self |)))
          |),
          (Integer.of_Z 365) : i64.t
        |))
    ) : generics_new_type_idiom.Years.t)).
  
  Global Instance AssociatedFunction_to_years :
    Notations.DoubleColon Self "to_years" := {
    Notations.double_colon := to_years;
  }.
End Impl_generics_new_type_idiom_Days_t.
End Impl_generics_new_type_idiom_Days_t.

(*
fn old_enough(age: &Years) -> bool {
    age.0 >= 18
}
*)
Definition old_enough (age : ref generics_new_type_idiom.Years.t) : M bool.t :=
  ltac:(M.monadic ((
    let age := M.alloc (| age |) in
    BinOp.Pure.ge
      (M.read (| generics_new_type_idiom.Years.Get_0 (deref (M.read (| age |)))
      |))
      ((Integer.of_Z 18) : i64.t)
  ) : bool.t)).

(*
fn main() {
    let age = Years(5);
    let age_days = age.to_days();
    println!("Old enough {}", old_enough(&age));
    println!("Old enough {}", old_enough(&age_days.to_years()));
    // println!("Old enough {}", old_enough(&age_days));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let age : M.Val generics_new_type_idiom.Years.t :=
        M.alloc (|
          generics_new_type_idiom.Years.Build_t ((Integer.of_Z 5) : i64.t)
        |) in
      let age_days : M.Val generics_new_type_idiom.Days.t :=
        M.alloc (|
          M.call (|(generics_new_type_idiom.Years.t::["to_days"] (borrow age))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Old enough " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(generics_new_type_idiom.old_enough
                                (borrow age))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Old enough " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(generics_new_type_idiom.old_enough
                                (borrow
                                  (M.alloc (|
                                    M.call (|(generics_new_type_idiom.Days.t::["to_years"]
                                      (borrow age_days))
                                    |)
                                  |))))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
