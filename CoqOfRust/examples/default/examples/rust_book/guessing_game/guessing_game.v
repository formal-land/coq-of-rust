(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn gen_range() -> u32 {
    todo!()
}
*)
Definition gen_range : M u32.t :=
  ltac:(M.monadic (
    never_to_any (|
      M.call (|(core.panicking.panic
        (M.read (| mk_str "not yet implemented" |)))
      |)
    |)
  )).

(*
fn main() {
    println!("Guess the number!");
    let secret_number = gen_range();
    // println!("The secret number is: {secret_number}");
    loop {
        println!("Please input your guess.");

        let mut guess = String::new();

        io::stdin()
            .read_line(&mut guess)
            .expect("Failed to read line");

        // shadowing previous var {guess}.
        // We do shadowing when we want to convert var from one type to another
        let guess: u32 = match guess.trim().parse() {
            Ok(num) => num,
            Err(_) => continue,
        };

        println!("You guessed: {guess}");

        match guess.cmp(&secret_number) {
            Ordering::Less => println!("Too small!"),
            Ordering::Greater => println!("Too big!"),
            Ordering::Equal => {
                println!("You win!");
                break;
            }
        }
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (| [ M.read (| mk_str "Guess the number!
" |) ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let secret_number : M.Val u32.t :=
        M.alloc (| M.call (|guessing_game.gen_range |) |) in
      M.loop
        (let _ : M.Val unit :=
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(std.io.stdio._print
                (M.call (|(core.fmt.Arguments.t::["new_const"]
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [ M.read (| mk_str "Please input your guess.
" |) ]
                      |)))))
                |)))
              |)
            |) in
          M.alloc (| tt |) in
        let guess : M.Val alloc.string.String.t :=
          M.alloc (| M.call (|alloc.string.String.t::["new"] |) |) in
        let _ : M.Val usize.t :=
          M.alloc (|
            M.call (|((core.result.Result.t
                  usize.t
                  std.io.error.Error.t)::["expect"]
              (M.call (|(std.io.stdio.Stdin.t::["read_line"]
                (borrow (M.alloc (| M.call (|std.io.stdio.stdin |) |)))
                (borrow_mut guess))
              |))
              (M.read (| mk_str "Failed to read line" |)))
            |)
          |) in
        let guess : M.Val u32.t :=
          M.copy (|
            ltac:
              (M.monadic_match_operator
                (M.alloc (|
                  M.call (|(str.t::["parse"]
                    (M.call (|(str.t::["trim"]
                      (M.call (|(ltac:(M.get_method (fun ℐ =>
                          core.ops.deref.Deref.deref
                            (Self := alloc.string.String.t)
                            (Trait := ℐ)))
                        (borrow guess))
                      |)))
                    |)))
                  |)
                |))
                [
                  fun
                      (γ :
                        M.Val
                          (core.result.Result.t
                            u32.t
                            core.num.error.ParseIntError.t)) =>
                    match M.read (| γ |) with
                    | core.result.Result.Ok _ =>
                      let γ0_0 := core.result.Result.Get_Ok_0 γ in
                      let num := M.copy (| γ0_0 |) in
                      num
                    | _ => M.break_match(||)
                    end :
                    M.Val u32.t;
                  fun
                      (γ :
                        M.Val
                          (core.result.Result.t
                            u32.t
                            core.num.error.ParseIntError.t)) =>
                    match M.read (| γ |) with
                    | core.result.Result.Err _ =>
                      let γ0_0 := core.result.Result.Get_Err_0 γ in
                      M.alloc (| never_to_any (| M.read (| M.continue |) |) |)
                    | _ => M.break_match(||)
                    end :
                    M.Val u32.t
                ])
          |) in
        let _ : M.Val unit :=
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(std.io.stdio._print
                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.read (| mk_str "You guessed: " |);
                          M.read (| mk_str "
" |)
                        ]
                      |))))
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.call (|(core.fmt.rt.Argument.t::["new_display"]
                            (borrow guess))
                          |)
                        ]
                      |)))))
                |)))
              |)
            |) in
          M.alloc (| tt |) in
        ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.cmp.Ord.cmp (Self := u32.t) (Trait := ℐ)))
                (borrow guess)
                (borrow secret_number))
              |)
            |))
            [
              fun (γ : M.Val core.cmp.Ordering.t) =>
                match M.read (| γ |) with
                | core.cmp.Ordering.Less =>
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_const"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (| [ M.read (| mk_str "Too small!
" |) ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |)
                | _ => M.break_match(||)
                end :
                M.Val unit;
              fun (γ : M.Val core.cmp.Ordering.t) =>
                match M.read (| γ |) with
                | core.cmp.Ordering.Greater =>
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_const"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (| [ M.read (| mk_str "Too big!
" |) ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |)
                | _ => M.break_match(||)
                end :
                M.Val unit;
              fun (γ : M.Val core.cmp.Ordering.t) =>
                match M.read (| γ |) with
                | core.cmp.Ordering.Equal =>
                  M.alloc (|
                    never_to_any (|
                      M.read (|
                        let _ : M.Val unit :=
                          let _ : M.Val unit :=
                            M.alloc (|
                              M.call (|(std.io.stdio._print
                                (M.call (|(core.fmt.Arguments.t::["new_const"]
                                  (pointer_coercion
                                    "Unsize"
                                    (borrow
                                      (M.alloc (|
                                        [ M.read (| mk_str "You win!
" |) ]
                                      |)))))
                                |)))
                              |)
                            |) in
                          M.alloc (| tt |) in
                        M.break
                      |)
                    |)
                  |)
                | _ => M.break_match(||)
                end :
                M.Val unit
            ]))
    |)
  )).
