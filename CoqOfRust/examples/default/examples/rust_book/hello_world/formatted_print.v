(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // In general, the `{}` will be automatically replaced with any
    // arguments. These will be stringified.
    println!("{} days", 31);

    // Positional arguments can be used. Specifying an integer inside `{}`
    // determines which additional argument will be replaced. Arguments start
    // at 0 immediately after the format string
    println!("{0}, this is {1}. {1}, this is {0}", "Alice", "Bob");

    // As can named arguments.
    println!(
        "{subject} {verb} {object}",
        object = "the lazy dog",
        subject = "the quick brown fox",
        verb = "jumps over"
    );

    // Different formatting can be invoked by specifying the format character after a
    // `:`.
    println!("Base 10:               {}", 69420); //69420
    println!("Base 2 (binary):       {:b}", 69420); //10000111100101100
    println!("Base 8 (octal):        {:o}", 69420); //207454
    println!("Base 16 (hexadecimal): {:x}", 69420); //10f2c
    println!("Base 16 (hexadecimal): {:X}", 69420); //10F2C

    // You can right-justify text with a specified width. This will
    // output "    1". (Four white spaces and a "1", for a total width of 5.)
    println!("{number:>5}", number = 1);

    // You can pad numbers with extra zeroes,
    //and left-adjust by flipping the sign. This will output "10000".
    println!("{number:0<5}", number = 1);

    // You can use named arguments in the format specifier by appending a `$`
    println!("{number:0>width$}", number = 1, width = 5);

    // Rust even checks to make sure the correct number of arguments are
    // used.
    println!("My name is {0}, {1} {0}", "Bond", "James");
    // FIXME ^ Add the missing argument: "James"

    // Only types that implement fmt::Display can be formatted with `{}`. User-
    // defined types do not implement fmt::Display by default

    #[allow(dead_code)]
    struct Structure(i32);

    // This will not compile because `Structure` does not implement
    // fmt::Display
    //println!("This struct `{}` won't print...", Structure(3));
    // TODO ^ Try uncommenting this line

    // For Rust 1.58 and above, you can directly capture the argument from a
    // surrounding variable. Just like the above, this will output
    // "    1". 4 white spaces and a "1".
    let number: f64 = 1.0;
    let width: usize = 5;
    println!("{number:>width$}");
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α4 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "31 days
") in
            let* α3 := M.alloc (Value.Array [ α2 ]) in
            M.pure (M.pointer_coercion α3) in
        let* α8 :=
          (* Unsize *)
            let* α5 := M.get_associated_function (Ty.path "core::fmt::rt::Argument") "none" [] [] in
            let* α6 := M.call_closure α5 [] in
            let* α7 := M.alloc α6 in
            M.pure (M.pointer_coercion α7) in
        let* α9 := M.call_closure α1 [ α4; α8 ] in
        let* α10 := M.call_closure α0 [ α9 ] in
        M.alloc α10 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α4 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "Alice, this is Bob. Bob, this is Alice
") in
            let* α3 := M.alloc (Value.Array [ α2 ]) in
            M.pure (M.pointer_coercion α3) in
        let* α8 :=
          (* Unsize *)
            let* α5 := M.get_associated_function (Ty.path "core::fmt::rt::Argument") "none" [] [] in
            let* α6 := M.call_closure α5 [] in
            let* α7 := M.alloc α6 in
            M.pure (M.pointer_coercion α7) in
        let* α9 := M.call_closure α1 [ α4; α8 ] in
        let* α10 := M.call_closure α0 [ α9 ] in
        M.alloc α10 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α4 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "the quick brown fox jumps over the lazy dog
") in
            let* α3 := M.alloc (Value.Array [ α2 ]) in
            M.pure (M.pointer_coercion α3) in
        let* α8 :=
          (* Unsize *)
            let* α5 := M.get_associated_function (Ty.path "core::fmt::rt::Argument") "none" [] [] in
            let* α6 := M.call_closure α5 [] in
            let* α7 := M.alloc α6 in
            M.pure (M.pointer_coercion α7) in
        let* α9 := M.call_closure α1 [ α4; α8 ] in
        let* α10 := M.call_closure α0 [ α9 ] in
        M.alloc α10 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α4 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "Base 10:               69420
") in
            let* α3 := M.alloc (Value.Array [ α2 ]) in
            M.pure (M.pointer_coercion α3) in
        let* α8 :=
          (* Unsize *)
            let* α5 := M.get_associated_function (Ty.path "core::fmt::rt::Argument") "none" [] [] in
            let* α6 := M.call_closure α5 [] in
            let* α7 := M.alloc α6 in
            M.pure (M.pointer_coercion α7) in
        let* α9 := M.call_closure α1 [ α4; α8 ] in
        let* α10 := M.call_closure α0 [ α9 ] in
        M.alloc α10 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α5 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "Base 2 (binary):       ") in
            let* α3 := M.read (mk_str "
") in
            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
            M.pure (M.pointer_coercion α4) in
        let* α10 :=
          (* Unsize *)
            let* α6 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_binary"
                [ Ty.path "i32" ]
                [] in
            let* α7 := M.alloc (Value.Integer Integer.I32 69420) in
            let* α8 := M.call_closure α6 [ α7 ] in
            let* α9 := M.alloc (Value.Array [ α8 ]) in
            M.pure (M.pointer_coercion α9) in
        let* α11 := M.call_closure α1 [ α5; α10 ] in
        let* α12 := M.call_closure α0 [ α11 ] in
        M.alloc α12 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α5 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "Base 8 (octal):        ") in
            let* α3 := M.read (mk_str "
") in
            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
            M.pure (M.pointer_coercion α4) in
        let* α10 :=
          (* Unsize *)
            let* α6 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_octal"
                [ Ty.path "i32" ]
                [] in
            let* α7 := M.alloc (Value.Integer Integer.I32 69420) in
            let* α8 := M.call_closure α6 [ α7 ] in
            let* α9 := M.alloc (Value.Array [ α8 ]) in
            M.pure (M.pointer_coercion α9) in
        let* α11 := M.call_closure α1 [ α5; α10 ] in
        let* α12 := M.call_closure α0 [ α11 ] in
        M.alloc α12 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α5 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "Base 16 (hexadecimal): ") in
            let* α3 := M.read (mk_str "
") in
            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
            M.pure (M.pointer_coercion α4) in
        let* α10 :=
          (* Unsize *)
            let* α6 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_lower_hex"
                [ Ty.path "i32" ]
                [] in
            let* α7 := M.alloc (Value.Integer Integer.I32 69420) in
            let* α8 := M.call_closure α6 [ α7 ] in
            let* α9 := M.alloc (Value.Array [ α8 ]) in
            M.pure (M.pointer_coercion α9) in
        let* α11 := M.call_closure α1 [ α5; α10 ] in
        let* α12 := M.call_closure α0 [ α11 ] in
        M.alloc α12 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α5 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "Base 16 (hexadecimal): ") in
            let* α3 := M.read (mk_str "
") in
            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
            M.pure (M.pointer_coercion α4) in
        let* α10 :=
          (* Unsize *)
            let* α6 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_upper_hex"
                [ Ty.path "i32" ]
                [] in
            let* α7 := M.alloc (Value.Integer Integer.I32 69420) in
            let* α8 := M.call_closure α6 [ α7 ] in
            let* α9 := M.alloc (Value.Array [ α8 ]) in
            M.pure (M.pointer_coercion α9) in
        let* α11 := M.call_closure α1 [ α5; α10 ] in
        let* α12 := M.call_closure α0 [ α11 ] in
        M.alloc α12 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1_formatted" [] [] in
        let* α5 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "") in
            let* α3 := M.read (mk_str "
") in
            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
            M.pure (M.pointer_coercion α4) in
        let* α10 :=
          (* Unsize *)
            let* α6 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_display"
                [ Ty.path "i32" ]
                [] in
            let* α7 := M.alloc (Value.Integer Integer.I32 1) in
            let* α8 := M.call_closure α6 [ α7 ] in
            let* α9 := M.alloc (Value.Array [ α8 ]) in
            M.pure (M.pointer_coercion α9) in
        let* α14 :=
          (* Unsize *)
            let* α11 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Placeholder")
                "new"
                []
                [ Value.Bool true ] in
            let* α12 :=
              M.call_closure
                α11
                [
                  Value.Integer Integer.Usize 0;
                  Value.UnicodeChar 32;
                  Value.StructTuple "core::fmt::rt::Alignment::Right" [];
                  Value.Integer Integer.U32 0;
                  Value.StructTuple "core::fmt::rt::Count::Implied" [];
                  Value.StructTuple "core::fmt::rt::Count::Is" [ Value.Integer Integer.Usize 5 ]
                ] in
            let* α13 := M.alloc (Value.Array [ α12 ]) in
            M.pure (M.pointer_coercion α13) in
        let* α15 := M.get_associated_function (Ty.path "core::fmt::rt::UnsafeArg") "new" [] [] in
        let* α16 := M.call_closure α15 [] in
        let* α17 := M.call_closure α1 [ α5; α10; α14; α16 ] in
        let* α18 := M.call_closure α0 [ α17 ] in
        M.alloc α18 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1_formatted" [] [] in
        let* α5 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "") in
            let* α3 := M.read (mk_str "
") in
            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
            M.pure (M.pointer_coercion α4) in
        let* α10 :=
          (* Unsize *)
            let* α6 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_display"
                [ Ty.path "i32" ]
                [] in
            let* α7 := M.alloc (Value.Integer Integer.I32 1) in
            let* α8 := M.call_closure α6 [ α7 ] in
            let* α9 := M.alloc (Value.Array [ α8 ]) in
            M.pure (M.pointer_coercion α9) in
        let* α14 :=
          (* Unsize *)
            let* α11 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Placeholder")
                "new"
                []
                [ Value.Bool true ] in
            let* α12 :=
              M.call_closure
                α11
                [
                  Value.Integer Integer.Usize 0;
                  Value.UnicodeChar 48;
                  Value.StructTuple "core::fmt::rt::Alignment::Left" [];
                  Value.Integer Integer.U32 0;
                  Value.StructTuple "core::fmt::rt::Count::Implied" [];
                  Value.StructTuple "core::fmt::rt::Count::Is" [ Value.Integer Integer.Usize 5 ]
                ] in
            let* α13 := M.alloc (Value.Array [ α12 ]) in
            M.pure (M.pointer_coercion α13) in
        let* α15 := M.get_associated_function (Ty.path "core::fmt::rt::UnsafeArg") "new" [] [] in
        let* α16 := M.call_closure α15 [] in
        let* α17 := M.call_closure α1 [ α5; α10; α14; α16 ] in
        let* α18 := M.call_closure α0 [ α17 ] in
        M.alloc α18 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1_formatted" [] [] in
        let* α5 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "") in
            let* α3 := M.read (mk_str "
") in
            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
            M.pure (M.pointer_coercion α4) in
        let* α13 :=
          (* Unsize *)
            let* α6 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_display"
                [ Ty.path "i32" ]
                [] in
            let* α7 := M.alloc (Value.Integer Integer.I32 1) in
            let* α8 := M.call_closure α6 [ α7 ] in
            let* α9 :=
              M.get_associated_function (Ty.path "core::fmt::rt::Argument") "from_usize" [] [] in
            let* α10 := M.alloc (Value.Integer Integer.Usize 5) in
            let* α11 := M.call_closure α9 [ α10 ] in
            let* α12 := M.alloc (Value.Array [ α8; α11 ]) in
            M.pure (M.pointer_coercion α12) in
        let* α17 :=
          (* Unsize *)
            let* α14 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Placeholder")
                "new"
                []
                [ Value.Bool true ] in
            let* α15 :=
              M.call_closure
                α14
                [
                  Value.Integer Integer.Usize 0;
                  Value.UnicodeChar 48;
                  Value.StructTuple "core::fmt::rt::Alignment::Right" [];
                  Value.Integer Integer.U32 0;
                  Value.StructTuple "core::fmt::rt::Count::Implied" [];
                  Value.StructTuple "core::fmt::rt::Count::Param" [ Value.Integer Integer.Usize 1 ]
                ] in
            let* α16 := M.alloc (Value.Array [ α15 ]) in
            M.pure (M.pointer_coercion α16) in
        let* α18 := M.get_associated_function (Ty.path "core::fmt::rt::UnsafeArg") "new" [] [] in
        let* α19 := M.call_closure α18 [] in
        let* α20 := M.call_closure α1 [ α5; α13; α17; α19 ] in
        let* α21 := M.call_closure α0 [ α20 ] in
        M.alloc α21 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α4 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "My name is Bond, James Bond
") in
            let* α3 := M.alloc (Value.Array [ α2 ]) in
            M.pure (M.pointer_coercion α3) in
        let* α8 :=
          (* Unsize *)
            let* α5 := M.get_associated_function (Ty.path "core::fmt::rt::Argument") "none" [] [] in
            let* α6 := M.call_closure α5 [] in
            let* α7 := M.alloc α6 in
            M.pure (M.pointer_coercion α7) in
        let* α9 := M.call_closure α1 [ α4; α8 ] in
        let* α10 := M.call_closure α0 [ α9 ] in
        M.alloc α10 in
      M.alloc (Value.Tuple []) in
    let* number := M.copy UnsupportedLiteral in
    let* width := M.alloc (Value.Integer Integer.Usize 5) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 :=
          M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1_formatted" [] [] in
        let* α5 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "") in
            let* α3 := M.read (mk_str "
") in
            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
            M.pure (M.pointer_coercion α4) in
        let* α11 :=
          (* Unsize *)
            let* α6 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_display"
                [ Ty.path "f64" ]
                [] in
            let* α7 := M.call_closure α6 [ number ] in
            let* α8 :=
              M.get_associated_function (Ty.path "core::fmt::rt::Argument") "from_usize" [] [] in
            let* α9 := M.call_closure α8 [ width ] in
            let* α10 := M.alloc (Value.Array [ α7; α9 ]) in
            M.pure (M.pointer_coercion α10) in
        let* α15 :=
          (* Unsize *)
            let* α12 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Placeholder")
                "new"
                []
                [ Value.Bool true ] in
            let* α13 :=
              M.call_closure
                α12
                [
                  Value.Integer Integer.Usize 0;
                  Value.UnicodeChar 32;
                  Value.StructTuple "core::fmt::rt::Alignment::Right" [];
                  Value.Integer Integer.U32 0;
                  Value.StructTuple "core::fmt::rt::Count::Implied" [];
                  Value.StructTuple "core::fmt::rt::Count::Param" [ Value.Integer Integer.Usize 1 ]
                ] in
            let* α14 := M.alloc (Value.Array [ α13 ]) in
            M.pure (M.pointer_coercion α14) in
        let* α16 := M.get_associated_function (Ty.path "core::fmt::rt::UnsafeArg") "new" [] [] in
        let* α17 := M.call_closure α16 [] in
        let* α18 := M.call_closure α1 [ α5; α11; α15; α17 ] in
        let* α19 := M.call_closure α0 [ α18 ] in
        M.alloc α19 in
      M.alloc (Value.Tuple []) in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.

Module main.
  (* StructTuple
    {
      name := "Structure";
      ty_params := [];
      fields := [ Ty.path "i32" ];
    } *)
End main.
