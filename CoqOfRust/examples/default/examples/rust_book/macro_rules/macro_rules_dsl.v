(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    calculate! {
        eval 1 + 2 // hehehe `eval` is _not_ a Rust keyword!
    }

    calculate! {
        eval (1 + 2) * (3 / 4)
    }
}
*)
Definition main (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [] =>
    ltac:(M.monadic
      (M.read (|
        let _ :=
          let val :=
            M.alloc (|
              BinOp.Panic.add (|
                Integer.Usize,
                M.of_value (| Value.Integer 1 |),
                M.of_value (| Value.Integer 2 |)
              |)
            |) in
          let _ :=
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (| "std::io::stdio::_print", [] |),
                  [
                    M.call_closure (|
                      M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                      [
                        (* Unsize *)
                        M.pointer_coercion (|
                          M.alloc (|
                            M.of_value (|
                              Value.Array
                                [
                                  A.to_value
                                    (M.read (| M.of_value (| Value.String "1 + 2 = " |) |));
                                  A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                                ]
                            |)
                          |)
                        |);
                        (* Unsize *)
                        M.pointer_coercion (|
                          M.alloc (|
                            M.of_value (|
                              Value.Array
                                [
                                  A.to_value
                                    (M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::rt::Argument",
                                        "new_display",
                                        [ Ty.path "usize" ]
                                      |),
                                      [ val ]
                                    |))
                                ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (| M.of_value (| Value.Tuple [] |) |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let val :=
          M.alloc (|
            BinOp.Panic.mul (|
              Integer.Usize,
              BinOp.Panic.add (|
                Integer.Usize,
                M.of_value (| Value.Integer 1 |),
                M.of_value (| Value.Integer 2 |)
              |),
              BinOp.Panic.div (|
                Integer.Usize,
                M.of_value (| Value.Integer 3 |),
                M.of_value (| Value.Integer 4 |)
              |)
            |)
          |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (|
                                    M.of_value (| Value.String "(1 + 2) * (3 / 4) = " |)
                                  |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_display",
                                      [ Ty.path "usize" ]
                                    |),
                                    [ val ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        M.alloc (| M.of_value (| Value.Tuple [] |) |)
      |)))
  | _, _ => M.impossible
  end.
