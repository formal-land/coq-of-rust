(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    test!(1i32 + 1 == 2i32; and 2i32 * 2 == 4i32);
    test!(true; or false);
}
*)
Definition main (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [] =>
    ltac:(M.monadic
      (M.read (|
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value (M.read (| M.of_value (| Value.String "" |) |));
                                A.to_value (M.read (| M.of_value (| Value.String " and " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String " is " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_debug",
                                      [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
                                    |),
                                    [ M.of_value (| Value.String "1i32 + 1 == 2i32" |) ]
                                  |));
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_debug",
                                      [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
                                    |),
                                    [ M.of_value (| Value.String "2i32 * 2 == 4i32" |) ]
                                  |));
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_debug",
                                      [ Ty.path "bool" ]
                                    |),
                                    [
                                      M.alloc (|
                                        LogicalOp.and (|
                                          BinOp.Pure.eq (|
                                            BinOp.Panic.add (|
                                              Integer.I32,
                                              M.of_value (| Value.Integer 1 |),
                                              M.of_value (| Value.Integer 1 |)
                                            |),
                                            M.of_value (| Value.Integer 2 |)
                                          |),
                                          ltac:(M.monadic
                                            (BinOp.Pure.eq (|
                                              BinOp.Panic.mul (|
                                                Integer.I32,
                                                M.of_value (| Value.Integer 2 |),
                                                M.of_value (| Value.Integer 2 |)
                                              |),
                                              M.of_value (| Value.Integer 4 |)
                                            |)))
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value (M.read (| M.of_value (| Value.String "" |) |));
                                A.to_value (M.read (| M.of_value (| Value.String " or " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String " is " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_debug",
                                      [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
                                    |),
                                    [ M.of_value (| Value.String "true" |) ]
                                  |));
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_debug",
                                      [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
                                    |),
                                    [ M.of_value (| Value.String "false" |) ]
                                  |));
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_debug",
                                      [ Ty.path "bool" ]
                                    |),
                                    [
                                      M.alloc (|
                                        LogicalOp.or (|
                                          M.of_value (| Value.Bool true |),
                                          ltac:(M.monadic (M.of_value (| Value.Bool false |)))
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        M.alloc (| M.of_value (| Value.Tuple [] |) |)
      |)))
  | _, _ => M.impossible
  end.
