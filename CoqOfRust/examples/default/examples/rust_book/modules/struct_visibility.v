(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module my.
  Module  OpenBox.
  Section OpenBox.
    Context (T : Set).
    
    Record t : Set := {
      contents : T;
    }.
    
    Definition Get_contents :=
      Ref.map
        (fun α => Some α.(contents))
        (fun β α => Some (α <| contents := β |>)).
  End OpenBox.
  End OpenBox.
  
  Module  ClosedBox.
  Section ClosedBox.
    Context (T : Set).
    
    Record t : Set := {
      contents : T;
    }.
    
    Definition Get_contents :=
      Ref.map
        (fun α => Some α.(contents))
        (fun β α => Some (α <| contents := β |>)).
  End ClosedBox.
  End ClosedBox.
  
  Module  Impl_struct_visibility_my_ClosedBox_t_T.
  Section Impl_struct_visibility_my_ClosedBox_t_T.
    Context {T : Set}.
    
    Definition Self : Set := struct_visibility.my.ClosedBox.t T.
    
    (*
            pub fn new(contents: T) -> ClosedBox<T> {
                ClosedBox { contents: contents }
            }
    *)
    Definition new (contents : T) : M (struct_visibility.my.ClosedBox.t T) :=
      ltac:(M.monadic (
        let contents := M.alloc (| contents |) in
        {| struct_visibility.my.ClosedBox.contents := M.read (| contents |);
        |} : struct_visibility.my.ClosedBox.t T
      )).
    
    Global Instance AssociatedFunction_new :
      Notations.DoubleColon Self "new" := {
      Notations.double_colon := new;
    }.
  End Impl_struct_visibility_my_ClosedBox_t_T.
  End Impl_struct_visibility_my_ClosedBox_t_T.
End my.

(*
fn main() {
    // Public structs with public fields can be constructed as usual
    let open_box = my::OpenBox {
        contents: "public information",
    };

    // and their fields can be normally accessed.
    println!("The open box contains: {}", open_box.contents);

    // Public structs with private fields cannot be constructed using field names.
    // Error! `ClosedBox` has private fields
    //let closed_box = my::ClosedBox { contents: "classified information" };
    // TODO ^ Try uncommenting this line

    // However, structs with private fields can be created using
    // public constructors
    let _closed_box = my::ClosedBox::new("classified information");

    // and the private fields of a public struct cannot be accessed.
    // Error! The `contents` field is private
    //println!("The closed box contains: {}", _closed_box.contents);
    // TODO ^ Try uncommenting this line
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let open_box : M.Val (struct_visibility.my.OpenBox.t (ref str.t)) :=
        M.alloc (|
          {|
            struct_visibility.my.OpenBox.contents :=
              M.read (| mk_str "public information" |);
          |} : struct_visibility.my.OpenBox.t (ref str.t)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "The open box contains: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (struct_visibility.my.OpenBox.Get_contents
                              open_box)))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _closed_box : M.Val (struct_visibility.my.ClosedBox.t (ref str.t)) :=
        M.alloc (|
          M.call (|((struct_visibility.my.ClosedBox.t (ref str.t))::["new"]
            (M.read (| mk_str "classified information" |)))
          |)
        |) in
      M.alloc (| tt |)
    |)
  )).
