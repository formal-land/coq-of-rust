(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn function() {
    println!("called `function()`");
}
*)
Definition function (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "core::fmt::Arguments")
            "new_const"
            []
            [ Value.Bool true ] in
        let* α4 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "called `function()`
") in
            let* α3 := M.alloc (Value.Array [ α2 ]) in
            M.pure (M.pointer_coercion α3) in
        let* α5 := M.call_closure α1 [ α4 ] in
        let* α6 := M.call_closure α0 [ α5 ] in
        M.alloc α6 in
      M.alloc (Value.Tuple []) in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.

Module cool.
  (*
      pub fn function() {
          println!("called `cool::function()`");
      }
  *)
  Definition function (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] [] in
          let* α1 :=
            M.get_associated_function
              (Ty.path "core::fmt::Arguments")
              "new_const"
              []
              [ Value.Bool true ] in
          let* α4 :=
            (* Unsize *)
              let* α2 := M.read (mk_str "called `cool::function()`
") in
              let* α3 := M.alloc (Value.Array [ α2 ]) in
              M.pure (M.pointer_coercion α3) in
          let* α5 := M.call_closure α1 [ α4 ] in
          let* α6 := M.call_closure α0 [ α5 ] in
          M.alloc α6 in
        M.alloc (Value.Tuple []) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
End cool.

Module my.
  (*
      fn function() {
          println!("called `my::function()`");
      }
  *)
  Definition function (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] [] in
          let* α1 :=
            M.get_associated_function
              (Ty.path "core::fmt::Arguments")
              "new_const"
              []
              [ Value.Bool true ] in
          let* α4 :=
            (* Unsize *)
              let* α2 := M.read (mk_str "called `my::function()`
") in
              let* α3 := M.alloc (Value.Array [ α2 ]) in
              M.pure (M.pointer_coercion α3) in
          let* α5 := M.call_closure α1 [ α4 ] in
          let* α6 := M.call_closure α0 [ α5 ] in
          M.alloc α6 in
        M.alloc (Value.Tuple []) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Module cool.
    (*
            pub fn function() {
                println!("called `my::cool::function()`");
            }
    *)
    Definition function (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] =>
        let* _ :=
          let* _ :=
            let* α0 := M.get_function "std::io::stdio::_print" [] [] in
            let* α1 :=
              M.get_associated_function
                (Ty.path "core::fmt::Arguments")
                "new_const"
                []
                [ Value.Bool true ] in
            let* α4 :=
              (* Unsize *)
                let* α2 := M.read (mk_str "called `my::cool::function()`
") in
                let* α3 := M.alloc (Value.Array [ α2 ]) in
                M.pure (M.pointer_coercion α3) in
            let* α5 := M.call_closure α1 [ α4 ] in
            let* α6 := M.call_closure α0 [ α5 ] in
            M.alloc α6 in
          M.alloc (Value.Tuple []) in
        let* α0 := M.alloc (Value.Tuple []) in
        M.read α0
      | _, _ => M.impossible
      end.
  End cool.
  
  (*
      pub fn indirect_call() {
          // Let's access all the functions named `function` from this scope!
          print!("called `my::indirect_call()`, that\n> ");
  
          // The `self` keyword refers to the current module scope - in this case `my`.
          // Calling `self::function()` and calling `function()` directly both give
          // the same result, because they refer to the same function.
          self::function();
          function();
  
          // We can also use `self` to access another module inside `my`:
          self::cool::function();
  
          // The `super` keyword refers to the parent scope (outside the `my` module).
          super::function();
  
          // This will bind to the `cool::function` in the *crate* scope.
          // In this case the crate scope is the outermost scope.
          {
              use crate::cool::function as root_function;
              root_function();
          }
      }
  *)
  Definition indirect_call (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] [] in
          let* α1 :=
            M.get_associated_function
              (Ty.path "core::fmt::Arguments")
              "new_const"
              []
              [ Value.Bool true ] in
          let* α4 :=
            (* Unsize *)
              let* α2 := M.read (mk_str "called `my::indirect_call()`, that
> ") in
              let* α3 := M.alloc (Value.Array [ α2 ]) in
              M.pure (M.pointer_coercion α3) in
          let* α5 := M.call_closure α1 [ α4 ] in
          let* α6 := M.call_closure α0 [ α5 ] in
          M.alloc α6 in
        M.alloc (Value.Tuple []) in
      let* _ :=
        let* α0 := M.get_function "super_and_self::my::function" [] [] in
        let* α1 := M.call_closure α0 [] in
        M.alloc α1 in
      let* _ :=
        let* α0 := M.get_function "super_and_self::my::function" [] [] in
        let* α1 := M.call_closure α0 [] in
        M.alloc α1 in
      let* _ :=
        let* α0 := M.get_function "super_and_self::my::cool::function" [] [] in
        let* α1 := M.call_closure α0 [] in
        M.alloc α1 in
      let* _ :=
        let* α0 := M.get_function "super_and_self::function" [] [] in
        let* α1 := M.call_closure α0 [] in
        M.alloc α1 in
      let* _ :=
        let* α0 := M.get_function "super_and_self::cool::function" [] [] in
        let* α1 := M.call_closure α0 [] in
        M.alloc α1 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
End my.

(*
fn main() {
    my::indirect_call();
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* _ :=
      let* α0 := M.get_function "super_and_self::my::indirect_call" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.alloc α1 in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
