(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn function() {
    println!("called `function()`");
}
*)
Definition function (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "core::fmt::Arguments")
            "new_const"
            []
            [ Value.Bool true ] in
        let* α4 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "called `function()`
") in
            let* α3 := M.alloc (Value.Array [ α2 ]) in
            M.pure (M.pointer_coercion α3) in
        let* α5 := M.call_closure α1 [ α4 ] in
        let* α6 := M.call_closure α0 [ α5 ] in
        M.alloc α6 in
      M.alloc (Value.Tuple []) in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.

Module deeply.
  Module nested.
    (*
            pub fn function() {
                println!("called `deeply::nested::function()`");
            }
    *)
    Definition function (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] =>
        let* _ :=
          let* _ :=
            let* α0 := M.get_function "std::io::stdio::_print" [] [] in
            let* α1 :=
              M.get_associated_function
                (Ty.path "core::fmt::Arguments")
                "new_const"
                []
                [ Value.Bool true ] in
            let* α4 :=
              (* Unsize *)
                let* α2 := M.read (mk_str "called `deeply::nested::function()`
") in
                let* α3 := M.alloc (Value.Array [ α2 ]) in
                M.pure (M.pointer_coercion α3) in
            let* α5 := M.call_closure α1 [ α4 ] in
            let* α6 := M.call_closure α0 [ α5 ] in
            M.alloc α6 in
          M.alloc (Value.Tuple []) in
        let* α0 := M.alloc (Value.Tuple []) in
        M.read α0
      | _, _ => M.impossible
      end.
  End nested.
End deeply.

(*
fn main() {
    // Easier access to `deeply::nested::function`
    other_function();

    println!("Entering block");
    {
        // This is equivalent to `use deeply::nested::function as function`.
        // This `function()` will shadow the outer one.
        use crate::deeply::nested::function;

        // `use` bindings have a local scope. In this case, the
        // shadowing of `function()` is only in this block.
        function();

        println!("Leaving block");
    }

    function();
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* _ :=
      let* α0 := M.get_function "the_use_as_declaration::deeply::nested::function" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.alloc α1 in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "core::fmt::Arguments")
            "new_const"
            []
            [ Value.Bool true ] in
        let* α4 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "Entering block
") in
            let* α3 := M.alloc (Value.Array [ α2 ]) in
            M.pure (M.pointer_coercion α3) in
        let* α5 := M.call_closure α1 [ α4 ] in
        let* α6 := M.call_closure α0 [ α5 ] in
        M.alloc α6 in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "the_use_as_declaration::deeply::nested::function" [] [] in
        let* α1 := M.call_closure α0 [] in
        M.alloc α1 in
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] [] in
          let* α1 :=
            M.get_associated_function
              (Ty.path "core::fmt::Arguments")
              "new_const"
              []
              [ Value.Bool true ] in
          let* α4 :=
            (* Unsize *)
              let* α2 := M.read (mk_str "Leaving block
") in
              let* α3 := M.alloc (Value.Array [ α2 ]) in
              M.pure (M.pointer_coercion α3) in
          let* α5 := M.call_closure α1 [ α4 ] in
          let* α6 := M.call_closure α0 [ α5 ] in
          M.alloc α6 in
        M.alloc (Value.Tuple []) in
      M.alloc (Value.Tuple []) in
    let* _ :=
      let* α0 := M.get_function "the_use_as_declaration::function" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.alloc α1 in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
