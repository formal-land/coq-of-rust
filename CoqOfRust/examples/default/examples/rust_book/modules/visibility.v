(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module my_mod.
  (*
      fn private_function() {
          println!("called `my_mod::private_function()`");
      }
  *)
  Definition private_function (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] [] in
          let* α1 :=
            M.get_associated_function
              (Ty.path "core::fmt::Arguments")
              "new_const"
              []
              [ Value.Bool true ] in
          let* α4 :=
            (* Unsize *)
              let* α2 := M.read (mk_str "called `my_mod::private_function()`
") in
              let* α3 := M.alloc (Value.Array [ α2 ]) in
              M.pure (M.pointer_coercion α3) in
          let* α5 := M.call_closure α1 [ α4 ] in
          let* α6 := M.call_closure α0 [ α5 ] in
          M.alloc α6 in
        M.alloc (Value.Tuple []) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn function() {
          println!("called `my_mod::function()`");
      }
  *)
  Definition function (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] [] in
          let* α1 :=
            M.get_associated_function
              (Ty.path "core::fmt::Arguments")
              "new_const"
              []
              [ Value.Bool true ] in
          let* α4 :=
            (* Unsize *)
              let* α2 := M.read (mk_str "called `my_mod::function()`
") in
              let* α3 := M.alloc (Value.Array [ α2 ]) in
              M.pure (M.pointer_coercion α3) in
          let* α5 := M.call_closure α1 [ α4 ] in
          let* α6 := M.call_closure α0 [ α5 ] in
          M.alloc α6 in
        M.alloc (Value.Tuple []) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn indirect_access() {
          print!("called `my_mod::indirect_access()`, that\n> ");
          private_function();
      }
  *)
  Definition indirect_access (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] [] in
          let* α1 :=
            M.get_associated_function
              (Ty.path "core::fmt::Arguments")
              "new_const"
              []
              [ Value.Bool true ] in
          let* α4 :=
            (* Unsize *)
              let* α2 := M.read (mk_str "called `my_mod::indirect_access()`, that
> ") in
              let* α3 := M.alloc (Value.Array [ α2 ]) in
              M.pure (M.pointer_coercion α3) in
          let* α5 := M.call_closure α1 [ α4 ] in
          let* α6 := M.call_closure α0 [ α5 ] in
          M.alloc α6 in
        M.alloc (Value.Tuple []) in
      let* _ :=
        let* α0 := M.get_function "visibility::my_mod::private_function" [] [] in
        let* α1 := M.call_closure α0 [] in
        M.alloc α1 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Module nested.
    (*
            pub fn function() {
                println!("called `my_mod::nested::function()`");
            }
    *)
    Definition function (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] =>
        let* _ :=
          let* _ :=
            let* α0 := M.get_function "std::io::stdio::_print" [] [] in
            let* α1 :=
              M.get_associated_function
                (Ty.path "core::fmt::Arguments")
                "new_const"
                []
                [ Value.Bool true ] in
            let* α4 :=
              (* Unsize *)
                let* α2 := M.read (mk_str "called `my_mod::nested::function()`
") in
                let* α3 := M.alloc (Value.Array [ α2 ]) in
                M.pure (M.pointer_coercion α3) in
            let* α5 := M.call_closure α1 [ α4 ] in
            let* α6 := M.call_closure α0 [ α5 ] in
            M.alloc α6 in
          M.alloc (Value.Tuple []) in
        let* α0 := M.alloc (Value.Tuple []) in
        M.read α0
      | _, _ => M.impossible
      end.
    
    (*
            fn private_function() {
                println!("called `my_mod::nested::private_function()`");
            }
    *)
    Definition private_function (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] =>
        let* _ :=
          let* _ :=
            let* α0 := M.get_function "std::io::stdio::_print" [] [] in
            let* α1 :=
              M.get_associated_function
                (Ty.path "core::fmt::Arguments")
                "new_const"
                []
                [ Value.Bool true ] in
            let* α4 :=
              (* Unsize *)
                let* α2 := M.read (mk_str "called `my_mod::nested::private_function()`
") in
                let* α3 := M.alloc (Value.Array [ α2 ]) in
                M.pure (M.pointer_coercion α3) in
            let* α5 := M.call_closure α1 [ α4 ] in
            let* α6 := M.call_closure α0 [ α5 ] in
            M.alloc α6 in
          M.alloc (Value.Tuple []) in
        let* α0 := M.alloc (Value.Tuple []) in
        M.read α0
      | _, _ => M.impossible
      end.
    
    (*
            pub(in crate::my_mod) fn public_function_in_my_mod() {
                print!("called `my_mod::nested::public_function_in_my_mod()`, that\n> ");
                public_function_in_nested();
            }
    *)
    Definition public_function_in_my_mod (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] =>
        let* _ :=
          let* _ :=
            let* α0 := M.get_function "std::io::stdio::_print" [] [] in
            let* α1 :=
              M.get_associated_function
                (Ty.path "core::fmt::Arguments")
                "new_const"
                []
                [ Value.Bool true ] in
            let* α4 :=
              (* Unsize *)
                let* α2 :=
                  M.read (mk_str "called `my_mod::nested::public_function_in_my_mod()`, that
> ") in
                let* α3 := M.alloc (Value.Array [ α2 ]) in
                M.pure (M.pointer_coercion α3) in
            let* α5 := M.call_closure α1 [ α4 ] in
            let* α6 := M.call_closure α0 [ α5 ] in
            M.alloc α6 in
          M.alloc (Value.Tuple []) in
        let* _ :=
          let* α0 := M.get_function "visibility::my_mod::nested::public_function_in_nested" [] [] in
          let* α1 := M.call_closure α0 [] in
          M.alloc α1 in
        let* α0 := M.alloc (Value.Tuple []) in
        M.read α0
      | _, _ => M.impossible
      end.
    
    (*
            pub(self) fn public_function_in_nested() {
                println!("called `my_mod::nested::public_function_in_nested()`");
            }
    *)
    Definition public_function_in_nested (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] =>
        let* _ :=
          let* _ :=
            let* α0 := M.get_function "std::io::stdio::_print" [] [] in
            let* α1 :=
              M.get_associated_function
                (Ty.path "core::fmt::Arguments")
                "new_const"
                []
                [ Value.Bool true ] in
            let* α4 :=
              (* Unsize *)
                let* α2 :=
                  M.read (mk_str "called `my_mod::nested::public_function_in_nested()`
") in
                let* α3 := M.alloc (Value.Array [ α2 ]) in
                M.pure (M.pointer_coercion α3) in
            let* α5 := M.call_closure α1 [ α4 ] in
            let* α6 := M.call_closure α0 [ α5 ] in
            M.alloc α6 in
          M.alloc (Value.Tuple []) in
        let* α0 := M.alloc (Value.Tuple []) in
        M.read α0
      | _, _ => M.impossible
      end.
    
    (*
            pub(super) fn public_function_in_super_mod() {
                println!("called `my_mod::nested::public_function_in_super_mod()`");
            }
    *)
    Definition public_function_in_super_mod (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] =>
        let* _ :=
          let* _ :=
            let* α0 := M.get_function "std::io::stdio::_print" [] [] in
            let* α1 :=
              M.get_associated_function
                (Ty.path "core::fmt::Arguments")
                "new_const"
                []
                [ Value.Bool true ] in
            let* α4 :=
              (* Unsize *)
                let* α2 :=
                  M.read (mk_str "called `my_mod::nested::public_function_in_super_mod()`
") in
                let* α3 := M.alloc (Value.Array [ α2 ]) in
                M.pure (M.pointer_coercion α3) in
            let* α5 := M.call_closure α1 [ α4 ] in
            let* α6 := M.call_closure α0 [ α5 ] in
            M.alloc α6 in
          M.alloc (Value.Tuple []) in
        let* α0 := M.alloc (Value.Tuple []) in
        M.read α0
      | _, _ => M.impossible
      end.
  End nested.
  
  (*
      pub fn call_public_function_in_my_mod() {
          print!("called `my_mod::call_public_function_in_my_mod()`, that\n> ");
          nested::public_function_in_my_mod();
          print!("> ");
          nested::public_function_in_super_mod();
      }
  *)
  Definition call_public_function_in_my_mod (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] [] in
          let* α1 :=
            M.get_associated_function
              (Ty.path "core::fmt::Arguments")
              "new_const"
              []
              [ Value.Bool true ] in
          let* α4 :=
            (* Unsize *)
              let* α2 :=
                M.read (mk_str "called `my_mod::call_public_function_in_my_mod()`, that
> ") in
              let* α3 := M.alloc (Value.Array [ α2 ]) in
              M.pure (M.pointer_coercion α3) in
          let* α5 := M.call_closure α1 [ α4 ] in
          let* α6 := M.call_closure α0 [ α5 ] in
          M.alloc α6 in
        M.alloc (Value.Tuple []) in
      let* _ :=
        let* α0 := M.get_function "visibility::my_mod::nested::public_function_in_my_mod" [] [] in
        let* α1 := M.call_closure α0 [] in
        M.alloc α1 in
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] [] in
          let* α1 :=
            M.get_associated_function
              (Ty.path "core::fmt::Arguments")
              "new_const"
              []
              [ Value.Bool true ] in
          let* α4 :=
            (* Unsize *)
              let* α2 := M.read (mk_str "> ") in
              let* α3 := M.alloc (Value.Array [ α2 ]) in
              M.pure (M.pointer_coercion α3) in
          let* α5 := M.call_closure α1 [ α4 ] in
          let* α6 := M.call_closure α0 [ α5 ] in
          M.alloc α6 in
        M.alloc (Value.Tuple []) in
      let* _ :=
        let* α0 :=
          M.get_function "visibility::my_mod::nested::public_function_in_super_mod" [] [] in
        let* α1 := M.call_closure α0 [] in
        M.alloc α1 in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      pub(crate) fn public_function_in_crate() {
          println!("called `my_mod::public_function_in_crate()`");
      }
  *)
  Definition public_function_in_crate (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] [] in
          let* α1 :=
            M.get_associated_function
              (Ty.path "core::fmt::Arguments")
              "new_const"
              []
              [ Value.Bool true ] in
          let* α4 :=
            (* Unsize *)
              let* α2 := M.read (mk_str "called `my_mod::public_function_in_crate()`
") in
              let* α3 := M.alloc (Value.Array [ α2 ]) in
              M.pure (M.pointer_coercion α3) in
          let* α5 := M.call_closure α1 [ α4 ] in
          let* α6 := M.call_closure α0 [ α5 ] in
          M.alloc α6 in
        M.alloc (Value.Tuple []) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Module private_nested.
    (*
            pub fn function() {
                println!("called `my_mod::private_nested::function()`");
            }
    *)
    Definition function (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] =>
        let* _ :=
          let* _ :=
            let* α0 := M.get_function "std::io::stdio::_print" [] [] in
            let* α1 :=
              M.get_associated_function
                (Ty.path "core::fmt::Arguments")
                "new_const"
                []
                [ Value.Bool true ] in
            let* α4 :=
              (* Unsize *)
                let* α2 := M.read (mk_str "called `my_mod::private_nested::function()`
") in
                let* α3 := M.alloc (Value.Array [ α2 ]) in
                M.pure (M.pointer_coercion α3) in
            let* α5 := M.call_closure α1 [ α4 ] in
            let* α6 := M.call_closure α0 [ α5 ] in
            M.alloc α6 in
          M.alloc (Value.Tuple []) in
        let* α0 := M.alloc (Value.Tuple []) in
        M.read α0
      | _, _ => M.impossible
      end.
    
    (*
            pub(crate) fn restricted_function() {
                println!("called `my_mod::private_nested::restricted_function()`");
            }
    *)
    Definition restricted_function (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] =>
        let* _ :=
          let* _ :=
            let* α0 := M.get_function "std::io::stdio::_print" [] [] in
            let* α1 :=
              M.get_associated_function
                (Ty.path "core::fmt::Arguments")
                "new_const"
                []
                [ Value.Bool true ] in
            let* α4 :=
              (* Unsize *)
                let* α2 :=
                  M.read (mk_str "called `my_mod::private_nested::restricted_function()`
") in
                let* α3 := M.alloc (Value.Array [ α2 ]) in
                M.pure (M.pointer_coercion α3) in
            let* α5 := M.call_closure α1 [ α4 ] in
            let* α6 := M.call_closure α0 [ α5 ] in
            M.alloc α6 in
          M.alloc (Value.Tuple []) in
        let* α0 := M.alloc (Value.Tuple []) in
        M.read α0
      | _, _ => M.impossible
      end.
  End private_nested.
End my_mod.

(*
fn function() {
    println!("called `function()`");
}
*)
Definition function (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "core::fmt::Arguments")
            "new_const"
            []
            [ Value.Bool true ] in
        let* α4 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "called `function()`
") in
            let* α3 := M.alloc (Value.Array [ α2 ]) in
            M.pure (M.pointer_coercion α3) in
        let* α5 := M.call_closure α1 [ α4 ] in
        let* α6 := M.call_closure α0 [ α5 ] in
        M.alloc α6 in
      M.alloc (Value.Tuple []) in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn main() {
    // Modules allow disambiguation between items that have the same name.
    function();
    my_mod::function();

    // Public items, including those inside nested modules, can be
    // accessed from outside the parent module.
    my_mod::indirect_access();
    my_mod::nested::function();
    my_mod::call_public_function_in_my_mod();

    // pub(crate) items can be called from anywhere in the same crate
    my_mod::public_function_in_crate();

    // pub(in path) items can only be called from within the module specified
    // Error! function `public_function_in_my_mod` is private
    //my_mod::nested::public_function_in_my_mod();
    // TODO ^ Try uncommenting this line

    // Private items of a module cannot be directly accessed, even if
    // nested in a public module:

    // Error! `private_function` is private
    //my_mod::private_function();
    // TODO ^ Try uncommenting this line

    // Error! `private_function` is private
    //my_mod::nested::private_function();
    // TODO ^ Try uncommenting this line

    // Error! `private_nested` is a private module
    //my_mod::private_nested::function();
    // TODO ^ Try uncommenting this line

    // Error! `private_nested` is a private module
    //my_mod::private_nested::restricted_function();
    // TODO ^ Try uncommenting this line
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* _ :=
      let* α0 := M.get_function "visibility::function" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.alloc α1 in
    let* _ :=
      let* α0 := M.get_function "visibility::my_mod::function" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.alloc α1 in
    let* _ :=
      let* α0 := M.get_function "visibility::my_mod::indirect_access" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.alloc α1 in
    let* _ :=
      let* α0 := M.get_function "visibility::my_mod::nested::function" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.alloc α1 in
    let* _ :=
      let* α0 := M.get_function "visibility::my_mod::call_public_function_in_my_mod" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.alloc α1 in
    let* _ :=
      let* α0 := M.get_function "visibility::my_mod::public_function_in_crate" [] [] in
      let* α1 := M.call_closure α0 [] in
      M.alloc α1 in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
