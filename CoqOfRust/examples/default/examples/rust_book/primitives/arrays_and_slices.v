(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn analyze_slice(slice: &[i32]) {
    println!("first element of the slice: {}", slice[0]);
    println!("the slice has {} elements", slice.len());
}
*)
Definition analyze_slice (slice : ref (slice i32.t)) : M unit :=
  ltac:(M.monadic (
    let slice := M.alloc (| slice |) in
    M.read (|
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "first element of the slice: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (deref (M.read (| slice |)))[M.alloc (|
                                (Integer.of_Z 0) : usize.t
                              |)]))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "the slice has " |);
                        M.read (| mk_str " elements
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|((slice i32.t)::["len"]
                                (M.read (| slice |)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).

(*
fn main() {
    // Fixed-size array (type signature is superfluous)
    let xs: [i32; 5] = [1, 2, 3, 4, 5];

    // All elements can be initialized to the same value
    let ys: [i32; 500] = [0; 500];

    // Indexing starts at 0
    println!("first element of the array: {}", xs[0]);
    println!("second element of the array: {}", xs[1]);

    // `len` returns the count of elements in the array
    println!("number of elements in array: {}", xs.len());

    // Arrays are stack allocated
    println!("array occupies {} bytes", mem::size_of_val(&xs));

    // Arrays can be automatically borrowed as slices
    println!("borrow the whole array as a slice");
    analyze_slice(&xs);

    // Slices can point to a section of an array
    // They are of the form [starting_index..ending_index]
    // starting_index is the first position in the slice
    // ending_index is one more than the last position in the slice
    println!("borrow a section of the array as a slice");
    analyze_slice(&ys[1 .. 4]);

    // Example of empty slice `&[]`
    let empty_array: [u32; 0] = [];
    assert_eq!(&empty_array, &[]);
    assert_eq!(&empty_array, &[][..]); // same but more verbose

    // Arrays can be safely accessed using `.get`, which returns an
    // `Option`. This can be matched as shown below, or used with
    // `.expect()` if you would like the program to exit with a nice
    // message instead of happily continue.
    for i in 0..xs.len() + 1 { // OOPS, one element too far
        match xs.get(i) {
            Some(xval) => println!("{}: {}", i, xval),
            None => println!("Slow down! {} is too far!", i),
        }
    }

    // Out of bound indexing causes runtime error
    //println!("{}", xs[5]);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let xs : M.Val (array i32.t) :=
        M.alloc (|
          [
            (Integer.of_Z 1) : i32.t;
            (Integer.of_Z 2) : i32.t;
            (Integer.of_Z 3) : i32.t;
            (Integer.of_Z 4) : i32.t;
            (Integer.of_Z 5) : i32.t
          ]
        |) in
      let ys : M.Val (array i32.t) :=
        M.alloc (| repeat ((Integer.of_Z 0) : i32.t) 500 |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "first element of the array: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow xs[M.alloc (| (Integer.of_Z 0) : usize.t |)]))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "second element of the array: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow xs[M.alloc (| (Integer.of_Z 1) : usize.t |)]))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "number of elements in array: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|((slice i32.t)::["len"]
                                (pointer_coercion "Unsize" (borrow xs)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "array occupies " |);
                        M.read (| mk_str " bytes
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(core.mem.size_of_val (borrow xs)) |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "borrow the whole array as a slice
" |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(arrays_and_slices.analyze_slice
            (pointer_coercion "Unsize" (borrow xs)))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (|
                          mk_str "borrow a section of the array as a slice
"
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(arrays_and_slices.analyze_slice
            (M.call (|(ltac:(M.get_method (fun ℐ =>
                core.ops.index.Index.index
                  (Self := array i32.t)
                  (Idx := core.ops.range.Range.t usize.t)
                  (Trait := ℐ)))
              (borrow ys)
              {|
                core.ops.range.Range.start := (Integer.of_Z 1) : usize.t;
                core.ops.range.Range.end_ := (Integer.of_Z 4) : usize.t;
              |} : core.ops.range.Range.t usize.t)
            |)))
          |)
        |) in
      let empty_array : M.Val (array u32.t) := M.alloc (| [ ] |) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            (M.alloc (|
              (borrow (M.alloc (| borrow empty_array |)),
                borrow (M.alloc (| borrow (M.alloc (| [ ] |)) |)))
            |))
            [
              fun
                  (γ :
                    M.Val
                      ((ref (ref (array u32.t)))
                      *
                      (ref (ref (array u32.t))))) =>
                match M.read (| γ |) with
                | (_, _) =>
                  let γ0_0 := Tuple.Access.left γ in
                  let γ0_1 := Tuple.Access.right γ in
                  let left_val := M.copy (| γ0_0 |) in
                  let right_val := M.copy (| γ0_1 |) in
                  if
                    M.read (|
                      use
                        (M.alloc (|
                          UnOp.not
                            (M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.cmp.PartialEq.eq
                                  (Self := ref (array u32.t))
                                  (Rhs := ref (array u32.t))
                                  (Trait := ℐ)))
                              (M.read (| left_val |))
                              (M.read (| right_val |)))
                            |))
                        |))
                    |)
                  then
                    M.alloc (|
                      (never_to_any (B := unit)) (|
                        M.read (|
                          let kind : M.Val core.panicking.AssertKind.t :=
                            M.alloc (| core.panicking.AssertKind.Eq |) in
                          M.alloc (|
                            M.call (|(core.panicking.assert_failed
                              (M.read (| kind |))
                              (M.read (| left_val |))
                              (M.read (| right_val |))
                              core.option.Option.None)
                            |)
                          |)
                        |)
                      |)
                    |)
                  else
                    M.alloc (| tt |)
                end :
                M.Val unit
            ]) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            (M.alloc (|
              (borrow (M.alloc (| borrow empty_array |)),
                borrow
                  (M.alloc (|
                    M.call (|(ltac:(M.get_method (fun ℐ =>
                        core.ops.index.Index.index
                          (Self := array u32.t)
                          (Idx := core.ops.range.RangeFull.t)
                          (Trait := ℐ)))
                      (borrow (M.alloc (| [ ] |)))
                      core.ops.range.RangeFull.Build)
                    |)
                  |)))
            |))
            [
              fun
                  (γ :
                    M.Val
                      ((ref (ref (array u32.t)))
                      *
                      (ref (ref (slice u32.t))))) =>
                match M.read (| γ |) with
                | (_, _) =>
                  let γ0_0 := Tuple.Access.left γ in
                  let γ0_1 := Tuple.Access.right γ in
                  let left_val := M.copy (| γ0_0 |) in
                  let right_val := M.copy (| γ0_1 |) in
                  if
                    M.read (|
                      use
                        (M.alloc (|
                          UnOp.not
                            (M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.cmp.PartialEq.eq
                                  (Self := ref (array u32.t))
                                  (Rhs := ref (slice u32.t))
                                  (Trait := ℐ)))
                              (M.read (| left_val |))
                              (M.read (| right_val |)))
                            |))
                        |))
                    |)
                  then
                    M.alloc (|
                      (never_to_any (B := unit)) (|
                        M.read (|
                          let kind : M.Val core.panicking.AssertKind.t :=
                            M.alloc (| core.panicking.AssertKind.Eq |) in
                          M.alloc (|
                            M.call (|(core.panicking.assert_failed
                              (M.read (| kind |))
                              (M.read (| left_val |))
                              (M.read (| right_val |))
                              core.option.Option.None)
                            |)
                          |)
                        |)
                      |)
                    |)
                  else
                    M.alloc (| tt |)
                end :
                M.Val unit
            ]) in
      use
        (ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.iter.traits.collect.IntoIterator.into_iter
                    (Self := core.ops.range.Range.t usize.t)
                    (Trait := ℐ)))
                {|
                  core.ops.range.Range.start := (Integer.of_Z 0) : usize.t;
                  core.ops.range.Range.end_ :=
                    BinOp.Panic.add (|
                      M.call (|((slice i32.t)::["len"]
                        (pointer_coercion "Unsize" (borrow xs)))
                      |),
                      (Integer.of_Z 1) : usize.t
                    |);
                |} : core.ops.range.Range.t usize.t)
              |)
            |))
            [
              fun (γ : M.Val (core.ops.range.Range.t usize.t)) =>
                (let iter := M.copy (| γ |) in
                M.loop
                  (let _ : M.Val unit :=
                    ltac:
                      (M.monadic_match_operator
                        (M.alloc (|
                          M.call (|(ltac:(M.get_method (fun ℐ =>
                              core.iter.traits.iterator.Iterator.next
                                (Self := core.ops.range.Range.t usize.t)
                                (Trait := ℐ)))
                            (borrow_mut iter))
                          |)
                        |))
                        [
                          fun (γ : M.Val (core.option.Option.t usize.t)) =>
                            match M.read (| γ |) with
                            | core.option.Option.None =>
                              M.alloc (|
                                (never_to_any (B := unit)) (|
                                  M.read (| M.break |)
                                |)
                              |)
                            | _ => M.break_match(||)
                            end :
                            M.Val unit;
                          fun (γ : M.Val (core.option.Option.t usize.t)) =>
                            match M.read (| γ |) with
                            | core.option.Option.Some _ =>
                              let γ0_0 := core.option.Option.Get_Some_0 γ in
                              let i := M.copy (| γ0_0 |) in
                              ltac:
                                (M.monadic_match_operator
                                  (M.alloc (|
                                    M.call (|((slice i32.t)::["get"]
                                      (pointer_coercion "Unsize" (borrow xs))
                                      (M.read (| i |)))
                                    |)
                                  |))
                                  [
                                    fun
                                        (γ :
                                          M.Val
                                            (core.option.Option.t
                                              (ref i32.t))) =>
                                      match M.read (| γ |) with
                                      | core.option.Option.Some _ =>
                                        let γ0_0 :=
                                          core.option.Option.Get_Some_0 γ in
                                        let xval := M.copy (| γ0_0 |) in
                                        let _ : M.Val unit :=
                                          M.alloc (|
                                            M.call (|(std.io.stdio._print
                                              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                                (pointer_coercion
                                                  "Unsize"
                                                  (borrow
                                                    (M.alloc (|
                                                      [
                                                        M.read (| mk_str "" |);
                                                        M.read (| mk_str ": "
                                                        |);
                                                        M.read (| mk_str "
" |)
                                                      ]
                                                    |))))
                                                (pointer_coercion
                                                  "Unsize"
                                                  (borrow
                                                    (M.alloc (|
                                                      [
                                                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                          (borrow i))
                                                        |);
                                                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                          (borrow xval))
                                                        |)
                                                      ]
                                                    |)))))
                                              |)))
                                            |)
                                          |) in
                                        M.alloc (| tt |)
                                      | _ => M.break_match(||)
                                      end :
                                      M.Val unit;
                                    fun
                                        (γ :
                                          M.Val
                                            (core.option.Option.t
                                              (ref i32.t))) =>
                                      match M.read (| γ |) with
                                      | core.option.Option.None =>
                                        let _ : M.Val unit :=
                                          M.alloc (|
                                            M.call (|(std.io.stdio._print
                                              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                                (pointer_coercion
                                                  "Unsize"
                                                  (borrow
                                                    (M.alloc (|
                                                      [
                                                        M.read (|
                                                          mk_str "Slow down! "
                                                        |);
                                                        M.read (|
                                                          mk_str " is too far!
"
                                                        |)
                                                      ]
                                                    |))))
                                                (pointer_coercion
                                                  "Unsize"
                                                  (borrow
                                                    (M.alloc (|
                                                      [
                                                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                          (borrow i))
                                                        |)
                                                      ]
                                                    |)))))
                                              |)))
                                            |)
                                          |) in
                                        M.alloc (| tt |)
                                      | _ => M.break_match(||)
                                      end :
                                      M.Val unit
                                  ])
                            | _ => M.break_match(||)
                            end :
                            M.Val unit
                        ]) in
                  M.alloc (| tt |))) :
                M.Val unit
            ]))
    |)
  )).
