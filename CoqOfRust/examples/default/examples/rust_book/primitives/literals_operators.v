(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Integer addition
    println!("1 + 2 = {}", 1u32 + 2);

    // Integer subtraction
    println!("1 - 2 = {}", 1i32 - 2);
    // TODO ^ Try changing `1i32` to `1u32` to see why the type is important

    // Short-circuiting boolean logic
    println!("true AND false is {}", true && false);
    println!("true OR false is {}", true || false);
    println!("NOT true is {}", !true);

    // Bitwise operations
    println!("0011 AND 0101 is {:04b}", 0b0011u32 & 0b0101);
    println!("0011 OR 0101 is {:04b}", 0b0011u32 | 0b0101);
    println!("0011 XOR 0101 is {:04b}", 0b0011u32 ^ 0b0101);
    println!("1 << 5 is {}", 1u32 << 5);
    println!("0x80 >> 2 is 0x{:x}", 0x80u32 >> 2);

    // Use underscores to improve readability!
    println!("One million is written as {}", 1_000_000u32);
}
*)
Definition main (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [] =>
    ltac:(M.monadic
      (M.read (|
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value (M.read (| M.of_value (| Value.String "1 + 2 = " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_display",
                                      [ Ty.path "u32" ]
                                    |),
                                    [
                                      M.alloc (|
                                        BinOp.Panic.add (|
                                          Integer.U32,
                                          M.of_value (| Value.Integer 1 |),
                                          M.of_value (| Value.Integer 2 |)
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value (M.read (| M.of_value (| Value.String "1 - 2 = " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_display",
                                      [ Ty.path "i32" ]
                                    |),
                                    [
                                      M.alloc (|
                                        BinOp.Panic.sub (|
                                          Integer.I32,
                                          M.of_value (| Value.Integer 1 |),
                                          M.of_value (| Value.Integer 2 |)
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (| M.of_value (| Value.String "true AND false is " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_display",
                                      [ Ty.path "bool" ]
                                    |),
                                    [
                                      M.alloc (|
                                        LogicalOp.and (|
                                          M.of_value (| Value.Bool true |),
                                          ltac:(M.monadic (M.of_value (| Value.Bool false |)))
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (| M.of_value (| Value.String "true OR false is " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_display",
                                      [ Ty.path "bool" ]
                                    |),
                                    [
                                      M.alloc (|
                                        LogicalOp.or (|
                                          M.of_value (| Value.Bool true |),
                                          ltac:(M.monadic (M.of_value (| Value.Bool false |)))
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (| M.of_value (| Value.String "NOT true is " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_display",
                                      [ Ty.path "bool" ]
                                    |),
                                    [
                                      M.alloc (|
                                        UnOp.Pure.not (| M.of_value (| Value.Bool true |) |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "core::fmt::Arguments",
                      "new_v1_formatted",
                      []
                    |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (| M.of_value (| Value.String "0011 AND 0101 is " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_binary",
                                      [ Ty.path "u32" ]
                                    |),
                                    [
                                      M.alloc (|
                                        BinOp.Pure.bit_and (|
                                          M.of_value (| Value.Integer 3 |),
                                          M.of_value (| Value.Integer 5 |)
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Placeholder",
                                      "new",
                                      []
                                    |),
                                    [
                                      M.of_value (| Value.Integer 0 |);
                                      M.of_value (| Value.UnicodeChar 32 |);
                                      M.of_value (|
                                        Value.StructTuple "core::fmt::rt::Alignment::Unknown" []
                                      |);
                                      M.of_value (| Value.Integer 8 |);
                                      M.of_value (|
                                        Value.StructTuple "core::fmt::rt::Count::Implied" []
                                      |);
                                      M.of_value (|
                                        Value.StructTuple
                                          "core::fmt::rt::Count::Is"
                                          [ A.to_value (M.of_value (| Value.Integer 4 |)) ]
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::rt::UnsafeArg",
                          "new",
                          []
                        |),
                        []
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "core::fmt::Arguments",
                      "new_v1_formatted",
                      []
                    |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (| M.of_value (| Value.String "0011 OR 0101 is " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_binary",
                                      [ Ty.path "u32" ]
                                    |),
                                    [
                                      M.alloc (|
                                        BinOp.Pure.bit_or (|
                                          M.of_value (| Value.Integer 3 |),
                                          M.of_value (| Value.Integer 5 |)
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Placeholder",
                                      "new",
                                      []
                                    |),
                                    [
                                      M.of_value (| Value.Integer 0 |);
                                      M.of_value (| Value.UnicodeChar 32 |);
                                      M.of_value (|
                                        Value.StructTuple "core::fmt::rt::Alignment::Unknown" []
                                      |);
                                      M.of_value (| Value.Integer 8 |);
                                      M.of_value (|
                                        Value.StructTuple "core::fmt::rt::Count::Implied" []
                                      |);
                                      M.of_value (|
                                        Value.StructTuple
                                          "core::fmt::rt::Count::Is"
                                          [ A.to_value (M.of_value (| Value.Integer 4 |)) ]
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::rt::UnsafeArg",
                          "new",
                          []
                        |),
                        []
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "core::fmt::Arguments",
                      "new_v1_formatted",
                      []
                    |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (| M.of_value (| Value.String "0011 XOR 0101 is " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_binary",
                                      [ Ty.path "u32" ]
                                    |),
                                    [
                                      M.alloc (|
                                        BinOp.Pure.bit_xor (|
                                          M.of_value (| Value.Integer 3 |),
                                          M.of_value (| Value.Integer 5 |)
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Placeholder",
                                      "new",
                                      []
                                    |),
                                    [
                                      M.of_value (| Value.Integer 0 |);
                                      M.of_value (| Value.UnicodeChar 32 |);
                                      M.of_value (|
                                        Value.StructTuple "core::fmt::rt::Alignment::Unknown" []
                                      |);
                                      M.of_value (| Value.Integer 8 |);
                                      M.of_value (|
                                        Value.StructTuple "core::fmt::rt::Count::Implied" []
                                      |);
                                      M.of_value (|
                                        Value.StructTuple
                                          "core::fmt::rt::Count::Is"
                                          [ A.to_value (M.of_value (| Value.Integer 4 |)) ]
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::rt::UnsafeArg",
                          "new",
                          []
                        |),
                        []
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (| M.of_value (| Value.String "1 << 5 is " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_display",
                                      [ Ty.path "u32" ]
                                    |),
                                    [
                                      M.alloc (|
                                        BinOp.Panic.shl (|
                                          M.of_value (| Value.Integer 1 |),
                                          M.of_value (| Value.Integer 5 |)
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (| M.of_value (| Value.String "0x80 >> 2 is 0x" |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_lower_hex",
                                      [ Ty.path "u32" ]
                                    |),
                                    [
                                      M.alloc (|
                                        BinOp.Panic.shr (|
                                          M.of_value (| Value.Integer 128 |),
                                          M.of_value (| Value.Integer 2 |)
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (|
                                    M.of_value (|
                                      Value.String "One million is written as 1000000
"
                                    |)
                                  |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::rt::Argument",
                              "none",
                              []
                            |),
                            []
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        M.alloc (| M.of_value (| Value.Tuple [] |) |)
      |)))
  | _, _ => M.impossible
  end.
