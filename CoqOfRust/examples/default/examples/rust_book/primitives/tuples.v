(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn reverse(pair: (i32, bool)) -> (bool, i32) {
    // `let` can be used to bind the members of a tuple to variables
    let (int_param, bool_param) = pair;

    (bool_param, int_param)
}
*)
Definition reverse (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [ pair_ ] =>
    ltac:(M.monadic
      (let pair_ := M.alloc (| pair_ |) in
      M.read (|
        M.match_operator (|
          pair_,
          [
            fun γ =>
              ltac:(M.monadic
                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                let int_param := M.copy (| γ0_0 |) in
                let bool_param := M.copy (| γ0_1 |) in
                M.alloc (|
                  M.of_value (|
                    Value.Tuple
                      [ A.to_value (M.read (| bool_param |)); A.to_value (M.read (| int_param |)) ]
                  |)
                |)))
          ]
        |)
      |)))
  | _, _ => M.impossible
  end.

(* StructTuple
  {
    name := "Matrix";
    ty_params := [];
    fields := [ Ty.path "f32"; Ty.path "f32"; Ty.path "f32"; Ty.path "f32" ];
  } *)

Module Impl_core_fmt_Debug_for_tuples_Matrix.
  Definition Self : Ty.t := Ty.path "tuples::Matrix".
  
  (* Debug *)
  Definition fmt (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ self; f ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let f := M.alloc (| f |) in
        M.call_closure (|
          M.get_associated_function (|
            Ty.path "core::fmt::Formatter",
            "debug_tuple_field4_finish",
            []
          |),
          [
            M.read (| f |);
            M.read (| M.of_value (| Value.String "Matrix" |) |);
            (* Unsize *)
            M.pointer_coercion (|
              M.SubPointer.get_struct_tuple_field (| M.read (| self |), "tuples::Matrix", 0 |)
            |);
            (* Unsize *)
            M.pointer_coercion (|
              M.SubPointer.get_struct_tuple_field (| M.read (| self |), "tuples::Matrix", 1 |)
            |);
            (* Unsize *)
            M.pointer_coercion (|
              M.SubPointer.get_struct_tuple_field (| M.read (| self |), "tuples::Matrix", 2 |)
            |);
            (* Unsize *)
            M.pointer_coercion (|
              M.alloc (|
                M.SubPointer.get_struct_tuple_field (| M.read (| self |), "tuples::Matrix", 3 |)
              |)
            |)
          ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_tuples_Matrix.

(*
fn main() {
    // A tuple with a bunch of different types
    let long_tuple = (1u8, 2u16, 3u32, 4u64,
                      -1i8, -2i16, -3i32, -4i64,
                      0.1f32, 0.2f64,
                      'a', true);

    // Values can be extracted from the tuple using tuple indexing
    println!("long tuple first value: {}", long_tuple.0);
    println!("long tuple second value: {}", long_tuple.1);

    // Tuples can be tuple members
    let tuple_of_tuples = ((1u8, 2u16, 2u32), (4u64, -1i8), -2i16);

    // Tuples are printable
    println!("tuple of tuples: {:?}", tuple_of_tuples);
    
    // But long Tuples (more than 12 elements) cannot be printed
    // let too_long_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
    // println!("too long tuple: {:?}", too_long_tuple);
    // TODO ^ Uncomment the above 2 lines to see the compiler error

    let pair = (1, true);
    println!("pair is {:?}", pair);

    println!("the reversed pair is {:?}", reverse(pair));

    // To create one element tuples, the comma is required to tell them apart
    // from a literal surrounded by parentheses
    println!("one element tuple: {:?}", (5u32,));
    println!("just an integer: {:?}", (5u32));

    //tuples can be destructured to create bindings
    let tuple = (1, "hello", 4.5, true);

    let (a, b, c, d) = tuple;
    println!("{:?}, {:?}, {:?}, {:?}", a, b, c, d);

    let matrix = Matrix(1.1, 1.2, 2.1, 2.2);
    println!("{:?}", matrix);

}
*)
Definition main (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [] =>
    ltac:(M.monadic
      (M.read (|
        let long_tuple :=
          M.alloc (|
            M.of_value (|
              Value.Tuple
                [
                  A.to_value (M.of_value (| Value.Integer 1 |));
                  A.to_value (M.of_value (| Value.Integer 2 |));
                  A.to_value (M.of_value (| Value.Integer 3 |));
                  A.to_value (M.of_value (| Value.Integer 4 |));
                  A.to_value (M.of_value (| Value.Integer (-1) |));
                  A.to_value (M.of_value (| Value.Integer (-2) |));
                  A.to_value (M.of_value (| Value.Integer (-3) |));
                  A.to_value (M.of_value (| Value.Integer (-4) |));
                  A.to_value (M.read (| M.of_value (| UnsupportedLiteral |) |));
                  A.to_value (M.read (| M.of_value (| UnsupportedLiteral |) |));
                  A.to_value (M.of_value (| Value.UnicodeChar 97 |));
                  A.to_value (M.of_value (| Value.Bool true |))
                ]
            |)
          |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (|
                                    M.of_value (| Value.String "long tuple first value: " |)
                                  |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_display",
                                      [ Ty.path "u8" ]
                                    |),
                                    [ M.SubPointer.get_tuple_field (| long_tuple, 0 |) ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (|
                                    M.of_value (| Value.String "long tuple second value: " |)
                                  |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_display",
                                      [ Ty.path "u16" ]
                                    |),
                                    [ M.SubPointer.get_tuple_field (| long_tuple, 1 |) ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let tuple_of_tuples :=
          M.alloc (|
            M.of_value (|
              Value.Tuple
                [
                  A.to_value
                    (M.of_value (|
                      Value.Tuple
                        [
                          A.to_value (M.of_value (| Value.Integer 1 |));
                          A.to_value (M.of_value (| Value.Integer 2 |));
                          A.to_value (M.of_value (| Value.Integer 2 |))
                        ]
                    |));
                  A.to_value
                    (M.of_value (|
                      Value.Tuple
                        [
                          A.to_value (M.of_value (| Value.Integer 4 |));
                          A.to_value (M.of_value (| Value.Integer (-1) |))
                        ]
                    |));
                  A.to_value (M.of_value (| Value.Integer (-2) |))
                ]
            |)
          |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (| M.of_value (| Value.String "tuple of tuples: " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_debug",
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple [ Ty.path "u8"; Ty.path "u16"; Ty.path "u32" ];
                                            Ty.tuple [ Ty.path "u64"; Ty.path "i8" ];
                                            Ty.path "i16"
                                          ]
                                      ]
                                    |),
                                    [ tuple_of_tuples ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let pair_ :=
          M.alloc (|
            M.of_value (|
              Value.Tuple
                [
                  A.to_value (M.of_value (| Value.Integer 1 |));
                  A.to_value (M.of_value (| Value.Bool true |))
                ]
            |)
          |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value (M.read (| M.of_value (| Value.String "pair is " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_debug",
                                      [ Ty.tuple [ Ty.path "i32"; Ty.path "bool" ] ]
                                    |),
                                    [ pair_ ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (|
                                    M.of_value (| Value.String "the reversed pair is " |)
                                  |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_debug",
                                      [ Ty.tuple [ Ty.path "bool"; Ty.path "i32" ] ]
                                    |),
                                    [
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (| "tuples::reverse", [] |),
                                          [ M.read (| pair_ |) ]
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (|
                                    M.of_value (| Value.String "one element tuple: " |)
                                  |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_debug",
                                      [ Ty.tuple [ Ty.path "u32" ] ]
                                    |),
                                    [
                                      M.alloc (|
                                        M.of_value (|
                                          Value.Tuple
                                            [ A.to_value (M.of_value (| Value.Integer 5 |)) ]
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (| M.of_value (| Value.String "just an integer: " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_debug",
                                      [ Ty.path "u32" ]
                                    |),
                                    [ M.alloc (| M.of_value (| Value.Integer 5 |) |) ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let tuple :=
          M.alloc (|
            M.of_value (|
              Value.Tuple
                [
                  A.to_value (M.of_value (| Value.Integer 1 |));
                  A.to_value (M.read (| M.of_value (| Value.String "hello" |) |));
                  A.to_value (M.read (| M.of_value (| UnsupportedLiteral |) |));
                  A.to_value (M.of_value (| Value.Bool true |))
                ]
            |)
          |) in
        M.match_operator (|
          tuple,
          [
            fun γ =>
              ltac:(M.monadic
                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                let γ0_3 := M.SubPointer.get_tuple_field (| γ, 3 |) in
                let a := M.copy (| γ0_0 |) in
                let b := M.copy (| γ0_1 |) in
                let c := M.copy (| γ0_2 |) in
                let d := M.copy (| γ0_3 |) in
                let _ :=
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (| "std::io::stdio::_print", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value (M.read (| M.of_value (| Value.String "" |) |));
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String ", " |) |));
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String ", " |) |));
                                        A.to_value
                                          (M.read (| M.of_value (| Value.String ", " |) |));
                                        A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                                      ]
                                  |)
                                |)
                              |);
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_debug",
                                              [ Ty.path "i32" ]
                                            |),
                                            [ a ]
                                          |));
                                        A.to_value
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_debug",
                                              [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
                                            |),
                                            [ b ]
                                          |));
                                        A.to_value
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_debug",
                                              [ Ty.path "f64" ]
                                            |),
                                            [ c ]
                                          |));
                                        A.to_value
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_debug",
                                              [ Ty.path "bool" ]
                                            |),
                                            [ d ]
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (| M.of_value (| Value.Tuple [] |) |) in
                let matrix :=
                  M.alloc (|
                    M.of_value (|
                      Value.StructTuple
                        "tuples::Matrix"
                        [
                          A.to_value (M.read (| M.of_value (| UnsupportedLiteral |) |));
                          A.to_value (M.read (| M.of_value (| UnsupportedLiteral |) |));
                          A.to_value (M.read (| M.of_value (| UnsupportedLiteral |) |));
                          A.to_value (M.read (| M.of_value (| UnsupportedLiteral |) |))
                        ]
                    |)
                  |) in
                let _ :=
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (| "std::io::stdio::_print", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value (M.read (| M.of_value (| Value.String "" |) |));
                                        A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                                      ]
                                  |)
                                |)
                              |);
                              (* Unsize *)
                              M.pointer_coercion (|
                                M.alloc (|
                                  M.of_value (|
                                    Value.Array
                                      [
                                        A.to_value
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_debug",
                                              [ Ty.path "tuples::Matrix" ]
                                            |),
                                            [ matrix ]
                                          |))
                                      ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (| M.of_value (| Value.Tuple [] |) |) in
                M.alloc (| M.of_value (| Value.Tuple [] |) |)))
          ]
        |)
      |)))
  | _, _ => M.impossible
  end.
