(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn reverse(pair: (i32, bool)) -> (bool, i32) {
    // `let` can be used to bind the members of a tuple to variables
    let (int_param, bool_param) = pair;

    (bool_param, int_param)
}
*)
Definition reverse (pair : i32.t * bool.t) : M (bool.t * i32.t) :=
  ltac:(M.monadic (
    let pair := M.alloc (| pair |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          pair
          [
            fun (γ : M.Val (i32.t * bool.t)) =>
              match M.read (| γ |) with
              | (_, _) =>
                let γ0_0 := Tuple.Access.left γ in
                let γ0_1 := Tuple.Access.right γ in
                let int_param := M.copy (| γ0_0 |) in
                let bool_param := M.copy (| γ0_1 |) in
                M.alloc (| (M.read (| bool_param |), M.read (| int_param |)) |)
              end :
              M.Val (bool.t * i32.t)
          ])
    |)
  )).

Module  Matrix.
Section Matrix.
  Record t : Set := {
    x0 : f32.t;
    x1 : f32.t;
    x2 : f32.t;
    x3 : f32.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
  Definition Get_1 :=
    Ref.map (fun α => Some α.(x1)) (fun β α => Some (α <| x1 := β |>)).
  Definition Get_2 :=
    Ref.map (fun α => Some α.(x2)) (fun β α => Some (α <| x2 := β |>)).
  Definition Get_3 :=
    Ref.map (fun α => Some α.(x3)) (fun β α => Some (α <| x3 := β |>)).
End Matrix.
End Matrix.

Module  Impl_core_fmt_Debug_for_tuples_Matrix_t.
Section Impl_core_fmt_Debug_for_tuples_Matrix_t.
  Definition Self : Set := tuples.Matrix.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["debug_tuple_field4_finish"]
        (M.read (| f |))
        (M.read (| mk_str "Matrix" |))
        (pointer_coercion
          "Unsize"
          (borrow (tuples.Matrix.Get_0 (deref (M.read (| self |))))))
        (pointer_coercion
          "Unsize"
          (borrow (tuples.Matrix.Get_1 (deref (M.read (| self |))))))
        (pointer_coercion
          "Unsize"
          (borrow (tuples.Matrix.Get_2 (deref (M.read (| self |))))))
        (pointer_coercion
          "Unsize"
          (borrow
            (M.alloc (| borrow (tuples.Matrix.Get_3 (deref (M.read (| self |))))
            |)))))
      |)
    )).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_tuples_Matrix_t.
End Impl_core_fmt_Debug_for_tuples_Matrix_t.

(*
fn main() {
    // A tuple with a bunch of different types
    let long_tuple = (1u8, 2u16, 3u32, 4u64,
                      -1i8, -2i16, -3i32, -4i64,
                      0.1f32, 0.2f64,
                      'a', true);

    // Values can be extracted from the tuple using tuple indexing
    println!("long tuple first value: {}", long_tuple.0);
    println!("long tuple second value: {}", long_tuple.1);

    // Tuples can be tuple members
    let tuple_of_tuples = ((1u8, 2u16, 2u32), (4u64, -1i8), -2i16);

    // Tuples are printable
    println!("tuple of tuples: {:?}", tuple_of_tuples);
    
    // But long Tuples (more than 12 elements) cannot be printed
    // let too_long_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
    // println!("too long tuple: {:?}", too_long_tuple);
    // TODO ^ Uncomment the above 2 lines to see the compiler error

    let pair = (1, true);
    println!("pair is {:?}", pair);

    println!("the reversed pair is {:?}", reverse(pair));

    // To create one element tuples, the comma is required to tell them apart
    // from a literal surrounded by parentheses
    println!("one element tuple: {:?}", (5u32,));
    println!("just an integer: {:?}", (5u32));

    //tuples can be destructured to create bindings
    let tuple = (1, "hello", 4.5, true);

    let (a, b, c, d) = tuple;
    println!("{:?}, {:?}, {:?}, {:?}", a, b, c, d);

    let matrix = Matrix(1.1, 1.2, 2.1, 2.2);
    println!("{:?}", matrix);

}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let long_tuple :
          M.Val
            (((((((((((u8.t * u16.t) * u32.t) * u64.t) * i8.t) * i16.t) * i32.t)
            *
            i64.t)
            *
            f32.t)
            *
            f64.t)
            *
            char.t)
            *
            bool.t) :=
        M.alloc (|
          ((Integer.of_Z 1) : u8.t,
            (Integer.of_Z 2) : u16.t,
            (Integer.of_Z 3) : u32.t,
            (Integer.of_Z 4) : u64.t,
            (Integer.of_Z (-1)) : i8.t,
            (Integer.of_Z (-2)) : i16.t,
            (Integer.of_Z (-3)) : i32.t,
            (Integer.of_Z (-4)) : i64.t,
            M.read (| UnsupportedLiteral : M.Val f32.t |),
            M.read (| UnsupportedLiteral : M.Val f64.t |),
            "a"%char,
            true)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "long tuple first value: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow "Unknown Field"))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "long tuple second value: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow "Unknown Field"))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let tuple_of_tuples :
          M.Val ((((u8.t * u16.t) * u32.t) * (u64.t * i8.t)) * i16.t) :=
        M.alloc (|
          (((Integer.of_Z 1) : u8.t,
              (Integer.of_Z 2) : u16.t,
              (Integer.of_Z 2) : u32.t),
            ((Integer.of_Z 4) : u64.t, (Integer.of_Z (-1)) : i8.t),
            (Integer.of_Z (-2)) : i16.t)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "tuple of tuples: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow tuple_of_tuples))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let pair : M.Val (i32.t * bool.t) :=
        M.alloc (| ((Integer.of_Z 1) : i32.t, true) |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "pair is " |); M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow pair))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "the reversed pair is " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|(tuples.reverse (M.read (| pair |))) |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "one element tuple: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow (M.alloc (| ((Integer.of_Z 5) : u32.t) |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "just an integer: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow (M.alloc (| (Integer.of_Z 5) : u32.t |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let tuple : M.Val (((i32.t * (ref str.t)) * f64.t) * bool.t) :=
        M.alloc (|
          ((Integer.of_Z 1) : i32.t,
            M.read (| mk_str "hello" |),
            M.read (| UnsupportedLiteral : M.Val f64.t |),
            true)
        |) in
      ltac:
        (M.monadic_match_operator
          tuple
          [
            fun (γ : M.Val (((i32.t * (ref str.t)) * f64.t) * bool.t)) =>
              match M.read (| γ |) with
              | (_, _, _, _) =>
                let γ0_0 :=
                  Tuple.Access.left (Tuple.Access.left (Tuple.Access.left γ)) in
                let γ0_1 :=
                  Tuple.Access.right
                    (Tuple.Access.left (Tuple.Access.left γ)) in
                let γ0_2 := Tuple.Access.right (Tuple.Access.left γ) in
                let γ0_3 := Tuple.Access.right γ in
                let a := M.copy (| γ0_0 |) in
                let b := M.copy (| γ0_1 |) in
                let c := M.copy (| γ0_2 |) in
                let d := M.copy (| γ0_3 |) in
                let _ : M.Val unit :=
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (| mk_str "" |);
                                  M.read (| mk_str ", " |);
                                  M.read (| mk_str ", " |);
                                  M.read (| mk_str ", " |);
                                  M.read (| mk_str "
" |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                    (borrow a))
                                  |);
                                  M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                    (borrow b))
                                  |);
                                  M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                    (borrow c))
                                  |);
                                  M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                    (borrow d))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |) in
                let matrix : M.Val tuples.Matrix.t :=
                  M.alloc (|
                    tuples.Matrix.Build_t
                      (M.read (| UnsupportedLiteral : M.Val f32.t |))
                      (M.read (| UnsupportedLiteral : M.Val f32.t |))
                      (M.read (| UnsupportedLiteral : M.Val f32.t |))
                      (M.read (| UnsupportedLiteral : M.Val f32.t |))
                  |) in
                let _ : M.Val unit :=
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (| mk_str "" |);
                                  M.read (| mk_str "
" |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                    (borrow matrix))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |) in
                M.alloc (| tt |)
              end :
              M.Val unit
          ])
    |)
  )).
