(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn eat_box_i32(boxed_i32: Box<i32>) {
    println!("Destroying box that contains {}", boxed_i32);
}
*)
Definition eat_box_i32
    (boxed_i32 : alloc.boxed.Box.t i32.t alloc.boxed.Box.Default.A)
    : M unit :=
  ltac:(M.monadic ((
    let boxed_i32 := M.alloc (| boxed_i32 |) in
    M.read (|
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Destroying box that contains " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow boxed_i32))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).

(*
fn borrow_i32(borrowed_i32: &i32) {
    println!("This int is: {}", borrowed_i32);
}
*)
Definition borrow_i32 (borrowed_i32 : ref i32.t) : M unit :=
  ltac:(M.monadic ((
    let borrowed_i32 := M.alloc (| borrowed_i32 |) in
    M.read (|
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "This int is: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow borrowed_i32))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).

(*
fn main() {
    // Create a boxed i32, and a stacked i32
    let boxed_i32 = Box::new(5_i32);
    let stacked_i32 = 6_i32;

    // Borrow the contents of the box. Ownership is not taken,
    // so the contents can be borrowed again.
    borrow_i32(&boxed_i32);
    borrow_i32(&stacked_i32);

    {
        // Take a reference to the data contained inside the box
        let _ref_to_i32: &i32 = &boxed_i32;

        // Error!
        // Can't destroy `boxed_i32` while the inner value is borrowed later in scope.
        // eat_box_i32(boxed_i32);
        // FIXME ^ Comment out this line

        // Attempt to borrow `_ref_to_i32` after inner value is destroyed
        borrow_i32(_ref_to_i32);
        // `_ref_to_i32` goes out of scope and is no longer borrowed.
    }

    // `boxed_i32` can now give up ownership to `eat_box` and be destroyed
    eat_box_i32(boxed_i32);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let boxed_i32 : M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"]
            ((Integer.of_Z 5) : i32.t))
          |)
        |) in
      let stacked_i32 : M.Val i32.t := M.alloc (| (Integer.of_Z 6) : i32.t |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(scoping_rules_borrowing.borrow_i32
            (borrow (deref (M.read (| boxed_i32 |)))))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(scoping_rules_borrowing.borrow_i32 (borrow stacked_i32)) |)
        |) in
      let _ : M.Val unit :=
        let _ref_to_i32 : M.Val (ref i32.t) :=
          M.alloc (| borrow (deref (M.read (| boxed_i32 |))) |) in
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(scoping_rules_borrowing.borrow_i32
              (M.read (| _ref_to_i32 |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(scoping_rules_borrowing.eat_box_i32
            (M.read (| boxed_i32 |)))
          |)
        |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
