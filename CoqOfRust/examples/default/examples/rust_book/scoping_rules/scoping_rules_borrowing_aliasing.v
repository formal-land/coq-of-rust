(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Point.
Section Point.
  Record t : Set := {
    x : i32.t;
    y : i32.t;
    z : i32.t;
  }.
  
  Definition Get_x :=
    Ref.map (fun α => Some α.(x)) (fun β α => Some (α <| x := β |>)).
  Definition Get_y :=
    Ref.map (fun α => Some α.(y)) (fun β α => Some (α <| y := β |>)).
  Definition Get_z :=
    Ref.map (fun α => Some α.(z)) (fun β α => Some (α <| z := β |>)).
End Point.
End Point.

(*
fn main() {
    let mut point = Point { x: 0, y: 0, z: 0 };

    let borrowed_point = &point;
    let another_borrow = &point;

    // Data can be accessed via the references and the original owner
    println!(
        "Point has coordinates: ({}, {}, {})",
        borrowed_point.x, another_borrow.y, point.z
    );

    // Error! Can't borrow `point` as mutable because it's currently
    // borrowed as immutable.
    // let mutable_borrow = &mut point;
    // TODO ^ Try uncommenting this line

    // The borrowed values are used again here
    println!(
        "Point has coordinates: ({}, {}, {})",
        borrowed_point.x, another_borrow.y, point.z
    );

    // The immutable references are no longer used for the rest of the code so
    // it is possible to reborrow with a mutable reference.
    let mutable_borrow = &mut point;

    // Change data via mutable reference
    mutable_borrow.x = 5;
    mutable_borrow.y = 2;
    mutable_borrow.z = 1;

    // Error! Can't borrow `point` as immutable because it's currently
    // borrowed as mutable.
    // let y = &point.y;
    // TODO ^ Try uncommenting this line

    // Error! Can't print because `println!` takes an immutable reference.
    // println!("Point Z coordinate is {}", point.z);
    // TODO ^ Try uncommenting this line

    // Ok! Mutable references can be passed as immutable to `println!`
    println!(
        "Point has coordinates: ({}, {}, {})",
        mutable_borrow.x, mutable_borrow.y, mutable_borrow.z
    );

    // The mutable reference is no longer used for the rest of the code so it
    // is possible to reborrow
    let new_borrowed_point = &point;
    println!(
        "Point now has coordinates: ({}, {}, {})",
        new_borrowed_point.x, new_borrowed_point.y, new_borrowed_point.z
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let point : M.Val scoping_rules_borrowing_aliasing.Point.t :=
        M.alloc (|
          {|
            scoping_rules_borrowing_aliasing.Point.x :=
              (Integer.of_Z 0) : i32.t;
            scoping_rules_borrowing_aliasing.Point.y :=
              (Integer.of_Z 0) : i32.t;
            scoping_rules_borrowing_aliasing.Point.z :=
              (Integer.of_Z 0) : i32.t;
          |} : scoping_rules_borrowing_aliasing.Point.t
        |) in
      let borrowed_point :
          M.Val (ref scoping_rules_borrowing_aliasing.Point.t) :=
        M.alloc (| borrow point |) in
      let another_borrow :
          M.Val (ref scoping_rules_borrowing_aliasing.Point.t) :=
        M.alloc (| borrow point |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Point has coordinates: (" |);
                        M.read (| mk_str ", " |);
                        M.read (| mk_str ", " |);
                        M.read (| mk_str ")
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_aliasing.Point.Get_x
                              (deref (M.read (| borrowed_point |))))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_aliasing.Point.Get_y
                              (deref (M.read (| another_borrow |))))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_aliasing.Point.Get_z
                              point)))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Point has coordinates: (" |);
                        M.read (| mk_str ", " |);
                        M.read (| mk_str ", " |);
                        M.read (| mk_str ")
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_aliasing.Point.Get_x
                              (deref (M.read (| borrowed_point |))))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_aliasing.Point.Get_y
                              (deref (M.read (| another_borrow |))))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_aliasing.Point.Get_z
                              point)))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let mutable_borrow :
          M.Val (mut_ref scoping_rules_borrowing_aliasing.Point.t) :=
        M.alloc (| borrow_mut point |) in
      let _ : M.Val unit :=
        assign (|
          scoping_rules_borrowing_aliasing.Point.Get_x
            (deref (M.read (| mutable_borrow |))),
          (Integer.of_Z 5) : i32.t
        |) in
      let _ : M.Val unit :=
        assign (|
          scoping_rules_borrowing_aliasing.Point.Get_y
            (deref (M.read (| mutable_borrow |))),
          (Integer.of_Z 2) : i32.t
        |) in
      let _ : M.Val unit :=
        assign (|
          scoping_rules_borrowing_aliasing.Point.Get_z
            (deref (M.read (| mutable_borrow |))),
          (Integer.of_Z 1) : i32.t
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Point has coordinates: (" |);
                        M.read (| mk_str ", " |);
                        M.read (| mk_str ", " |);
                        M.read (| mk_str ")
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_aliasing.Point.Get_x
                              (deref (M.read (| mutable_borrow |))))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_aliasing.Point.Get_y
                              (deref (M.read (| mutable_borrow |))))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_aliasing.Point.Get_z
                              (deref (M.read (| mutable_borrow |))))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let new_borrowed_point :
          M.Val (ref scoping_rules_borrowing_aliasing.Point.t) :=
        M.alloc (| borrow point |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Point now has coordinates: (" |);
                        M.read (| mk_str ", " |);
                        M.read (| mk_str ", " |);
                        M.read (| mk_str ")
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_aliasing.Point.Get_x
                              (deref (M.read (| new_borrowed_point |))))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_aliasing.Point.Get_y
                              (deref (M.read (| new_borrowed_point |))))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_aliasing.Point.Get_z
                              (deref (M.read (| new_borrowed_point |))))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
