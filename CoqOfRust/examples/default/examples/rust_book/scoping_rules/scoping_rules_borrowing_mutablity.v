(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module  Book.
Section Book.
  Record t : Set := {
    author : ref str.t;
    title : ref str.t;
    year : u32.t;
  }.
  
  Definition Get_author :=
    Ref.map (fun α => Some α.(author)) (fun β α => Some (α <| author := β |>)).
  Definition Get_title :=
    Ref.map (fun α => Some α.(title)) (fun β α => Some (α <| title := β |>)).
  Definition Get_year :=
    Ref.map (fun α => Some α.(year)) (fun β α => Some (α <| year := β |>)).
End Book.
End Book.

Module  Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book_t.
Section Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book_t.
  Definition Self : Set := scoping_rules_borrowing_mutablity.Book.t.
  
  (*
  Clone
  *)
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Definition clone
      (self : ref Self)
      : M scoping_rules_borrowing_mutablity.Book.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.clone.AssertParamIsClone.t (ref str.t)))
            [
              fun (γ : M.Val (core.clone.AssertParamIsClone.t (ref str.t))) =>
                (ltac:
                  (M.monadic_match_operator
                    (DeclaredButUndefinedVariable
                      (A := core.clone.AssertParamIsClone.t (ref str.t)))
                    [
                      fun
                          (γ :
                            M.Val
                              (core.clone.AssertParamIsClone.t (ref str.t))) =>
                        (ltac:
                          (M.monadic_match_operator
                            (DeclaredButUndefinedVariable
                              (A := core.clone.AssertParamIsClone.t u32.t))
                            [
                              fun
                                  (γ :
                                    M.Val
                                      (core.clone.AssertParamIsClone.t
                                        u32.t)) =>
                                (deref (M.read (| self |))) :
                                M.Val scoping_rules_borrowing_mutablity.Book.t
                            ])) :
                        M.Val scoping_rules_borrowing_mutablity.Book.t
                    ])) :
                M.Val scoping_rules_borrowing_mutablity.Book.t
            ])
      |)
    ) : scoping_rules_borrowing_mutablity.Book.t)).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book_t.
End Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book_t.

Module  Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book_t.
Section Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book_t.
  Definition Self : Set := scoping_rules_borrowing_mutablity.Book.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book_t.
End Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book_t.

(*
fn borrow_book(book: &Book) {
    println!(
        "I immutably borrowed {} - {} edition",
        book.title, book.year
    );
}
*)
Definition borrow_book
    (book : ref scoping_rules_borrowing_mutablity.Book.t)
    : M unit :=
  ltac:(M.monadic ((
    let book := M.alloc (| book |) in
    M.read (|
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "I immutably borrowed " |);
                        M.read (| mk_str " - " |);
                        M.read (| mk_str " edition
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_mutablity.Book.Get_title
                              (deref (M.read (| book |))))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_mutablity.Book.Get_year
                              (deref (M.read (| book |))))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).

(*
fn new_edition(book: &mut Book) {
    book.year = 2014;
    println!("I mutably borrowed {} - {} edition", book.title, book.year);
}
*)
Definition new_edition
    (book : mut_ref scoping_rules_borrowing_mutablity.Book.t)
    : M unit :=
  ltac:(M.monadic ((
    let book := M.alloc (| book |) in
    M.read (|
      let _ : M.Val unit :=
        assign (|
          scoping_rules_borrowing_mutablity.Book.Get_year
            (deref (M.read (| book |))),
          (Integer.of_Z 2014) : u32.t
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "I mutably borrowed " |);
                        M.read (| mk_str " - " |);
                        M.read (| mk_str " edition
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_mutablity.Book.Get_title
                              (deref (M.read (| book |))))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (scoping_rules_borrowing_mutablity.Book.Get_year
                              (deref (M.read (| book |))))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).

(*
fn main() {
    // Create an immutable Book named `immutabook`
    let immutabook = Book {
        // string literals have type `&'static str`
        author: "Douglas Hofstadter",
        title: "Gödel, Escher, Bach",
        year: 1979,
    };

    // Create a mutable copy of `immutabook` and call it `mutabook`
    let mut mutabook = immutabook;

    // Immutably borrow an immutable object
    borrow_book(&immutabook);

    // Immutably borrow a mutable object
    borrow_book(&mutabook);

    // Borrow a mutable object as mutable
    new_edition(&mut mutabook);

    // Error! Cannot borrow an immutable object as mutable
    //new_edition(&mut immutabook);
    // FIXME ^ Comment out this line
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let immutabook : M.Val scoping_rules_borrowing_mutablity.Book.t :=
        M.alloc (|
          {|
            scoping_rules_borrowing_mutablity.Book.author :=
              M.read (| mk_str "Douglas Hofstadter" |);
            scoping_rules_borrowing_mutablity.Book.title :=
              M.read (| mk_str ("G" ++ String.String "246" "del, Escher, Bach")
              |);
            scoping_rules_borrowing_mutablity.Book.year :=
              (Integer.of_Z 1979) : u32.t;
          |} : scoping_rules_borrowing_mutablity.Book.t
        |) in
      let mutabook : M.Val scoping_rules_borrowing_mutablity.Book.t :=
        M.copy (| immutabook |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(scoping_rules_borrowing_mutablity.borrow_book
            (borrow immutabook))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(scoping_rules_borrowing_mutablity.borrow_book
            (borrow mutabook))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(scoping_rules_borrowing_mutablity.new_edition
            (borrow_mut mutabook))
          |)
        |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
