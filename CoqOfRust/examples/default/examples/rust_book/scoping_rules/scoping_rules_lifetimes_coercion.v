(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn multiply<'a>(first: &'a i32, second: &'a i32) -> i32 {
    first * second
}
*)
Definition multiply (first : ref i32.t) (second : ref i32.t) : M i32.t :=
  ltac:(M.monadic (
    let first := M.alloc (| first |) in
    let second := M.alloc (| second |) in
    M.call (|(ltac:(M.get_method (fun ℐ =>
        core.ops.arith.Mul.mul
          (Self := ref i32.t)
          (Rhs := ref i32.t)
          (Trait := ℐ)))
      (M.read (| first |))
      (M.read (| second |)))
    |)
  )).

(*
fn choose_first<'a: 'b, 'b>(first: &'a i32, _: &'b i32) -> &'b i32 {
    first
}
*)
Definition choose_first (first : ref i32.t) (arg : ref i32.t) : M (ref i32.t) :=
  ltac:(M.monadic (
    let first := M.alloc (| first |) in
    let arg := M.alloc (| arg |) in
    M.read (| first |)
  )).

(*
fn main() {
    let first = 2; // Longer lifetime

    {
        let second = 3; // Shorter lifetime

        println!("The product is {}", multiply(&first, &second));
        println!("{} is the first", choose_first(&first, &second));
    };
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let first : M.Val i32.t := M.alloc (| (Integer.of_Z 2) : i32.t |) in
      let _ : M.Val unit :=
        let second : M.Val i32.t := M.alloc (| (Integer.of_Z 3) : i32.t |) in
        let _ : M.Val unit :=
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(std.io.stdio._print
                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.read (| mk_str "The product is " |);
                          M.read (| mk_str "
" |)
                        ]
                      |))))
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.call (|(core.fmt.rt.Argument.t::["new_display"]
                            (borrow
                              (M.alloc (|
                                M.call (|(scoping_rules_lifetimes_coercion.multiply
                                  (borrow first)
                                  (borrow second))
                                |)
                              |))))
                          |)
                        ]
                      |)))))
                |)))
              |)
            |) in
          M.alloc (| tt |) in
        let _ : M.Val unit :=
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(std.io.stdio._print
                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.read (| mk_str "" |);
                          M.read (| mk_str " is the first
" |)
                        ]
                      |))))
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.call (|(core.fmt.rt.Argument.t::["new_display"]
                            (borrow
                              (M.alloc (|
                                M.call (|(scoping_rules_lifetimes_coercion.choose_first
                                  (borrow first)
                                  (borrow second))
                                |)
                              |))))
                          |)
                        ]
                      |)))))
                |)))
              |)
            |) in
          M.alloc (| tt |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
