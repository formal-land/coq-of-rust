(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Borrowed.
Section Borrowed.
  Record t : Set := {
    x0 : ref i32.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End Borrowed.
End Borrowed.

Module  Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Borrowed_t.
Section Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Borrowed_t.
  Definition Self : Set := scoping_rules_lifetimes_structs.Borrowed.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["debug_tuple_field1_finish"]
        (M.read (| f |))
        (M.read (| mk_str "Borrowed" |))
        (pointer_coercion
          "Unsize"
          (borrow
            (M.alloc (|
              borrow
                (scoping_rules_lifetimes_structs.Borrowed.Get_0
                  (deref (M.read (| self |))))
            |)))))
      |)
    )).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Borrowed_t.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Borrowed_t.

Module  NamedBorrowed.
Section NamedBorrowed.
  Record t : Set := {
    x : ref i32.t;
    y : ref i32.t;
  }.
  
  Definition Get_x :=
    Ref.map (fun α => Some α.(x)) (fun β α => Some (α <| x := β |>)).
  Definition Get_y :=
    Ref.map (fun α => Some α.(y)) (fun β α => Some (α <| y := β |>)).
End NamedBorrowed.
End NamedBorrowed.

Module  Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_NamedBorrowed_t.
Section Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_NamedBorrowed_t.
  Definition Self : Set := scoping_rules_lifetimes_structs.NamedBorrowed.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["debug_struct_field2_finish"]
        (M.read (| f |))
        (M.read (| mk_str "NamedBorrowed" |))
        (M.read (| mk_str "x" |))
        (pointer_coercion
          "Unsize"
          (borrow
            (scoping_rules_lifetimes_structs.NamedBorrowed.Get_x
              (deref (M.read (| self |))))))
        (M.read (| mk_str "y" |))
        (pointer_coercion
          "Unsize"
          (borrow
            (M.alloc (|
              borrow
                (scoping_rules_lifetimes_structs.NamedBorrowed.Get_y
                  (deref (M.read (| self |))))
            |)))))
      |)
    )).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_NamedBorrowed_t.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_NamedBorrowed_t.

Module Either.
  Inductive t : Set :=
  | Num (_ : i32.t)
  | Ref (_ : ref i32.t).
  
  Definition Get_Num_0 :=
    Ref.map
      (fun α => match α with | Num α0 => Some α0 | _ => None end)
      (fun β α => match α with | Num _ => Some (Num β) | _ => None end).
  
  Definition Get_Ref_0 :=
    Ref.map
      (fun α => match α with | Ref α0 => Some α0 | _ => None end)
      (fun β α => match α with | Ref _ => Some (Ref β) | _ => None end).
End Either.

Module  Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Either_t.
Section Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Either_t.
  Definition Self : Set := scoping_rules_lifetimes_structs.Either.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            self
            [
              fun (γ : M.Val (ref scoping_rules_lifetimes_structs.Either.t)) =>
                (let γ := deref (M.read (| γ |)) in
                match M.read (| γ |) with
                | scoping_rules_lifetimes_structs.Either.Num _ =>
                  let γ1_0 :=
                    scoping_rules_lifetimes_structs.Either.Get_Num_0 γ in
                  let __self_0 := M.alloc (| borrow γ1_0 |) in
                  M.alloc (|
                    M.call (|(core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      (M.read (| f |))
                      (M.read (| mk_str "Num" |))
                      (pointer_coercion "Unsize" (borrow __self_0)))
                    |)
                  |)
                | _ => M.break_match(||)
                end) :
                M.Val (core.result.Result.t unit core.fmt.Error.t);
              fun (γ : M.Val (ref scoping_rules_lifetimes_structs.Either.t)) =>
                (let γ := deref (M.read (| γ |)) in
                match M.read (| γ |) with
                | scoping_rules_lifetimes_structs.Either.Ref _ =>
                  let γ1_0 :=
                    scoping_rules_lifetimes_structs.Either.Get_Ref_0 γ in
                  let __self_0 := M.alloc (| borrow γ1_0 |) in
                  M.alloc (|
                    M.call (|(core.fmt.Formatter.t::["debug_tuple_field1_finish"]
                      (M.read (| f |))
                      (M.read (| mk_str "Ref" |))
                      (pointer_coercion "Unsize" (borrow __self_0)))
                    |)
                  |)
                | _ => M.break_match(||)
                end) :
                M.Val (core.result.Result.t unit core.fmt.Error.t)
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Either_t.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_structs_Either_t.

(*
fn main() {
    let x = 18;
    let y = 15;

    let single = Borrowed(&x);
    let double = NamedBorrowed { x: &x, y: &y };
    let reference = Either::Ref(&x);
    let number = Either::Num(y);

    println!("x is borrowed in {:?}", single);
    println!("x and y are borrowed in {:?}", double);
    println!("x is borrowed in {:?}", reference);
    println!("y is *not* borrowed in {:?}", number);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let x : M.Val i32.t := M.alloc (| (Integer.of_Z 18) : i32.t |) in
      let y : M.Val i32.t := M.alloc (| (Integer.of_Z 15) : i32.t |) in
      let single : M.Val scoping_rules_lifetimes_structs.Borrowed.t :=
        M.alloc (| scoping_rules_lifetimes_structs.Borrowed.Build_t (borrow x)
        |) in
      let double : M.Val scoping_rules_lifetimes_structs.NamedBorrowed.t :=
        M.alloc (|
          {|
            scoping_rules_lifetimes_structs.NamedBorrowed.x := borrow x;
            scoping_rules_lifetimes_structs.NamedBorrowed.y := borrow y;
          |} : scoping_rules_lifetimes_structs.NamedBorrowed.t
        |) in
      let reference : M.Val scoping_rules_lifetimes_structs.Either.t :=
        M.alloc (| scoping_rules_lifetimes_structs.Either.Ref (borrow x) |) in
      let number : M.Val scoping_rules_lifetimes_structs.Either.t :=
        M.alloc (| scoping_rules_lifetimes_structs.Either.Num (M.read (| y |))
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "x is borrowed in " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow single))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "x and y are borrowed in " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow double))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "x is borrowed in " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow reference))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "y is *not* borrowed in " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow number))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
