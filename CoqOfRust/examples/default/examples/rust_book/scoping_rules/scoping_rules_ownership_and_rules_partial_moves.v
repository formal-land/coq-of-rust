(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    #[derive(Debug)]
    struct Person {
        name: String,
        age: Box<u8>,
    }

    let person = Person {
        name: String::from("Alice"),
        age: Box::new(20),
    };

    // `name` is moved out of person, but `age` is referenced
    let Person { name, ref age } = person;

    println!("The person's age is {}", age);

    println!("The person's name is {}", name);

    // Error! borrow of partially moved value: `person` partial move occurs
    //println!("The person struct is {:?}", person);

    // `person` cannot be used but `person.age` can be used as it is not moved
    println!("The person's age from person struct is {}", person.age);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let person :
          M.Val scoping_rules_ownership_and_rules_partial_moves.main.Person.t :=
        M.alloc (|
          {|
            scoping_rules_ownership_and_rules_partial_moves.main.Person.name :=
              M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.convert.From.from
                    (Self := alloc.string.String.t)
                    (T := ref str.t)
                    (Trait := ℐ)))
                (M.read (| mk_str "Alice" |)))
              |);
            scoping_rules_ownership_and_rules_partial_moves.main.Person.age :=
              M.call (|((alloc.boxed.Box.t u8.t alloc.alloc.Global.t)::["new"]
                ((Integer.of_Z 20) : u8.t))
              |);
          |} : scoping_rules_ownership_and_rules_partial_moves.main.Person.t
        |) in
      ltac:
        (M.monadic_match_operator
          person
          [
            fun
                (γ :
                  M.Val
                    scoping_rules_ownership_and_rules_partial_moves.main.Person.t) =>
              match M.read (| γ |) with
              |
                  {|
                    scoping_rules_ownership_and_rules_partial_moves.main.Person.name
                      :=
                      _;
                    scoping_rules_ownership_and_rules_partial_moves.main.Person.age
                      :=
                      _;
                  |}
                  =>
                let γ0_0 :=
                  scoping_rules_ownership_and_rules_partial_moves.main.Person.Get_name
                    γ in
                let γ0_1 :=
                  scoping_rules_ownership_and_rules_partial_moves.main.Person.Get_age
                    γ in
                let name := M.copy (| γ0_0 |) in
                let age := M.alloc (| borrow γ0_1 |) in
                let _ : M.Val unit :=
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (| mk_str "The person's age is " |);
                                  M.read (| mk_str "
" |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                    (borrow age))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |) in
                let _ : M.Val unit :=
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (| mk_str "The person's name is " |);
                                  M.read (| mk_str "
" |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                    (borrow name))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |) in
                let _ : M.Val unit :=
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (|
                                    mk_str
                                      "The person's age from person struct is "
                                  |);
                                  M.read (| mk_str "
" |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                    (borrow
                                      (scoping_rules_ownership_and_rules_partial_moves.main.Person.Get_age
                                        person)))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |) in
                M.alloc (| tt |)
              end :
              M.Val unit
          ])
    |)
  )).

Module  Person.
Section Person.
  Record t : Set := {
    name : alloc.string.String.t;
    age : alloc.boxed.Box.t u8.t alloc.boxed.Box.Default.A;
  }.
  
  Definition Get_name :=
    Ref.map (fun α => Some α.(name)) (fun β α => Some (α <| name := β |>)).
  Definition Get_age :=
    Ref.map (fun α => Some α.(age)) (fun β α => Some (α <| age := β |>)).
End Person.
End Person.

Module  Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person_t.
Section Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person_t.
  Definition Self : Set :=
    scoping_rules_ownership_and_rules_partial_moves.main.Person.t.
  
  (*
      Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["debug_struct_field2_finish"]
        (M.read (| f |))
        (M.read (| mk_str "Person" |))
        (M.read (| mk_str "name" |))
        (pointer_coercion
          "Unsize"
          (borrow
            (scoping_rules_ownership_and_rules_partial_moves.main.Person.Get_name
              (deref (M.read (| self |))))))
        (M.read (| mk_str "age" |))
        (pointer_coercion
          "Unsize"
          (borrow
            (M.alloc (|
              borrow
                (scoping_rules_ownership_and_rules_partial_moves.main.Person.Get_age
                  (deref (M.read (| self |))))
            |)))))
      |)
    )).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person_t.
End Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person_t.
