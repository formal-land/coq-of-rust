(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn create_box() {
    // Allocate an integer on the heap
    let _box1 = Box::new(3i32);

    // `_box1` is destroyed here, and memory gets freed
}
*)
Definition create_box : M unit :=
  ltac:(M.monadic (
    M.read (|
      let _box1 : M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"]
            ((Integer.of_Z 3) : i32.t))
          |)
        |) in
      M.alloc (| tt |)
    |)
  )).

(*
fn main() {
    // Allocate an integer on the heap
    let _box2 = Box::new(5i32);

    // A nested scope:
    {
        // Allocate an integer on the heap
        let _box3 = Box::new(4i32);

        // `_box3` is destroyed here, and memory gets freed
    }

    // Creating lots of boxes just for fun
    // There's no need to manually free memory!
    for _ in 0u32..1_000 {
        create_box();
    }

    // `_box2` is destroyed here, and memory gets freed
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let _box2 : M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"]
            ((Integer.of_Z 5) : i32.t))
          |)
        |) in
      let _ : M.Val unit :=
        let _box3 : M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) :=
          M.alloc (|
            M.call (|((alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"]
              ((Integer.of_Z 4) : i32.t))
            |)
          |) in
        M.alloc (| tt |) in
      use
        (ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.iter.traits.collect.IntoIterator.into_iter
                    (Self := core.ops.range.Range.t u32.t)
                    (Trait := ℐ)))
                ({|
                  core.ops.range.Range.start := (Integer.of_Z 0) : u32.t;
                  core.ops.range.Range.end_ := (Integer.of_Z 1000) : u32.t;
                |} : core.ops.range.Range.t u32.t))
              |)
            |))
            [
              fun (γ : M.Val (core.ops.range.Range.t u32.t)) =>
                (let iter := M.copy (| γ |) in
                M.loop
                  (let _ : M.Val unit :=
                    ltac:
                      (M.monadic_match_operator
                        (M.alloc (|
                          M.call (|(ltac:(M.get_method (fun ℐ =>
                              core.iter.traits.iterator.Iterator.next
                                (Self := core.ops.range.Range.t u32.t)
                                (Trait := ℐ)))
                            (borrow_mut iter))
                          |)
                        |))
                        [
                          fun (γ : M.Val (core.option.Option.t u32.t)) =>
                            match M.read (| γ |) with
                            | core.option.Option.None =>
                              M.alloc (|
                                (never_to_any (B := unit)) (|
                                  M.read (| M.break |)
                                |)
                              |)
                            | _ => M.break_match(||)
                            end :
                            M.Val unit;
                          fun (γ : M.Val (core.option.Option.t u32.t)) =>
                            match M.read (| γ |) with
                            | core.option.Option.Some _ =>
                              let γ0_0 := core.option.Option.Get_Some_0 γ in
                              let _ : M.Val unit :=
                                M.alloc (|
                                  M.call (|scoping_rules_raii.create_box |)
                                |) in
                              M.alloc (| tt |)
                            | _ => M.break_match(||)
                            end :
                            M.Val unit
                        ]) in
                  M.alloc (| tt |))) :
                M.Val unit
            ]))
    |)
  )).
