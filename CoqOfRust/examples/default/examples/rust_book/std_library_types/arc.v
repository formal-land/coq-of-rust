(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // This variable declaration is where its value is specified.
    let apple = Arc::new("the same apple");

    for _ in 0..10 {
        // Here there is no value specification as it is a pointer to a
        // reference in the memory heap.
        let apple = Arc::clone(&apple);

        thread::spawn(move || {
            // As Arc was used, threads can be spawned using the value allocated
            // in the Arc variable pointer's location.
            println!("{:?}", apple);
        });
    }

    // Make sure all Arc instances are printed from spawned threads.
    thread::sleep(Duration::from_secs(1));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let apple : M.Val (alloc.sync.Arc.t (ref str.t) alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((alloc.sync.Arc.t (ref str.t) alloc.alloc.Global.t)::["new"]
            (M.read (| mk_str "the same apple" |)))
          |)
        |) in
      let _ : M.Val unit :=
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self := core.ops.range.Range.t i32.t)
                      (Trait := ℐ)))
                  ({|
                    core.ops.range.Range.start := (Integer.of_Z 0) : i32.t;
                    core.ops.range.Range.end_ := (Integer.of_Z 10) : i32.t;
                  |} : core.ops.range.Range.t i32.t))
                |)
              |))
              [
                fun (γ : M.Val (core.ops.range.Range.t i32.t)) =>
                  (let iter := M.copy (| γ |) in
                  M.loop
                    (let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self := core.ops.range.Range.t i32.t)
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun (γ : M.Val (core.option.Option.t i32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  (never_to_any (B := unit)) (|
                                    M.read (| M.break |)
                                  |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun (γ : M.Val (core.option.Option.t i32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                let apple :
                                    M.Val
                                      (alloc.sync.Arc.t
                                        (ref str.t)
                                        alloc.alloc.Global.t) :=
                                  M.alloc (|
                                    M.call (|(ltac:(M.get_method (fun ℐ =>
                                        core.clone.Clone.clone
                                          (Self :=
                                            alloc.sync.Arc.t
                                              (ref str.t)
                                              alloc.alloc.Global.t)
                                          (Trait := ℐ)))
                                      (borrow apple))
                                    |)
                                  |) in
                                let _ : M.Val (std.thread.JoinHandle.t unit) :=
                                  M.alloc (|
                                    M.call (|(std.thread.spawn
                                      (fun (α0 : unit) =>
                                        (ltac:
                                          (M.monadic_match_operator
                                            (M.alloc (| α0 |))
                                            [
                                              fun γ =>
                                                (M.read (|
                                                  let _ : M.Val unit :=
                                                    let _ : M.Val unit :=
                                                      M.alloc (|
                                                        M.call (|(std.io.stdio._print
                                                          (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                                            (pointer_coercion
                                                              "Unsize"
                                                              (borrow
                                                                (M.alloc (|
                                                                  [
                                                                    M.read (|
                                                                      mk_str ""
                                                                    |);
                                                                    M.read (|
                                                                      mk_str "
"
                                                                    |)
                                                                  ]
                                                                |))))
                                                            (pointer_coercion
                                                              "Unsize"
                                                              (borrow
                                                                (M.alloc (|
                                                                  [
                                                                    M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                                                      (borrow
                                                                        apple))
                                                                    |)
                                                                  ]
                                                                |)))))
                                                          |)))
                                                        |)
                                                      |) in
                                                    M.alloc (| tt |) in
                                                  M.alloc (| tt |)
                                                |)) :
                                                unit
                                            ])) :
                                        unit))
                                    |)
                                  |) in
                                M.alloc (| tt |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |))) :
                  M.Val unit
              ])) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(std.thread.sleep
            (M.call (|(core.time.Duration.t::["from_secs"]
              ((Integer.of_Z 1) : u64.t))
            |)))
          |)
        |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
