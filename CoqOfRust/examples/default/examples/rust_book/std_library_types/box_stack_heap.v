(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module  Point.
Section Point.
  Record t : Set := {
    x : f64.t;
    y : f64.t;
  }.
  
  Definition Get_x :=
    Ref.map (fun α => Some α.(x)) (fun β α => Some (α <| x := β |>)).
  Definition Get_y :=
    Ref.map (fun α => Some α.(y)) (fun β α => Some (α <| y := β |>)).
End Point.
End Point.

Module  Impl_core_fmt_Debug_for_box_stack_heap_Point_t.
Section Impl_core_fmt_Debug_for_box_stack_heap_Point_t.
  Definition Self : Set := box_stack_heap.Point.t.
  
  (*
  Debug
  *)
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["debug_struct_field2_finish"]
        (M.read (| f |))
        (M.read (| mk_str "Point" |))
        (M.read (| mk_str "x" |))
        (pointer_coercion
          "Unsize"
          (borrow (box_stack_heap.Point.Get_x (deref (M.read (| self |))))))
        (M.read (| mk_str "y" |))
        (pointer_coercion
          "Unsize"
          (borrow
            (M.alloc (|
              borrow (box_stack_heap.Point.Get_y (deref (M.read (| self |))))
            |)))))
      |)
    )).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_box_stack_heap_Point_t.
End Impl_core_fmt_Debug_for_box_stack_heap_Point_t.

Module  Impl_core_clone_Clone_for_box_stack_heap_Point_t.
Section Impl_core_clone_Clone_for_box_stack_heap_Point_t.
  Definition Self : Set := box_stack_heap.Point.t.
  
  (*
  Clone
  *)
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Definition clone (self : ref Self) : M box_stack_heap.Point.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.clone.AssertParamIsClone.t f64.t))
            [
              fun γ =>
                (deref (M.read (| self |))) : M.Val box_stack_heap.Point.t
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_box_stack_heap_Point_t.
End Impl_core_clone_Clone_for_box_stack_heap_Point_t.

Module  Impl_core_marker_Copy_for_box_stack_heap_Point_t.
Section Impl_core_marker_Copy_for_box_stack_heap_Point_t.
  Definition Self : Set := box_stack_heap.Point.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_box_stack_heap_Point_t.
End Impl_core_marker_Copy_for_box_stack_heap_Point_t.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module  Rectangle.
Section Rectangle.
  Record t : Set := {
    top_left : box_stack_heap.Point.t;
    bottom_right : box_stack_heap.Point.t;
  }.
  
  Definition Get_top_left :=
    Ref.map
      (fun α => Some α.(top_left))
      (fun β α => Some (α <| top_left := β |>)).
  Definition Get_bottom_right :=
    Ref.map
      (fun α => Some α.(bottom_right))
      (fun β α => Some (α <| bottom_right := β |>)).
End Rectangle.
End Rectangle.

(*
fn origin() -> Point {
    Point { x: 0.0, y: 0.0 }
}
*)
Definition origin : M box_stack_heap.Point.t :=
  ltac:(M.monadic (
    {|
      box_stack_heap.Point.x := M.read (| UnsupportedLiteral : M.Val f64.t |);
      box_stack_heap.Point.y := M.read (| UnsupportedLiteral : M.Val f64.t |);
    |}
  )).

(*
fn boxed_origin() -> Box<Point> {
    // Allocate this point on the heap, and return a pointer to it
    Box::new(Point { x: 0.0, y: 0.0 })
}
*)
Definition boxed_origin
    : M (alloc.boxed.Box.t box_stack_heap.Point.t alloc.boxed.Box.Default.A) :=
  ltac:(M.monadic (
    M.call (|((alloc.boxed.Box.t
          box_stack_heap.Point.t
          alloc.alloc.Global.t)::["new"]
      {|
        box_stack_heap.Point.x := M.read (| UnsupportedLiteral : M.Val f64.t |);
        box_stack_heap.Point.y := M.read (| UnsupportedLiteral : M.Val f64.t |);
      |})
    |)
  )).

(*
fn main() {
    // (all the type annotations are superfluous)
    // Stack allocated variables
    let point: Point = origin();
    let rectangle: Rectangle = Rectangle {
        top_left: origin(),
        bottom_right: Point { x: 3.0, y: -4.0 },
    };

    // Heap allocated rectangle
    let boxed_rectangle: Box<Rectangle> = Box::new(Rectangle {
        top_left: origin(),
        bottom_right: Point { x: 3.0, y: -4.0 },
    });

    // The output of functions can be boxed
    let boxed_point: Box<Point> = Box::new(origin());

    // Double indirection
    let box_in_a_box: Box<Box<Point>> = Box::new(boxed_origin());

    println!(
        "Point occupies {} bytes on the stack",
        mem::size_of_val(&point)
    );
    println!(
        "Rectangle occupies {} bytes on the stack",
        mem::size_of_val(&rectangle)
    );

    // box size == pointer size
    println!(
        "Boxed point occupies {} bytes on the stack",
        mem::size_of_val(&boxed_point)
    );
    println!(
        "Boxed rectangle occupies {} bytes on the stack",
        mem::size_of_val(&boxed_rectangle)
    );
    println!(
        "Boxed box occupies {} bytes on the stack",
        mem::size_of_val(&box_in_a_box)
    );

    // Copy the data contained in `boxed_point` into `unboxed_point`
    let unboxed_point: Point = *boxed_point;
    println!(
        "Unboxed point occupies {} bytes on the stack",
        mem::size_of_val(&unboxed_point)
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let point : M.Val box_stack_heap.Point.t :=
        M.alloc (| M.call (|box_stack_heap.origin |) |) in
      let rectangle : M.Val box_stack_heap.Rectangle.t :=
        M.alloc (|
          {|
            box_stack_heap.Rectangle.top_left :=
              M.call (|box_stack_heap.origin |);
            box_stack_heap.Rectangle.bottom_right :=
              {|
                box_stack_heap.Point.x :=
                  M.read (| UnsupportedLiteral : M.Val f64.t |);
                box_stack_heap.Point.y :=
                  M.read (| UnsupportedLiteral : M.Val f64.t |);
              |};
          |}
        |) in
      let boxed_rectangle :
          M.Val
            (alloc.boxed.Box.t
              box_stack_heap.Rectangle.t
              alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((alloc.boxed.Box.t
                box_stack_heap.Rectangle.t
                alloc.alloc.Global.t)::["new"]
            {|
              box_stack_heap.Rectangle.top_left :=
                M.call (|box_stack_heap.origin |);
              box_stack_heap.Rectangle.bottom_right :=
                {|
                  box_stack_heap.Point.x :=
                    M.read (| UnsupportedLiteral : M.Val f64.t |);
                  box_stack_heap.Point.y :=
                    M.read (| UnsupportedLiteral : M.Val f64.t |);
                |};
            |})
          |)
        |) in
      let boxed_point :
          M.Val
            (alloc.boxed.Box.t box_stack_heap.Point.t alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((alloc.boxed.Box.t
                box_stack_heap.Point.t
                alloc.alloc.Global.t)::["new"]
            (M.call (|box_stack_heap.origin |)))
          |)
        |) in
      let box_in_a_box :
          M.Val
            (alloc.boxed.Box.t
              (alloc.boxed.Box.t box_stack_heap.Point.t alloc.alloc.Global.t)
              alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((alloc.boxed.Box.t
                (alloc.boxed.Box.t box_stack_heap.Point.t alloc.alloc.Global.t)
                alloc.alloc.Global.t)::["new"]
            (M.call (|box_stack_heap.boxed_origin |)))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Point occupies " |);
                        M.read (| mk_str " bytes on the stack
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(core.mem.size_of_val (borrow point)) |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Rectangle occupies " |);
                        M.read (| mk_str " bytes on the stack
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(core.mem.size_of_val (borrow rectangle))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Boxed point occupies " |);
                        M.read (| mk_str " bytes on the stack
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(core.mem.size_of_val
                                (borrow boxed_point))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Boxed rectangle occupies " |);
                        M.read (| mk_str " bytes on the stack
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(core.mem.size_of_val
                                (borrow boxed_rectangle))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Boxed box occupies " |);
                        M.read (| mk_str " bytes on the stack
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(core.mem.size_of_val
                                (borrow box_in_a_box))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let unboxed_point : M.Val box_stack_heap.Point.t :=
        M.copy (| deref (M.read (| boxed_point |)) |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Unboxed point occupies " |);
                        M.read (| mk_str " bytes on the stack
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(core.mem.size_of_val
                                (borrow unboxed_point))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
