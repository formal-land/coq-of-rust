(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn call(number: &str) -> &str {
    match number {
        "798-1364" => {
            "We're sorry, the call cannot be completed as dialed. 
            Please hang up and try again."
        }
        "645-7689" => {
            "Hello, this is Mr. Awesome's Pizza. My name is Fred.
            What can I get for you today?"
        }
        _ => "Hi! Who is this again?",
    }
}
*)
Definition call (number : ref str.t) : M (ref str.t) :=
  ltac:(M.monadic (
    let number := M.alloc (| number |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          number
          [
            fun (γ : M.Val (ref str.t)) =>
              (M.alloc (|
                M.read (|
                  mk_str
                    "We're sorry, the call cannot be completed as dialed. 
            Please hang up and try again."
                |)
              |)) :
              M.Val (ref str.t);
            fun (γ : M.Val (ref str.t)) =>
              (M.alloc (|
                M.read (|
                  mk_str
                    "Hello, this is Mr. Awesome's Pizza. My name is Fred.
            What can I get for you today?"
                |)
              |)) :
              M.Val (ref str.t);
            fun (γ : M.Val (ref str.t)) =>
              (M.alloc (| M.read (| mk_str "Hi! Who is this again?" |) |)) :
              M.Val (ref str.t)
          ])
    |)
  )).

(*
fn main() {
    let mut contacts = HashMap::new();

    contacts.insert("Daniel", "798-1364");
    contacts.insert("Ashley", "645-7689");
    contacts.insert("Katie", "435-8291");
    contacts.insert("Robert", "956-1745");

    // Takes a reference and returns Option<&V>
    match contacts.get(&"Daniel") {
        Some(&number) => println!("Calling Daniel: {}", call(number)),
        _ => println!("Don't have Daniel's number."),
    }

    // `HashMap::insert()` returns `None`
    // if the inserted value is new, `Some(value)` otherwise
    contacts.insert("Daniel", "164-6743");

    match contacts.get(&"Ashley") {
        Some(&number) => println!("Calling Ashley: {}", call(number)),
        _ => println!("Don't have Ashley's number."),
    }

    contacts.remove(&"Ashley");

    // `HashMap::iter()` returns an iterator that yields
    // (&'a key, &'a value) pairs in arbitrary order.
    for (contact, &number) in contacts.iter() {
        println!("Calling {}: {}", contact, call(number));
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let contacts :
          M.Val
            (std.collections.hash.map.HashMap.t
              (ref str.t)
              (ref str.t)
              std.hash.random.RandomState.t) :=
        M.alloc (|
          M.call (|(std.collections.hash.map.HashMap.t
              (ref str.t)
              (ref str.t)
              std.hash.random.RandomState.t)::["new"]
          |)
        |) in
      let _ : M.Val (core.option.Option.t (ref str.t)) :=
        M.alloc (|
          M.call (|((std.collections.hash.map.HashMap.t
                (ref str.t)
                (ref str.t)
                std.hash.random.RandomState.t)::["insert"]
            (borrow_mut contacts)
            (M.read (| mk_str "Daniel" |))
            (M.read (| mk_str "798-1364" |)))
          |)
        |) in
      let _ : M.Val (core.option.Option.t (ref str.t)) :=
        M.alloc (|
          M.call (|((std.collections.hash.map.HashMap.t
                (ref str.t)
                (ref str.t)
                std.hash.random.RandomState.t)::["insert"]
            (borrow_mut contacts)
            (M.read (| mk_str "Ashley" |))
            (M.read (| mk_str "645-7689" |)))
          |)
        |) in
      let _ : M.Val (core.option.Option.t (ref str.t)) :=
        M.alloc (|
          M.call (|((std.collections.hash.map.HashMap.t
                (ref str.t)
                (ref str.t)
                std.hash.random.RandomState.t)::["insert"]
            (borrow_mut contacts)
            (M.read (| mk_str "Katie" |))
            (M.read (| mk_str "435-8291" |)))
          |)
        |) in
      let _ : M.Val (core.option.Option.t (ref str.t)) :=
        M.alloc (|
          M.call (|((std.collections.hash.map.HashMap.t
                (ref str.t)
                (ref str.t)
                std.hash.random.RandomState.t)::["insert"]
            (borrow_mut contacts)
            (M.read (| mk_str "Robert" |))
            (M.read (| mk_str "956-1745" |)))
          |)
        |) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|((std.collections.hash.map.HashMap.t
                    (ref str.t)
                    (ref str.t)
                    std.hash.random.RandomState.t)::["get"]
                (borrow contacts)
                (borrow (mk_str "Daniel")))
              |)
            |))
            [
              fun (γ : M.Val (core.option.Option.t (ref (ref str.t)))) =>
                match M.read (| γ |) with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let γ0_0 := deref (M.read (| γ0_0 |)) in
                  let number := M.copy (| γ0_0 |) in
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (| mk_str "Calling Daniel: " |);
                                  M.read (| mk_str "
" |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                    (borrow
                                      (M.alloc (|
                                        M.call (|(hash_map.call
                                          (M.read (| number |)))
                                        |)
                                      |))))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |)
                | _ => M.break_match(||)
                end :
                M.Val unit;
              fun (γ : M.Val (core.option.Option.t (ref (ref str.t)))) =>
                (let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_const"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "Don't have Daniel's number.
"
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)) :
                M.Val unit
            ]) in
      let _ : M.Val (core.option.Option.t (ref str.t)) :=
        M.alloc (|
          M.call (|((std.collections.hash.map.HashMap.t
                (ref str.t)
                (ref str.t)
                std.hash.random.RandomState.t)::["insert"]
            (borrow_mut contacts)
            (M.read (| mk_str "Daniel" |))
            (M.read (| mk_str "164-6743" |)))
          |)
        |) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|((std.collections.hash.map.HashMap.t
                    (ref str.t)
                    (ref str.t)
                    std.hash.random.RandomState.t)::["get"]
                (borrow contacts)
                (borrow (mk_str "Ashley")))
              |)
            |))
            [
              fun (γ : M.Val (core.option.Option.t (ref (ref str.t)))) =>
                match M.read (| γ |) with
                | core.option.Option.Some _ =>
                  let γ0_0 := core.option.Option.Get_Some_0 γ in
                  let γ0_0 := deref (M.read (| γ0_0 |)) in
                  let number := M.copy (| γ0_0 |) in
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (| mk_str "Calling Ashley: " |);
                                  M.read (| mk_str "
" |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                    (borrow
                                      (M.alloc (|
                                        M.call (|(hash_map.call
                                          (M.read (| number |)))
                                        |)
                                      |))))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |)
                | _ => M.break_match(||)
                end :
                M.Val unit;
              fun (γ : M.Val (core.option.Option.t (ref (ref str.t)))) =>
                (let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_const"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "Don't have Ashley's number.
"
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)) :
                M.Val unit
            ]) in
      let _ : M.Val (core.option.Option.t (ref str.t)) :=
        M.alloc (|
          M.call (|((std.collections.hash.map.HashMap.t
                (ref str.t)
                (ref str.t)
                std.hash.random.RandomState.t)::["remove"]
            (borrow_mut contacts)
            (borrow (mk_str "Ashley")))
          |)
        |) in
      use
        (ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.iter.traits.collect.IntoIterator.into_iter
                    (Self :=
                      std.collections.hash.map.Iter.t (ref str.t) (ref str.t))
                    (Trait := ℐ)))
                (M.call (|((std.collections.hash.map.HashMap.t
                      (ref str.t)
                      (ref str.t)
                      std.hash.random.RandomState.t)::["iter"]
                  (borrow contacts))
                |)))
              |)
            |))
            [
              fun
                  (γ :
                    M.Val
                      (std.collections.hash.map.Iter.t
                        (ref str.t)
                        (ref str.t))) =>
                (let iter := M.copy (| γ |) in
                M.loop
                  (let _ : M.Val unit :=
                    ltac:
                      (M.monadic_match_operator
                        (M.alloc (|
                          M.call (|(ltac:(M.get_method (fun ℐ =>
                              core.iter.traits.iterator.Iterator.next
                                (Self :=
                                  std.collections.hash.map.Iter.t
                                    (ref str.t)
                                    (ref str.t))
                                (Trait := ℐ)))
                            (borrow_mut iter))
                          |)
                        |))
                        [
                          fun
                              (γ :
                                M.Val
                                  (core.option.Option.t
                                    ((ref (ref str.t)) * (ref (ref str.t))))) =>
                            match M.read (| γ |) with
                            | core.option.Option.None =>
                              M.alloc (| never_to_any (| M.read (| M.break |) |)
                              |)
                            | _ => M.break_match(||)
                            end :
                            M.Val unit;
                          fun
                              (γ :
                                M.Val
                                  (core.option.Option.t
                                    ((ref (ref str.t)) * (ref (ref str.t))))) =>
                            match M.read (| γ |) with
                            | core.option.Option.Some _ =>
                              let γ0_0 := core.option.Option.Get_Some_0 γ in
                              match M.read (| γ0_0 |) with
                              | (_, _) =>
                                let γ1_0 := Tuple.Access.left γ0_0 in
                                let γ1_1 := Tuple.Access.right γ0_0 in
                                let contact := M.copy (| γ1_0 |) in
                                let γ1_1 := deref (M.read (| γ1_1 |)) in
                                let number := M.copy (| γ1_1 |) in
                                let _ : M.Val unit :=
                                  let _ : M.Val unit :=
                                    M.alloc (|
                                      M.call (|(std.io.stdio._print
                                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                          (pointer_coercion
                                            "Unsize"
                                            (borrow
                                              (M.alloc (|
                                                [
                                                  M.read (| mk_str "Calling "
                                                  |);
                                                  M.read (| mk_str ": " |);
                                                  M.read (| mk_str "
" |)
                                                ]
                                              |))))
                                          (pointer_coercion
                                            "Unsize"
                                            (borrow
                                              (M.alloc (|
                                                [
                                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                    (borrow contact))
                                                  |);
                                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                    (borrow
                                                      (M.alloc (|
                                                        M.call (|(hash_map.call
                                                          (M.read (| number |)))
                                                        |)
                                                      |))))
                                                  |)
                                                ]
                                              |)))))
                                        |)))
                                      |)
                                    |) in
                                  M.alloc (| tt |) in
                                M.alloc (| tt |)
                              end
                            | _ => M.break_match(||)
                            end :
                            M.Val unit
                        ]) in
                  M.alloc (| tt |))) :
                M.Val unit
            ]))
    |)
  )).
