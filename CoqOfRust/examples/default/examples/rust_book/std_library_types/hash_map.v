(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn call(number: &str) -> &str {
    match number {
        "798-1364" => {
            "We're sorry, the call cannot be completed as dialed. 
            Please hang up and try again."
        }
        "645-7689" => {
            "Hello, this is Mr. Awesome's Pizza. My name is Fred.
            What can I get for you today?"
        }
        _ => "Hi! Who is this again?",
    }
}
*)
Definition call (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [ number ] =>
    ltac:(M.monadic
      (let number := M.alloc (| number |) in
      M.read (|
        M.match_operator (|
          Some (Ty.apply (Ty.path "&") [] [ Ty.path "str" ]),
          number,
          [
            fun γ =>
              ltac:(M.monadic
                (let _ :=
                  is_constant_or_break_match (| M.read (| γ |), mk_str (| "798-1364" |) |) in
                M.alloc (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      mk_str (|
                        "We're sorry, the call cannot be completed as dialed. 
            Please hang up and try again."
                      |)
                    |)
                  |)
                |)));
            fun γ =>
              ltac:(M.monadic
                (let _ :=
                  is_constant_or_break_match (| M.read (| γ |), mk_str (| "645-7689" |) |) in
                M.alloc (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      mk_str (|
                        "Hello, this is Mr. Awesome's Pizza. My name is Fred.
            What can I get for you today?"
                      |)
                    |)
                  |)
                |)));
            fun γ =>
              ltac:(M.monadic
                (M.alloc (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| mk_str (| "Hi! Who is this again?" |) |)
                  |)
                |)))
          ]
        |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_call : M.IsFunction.C "hash_map::call" call.
Admitted.
Global Typeclasses Opaque call.

(*
fn main() {
    let mut contacts = HashMap::new();

    contacts.insert("Daniel", "798-1364");
    contacts.insert("Ashley", "645-7689");
    contacts.insert("Katie", "435-8291");
    contacts.insert("Robert", "956-1745");

    // Takes a reference and returns Option<&V>
    match contacts.get(&"Daniel") {
        Some(&number) => println!("Calling Daniel: {}", call(number)),
        _ => println!("Don't have Daniel's number."),
    }

    // `HashMap::insert()` returns `None`
    // if the inserted value is new, `Some(value)` otherwise
    contacts.insert("Daniel", "164-6743");

    match contacts.get(&"Ashley") {
        Some(&number) => println!("Calling Ashley: {}", call(number)),
        _ => println!("Don't have Ashley's number."),
    }

    contacts.remove(&"Ashley");

    // `HashMap::iter()` returns an iterator that yields
    // (&'a key, &'a value) pairs in arbitrary order.
    for (contact, &number) in contacts.iter() {
        println!("Calling {}: {}", contact, call(number));
    }
}
*)
Definition main (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [] =>
    ltac:(M.monadic
      (M.read (|
        let~ contacts :
            Ty.apply
              (Ty.path "std::collections::hash::map::HashMap")
              []
              [
                Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                Ty.path "std::hash::random::RandomState"
              ] :=
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "std::collections::hash::map::HashMap")
                []
                [
                  Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                  Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                  Ty.path "std::hash::random::RandomState"
                ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "std::collections::hash::map::HashMap")
                  []
                  [
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.path "std::hash::random::RandomState"
                  ],
                "new",
                [],
                []
              |),
              []
            |)
          |) in
        let~ _ :
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ] :=
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "std::collections::hash::map::HashMap")
                  []
                  [
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.path "std::hash::random::RandomState"
                  ],
                "insert",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, contacts |);
                mk_str (| "Daniel" |);
                mk_str (| "798-1364" |)
              ]
            |)
          |) in
        let~ _ :
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ] :=
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "std::collections::hash::map::HashMap")
                  []
                  [
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.path "std::hash::random::RandomState"
                  ],
                "insert",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, contacts |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Ashley" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "645-7689" |) |) |)
              ]
            |)
          |) in
        let~ _ :
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ] :=
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "std::collections::hash::map::HashMap")
                  []
                  [
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.path "std::hash::random::RandomState"
                  ],
                "insert",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, contacts |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Katie" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "435-8291" |) |) |)
              ]
            |)
          |) in
        let~ _ :
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ] :=
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "std::collections::hash::map::HashMap")
                  []
                  [
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.path "std::hash::random::RandomState"
                  ],
                "insert",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, contacts |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Robert" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "956-1745" |) |) |)
              ]
            |)
          |) in
        let~ _ : Ty.tuple [] :=
          M.match_operator (|
            Some (Ty.tuple []),
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ] ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "std::collections::hash::map::HashMap")
                    []
                    [
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                      Ty.path "std::hash::random::RandomState"
                    ],
                  "get",
                  [],
                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, contacts |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (| Pointer.Kind.Ref, M.alloc (| mk_str (| "Daniel" |) |) |)
                    |)
                  |)
                ]
              |)
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (| γ, "core::option::Option::Some", 0 |) in
                  let γ0_0 := M.read (| γ0_0 |) in
                  let number := M.copy (| γ0_0 |) in
                  let~ _ : Ty.tuple [] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_function (| "std::io::stdio::_print", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "core::fmt::Arguments",
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 1
                              ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [ mk_str (| "Calling Daniel: " |); mk_str (| "
" |) ]
                                    |)
                                  |)
                                |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::rt::Argument",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_display",
                                              [],
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                                        M.get_function (|
                                                          "hash_map::call",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| number |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)));
              fun γ =>
                ltac:(M.monadic
                  (let~ _ : Ty.tuple [] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_function (| "std::io::stdio::_print", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "core::fmt::Arguments",
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              [ Value.Integer IntegerKind.Usize 1 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array [ mk_str (| "Don't have Daniel's number.
" |) ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)))
            ]
          |) in
        let~ _ :
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ] :=
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "std::collections::hash::map::HashMap")
                  []
                  [
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.path "std::hash::random::RandomState"
                  ],
                "insert",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, contacts |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Daniel" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "164-6743" |) |) |)
              ]
            |)
          |) in
        let~ _ : Ty.tuple [] :=
          M.match_operator (|
            Some (Ty.tuple []),
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ] ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "std::collections::hash::map::HashMap")
                    []
                    [
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                      Ty.path "std::hash::random::RandomState"
                    ],
                  "get",
                  [],
                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, contacts |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (| Pointer.Kind.Ref, M.alloc (| mk_str (| "Ashley" |) |) |)
                    |)
                  |)
                ]
              |)
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (| γ, "core::option::Option::Some", 0 |) in
                  let γ0_0 := M.read (| γ0_0 |) in
                  let number := M.copy (| γ0_0 |) in
                  let~ _ : Ty.tuple [] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_function (| "std::io::stdio::_print", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "core::fmt::Arguments",
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 1
                              ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [ mk_str (| "Calling Ashley: " |); mk_str (| "
" |) ]
                                    |)
                                  |)
                                |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::rt::Argument",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_display",
                                              [],
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                                        M.get_function (|
                                                          "hash_map::call",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| number |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)));
              fun γ =>
                ltac:(M.monadic
                  (let~ _ : Ty.tuple [] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_function (| "std::io::stdio::_print", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "core::fmt::Arguments",
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              [ Value.Integer IntegerKind.Usize 1 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array [ mk_str (| "Don't have Ashley's number.
" |) ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)))
            ]
          |) in
        let~ _ :
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ] :=
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "std::collections::hash::map::HashMap")
                  []
                  [
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.path "std::hash::random::RandomState"
                  ],
                "remove",
                [],
                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, contacts |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, M.alloc (| mk_str (| "Ashley" |) |) |) |)
                |)
              ]
            |)
          |) in
        M.use
          (M.match_operator (|
            Some (Ty.tuple []),
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "std::collections::hash::map::Iter")
                  []
                  [
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                  ],
                M.get_trait_method (|
                  "core::iter::traits::collect::IntoIterator",
                  Ty.apply
                    (Ty.path "std::collections::hash::map::Iter")
                    []
                    [
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                    ],
                  [],
                  [],
                  "into_iter",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "std::collections::hash::map::Iter")
                      []
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "std::collections::hash::map::HashMap")
                        []
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                          Ty.path "std::hash::random::RandomState"
                        ],
                      "iter",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, contacts |) ]
                  |)
                ]
              |)
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let iter := M.copy (| γ |) in
                  M.loop (|
                    Ty.tuple [],
                    ltac:(M.monadic
                      (let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ];
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "std::collections::hash::map::Iter")
                                  []
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                  ],
                                [],
                                [],
                                "next",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                let contact := M.copy (| γ1_0 |) in
                                let γ1_1 := M.read (| γ1_1 |) in
                                let number := M.copy (| γ1_1 |) in
                                let~ _ : Ty.tuple [] :=
                                  let~ _ : Ty.tuple [] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_function (| "std::io::stdio::_print", [], [] |),
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::Arguments",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_v1",
                                              [
                                                Value.Integer IntegerKind.Usize 3;
                                                Value.Integer IntegerKind.Usize 2
                                              ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          mk_str (| "Calling " |);
                                                          mk_str (| ": " |);
                                                          mk_str (| "
" |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::rt::Argument",
                                                              "new_display",
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [ Ty.path "str" ]
                                                                  ]
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    contact
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::rt::Argument",
                                                              "new_display",
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "str" ]
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "str" ],
                                                                        M.get_function (|
                                                                          "hash_map::call",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| number |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |) in
                                M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)))
                  |)))
            ]
          |))
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_main : M.IsFunction.C "hash_map::main" main.
Admitted.
Global Typeclasses Opaque main.
