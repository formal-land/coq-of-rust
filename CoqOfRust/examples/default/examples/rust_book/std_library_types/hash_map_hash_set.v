(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let mut a: HashSet<i32> = vec![1i32, 2, 3].into_iter().collect();
    let mut b: HashSet<i32> = vec![2i32, 3, 4].into_iter().collect();

    assert!(a.insert(4));
    assert!(a.contains(&4));

    // `HashSet::insert()` returns false if
    // there was a value already present.
    // assert!(b.insert(4), "Value 4 is already in set B!");
    // FIXME ^ Comment out this line

    b.insert(5);

    // If a collection's element type implements `Debug`,
    // then the collection implements `Debug`.
    // It usually prints its elements in the format `[elem1, elem2, ...]`
    println!("A: {:?}", a);
    println!("B: {:?}", b);

    // Print [1, 2, 3, 4, 5] in arbitrary order
    println!("Union: {:?}", a.union(&b).collect::<Vec<&i32>>());

    // This should print [1]
    println!("Difference: {:?}", a.difference(&b).collect::<Vec<&i32>>());

    // Print [2, 3, 4] in arbitrary order.
    println!(
        "Intersection: {:?}",
        a.intersection(&b).collect::<Vec<&i32>>()
    );

    // Print [1, 5]
    println!(
        "Symmetric Difference: {:?}",
        a.symmetric_difference(&b).collect::<Vec<&i32>>()
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let a :
          M.Val
            (std.collections.hash.set.HashSet.t
              i32.t
              std.hash.random.RandomState.t) :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.iter.traits.iterator.Iterator.collect
                (Self :=
                  alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
                (B :=
                  std.collections.hash.set.HashSet.t
                    i32.t
                    std.hash.random.RandomState.t)
                (Trait := ℐ)))
            (M.call (|(ltac:(M.get_method (fun ℐ =>
                core.iter.traits.collect.IntoIterator.into_iter
                  (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
                  (Trait := ℐ)))
              (M.call (|((slice i32.t)::["into_vec"]
                (pointer_coercion
                  "Unsize"
                  (M.read (|
                    M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                      (M.alloc (|
                        [
                          (Integer.of_Z 1) : i32.t;
                          (Integer.of_Z 2) : i32.t;
                          (Integer.of_Z 3) : i32.t
                        ]
                      |)))
                    |)
                  |))))
              |)))
            |)))
          |)
        |) in
      let b :
          M.Val
            (std.collections.hash.set.HashSet.t
              i32.t
              std.hash.random.RandomState.t) :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.iter.traits.iterator.Iterator.collect
                (Self :=
                  alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
                (B :=
                  std.collections.hash.set.HashSet.t
                    i32.t
                    std.hash.random.RandomState.t)
                (Trait := ℐ)))
            (M.call (|(ltac:(M.get_method (fun ℐ =>
                core.iter.traits.collect.IntoIterator.into_iter
                  (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
                  (Trait := ℐ)))
              (M.call (|((slice i32.t)::["into_vec"]
                (pointer_coercion
                  "Unsize"
                  (M.read (|
                    M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                      (M.alloc (|
                        [
                          (Integer.of_Z 2) : i32.t;
                          (Integer.of_Z 3) : i32.t;
                          (Integer.of_Z 4) : i32.t
                        ]
                      |)))
                    |)
                  |))))
              |)))
            |)))
          |)
        |) in
      let _ : M.Val unit :=
        if
          M.read (|
            use
              (M.alloc (|
                UnOp.not
                  (M.call (|((std.collections.hash.set.HashSet.t
                        i32.t
                        std.hash.random.RandomState.t)::["insert"]
                    (borrow_mut a)
                    ((Integer.of_Z 4) : i32.t))
                  |))
              |))
          |)
        then
          M.alloc (|
            (never_to_any (B := unit)) (|
              M.call (|(core.panicking.panic
                (M.read (| mk_str "assertion failed: a.insert(4)" |)))
              |)
            |)
          |)
        else
          M.alloc (| tt |) in
      let _ : M.Val unit :=
        if
          M.read (|
            use
              (M.alloc (|
                UnOp.not
                  (M.call (|((std.collections.hash.set.HashSet.t
                        i32.t
                        std.hash.random.RandomState.t)::["contains"]
                    (borrow a)
                    (borrow (M.alloc (| (Integer.of_Z 4) : i32.t |))))
                  |))
              |))
          |)
        then
          M.alloc (|
            (never_to_any (B := unit)) (|
              M.call (|(core.panicking.panic
                (M.read (| mk_str "assertion failed: a.contains(&4)" |)))
              |)
            |)
          |)
        else
          M.alloc (| tt |) in
      let _ : M.Val bool.t :=
        M.alloc (|
          M.call (|((std.collections.hash.set.HashSet.t
                i32.t
                std.hash.random.RandomState.t)::["insert"]
            (borrow_mut b)
            ((Integer.of_Z 5) : i32.t))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "A: " |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow a))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "B: " |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow b))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "Union: " |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.iter.traits.iterator.Iterator.collect
                                    (Self :=
                                      std.collections.hash.set.Union.t
                                        i32.t
                                        std.hash.random.RandomState.t)
                                    (B :=
                                      alloc.vec.Vec.t
                                        (ref i32.t)
                                        alloc.alloc.Global.t)
                                    (Trait := ℐ)))
                                (M.call (|((std.collections.hash.set.HashSet.t
                                      i32.t
                                      std.hash.random.RandomState.t)::["union"]
                                  (borrow a)
                                  (borrow b))
                                |)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Difference: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.iter.traits.iterator.Iterator.collect
                                    (Self :=
                                      std.collections.hash.set.Difference.t
                                        i32.t
                                        std.hash.random.RandomState.t)
                                    (B :=
                                      alloc.vec.Vec.t
                                        (ref i32.t)
                                        alloc.alloc.Global.t)
                                    (Trait := ℐ)))
                                (M.call (|((std.collections.hash.set.HashSet.t
                                      i32.t
                                      std.hash.random.RandomState.t)::["difference"]
                                  (borrow a)
                                  (borrow b))
                                |)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Intersection: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.iter.traits.iterator.Iterator.collect
                                    (Self :=
                                      std.collections.hash.set.Intersection.t
                                        i32.t
                                        std.hash.random.RandomState.t)
                                    (B :=
                                      alloc.vec.Vec.t
                                        (ref i32.t)
                                        alloc.alloc.Global.t)
                                    (Trait := ℐ)))
                                (M.call (|((std.collections.hash.set.HashSet.t
                                      i32.t
                                      std.hash.random.RandomState.t)::["intersection"]
                                  (borrow a)
                                  (borrow b))
                                |)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Symmetric Difference: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.iter.traits.iterator.Iterator.collect
                                    (Self :=
                                      std.collections.hash.set.SymmetricDifference.t
                                        i32.t
                                        std.hash.random.RandomState.t)
                                    (B :=
                                      alloc.vec.Vec.t
                                        (ref i32.t)
                                        alloc.alloc.Global.t)
                                    (Trait := ℐ)))
                                (M.call (|((std.collections.hash.set.HashSet.t
                                      i32.t
                                      std.hash.random.RandomState.t)::["symmetric_difference"]
                                  (borrow a)
                                  (borrow b))
                                |)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
