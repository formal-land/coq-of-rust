(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn checked_division(dividend: i32, divisor: i32) -> Option<i32> {
    if divisor == 0 {
        // Failure is represented as the `None` variant
        None
    } else {
        // Result is wrapped in a `Some` variant
        Some(dividend / divisor)
    }
}
*)
Definition checked_division
    (dividend : i32.t)
    (divisor : i32.t)
    : M (core.option.Option.t i32.t) :=
  ltac:(M.monadic ((
    let dividend := M.alloc (| dividend |) in
    let divisor := M.alloc (| divisor |) in
    M.read (|
      if
        M.read (|
          use
            (M.alloc (|
              BinOp.Pure.eq (M.read (| divisor |)) ((Integer.of_Z 0) : i32.t)
            |))
        |)
      then
        M.alloc (| core.option.Option.None |)
      else
        M.alloc (|
          core.option.Option.Some
            (BinOp.Panic.div (| M.read (| dividend |), M.read (| divisor |) |))
        |)
    |)
  ) : core.option.Option.t i32.t)).

(*
fn try_division(dividend: i32, divisor: i32) {
    // `Option` values can be pattern matched, just like other enums
    match checked_division(dividend, divisor) {
        None => println!("{} / {} failed!", dividend, divisor),
        Some(quotient) => {
            println!("{} / {} = {}", dividend, divisor, quotient)
        }
    }
}
*)
Definition try_division (dividend : i32.t) (divisor : i32.t) : M unit :=
  ltac:(M.monadic ((
    let dividend := M.alloc (| dividend |) in
    let divisor := M.alloc (| divisor |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          (M.alloc (|
            M.call (|(option.checked_division
              (M.read (| dividend |))
              (M.read (| divisor |)))
            |)
          |))
          [
            fun (γ : M.Val (core.option.Option.t i32.t)) =>
              match M.read (| γ |) with
              | core.option.Option.None =>
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "" |);
                                M.read (| mk_str " / " |);
                                M.read (| mk_str " failed!
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow dividend))
                                |);
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow divisor))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun (γ : M.Val (core.option.Option.t i32.t)) =>
              match M.read (| γ |) with
              | core.option.Option.Some _ =>
                let γ0_0 := core.option.Option.Get_Some_0 γ in
                let quotient := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "" |);
                                M.read (| mk_str " / " |);
                                M.read (| mk_str " = " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow dividend))
                                |);
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow divisor))
                                |);
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow quotient))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit
          ])
    |)
  ) : unit)).

(*
fn main() {
    try_division(4, 2);
    try_division(1, 0);

    // Binding `None` to a variable needs to be type annotated
    let none: Option<i32> = None;
    let _equivalent_none = None::<i32>;

    let optional_float = Some(0f32);

    // Unwrapping a `Some` variant will extract the value wrapped.
    println!(
        "{:?} unwraps to {:?}",
        optional_float,
        optional_float.unwrap()
    );

    // Unwrapping a `None` variant will `panic!`
    println!("{:?} unwraps to {:?}", none, none.unwrap());
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(option.try_division
            ((Integer.of_Z 4) : i32.t)
            ((Integer.of_Z 2) : i32.t))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(option.try_division
            ((Integer.of_Z 1) : i32.t)
            ((Integer.of_Z 0) : i32.t))
          |)
        |) in
      let none : M.Val (core.option.Option.t i32.t) :=
        M.alloc (| core.option.Option.None |) in
      let _equivalent_none : M.Val (core.option.Option.t i32.t) :=
        M.alloc (| core.option.Option.None |) in
      let optional_float : M.Val (core.option.Option.t f32.t) :=
        M.alloc (|
          core.option.Option.Some
            (M.read (| UnsupportedLiteral : M.Val f32.t |))
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "" |);
                        M.read (| mk_str " unwraps to " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow optional_float))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|((core.option.Option.t f32.t)::["unwrap"]
                                (M.read (| optional_float |)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "" |);
                        M.read (| mk_str " unwraps to " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow none))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|((core.option.Option.t i32.t)::["unwrap"]
                                (M.read (| none |)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
