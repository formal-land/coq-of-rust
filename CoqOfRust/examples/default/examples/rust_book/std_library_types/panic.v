(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn division(dividend: i32, divisor: i32) -> i32 {
    if divisor == 0 {
        // Division by zero triggers a panic
        panic!("division by zero");
    } else {
        dividend / divisor
    }
}
*)
Definition division (dividend : i32.t) (divisor : i32.t) : M i32.t :=
  ltac:(M.monadic (
    let dividend := M.alloc (| dividend |) in
    let divisor := M.alloc (| divisor |) in
    M.read (|
      if
        M.read (|
          use
            (M.alloc (|
              BinOp.Pure.eq (M.read (| divisor |)) ((Integer.of_Z 0) : i32.t)
            |))
        |)
      then
        M.alloc (|
          (never_to_any (B := i32.t)) (|
            M.call (|(std.panicking.begin_panic
              (M.read (| mk_str "division by zero" |)))
            |)
          |)
        |)
      else
        M.alloc (|
          BinOp.Panic.div (| M.read (| dividend |), M.read (| divisor |) |)
        |)
    |)
  )).

(*
fn main() {
    // Heap allocated integer
    let _x = Box::new(0i32);

    // This operation will trigger a task failure
    division(3, 0);

    println!("This point won't be reached!");

    // `_x` should get destroyed at this point
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let _x : M.Val (alloc.boxed.Box.t i32.t alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"]
            ((Integer.of_Z 0) : i32.t))
          |)
        |) in
      let _ : M.Val i32.t :=
        M.alloc (|
          M.call (|(panic.division
            ((Integer.of_Z 3) : i32.t)
            ((Integer.of_Z 0) : i32.t))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "This point won't be reached!
" |) ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
