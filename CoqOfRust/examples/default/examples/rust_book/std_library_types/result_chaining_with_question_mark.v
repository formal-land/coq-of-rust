(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module checked.
  (* Enum MathError *)
  (* {
    ty_params := [];
    variants :=
      [
        {
          name := "DivisionByZero";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "NonPositiveLogarithm";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "NegativeSquareRoot";
          item := StructTuple [];
          discriminant := None;
        }
      ];
  } *)
  
  Module Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError.
    Definition Self : Ty.t := Ty.path "result_chaining_with_question_mark::checked::MathError".
    
    (*     Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        let* self := M.alloc self in
        let* f := M.alloc f in
        let* α0 := M.get_associated_function (Ty.path "core::fmt::Formatter") "write_str" [] in
        let* α1 := M.read f in
        let* α2 :=
          M.match_operator
            self
            [
              fun γ =>
                let* γ := M.read γ in
                let* α0 := M.read (mk_str "DivisionByZero") in
                M.alloc α0;
              fun γ =>
                let* γ := M.read γ in
                let* α0 := M.read (mk_str "NonPositiveLogarithm") in
                M.alloc α0;
              fun γ =>
                let* γ := M.read γ in
                let* α0 := M.read (mk_str "NegativeSquareRoot") in
                M.alloc α0
            ] in
        let* α3 := M.read α2 in
        M.call_closure α0 [ α1; α3 ]
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError.
  
  Axiom MathResult :
    (Ty.path "result_chaining_with_question_mark::checked::MathResult") =
      (Ty.apply
        (Ty.path "core::result::Result")
        [ Ty.path "f64"; Ty.path "result_chaining_with_question_mark::checked::MathError" ]).
  
  (*
      fn div(x: f64, y: f64) -> MathResult {
          if y == 0.0 {
              Err(MathError::DivisionByZero)
          } else {
              Ok(x / y)
          }
      }
  *)
  Definition div (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ x; y ] =>
      let* x := M.alloc x in
      let* y := M.alloc y in
      let* α0 := M.alloc (Value.Tuple []) in
      let* α1 :=
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 := M.read y in
                let* α1 := M.read UnsupportedLiteral in
                let* α2 := M.alloc (BinOp.Pure.eq α0 α1) in
                M.pure (M.use α2) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              M.alloc
                (Value.StructTuple
                  "core::result::Result::Err"
                  [
                    Value.StructTuple
                      "result_chaining_with_question_mark::checked::MathError::DivisionByZero"
                      []
                  ]);
            fun γ =>
              let* α0 := M.read x in
              let* α1 := M.read y in
              let* α2 := BinOp.Panic.div α0 α1 in
              M.alloc (Value.StructTuple "core::result::Result::Ok" [ α2 ])
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  (*
      fn sqrt(x: f64) -> MathResult {
          if x < 0.0 {
              Err(MathError::NegativeSquareRoot)
          } else {
              Ok(x.sqrt())
          }
      }
  *)
  Definition sqrt (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ x ] =>
      let* x := M.alloc x in
      let* α0 := M.alloc (Value.Tuple []) in
      let* α1 :=
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 := M.read x in
                let* α1 := M.read UnsupportedLiteral in
                let* α2 := M.alloc (BinOp.Pure.lt α0 α1) in
                M.pure (M.use α2) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              M.alloc
                (Value.StructTuple
                  "core::result::Result::Err"
                  [
                    Value.StructTuple
                      "result_chaining_with_question_mark::checked::MathError::NegativeSquareRoot"
                      []
                  ]);
            fun γ =>
              let* α0 := M.get_associated_function (Ty.path "f64") "sqrt" [] in
              let* α1 := M.read x in
              let* α2 := M.call_closure α0 [ α1 ] in
              M.alloc (Value.StructTuple "core::result::Result::Ok" [ α2 ])
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  (*
      fn ln(x: f64) -> MathResult {
          if x <= 0.0 {
              Err(MathError::NonPositiveLogarithm)
          } else {
              Ok(x.ln())
          }
      }
  *)
  Definition ln (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ x ] =>
      let* x := M.alloc x in
      let* α0 := M.alloc (Value.Tuple []) in
      let* α1 :=
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 := M.read x in
                let* α1 := M.read UnsupportedLiteral in
                let* α2 := M.alloc (BinOp.Pure.le α0 α1) in
                M.pure (M.use α2) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              M.alloc
                (Value.StructTuple
                  "core::result::Result::Err"
                  [
                    Value.StructTuple
                      "result_chaining_with_question_mark::checked::MathError::NonPositiveLogarithm"
                      []
                  ]);
            fun γ =>
              let* α0 := M.get_associated_function (Ty.path "f64") "ln" [] in
              let* α1 := M.read x in
              let* α2 := M.call_closure α0 [ α1 ] in
              M.alloc (Value.StructTuple "core::result::Result::Ok" [ α2 ])
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  (*
      fn op_(x: f64, y: f64) -> MathResult {
          // if `div` "fails", then `DivisionByZero` will be `return`ed
          let ratio = div(x, y)?;
  
          // if `ln` "fails", then `NonPositiveLogarithm` will be `return`ed
          let ln = ln(ratio)?;
  
          sqrt(ln)
      }
  *)
  Definition op_ (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ x; y ] =>
      let* x := M.alloc x in
      let* y := M.alloc y in
      let* ratio :=
        let* α0 :=
          M.get_trait_method
            "core::ops::try_trait::Try"
            (Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.path "f64"; Ty.path "result_chaining_with_question_mark::checked::MathError" ])
            []
            "branch"
            [] in
        let* α1 := M.get_function "result_chaining_with_question_mark::checked::div" [] in
        let* α2 := M.read x in
        let* α3 := M.read y in
        let* α4 := M.call_closure α1 [ α2; α3 ] in
        let* α5 := M.call_closure α0 [ α4 ] in
        let* α6 := M.alloc α5 in
        let* α7 :=
          M.match_operator
            α6
            [
              fun γ =>
                let* γ0_0 :=
                  M.get_struct_tuple_field_or_break_match
                    γ
                    "core::ops::control_flow::ControlFlow::Break"
                    0 in
                let* residual := M.copy γ0_0 in
                let* α0 :=
                  M.get_trait_method
                    "core::ops::try_trait::FromResidual"
                    (Ty.apply
                      (Ty.path "core::result::Result")
                      [
                        Ty.path "f64";
                        Ty.path "result_chaining_with_question_mark::checked::MathError"
                      ])
                    [
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [
                          Ty.path "core::convert::Infallible";
                          Ty.path "result_chaining_with_question_mark::checked::MathError"
                        ]
                    ]
                    "from_residual"
                    [] in
                let* α1 := M.read residual in
                let* α2 := M.call_closure α0 [ α1 ] in
                let* α3 := M.return_ α2 in
                let* α4 := M.read α3 in
                let* α5 := M.never_to_any α4 in
                M.alloc α5;
              fun γ =>
                let* γ0_0 :=
                  M.get_struct_tuple_field_or_break_match
                    γ
                    "core::ops::control_flow::ControlFlow::Continue"
                    0 in
                let* val := M.copy γ0_0 in
                M.pure val
            ] in
        M.copy α7 in
      let* ln :=
        let* α0 :=
          M.get_trait_method
            "core::ops::try_trait::Try"
            (Ty.apply
              (Ty.path "core::result::Result")
              [ Ty.path "f64"; Ty.path "result_chaining_with_question_mark::checked::MathError" ])
            []
            "branch"
            [] in
        let* α1 := M.get_function "result_chaining_with_question_mark::checked::ln" [] in
        let* α2 := M.read ratio in
        let* α3 := M.call_closure α1 [ α2 ] in
        let* α4 := M.call_closure α0 [ α3 ] in
        let* α5 := M.alloc α4 in
        let* α6 :=
          M.match_operator
            α5
            [
              fun γ =>
                let* γ0_0 :=
                  M.get_struct_tuple_field_or_break_match
                    γ
                    "core::ops::control_flow::ControlFlow::Break"
                    0 in
                let* residual := M.copy γ0_0 in
                let* α0 :=
                  M.get_trait_method
                    "core::ops::try_trait::FromResidual"
                    (Ty.apply
                      (Ty.path "core::result::Result")
                      [
                        Ty.path "f64";
                        Ty.path "result_chaining_with_question_mark::checked::MathError"
                      ])
                    [
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [
                          Ty.path "core::convert::Infallible";
                          Ty.path "result_chaining_with_question_mark::checked::MathError"
                        ]
                    ]
                    "from_residual"
                    [] in
                let* α1 := M.read residual in
                let* α2 := M.call_closure α0 [ α1 ] in
                let* α3 := M.return_ α2 in
                let* α4 := M.read α3 in
                let* α5 := M.never_to_any α4 in
                M.alloc α5;
              fun γ =>
                let* γ0_0 :=
                  M.get_struct_tuple_field_or_break_match
                    γ
                    "core::ops::control_flow::ControlFlow::Continue"
                    0 in
                let* val := M.copy γ0_0 in
                M.pure val
            ] in
        M.copy α6 in
      let* α0 := M.get_function "result_chaining_with_question_mark::checked::sqrt" [] in
      let* α1 := M.read ln in
      let* α2 := M.call_closure α0 [ α1 ] in
      let* α0 := M.alloc α2 in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      pub fn op(x: f64, y: f64) {
          match op_(x, y) {
              Err(why) => panic!(
                  "{}",
                  match why {
                      MathError::NonPositiveLogarithm => "logarithm of non-positive number",
                      MathError::DivisionByZero => "division by zero",
                      MathError::NegativeSquareRoot => "square root of negative number",
                  }
              ),
              Ok(value) => println!("{}", value),
          }
      }
  *)
  Definition op (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ x; y ] =>
      let* x := M.alloc x in
      let* y := M.alloc y in
      let* α0 := M.get_function "result_chaining_with_question_mark::checked::op_" [] in
      let* α1 := M.read x in
      let* α2 := M.read y in
      let* α3 := M.call_closure α0 [ α1; α2 ] in
      let* α4 := M.alloc α3 in
      let* α5 :=
        M.match_operator
          α4
          [
            fun γ =>
              let* γ0_0 :=
                M.get_struct_tuple_field_or_break_match γ "core::result::Result::Err" 0 in
              let* why := M.copy γ0_0 in
              let* α0 :=
                M.get_function
                  "core::panicking::panic_display"
                  [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ] in
              let* α1 :=
                M.match_operator
                  why
                  [
                    fun γ => M.pure (mk_str "logarithm of non-positive number");
                    fun γ =>
                      let* α0 := M.read (mk_str "division by zero") in
                      M.alloc α0;
                    fun γ =>
                      let* α0 := M.read (mk_str "square root of negative number") in
                      M.alloc α0
                  ] in
              let* α2 := M.call_closure α0 [ α1 ] in
              let* α3 := M.never_to_any α2 in
              M.alloc α3;
            fun γ =>
              let* γ0_0 := M.get_struct_tuple_field_or_break_match γ "core::result::Result::Ok" 0 in
              let* value := M.copy γ0_0 in
              let* _ :=
                let* α0 := M.get_function "std::io::stdio::_print" [] in
                let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] in
                let* α5 :=
                  (* Unsize *)
                    let* α2 := M.read (mk_str "") in
                    let* α3 := M.read (mk_str "
") in
                    let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                    M.pure (M.pointer_coercion α4) in
                let* α9 :=
                  (* Unsize *)
                    let* α6 :=
                      M.get_associated_function
                        (Ty.path "core::fmt::rt::Argument")
                        "new_display"
                        [ Ty.path "f64" ] in
                    let* α7 := M.call_closure α6 [ value ] in
                    let* α8 := M.alloc (Value.Array [ α7 ]) in
                    M.pure (M.pointer_coercion α8) in
                let* α10 := M.call_closure α1 [ α5; α9 ] in
                let* α11 := M.call_closure α0 [ α10 ] in
                M.alloc α11 in
              M.alloc (Value.Tuple [])
          ] in
      M.read α5
    | _, _ => M.impossible
    end.
End checked.

(*
fn main() {
    checked::op(1.0, 10.0);
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* _ :=
      let* α0 := M.get_function "result_chaining_with_question_mark::checked::op" [] in
      let* α1 := M.read UnsupportedLiteral in
      let* α2 := M.read UnsupportedLiteral in
      let* α3 := M.call_closure α0 [ α1; α2 ] in
      M.alloc α3 in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
