(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // (all the type annotations are superfluous)
    // A reference to a string allocated in read only memory
    let pangram: &'static str = "the quick brown fox jumps over the lazy dog";
    println!("Pangram: {}", pangram);

    // Iterate over words in reverse, no new string is allocated
    println!("Words in reverse");
    for word in pangram.split_whitespace().rev() {
        println!("> {}", word);
    }

    // Copy chars into a vector, sort and remove duplicates
    let mut chars: Vec<char> = pangram.chars().collect();
    chars.sort();
    chars.dedup();

    // Create an empty and growable `String`
    let mut string = String::new();
    for c in chars {
        // Insert a char at the end of string
        string.push(c);
        // Insert a string at the end of string
        string.push_str(", ");
    }

    // The trimmed string is a slice to the original string, hence no new
    // allocation is performed
    let chars_to_trim: &[char] = &[' ', ','];
    let trimmed_str: &str = string.trim_matches(chars_to_trim);
    println!("Used characters: {}", trimmed_str);

    // Heap allocate a string
    let alice = String::from("I like dogs");
    // Allocate new memory and store the modified string there
    let bob: String = alice.replace("dog", "cat");

    println!("Alice says: {}", alice);
    println!("Bob says: {}", bob);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let pangram : M.Val (ref str.t) :=
        M.copy (| mk_str "the quick brown fox jumps over the lazy dog" |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "Pangram: " |); M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow pangram))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (| [ M.read (| mk_str "Words in reverse
" |) ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self :=
                        core.iter.adapters.rev.Rev.t
                          core.str.iter.SplitWhitespace.t)
                      (Trait := ℐ)))
                  (M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.iter.traits.iterator.Iterator.rev
                        (Self := core.str.iter.SplitWhitespace.t)
                        (Trait := ℐ)))
                    (M.call (|(str.t::["split_whitespace"]
                      (M.read (| pangram |)))
                    |)))
                  |)))
                |)
              |))
              [
                fun
                    (γ :
                      M.Val
                        (core.iter.adapters.rev.Rev.t
                          core.str.iter.SplitWhitespace.t)) =>
                  (let iter := M.copy (| γ |) in
                  M.loop
                    (let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self :=
                                    core.iter.adapters.rev.Rev.t
                                      core.str.iter.SplitWhitespace.t)
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun
                                (γ :
                                  M.Val (core.option.Option.t (ref str.t))) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  (never_to_any (B := unit)) (|
                                    M.read (| M.break |)
                                  |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun
                                (γ :
                                  M.Val (core.option.Option.t (ref str.t))) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                let word := M.copy (| γ0_0 |) in
                                let _ : M.Val unit :=
                                  let _ : M.Val unit :=
                                    M.alloc (|
                                      M.call (|(std.io.stdio._print
                                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                          (pointer_coercion
                                            "Unsize"
                                            (borrow
                                              (M.alloc (|
                                                [
                                                  M.read (| mk_str "> " |);
                                                  M.read (| mk_str "
" |)
                                                ]
                                              |))))
                                          (pointer_coercion
                                            "Unsize"
                                            (borrow
                                              (M.alloc (|
                                                [
                                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                    (borrow word))
                                                  |)
                                                ]
                                              |)))))
                                        |)))
                                      |)
                                    |) in
                                  M.alloc (| tt |) in
                                M.alloc (| tt |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |))) :
                  M.Val unit
              ])) in
      let chars : M.Val (alloc.vec.Vec.t char.t alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.iter.traits.iterator.Iterator.collect
                (Self := core.str.iter.Chars.t)
                (B := alloc.vec.Vec.t char.t alloc.alloc.Global.t)
                (Trait := ℐ)))
            (M.call (|(str.t::["chars"] (M.read (| pangram |))) |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|((slice char.t)::["sort"]
            (M.call (|(ltac:(M.get_method (fun ℐ =>
                core.ops.deref.DerefMut.deref_mut
                  (Self := alloc.vec.Vec.t char.t alloc.alloc.Global.t)
                  (Trait := ℐ)))
              (borrow_mut chars))
            |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|((alloc.vec.Vec.t char.t alloc.alloc.Global.t)::["dedup"]
            (borrow_mut chars))
          |)
        |) in
      let string : M.Val alloc.string.String.t :=
        M.alloc (| M.call (|alloc.string.String.t::["new"] |) |) in
      let _ : M.Val unit :=
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self := alloc.vec.Vec.t char.t alloc.alloc.Global.t)
                      (Trait := ℐ)))
                  (M.read (| chars |)))
                |)
              |))
              [
                fun
                    (γ :
                      M.Val
                        (alloc.vec.into_iter.IntoIter.t
                          char.t
                          alloc.alloc.Global.t)) =>
                  (let iter := M.copy (| γ |) in
                  M.loop
                    (let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self :=
                                    alloc.vec.into_iter.IntoIter.t
                                      char.t
                                      alloc.alloc.Global.t)
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun (γ : M.Val (core.option.Option.t char.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  (never_to_any (B := unit)) (|
                                    M.read (| M.break |)
                                  |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun (γ : M.Val (core.option.Option.t char.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                let c := M.copy (| γ0_0 |) in
                                let _ : M.Val unit :=
                                  M.alloc (|
                                    M.call (|(alloc.string.String.t::["push"]
                                      (borrow_mut string)
                                      (M.read (| c |)))
                                    |)
                                  |) in
                                let _ : M.Val unit :=
                                  M.alloc (|
                                    M.call (|(alloc.string.String.t::["push_str"]
                                      (borrow_mut string)
                                      (M.read (| mk_str ", " |)))
                                    |)
                                  |) in
                                M.alloc (| tt |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |))) :
                  M.Val unit
              ])) in
      let chars_to_trim : M.Val (ref (slice char.t)) :=
        M.alloc (|
          pointer_coercion
            "Unsize"
            (borrow (M.alloc (| [ " "%char; ","%char ] |)))
        |) in
      let trimmed_str : M.Val (ref str.t) :=
        M.alloc (|
          M.call (|(str.t::["trim_matches"]
            (M.call (|(ltac:(M.get_method (fun ℐ =>
                core.ops.deref.Deref.deref
                  (Self := alloc.string.String.t)
                  (Trait := ℐ)))
              (borrow string))
            |))
            (M.read (| chars_to_trim |)))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Used characters: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow trimmed_str))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let alice : M.Val alloc.string.String.t :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.convert.From.from
                (Self := alloc.string.String.t)
                (T := ref str.t)
                (Trait := ℐ)))
            (M.read (| mk_str "I like dogs" |)))
          |)
        |) in
      let bob : M.Val alloc.string.String.t :=
        M.alloc (|
          M.call (|(str.t::["replace"]
            (M.call (|(ltac:(M.get_method (fun ℐ =>
                core.ops.deref.Deref.deref
                  (Self := alloc.string.String.t)
                  (Trait := ℐ)))
              (borrow alice))
            |))
            (M.read (| mk_str "dog" |))
            (M.read (| mk_str "cat" |)))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Alice says: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow alice))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Bob says: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow bob))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
