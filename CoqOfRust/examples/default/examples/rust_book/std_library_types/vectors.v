(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Iterators can be collected into vectors
    let collected_iterator: Vec<i32> = (0..10).collect();
    println!("Collected (0..10) into: {:?}", collected_iterator);

    // The `vec!` macro can be used to initialize a vector
    let mut xs = vec![1i32, 2, 3];
    println!("Initial vector: {:?}", xs);

    // Insert new element at the end of the vector
    println!("Push 4 into the vector");
    xs.push(4);
    println!("Vector: {:?}", xs);

    // Error! Immutable vectors can't grow
    // collected_iterator.push(0);
    // FIXME ^ Comment out this line

    // The `len` method yields the number of elements currently stored in a vector
    println!("Vector length: {}", xs.len());

    // Indexing is done using the square brackets (indexing starts at 0)
    println!("Second element: {}", xs[1]);

    // `pop` removes the last element from the vector and returns it
    println!("Pop last element: {:?}", xs.pop());

    // Out of bounds indexing yields a panic
    // println!("Fourth element: {}", xs[3]);
    // FIXME ^ Comment out this line

    // `Vector`s can be easily iterated over
    println!("Contents of xs:");
    for x in xs.iter() {
        println!("> {}", x);
    }

    // A `Vector` can also be iterated over while the iteration
    // count is enumerated in a separate variable (`i`)
    for (i, x) in xs.iter().enumerate() {
        println!("In position {} we have value {}", i, x);
    }

    // Thanks to `iter_mut`, mutable `Vector`s can also be iterated
    // over in a way that allows modifying each value
    for x in xs.iter_mut() {
        *x *= 3;
    }
    println!("Updated vector: {:?}", xs);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let collected_iterator :
          M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.iter.traits.iterator.Iterator.collect
                (Self := core.ops.range.Range.t i32.t)
                (B := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
                (Trait := ℐ)))
            {|
              core.ops.range.Range.start := (Integer.of_Z 0) : i32.t;
              core.ops.range.Range.end_ := (Integer.of_Z 10) : i32.t;
            |})
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Collected (0..10) into: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow collected_iterator))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let xs : M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((slice i32.t)::["into_vec"]
            (pointer_coercion
              "Unsize"
              (M.read (|
                M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                  (M.alloc (|
                    [
                      (Integer.of_Z 1) : i32.t;
                      (Integer.of_Z 2) : i32.t;
                      (Integer.of_Z 3) : i32.t
                    ]
                  |)))
                |)
              |))))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Initial vector: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow xs))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "Push 4 into the vector
" |) ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|((alloc.vec.Vec.t i32.t alloc.alloc.Global.t)::["push"]
            (borrow_mut xs)
            ((Integer.of_Z 4) : i32.t))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "Vector: " |); M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow xs))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Vector length: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|((alloc.vec.Vec.t
                                    i32.t
                                    alloc.alloc.Global.t)::["len"]
                                (borrow xs))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Second element: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (M.call (|(ltac:(M.get_method (fun ℐ =>
                              core.ops.index.Index.index
                                (Self :=
                                  alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
                                (Idx := usize.t)
                                (Trait := ℐ)))
                            (borrow xs)
                            ((Integer.of_Z 1) : usize.t))
                          |)))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Pop last element: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|((alloc.vec.Vec.t
                                    i32.t
                                    alloc.alloc.Global.t)::["pop"]
                                (borrow_mut xs))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (| [ M.read (| mk_str "Contents of xs:
" |) ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self := core.slice.iter.Iter.t i32.t)
                      (Trait := ℐ)))
                  (M.call (|((slice i32.t)::["iter"]
                    (M.call (|(ltac:(M.get_method (fun ℐ =>
                        core.ops.deref.Deref.deref
                          (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
                          (Trait := ℐ)))
                      (borrow xs))
                    |)))
                  |)))
                |)
              |))
              [
                fun (γ : M.Val (core.slice.iter.Iter.t i32.t)) =>
                  (let iter := M.copy (| γ |) in
                  M.loop
                    (let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self := core.slice.iter.Iter.t i32.t)
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun
                                (γ :
                                  M.Val (core.option.Option.t (ref i32.t))) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  never_to_any (| M.read (| M.break |) |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun
                                (γ :
                                  M.Val (core.option.Option.t (ref i32.t))) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                let x := M.copy (| γ0_0 |) in
                                let _ : M.Val unit :=
                                  let _ : M.Val unit :=
                                    M.alloc (|
                                      M.call (|(std.io.stdio._print
                                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                          (pointer_coercion
                                            "Unsize"
                                            (borrow
                                              (M.alloc (|
                                                [
                                                  M.read (| mk_str "> " |);
                                                  M.read (| mk_str "
" |)
                                                ]
                                              |))))
                                          (pointer_coercion
                                            "Unsize"
                                            (borrow
                                              (M.alloc (|
                                                [
                                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                    (borrow x))
                                                  |)
                                                ]
                                              |)))))
                                        |)))
                                      |)
                                    |) in
                                  M.alloc (| tt |) in
                                M.alloc (| tt |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |))) :
                  M.Val unit
              ])) in
      let _ : M.Val unit :=
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self :=
                        core.iter.adapters.enumerate.Enumerate.t
                          (core.slice.iter.Iter.t i32.t))
                      (Trait := ℐ)))
                  (M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.iter.traits.iterator.Iterator.enumerate
                        (Self := core.slice.iter.Iter.t i32.t)
                        (Trait := ℐ)))
                    (M.call (|((slice i32.t)::["iter"]
                      (M.call (|(ltac:(M.get_method (fun ℐ =>
                          core.ops.deref.Deref.deref
                            (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
                            (Trait := ℐ)))
                        (borrow xs))
                      |)))
                    |)))
                  |)))
                |)
              |))
              [
                fun
                    (γ :
                      M.Val
                        (core.iter.adapters.enumerate.Enumerate.t
                          (core.slice.iter.Iter.t i32.t))) =>
                  (let iter := M.copy (| γ |) in
                  M.loop
                    (let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self :=
                                    core.iter.adapters.enumerate.Enumerate.t
                                      (core.slice.iter.Iter.t i32.t))
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun
                                (γ :
                                  M.Val
                                    (core.option.Option.t
                                      (usize.t * (ref i32.t)))) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  never_to_any (| M.read (| M.break |) |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun
                                (γ :
                                  M.Val
                                    (core.option.Option.t
                                      (usize.t * (ref i32.t)))) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                match M.read (| γ0_0 |) with
                                | (_, _) =>
                                  let γ1_0 := Tuple.Access.left γ0_0 in
                                  let γ1_1 := Tuple.Access.right γ0_0 in
                                  let i := M.copy (| γ1_0 |) in
                                  let x := M.copy (| γ1_1 |) in
                                  let _ : M.Val unit :=
                                    let _ : M.Val unit :=
                                      M.alloc (|
                                        M.call (|(std.io.stdio._print
                                          (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                            (pointer_coercion
                                              "Unsize"
                                              (borrow
                                                (M.alloc (|
                                                  [
                                                    M.read (|
                                                      mk_str "In position "
                                                    |);
                                                    M.read (|
                                                      mk_str " we have value "
                                                    |);
                                                    M.read (| mk_str "
" |)
                                                  ]
                                                |))))
                                            (pointer_coercion
                                              "Unsize"
                                              (borrow
                                                (M.alloc (|
                                                  [
                                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                      (borrow i))
                                                    |);
                                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                      (borrow x))
                                                    |)
                                                  ]
                                                |)))))
                                          |)))
                                        |)
                                      |) in
                                    M.alloc (| tt |) in
                                  M.alloc (| tt |)
                                end
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |))) :
                  M.Val unit
              ])) in
      let _ : M.Val unit :=
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self := core.slice.iter.IterMut.t i32.t)
                      (Trait := ℐ)))
                  (M.call (|((slice i32.t)::["iter_mut"]
                    (M.call (|(ltac:(M.get_method (fun ℐ =>
                        core.ops.deref.DerefMut.deref_mut
                          (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
                          (Trait := ℐ)))
                      (borrow_mut xs))
                    |)))
                  |)))
                |)
              |))
              [
                fun (γ : M.Val (core.slice.iter.IterMut.t i32.t)) =>
                  (let iter := M.copy (| γ |) in
                  M.loop
                    (let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self := core.slice.iter.IterMut.t i32.t)
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun
                                (γ :
                                  M.Val
                                    (core.option.Option.t (mut_ref i32.t))) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  never_to_any (| M.read (| M.break |) |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun
                                (γ :
                                  M.Val
                                    (core.option.Option.t (mut_ref i32.t))) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                let x := M.copy (| γ0_0 |) in
                                let _ : M.Val unit :=
                                  let β : M.Val i32.t :=
                                    deref (M.read (| x |)) in
                                  assign (|
                                    β,
                                    BinOp.Panic.mul (|
                                      M.read (| β |),
                                      (Integer.of_Z 3) : i32.t
                                    |)
                                  |) in
                                M.alloc (| tt |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |))) :
                  M.Val unit
              ])) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Updated vector: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow xs))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
