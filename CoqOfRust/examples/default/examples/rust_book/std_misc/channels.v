(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition NTHREADS : M.Val (ref i32.t) :=
  M.run (M.alloc (| M.alloc (| (Integer.of_Z 3) : i32.t |) |)).

(*
fn main() {
    // Channels have two endpoints: the `Sender<T>` and the `Receiver<T>`,
    // where `T` is the type of the message to be transferred
    // (type annotation is superfluous)
    let (tx, rx): (Sender<i32>, Receiver<i32>) = mpsc::channel();
    let mut children = Vec::new();

    for id in 0..NTHREADS {
        // The sender endpoint can be copied
        let thread_tx = tx.clone();

        // Each thread will send its id via the channel
        let child = thread::spawn(move || {
            // The thread takes ownership over `thread_tx`
            // Each thread queues a message in the channel
            thread_tx.send(id).unwrap();

            // Sending is a non-blocking operation, the thread will continue
            // immediately after sending its message
            println!("thread {} finished", id);
        });

        children.push(child);
    }

    // Here, all the messages are collected
    let mut ids = Vec::with_capacity(NTHREADS as usize);
    for _ in 0..NTHREADS {
        // The `recv` method picks a message from the channel
        // `recv` will block the current thread if there are no messages available
        ids.push(rx.recv());
    }

    // Wait for the threads to complete any remaining work
    for child in children {
        child.join().expect("oops! the child thread panicked");
    }

    // Show the order in which the messages were sent
    println!("{:?}", ids);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      ltac:
        (M.monadic_match_operator
          (M.alloc (| M.call (|std.sync.mpsc.channel |) |))
          [
            fun
                (γ :
                  M.Val
                    ((std.sync.mpsc.Sender.t i32.t)
                    *
                    (std.sync.mpsc.Receiver.t i32.t))) =>
              match M.read (| γ |) with
              | (_, _) =>
                let γ0_0 := Tuple.Access.left γ in
                let γ0_1 := Tuple.Access.right γ in
                let tx := M.copy (| γ0_0 |) in
                let rx := M.copy (| γ0_1 |) in
                let children :
                    M.Val
                      (alloc.vec.Vec.t
                        (std.thread.JoinHandle.t unit)
                        alloc.alloc.Global.t) :=
                  M.alloc (|
                    M.call (|(alloc.vec.Vec.t
                        (std.thread.JoinHandle.t unit)
                        alloc.alloc.Global.t)::["new"]
                    |)
                  |) in
                let _ : M.Val unit :=
                  use
                    (ltac:
                      (M.monadic_match_operator
                        (M.alloc (|
                          M.call (|(ltac:(M.get_method (fun ℐ =>
                              core.iter.traits.collect.IntoIterator.into_iter
                                (Self := core.ops.range.Range.t i32.t)
                                (Trait := ℐ)))
                            {|
                              core.ops.range.Range.start :=
                                (Integer.of_Z 0) : i32.t;
                              core.ops.range.Range.end_ :=
                                M.read (| deref (M.read (| channels.NTHREADS |))
                                |);
                            |})
                          |)
                        |))
                        [
                          fun (γ : M.Val (core.ops.range.Range.t i32.t)) =>
                            (let iter := M.copy (| γ |) in
                            M.loop
                              (let _ : M.Val unit :=
                                ltac:
                                  (M.monadic_match_operator
                                    (M.alloc (|
                                      M.call (|(ltac:(M.get_method (fun ℐ =>
                                          core.iter.traits.iterator.Iterator.next
                                            (Self :=
                                              core.ops.range.Range.t i32.t)
                                            (Trait := ℐ)))
                                        (borrow_mut iter))
                                      |)
                                    |))
                                    [
                                      fun
                                          (γ :
                                            M.Val
                                              (core.option.Option.t i32.t)) =>
                                        match M.read (| γ |) with
                                        | core.option.Option.None =>
                                          M.alloc (|
                                            never_to_any (| M.read (| M.break |)
                                            |)
                                          |)
                                        | _ => M.break_match(||)
                                        end :
                                        M.Val unit;
                                      fun
                                          (γ :
                                            M.Val
                                              (core.option.Option.t i32.t)) =>
                                        match M.read (| γ |) with
                                        | core.option.Option.Some _ =>
                                          let γ0_0 :=
                                            core.option.Option.Get_Some_0 γ in
                                          let id := M.copy (| γ0_0 |) in
                                          let thread_tx :
                                              M.Val
                                                (std.sync.mpsc.Sender.t
                                                  i32.t) :=
                                            M.alloc (|
                                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                                  core.clone.Clone.clone
                                                    (Self :=
                                                      std.sync.mpsc.Sender.t
                                                        i32.t)
                                                    (Trait := ℐ)))
                                                (borrow tx))
                                              |)
                                            |) in
                                          let child :
                                              M.Val
                                                (std.thread.JoinHandle.t
                                                  unit) :=
                                            M.alloc (|
                                              M.call (|(std.thread.spawn
                                                (fun (α0 : unit) =>
                                                  (ltac:
                                                    (M.monadic_match_operator
                                                      (M.alloc (| α0 |))
                                                      [
                                                        fun γ =>
                                                          (M.read (|
                                                            let _ :
                                                                M.Val unit :=
                                                              M.alloc (|
                                                                M.call (|((core.result.Result.t
                                                                      unit
                                                                      (std.sync.mpsc.SendError.t
                                                                        i32.t))::["unwrap"]
                                                                  (M.call (|((std.sync.mpsc.Sender.t
                                                                        i32.t)::["send"]
                                                                    (borrow
                                                                      thread_tx)
                                                                    (M.read (|
                                                                      id
                                                                    |)))
                                                                  |)))
                                                                |)
                                                              |) in
                                                            let _ :
                                                                M.Val unit :=
                                                              let _ :
                                                                  M.Val unit :=
                                                                M.alloc (|
                                                                  M.call (|(std.io.stdio._print
                                                                    (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                                                      (pointer_coercion
                                                                        "Unsize"
                                                                        (borrow
                                                                          (M.alloc (|
                                                                            [
                                                                              M.read (|
                                                                                mk_str
                                                                                  "thread "
                                                                              |);
                                                                              M.read (|
                                                                                mk_str
                                                                                  " finished
"
                                                                              |)
                                                                            ]
                                                                          |))))
                                                                      (pointer_coercion
                                                                        "Unsize"
                                                                        (borrow
                                                                          (M.alloc (|
                                                                            [
                                                                              M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                                                (borrow
                                                                                  id))
                                                                              |)
                                                                            ]
                                                                          |)))))
                                                                    |)))
                                                                  |)
                                                                |) in
                                                              M.alloc (| tt
                                                              |) in
                                                            M.alloc (| tt |)
                                                          |)) :
                                                          unit
                                                      ])) :
                                                  unit))
                                              |)
                                            |) in
                                          let _ : M.Val unit :=
                                            M.alloc (|
                                              M.call (|((alloc.vec.Vec.t
                                                    (std.thread.JoinHandle.t
                                                      unit)
                                                    alloc.alloc.Global.t)::["push"]
                                                (borrow_mut children)
                                                (M.read (| child |)))
                                              |)
                                            |) in
                                          M.alloc (| tt |)
                                        | _ => M.break_match(||)
                                        end :
                                        M.Val unit
                                    ]) in
                              M.alloc (| tt |))) :
                            M.Val unit
                        ])) in
                let ids :
                    M.Val
                      (alloc.vec.Vec.t
                        (core.result.Result.t i32.t std.sync.mpsc.RecvError.t)
                        alloc.alloc.Global.t) :=
                  M.alloc (|
                    M.call (|((alloc.vec.Vec.t
                          (core.result.Result.t i32.t std.sync.mpsc.RecvError.t)
                          alloc.alloc.Global.t)::["with_capacity"]
                      (rust_cast
                        (M.read (| deref (M.read (| channels.NTHREADS |)) |))))
                    |)
                  |) in
                let _ : M.Val unit :=
                  use
                    (ltac:
                      (M.monadic_match_operator
                        (M.alloc (|
                          M.call (|(ltac:(M.get_method (fun ℐ =>
                              core.iter.traits.collect.IntoIterator.into_iter
                                (Self := core.ops.range.Range.t i32.t)
                                (Trait := ℐ)))
                            {|
                              core.ops.range.Range.start :=
                                (Integer.of_Z 0) : i32.t;
                              core.ops.range.Range.end_ :=
                                M.read (| deref (M.read (| channels.NTHREADS |))
                                |);
                            |})
                          |)
                        |))
                        [
                          fun (γ : M.Val (core.ops.range.Range.t i32.t)) =>
                            (let iter := M.copy (| γ |) in
                            M.loop
                              (let _ : M.Val unit :=
                                ltac:
                                  (M.monadic_match_operator
                                    (M.alloc (|
                                      M.call (|(ltac:(M.get_method (fun ℐ =>
                                          core.iter.traits.iterator.Iterator.next
                                            (Self :=
                                              core.ops.range.Range.t i32.t)
                                            (Trait := ℐ)))
                                        (borrow_mut iter))
                                      |)
                                    |))
                                    [
                                      fun
                                          (γ :
                                            M.Val
                                              (core.option.Option.t i32.t)) =>
                                        match M.read (| γ |) with
                                        | core.option.Option.None =>
                                          M.alloc (|
                                            never_to_any (| M.read (| M.break |)
                                            |)
                                          |)
                                        | _ => M.break_match(||)
                                        end :
                                        M.Val unit;
                                      fun
                                          (γ :
                                            M.Val
                                              (core.option.Option.t i32.t)) =>
                                        match M.read (| γ |) with
                                        | core.option.Option.Some _ =>
                                          let γ0_0 :=
                                            core.option.Option.Get_Some_0 γ in
                                          let _ : M.Val unit :=
                                            M.alloc (|
                                              M.call (|((alloc.vec.Vec.t
                                                    (core.result.Result.t
                                                      i32.t
                                                      std.sync.mpsc.RecvError.t)
                                                    alloc.alloc.Global.t)::["push"]
                                                (borrow_mut ids)
                                                (M.call (|((std.sync.mpsc.Receiver.t
                                                      i32.t)::["recv"]
                                                  (borrow rx))
                                                |)))
                                              |)
                                            |) in
                                          M.alloc (| tt |)
                                        | _ => M.break_match(||)
                                        end :
                                        M.Val unit
                                    ]) in
                              M.alloc (| tt |))) :
                            M.Val unit
                        ])) in
                let _ : M.Val unit :=
                  use
                    (ltac:
                      (M.monadic_match_operator
                        (M.alloc (|
                          M.call (|(ltac:(M.get_method (fun ℐ =>
                              core.iter.traits.collect.IntoIterator.into_iter
                                (Self :=
                                  alloc.vec.Vec.t
                                    (std.thread.JoinHandle.t unit)
                                    alloc.alloc.Global.t)
                                (Trait := ℐ)))
                            (M.read (| children |)))
                          |)
                        |))
                        [
                          fun
                              (γ :
                                M.Val
                                  (alloc.vec.into_iter.IntoIter.t
                                    (std.thread.JoinHandle.t unit)
                                    alloc.alloc.Global.t)) =>
                            (let iter := M.copy (| γ |) in
                            M.loop
                              (let _ : M.Val unit :=
                                ltac:
                                  (M.monadic_match_operator
                                    (M.alloc (|
                                      M.call (|(ltac:(M.get_method (fun ℐ =>
                                          core.iter.traits.iterator.Iterator.next
                                            (Self :=
                                              alloc.vec.into_iter.IntoIter.t
                                                (std.thread.JoinHandle.t unit)
                                                alloc.alloc.Global.t)
                                            (Trait := ℐ)))
                                        (borrow_mut iter))
                                      |)
                                    |))
                                    [
                                      fun
                                          (γ :
                                            M.Val
                                              (core.option.Option.t
                                                (std.thread.JoinHandle.t
                                                  unit))) =>
                                        match M.read (| γ |) with
                                        | core.option.Option.None =>
                                          M.alloc (|
                                            never_to_any (| M.read (| M.break |)
                                            |)
                                          |)
                                        | _ => M.break_match(||)
                                        end :
                                        M.Val unit;
                                      fun
                                          (γ :
                                            M.Val
                                              (core.option.Option.t
                                                (std.thread.JoinHandle.t
                                                  unit))) =>
                                        match M.read (| γ |) with
                                        | core.option.Option.Some _ =>
                                          let γ0_0 :=
                                            core.option.Option.Get_Some_0 γ in
                                          let child := M.copy (| γ0_0 |) in
                                          let _ : M.Val unit :=
                                            M.alloc (|
                                              M.call (|((core.result.Result.t
                                                    unit
                                                    (alloc.boxed.Box.t
                                                      (dyn [core.any.Any.Trait])
                                                      alloc.alloc.Global.t))::["expect"]
                                                (M.call (|((std.thread.JoinHandle.t
                                                      unit)::["join"]
                                                  (M.read (| child |)))
                                                |))
                                                (M.read (|
                                                  mk_str
                                                    "oops! the child thread panicked"
                                                |)))
                                              |)
                                            |) in
                                          M.alloc (| tt |)
                                        | _ => M.break_match(||)
                                        end :
                                        M.Val unit
                                    ]) in
                              M.alloc (| tt |))) :
                            M.Val unit
                        ])) in
                let _ : M.Val unit :=
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (| mk_str "" |);
                                  M.read (| mk_str "
" |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                    (borrow ids))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |) in
                M.alloc (| tt |)
              end :
              M.Val unit
          ])
    |)
  )).
