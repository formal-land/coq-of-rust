(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition value_NTHREADS : Value.t :=
  M.run_constant ltac:(M.monadic (M.alloc (| M.alloc (| Value.Integer IntegerKind.I32 3 |) |))).

Axiom Constant_value_NTHREADS : (M.get_constant "channels::NTHREADS") = value_NTHREADS.
Global Hint Rewrite Constant_value_NTHREADS : constant_rewrites.

(*
fn main() {
    // Channels have two endpoints: the `Sender<T>` and the `Receiver<T>`,
    // where `T` is the type of the message to be transferred
    // (type annotation is superfluous)
    let (tx, rx): (Sender<i32>, Receiver<i32>) = mpsc::channel();
    let mut children = Vec::new();

    for id in 0..NTHREADS {
        // The sender endpoint can be copied
        let thread_tx = tx.clone();

        // Each thread will send its id via the channel
        let child = thread::spawn(move || {
            // The thread takes ownership over `thread_tx`
            // Each thread queues a message in the channel
            thread_tx.send(id).unwrap();

            // Sending is a non-blocking operation, the thread will continue
            // immediately after sending its message
            println!("thread {} finished", id);
        });

        children.push(child);
    }

    // Here, all the messages are collected
    let mut ids = Vec::with_capacity(NTHREADS as usize);
    for _ in 0..NTHREADS {
        // The `recv` method picks a message from the channel
        // `recv` will block the current thread if there are no messages available
        ids.push(rx.recv());
    }

    // Wait for the threads to complete any remaining work
    for child in children {
        child.join().expect("oops! the child thread panicked");
    }

    // Show the order in which the messages were sent
    println!("{:?}", ids);
}
*)
Definition main (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [] =>
    ltac:(M.monadic
      (M.read (|
        M.match_operator (|
          None,
          M.alloc (|
            M.call_closure (|
              Ty.tuple
                [
                  Ty.apply (Ty.path "std::sync::mpsc::Sender") [] [ Ty.path "i32" ];
                  Ty.apply (Ty.path "std::sync::mpsc::Receiver") [] [ Ty.path "i32" ]
                ],
              M.get_function (| "std::sync::mpsc::channel", [], [ Ty.path "i32" ] |),
              []
            |)
          |),
          [
            fun γ =>
              ltac:(M.monadic
                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                let tx := M.copy (| γ0_0 |) in
                let rx := M.copy (| γ0_1 |) in
                let~ children :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply (Ty.path "std::thread::JoinHandle") [] [ Ty.tuple [] ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "std::thread::JoinHandle") [] [ Ty.tuple [] ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply (Ty.path "std::thread::JoinHandle") [] [ Ty.tuple [] ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "new",
                        [],
                        []
                      |),
                      []
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.use
                    (M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer IntegerKind.I32 0);
                                ("end_",
                                  M.read (|
                                    M.deref (| M.read (| M.get_constant "channels::NTHREADS" |) |)
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "i32" ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "i32" ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let id := M.copy (| γ0_0 |) in
                                          let~ thread_tx :
                                              Ty.apply
                                                (Ty.path "std::sync::mpsc::Sender")
                                                []
                                                [ Ty.path "i32" ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "std::sync::mpsc::Sender")
                                                  []
                                                  [ Ty.path "i32" ],
                                                M.get_trait_method (|
                                                  "core::clone::Clone",
                                                  Ty.apply
                                                    (Ty.path "std::sync::mpsc::Sender")
                                                    []
                                                    [ Ty.path "i32" ],
                                                  [],
                                                  [],
                                                  "clone",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, tx |) ]
                                              |)
                                            |) in
                                          let~ child :
                                              Ty.apply
                                                (Ty.path "std::thread::JoinHandle")
                                                []
                                                [ Ty.tuple [] ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "std::thread::JoinHandle")
                                                  []
                                                  [ Ty.tuple [] ],
                                                M.get_function (|
                                                  "std::thread::spawn",
                                                  [],
                                                  [
                                                    Ty.function [ Ty.tuple [] ] (Ty.tuple []);
                                                    Ty.tuple []
                                                  ]
                                                |),
                                                [
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Some
                                                                (Ty.function
                                                                  [ Ty.tuple [] ]
                                                                  (Ty.tuple [])),
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.read (|
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            Ty.tuple [],
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                []
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "std::sync::mpsc::SendError")
                                                                                    []
                                                                                    [ Ty.path "i32"
                                                                                    ]
                                                                                ],
                                                                              "unwrap",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  []
                                                                                  [
                                                                                    Ty.tuple [];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "std::sync::mpsc::SendError")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "i32"
                                                                                      ]
                                                                                  ],
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "std::sync::mpsc::Sender")
                                                                                    []
                                                                                    [ Ty.path "i32"
                                                                                    ],
                                                                                  "send",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    thread_tx
                                                                                  |);
                                                                                  M.read (| id |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      let~ _ : Ty.tuple [] :=
                                                                        let~ _ : Ty.tuple [] :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              Ty.tuple [],
                                                                              M.get_function (|
                                                                                "std::io::stdio::_print",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.path
                                                                                    "core::fmt::Arguments",
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "core::fmt::Arguments",
                                                                                    "new_v1",
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        2;
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        1
                                                                                    ],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.alloc (|
                                                                                            Value.Array
                                                                                              [
                                                                                                M.read (|
                                                                                                  Value.String
                                                                                                    "thread "
                                                                                                |);
                                                                                                M.read (|
                                                                                                  Value.String
                                                                                                    " finished
"
                                                                                                |)
                                                                                              ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |);
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.alloc (|
                                                                                            Value.Array
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "core::fmt::rt::Argument",
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.path
                                                                                                      "core::fmt::rt::Argument",
                                                                                                    "new_display",
                                                                                                    [],
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "i32"
                                                                                                    ]
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.deref (|
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          id
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |) in
                                                                      M.alloc (| Value.Tuple [] |)
                                                                    |)))
                                                              ]
                                                            |)))
                                                        | _ =>
                                                          M.impossible "wrong number of arguments"
                                                        end))
                                                ]
                                              |)
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "std::thread::JoinHandle")
                                                        []
                                                        [ Ty.tuple [] ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (| Pointer.Kind.MutRef, children |);
                                                  M.read (| child |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let~ ids :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.path "i32"; Ty.path "std::sync::mpsc::RecvError" ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.path "i32"; Ty.path "std::sync::mpsc::RecvError" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "i32"; Ty.path "std::sync::mpsc::RecvError" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "with_capacity",
                        [],
                        []
                      |),
                      [
                        M.cast
                          (Ty.path "usize")
                          (M.read (|
                            M.deref (| M.read (| M.get_constant "channels::NTHREADS" |) |)
                          |))
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.use
                    (M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer IntegerKind.I32 0);
                                ("end_",
                                  M.read (|
                                    M.deref (| M.read (| M.get_constant "channels::NTHREADS" |) |)
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "i32" ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "i32" ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.path "i32";
                                                          Ty.path "std::sync::mpsc::RecvError"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (| Pointer.Kind.MutRef, ids |);
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "i32";
                                                        Ty.path "std::sync::mpsc::RecvError"
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "std::sync::mpsc::Receiver")
                                                        []
                                                        [ Ty.path "i32" ],
                                                      "recv",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, rx |) ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let~ _ : Ty.tuple [] :=
                  M.use
                    (M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.apply (Ty.path "std::thread::JoinHandle") [] [ Ty.tuple [] ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply (Ty.path "std::thread::JoinHandle") [] [ Ty.tuple [] ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| children |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "std::thread::JoinHandle")
                                              []
                                              [ Ty.tuple [] ]
                                          ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "std::thread::JoinHandle")
                                                []
                                                [ Ty.tuple [] ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let child := M.copy (| γ0_0 |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.apply
                                                        (Ty.path "alloc::boxed::Box")
                                                        []
                                                        [
                                                          Ty.dyn
                                                            [
                                                              ("core::any::Any::Trait", []);
                                                              ("core::marker::Send::AutoTrait", [])
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  "expect",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.tuple [];
                                                        Ty.apply
                                                          (Ty.path "alloc::boxed::Box")
                                                          []
                                                          [
                                                            Ty.dyn
                                                              [
                                                                ("core::any::Any::Trait", []);
                                                                ("core::marker::Send::AutoTrait",
                                                                  [])
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "std::thread::JoinHandle")
                                                        []
                                                        [ Ty.tuple [] ],
                                                      "join",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.read (| child |) ]
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.read (|
                                                        Value.String
                                                          "oops! the child thread panicked"
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let~ _ : Ty.tuple [] :=
                  let~ _ : Ty.tuple [] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_function (| "std::io::stdio::_print", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "core::fmt::Arguments",
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 1
                              ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [
                                          M.read (| Value.String "" |);
                                          M.read (| Value.String "
" |)
                                        ]
                                    |)
                                  |)
                                |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::rt::Argument",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_debug",
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "i32";
                                                        Ty.path "std::sync::mpsc::RecvError"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, ids |) |)
                                              |)
                                            ]
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |) in
                M.alloc (| Value.Tuple [] |)))
          ]
        |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_main : M.IsFunction.Trait "channels::main" main.
Admitted.
Global Typeclasses Opaque main.
