(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition PANGRAM : M.Val (ref (ref str.t)) :=
  M.run (M.alloc (| mk_str "the quick brown fox jumped over the lazy dog
" |)).

(*
fn main() {
    // Spawn the `wc` command
    let process = match Command::new("wc")
        .stdin(Stdio::piped())
        .stdout(Stdio::piped())
        .spawn()
    {
        Err(why) => panic!("couldn't spawn wc: {}", why),
        Ok(process) => process,
    };

    // Write a string to the `stdin` of `wc`.
    //
    // `stdin` has type `Option<ChildStdin>`, but since we know this instance
    // must have one, we can directly `unwrap` it.
    match process.stdin.unwrap().write_all(PANGRAM.as_bytes()) {
        Err(why) => panic!("couldn't write to wc stdin: {}", why),
        Ok(_) => println!("sent pangram to wc"),
    }

    // Because `stdin` does not live after the above calls, it is `drop`ed,
    // and the pipe is closed.
    //
    // This is very important, otherwise `wc` wouldn't start processing the
    // input we just sent.

    // The `stdout` field also has type `Option<ChildStdout>` so must be unwrapped.
    let mut s = String::new();
    match process.stdout.unwrap().read_to_string(&mut s) {
        Err(why) => panic!("couldn't read wc stdout: {}", why),
        Ok(_) => print!("wc responded with:\n{}", s),
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let process : M.Val std.process.Child.t :=
        M.copy (|
          ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(std.process.Command.t::["spawn"]
                  (M.call (|(std.process.Command.t::["stdout"]
                    (M.call (|(std.process.Command.t::["stdin"]
                      (borrow_mut
                        (M.alloc (|
                          M.call (|(std.process.Command.t::["new"]
                            (M.read (| mk_str "wc" |)))
                          |)
                        |)))
                      (M.call (|std.process.Stdio.t::["piped"] |)))
                    |))
                    (M.call (|std.process.Stdio.t::["piped"] |)))
                  |)))
                |)
              |))
              [
                fun
                    (γ :
                      M.Val
                        (core.result.Result.t
                          std.process.Child.t
                          std.io.error.Error.t)) =>
                  match M.read (| γ |) with
                  | core.result.Result.Err _ =>
                    let γ0_0 := core.result.Result.Get_Err_0 γ in
                    let why := M.copy (| γ0_0 |) in
                    M.alloc (|
                      never_to_any (|
                        M.call (|(core.panicking.panic_fmt
                          (M.call (|(core.fmt.Arguments.t::["new_v1"]
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [ M.read (| mk_str "couldn't spawn wc: " |) ]
                                |))))
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                      (borrow why))
                                    |)
                                  ]
                                |)))))
                          |)))
                        |)
                      |)
                    |)
                  | _ => M.break_match(||)
                  end :
                  M.Val std.process.Child.t;
                fun
                    (γ :
                      M.Val
                        (core.result.Result.t
                          std.process.Child.t
                          std.io.error.Error.t)) =>
                  match M.read (| γ |) with
                  | core.result.Result.Ok _ =>
                    let γ0_0 := core.result.Result.Get_Ok_0 γ in
                    let process := M.copy (| γ0_0 |) in
                    process
                  | _ => M.break_match(||)
                  end :
                  M.Val std.process.Child.t
              ])
        |) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|(ltac:(M.get_method (fun ℐ =>
                  std.io.Write.write_all
                    (Self := std.process.ChildStdin.t)
                    (Trait := ℐ)))
                (borrow_mut
                  (M.alloc (|
                    M.call (|((core.option.Option.t
                          std.process.ChildStdin.t)::["unwrap"]
                      (M.read (| std.process.Child.Get_stdin process |)))
                    |)
                  |)))
                (M.call (|(str.t::["as_bytes"]
                  (M.read (| deref (M.read (| child_processes_pipes.PANGRAM |))
                  |)))
                |)))
              |)
            |))
            [
              fun
                  (γ :
                    M.Val (core.result.Result.t unit std.io.error.Error.t)) =>
                match M.read (| γ |) with
                | core.result.Result.Err _ =>
                  let γ0_0 := core.result.Result.Get_Err_0 γ in
                  let why := M.copy (| γ0_0 |) in
                  M.alloc (|
                    never_to_any (|
                      M.call (|(core.panicking.panic_fmt
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (|
                                    mk_str "couldn't write to wc stdin: "
                                  |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                    (borrow why))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |)
                  |)
                | _ => M.break_match(||)
                end :
                M.Val unit;
              fun
                  (γ :
                    M.Val (core.result.Result.t unit std.io.error.Error.t)) =>
                match M.read (| γ |) with
                | core.result.Result.Ok _ =>
                  let γ0_0 := core.result.Result.Get_Ok_0 γ in
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_const"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [ M.read (| mk_str "sent pangram to wc
" |) ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |)
                | _ => M.break_match(||)
                end :
                M.Val unit
            ]) in
      let s : M.Val alloc.string.String.t :=
        M.alloc (| M.call (|alloc.string.String.t::["new"] |) |) in
      ltac:
        (M.monadic_match_operator
          (M.alloc (|
            M.call (|(ltac:(M.get_method (fun ℐ =>
                std.io.Read.read_to_string
                  (Self := std.process.ChildStdout.t)
                  (Trait := ℐ)))
              (borrow_mut
                (M.alloc (|
                  M.call (|((core.option.Option.t
                        std.process.ChildStdout.t)::["unwrap"]
                    (M.read (| std.process.Child.Get_stdout process |)))
                  |)
                |)))
              (borrow_mut s))
            |)
          |))
          [
            fun
                (γ :
                  M.Val (core.result.Result.t usize.t std.io.error.Error.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Err _ =>
                let γ0_0 := core.result.Result.Get_Err_0 γ in
                let why := M.copy (| γ0_0 |) in
                M.alloc (|
                  never_to_any (|
                    M.call (|(core.panicking.panic_fmt
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [ M.read (| mk_str "couldn't read wc stdout: " |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow why))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |)
                |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun
                (γ :
                  M.Val (core.result.Result.t usize.t std.io.error.Error.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Ok _ =>
                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [ M.read (| mk_str "wc responded with:
" |) ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow s))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit
          ])
    |)
  )).
