(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let mut child = Command::new("sleep").arg("5").spawn().unwrap();
    let _result = child.wait().unwrap();

    println!("reached end of main");
}
*)
Definition main (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [] =>
    ltac:(M.monadic
      (M.read (|
        let~ child : Ty.path "std::process::Child" :=
          M.alloc (|
            M.call_closure (|
              Ty.path "std::process::Child",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.path "std::process::Child"; Ty.path "std::io::error::Error" ],
                "unwrap",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.path "std::process::Child"; Ty.path "std::io::error::Error" ],
                  M.get_associated_function (| Ty.path "std::process::Command", "spawn", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&mut") [] [ Ty.path "std::process::Command" ],
                          M.get_associated_function (|
                            Ty.path "std::process::Command",
                            "arg",
                            [],
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "std::process::Command",
                                  M.get_associated_function (|
                                    Ty.path "std::process::Command",
                                    "new",
                                    [],
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                  |),
                                  [ M.read (| Value.String "sleep" |) ]
                                |)
                              |)
                            |);
                            M.read (| Value.String "5" |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)
          |) in
        let~ _result : Ty.path "std::process::ExitStatus" :=
          M.alloc (|
            M.call_closure (|
              Ty.path "std::process::ExitStatus",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.path "std::process::ExitStatus"; Ty.path "std::io::error::Error" ],
                "unwrap",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.path "std::process::ExitStatus"; Ty.path "std::io::error::Error" ],
                  M.get_associated_function (| Ty.path "std::process::Child", "wait", [], [] |),
                  [ M.borrow (| Pointer.Kind.MutRef, child |) ]
                |)
              ]
            |)
          |) in
        let~ _ : Ty.tuple [] :=
          let~ _ : Ty.tuple [] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (| "std::io::stdio::_print", [], [] |),
                [
                  M.call_closure (|
                    Ty.path "core::fmt::Arguments",
                    M.get_associated_function (|
                      Ty.path "core::fmt::Arguments",
                      "new_const",
                      [ Value.Integer IntegerKind.Usize 1 ],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Value.Array [ M.read (| Value.String "reached end of main
" |) ]
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |) in
        M.alloc (| Value.Tuple [] |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Axiom Function_main : M.IsFunction "child_processes_wait::main" main.
Smpl Add apply Function_main : is_function.
