(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let mut child = Command::new("sleep").arg("5").spawn().unwrap();
    let _result = child.wait().unwrap();

    println!("reached end of main");
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let child : M.Val std.process.Child.t :=
        M.alloc (|
          M.call (|((core.result.Result.t
                std.process.Child.t
                std.io.error.Error.t)::["unwrap"]
            (M.call (|(std.process.Command.t::["spawn"]
              (M.call (|(std.process.Command.t::["arg"]
                (borrow_mut
                  (M.alloc (|
                    M.call (|(std.process.Command.t::["new"]
                      (M.read (| mk_str "sleep" |)))
                    |)
                  |)))
                (M.read (| mk_str "5" |)))
              |)))
            |)))
          |)
        |) in
      let _result : M.Val std.process.ExitStatus.t :=
        M.alloc (|
          M.call (|((core.result.Result.t
                std.process.ExitStatus.t
                std.io.error.Error.t)::["unwrap"]
            (M.call (|(std.process.Child.t::["wait"] (borrow_mut child)) |)))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (| [ M.read (| mk_str "reached end of main
" |) ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
