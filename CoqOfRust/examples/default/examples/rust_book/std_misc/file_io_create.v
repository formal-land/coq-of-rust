(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition LOREM_IPSUM : M.Val (ref (ref str.t)) :=
  M.run (ltac:(M.monadic (M.alloc (|
        mk_str
          "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
"
      |)))).

(*
fn main() {
    let path = Path::new("lorem_ipsum.txt");
    let display = path.display();

    // Open a file in write-only mode, returns `io::Result<File>`
    let mut file = match File::create(&path) {
        Err(why) => panic!("couldn't create {}: {}", display, why),
        Ok(file) => file,
    };

    // Write the `LOREM_IPSUM` string to `file`, returns `io::Result<()>`
    match file.write_all(LOREM_IPSUM.as_bytes()) {
        Err(why) => panic!("couldn't write to {}: {}", display, why),
        Ok(_) => println!("successfully wrote to {}", display),
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let path : M.Val (ref std.path.Path.t) :=
        M.alloc (|
          M.call (|(std.path.Path.t::["new"]
            (M.read (| mk_str "lorem_ipsum.txt" |)))
          |)
        |) in
      let display : M.Val std.path.Display.t :=
        M.alloc (|
          M.call (|(std.path.Path.t::["display"] (M.read (| path |))) |)
        |) in
      let file : M.Val std.fs.File.t :=
        M.copy (|
          ltac:
            (M.monadic_match_operator
              (M.alloc (| M.call (|(std.fs.File.t::["create"] (borrow path)) |)
              |))
              [
                fun
                    (γ :
                      M.Val
                        (core.result.Result.t
                          std.fs.File.t
                          std.io.error.Error.t)) =>
                  match M.read (| γ |) with
                  | core.result.Result.Err _ =>
                    let γ0_0 := core.result.Result.Get_Err_0 γ in
                    let why := M.copy (| γ0_0 |) in
                    M.alloc (|
                      (never_to_any (B := std.fs.File.t)) (|
                        M.call (|(core.panicking.panic_fmt
                          (M.call (|(core.fmt.Arguments.t::["new_v1"]
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.read (| mk_str "couldn't create " |);
                                    M.read (| mk_str ": " |)
                                  ]
                                |))))
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                      (borrow display))
                                    |);
                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                      (borrow why))
                                    |)
                                  ]
                                |)))))
                          |)))
                        |)
                      |)
                    |)
                  | _ => M.break_match(||)
                  end :
                  M.Val std.fs.File.t;
                fun
                    (γ :
                      M.Val
                        (core.result.Result.t
                          std.fs.File.t
                          std.io.error.Error.t)) =>
                  match M.read (| γ |) with
                  | core.result.Result.Ok _ =>
                    let γ0_0 := core.result.Result.Get_Ok_0 γ in
                    let file := M.copy (| γ0_0 |) in
                    file
                  | _ => M.break_match(||)
                  end :
                  M.Val std.fs.File.t
              ])
        |) in
      ltac:
        (M.monadic_match_operator
          (M.alloc (|
            M.call (|(ltac:(M.get_method (fun ℐ =>
                std.io.Write.write_all (Self := std.fs.File.t) (Trait := ℐ)))
              (borrow_mut file)
              (M.call (|(str.t::["as_bytes"]
                (M.read (| deref (M.read (| file_io_create.LOREM_IPSUM |)) |)))
              |)))
            |)
          |))
          [
            fun (γ : M.Val (core.result.Result.t unit std.io.error.Error.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Err _ =>
                let γ0_0 := core.result.Result.Get_Err_0 γ in
                let why := M.copy (| γ0_0 |) in
                M.alloc (|
                  (never_to_any (B := unit)) (|
                    M.call (|(core.panicking.panic_fmt
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "couldn't write to " |);
                                M.read (| mk_str ": " |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow display))
                                |);
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow why))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |)
                |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun (γ : M.Val (core.result.Result.t unit std.io.error.Error.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Ok _ =>
                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "successfully wrote to " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow display))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit
          ])
    |)
  ) : unit)).
