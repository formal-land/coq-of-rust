(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Create a path to the desired file
    let path = Path::new("hello.txt");
    let display = path.display();

    // Open the path in read-only mode, returns `io::Result<File>`
    let mut file = match File::open(&path) {
        Err(why) => panic!("couldn't open {}: {}", display, why),
        Ok(file) => file,
    };

    // Read the file contents into a string, returns `io::Result<usize>`
    let mut s = String::new();
    match file.read_to_string(&mut s) {
        Err(why) => panic!("couldn't read {}: {}", display, why),
        Ok(_) => print!("{} contains:\n{}", display, s),
    }

    // `file` goes out of scope, and the "hello.txt" file gets closed
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let path : M.Val (ref std.path.Path.t) :=
        M.alloc (|
          M.call (|(std.path.Path.t::["new"] (M.read (| mk_str "hello.txt" |)))
          |)
        |) in
      let display : M.Val std.path.Display.t :=
        M.alloc (|
          M.call (|(std.path.Path.t::["display"] (M.read (| path |))) |)
        |) in
      let file : M.Val std.fs.File.t :=
        M.copy (|
          ltac:
            (M.monadic_match_operator
              (M.alloc (| M.call (|(std.fs.File.t::["open"] (borrow path)) |)
              |))
              [
                fun
                    (γ :
                      M.Val
                        (core.result.Result.t
                          std.fs.File.t
                          std.io.error.Error.t)) =>
                  match M.read (| γ |) with
                  | core.result.Result.Err _ =>
                    let γ0_0 := core.result.Result.Get_Err_0 γ in
                    let why := M.copy (| γ0_0 |) in
                    M.alloc (|
                      (never_to_any (B := std.fs.File.t)) (|
                        M.call (|(core.panicking.panic_fmt
                          (M.call (|(core.fmt.Arguments.t::["new_v1"]
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.read (| mk_str "couldn't open " |);
                                    M.read (| mk_str ": " |)
                                  ]
                                |))))
                            (pointer_coercion
                              "Unsize"
                              (borrow
                                (M.alloc (|
                                  [
                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                      (borrow display))
                                    |);
                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                      (borrow why))
                                    |)
                                  ]
                                |)))))
                          |)))
                        |)
                      |)
                    |)
                  | _ => M.break_match(||)
                  end :
                  M.Val std.fs.File.t;
                fun
                    (γ :
                      M.Val
                        (core.result.Result.t
                          std.fs.File.t
                          std.io.error.Error.t)) =>
                  match M.read (| γ |) with
                  | core.result.Result.Ok _ =>
                    let γ0_0 := core.result.Result.Get_Ok_0 γ in
                    let file := M.copy (| γ0_0 |) in
                    file
                  | _ => M.break_match(||)
                  end :
                  M.Val std.fs.File.t
              ])
        |) in
      let s : M.Val alloc.string.String.t :=
        M.alloc (| M.call (|alloc.string.String.t::["new"] |) |) in
      ltac:
        (M.monadic_match_operator
          (M.alloc (|
            M.call (|(ltac:(M.get_method (fun ℐ =>
                std.io.Read.read_to_string
                  (Self := std.fs.File.t)
                  (Trait := ℐ)))
              (borrow_mut file)
              (borrow_mut s))
            |)
          |))
          [
            fun
                (γ :
                  M.Val (core.result.Result.t usize.t std.io.error.Error.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Err _ =>
                let γ0_0 := core.result.Result.Get_Err_0 γ in
                let why := M.copy (| γ0_0 |) in
                M.alloc (|
                  (never_to_any (B := unit)) (|
                    M.call (|(core.panicking.panic_fmt
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "couldn't read " |);
                                M.read (| mk_str ": " |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow display))
                                |);
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow why))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |)
                |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun
                (γ :
                  M.Val (core.result.Result.t usize.t std.io.error.Error.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Ok _ =>
                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "" |);
                                M.read (| mk_str " contains:
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow display))
                                |);
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow s))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit
          ])
    |)
  )).
