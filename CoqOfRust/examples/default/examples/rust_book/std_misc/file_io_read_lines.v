(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn read_lines(filename: String) -> io::Lines<BufReader<File>> {
    // Open the file in read-only mode.
    let file = File::open(filename).unwrap();
    // Read the file line by line, and return an iterator of the lines of the file.
    return io::BufReader::new(file).lines();
}
*)
Definition read_lines
    (filename : alloc.string.String.t)
    :
      M
        (std.io.Lines.t
          (std.io.buffered.bufreader.BufReader.t std.fs.File.t)) :=
  ltac:(M.monadic ((
    let filename := M.alloc (| filename |) in
    let return_ :=
      M.return_
        (R :=
          std.io.Lines.t
            (std.io.buffered.bufreader.BufReader.t std.fs.File.t)) in
    ltac:
      (M.monadic_catch_return
        ((never_to_any
          (B :=
            std.io.Lines.t
              (std.io.buffered.bufreader.BufReader.t std.fs.File.t))) (|
          M.read (|
            let file : M.Val std.fs.File.t :=
              M.alloc (|
                M.call (|((core.result.Result.t
                      std.fs.File.t
                      std.io.error.Error.t)::["unwrap"]
                  (M.call (|(std.fs.File.t::["open"] (M.read (| filename |)))
                  |)))
                |)
              |) in
            return_
              (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    std.io.BufRead.lines
                      (Self :=
                        std.io.buffered.bufreader.BufReader.t std.fs.File.t)
                      (Trait := ℐ)))
                  (M.call (|((std.io.buffered.bufreader.BufReader.t
                        std.fs.File.t)::["new"]
                    (M.read (| file |)))
                  |)))
                |)
              |)
          |)
        |)))
  ) : std.io.Lines.t (std.io.buffered.bufreader.BufReader.t std.fs.File.t))).

(*
fn main() {
    // Stores the iterator of lines of the file in lines variable.
    let lines = read_lines("./hosts".to_string());
    // Iterate over the lines of the file, and in this case print them.
    for line in lines {
        println!("{}", line.unwrap());
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let lines :
          M.Val
            (std.io.Lines.t
              (std.io.buffered.bufreader.BufReader.t std.fs.File.t)) :=
        M.alloc (|
          M.call (|(file_io_read_lines.read_lines
            (M.call (|(ltac:(M.get_method (fun ℐ =>
                alloc.string.ToString.to_string (Self := str.t) (Trait := ℐ)))
              (M.read (| mk_str "./hosts" |)))
            |)))
          |)
        |) in
      use
        (ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.iter.traits.collect.IntoIterator.into_iter
                    (Self :=
                      std.io.Lines.t
                        (std.io.buffered.bufreader.BufReader.t std.fs.File.t))
                    (Trait := ℐ)))
                (M.read (| lines |)))
              |)
            |))
            [
              fun
                  (γ :
                    M.Val
                      (std.io.Lines.t
                        (std.io.buffered.bufreader.BufReader.t
                          std.fs.File.t))) =>
                (let iter := M.copy (| γ |) in
                ltac: (M.monadic_loop (
                  let _ : M.Val unit :=
                    ltac:
                      (M.monadic_match_operator
                        (M.alloc (|
                          M.call (|(ltac:(M.get_method (fun ℐ =>
                              core.iter.traits.iterator.Iterator.next
                                (Self :=
                                  std.io.Lines.t
                                    (std.io.buffered.bufreader.BufReader.t
                                      std.fs.File.t))
                                (Trait := ℐ)))
                            (borrow_mut iter))
                          |)
                        |))
                        [
                          fun
                              (γ :
                                M.Val
                                  (core.option.Option.t
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      std.io.error.Error.t))) =>
                            match M.read (| γ |) with
                            | core.option.Option.None =>
                              M.alloc (|
                                (never_to_any (B := unit)) (|
                                  M.read (| M.break (||) |)
                                |)
                              |)
                            | _ => M.break_match(||)
                            end :
                            M.Val unit;
                          fun
                              (γ :
                                M.Val
                                  (core.option.Option.t
                                    (core.result.Result.t
                                      alloc.string.String.t
                                      std.io.error.Error.t))) =>
                            match M.read (| γ |) with
                            | core.option.Option.Some _ =>
                              let γ0_0 := core.option.Option.Get_Some_0 γ in
                              let line := M.copy (| γ0_0 |) in
                              let _ : M.Val unit :=
                                let _ : M.Val unit :=
                                  M.alloc (|
                                    M.call (|(std.io.stdio._print
                                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                        (pointer_coercion
                                          "Unsize"
                                          (borrow
                                            (M.alloc (|
                                              [
                                                M.read (| mk_str "" |);
                                                M.read (| mk_str "
" |)
                                              ]
                                            |))))
                                        (pointer_coercion
                                          "Unsize"
                                          (borrow
                                            (M.alloc (|
                                              [
                                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                  (borrow
                                                    (M.alloc (|
                                                      M.call (|((core.result.Result.t
                                                            alloc.string.String.t
                                                            std.io.error.Error.t)::["unwrap"]
                                                        (M.read (| line |)))
                                                      |)
                                                    |))))
                                                |)
                                              ]
                                            |)))))
                                      |)))
                                    |)
                                  |) in
                                M.alloc (| tt |) in
                              M.alloc (| tt |)
                            | _ => M.break_match(||)
                            end :
                            M.Val unit
                        ]) in
                  M.alloc (| tt |)))) :
                M.Val unit
            ]))
    |)
  ) : unit)).
