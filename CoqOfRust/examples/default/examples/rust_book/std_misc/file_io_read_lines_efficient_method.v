(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn read_lines<P>(filename: P) -> io::Result<io::Lines<io::BufReader<File>>>
where
    P: AsRef<Path>,
{
    let file = File::open(filename)?;
    Ok(io::BufReader::new(file).lines())
}
*)
Definition read_lines
    {P : Set}
    (filename : P)
    :
      M
        ltac:(std.io.error.Result
          (std.io.Lines.t
            (std.io.buffered.bufreader.BufReader.t std.fs.File.t))) :=
  ltac:(M.monadic (
    let filename := M.alloc (| filename |) in
    let return_ :=
      M.return_
        (R :=
          ltac:(std.io.error.Result
            (std.io.Lines.t
              (std.io.buffered.bufreader.BufReader.t std.fs.File.t)))) in
    M.catch_return
      (M.read (|
        let file : M.Val std.fs.File.t :=
          M.copy (|
            ltac:
              (M.monadic_match_operator
                (M.alloc (|
                  M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            std.fs.File.t
                            std.io.error.Error.t)
                        (Trait := ℐ)))
                    (M.call (|(std.fs.File.t::["open"] (M.read (| filename |)))
                    |)))
                  |)
                |))
                [
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              std.io.error.Error.t)
                            std.fs.File.t)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Break _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                      let residual := M.copy (| γ0_0 |) in
                      M.alloc (|
                        never_to_any (|
                          M.read (|
                            return_
                              (M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.try_trait.FromResidual.from_residual
                                    (Self :=
                                      core.result.Result.t
                                        (std.io.Lines.t
                                          (std.io.buffered.bufreader.BufReader.t
                                            std.fs.File.t))
                                        std.io.error.Error.t)
                                    (R :=
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        std.io.error.Error.t)
                                    (Trait := ℐ)))
                                (M.read (| residual |)))
                              |))
                          |)
                        |)
                      |)
                    | _ => M.break_match(||)
                    end :
                    M.Val std.fs.File.t;
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              std.io.error.Error.t)
                            std.fs.File.t)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Continue _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                      let val := M.copy (| γ0_0 |) in
                      val
                    | _ => M.break_match(||)
                    end :
                    M.Val std.fs.File.t
                ])
          |) in
        M.alloc (|
          core.result.Result.Ok
            (M.call (|(ltac:(M.get_method (fun ℐ =>
                std.io.BufRead.lines
                  (Self := std.io.buffered.bufreader.BufReader.t std.fs.File.t)
                  (Trait := ℐ)))
              (M.call (|((std.io.buffered.bufreader.BufReader.t
                    std.fs.File.t)::["new"]
                (M.read (| file |)))
              |)))
            |))
        |)
      |))
  )).

(*
fn main() {
    // File hosts must exist in current path before this produces output
    if let Ok(lines) = read_lines("./hosts") {
        // Consumes the iterator, returns an (Optional) String
        for line in lines {
            if let Ok(ip) = line {
                println!("{}", ip);
            }
        }
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      ltac:
        (M.monadic_match_operator
          (M.alloc (|
            M.call (|(file_io_read_lines_efficient_method.read_lines
              (M.read (| mk_str "./hosts" |)))
            |)
          |))
          [
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      (std.io.Lines.t
                        (std.io.buffered.bufreader.BufReader.t std.fs.File.t))
                      std.io.error.Error.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Ok _ =>
                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                let lines := M.copy (| γ0_0 |) in
                use
                  (ltac:
                    (M.monadic_match_operator
                      (M.alloc (|
                        M.call (|(ltac:(M.get_method (fun ℐ =>
                            core.iter.traits.collect.IntoIterator.into_iter
                              (Self :=
                                std.io.Lines.t
                                  (std.io.buffered.bufreader.BufReader.t
                                    std.fs.File.t))
                              (Trait := ℐ)))
                          (M.read (| lines |)))
                        |)
                      |))
                      [
                        fun
                            (γ :
                              M.Val
                                (std.io.Lines.t
                                  (std.io.buffered.bufreader.BufReader.t
                                    std.fs.File.t))) =>
                          (let iter := M.copy (| γ |) in
                          M.loop
                            (let _ : M.Val unit :=
                              ltac:
                                (M.monadic_match_operator
                                  (M.alloc (|
                                    M.call (|(ltac:(M.get_method (fun ℐ =>
                                        core.iter.traits.iterator.Iterator.next
                                          (Self :=
                                            std.io.Lines.t
                                              (std.io.buffered.bufreader.BufReader.t
                                                std.fs.File.t))
                                          (Trait := ℐ)))
                                      (borrow_mut iter))
                                    |)
                                  |))
                                  [
                                    fun
                                        (γ :
                                          M.Val
                                            (core.option.Option.t
                                              (core.result.Result.t
                                                alloc.string.String.t
                                                std.io.error.Error.t))) =>
                                      match M.read (| γ |) with
                                      | core.option.Option.None =>
                                        M.alloc (|
                                          never_to_any (| M.read (| M.break |)
                                          |)
                                        |)
                                      | _ => M.break_match(||)
                                      end :
                                      M.Val unit;
                                    fun
                                        (γ :
                                          M.Val
                                            (core.option.Option.t
                                              (core.result.Result.t
                                                alloc.string.String.t
                                                std.io.error.Error.t))) =>
                                      match M.read (| γ |) with
                                      | core.option.Option.Some _ =>
                                        let γ0_0 :=
                                          core.option.Option.Get_Some_0 γ in
                                        let line := M.copy (| γ0_0 |) in
                                        ltac:
                                          (M.monadic_match_operator
                                            line
                                            [
                                              fun
                                                  (γ :
                                                    M.Val
                                                      (core.result.Result.t
                                                        alloc.string.String.t
                                                        std.io.error.Error.t)) =>
                                                match M.read (| γ |) with
                                                | core.result.Result.Ok _ =>
                                                  let γ0_0 :=
                                                    core.result.Result.Get_Ok_0
                                                      γ in
                                                  let ip := M.copy (| γ0_0 |) in
                                                  let _ : M.Val unit :=
                                                    let _ : M.Val unit :=
                                                      M.alloc (|
                                                        M.call (|(std.io.stdio._print
                                                          (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                                            (pointer_coercion
                                                              "Unsize"
                                                              (borrow
                                                                (M.alloc (|
                                                                  [
                                                                    M.read (|
                                                                      mk_str ""
                                                                    |);
                                                                    M.read (|
                                                                      mk_str "
"
                                                                    |)
                                                                  ]
                                                                |))))
                                                            (pointer_coercion
                                                              "Unsize"
                                                              (borrow
                                                                (M.alloc (|
                                                                  [
                                                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                                      (borrow
                                                                        ip))
                                                                    |)
                                                                  ]
                                                                |)))))
                                                          |)))
                                                        |)
                                                      |) in
                                                    M.alloc (| tt |) in
                                                  M.alloc (| tt |)
                                                | _ => M.break_match(||)
                                                end :
                                                M.Val unit;
                                              fun
                                                  (γ :
                                                    M.Val
                                                      (core.result.Result.t
                                                        alloc.string.String.t
                                                        std.io.error.Error.t)) =>
                                                (M.alloc (| tt |)) : M.Val unit
                                            ])
                                      | _ => M.break_match(||)
                                      end :
                                      M.Val unit
                                  ]) in
                            M.alloc (| tt |))) :
                          M.Val unit
                      ]))
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      (std.io.Lines.t
                        (std.io.buffered.bufreader.BufReader.t std.fs.File.t))
                      std.io.error.Error.t)) =>
              (M.alloc (| tt |)) : M.Val unit
          ])
    |)
  )).
