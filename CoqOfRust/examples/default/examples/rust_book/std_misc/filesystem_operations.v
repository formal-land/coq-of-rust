(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn cat(path: &Path) -> io::Result<String> {
    let mut f = File::open(path)?;
    let mut s = String::new();
    match f.read_to_string(&mut s) {
        Ok(_) => Ok(s),
        Err(e) => Err(e),
    }
}
*)
Definition cat
    (path : ref std.path.Path.t)
    : M ltac:(std.io.error.Result alloc.string.String.t) :=
  ltac:(M.monadic (
    let path := M.alloc (| path |) in
    let return_ :=
      M.return_ (R := ltac:(std.io.error.Result alloc.string.String.t)) in
    M.catch_return
      (M.read (|
        let f : M.Val std.fs.File.t :=
          M.copy (|
            ltac:
              (M.monadic_match_operator
                (M.alloc (|
                  M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            std.fs.File.t
                            std.io.error.Error.t)
                        (Trait := ℐ)))
                    (M.call (|(std.fs.File.t::["open"] (M.read (| path |))) |)))
                  |)
                |))
                [
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              std.io.error.Error.t)
                            std.fs.File.t)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Break _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                      let residual := M.copy (| γ0_0 |) in
                      M.alloc (|
                        (never_to_any (B := std.fs.File.t)) (|
                          M.read (|
                            return_
                              (M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.try_trait.FromResidual.from_residual
                                    (Self :=
                                      core.result.Result.t
                                        alloc.string.String.t
                                        std.io.error.Error.t)
                                    (R :=
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        std.io.error.Error.t)
                                    (Trait := ℐ)))
                                (M.read (| residual |)))
                              |))
                          |)
                        |)
                      |)
                    | _ => M.break_match(||)
                    end :
                    M.Val std.fs.File.t;
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              std.io.error.Error.t)
                            std.fs.File.t)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Continue _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                      let val := M.copy (| γ0_0 |) in
                      val
                    | _ => M.break_match(||)
                    end :
                    M.Val std.fs.File.t
                ])
          |) in
        let s : M.Val alloc.string.String.t :=
          M.alloc (| M.call (|alloc.string.String.t::["new"] |) |) in
        ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|(ltac:(M.get_method (fun ℐ =>
                  std.io.Read.read_to_string
                    (Self := std.fs.File.t)
                    (Trait := ℐ)))
                (borrow_mut f)
                (borrow_mut s))
              |)
            |))
            [
              fun
                  (γ :
                    M.Val
                      (core.result.Result.t usize.t std.io.error.Error.t)) =>
                match M.read (| γ |) with
                | core.result.Result.Ok _ =>
                  let γ0_0 := core.result.Result.Get_Ok_0 γ in
                  M.alloc (| core.result.Result.Ok (M.read (| s |)) |)
                | _ => M.break_match(||)
                end :
                M.Val
                  (core.result.Result.t
                    alloc.string.String.t
                    std.io.error.Error.t);
              fun
                  (γ :
                    M.Val
                      (core.result.Result.t usize.t std.io.error.Error.t)) =>
                match M.read (| γ |) with
                | core.result.Result.Err _ =>
                  let γ0_0 := core.result.Result.Get_Err_0 γ in
                  let e := M.copy (| γ0_0 |) in
                  M.alloc (| core.result.Result.Err (M.read (| e |)) |)
                | _ => M.break_match(||)
                end :
                M.Val
                  (core.result.Result.t
                    alloc.string.String.t
                    std.io.error.Error.t)
            ])
      |))
  )).

(*
fn echo(s: &str, path: &Path) -> io::Result<()> {
    let mut f = File::create(path)?;

    f.write_all(s.as_bytes())
}
*)
Definition echo
    (s : ref str.t)
    (path : ref std.path.Path.t)
    : M ltac:(std.io.error.Result unit) :=
  ltac:(M.monadic (
    let s := M.alloc (| s |) in
    let path := M.alloc (| path |) in
    let return_ := M.return_ (R := ltac:(std.io.error.Result unit)) in
    M.catch_return
      (M.read (|
        let f : M.Val std.fs.File.t :=
          M.copy (|
            ltac:
              (M.monadic_match_operator
                (M.alloc (|
                  M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.ops.try_trait.Try.branch
                        (Self :=
                          core.result.Result.t
                            std.fs.File.t
                            std.io.error.Error.t)
                        (Trait := ℐ)))
                    (M.call (|(std.fs.File.t::["create"] (M.read (| path |)))
                    |)))
                  |)
                |))
                [
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              std.io.error.Error.t)
                            std.fs.File.t)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Break _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                      let residual := M.copy (| γ0_0 |) in
                      M.alloc (|
                        (never_to_any (B := std.fs.File.t)) (|
                          M.read (|
                            return_
                              (M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.try_trait.FromResidual.from_residual
                                    (Self :=
                                      core.result.Result.t
                                        unit
                                        std.io.error.Error.t)
                                    (R :=
                                      core.result.Result.t
                                        core.convert.Infallible.t
                                        std.io.error.Error.t)
                                    (Trait := ℐ)))
                                (M.read (| residual |)))
                              |))
                          |)
                        |)
                      |)
                    | _ => M.break_match(||)
                    end :
                    M.Val std.fs.File.t;
                  fun
                      (γ :
                        M.Val
                          (core.ops.control_flow.ControlFlow.t
                            (core.result.Result.t
                              core.convert.Infallible.t
                              std.io.error.Error.t)
                            std.fs.File.t)) =>
                    match M.read (| γ |) with
                    | core.ops.control_flow.ControlFlow.Continue _ =>
                      let γ0_0 :=
                        core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                      let val := M.copy (| γ0_0 |) in
                      val
                    | _ => M.break_match(||)
                    end :
                    M.Val std.fs.File.t
                ])
          |) in
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              std.io.Write.write_all (Self := std.fs.File.t) (Trait := ℐ)))
            (borrow_mut f)
            (M.call (|(str.t::["as_bytes"] (M.read (| s |))) |)))
          |)
        |)
      |))
  )).

(*
fn touch(path: &Path) -> io::Result<()> {
    match OpenOptions::new().create(true).write(true).open(path) {
        Ok(_) => Ok(()),
        Err(e) => Err(e),
    }
}
*)
Definition touch
    (path : ref std.path.Path.t)
    : M ltac:(std.io.error.Result unit) :=
  ltac:(M.monadic (
    let path := M.alloc (| path |) in
    M.read (|
      ltac:
        (M.monadic_match_operator
          (M.alloc (|
            M.call (|(std.fs.OpenOptions.t::["open"]
              (borrow
                (deref
                  (M.call (|(std.fs.OpenOptions.t::["write"]
                    (M.call (|(std.fs.OpenOptions.t::["create"]
                      (borrow_mut
                        (M.alloc (| M.call (|std.fs.OpenOptions.t::["new"] |)
                        |)))
                      true)
                    |))
                    true)
                  |))))
              (M.read (| path |)))
            |)
          |))
          [
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      std.fs.File.t
                      std.io.error.Error.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Ok _ =>
                let γ0_0 := core.result.Result.Get_Ok_0 γ in
                M.alloc (| core.result.Result.Ok tt |)
              | _ => M.break_match(||)
              end :
              M.Val (core.result.Result.t unit std.io.error.Error.t);
            fun
                (γ :
                  M.Val
                    (core.result.Result.t
                      std.fs.File.t
                      std.io.error.Error.t)) =>
              match M.read (| γ |) with
              | core.result.Result.Err _ =>
                let γ0_0 := core.result.Result.Get_Err_0 γ in
                let e := M.copy (| γ0_0 |) in
                M.alloc (| core.result.Result.Err (M.read (| e |)) |)
              | _ => M.break_match(||)
              end :
              M.Val (core.result.Result.t unit std.io.error.Error.t)
          ])
    |)
  )).

(*
fn main() {
    println!("`mkdir a`");
    // Create a directory, returns `io::Result<()>`
    match fs::create_dir("a") {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(_) => {}
    }

    println!("`echo hello > a/b.txt`");
    // The previous match can be simplified using the `unwrap_or_else` method
    echo("hello", &Path::new("a/b.txt")).unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`mkdir -p a/c/d`");
    // Recursively create a directory, returns `io::Result<()>`
    fs::create_dir_all("a/c/d").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`touch a/c/e.txt`");
    touch(&Path::new("a/c/e.txt")).unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`ln -s ../b.txt a/c/b.txt`");
    // Create a symbolic link, returns `io::Result<()>`
    if cfg!(target_family = "unix") {
        unix::fs::symlink("../b.txt", "a/c/b.txt").unwrap_or_else(|why| {
            println!("! {:?}", why.kind());
        });
    }

    println!("`cat a/c/b.txt`");
    match cat(&Path::new("a/c/b.txt")) {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(s) => println!("> {}", s),
    }

    println!("`ls a`");
    // Read the contents of a directory, returns `io::Result<Vec<Path>>`
    match fs::read_dir("a") {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(paths) => {
            for path in paths {
                println!("> {:?}", path.unwrap().path());
            }
        }
    }

    println!("`rm a/c/e.txt`");
    // Remove a file, returns `io::Result<()>`
    fs::remove_file("a/c/e.txt").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`rmdir a/c/d`");
    // Remove an empty directory, returns `io::Result<()>`
    fs::remove_dir("a/c/d").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (| [ M.read (| mk_str "`mkdir a`
" |) ] |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|(std.fs.create_dir (M.read (| mk_str "a" |))) |)
            |))
            [
              fun
                  (γ :
                    M.Val (core.result.Result.t unit std.io.error.Error.t)) =>
                match M.read (| γ |) with
                | core.result.Result.Err _ =>
                  let γ0_0 := core.result.Result.Get_Err_0 γ in
                  let why := M.copy (| γ0_0 |) in
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (| mk_str "! " |);
                                  M.read (| mk_str "
" |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                    (borrow
                                      (M.alloc (|
                                        M.call (|(std.io.error.Error.t::["kind"]
                                          (borrow why))
                                        |)
                                      |))))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |)
                | _ => M.break_match(||)
                end :
                M.Val unit;
              fun
                  (γ :
                    M.Val (core.result.Result.t unit std.io.error.Error.t)) =>
                match M.read (| γ |) with
                | core.result.Result.Ok _ =>
                  let γ0_0 := core.result.Result.Get_Ok_0 γ in
                  M.alloc (| tt |)
                | _ => M.break_match(||)
                end :
                M.Val unit
            ]) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "`echo hello > a/b.txt`
" |) ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|((core.result.Result.t
                unit
                std.io.error.Error.t)::["unwrap_or_else"]
            (M.call (|(filesystem_operations.echo
              (M.read (| mk_str "hello" |))
              (M.call (|(std.path.Path.t::["new"]
                (M.read (| mk_str "a/b.txt" |)))
              |)))
            |))
            (fun (α0 : std.io.error.Error.t) =>
              (ltac:
                (M.monadic_match_operator
                  (M.alloc (| α0 |))
                  [
                    fun γ =>
                      (let why := M.copy (| γ |) in
                      M.read (|
                        let _ : M.Val unit :=
                          let _ : M.Val unit :=
                            M.alloc (|
                              M.call (|(std.io.stdio._print
                                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                  (pointer_coercion
                                    "Unsize"
                                    (borrow
                                      (M.alloc (|
                                        [
                                          M.read (| mk_str "! " |);
                                          M.read (| mk_str "
" |)
                                        ]
                                      |))))
                                  (pointer_coercion
                                    "Unsize"
                                    (borrow
                                      (M.alloc (|
                                        [
                                          M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                            (borrow
                                              (M.alloc (|
                                                M.call (|(std.io.error.Error.t::["kind"]
                                                  (borrow why))
                                                |)
                                              |))))
                                          |)
                                        ]
                                      |)))))
                                |)))
                              |)
                            |) in
                          M.alloc (| tt |) in
                        M.alloc (| tt |)
                      |)) :
                      unit
                  ])) :
              unit))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (| [ M.read (| mk_str "`mkdir -p a/c/d`
" |) ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|((core.result.Result.t
                unit
                std.io.error.Error.t)::["unwrap_or_else"]
            (M.call (|(std.fs.create_dir_all (M.read (| mk_str "a/c/d" |))) |))
            (fun (α0 : std.io.error.Error.t) =>
              (ltac:
                (M.monadic_match_operator
                  (M.alloc (| α0 |))
                  [
                    fun γ =>
                      (let why := M.copy (| γ |) in
                      M.read (|
                        let _ : M.Val unit :=
                          let _ : M.Val unit :=
                            M.alloc (|
                              M.call (|(std.io.stdio._print
                                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                  (pointer_coercion
                                    "Unsize"
                                    (borrow
                                      (M.alloc (|
                                        [
                                          M.read (| mk_str "! " |);
                                          M.read (| mk_str "
" |)
                                        ]
                                      |))))
                                  (pointer_coercion
                                    "Unsize"
                                    (borrow
                                      (M.alloc (|
                                        [
                                          M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                            (borrow
                                              (M.alloc (|
                                                M.call (|(std.io.error.Error.t::["kind"]
                                                  (borrow why))
                                                |)
                                              |))))
                                          |)
                                        ]
                                      |)))))
                                |)))
                              |)
                            |) in
                          M.alloc (| tt |) in
                        M.alloc (| tt |)
                      |)) :
                      unit
                  ])) :
              unit))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (| [ M.read (| mk_str "`touch a/c/e.txt`
" |) ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|((core.result.Result.t
                unit
                std.io.error.Error.t)::["unwrap_or_else"]
            (M.call (|(filesystem_operations.touch
              (M.call (|(std.path.Path.t::["new"]
                (M.read (| mk_str "a/c/e.txt" |)))
              |)))
            |))
            (fun (α0 : std.io.error.Error.t) =>
              (ltac:
                (M.monadic_match_operator
                  (M.alloc (| α0 |))
                  [
                    fun γ =>
                      (let why := M.copy (| γ |) in
                      M.read (|
                        let _ : M.Val unit :=
                          let _ : M.Val unit :=
                            M.alloc (|
                              M.call (|(std.io.stdio._print
                                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                  (pointer_coercion
                                    "Unsize"
                                    (borrow
                                      (M.alloc (|
                                        [
                                          M.read (| mk_str "! " |);
                                          M.read (| mk_str "
" |)
                                        ]
                                      |))))
                                  (pointer_coercion
                                    "Unsize"
                                    (borrow
                                      (M.alloc (|
                                        [
                                          M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                            (borrow
                                              (M.alloc (|
                                                M.call (|(std.io.error.Error.t::["kind"]
                                                  (borrow why))
                                                |)
                                              |))))
                                          |)
                                        ]
                                      |)))))
                                |)))
                              |)
                            |) in
                          M.alloc (| tt |) in
                        M.alloc (| tt |)
                      |)) :
                      unit
                  ])) :
              unit))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "`ln -s ../b.txt a/c/b.txt`
" |) ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        if M.read (| use (M.alloc (| true |)) |) then
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|((core.result.Result.t
                    unit
                    std.io.error.Error.t)::["unwrap_or_else"]
                (M.call (|(std.os.unix.fs.symlink
                  (M.read (| mk_str "../b.txt" |))
                  (M.read (| mk_str "a/c/b.txt" |)))
                |))
                (fun (α0 : std.io.error.Error.t) =>
                  (ltac:
                    (M.monadic_match_operator
                      (M.alloc (| α0 |))
                      [
                        fun γ =>
                          (let why := M.copy (| γ |) in
                          M.read (|
                            let _ : M.Val unit :=
                              let _ : M.Val unit :=
                                M.alloc (|
                                  M.call (|(std.io.stdio._print
                                    (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                      (pointer_coercion
                                        "Unsize"
                                        (borrow
                                          (M.alloc (|
                                            [
                                              M.read (| mk_str "! " |);
                                              M.read (| mk_str "
" |)
                                            ]
                                          |))))
                                      (pointer_coercion
                                        "Unsize"
                                        (borrow
                                          (M.alloc (|
                                            [
                                              M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                                (borrow
                                                  (M.alloc (|
                                                    M.call (|(std.io.error.Error.t::["kind"]
                                                      (borrow why))
                                                    |)
                                                  |))))
                                              |)
                                            ]
                                          |)))))
                                    |)))
                                  |)
                                |) in
                              M.alloc (| tt |) in
                            M.alloc (| tt |)
                          |)) :
                          unit
                      ])) :
                  unit))
              |)
            |) in
          M.alloc (| tt |)
        else
          M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (| [ M.read (| mk_str "`cat a/c/b.txt`
" |) ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|(filesystem_operations.cat
                (M.call (|(std.path.Path.t::["new"]
                  (M.read (| mk_str "a/c/b.txt" |)))
                |)))
              |)
            |))
            [
              fun
                  (γ :
                    M.Val
                      (core.result.Result.t
                        alloc.string.String.t
                        std.io.error.Error.t)) =>
                match M.read (| γ |) with
                | core.result.Result.Err _ =>
                  let γ0_0 := core.result.Result.Get_Err_0 γ in
                  let why := M.copy (| γ0_0 |) in
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (| mk_str "! " |);
                                  M.read (| mk_str "
" |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                    (borrow
                                      (M.alloc (|
                                        M.call (|(std.io.error.Error.t::["kind"]
                                          (borrow why))
                                        |)
                                      |))))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |)
                | _ => M.break_match(||)
                end :
                M.Val unit;
              fun
                  (γ :
                    M.Val
                      (core.result.Result.t
                        alloc.string.String.t
                        std.io.error.Error.t)) =>
                match M.read (| γ |) with
                | core.result.Result.Ok _ =>
                  let γ0_0 := core.result.Result.Get_Ok_0 γ in
                  let s := M.copy (| γ0_0 |) in
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (| mk_str "> " |);
                                  M.read (| mk_str "
" |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                    (borrow s))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |)
                | _ => M.break_match(||)
                end :
                M.Val unit
            ]) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow (M.alloc (| [ M.read (| mk_str "`ls a`
" |) ] |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            (M.alloc (| M.call (|(std.fs.read_dir (M.read (| mk_str "a" |))) |)
            |))
            [
              fun
                  (γ :
                    M.Val
                      (core.result.Result.t
                        std.fs.ReadDir.t
                        std.io.error.Error.t)) =>
                match M.read (| γ |) with
                | core.result.Result.Err _ =>
                  let γ0_0 := core.result.Result.Get_Err_0 γ in
                  let why := M.copy (| γ0_0 |) in
                  let _ : M.Val unit :=
                    M.alloc (|
                      M.call (|(std.io.stdio._print
                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.read (| mk_str "! " |);
                                  M.read (| mk_str "
" |)
                                ]
                              |))))
                          (pointer_coercion
                            "Unsize"
                            (borrow
                              (M.alloc (|
                                [
                                  M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                    (borrow
                                      (M.alloc (|
                                        M.call (|(std.io.error.Error.t::["kind"]
                                          (borrow why))
                                        |)
                                      |))))
                                  |)
                                ]
                              |)))))
                        |)))
                      |)
                    |) in
                  M.alloc (| tt |)
                | _ => M.break_match(||)
                end :
                M.Val unit;
              fun
                  (γ :
                    M.Val
                      (core.result.Result.t
                        std.fs.ReadDir.t
                        std.io.error.Error.t)) =>
                match M.read (| γ |) with
                | core.result.Result.Ok _ =>
                  let γ0_0 := core.result.Result.Get_Ok_0 γ in
                  let paths := M.copy (| γ0_0 |) in
                  use
                    (ltac:
                      (M.monadic_match_operator
                        (M.alloc (|
                          M.call (|(ltac:(M.get_method (fun ℐ =>
                              core.iter.traits.collect.IntoIterator.into_iter
                                (Self := std.fs.ReadDir.t)
                                (Trait := ℐ)))
                            (M.read (| paths |)))
                          |)
                        |))
                        [
                          fun (γ : M.Val std.fs.ReadDir.t) =>
                            (let iter := M.copy (| γ |) in
                            M.loop
                              (let _ : M.Val unit :=
                                ltac:
                                  (M.monadic_match_operator
                                    (M.alloc (|
                                      M.call (|(ltac:(M.get_method (fun ℐ =>
                                          core.iter.traits.iterator.Iterator.next
                                            (Self := std.fs.ReadDir.t)
                                            (Trait := ℐ)))
                                        (borrow_mut iter))
                                      |)
                                    |))
                                    [
                                      fun
                                          (γ :
                                            M.Val
                                              (core.option.Option.t
                                                (core.result.Result.t
                                                  std.fs.DirEntry.t
                                                  std.io.error.Error.t))) =>
                                        match M.read (| γ |) with
                                        | core.option.Option.None =>
                                          M.alloc (|
                                            (never_to_any (B := unit)) (|
                                              M.read (| M.break |)
                                            |)
                                          |)
                                        | _ => M.break_match(||)
                                        end :
                                        M.Val unit;
                                      fun
                                          (γ :
                                            M.Val
                                              (core.option.Option.t
                                                (core.result.Result.t
                                                  std.fs.DirEntry.t
                                                  std.io.error.Error.t))) =>
                                        match M.read (| γ |) with
                                        | core.option.Option.Some _ =>
                                          let γ0_0 :=
                                            core.option.Option.Get_Some_0 γ in
                                          let path := M.copy (| γ0_0 |) in
                                          let _ : M.Val unit :=
                                            let _ : M.Val unit :=
                                              M.alloc (|
                                                M.call (|(std.io.stdio._print
                                                  (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                                    (pointer_coercion
                                                      "Unsize"
                                                      (borrow
                                                        (M.alloc (|
                                                          [
                                                            M.read (|
                                                              mk_str "> "
                                                            |);
                                                            M.read (| mk_str "
"
                                                            |)
                                                          ]
                                                        |))))
                                                    (pointer_coercion
                                                      "Unsize"
                                                      (borrow
                                                        (M.alloc (|
                                                          [
                                                            M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                                              (borrow
                                                                (M.alloc (|
                                                                  M.call (|(std.fs.DirEntry.t::["path"]
                                                                    (borrow
                                                                      (M.alloc (|
                                                                        M.call (|((core.result.Result.t
                                                                              std.fs.DirEntry.t
                                                                              std.io.error.Error.t)::["unwrap"]
                                                                          (M.read (|
                                                                            path
                                                                          |)))
                                                                        |)
                                                                      |))))
                                                                  |)
                                                                |))))
                                                            |)
                                                          ]
                                                        |)))))
                                                  |)))
                                                |)
                                              |) in
                                            M.alloc (| tt |) in
                                          M.alloc (| tt |)
                                        | _ => M.break_match(||)
                                        end :
                                        M.Val unit
                                    ]) in
                              M.alloc (| tt |))) :
                            M.Val unit
                        ]))
                | _ => M.break_match(||)
                end :
                M.Val unit
            ]) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (| [ M.read (| mk_str "`rm a/c/e.txt`
" |) ] |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|((core.result.Result.t
                unit
                std.io.error.Error.t)::["unwrap_or_else"]
            (M.call (|(std.fs.remove_file (M.read (| mk_str "a/c/e.txt" |))) |))
            (fun (α0 : std.io.error.Error.t) =>
              (ltac:
                (M.monadic_match_operator
                  (M.alloc (| α0 |))
                  [
                    fun γ =>
                      (let why := M.copy (| γ |) in
                      M.read (|
                        let _ : M.Val unit :=
                          let _ : M.Val unit :=
                            M.alloc (|
                              M.call (|(std.io.stdio._print
                                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                  (pointer_coercion
                                    "Unsize"
                                    (borrow
                                      (M.alloc (|
                                        [
                                          M.read (| mk_str "! " |);
                                          M.read (| mk_str "
" |)
                                        ]
                                      |))))
                                  (pointer_coercion
                                    "Unsize"
                                    (borrow
                                      (M.alloc (|
                                        [
                                          M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                            (borrow
                                              (M.alloc (|
                                                M.call (|(std.io.error.Error.t::["kind"]
                                                  (borrow why))
                                                |)
                                              |))))
                                          |)
                                        ]
                                      |)))))
                                |)))
                              |)
                            |) in
                          M.alloc (| tt |) in
                        M.alloc (| tt |)
                      |)) :
                      unit
                  ])) :
              unit))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (| [ M.read (| mk_str "`rmdir a/c/d`
" |) ] |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|((core.result.Result.t
                unit
                std.io.error.Error.t)::["unwrap_or_else"]
            (M.call (|(std.fs.remove_dir (M.read (| mk_str "a/c/d" |))) |))
            (fun (α0 : std.io.error.Error.t) =>
              (ltac:
                (M.monadic_match_operator
                  (M.alloc (| α0 |))
                  [
                    fun γ =>
                      (let why := M.copy (| γ |) in
                      M.read (|
                        let _ : M.Val unit :=
                          let _ : M.Val unit :=
                            M.alloc (|
                              M.call (|(std.io.stdio._print
                                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                  (pointer_coercion
                                    "Unsize"
                                    (borrow
                                      (M.alloc (|
                                        [
                                          M.read (| mk_str "! " |);
                                          M.read (| mk_str "
" |)
                                        ]
                                      |))))
                                  (pointer_coercion
                                    "Unsize"
                                    (borrow
                                      (M.alloc (|
                                        [
                                          M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                                            (borrow
                                              (M.alloc (|
                                                M.call (|(std.io.error.Error.t::["kind"]
                                                  (borrow why))
                                                |)
                                              |))))
                                          |)
                                        ]
                                      |)))))
                                |)))
                              |)
                            |) in
                          M.alloc (| tt |) in
                        M.alloc (| tt |)
                      |)) :
                      unit
                  ])) :
              unit))
          |)
        |) in
      M.alloc (| tt |)
    |)
  )).
