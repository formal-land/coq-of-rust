(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Error ForeignMod.

(*
fn cos(z: Complex) -> Complex {
    unsafe { ccosf(z) }
}
*)
Definition cos
    (z : foreign_function_interface.Complex.t)
    : M foreign_function_interface.Complex.t :=
  ltac:(M.monadic ((
    let z := M.alloc (| z |) in
    M.call (|(foreign_function_interface.ccosf (M.read (| z |))) |)
  ) : foreign_function_interface.Complex.t)).

(*
fn main() {
    // z = -1 + 0i
    let z = Complex { re: -1., im: 0. };

    // calling a foreign function is an unsafe operation
    let z_sqrt = unsafe { csqrtf(z) };

    println!("the square root of {:?} is {:?}", z, z_sqrt);

    // calling safe API wrapped around unsafe operation
    println!("cos({:?}) = {:?}", z, cos(z));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let z : M.Val foreign_function_interface.Complex.t :=
        M.alloc (|
          {|
            foreign_function_interface.Complex.re :=
              M.read (| UnsupportedLiteral : M.Val f32.t |);
            foreign_function_interface.Complex.im :=
              M.read (| UnsupportedLiteral : M.Val f32.t |);
          |} : foreign_function_interface.Complex.t
        |) in
      let z_sqrt : M.Val foreign_function_interface.Complex.t :=
        M.alloc (|
          M.call (|(foreign_function_interface.csqrtf (M.read (| z |))) |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "the square root of " |);
                        M.read (| mk_str " is " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow z))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow z_sqrt))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "cos(" |);
                        M.read (| mk_str ") = " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow z))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|(foreign_function_interface.cos
                                (M.read (| z |)))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).

Module  Complex.
Section Complex.
  Record t : Set := {
    re : f32.t;
    im : f32.t;
  }.
  
  Definition Get_re :=
    Ref.map (fun α => Some α.(re)) (fun β α => Some (α <| re := β |>)).
  Definition Get_im :=
    Ref.map (fun α => Some α.(im)) (fun β α => Some (α <| im := β |>)).
End Complex.
End Complex.

Module  Impl_core_clone_Clone_for_foreign_function_interface_Complex_t.
Section Impl_core_clone_Clone_for_foreign_function_interface_Complex_t.
  Definition Self : Set := foreign_function_interface.Complex.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M foreign_function_interface.Complex.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            (DeclaredButUndefinedVariable
              (A := core.clone.AssertParamIsClone.t f32.t))
            [
              fun (γ : M.Val (core.clone.AssertParamIsClone.t f32.t)) =>
                (deref (M.read (| self |))) :
                M.Val foreign_function_interface.Complex.t
            ])
      |)
    ) : foreign_function_interface.Complex.t)).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_foreign_function_interface_Complex_t.
End Impl_core_clone_Clone_for_foreign_function_interface_Complex_t.

Module  Impl_core_marker_Copy_for_foreign_function_interface_Complex_t.
Section Impl_core_marker_Copy_for_foreign_function_interface_Complex_t.
  Definition Self : Set := foreign_function_interface.Complex.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_foreign_function_interface_Complex_t.
End Impl_core_marker_Copy_for_foreign_function_interface_Complex_t.

Module  Impl_core_fmt_Debug_for_foreign_function_interface_Complex_t.
Section Impl_core_fmt_Debug_for_foreign_function_interface_Complex_t.
  Definition Self : Set := foreign_function_interface.Complex.t.
  
  (*
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          if self.im < 0. {
              write!(f, "{}-{}i", self.re, -self.im)
          } else {
              write!(f, "{}+{}i", self.re, self.im)
          }
      }
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.read (|
        if
          M.read (|
            use
              (M.alloc (|
                BinOp.Pure.lt
                  (M.read (|
                    foreign_function_interface.Complex.Get_im
                      (deref (M.read (| self |)))
                  |))
                  (M.read (| UnsupportedLiteral : M.Val f32.t |))
              |))
          |)
        then
          M.alloc (|
            M.call (|(core.fmt.Formatter.t::["write_fmt"]
              (M.read (| f |))
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "" |);
                        M.read (| mk_str "-" |);
                        M.read (| mk_str "i" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (foreign_function_interface.Complex.Get_re
                              (deref (M.read (| self |))))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              UnOp.neg (|
                                M.read (|
                                  foreign_function_interface.Complex.Get_im
                                    (deref (M.read (| self |)))
                                |)
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |)
        else
          M.alloc (|
            M.call (|(core.fmt.Formatter.t::["write_fmt"]
              (M.read (| f |))
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "" |);
                        M.read (| mk_str "+" |);
                        M.read (| mk_str "i" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (foreign_function_interface.Complex.Get_re
                              (deref (M.read (| self |))))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (foreign_function_interface.Complex.Get_im
                              (deref (M.read (| self |))))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |)
      |)
    ) : ltac:(core.fmt.Result))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_foreign_function_interface_Complex_t.
End Impl_core_fmt_Debug_for_foreign_function_interface_Complex_t.
