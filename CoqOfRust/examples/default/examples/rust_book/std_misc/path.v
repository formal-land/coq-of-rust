(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // Create a `Path` from an `&'static str`
    let path = Path::new(".");

    // The `display` method returns a `Display`able structure
    let _display = path.display();

    // `join` merges a path with a byte container using the OS specific
    // separator, and returns a `PathBuf`
    let mut new_path = path.join("a").join("b");

    // `push` extends the `PathBuf` with a `&Path`
    new_path.push("c");
    new_path.push("myfile.tar.gz");

    // `set_file_name` updates the file name of the `PathBuf`
    new_path.set_file_name("package.tgz");

    // Convert the `PathBuf` into a string slice
    match new_path.to_str() {
        None => panic!("new path is not a valid UTF-8 sequence"),
        Some(s) => println!("new path is {}", s),
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let path : M.Val (ref std.path.Path.t) :=
        M.alloc (|
          M.call (|(std.path.Path.t::["new"] (M.read (| mk_str "." |))) |)
        |) in
      let _display : M.Val std.path.Display.t :=
        M.alloc (|
          M.call (|(std.path.Path.t::["display"] (M.read (| path |))) |)
        |) in
      let new_path : M.Val std.path.PathBuf.t :=
        M.alloc (|
          M.call (|(std.path.Path.t::["join"]
            (M.call (|(ltac:(M.get_method (fun ℐ =>
                core.ops.deref.Deref.deref
                  (Self := std.path.PathBuf.t)
                  (Trait := ℐ)))
              (borrow
                (M.alloc (|
                  M.call (|(std.path.Path.t::["join"]
                    (M.read (| path |))
                    (M.read (| mk_str "a" |)))
                  |)
                |))))
            |))
            (M.read (| mk_str "b" |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(std.path.PathBuf.t::["push"]
            (borrow_mut new_path)
            (M.read (| mk_str "c" |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(std.path.PathBuf.t::["push"]
            (borrow_mut new_path)
            (M.read (| mk_str "myfile.tar.gz" |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(std.path.PathBuf.t::["set_file_name"]
            (borrow_mut new_path)
            (M.read (| mk_str "package.tgz" |)))
          |)
        |) in
      ltac:
        (M.monadic_match_operator
          (M.alloc (|
            M.call (|(std.path.Path.t::["to_str"]
              (M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.ops.deref.Deref.deref
                    (Self := std.path.PathBuf.t)
                    (Trait := ℐ)))
                (borrow new_path))
              |)))
            |)
          |))
          [
            fun (γ : M.Val (core.option.Option.t (ref str.t))) =>
              match M.read (| γ |) with
              | core.option.Option.None =>
                M.alloc (|
                  (never_to_any (B := unit)) (|
                    M.call (|(std.panicking.begin_panic
                      (M.read (| mk_str "new path is not a valid UTF-8 sequence"
                      |)))
                    |)
                  |)
                |)
              | _ => M.break_match(||)
              end :
              M.Val unit;
            fun (γ : M.Val (core.option.Option.t (ref str.t))) =>
              match M.read (| γ |) with
              | core.option.Option.Some _ =>
                let γ0_0 := core.option.Option.Get_Some_0 γ in
                let s := M.copy (| γ0_0 |) in
                let _ : M.Val unit :=
                  M.alloc (|
                    M.call (|(std.io.stdio._print
                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.read (| mk_str "new path is " |);
                                M.read (| mk_str "
" |)
                              ]
                            |))))
                        (pointer_coercion
                          "Unsize"
                          (borrow
                            (M.alloc (|
                              [
                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                  (borrow s))
                                |)
                              ]
                            |)))))
                      |)))
                    |)
                  |) in
                M.alloc (| tt |)
              | _ => M.break_match(||)
              end :
              M.Val unit
          ])
    |)
  )).
