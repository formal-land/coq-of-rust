(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let args: Vec<String> = env::args().collect();

    // The first argument is the path that was used to call the program.
    println!("My path is {}.", args[0]);

    // The rest of the arguments are the passed command line parameters.
    // Call the program like this:
    //   $ ./args arg1 arg2
    println!("I got {:?} arguments: {:?}.", args.len() - 1, &args[1..]);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let args :
          M.Val (alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.iter.traits.iterator.Iterator.collect
                (Self := std.env.Args.t)
                (B :=
                  alloc.vec.Vec.t alloc.string.String.t alloc.alloc.Global.t)
                (Trait := ℐ)))
            (M.call (|std.env.args |)))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "My path is " |);
                        M.read (| mk_str ".
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (M.call (|(ltac:(M.get_method (fun ℐ =>
                              core.ops.index.Index.index
                                (Self :=
                                  alloc.vec.Vec.t
                                    alloc.string.String.t
                                    alloc.alloc.Global.t)
                                (Idx := usize.t)
                                (Trait := ℐ)))
                            (borrow args)
                            ((Integer.of_Z 0) : usize.t))
                          |)))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "I got " |);
                        M.read (| mk_str " arguments: " |);
                        M.read (| mk_str ".
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              BinOp.Panic.sub (|
                                M.call (|((alloc.vec.Vec.t
                                      alloc.string.String.t
                                      alloc.alloc.Global.t)::["len"]
                                  (borrow args))
                                |),
                                (Integer.of_Z 1) : usize.t
                              |)
                            |))))
                        |);
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.ops.index.Index.index
                                    (Self :=
                                      alloc.vec.Vec.t
                                        alloc.string.String.t
                                        alloc.alloc.Global.t)
                                    (Idx := core.ops.range.RangeFrom.t usize.t)
                                    (Trait := ℐ)))
                                (borrow args)
                                {|
                                  core.ops.range.RangeFrom.start :=
                                    (Integer.of_Z 1) : usize.t;
                                |} : core.ops.range.RangeFrom.t usize.t)
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
