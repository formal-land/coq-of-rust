(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn increase(number: i32) {
    println!("{}", number + 1);
}
*)
Definition increase (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ number ] =>
    let* number := M.alloc number in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α5 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "") in
            let* α3 := M.read (mk_str "
") in
            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
            M.pure (M.pointer_coercion α4) in
        let* α12 :=
          (* Unsize *)
            let* α6 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_display"
                [ Ty.path "i32" ]
                [] in
            let* α7 := M.read number in
            let* α8 := BinOp.Panic.add α7 (Value.Integer Integer.I32 1) in
            let* α9 := M.alloc α8 in
            let* α10 := M.call_closure α6 [ α9 ] in
            let* α11 := M.alloc (Value.Array [ α10 ]) in
            M.pure (M.pointer_coercion α11) in
        let* α13 := M.call_closure α1 [ α5; α12 ] in
        let* α14 := M.call_closure α0 [ α13 ] in
        M.alloc α14 in
      M.alloc (Value.Tuple []) in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn decrease(number: i32) {
    println!("{}", number - 1);
}
*)
Definition decrease (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ number ] =>
    let* number := M.alloc number in
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
        let* α5 :=
          (* Unsize *)
            let* α2 := M.read (mk_str "") in
            let* α3 := M.read (mk_str "
") in
            let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
            M.pure (M.pointer_coercion α4) in
        let* α12 :=
          (* Unsize *)
            let* α6 :=
              M.get_associated_function
                (Ty.path "core::fmt::rt::Argument")
                "new_display"
                [ Ty.path "i32" ]
                [] in
            let* α7 := M.read number in
            let* α8 := BinOp.Panic.sub α7 (Value.Integer Integer.I32 1) in
            let* α9 := M.alloc α8 in
            let* α10 := M.call_closure α6 [ α9 ] in
            let* α11 := M.alloc (Value.Array [ α10 ]) in
            M.pure (M.pointer_coercion α11) in
        let* α13 := M.call_closure α1 [ α5; α12 ] in
        let* α14 := M.call_closure α0 [ α13 ] in
        M.alloc α14 in
      M.alloc (Value.Tuple []) in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn help() {
    println!(
        "usage:
match_args <string>
    Check whether given string is the answer.
match_args {{increase|decrease}} <integer>
    Increase or decrease given integer by one."
    );
}
*)
Definition help (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* _ :=
      let* _ :=
        let* α0 := M.get_function "std::io::stdio::_print" [] [] in
        let* α1 :=
          M.get_associated_function
            (Ty.path "core::fmt::Arguments")
            "new_const"
            []
            [ Value.Bool true ] in
        let* α4 :=
          (* Unsize *)
            let* α2 :=
              M.read
                (mk_str
                  "usage:
match_args <string>
    Check whether given string is the answer.
match_args {increase|decrease} <integer>
    Increase or decrease given integer by one.
") in
            let* α3 := M.alloc (Value.Array [ α2 ]) in
            M.pure (M.pointer_coercion α3) in
        let* α5 := M.call_closure α1 [ α4 ] in
        let* α6 := M.call_closure α0 [ α5 ] in
        M.alloc α6 in
      M.alloc (Value.Tuple []) in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.

(*
fn main() {
    let args: Vec<String> = env::args().collect();

    match args.len() {
        // no arguments passed
        1 => {
            println!("My name is 'match_args'. Try passing some arguments!");
        }
        // one argument passed
        2 => match args[1].parse() {
            Ok(42) => println!("This is the answer!"),
            _ => println!("This is not the answer."),
        },
        // one command and one argument passed
        3 => {
            let cmd = &args[1];
            let num = &args[2];
            // parse the number
            let number: i32 = match num.parse() {
                Ok(n) => n,
                Err(_) => {
                    eprintln!("error: second argument not an integer");
                    help();
                    return;
                }
            };
            // parse the command
            match &cmd[..] {
                "increase" => increase(number),
                "decrease" => decrease(number),
                _ => {
                    eprintln!("error: invalid command");
                    help();
                }
            }
        }
        // all the other cases
        _ => {
            // show a help message
            help();
        }
    }
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* args :=
      let* α0 :=
        M.get_trait_method
          "core::iter::traits::iterator::Iterator"
          (Ty.path "std::env::Args")
          []
          []
          "collect"
          [
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
              []
          ]
          [] in
      let* α1 := M.get_function "std::env::args" [] [] in
      let* α2 := M.call_closure α1 [] in
      let* α3 := M.call_closure α0 [ α2 ] in
      M.alloc α3 in
    let* α0 :=
      M.get_associated_function
        (Ty.apply
          (Ty.path "alloc::vec::Vec")
          [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
          [])
        "len"
        []
        [] in
    let* α1 := M.call_closure α0 [ args ] in
    let* α2 := M.alloc α1 in
    let* α0 :=
      M.match_operator
        α2
        [
          fun γ =>
            let* _ :=
              let* α0 := M.read γ in
              M.is_constant_or_break_match α0 (Value.Integer Integer.Usize 1) in
            let* _ :=
              let* _ :=
                let* α0 := M.get_function "std::io::stdio::_print" [] [] in
                let* α1 :=
                  M.get_associated_function
                    (Ty.path "core::fmt::Arguments")
                    "new_const"
                    []
                    [ Value.Bool true ] in
                let* α4 :=
                  (* Unsize *)
                    let* α2 :=
                      M.read (mk_str "My name is 'match_args'. Try passing some arguments!
") in
                    let* α3 := M.alloc (Value.Array [ α2 ]) in
                    M.pure (M.pointer_coercion α3) in
                let* α5 := M.call_closure α1 [ α4 ] in
                let* α6 := M.call_closure α0 [ α5 ] in
                M.alloc α6 in
              M.alloc (Value.Tuple []) in
            M.alloc (Value.Tuple []);
          fun γ =>
            let* _ :=
              let* α0 := M.read γ in
              M.is_constant_or_break_match α0 (Value.Integer Integer.Usize 2) in
            let* α0 := M.get_associated_function (Ty.path "str") "parse" [ Ty.path "i32" ] [] in
            let* α1 :=
              M.get_trait_method
                "core::ops::deref::Deref"
                (Ty.path "alloc::string::String")
                []
                []
                "deref"
                []
                [] in
            let* α2 :=
              M.get_trait_method
                "core::ops::index::Index"
                (Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                  [])
                [ Ty.path "usize" ]
                []
                "index"
                []
                [] in
            let* α3 := M.call_closure α2 [ args; Value.Integer Integer.Usize 1 ] in
            let* α4 := M.call_closure α1 [ α3 ] in
            let* α5 := M.call_closure α0 [ α4 ] in
            let* α6 := M.alloc α5 in
            M.match_operator
              α6
              [
                fun γ =>
                  let* γ0_0 :=
                    M.get_struct_tuple_field_or_break_match γ "core::result::Result::Ok" 0 in
                  let* _ :=
                    let* α0 := M.read γ0_0 in
                    M.is_constant_or_break_match α0 (Value.Integer Integer.I32 42) in
                  let* _ :=
                    let* α0 := M.get_function "std::io::stdio::_print" [] [] in
                    let* α1 :=
                      M.get_associated_function
                        (Ty.path "core::fmt::Arguments")
                        "new_const"
                        []
                        [ Value.Bool true ] in
                    let* α4 :=
                      (* Unsize *)
                        let* α2 := M.read (mk_str "This is the answer!
") in
                        let* α3 := M.alloc (Value.Array [ α2 ]) in
                        M.pure (M.pointer_coercion α3) in
                    let* α5 := M.call_closure α1 [ α4 ] in
                    let* α6 := M.call_closure α0 [ α5 ] in
                    M.alloc α6 in
                  M.alloc (Value.Tuple []);
                fun γ =>
                  let* _ :=
                    let* α0 := M.get_function "std::io::stdio::_print" [] [] in
                    let* α1 :=
                      M.get_associated_function
                        (Ty.path "core::fmt::Arguments")
                        "new_const"
                        []
                        [ Value.Bool true ] in
                    let* α4 :=
                      (* Unsize *)
                        let* α2 := M.read (mk_str "This is not the answer.
") in
                        let* α3 := M.alloc (Value.Array [ α2 ]) in
                        M.pure (M.pointer_coercion α3) in
                    let* α5 := M.call_closure α1 [ α4 ] in
                    let* α6 := M.call_closure α0 [ α5 ] in
                    M.alloc α6 in
                  M.alloc (Value.Tuple [])
              ];
          fun γ =>
            let* _ :=
              let* α0 := M.read γ in
              M.is_constant_or_break_match α0 (Value.Integer Integer.Usize 3) in
            let* cmd :=
              let* α0 :=
                M.get_trait_method
                  "core::ops::index::Index"
                  (Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                    [])
                  [ Ty.path "usize" ]
                  []
                  "index"
                  []
                  [] in
              let* α1 := M.call_closure α0 [ args; Value.Integer Integer.Usize 1 ] in
              M.alloc α1 in
            let* num :=
              let* α0 :=
                M.get_trait_method
                  "core::ops::index::Index"
                  (Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                    [])
                  [ Ty.path "usize" ]
                  []
                  "index"
                  []
                  [] in
              let* α1 := M.call_closure α0 [ args; Value.Integer Integer.Usize 2 ] in
              M.alloc α1 in
            let* number :=
              let* α0 := M.get_associated_function (Ty.path "str") "parse" [ Ty.path "i32" ] [] in
              let* α1 :=
                M.get_trait_method
                  "core::ops::deref::Deref"
                  (Ty.path "alloc::string::String")
                  []
                  []
                  "deref"
                  []
                  [] in
              let* α2 := M.read num in
              let* α3 := M.call_closure α1 [ α2 ] in
              let* α4 := M.call_closure α0 [ α3 ] in
              let* α5 := M.alloc α4 in
              let* α6 :=
                M.match_operator
                  α5
                  [
                    fun γ =>
                      let* γ0_0 :=
                        M.get_struct_tuple_field_or_break_match γ "core::result::Result::Ok" 0 in
                      let* n := M.copy γ0_0 in
                      M.pure n;
                    fun γ =>
                      let* γ0_0 :=
                        M.get_struct_tuple_field_or_break_match γ "core::result::Result::Err" 0 in
                      let* _ :=
                        let* _ :=
                          let* α0 := M.get_function "std::io::stdio::_eprint" [] [] in
                          let* α1 :=
                            M.get_associated_function
                              (Ty.path "core::fmt::Arguments")
                              "new_const"
                              []
                              [ Value.Bool true ] in
                          let* α4 :=
                            (* Unsize *)
                              let* α2 := M.read (mk_str "error: second argument not an integer
") in
                              let* α3 := M.alloc (Value.Array [ α2 ]) in
                              M.pure (M.pointer_coercion α3) in
                          let* α5 := M.call_closure α1 [ α4 ] in
                          let* α6 := M.call_closure α0 [ α5 ] in
                          M.alloc α6 in
                        M.alloc (Value.Tuple []) in
                      let* _ :=
                        let* α0 := M.get_function "program_arguments_parsing::help" [] [] in
                        let* α1 := M.call_closure α0 [] in
                        M.alloc α1 in
                      let* α0 := M.return_ (Value.Tuple []) in
                      let* α1 := M.read α0 in
                      let* α2 := M.never_to_any α1 in
                      M.alloc α2
                  ] in
              M.copy α6 in
            let* α0 :=
              M.get_trait_method
                "core::ops::index::Index"
                (Ty.path "alloc::string::String")
                [ Ty.path "core::ops::range::RangeFull" ]
                []
                "index"
                []
                [] in
            let* α1 := M.read cmd in
            let* α2 :=
              M.call_closure α0 [ α1; Value.StructTuple "core::ops::range::RangeFull" [] ] in
            let* α3 := M.alloc α2 in
            M.match_operator
              α3
              [
                fun γ =>
                  let* _ :=
                    let* α0 := M.read γ in
                    M.is_constant_or_break_match α0 UnsupportedLiteral in
                  let* α0 := M.get_function "program_arguments_parsing::increase" [] [] in
                  let* α1 := M.read number in
                  let* α2 := M.call_closure α0 [ α1 ] in
                  M.alloc α2;
                fun γ =>
                  let* _ :=
                    let* α0 := M.read γ in
                    M.is_constant_or_break_match α0 UnsupportedLiteral in
                  let* α0 := M.get_function "program_arguments_parsing::decrease" [] [] in
                  let* α1 := M.read number in
                  let* α2 := M.call_closure α0 [ α1 ] in
                  M.alloc α2;
                fun γ =>
                  let* _ :=
                    let* _ :=
                      let* α0 := M.get_function "std::io::stdio::_eprint" [] [] in
                      let* α1 :=
                        M.get_associated_function
                          (Ty.path "core::fmt::Arguments")
                          "new_const"
                          []
                          [ Value.Bool true ] in
                      let* α4 :=
                        (* Unsize *)
                          let* α2 := M.read (mk_str "error: invalid command
") in
                          let* α3 := M.alloc (Value.Array [ α2 ]) in
                          M.pure (M.pointer_coercion α3) in
                      let* α5 := M.call_closure α1 [ α4 ] in
                      let* α6 := M.call_closure α0 [ α5 ] in
                      M.alloc α6 in
                    M.alloc (Value.Tuple []) in
                  let* _ :=
                    let* α0 := M.get_function "program_arguments_parsing::help" [] [] in
                    let* α1 := M.call_closure α0 [] in
                    M.alloc α1 in
                  M.alloc (Value.Tuple [])
              ];
          fun γ =>
            let* _ :=
              let* α0 := M.get_function "program_arguments_parsing::help" [] [] in
              let* α1 := M.call_closure α0 [] in
              M.alloc α1 in
            M.alloc (Value.Tuple [])
        ] in
    M.read α0
  | _, _ => M.impossible
  end.
