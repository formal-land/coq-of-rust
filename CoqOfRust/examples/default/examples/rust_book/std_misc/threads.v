(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition NTHREADS : M.Val u32.t :=
  M.run (ltac:(M.monadic (M.alloc (| (Integer.of_Z 10) : u32.t |)))).

(*
fn main() {
    // Make a vector to hold the children which are spawned.
    let mut children = vec![];

    for i in 0..NTHREADS {
        // Spin up another thread
        children.push(thread::spawn(move || {
            println!("this is thread number {}", i);
        }));
    }

    for child in children {
        // Wait for the thread to finish. Returns a result.
        let _ = child.join();
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let children :
          M.Val
            (alloc.vec.Vec.t
              (std.thread.JoinHandle.t unit)
              alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|(alloc.vec.Vec.t
              (std.thread.JoinHandle.t unit)
              alloc.alloc.Global.t)::["new"]
          |)
        |) in
      let _ : M.Val unit :=
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self := core.ops.range.Range.t u32.t)
                      (Trait := ℐ)))
                  ({|
                    core.ops.range.Range.start := (Integer.of_Z 0) : u32.t;
                    core.ops.range.Range.end_ := M.read (| threads.NTHREADS |);
                  |} : core.ops.range.Range.t u32.t))
                |)
              |))
              [
                fun (γ : M.Val (core.ops.range.Range.t u32.t)) =>
                  (let iter := M.copy (| γ |) in
                  M.loop
                    (let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self := core.ops.range.Range.t u32.t)
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun (γ : M.Val (core.option.Option.t u32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  (never_to_any (B := unit)) (|
                                    M.read (| M.break |)
                                  |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun (γ : M.Val (core.option.Option.t u32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                let i := M.copy (| γ0_0 |) in
                                let _ : M.Val unit :=
                                  M.alloc (|
                                    M.call (|((alloc.vec.Vec.t
                                          (std.thread.JoinHandle.t unit)
                                          alloc.alloc.Global.t)::["push"]
                                      (borrow_mut children)
                                      (M.call (|(std.thread.spawn
                                        (fun (α0 : unit) =>
                                          (ltac:
                                            (M.monadic_match_operator
                                              (M.alloc (| α0 |))
                                              [
                                                fun γ =>
                                                  (M.read (|
                                                    let _ : M.Val unit :=
                                                      let _ : M.Val unit :=
                                                        M.alloc (|
                                                          M.call (|(std.io.stdio._print
                                                            (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow
                                                                  (M.alloc (|
                                                                    [
                                                                      M.read (|
                                                                        mk_str
                                                                          "this is thread number "
                                                                      |);
                                                                      M.read (|
                                                                        mk_str
                                                                          "
"
                                                                      |)
                                                                    ]
                                                                  |))))
                                                              (pointer_coercion
                                                                "Unsize"
                                                                (borrow
                                                                  (M.alloc (|
                                                                    [
                                                                      M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                                        (borrow
                                                                          i))
                                                                      |)
                                                                    ]
                                                                  |)))))
                                                            |)))
                                                          |)
                                                        |) in
                                                      M.alloc (| tt |) in
                                                    M.alloc (| tt |)
                                                  |)) :
                                                  unit
                                              ])) :
                                          unit))
                                      |)))
                                    |)
                                  |) in
                                M.alloc (| tt |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |))) :
                  M.Val unit
              ])) in
      use
        (ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.iter.traits.collect.IntoIterator.into_iter
                    (Self :=
                      alloc.vec.Vec.t
                        (std.thread.JoinHandle.t unit)
                        alloc.alloc.Global.t)
                    (Trait := ℐ)))
                (M.read (| children |)))
              |)
            |))
            [
              fun
                  (γ :
                    M.Val
                      (alloc.vec.into_iter.IntoIter.t
                        (std.thread.JoinHandle.t unit)
                        alloc.alloc.Global.t)) =>
                (let iter := M.copy (| γ |) in
                M.loop
                  (let _ : M.Val unit :=
                    ltac:
                      (M.monadic_match_operator
                        (M.alloc (|
                          M.call (|(ltac:(M.get_method (fun ℐ =>
                              core.iter.traits.iterator.Iterator.next
                                (Self :=
                                  alloc.vec.into_iter.IntoIter.t
                                    (std.thread.JoinHandle.t unit)
                                    alloc.alloc.Global.t)
                                (Trait := ℐ)))
                            (borrow_mut iter))
                          |)
                        |))
                        [
                          fun
                              (γ :
                                M.Val
                                  (core.option.Option.t
                                    (std.thread.JoinHandle.t unit))) =>
                            match M.read (| γ |) with
                            | core.option.Option.None =>
                              M.alloc (|
                                (never_to_any (B := unit)) (|
                                  M.read (| M.break |)
                                |)
                              |)
                            | _ => M.break_match(||)
                            end :
                            M.Val unit;
                          fun
                              (γ :
                                M.Val
                                  (core.option.Option.t
                                    (std.thread.JoinHandle.t unit))) =>
                            match M.read (| γ |) with
                            | core.option.Option.Some _ =>
                              let γ0_0 := core.option.Option.Get_Some_0 γ in
                              let child := M.copy (| γ0_0 |) in
                              ltac:
                                (M.monadic_match_operator
                                  (M.alloc (|
                                    M.call (|((std.thread.JoinHandle.t
                                          unit)::["join"]
                                      (M.read (| child |)))
                                    |)
                                  |))
                                  [
                                    fun
                                        (γ :
                                          M.Val
                                            (core.result.Result.t
                                              unit
                                              (alloc.boxed.Box.t
                                                (dyn [core.any.Any.Trait])
                                                alloc.alloc.Global.t))) =>
                                      (M.alloc (| tt |)) : M.Val unit
                                  ])
                            | _ => M.break_match(||)
                            end :
                            M.Val unit
                        ]) in
                  M.alloc (| tt |))) :
                M.Val unit
            ]))
    |)
  )).
