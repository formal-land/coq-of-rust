(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    // This is our data to process.
    // We will calculate the sum of all digits via a threaded  map-reduce algorithm.
    // Each whitespace separated chunk will be handled in a different thread.
    //
    // TODO: see what happens to the output if you insert spaces!
    let data = "86967897737416471853297327050364959
11861322575564723963297542624962850
70856234701860851907960690014725639
38397966707106094172783238747669219
52380795257888236525459303330302837
58495327135744041048897885734297812
69920216438980873548808413720956532
16278424637452589860345374828574668";

    // Make a vector to hold the child-threads which we will spawn.
    let mut children = vec![];

    /*************************************************************************
     * "Map" phase
     *
     * Divide our data into segments, and apply initial processing
     ************************************************************************/

    // split our data into segments for individual calculation
    // each chunk will be a reference (&str) into the actual data
    let chunked_data = data.split_whitespace();

    // Iterate over the data segments.
    // .enumerate() adds the current loop index to whatever is iterated
    // the resulting tuple "(index, element)" is then immediately
    // "destructured" into two variables, "i" and "data_segment" with a
    // "destructuring assignment"
    for (i, data_segment) in chunked_data.enumerate() {
        println!("data segment {} is \"{}\"", i, data_segment);

        // Process each data segment in a separate thread
        //
        // spawn() returns a handle to the new thread,
        // which we MUST keep to access the returned value
        //
        // 'move || -> u32' is syntax for a closure that:
        // * takes no arguments ('||')
        // * takes ownership of its captured variables ('move') and
        // * returns an unsigned 32-bit integer ('-> u32')
        //
        // Rust is smart enough to infer the '-> u32' from
        // the closure itself so we could have left that out.
        //
        // TODO: try removing the 'move' and see what happens
        children.push(thread::spawn(move || -> u32 {
            // Calculate the intermediate sum of this segment:
            let result = data_segment
                // iterate over the characters of our segment..
                .chars()
                // .. convert text-characters to their number value..
                .map(|c| c.to_digit(10).expect("should be a digit"))
                // .. and sum the resulting iterator of numbers
                .sum();

            // println! locks stdout, so no text-interleaving occurs
            println!("processed segment {}, result={}", i, result);

            // "return" not needed, because Rust is an "expression language", the
            // last evaluated expression in each block is automatically its value.
            result
        }));
    }

    /*************************************************************************
     * "Reduce" phase
     *
     * Collect our intermediate results, and combine them into a final result
     ************************************************************************/

    // combine each thread's intermediate results into a single final sum.
    //
    // we use the "turbofish" ::<> to provide sum() with a type hint.
    //
    // TODO: try without the turbofish, by instead explicitly
    // specifying the type of final_result
    let final_result = children.into_iter().map(|c| c.join().unwrap()).sum::<u32>();

    println!("Final sum result: {}", final_result);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let data : M.Val (ref str.t) :=
        M.copy (|
          mk_str
            "86967897737416471853297327050364959
11861322575564723963297542624962850
70856234701860851907960690014725639
38397966707106094172783238747669219
52380795257888236525459303330302837
58495327135744041048897885734297812
69920216438980873548808413720956532
16278424637452589860345374828574668"
        |) in
      let children :
          M.Val
            (alloc.vec.Vec.t
              (std.thread.JoinHandle.t u32.t)
              alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|(alloc.vec.Vec.t
              (std.thread.JoinHandle.t u32.t)
              alloc.alloc.Global.t)::["new"]
          |)
        |) in
      let chunked_data : M.Val core.str.iter.SplitWhitespace.t :=
        M.alloc (| M.call (|(str.t::["split_whitespace"] (M.read (| data |))) |)
        |) in
      let _ : M.Val unit :=
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self :=
                        core.iter.adapters.enumerate.Enumerate.t
                          core.str.iter.SplitWhitespace.t)
                      (Trait := ℐ)))
                  (M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.iter.traits.iterator.Iterator.enumerate
                        (Self := core.str.iter.SplitWhitespace.t)
                        (Trait := ℐ)))
                    (M.read (| chunked_data |)))
                  |)))
                |)
              |))
              [
                fun
                    (γ :
                      M.Val
                        (core.iter.adapters.enumerate.Enumerate.t
                          core.str.iter.SplitWhitespace.t)) =>
                  (let iter := M.copy (| γ |) in
                  M.loop
                    (let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self :=
                                    core.iter.adapters.enumerate.Enumerate.t
                                      core.str.iter.SplitWhitespace.t)
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun
                                (γ :
                                  M.Val
                                    (core.option.Option.t
                                      (usize.t * (ref str.t)))) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  never_to_any (| M.read (| M.break |) |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun
                                (γ :
                                  M.Val
                                    (core.option.Option.t
                                      (usize.t * (ref str.t)))) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                match M.read (| γ0_0 |) with
                                | (_, _) =>
                                  let γ1_0 := Tuple.Access.left γ0_0 in
                                  let γ1_1 := Tuple.Access.right γ0_0 in
                                  let i := M.copy (| γ1_0 |) in
                                  let data_segment := M.copy (| γ1_1 |) in
                                  let _ : M.Val unit :=
                                    let _ : M.Val unit :=
                                      M.alloc (|
                                        M.call (|(std.io.stdio._print
                                          (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                            (pointer_coercion
                                              "Unsize"
                                              (borrow
                                                (M.alloc (|
                                                  [
                                                    M.read (|
                                                      mk_str "data segment "
                                                    |);
                                                    M.read (| mk_str " is """
                                                    |);
                                                    M.read (| mk_str """
" |)
                                                  ]
                                                |))))
                                            (pointer_coercion
                                              "Unsize"
                                              (borrow
                                                (M.alloc (|
                                                  [
                                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                      (borrow i))
                                                    |);
                                                    M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                      (borrow data_segment))
                                                    |)
                                                  ]
                                                |)))))
                                          |)))
                                        |)
                                      |) in
                                    M.alloc (| tt |) in
                                  let _ : M.Val unit :=
                                    M.alloc (|
                                      M.call (|((alloc.vec.Vec.t
                                            (std.thread.JoinHandle.t u32.t)
                                            alloc.alloc.Global.t)::["push"]
                                        (borrow_mut children)
                                        (M.call (|(std.thread.spawn
                                          (fun (α0 : unit) =>
                                            (ltac:
                                              (M.monadic_match_operator
                                                (M.alloc (| α0 |))
                                                [
                                                  fun γ =>
                                                    (M.read (|
                                                      let result :
                                                          M.Val u32.t :=
                                                        M.alloc (|
                                                          M.call (|(ltac:(M.get_method (fun ℐ =>
                                                              core.iter.traits.iterator.Iterator.sum
                                                                (Self :=
                                                                  core.iter.adapters.map.Map.t
                                                                    core.str.iter.Chars.t
                                                                    (char.t ->
                                                                      u32.t))
                                                                (S := u32.t)
                                                                (Trait := ℐ)))
                                                            (M.call (|(ltac:(M.get_method (fun ℐ =>
                                                                core.iter.traits.iterator.Iterator.map
                                                                  (Self :=
                                                                    core.str.iter.Chars.t)
                                                                  (B := u32.t)
                                                                  (F :=
                                                                    char.t ->
                                                                      u32.t)
                                                                  (Trait := ℐ)))
                                                              (M.call (|(str.t::["chars"]
                                                                (M.read (|
                                                                  data_segment
                                                                |)))
                                                              |))
                                                              (fun
                                                                  (α0 :
                                                                    char.t) =>
                                                                (ltac:
                                                                  (M.monadic_match_operator
                                                                    (M.alloc (|
                                                                      α0
                                                                    |))
                                                                    [
                                                                      fun γ =>
                                                                        (let
                                                                              c :=
                                                                          M.copy (|
                                                                            γ
                                                                          |) in
                                                                        M.call (|((core.option.Option.t
                                                                              u32.t)::["expect"]
                                                                          (M.call (|(char.t::["to_digit"]
                                                                            (M.read (|
                                                                              c
                                                                            |))
                                                                            ((Integer.of_Z
                                                                                10) :
                                                                              u32.t))
                                                                          |))
                                                                          (M.read (|
                                                                            mk_str
                                                                              "should be a digit"
                                                                          |)))
                                                                        |)) :
                                                                        u32.t
                                                                    ])) :
                                                                u32.t))
                                                            |)))
                                                          |)
                                                        |) in
                                                      let _ : M.Val unit :=
                                                        let _ : M.Val unit :=
                                                          M.alloc (|
                                                            M.call (|(std.io.stdio._print
                                                              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow
                                                                    (M.alloc (|
                                                                      [
                                                                        M.read (|
                                                                          mk_str
                                                                            "processed segment "
                                                                        |);
                                                                        M.read (|
                                                                          mk_str
                                                                            ", result="
                                                                        |);
                                                                        M.read (|
                                                                          mk_str
                                                                            "
"
                                                                        |)
                                                                      ]
                                                                    |))))
                                                                (pointer_coercion
                                                                  "Unsize"
                                                                  (borrow
                                                                    (M.alloc (|
                                                                      [
                                                                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                                          (borrow
                                                                            i))
                                                                        |);
                                                                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                                          (borrow
                                                                            result))
                                                                        |)
                                                                      ]
                                                                    |)))))
                                                              |)))
                                                            |)
                                                          |) in
                                                        M.alloc (| tt |) in
                                                      result
                                                    |)) :
                                                    u32.t
                                                ])) :
                                            u32.t))
                                        |)))
                                      |)
                                    |) in
                                  M.alloc (| tt |)
                                end
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |))) :
                  M.Val unit
              ])) in
      let final_result : M.Val u32.t :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.iter.traits.iterator.Iterator.sum
                (Self :=
                  core.iter.adapters.map.Map.t
                    (alloc.vec.into_iter.IntoIter.t
                      (std.thread.JoinHandle.t u32.t)
                      alloc.alloc.Global.t)
                    ((std.thread.JoinHandle.t u32.t) -> u32.t))
                (S := u32.t)
                (Trait := ℐ)))
            (M.call (|(ltac:(M.get_method (fun ℐ =>
                core.iter.traits.iterator.Iterator.map
                  (Self :=
                    alloc.vec.into_iter.IntoIter.t
                      (std.thread.JoinHandle.t u32.t)
                      alloc.alloc.Global.t)
                  (B := u32.t)
                  (F := (std.thread.JoinHandle.t u32.t) -> u32.t)
                  (Trait := ℐ)))
              (M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.iter.traits.collect.IntoIterator.into_iter
                    (Self :=
                      alloc.vec.Vec.t
                        (std.thread.JoinHandle.t u32.t)
                        alloc.alloc.Global.t)
                    (Trait := ℐ)))
                (M.read (| children |)))
              |))
              (fun (α0 : std.thread.JoinHandle.t u32.t) =>
                (ltac:
                  (M.monadic_match_operator
                    (M.alloc (| α0 |))
                    [
                      fun γ =>
                        (let c := M.copy (| γ |) in
                        M.call (|((core.result.Result.t
                              u32.t
                              (alloc.boxed.Box.t
                                (dyn [core.any.Any.Trait])
                                alloc.alloc.Global.t))::["unwrap"]
                          (M.call (|((std.thread.JoinHandle.t u32.t)::["join"]
                            (M.read (| c |)))
                          |)))
                        |)) :
                        u32.t
                    ])) :
                u32.t))
            |)))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Final sum result: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow final_result))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
