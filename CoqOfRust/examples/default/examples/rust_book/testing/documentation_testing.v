(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
pub fn add(a: i32, b: i32) -> i32 {
    a + b
}
*)
Definition add (a : i32.t) (b : i32.t) : M i32.t :=
  ltac:(M.monadic ((
    let a := M.alloc (| a |) in
    let b := M.alloc (| b |) in
    BinOp.Panic.add (| M.read (| a |), M.read (| b |) |)
  ) : i32.t)).

(*
pub fn div(a: i32, b: i32) -> i32 {
    if b == 0 {
        panic!("Divide-by-zero error");
    }

    a / b
}
*)
Definition div (a : i32.t) (b : i32.t) : M i32.t :=
  ltac:(M.monadic ((
    let a := M.alloc (| a |) in
    let b := M.alloc (| b |) in
    M.read (|
      let _ : M.Val unit :=
        if
          M.read (|
            use
              (M.alloc (|
                BinOp.Pure.eq (M.read (| b |)) ((Integer.of_Z 0) : i32.t)
              |))
          |)
        then
          M.alloc (|
            (never_to_any (B := unit)) (|
              M.call (|(std.panicking.begin_panic
                (M.read (| mk_str "Divide-by-zero error" |)))
              |)
            |)
          |)
        else
          M.alloc (| tt |) in
      M.alloc (| BinOp.Panic.div (| M.read (| a |), M.read (| b |) |) |)
    |)
  ) : i32.t)).
