(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Unit.
Section Unit.
  Inductive t : Set := Build.
End Unit.
End Unit.

Module  Impl_core_fmt_Debug_for_clone_Unit_t.
Section Impl_core_fmt_Debug_for_clone_Unit_t.
  Definition Self : Set := clone.Unit.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["write_str"]
        (M.read (| f |))
        (M.read (| mk_str "Unit" |)))
      |)
    ) : ltac:(core.fmt.Result))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_clone_Unit_t.
End Impl_core_fmt_Debug_for_clone_Unit_t.

Module  Impl_core_clone_Clone_for_clone_Unit_t.
Section Impl_core_clone_Clone_for_clone_Unit_t.
  Definition Self : Set := clone.Unit.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M clone.Unit.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (| deref (M.read (| self |)) |)
    ) : clone.Unit.t)).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_clone_Unit_t.
End Impl_core_clone_Clone_for_clone_Unit_t.

Module  Impl_core_marker_Copy_for_clone_Unit_t.
Section Impl_core_marker_Copy_for_clone_Unit_t.
  Definition Self : Set := clone.Unit.t.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_clone_Unit_t.
End Impl_core_marker_Copy_for_clone_Unit_t.

Module  Pair.
Section Pair.
  Record t : Set := {
    x0 : alloc.boxed.Box.t i32.t alloc.boxed.Box.Default.A;
    x1 : alloc.boxed.Box.t i32.t alloc.boxed.Box.Default.A;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
  Definition Get_1 :=
    Ref.map (fun α => Some α.(x1)) (fun β α => Some (α <| x1 := β |>)).
End Pair.
End Pair.

Module  Impl_core_clone_Clone_for_clone_Pair_t.
Section Impl_core_clone_Clone_for_clone_Pair_t.
  Definition Self : Set := clone.Pair.t.
  
  (*
  Clone
  *)
  Definition clone (self : ref Self) : M clone.Pair.t :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      clone.Pair.Build_t
        (M.call (|(ltac:(M.get_method (fun ℐ =>
            core.clone.Clone.clone
              (Self := alloc.boxed.Box.t i32.t alloc.alloc.Global.t)
              (Trait := ℐ)))
          (borrow (clone.Pair.Get_0 (deref (M.read (| self |))))))
        |))
        (M.call (|(ltac:(M.get_method (fun ℐ =>
            core.clone.Clone.clone
              (Self := alloc.boxed.Box.t i32.t alloc.alloc.Global.t)
              (Trait := ℐ)))
          (borrow (clone.Pair.Get_1 (deref (M.read (| self |))))))
        |))
    ) : clone.Pair.t)).
  
  Global Instance AssociatedFunction_clone :
    Notations.DoubleColon Self "clone" := {
    Notations.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_clone_Pair_t.
End Impl_core_clone_Clone_for_clone_Pair_t.

Module  Impl_core_fmt_Debug_for_clone_Pair_t.
Section Impl_core_fmt_Debug_for_clone_Pair_t.
  Definition Self : Set := clone.Pair.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["debug_tuple_field2_finish"]
        (M.read (| f |))
        (M.read (| mk_str "Pair" |))
        (pointer_coercion
          "Unsize"
          (borrow (clone.Pair.Get_0 (deref (M.read (| self |))))))
        (pointer_coercion
          "Unsize"
          (borrow
            (M.alloc (| borrow (clone.Pair.Get_1 (deref (M.read (| self |))))
            |)))))
      |)
    ) : ltac:(core.fmt.Result))).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_clone_Pair_t.
End Impl_core_fmt_Debug_for_clone_Pair_t.

(*
fn main() {
    // Instantiate `Unit`
    let unit = Unit;
    // Copy `Unit`, there are no resources to move
    let copied_unit = unit;

    // Both `Unit`s can be used independently
    println!("original: {:?}", unit);
    println!("copy: {:?}", copied_unit);

    // Instantiate `Pair`
    let pair = Pair(Box::new(1), Box::new(2));
    println!("original: {:?}", pair);

    // Move `pair` into `moved_pair`, moves resources
    let moved_pair = pair;
    println!("moved: {:?}", moved_pair);

    // Error! `pair` has lost its resources
    //println!("original: {:?}", pair);
    // TODO ^ Try uncommenting this line

    // Clone `moved_pair` into `cloned_pair` (resources are included)
    let cloned_pair = moved_pair.clone();
    // Drop the original pair using std::mem::drop
    drop(moved_pair);

    // Error! `moved_pair` has been dropped
    //println!("copy: {:?}", moved_pair);
    // TODO ^ Try uncommenting this line

    // The result from .clone() can still be used!
    println!("clone: {:?}", cloned_pair);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let unit_ : M.Val clone.Unit.t := M.alloc (| clone.Unit.Build |) in
      let copied_unit : M.Val clone.Unit.t := M.copy (| unit_ |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "original: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow unit_))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "copy: " |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow copied_unit))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let pair : M.Val clone.Pair.t :=
        M.alloc (|
          clone.Pair.Build_t
            (M.call (|((alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"]
              ((Integer.of_Z 1) : i32.t))
            |))
            (M.call (|((alloc.boxed.Box.t i32.t alloc.alloc.Global.t)::["new"]
              ((Integer.of_Z 2) : i32.t))
            |))
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "original: " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow pair))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let moved_pair : M.Val clone.Pair.t := M.copy (| pair |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "moved: " |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow moved_pair))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let cloned_pair : M.Val clone.Pair.t :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.clone.Clone.clone (Self := clone.Pair.t) (Trait := ℐ)))
            (borrow moved_pair))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (| M.call (|(core.mem.drop (M.read (| moved_pair |))) |) |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "clone: " |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow cloned_pair))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
