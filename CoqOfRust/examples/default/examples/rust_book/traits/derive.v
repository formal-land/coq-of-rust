(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Centimeters.
Section Centimeters.
  Record t : Set := {
    x0 : f64.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End Centimeters.
End Centimeters.

Module  Impl_core_marker_StructuralPartialEq_for_derive_Centimeters_t.
Section Impl_core_marker_StructuralPartialEq_for_derive_Centimeters_t.
  Definition Self : Set := derive.Centimeters.t.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_derive_Centimeters_t.
End Impl_core_marker_StructuralPartialEq_for_derive_Centimeters_t.

Module  Impl_core_cmp_PartialEq_for_derive_Centimeters_t.
Section Impl_core_cmp_PartialEq_for_derive_Centimeters_t.
  Definition Self : Set := derive.Centimeters.t.
  
  (*
  PartialEq
  *)
  Definition eq
      (self : ref Self)
      (other : ref derive.Centimeters.t)
      : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let other := M.alloc (| other |) in
      BinOp.Pure.eq
        (M.read (| derive.Centimeters.Get_0 (deref (M.read (| self |))) |))
        (M.read (| derive.Centimeters.Get_0 (deref (M.read (| other |))) |))
    )).
  
  Global Instance AssociatedFunction_eq : Notations.DoubleColon Self "eq" := {
    Notations.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_derive_Centimeters_t.
End Impl_core_cmp_PartialEq_for_derive_Centimeters_t.

Module  Impl_core_cmp_PartialOrd_for_derive_Centimeters_t.
Section Impl_core_cmp_PartialOrd_for_derive_Centimeters_t.
  Definition Self : Set := derive.Centimeters.t.
  
  (*
  PartialOrd
  *)
  Definition partial_cmp
      (self : ref Self)
      (other : ref derive.Centimeters.t)
      : M (core.option.Option.t core.cmp.Ordering.t) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let other := M.alloc (| other |) in
      M.call (|(ltac:(M.get_method (fun ℐ =>
          core.cmp.PartialOrd.partial_cmp
            (Self := f64.t)
            (Rhs := f64.t)
            (Trait := ℐ)))
        (borrow (derive.Centimeters.Get_0 (deref (M.read (| self |)))))
        (borrow (derive.Centimeters.Get_0 (deref (M.read (| other |))))))
      |)
    )).
  
  Global Instance AssociatedFunction_partial_cmp :
    Notations.DoubleColon Self "partial_cmp" := {
    Notations.double_colon := partial_cmp;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialOrd.Required.Trait Self
      (Rhs := core.cmp.PartialOrd.Default.Rhs Self) := {
    core.cmp.PartialOrd.partial_cmp := partial_cmp;
    core.cmp.PartialOrd.lt := Datatypes.None;
    core.cmp.PartialOrd.le := Datatypes.None;
    core.cmp.PartialOrd.gt := Datatypes.None;
    core.cmp.PartialOrd.ge := Datatypes.None;
  }.
End Impl_core_cmp_PartialOrd_for_derive_Centimeters_t.
End Impl_core_cmp_PartialOrd_for_derive_Centimeters_t.

Module  Inches.
Section Inches.
  Record t : Set := {
    x0 : i32.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End Inches.
End Inches.

Module  Impl_core_fmt_Debug_for_derive_Inches_t.
Section Impl_core_fmt_Debug_for_derive_Inches_t.
  Definition Self : Set := derive.Inches.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let f := M.alloc (| f |) in
      M.call (|(core.fmt.Formatter.t::["debug_tuple_field1_finish"]
        (M.read (| f |))
        (M.read (| mk_str "Inches" |))
        (pointer_coercion
          "Unsize"
          (borrow
            (M.alloc (| borrow (derive.Inches.Get_0 (deref (M.read (| self |))))
            |)))))
      |)
    )).
  
  Global Instance AssociatedFunction_fmt : Notations.DoubleColon Self "fmt" := {
    Notations.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_derive_Inches_t.
End Impl_core_fmt_Debug_for_derive_Inches_t.

Module  Impl_derive_Inches_t.
Section Impl_derive_Inches_t.
  Definition Self : Set := derive.Inches.t.
  
  (*
      fn to_centimeters(&self) -> Centimeters {
          let &Inches(inches) = self;
  
          Centimeters(inches as f64 * 2.54)
      }
  *)
  Definition to_centimeters (self : ref Self) : M derive.Centimeters.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        ltac:
          (M.monadic_match_operator
            self
            [
              fun (γ : M.Val (ref derive.Inches.t)) =>
                (let γ := deref (M.read (| γ |)) in
                match M.read (| γ |) with
                | derive.Inches.Build_t _ =>
                  let γ1_0 := derive.Inches.Get_0 γ in
                  let inches := M.copy (| γ1_0 |) in
                  M.alloc (|
                    derive.Centimeters.Build_t
                      (BinOp.Panic.mul (|
                        rust_cast (M.read (| inches |)),
                        M.read (| UnsupportedLiteral : M.Val f64.t |)
                      |))
                  |)
                end) :
                M.Val derive.Centimeters.t
            ])
      |)
    )).
  
  Global Instance AssociatedFunction_to_centimeters :
    Notations.DoubleColon Self "to_centimeters" := {
    Notations.double_colon := to_centimeters;
  }.
End Impl_derive_Inches_t.
End Impl_derive_Inches_t.

Module  Seconds.
Section Seconds.
  Record t : Set := {
    x0 : i32.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End Seconds.
End Seconds.

(*
fn main() {
    let _one_second = Seconds(1);

    // Error: `Seconds` can't be printed; it doesn't implement the `Debug` trait
    //println!("One second looks like: {:?}", _one_second);
    // TODO ^ Try uncommenting this line

    // Error: `Seconds` can't be compared; it doesn't implement the `PartialEq` trait
    //let _this_is_true = (_one_second == _one_second);
    // TODO ^ Try uncommenting this line

    let foot = Inches(12);

    println!("One foot equals {:?}", foot);

    let meter = Centimeters(100.0);

    let cmp = if foot.to_centimeters() < meter {
        "smaller"
    } else {
        "bigger"
    };

    println!("One foot is {} than one meter.", cmp);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let _one_second : M.Val derive.Seconds.t :=
        M.alloc (| derive.Seconds.Build_t ((Integer.of_Z 1) : i32.t) |) in
      let foot : M.Val derive.Inches.t :=
        M.alloc (| derive.Inches.Build_t ((Integer.of_Z 12) : i32.t) |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "One foot equals " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow foot))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let meter : M.Val derive.Centimeters.t :=
        M.alloc (|
          derive.Centimeters.Build_t
            (M.read (| UnsupportedLiteral : M.Val f64.t |))
        |) in
      let cmp : M.Val (ref str.t) :=
        M.copy (|
          if
            M.read (|
              use
                (M.alloc (|
                  M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.cmp.PartialOrd.lt
                        (Self := derive.Centimeters.t)
                        (Rhs := derive.Centimeters.t)
                        (Trait := ℐ)))
                    (borrow
                      (M.alloc (|
                        M.call (|(derive.Inches.t::["to_centimeters"]
                          (borrow foot))
                        |)
                      |)))
                    (borrow meter))
                  |)
                |))
            |)
          then
            mk_str "smaller"
          else
            M.alloc (| M.read (| mk_str "bigger" |) |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "One foot is " |);
                        M.read (| mk_str " than one meter.
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow cmp))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
