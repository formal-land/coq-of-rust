(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Droppable.
Section Droppable.
  Record t : Set := {
    name : ref str.t;
  }.
  
  Definition Get_name :=
    Ref.map (fun α => Some α.(name)) (fun β α => Some (α <| name := β |>)).
End Droppable.
End Droppable.

Module  Impl_core_ops_drop_Drop_for_drop_Droppable_t.
Section Impl_core_ops_drop_Drop_for_drop_Droppable_t.
  Definition Self : Set := drop.Droppable.t.
  
  (*
      fn drop(&mut self) {
          println!("> Dropping {}", self.name);
      }
  *)
  Definition drop (self : mut_ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        let _ : M.Val unit :=
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(std.io.stdio._print
                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.read (| mk_str "> Dropping " |);
                          M.read (| mk_str "
" |)
                        ]
                      |))))
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.call (|(core.fmt.rt.Argument.t::["new_display"]
                            (borrow
                              (drop.Droppable.Get_name
                                (deref (M.read (| self |))))))
                          |)
                        ]
                      |)))))
                |)))
              |)
            |) in
          M.alloc (| tt |) in
        M.alloc (| tt |)
      |)
    )).
  
  Global Instance AssociatedFunction_drop :
    Notations.DoubleColon Self "drop" := {
    Notations.double_colon := drop;
  }.
  
  Global Instance ℐ : core.ops.drop.Drop.Trait Self := {
    core.ops.drop.Drop.drop := drop;
  }.
End Impl_core_ops_drop_Drop_for_drop_Droppable_t.
End Impl_core_ops_drop_Drop_for_drop_Droppable_t.

(*
fn main() {
    let _a = Droppable { name: "a" };

    // block A
    {
        let _b = Droppable { name: "b" };

        // block B
        {
            let _c = Droppable { name: "c" };
            let _d = Droppable { name: "d" };

            println!("Exiting block B");
        }
        println!("Just exited block B");

        println!("Exiting block A");
    }
    println!("Just exited block A");

    // Variable can be manually dropped using the `drop` function
    drop(_a);
    // TODO ^ Try commenting this line

    println!("end of the main function");

    // `_a` *won't* be `drop`ed again here, because it already has been
    // (manually) `drop`ed
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let _a : M.Val drop.Droppable.t :=
        M.alloc (|
          {| drop.Droppable.name := M.read (| mk_str "a" |);
          |} : drop.Droppable.t
        |) in
      let _ : M.Val unit :=
        let _b : M.Val drop.Droppable.t :=
          M.alloc (|
            {| drop.Droppable.name := M.read (| mk_str "b" |);
            |} : drop.Droppable.t
          |) in
        let _ : M.Val unit :=
          let _c : M.Val drop.Droppable.t :=
            M.alloc (|
              {| drop.Droppable.name := M.read (| mk_str "c" |);
              |} : drop.Droppable.t
            |) in
          let _d : M.Val drop.Droppable.t :=
            M.alloc (|
              {| drop.Droppable.name := M.read (| mk_str "d" |);
              |} : drop.Droppable.t
            |) in
          let _ : M.Val unit :=
            let _ : M.Val unit :=
              M.alloc (|
                M.call (|(std.io.stdio._print
                  (M.call (|(core.fmt.Arguments.t::["new_const"]
                    (pointer_coercion
                      "Unsize"
                      (borrow
                        (M.alloc (| [ M.read (| mk_str "Exiting block B
" |) ]
                        |)))))
                  |)))
                |)
              |) in
            M.alloc (| tt |) in
          M.alloc (| tt |) in
        let _ : M.Val unit :=
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(std.io.stdio._print
                (M.call (|(core.fmt.Arguments.t::["new_const"]
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (| [ M.read (| mk_str "Just exited block B
" |) ]
                      |)))))
                |)))
              |)
            |) in
          M.alloc (| tt |) in
        let _ : M.Val unit :=
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(std.io.stdio._print
                (M.call (|(core.fmt.Arguments.t::["new_const"]
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (| [ M.read (| mk_str "Exiting block A
" |) ]
                      |)))))
                |)))
              |)
            |) in
          M.alloc (| tt |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (| [ M.read (| mk_str "Just exited block A
" |) ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        M.alloc (| M.call (|(core.mem.drop (M.read (| _a |))) |) |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "end of the main function
" |) ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
