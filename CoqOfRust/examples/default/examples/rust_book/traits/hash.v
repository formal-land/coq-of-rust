(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Person.
Section Person.
  Record t : Set := {
    id : u32.t;
    name : alloc.string.String.t;
    phone : u64.t;
  }.
  
  Definition Get_id :=
    Ref.map (fun α => Some α.(id)) (fun β α => Some (α <| id := β |>)).
  Definition Get_name :=
    Ref.map (fun α => Some α.(name)) (fun β α => Some (α <| name := β |>)).
  Definition Get_phone :=
    Ref.map (fun α => Some α.(phone)) (fun β α => Some (α <| phone := β |>)).
End Person.
End Person.

Module  Impl_core_hash_Hash_for_hash_Person_t.
Section Impl_core_hash_Hash_for_hash_Person_t.
  Definition Self : Set := hash.Person.t.
  
  (*
  Hash
  *)
  Definition hash
      {__H : Set}
      (self : ref Self)
      (state : mut_ref __H)
      : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      let state := M.alloc (| state |) in
      M.read (|
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(ltac:(M.get_method (fun ℐ =>
                core.hash.Hash.hash (Self := u32.t) (H := __H) (Trait := ℐ)))
              (borrow (hash.Person.Get_id (deref (M.read (| self |)))))
              (M.read (| state |)))
            |)
          |) in
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(ltac:(M.get_method (fun ℐ =>
                core.hash.Hash.hash
                  (Self := alloc.string.String.t)
                  (H := __H)
                  (Trait := ℐ)))
              (borrow (hash.Person.Get_name (deref (M.read (| self |)))))
              (M.read (| state |)))
            |)
          |) in
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.hash.Hash.hash (Self := u64.t) (H := __H) (Trait := ℐ)))
            (borrow (hash.Person.Get_phone (deref (M.read (| self |)))))
            (M.read (| state |)))
          |)
        |)
      |)
    )).
  
  Global Instance AssociatedFunction_hash {__H : Set} :
    Notations.DoubleColon Self "hash" := {
    Notations.double_colon := hash (__H := __H);
  }.
  
  Global Instance ℐ : core.hash.Hash.Required.Trait Self := {
    core.hash.Hash.hash {__H : Set} := hash (__H := __H);
    core.hash.Hash.hash_slice := Datatypes.None;
  }.
End Impl_core_hash_Hash_for_hash_Person_t.
End Impl_core_hash_Hash_for_hash_Person_t.

(*
fn calculate_hash<T: Hash>(t: &T) -> u64 {
    let mut s = DefaultHasher::new();
    t.hash(&mut s);
    s.finish()
}
*)
Definition calculate_hash {T : Set} (t : ref T) : M u64.t :=
  ltac:(M.monadic (
    let t := M.alloc (| t |) in
    M.read (|
      let s : M.Val std.hash.random.DefaultHasher.t :=
        M.alloc (| M.call (|std.hash.random.DefaultHasher.t::["new"] |) |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              core.hash.Hash.hash
                (Self := T)
                (H := std.hash.random.DefaultHasher.t)
                (Trait := ℐ)))
            (M.read (| t |))
            (borrow_mut s))
          |)
        |) in
      M.alloc (|
        M.call (|(ltac:(M.get_method (fun ℐ =>
            core.hash.Hasher.finish
              (Self := std.hash.random.DefaultHasher.t)
              (Trait := ℐ)))
          (borrow s))
        |)
      |)
    |)
  )).

(*
fn main() {
    let person1 = Person {
        id: 5,
        name: "Janet".to_string(),
        phone: 555_666_7777,
    };
    let person2 = Person {
        id: 5,
        name: "Bob".to_string(),
        phone: 555_666_7777,
    };

    assert!(calculate_hash(&person1) != calculate_hash(&person2));
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let person1 : M.Val hash.Person.t :=
        M.alloc (|
          {|
            hash.Person.id := (Integer.of_Z 5) : u32.t;
            hash.Person.name :=
              M.call (|(ltac:(M.get_method (fun ℐ =>
                  alloc.string.ToString.to_string (Self := str.t) (Trait := ℐ)))
                (M.read (| mk_str "Janet" |)))
              |);
            hash.Person.phone := (Integer.of_Z 5556667777) : u64.t;
          |} : hash.Person.t
        |) in
      let person2 : M.Val hash.Person.t :=
        M.alloc (|
          {|
            hash.Person.id := (Integer.of_Z 5) : u32.t;
            hash.Person.name :=
              M.call (|(ltac:(M.get_method (fun ℐ =>
                  alloc.string.ToString.to_string (Self := str.t) (Trait := ℐ)))
                (M.read (| mk_str "Bob" |)))
              |);
            hash.Person.phone := (Integer.of_Z 5556667777) : u64.t;
          |} : hash.Person.t
        |) in
      let _ : M.Val unit :=
        if
          M.read (|
            use
              (M.alloc (|
                UnOp.not
                  (BinOp.Pure.ne
                    (M.call (|(hash.calculate_hash (borrow person1)) |))
                    (M.call (|(hash.calculate_hash (borrow person2)) |)))
              |))
          |)
        then
          M.alloc (|
            never_to_any (|
              M.call (|(core.panicking.panic
                (M.read (|
                  mk_str
                    "assertion failed: calculate_hash(&person1) != calculate_hash(&person2)"
                |)))
              |)
            |)
          |)
        else
          M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  )).
