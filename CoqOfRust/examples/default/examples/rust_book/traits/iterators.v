(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Fibonacci.
Section Fibonacci.
  Record t : Set := {
    curr : u32.t;
    next : u32.t;
  }.
  
  Definition Get_curr :=
    Ref.map (fun α => Some α.(curr)) (fun β α => Some (α <| curr := β |>)).
  Definition Get_next :=
    Ref.map (fun α => Some α.(next)) (fun β α => Some (α <| next := β |>)).
End Fibonacci.
End Fibonacci.

Module  Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci_t.
Section Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci_t.
  Definition Self : Set := iterators.Fibonacci.t.
  
  (*
      type Item = u32;
  *)
  Definition Item : Set := u32.t.
  
  (*
      fn next(&mut self) -> Option<Self::Item> {
          let current = self.curr;
  
          self.curr = self.next;
          self.next = current + self.next;
  
          // Since there's no endpoint to a Fibonacci sequence, the `Iterator`
          // will never return `None`, and `Some` is always returned.
          Some(current)
      }
  *)
  Definition next (self : mut_ref Self) : M (core.option.Option.t Item) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        let current : M.Val u32.t :=
          M.copy (| iterators.Fibonacci.Get_curr (deref (M.read (| self |)))
          |) in
        let _ : M.Val unit :=
          assign (|
            iterators.Fibonacci.Get_curr (deref (M.read (| self |))),
            M.read (| iterators.Fibonacci.Get_next (deref (M.read (| self |)))
            |)
          |) in
        let _ : M.Val unit :=
          assign (|
            iterators.Fibonacci.Get_next (deref (M.read (| self |))),
            BinOp.Panic.add (|
              M.read (| current |),
              M.read (| iterators.Fibonacci.Get_next (deref (M.read (| self |)))
              |)
            |)
          |) in
        M.alloc (| core.option.Option.Some (M.read (| current |)) |)
      |)
    )).
  
  Global Instance AssociatedFunction_next :
    Notations.DoubleColon Self "next" := {
    Notations.double_colon := next;
  }.
  
  Global Instance ℐ :
    core.iter.traits.iterator.Iterator.Required.Trait Self := {
    core.iter.traits.iterator.Iterator.Item := Item;
    core.iter.traits.iterator.Iterator.next := next;
    core.iter.traits.iterator.Iterator.next_chunk := Datatypes.None;
    core.iter.traits.iterator.Iterator.size_hint := Datatypes.None;
    core.iter.traits.iterator.Iterator.count := Datatypes.None;
    core.iter.traits.iterator.Iterator.last := Datatypes.None;
    core.iter.traits.iterator.Iterator.advance_by := Datatypes.None;
    core.iter.traits.iterator.Iterator.nth := Datatypes.None;
    core.iter.traits.iterator.Iterator.step_by := Datatypes.None;
    core.iter.traits.iterator.Iterator.chain := Datatypes.None;
    core.iter.traits.iterator.Iterator.zip := Datatypes.None;
    core.iter.traits.iterator.Iterator.intersperse := Datatypes.None;
    core.iter.traits.iterator.Iterator.intersperse_with := Datatypes.None;
    core.iter.traits.iterator.Iterator.map := Datatypes.None;
    core.iter.traits.iterator.Iterator.for_each := Datatypes.None;
    core.iter.traits.iterator.Iterator.filter := Datatypes.None;
    core.iter.traits.iterator.Iterator.filter_map := Datatypes.None;
    core.iter.traits.iterator.Iterator.enumerate := Datatypes.None;
    core.iter.traits.iterator.Iterator.peekable := Datatypes.None;
    core.iter.traits.iterator.Iterator.skip_while := Datatypes.None;
    core.iter.traits.iterator.Iterator.take_while := Datatypes.None;
    core.iter.traits.iterator.Iterator.map_while := Datatypes.None;
    core.iter.traits.iterator.Iterator.skip := Datatypes.None;
    core.iter.traits.iterator.Iterator.take := Datatypes.None;
    core.iter.traits.iterator.Iterator.scan := Datatypes.None;
    core.iter.traits.iterator.Iterator.flat_map := Datatypes.None;
    core.iter.traits.iterator.Iterator.flatten := Datatypes.None;
    core.iter.traits.iterator.Iterator.map_windows := Datatypes.None;
    core.iter.traits.iterator.Iterator.fuse := Datatypes.None;
    core.iter.traits.iterator.Iterator.inspect := Datatypes.None;
    core.iter.traits.iterator.Iterator.by_ref := Datatypes.None;
    core.iter.traits.iterator.Iterator.collect := Datatypes.None;
    core.iter.traits.iterator.Iterator.try_collect := Datatypes.None;
    core.iter.traits.iterator.Iterator.collect_into := Datatypes.None;
    core.iter.traits.iterator.Iterator.partition := Datatypes.None;
    core.iter.traits.iterator.Iterator.partition_in_place := Datatypes.None;
    core.iter.traits.iterator.Iterator.is_partitioned := Datatypes.None;
    core.iter.traits.iterator.Iterator.try_fold := Datatypes.None;
    core.iter.traits.iterator.Iterator.try_for_each := Datatypes.None;
    core.iter.traits.iterator.Iterator.fold := Datatypes.None;
    core.iter.traits.iterator.Iterator.reduce := Datatypes.None;
    core.iter.traits.iterator.Iterator.try_reduce := Datatypes.None;
    core.iter.traits.iterator.Iterator.all := Datatypes.None;
    core.iter.traits.iterator.Iterator.any := Datatypes.None;
    core.iter.traits.iterator.Iterator.find := Datatypes.None;
    core.iter.traits.iterator.Iterator.find_map := Datatypes.None;
    core.iter.traits.iterator.Iterator.try_find := Datatypes.None;
    core.iter.traits.iterator.Iterator.position := Datatypes.None;
    core.iter.traits.iterator.Iterator.rposition := Datatypes.None;
    core.iter.traits.iterator.Iterator.max := Datatypes.None;
    core.iter.traits.iterator.Iterator.min := Datatypes.None;
    core.iter.traits.iterator.Iterator.max_by_key := Datatypes.None;
    core.iter.traits.iterator.Iterator.max_by := Datatypes.None;
    core.iter.traits.iterator.Iterator.min_by_key := Datatypes.None;
    core.iter.traits.iterator.Iterator.min_by := Datatypes.None;
    core.iter.traits.iterator.Iterator.rev := Datatypes.None;
    core.iter.traits.iterator.Iterator.unzip := Datatypes.None;
    core.iter.traits.iterator.Iterator.copied := Datatypes.None;
    core.iter.traits.iterator.Iterator.cloned := Datatypes.None;
    core.iter.traits.iterator.Iterator.cycle := Datatypes.None;
    core.iter.traits.iterator.Iterator.array_chunks := Datatypes.None;
    core.iter.traits.iterator.Iterator.sum := Datatypes.None;
    core.iter.traits.iterator.Iterator.product := Datatypes.None;
    core.iter.traits.iterator.Iterator.cmp := Datatypes.None;
    core.iter.traits.iterator.Iterator.cmp_by := Datatypes.None;
    core.iter.traits.iterator.Iterator.partial_cmp := Datatypes.None;
    core.iter.traits.iterator.Iterator.partial_cmp_by := Datatypes.None;
    core.iter.traits.iterator.Iterator.eq := Datatypes.None;
    core.iter.traits.iterator.Iterator.eq_by := Datatypes.None;
    core.iter.traits.iterator.Iterator.ne := Datatypes.None;
    core.iter.traits.iterator.Iterator.lt := Datatypes.None;
    core.iter.traits.iterator.Iterator.le := Datatypes.None;
    core.iter.traits.iterator.Iterator.gt := Datatypes.None;
    core.iter.traits.iterator.Iterator.ge := Datatypes.None;
    core.iter.traits.iterator.Iterator.is_sorted := Datatypes.None;
    core.iter.traits.iterator.Iterator.is_sorted_by := Datatypes.None;
    core.iter.traits.iterator.Iterator.is_sorted_by_key := Datatypes.None;
    core.iter.traits.iterator.Iterator.__iterator_get_unchecked :=
      Datatypes.None;
  }.
End Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci_t.
End Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci_t.

(*
fn fibonacci() -> Fibonacci {
    Fibonacci { curr: 0, next: 1 }
}
*)
Definition fibonacci : M iterators.Fibonacci.t :=
  ltac:(M.monadic (
    {|
      iterators.Fibonacci.curr := (Integer.of_Z 0) : u32.t;
      iterators.Fibonacci.next := (Integer.of_Z 1) : u32.t;
    |} : iterators.Fibonacci.t
  )).

(*
fn main() {
    // `0..3` is an `Iterator` that generates: 0, 1, and 2.
    let mut sequence = 0..3;

    println!("Four consecutive `next` calls on 0..3");
    println!("> {:?}", sequence.next());
    println!("> {:?}", sequence.next());
    println!("> {:?}", sequence.next());
    println!("> {:?}", sequence.next());

    // `for` works through an `Iterator` until it returns `None`.
    // Each `Some` value is unwrapped and bound to a variable (here, `i`).
    println!("Iterate through 0..3 using `for`");
    for i in 0..3 {
        println!("> {}", i);
    }

    // The `take(n)` method reduces an `Iterator` to its first `n` terms.
    println!("The first four terms of the Fibonacci sequence are: ");
    for i in fibonacci().take(4) {
        println!("> {}", i);
    }

    // The `skip(n)` method shortens an `Iterator` by dropping its first `n` terms.
    println!("The next four terms of the Fibonacci sequence are: ");
    for i in fibonacci().skip(4).take(4) {
        println!("> {}", i);
    }

    let array = [1u32, 3, 3, 7];

    // The `iter` method produces an `Iterator` over an array/slice.
    println!("Iterate the following array {:?}", &array);
    for i in array.iter() {
        println!("> {}", i);
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let sequence : M.Val (core.ops.range.Range.t i32.t) :=
        M.alloc (|
          {|
            core.ops.range.Range.start := (Integer.of_Z 0) : i32.t;
            core.ops.range.Range.end_ := (Integer.of_Z 3) : i32.t;
          |} : core.ops.range.Range.t i32.t
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (|
                          mk_str "Four consecutive `next` calls on 0..3
"
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "> " |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.iter.traits.iterator.Iterator.next
                                    (Self := core.ops.range.Range.t i32.t)
                                    (Trait := ℐ)))
                                (borrow_mut sequence))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "> " |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.iter.traits.iterator.Iterator.next
                                    (Self := core.ops.range.Range.t i32.t)
                                    (Trait := ℐ)))
                                (borrow_mut sequence))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "> " |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.iter.traits.iterator.Iterator.next
                                    (Self := core.ops.range.Range.t i32.t)
                                    (Trait := ℐ)))
                                (borrow_mut sequence))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "> " |); M.read (| mk_str "
" |) ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  core.iter.traits.iterator.Iterator.next
                                    (Self := core.ops.range.Range.t i32.t)
                                    (Trait := ℐ)))
                                (borrow_mut sequence))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [ M.read (| mk_str "Iterate through 0..3 using `for`
" |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self := core.ops.range.Range.t i32.t)
                      (Trait := ℐ)))
                  ({|
                    core.ops.range.Range.start := (Integer.of_Z 0) : i32.t;
                    core.ops.range.Range.end_ := (Integer.of_Z 3) : i32.t;
                  |} : core.ops.range.Range.t i32.t))
                |)
              |))
              [
                fun (γ : M.Val (core.ops.range.Range.t i32.t)) =>
                  (let iter := M.copy (| γ |) in
                  M.loop
                    (let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self := core.ops.range.Range.t i32.t)
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun (γ : M.Val (core.option.Option.t i32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  (never_to_any (B := unit)) (|
                                    M.read (| M.break |)
                                  |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun (γ : M.Val (core.option.Option.t i32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                let i := M.copy (| γ0_0 |) in
                                let _ : M.Val unit :=
                                  let _ : M.Val unit :=
                                    M.alloc (|
                                      M.call (|(std.io.stdio._print
                                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                          (pointer_coercion
                                            "Unsize"
                                            (borrow
                                              (M.alloc (|
                                                [
                                                  M.read (| mk_str "> " |);
                                                  M.read (| mk_str "
" |)
                                                ]
                                              |))))
                                          (pointer_coercion
                                            "Unsize"
                                            (borrow
                                              (M.alloc (|
                                                [
                                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                    (borrow i))
                                                  |)
                                                ]
                                              |)))))
                                        |)))
                                      |)
                                    |) in
                                  M.alloc (| tt |) in
                                M.alloc (| tt |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |))) :
                  M.Val unit
              ])) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (|
                          mk_str
                            "The first four terms of the Fibonacci sequence are: 
"
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self :=
                        core.iter.adapters.take.Take.t iterators.Fibonacci.t)
                      (Trait := ℐ)))
                  (M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.iter.traits.iterator.Iterator.take
                        (Self := iterators.Fibonacci.t)
                        (Trait := ℐ)))
                    (M.call (|iterators.fibonacci |))
                    ((Integer.of_Z 4) : usize.t))
                  |)))
                |)
              |))
              [
                fun
                    (γ :
                      M.Val
                        (core.iter.adapters.take.Take.t
                          iterators.Fibonacci.t)) =>
                  (let iter := M.copy (| γ |) in
                  M.loop
                    (let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self :=
                                    core.iter.adapters.take.Take.t
                                      iterators.Fibonacci.t)
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun (γ : M.Val (core.option.Option.t u32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  (never_to_any (B := unit)) (|
                                    M.read (| M.break |)
                                  |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun (γ : M.Val (core.option.Option.t u32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                let i := M.copy (| γ0_0 |) in
                                let _ : M.Val unit :=
                                  let _ : M.Val unit :=
                                    M.alloc (|
                                      M.call (|(std.io.stdio._print
                                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                          (pointer_coercion
                                            "Unsize"
                                            (borrow
                                              (M.alloc (|
                                                [
                                                  M.read (| mk_str "> " |);
                                                  M.read (| mk_str "
" |)
                                                ]
                                              |))))
                                          (pointer_coercion
                                            "Unsize"
                                            (borrow
                                              (M.alloc (|
                                                [
                                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                    (borrow i))
                                                  |)
                                                ]
                                              |)))))
                                        |)))
                                      |)
                                    |) in
                                  M.alloc (| tt |) in
                                M.alloc (| tt |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |))) :
                  M.Val unit
              ])) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_const"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (|
                          mk_str
                            "The next four terms of the Fibonacci sequence are: 
"
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        use
          (ltac:
            (M.monadic_match_operator
              (M.alloc (|
                M.call (|(ltac:(M.get_method (fun ℐ =>
                    core.iter.traits.collect.IntoIterator.into_iter
                      (Self :=
                        core.iter.adapters.take.Take.t
                          (core.iter.adapters.skip.Skip.t
                            iterators.Fibonacci.t))
                      (Trait := ℐ)))
                  (M.call (|(ltac:(M.get_method (fun ℐ =>
                      core.iter.traits.iterator.Iterator.take
                        (Self :=
                          core.iter.adapters.skip.Skip.t iterators.Fibonacci.t)
                        (Trait := ℐ)))
                    (M.call (|(ltac:(M.get_method (fun ℐ =>
                        core.iter.traits.iterator.Iterator.skip
                          (Self := iterators.Fibonacci.t)
                          (Trait := ℐ)))
                      (M.call (|iterators.fibonacci |))
                      ((Integer.of_Z 4) : usize.t))
                    |))
                    ((Integer.of_Z 4) : usize.t))
                  |)))
                |)
              |))
              [
                fun
                    (γ :
                      M.Val
                        (core.iter.adapters.take.Take.t
                          (core.iter.adapters.skip.Skip.t
                            iterators.Fibonacci.t))) =>
                  (let iter := M.copy (| γ |) in
                  M.loop
                    (let _ : M.Val unit :=
                      ltac:
                        (M.monadic_match_operator
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.iter.traits.iterator.Iterator.next
                                  (Self :=
                                    core.iter.adapters.take.Take.t
                                      (core.iter.adapters.skip.Skip.t
                                        iterators.Fibonacci.t))
                                  (Trait := ℐ)))
                              (borrow_mut iter))
                            |)
                          |))
                          [
                            fun (γ : M.Val (core.option.Option.t u32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.None =>
                                M.alloc (|
                                  (never_to_any (B := unit)) (|
                                    M.read (| M.break |)
                                  |)
                                |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit;
                            fun (γ : M.Val (core.option.Option.t u32.t)) =>
                              match M.read (| γ |) with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                let i := M.copy (| γ0_0 |) in
                                let _ : M.Val unit :=
                                  let _ : M.Val unit :=
                                    M.alloc (|
                                      M.call (|(std.io.stdio._print
                                        (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                          (pointer_coercion
                                            "Unsize"
                                            (borrow
                                              (M.alloc (|
                                                [
                                                  M.read (| mk_str "> " |);
                                                  M.read (| mk_str "
" |)
                                                ]
                                              |))))
                                          (pointer_coercion
                                            "Unsize"
                                            (borrow
                                              (M.alloc (|
                                                [
                                                  M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                    (borrow i))
                                                  |)
                                                ]
                                              |)))))
                                        |)))
                                      |)
                                    |) in
                                  M.alloc (| tt |) in
                                M.alloc (| tt |)
                              | _ => M.break_match(||)
                              end :
                              M.Val unit
                          ]) in
                    M.alloc (| tt |))) :
                  M.Val unit
              ])) in
      let array_ : M.Val (array u32.t) :=
        M.alloc (|
          [
            (Integer.of_Z 1) : u32.t;
            (Integer.of_Z 3) : u32.t;
            (Integer.of_Z 3) : u32.t;
            (Integer.of_Z 7) : u32.t
          ]
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (| mk_str "Iterate the following array " |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_debug"]
                          (borrow (M.alloc (| borrow array_ |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      use
        (ltac:
          (M.monadic_match_operator
            (M.alloc (|
              M.call (|(ltac:(M.get_method (fun ℐ =>
                  core.iter.traits.collect.IntoIterator.into_iter
                    (Self := core.slice.iter.Iter.t u32.t)
                    (Trait := ℐ)))
                (M.call (|((slice u32.t)::["iter"]
                  (pointer_coercion "Unsize" (borrow array_)))
                |)))
              |)
            |))
            [
              fun (γ : M.Val (core.slice.iter.Iter.t u32.t)) =>
                (let iter := M.copy (| γ |) in
                M.loop
                  (let _ : M.Val unit :=
                    ltac:
                      (M.monadic_match_operator
                        (M.alloc (|
                          M.call (|(ltac:(M.get_method (fun ℐ =>
                              core.iter.traits.iterator.Iterator.next
                                (Self := core.slice.iter.Iter.t u32.t)
                                (Trait := ℐ)))
                            (borrow_mut iter))
                          |)
                        |))
                        [
                          fun (γ : M.Val (core.option.Option.t (ref u32.t))) =>
                            match M.read (| γ |) with
                            | core.option.Option.None =>
                              M.alloc (|
                                (never_to_any (B := unit)) (|
                                  M.read (| M.break |)
                                |)
                              |)
                            | _ => M.break_match(||)
                            end :
                            M.Val unit;
                          fun (γ : M.Val (core.option.Option.t (ref u32.t))) =>
                            match M.read (| γ |) with
                            | core.option.Option.Some _ =>
                              let γ0_0 := core.option.Option.Get_Some_0 γ in
                              let i := M.copy (| γ0_0 |) in
                              let _ : M.Val unit :=
                                let _ : M.Val unit :=
                                  M.alloc (|
                                    M.call (|(std.io.stdio._print
                                      (M.call (|(core.fmt.Arguments.t::["new_v1"]
                                        (pointer_coercion
                                          "Unsize"
                                          (borrow
                                            (M.alloc (|
                                              [
                                                M.read (| mk_str "> " |);
                                                M.read (| mk_str "
" |)
                                              ]
                                            |))))
                                        (pointer_coercion
                                          "Unsize"
                                          (borrow
                                            (M.alloc (|
                                              [
                                                M.call (|(core.fmt.rt.Argument.t::["new_display"]
                                                  (borrow i))
                                                |)
                                              ]
                                            |)))))
                                      |)))
                                    |)
                                  |) in
                                M.alloc (| tt |) in
                              M.alloc (| tt |)
                            | _ => M.break_match(||)
                            end :
                            M.Val unit
                        ]) in
                  M.alloc (| tt |))) :
                M.Val unit
            ]))
    |)
  )).
