(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructTuple
  {
    name := "Foo";
    ty_params := [];
    fields := [];
  } *)

(* StructTuple
  {
    name := "Bar";
    ty_params := [];
    fields := [];
  } *)

(* StructTuple
  {
    name := "FooBar";
    ty_params := [];
    fields := [];
  } *)

Module Impl_core_fmt_Debug_for_operator_overloading_FooBar.
  Definition Self : Ty.t := Ty.path "operator_overloading::FooBar".
  
  (* Debug *)
  Definition fmt (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ self; f ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let f := M.alloc (| f |) in
        M.call_closure (|
          M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
          [ M.read (| f |); M.read (| M.of_value (| Value.String "FooBar" |) |) ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_operator_overloading_FooBar.

(* StructTuple
  {
    name := "BarFoo";
    ty_params := [];
    fields := [];
  } *)

Module Impl_core_fmt_Debug_for_operator_overloading_BarFoo.
  Definition Self : Ty.t := Ty.path "operator_overloading::BarFoo".
  
  (* Debug *)
  Definition fmt (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ self; f ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let f := M.alloc (| f |) in
        M.call_closure (|
          M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
          [ M.read (| f |); M.read (| M.of_value (| Value.String "BarFoo" |) |) ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_operator_overloading_BarFoo.

Module Impl_core_ops_arith_Add_operator_overloading_Bar_for_operator_overloading_Foo.
  Definition Self : Ty.t := Ty.path "operator_overloading::Foo".
  
  (*     type Output = FooBar; *)
  Definition _Output : Ty.t := Ty.path "operator_overloading::FooBar".
  
  (*
      fn add(self, _rhs: Bar) -> FooBar {
          println!("> Foo.add(Bar) was called");
  
          FooBar
      }
  *)
  Definition add (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ self; _rhs ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let _rhs := M.alloc (| _rhs |) in
        M.read (|
          let _ :=
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (| "std::io::stdio::_print", [] |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::fmt::Arguments",
                        "new_const",
                        []
                      |),
                      [
                        (* Unsize *)
                        M.pointer_coercion (|
                          M.alloc (|
                            M.of_value (|
                              Value.Array
                                [
                                  A.to_value
                                    (M.read (|
                                      M.of_value (| Value.String "> Foo.add(Bar) was called
" |)
                                    |))
                                ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (| M.of_value (| Value.Tuple [] |) |) in
          M.alloc (| M.of_value (| Value.StructTuple "operator_overloading::FooBar" [] |) |)
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::ops::arith::Add"
      Self
      (* Trait polymorphic types *) [ (* Rhs *) Ty.path "operator_overloading::Bar" ]
      (* Instance *) [ ("Output", InstanceField.Ty _Output); ("add", InstanceField.Method add) ].
End Impl_core_ops_arith_Add_operator_overloading_Bar_for_operator_overloading_Foo.

Module Impl_core_ops_arith_Add_operator_overloading_Foo_for_operator_overloading_Bar.
  Definition Self : Ty.t := Ty.path "operator_overloading::Bar".
  
  (*     type Output = BarFoo; *)
  Definition _Output : Ty.t := Ty.path "operator_overloading::BarFoo".
  
  (*
      fn add(self, _rhs: Foo) -> BarFoo {
          println!("> Bar.add(Foo) was called");
  
          BarFoo
      }
  *)
  Definition add (τ : list Ty.t) (α : list A.t) : M :=
    match τ, α with
    | [], [ self; _rhs ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let _rhs := M.alloc (| _rhs |) in
        M.read (|
          let _ :=
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (| "std::io::stdio::_print", [] |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "core::fmt::Arguments",
                        "new_const",
                        []
                      |),
                      [
                        (* Unsize *)
                        M.pointer_coercion (|
                          M.alloc (|
                            M.of_value (|
                              Value.Array
                                [
                                  A.to_value
                                    (M.read (|
                                      M.of_value (| Value.String "> Bar.add(Foo) was called
" |)
                                    |))
                                ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (| M.of_value (| Value.Tuple [] |) |) in
          M.alloc (| M.of_value (| Value.StructTuple "operator_overloading::BarFoo" [] |) |)
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::ops::arith::Add"
      Self
      (* Trait polymorphic types *) [ (* Rhs *) Ty.path "operator_overloading::Foo" ]
      (* Instance *) [ ("Output", InstanceField.Ty _Output); ("add", InstanceField.Method add) ].
End Impl_core_ops_arith_Add_operator_overloading_Foo_for_operator_overloading_Bar.

(*
fn main() {
    println!("Foo + Bar = {:?}", Foo + Bar);
    println!("Bar + Foo = {:?}", Bar + Foo);
}
*)
Definition main (τ : list Ty.t) (α : list A.t) : M :=
  match τ, α with
  | [], [] =>
    ltac:(M.monadic
      (M.read (|
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (| M.of_value (| Value.String "Foo + Bar = " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_debug",
                                      [ Ty.path "operator_overloading::FooBar" ]
                                    |),
                                    [
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::arith::Add",
                                            Ty.path "operator_overloading::Foo",
                                            [ Ty.path "operator_overloading::Bar" ],
                                            "add",
                                            []
                                          |),
                                          [
                                            M.of_value (|
                                              Value.StructTuple "operator_overloading::Foo" []
                                            |);
                                            M.of_value (|
                                              Value.StructTuple "operator_overloading::Bar" []
                                            |)
                                          ]
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        let _ :=
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "std::io::stdio::_print", [] |),
                [
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.read (| M.of_value (| Value.String "Bar + Foo = " |) |));
                                A.to_value (M.read (| M.of_value (| Value.String "
" |) |))
                              ]
                          |)
                        |)
                      |);
                      (* Unsize *)
                      M.pointer_coercion (|
                        M.alloc (|
                          M.of_value (|
                            Value.Array
                              [
                                A.to_value
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::rt::Argument",
                                      "new_debug",
                                      [ Ty.path "operator_overloading::BarFoo" ]
                                    |),
                                    [
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::arith::Add",
                                            Ty.path "operator_overloading::Bar",
                                            [ Ty.path "operator_overloading::Foo" ],
                                            "add",
                                            []
                                          |),
                                          [
                                            M.of_value (|
                                              Value.StructTuple "operator_overloading::Bar" []
                                            |);
                                            M.of_value (|
                                              Value.StructTuple "operator_overloading::Foo" []
                                            |)
                                          ]
                                        |)
                                      |)
                                    ]
                                  |))
                              ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          M.alloc (| M.of_value (| Value.Tuple [] |) |) in
        M.alloc (| M.of_value (| Value.Tuple [] |) |)
      |)))
  | _, _ => M.impossible
  end.
