(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Sheep.
Section Sheep.
  Inductive t : Set := Build.
End Sheep.
End Sheep.

Module  Cow.
Section Cow.
  Inductive t : Set := Build.
End Cow.
End Cow.

Module  Animal.
Section Animal.
  Class Trait (Self : Set) : Type := {
    noise : (ref Self) -> M (ref str.t);
  }.
  
End Animal.
End Animal.

Module  Impl_returning_traits_with_dyn_Animal_for_returning_traits_with_dyn_Sheep_t.
Section Impl_returning_traits_with_dyn_Animal_for_returning_traits_with_dyn_Sheep_t.
  Definition Self : Set := returning_traits_with_dyn.Sheep.t.
  
  (*
      fn noise(&self) -> &'static str {
          "baaaaah!"
      }
  *)
  Definition noise (self : ref Self) : M (ref str.t) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (| mk_str "baaaaah!" |)
    ) : ref str.t)).
  
  Global Instance AssociatedFunction_noise :
    Notations.DoubleColon Self "noise" := {
    Notations.double_colon := noise;
  }.
  
  Global Instance ℐ : returning_traits_with_dyn.Animal.Trait Self := {
    returning_traits_with_dyn.Animal.noise := noise;
  }.
End Impl_returning_traits_with_dyn_Animal_for_returning_traits_with_dyn_Sheep_t.
End Impl_returning_traits_with_dyn_Animal_for_returning_traits_with_dyn_Sheep_t.

Module  Impl_returning_traits_with_dyn_Animal_for_returning_traits_with_dyn_Cow_t.
Section Impl_returning_traits_with_dyn_Animal_for_returning_traits_with_dyn_Cow_t.
  Definition Self : Set := returning_traits_with_dyn.Cow.t.
  
  (*
      fn noise(&self) -> &'static str {
          "moooooo!"
      }
  *)
  Definition noise (self : ref Self) : M (ref str.t) :=
    ltac:(M.monadic ((
      let self := M.alloc (| self |) in
      M.read (| mk_str "moooooo!" |)
    ) : ref str.t)).
  
  Global Instance AssociatedFunction_noise :
    Notations.DoubleColon Self "noise" := {
    Notations.double_colon := noise;
  }.
  
  Global Instance ℐ : returning_traits_with_dyn.Animal.Trait Self := {
    returning_traits_with_dyn.Animal.noise := noise;
  }.
End Impl_returning_traits_with_dyn_Animal_for_returning_traits_with_dyn_Cow_t.
End Impl_returning_traits_with_dyn_Animal_for_returning_traits_with_dyn_Cow_t.

(*
fn random_animal(random_number: f64) -> Box<dyn Animal> {
    if random_number < 0.5 {
        Box::new(Sheep {})
    } else {
        Box::new(Cow {})
    }
}
*)
Definition random_animal
    (random_number : f64.t)
    :
      M
        (alloc.boxed.Box.t
          (dyn [returning_traits_with_dyn.Animal.Trait])
          alloc.boxed.Box.Default.A) :=
  ltac:(M.monadic ((
    let random_number := M.alloc (| random_number |) in
    pointer_coercion
      "Unsize"
      (pointer_coercion
        "Unsize"
        (M.read (|
          if
            M.read (|
              use
                (M.alloc (|
                  BinOp.Pure.lt
                    (M.read (| random_number |))
                    (M.read (| UnsupportedLiteral : M.Val f64.t |))
                |))
            |)
          then
            M.alloc (|
              pointer_coercion
                "Unsize"
                (pointer_coercion
                  "Unsize"
                  (M.call (|((alloc.boxed.Box.t
                        returning_traits_with_dyn.Sheep.t
                        alloc.alloc.Global.t)::["new"]
                    returning_traits_with_dyn.Sheep.Build)
                  |)))
            |)
          else
            M.alloc (|
              pointer_coercion
                "Unsize"
                (M.call (|((alloc.boxed.Box.t
                      returning_traits_with_dyn.Cow.t
                      alloc.alloc.Global.t)::["new"]
                  returning_traits_with_dyn.Cow.Build)
                |))
            |)
        |)))
  ) : alloc.boxed.Box.t
    (dyn [returning_traits_with_dyn.Animal.Trait])
    alloc.boxed.Box.Default.A)).

(*
fn main() {
    let random_number = 0.234;
    let animal = random_animal(random_number);
    println!(
        "You've randomly chosen an animal, and it says {}",
        animal.noise()
    );
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic ((
    M.read (|
      let random_number : M.Val f64.t :=
        M.copy (| UnsupportedLiteral : M.Val f64.t |) in
      let animal :
          M.Val
            (alloc.boxed.Box.t
              (dyn [returning_traits_with_dyn.Animal.Trait])
              alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|(returning_traits_with_dyn.random_animal
            (M.read (| random_number |)))
          |)
        |) in
      let _ : M.Val unit :=
        let _ : M.Val unit :=
          M.alloc (|
            M.call (|(std.io.stdio._print
              (M.call (|(core.fmt.Arguments.t::["new_v1"]
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.read (|
                          mk_str
                            "You've randomly chosen an animal, and it says "
                        |);
                        M.read (| mk_str "
" |)
                      ]
                    |))))
                (pointer_coercion
                  "Unsize"
                  (borrow
                    (M.alloc (|
                      [
                        M.call (|(core.fmt.rt.Argument.t::["new_display"]
                          (borrow
                            (M.alloc (|
                              M.call (|(ltac:(M.get_method (fun ℐ =>
                                  returning_traits_with_dyn.Animal.noise
                                    (Self :=
                                      dyn
                                        [returning_traits_with_dyn.Animal.Trait])
                                    (Trait := ℐ)))
                                (borrow (deref (M.read (| animal |)))))
                              |)
                            |))))
                        |)
                      ]
                    |)))))
              |)))
            |)
          |) in
        M.alloc (| tt |) in
      M.alloc (| tt |)
    |)
  ) : unit)).
