(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Person.
Section Person.
  Class Trait (Self : Set) : Type := {
    name : (ref Self) -> M alloc.string.String.t;
  }.
  
End Person.
End Person.

Module  Student.
Section Student.
  Class Trait (Self : Set) : Type := {
    university : (ref Self) -> M alloc.string.String.t;
  }.
  
End Student.
End Student.

Module  Programmer.
Section Programmer.
  Class Trait (Self : Set) : Type := {
    fav_language : (ref Self) -> M alloc.string.String.t;
  }.
  
End Programmer.
End Programmer.

Module  CompSciStudent.
Section CompSciStudent.
  Class Trait (Self : Set) : Type := {
    git_username : (ref Self) -> M alloc.string.String.t;
  }.
  
End CompSciStudent.
End CompSciStudent.

(*
fn comp_sci_student_greeting(student: &dyn CompSciStudent) -> String {
    format!(
        "My name is {} and I attend {}. My favorite language is {}. My Git username is {}",
        student.name(),
        student.university(),
        student.fav_language(),
        student.git_username()
    )
}
*)
Definition comp_sci_student_greeting
    {DynT : Set}
    (student : ref DynT)
    : M alloc.string.String.t :=
  ltac:(M.monadic ((
    let student := M.alloc (| student |) in
    M.read (|
      let res : M.Val alloc.string.String.t :=
        M.alloc (|
          M.call (|(alloc.fmt.format
            (M.call (|(core.fmt.Arguments.t::["new_v1"]
              (pointer_coercion
                "Unsize"
                (borrow
                  (M.alloc (|
                    [
                      M.read (| mk_str "My name is " |);
                      M.read (| mk_str " and I attend " |);
                      M.read (| mk_str ". My favorite language is " |);
                      M.read (| mk_str ". My Git username is " |)
                    ]
                  |))))
              (pointer_coercion
                "Unsize"
                (borrow
                  (M.alloc (|
                    [
                      M.call (|(core.fmt.rt.Argument.t::["new_display"]
                        (borrow
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                supertraits.Person.name
                                  (Self :=
                                    dyn [supertraits.CompSciStudent.Trait])
                                  (Trait := ℐ)))
                              (M.read (| student |)))
                            |)
                          |))))
                      |);
                      M.call (|(core.fmt.rt.Argument.t::["new_display"]
                        (borrow
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                supertraits.Student.university
                                  (Self :=
                                    dyn [supertraits.CompSciStudent.Trait])
                                  (Trait := ℐ)))
                              (M.read (| student |)))
                            |)
                          |))))
                      |);
                      M.call (|(core.fmt.rt.Argument.t::["new_display"]
                        (borrow
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                supertraits.Programmer.fav_language
                                  (Self :=
                                    dyn [supertraits.CompSciStudent.Trait])
                                  (Trait := ℐ)))
                              (M.read (| student |)))
                            |)
                          |))))
                      |);
                      M.call (|(core.fmt.rt.Argument.t::["new_display"]
                        (borrow
                          (M.alloc (|
                            M.call (|(ltac:(M.get_method (fun ℐ =>
                                supertraits.CompSciStudent.git_username
                                  (Self :=
                                    dyn [supertraits.CompSciStudent.Trait])
                                  (Trait := ℐ)))
                              (M.read (| student |)))
                            |)
                          |))))
                      |)
                    ]
                  |)))))
            |)))
          |)
        |) in
      res
    |)
  ) : alloc.string.String.t)).

(*
fn main() {}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit := ltac:(M.monadic (( tt ) : unit)).
