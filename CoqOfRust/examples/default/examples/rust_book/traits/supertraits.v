(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Trait *)
(* Empty module 'Person' *)

(* Trait *)
(* Empty module 'Student' *)

(* Trait *)
(* Empty module 'Programmer' *)

(* Trait *)
(* Empty module 'CompSciStudent' *)

(*
fn comp_sci_student_greeting(student: &dyn CompSciStudent) -> String {
    format!(
        "My name is {} and I attend {}. My favorite language is {}. My Git username is {}",
        student.name(),
        student.university(),
        student.fav_language(),
        student.git_username()
    )
}
*)
Definition comp_sci_student_greeting (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [ student ] =>
    ltac:(M.monadic
      (let student := M.alloc (| student |) in
      M.call_closure (|
        Ty.path "alloc::string::String",
        M.get_function (| "core::hint::must_use", [], [ Ty.path "alloc::string::String" ] |),
        [
          M.read (|
            let~ res : Ty.path "alloc::string::String" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "alloc::string::String",
                  M.get_function (| "alloc::fmt::format", [], [] |),
                  [
                    M.call_closure (|
                      Ty.path "core::fmt::Arguments",
                      M.get_associated_function (|
                        Ty.path "core::fmt::Arguments",
                        "new_v1",
                        [ Value.Integer IntegerKind.Usize 4; Value.Integer IntegerKind.Usize 4 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Value.Array
                                  [
                                    M.read (| Value.String "My name is " |);
                                    M.read (| Value.String " and I attend " |);
                                    M.read (| Value.String ". My favorite language is " |);
                                    M.read (| Value.String ". My Git username is " |)
                                  ]
                              |)
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Value.Array
                                  [
                                    M.call_closure (|
                                      Ty.path "core::fmt::rt::Argument",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::rt::Argument",
                                        "new_display",
                                        [],
                                        [ Ty.path "alloc::string::String" ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "alloc::string::String",
                                                  M.get_trait_method (|
                                                    "supertraits::Person",
                                                    Ty.dyn
                                                      [ ("supertraits::CompSciStudent::Trait", [])
                                                      ],
                                                    [],
                                                    [],
                                                    "name",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| student |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.path "core::fmt::rt::Argument",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::rt::Argument",
                                        "new_display",
                                        [],
                                        [ Ty.path "alloc::string::String" ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "alloc::string::String",
                                                  M.get_trait_method (|
                                                    "supertraits::Student",
                                                    Ty.dyn
                                                      [ ("supertraits::CompSciStudent::Trait", [])
                                                      ],
                                                    [],
                                                    [],
                                                    "university",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| student |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.path "core::fmt::rt::Argument",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::rt::Argument",
                                        "new_display",
                                        [],
                                        [ Ty.path "alloc::string::String" ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "alloc::string::String",
                                                  M.get_trait_method (|
                                                    "supertraits::Programmer",
                                                    Ty.dyn
                                                      [ ("supertraits::CompSciStudent::Trait", [])
                                                      ],
                                                    [],
                                                    [],
                                                    "fav_language",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| student |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.path "core::fmt::rt::Argument",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::rt::Argument",
                                        "new_display",
                                        [],
                                        [ Ty.path "alloc::string::String" ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "alloc::string::String",
                                                  M.get_trait_method (|
                                                    "supertraits::CompSciStudent",
                                                    Ty.dyn
                                                      [ ("supertraits::CompSciStudent::Trait", [])
                                                      ],
                                                    [],
                                                    [],
                                                    "git_username",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| student |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            res
          |)
        ]
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Axiom Function_comp_sci_student_greeting :
  M.IsFunction "supertraits::comp_sci_student_greeting" comp_sci_student_greeting.
Smpl Add apply Function_comp_sci_student_greeting : is_function.

(* fn main() {} *)
Definition main (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [] => ltac:(M.monadic (Value.Tuple []))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Axiom Function_main : M.IsFunction "supertraits::main" main.
Smpl Add apply Function_main : is_function.
