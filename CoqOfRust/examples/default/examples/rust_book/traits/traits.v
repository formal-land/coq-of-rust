(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Sheep.
Section Sheep.
  Record t : Set := {
    naked : bool.t;
    name : ref str.t;
  }.
  
  Definition Get_naked :=
    Ref.map (fun α => Some α.(naked)) (fun β α => Some (α <| naked := β |>)).
  Definition Get_name :=
    Ref.map (fun α => Some α.(name)) (fun β α => Some (α <| name := β |>)).
End Sheep.
End Sheep.

Module  Animal.
Section Animal.
  Class Trait (Self : Set) : Type := {
    new : (ref str.t) -> M Self;
    name : (ref Self) -> M (ref str.t);
    noise : (ref Self) -> M (ref str.t);
  }.
  
End Animal.
End Animal.

Module  Impl_traits_Sheep_t.
Section Impl_traits_Sheep_t.
  Definition Self : Set := traits.Sheep.t.
  
  (*
      fn is_naked(&self) -> bool {
          self.naked
      }
  *)
  Definition is_naked (self : ref Self) : M bool.t :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (| traits.Sheep.Get_naked (deref (M.read (| self |))) |)
    )).
  
  Global Instance AssociatedFunction_is_naked :
    Notations.DoubleColon Self "is_naked" := {
    Notations.double_colon := is_naked;
  }.
End Impl_traits_Sheep_t.
End Impl_traits_Sheep_t.

Module  Impl_traits_Animal_for_traits_Sheep_t.
Section Impl_traits_Animal_for_traits_Sheep_t.
  Definition Self : Set := traits.Sheep.t.
  
  (*
      fn new(name: &'static str) -> Sheep {
          Sheep {
              name: name,
              naked: false,
          }
      }
  *)
  Definition new (name : ref str.t) : M traits.Sheep.t :=
    ltac:(M.monadic (
      let name := M.alloc (| name |) in
      {| traits.Sheep.name := M.read (| name |); traits.Sheep.naked := false;
      |} : traits.Sheep.t
    )).
  
  Global Instance AssociatedFunction_new : Notations.DoubleColon Self "new" := {
    Notations.double_colon := new;
  }.
  
  (*
      fn name(&self) -> &'static str {
          self.name
      }
  *)
  Definition name (self : ref Self) : M (ref str.t) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (| traits.Sheep.Get_name (deref (M.read (| self |))) |)
    )).
  
  Global Instance AssociatedFunction_name :
    Notations.DoubleColon Self "name" := {
    Notations.double_colon := name;
  }.
  
  (*
      fn noise(&self) -> &'static str {
          if self.is_naked() {
              "baaaaah?"
          } else {
              "baaaaah!"
          }
      }
  *)
  Definition noise (self : ref Self) : M (ref str.t) :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        if
          M.read (|
            use
              (M.alloc (|
                M.call (|(traits.Sheep.t::["is_naked"] (M.read (| self |))) |)
              |))
          |)
        then
          mk_str "baaaaah?"
        else
          mk_str "baaaaah!"
      |)
    )).
  
  Global Instance AssociatedFunction_noise :
    Notations.DoubleColon Self "noise" := {
    Notations.double_colon := noise;
  }.
  
  (*
      fn talk(&self) {
          // For example, we can add some quiet contemplation.
          println!("{} pauses briefly... {}", self.name, self.noise());
      }
  *)
  Definition talk (self : ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        let _ : M.Val unit :=
          let _ : M.Val unit :=
            M.alloc (|
              M.call (|(std.io.stdio._print
                (M.call (|(core.fmt.Arguments.t::["new_v1"]
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.read (| mk_str "" |);
                          M.read (| mk_str " pauses briefly... " |);
                          M.read (| mk_str "
" |)
                        ]
                      |))))
                  (pointer_coercion
                    "Unsize"
                    (borrow
                      (M.alloc (|
                        [
                          M.call (|(core.fmt.rt.Argument.t::["new_display"]
                            (borrow
                              (traits.Sheep.Get_name
                                (deref (M.read (| self |))))))
                          |);
                          M.call (|(core.fmt.rt.Argument.t::["new_display"]
                            (borrow
                              (M.alloc (|
                                M.call (|(noise (M.read (| self |))) |)
                              |))))
                          |)
                        ]
                      |)))))
                |)))
              |)
            |) in
          M.alloc (| tt |) in
        M.alloc (| tt |)
      |)
    )).
  
  Global Instance AssociatedFunction_talk :
    Notations.DoubleColon Self "talk" := {
    Notations.double_colon := talk;
  }.
  
  Global Instance ℐ : traits.Animal.Required.Trait Self := {
    traits.Animal.new := new;
    traits.Animal.name := name;
    traits.Animal.noise := noise;
    traits.Animal.talk := Datatypes.Some talk;
  }.
End Impl_traits_Animal_for_traits_Sheep_t.
End Impl_traits_Animal_for_traits_Sheep_t.

Module  Impl_traits_Sheep_t_2.
Section Impl_traits_Sheep_t_2.
  Definition Self : Set := traits.Sheep.t.
  
  (*
      fn shear(&mut self) {
          if self.is_naked() {
              // Implementor methods can use the implementor's trait methods.
              println!("{} is already naked...", self.name());
          } else {
              println!("{} gets a haircut!", self.name);
  
              self.naked = true;
          }
      }
  *)
  Definition shear (self : mut_ref Self) : M unit :=
    ltac:(M.monadic (
      let self := M.alloc (| self |) in
      M.read (|
        if
          M.read (|
            use
              (M.alloc (|
                M.call (|(traits.Sheep.t::["is_naked"]
                  (borrow (deref (M.read (| self |)))))
                |)
              |))
          |)
        then
          let _ : M.Val unit :=
            let _ : M.Val unit :=
              M.alloc (|
                M.call (|(std.io.stdio._print
                  (M.call (|(core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion
                      "Unsize"
                      (borrow
                        (M.alloc (|
                          [
                            M.read (| mk_str "" |);
                            M.read (| mk_str " is already naked...
" |)
                          ]
                        |))))
                    (pointer_coercion
                      "Unsize"
                      (borrow
                        (M.alloc (|
                          [
                            M.call (|(core.fmt.rt.Argument.t::["new_display"]
                              (borrow
                                (M.alloc (|
                                  M.call (|(ltac:(M.get_method (fun ℐ =>
                                      traits.Animal.name
                                        (Self := traits.Sheep.t)
                                        (Trait := ℐ)))
                                    (borrow (deref (M.read (| self |)))))
                                  |)
                                |))))
                            |)
                          ]
                        |)))))
                  |)))
                |)
              |) in
            M.alloc (| tt |) in
          M.alloc (| tt |)
        else
          let _ : M.Val unit :=
            let _ : M.Val unit :=
              M.alloc (|
                M.call (|(std.io.stdio._print
                  (M.call (|(core.fmt.Arguments.t::["new_v1"]
                    (pointer_coercion
                      "Unsize"
                      (borrow
                        (M.alloc (|
                          [
                            M.read (| mk_str "" |);
                            M.read (| mk_str " gets a haircut!
" |)
                          ]
                        |))))
                    (pointer_coercion
                      "Unsize"
                      (borrow
                        (M.alloc (|
                          [
                            M.call (|(core.fmt.rt.Argument.t::["new_display"]
                              (borrow
                                (traits.Sheep.Get_name
                                  (deref (M.read (| self |))))))
                            |)
                          ]
                        |)))))
                  |)))
                |)
              |) in
            M.alloc (| tt |) in
          let _ : M.Val unit :=
            assign (| traits.Sheep.Get_naked (deref (M.read (| self |))), true
            |) in
          M.alloc (| tt |)
      |)
    )).
  
  Global Instance AssociatedFunction_shear :
    Notations.DoubleColon Self "shear" := {
    Notations.double_colon := shear;
  }.
End Impl_traits_Sheep_t_2.
End Impl_traits_Sheep_t_2.

(*
fn main() {
    // Type annotation is necessary in this case.
    let mut dolly: Sheep = Animal::new("Dolly");
    // TODO ^ Try removing the type annotations.

    dolly.talk();
    dolly.shear();
    dolly.talk();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let dolly : M.Val traits.Sheep.t :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              traits.Animal.new (Self := traits.Sheep.t) (Trait := ℐ)))
            (M.read (| mk_str "Dolly" |)))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              traits.Animal.talk (Self := traits.Sheep.t) (Trait := ℐ)))
            (borrow dolly))
          |)
        |) in
      let _ : M.Val unit :=
        M.alloc (| M.call (|(traits.Sheep.t::["shear"] (borrow_mut dolly)) |)
        |) in
      let _ : M.Val unit :=
        M.alloc (|
          M.call (|(ltac:(M.get_method (fun ℐ =>
              traits.Animal.talk (Self := traits.Sheep.t) (Trait := ℐ)))
            (borrow dolly))
          |)
        |) in
      M.alloc (| tt |)
    |)
  )).
