(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructRecord
  {
    name := "Sheep";
    ty_params := [];
    fields := [ ("naked", Ty.path "bool"); ("name", Ty.apply (Ty.path "&") [ Ty.path "str" ] []) ];
  } *)

(* Trait *)
Module Animal.
  Definition talk (Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] [] in
          let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
          let* α6 :=
            (* Unsize *)
              let* α2 := M.read (mk_str "") in
              let* α3 := M.read (mk_str " says ") in
              let* α4 := M.read (mk_str "
") in
              let* α5 := M.alloc (Value.Array [ α2; α3; α4 ]) in
              M.pure (M.pointer_coercion α5) in
          let* α20 :=
            (* Unsize *)
              let* α7 :=
                M.get_associated_function
                  (Ty.path "core::fmt::rt::Argument")
                  "new_display"
                  [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ]
                  [] in
              let* α8 := M.get_trait_method "traits::Animal" Self [] [] "name" [] [] in
              let* α9 := M.read self in
              let* α10 := M.call_closure α8 [ α9 ] in
              let* α11 := M.alloc α10 in
              let* α12 := M.call_closure α7 [ α11 ] in
              let* α13 :=
                M.get_associated_function
                  (Ty.path "core::fmt::rt::Argument")
                  "new_display"
                  [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ]
                  [] in
              let* α14 := M.get_trait_method "traits::Animal" Self [] [] "noise" [] [] in
              let* α15 := M.read self in
              let* α16 := M.call_closure α14 [ α15 ] in
              let* α17 := M.alloc α16 in
              let* α18 := M.call_closure α13 [ α17 ] in
              let* α19 := M.alloc (Value.Array [ α12; α18 ]) in
              M.pure (M.pointer_coercion α19) in
          let* α21 := M.call_closure α1 [ α6; α20 ] in
          let* α22 := M.call_closure α0 [ α21 ] in
          M.alloc α22 in
        M.alloc (Value.Tuple []) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom ProvidedMethod_talk : M.IsProvidedMethod "traits::Animal" "talk" talk.
End Animal.

Module Impl_traits_Sheep.
  Definition Self : Ty.t := Ty.path "traits::Sheep".
  
  (*
      fn is_naked(&self) -> bool {
          self.naked
      }
  *)
  Definition is_naked (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (M.get_struct_record_field α0 "traits::Sheep" "naked")
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_is_naked : M.IsAssociatedFunction Self "is_naked" is_naked.
End Impl_traits_Sheep.

Module Impl_traits_Animal_for_traits_Sheep.
  Definition Self : Ty.t := Ty.path "traits::Sheep".
  
  (*
      fn new(name: &'static str) -> Sheep {
          Sheep {
              name: name,
              naked: false,
          }
      }
  *)
  Definition new (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ name ] =>
      let* name := M.alloc name in
      let* α0 := M.read name in
      M.pure (Value.StructRecord "traits::Sheep" [ ("name", α0); ("naked", Value.Bool false) ])
    | _, _ => M.impossible
    end.
  
  (*
      fn name(&self) -> &'static str {
          self.name
      }
  *)
  Definition name (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.read self in
      M.read (M.get_struct_record_field α0 "traits::Sheep" "name")
    | _, _ => M.impossible
    end.
  
  (*
      fn noise(&self) -> &'static str {
          if self.is_naked() {
              "baaaaah?"
          } else {
              "baaaaah!"
          }
      }
  *)
  Definition noise (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.alloc (Value.Tuple []) in
      let* α1 :=
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 := M.get_associated_function (Ty.path "traits::Sheep") "is_naked" [] [] in
                let* α1 := M.read self in
                let* α2 := M.call_closure α0 [ α1 ] in
                let* α3 := M.alloc α2 in
                M.pure (M.use α3) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              M.pure (mk_str "baaaaah?");
            fun γ => M.pure (mk_str "baaaaah!")
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  (*
      fn talk(&self) {
          // For example, we can add some quiet contemplation.
          println!("{} pauses briefly... {}", self.name, self.noise());
      }
  *)
  Definition talk (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] [] in
          let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
          let* α6 :=
            (* Unsize *)
              let* α2 := M.read (mk_str "") in
              let* α3 := M.read (mk_str " pauses briefly... ") in
              let* α4 := M.read (mk_str "
") in
              let* α5 := M.alloc (Value.Array [ α2; α3; α4 ]) in
              M.pure (M.pointer_coercion α5) in
          let* α17 :=
            (* Unsize *)
              let* α7 :=
                M.get_associated_function
                  (Ty.path "core::fmt::rt::Argument")
                  "new_display"
                  [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ]
                  [] in
              let* α8 := M.read self in
              let* α9 :=
                M.call_closure α7 [ M.get_struct_record_field α8 "traits::Sheep" "name" ] in
              let* α10 :=
                M.get_associated_function
                  (Ty.path "core::fmt::rt::Argument")
                  "new_display"
                  [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ]
                  [] in
              let* α11 :=
                M.get_trait_method "traits::Animal" (Ty.path "traits::Sheep") [] [] "noise" [] [] in
              let* α12 := M.read self in
              let* α13 := M.call_closure α11 [ α12 ] in
              let* α14 := M.alloc α13 in
              let* α15 := M.call_closure α10 [ α14 ] in
              let* α16 := M.alloc (Value.Array [ α9; α15 ]) in
              M.pure (M.pointer_coercion α16) in
          let* α18 := M.call_closure α1 [ α6; α17 ] in
          let* α19 := M.call_closure α0 [ α18 ] in
          M.alloc α19 in
        M.alloc (Value.Tuple []) in
      let* α0 := M.alloc (Value.Tuple []) in
      M.read α0
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "traits::Animal"
      Self
      (* Trait polymorphic types *) []
      (* Instance *)
        [
          ("new", InstanceField.Method new);
          ("name", InstanceField.Method name);
          ("noise", InstanceField.Method noise);
          ("talk", InstanceField.Method talk)
        ].
End Impl_traits_Animal_for_traits_Sheep.

Module Wrap_Impl_traits_Sheep_2.
Module Impl_traits_Sheep.
  Definition Self : Ty.t := Ty.path "traits::Sheep".
  
  (*
      fn shear(&mut self) {
          if self.is_naked() {
              // Implementor methods can use the implementor's trait methods.
              println!("{} is already naked...", self.name());
          } else {
              println!("{} gets a haircut!", self.name);
  
              self.naked = true;
          }
      }
  *)
  Definition shear (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self ] =>
      let* self := M.alloc self in
      let* α0 := M.alloc (Value.Tuple []) in
      let* α1 :=
        M.match_operator
          α0
          [
            fun γ =>
              let* γ :=
                let* α0 := M.get_associated_function (Ty.path "traits::Sheep") "is_naked" [] [] in
                let* α1 := M.read self in
                let* α2 := M.call_closure α0 [ α1 ] in
                let* α3 := M.alloc α2 in
                M.pure (M.use α3) in
              let* _ :=
                let* α0 := M.read γ in
                M.is_constant_or_break_match α0 (Value.Bool true) in
              let* _ :=
                let* _ :=
                  let* α0 := M.get_function "std::io::stdio::_print" [] [] in
                  let* α1 :=
                    M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
                  let* α5 :=
                    (* Unsize *)
                      let* α2 := M.read (mk_str "") in
                      let* α3 := M.read (mk_str " is already naked...
") in
                      let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                      M.pure (M.pointer_coercion α4) in
                  let* α13 :=
                    (* Unsize *)
                      let* α6 :=
                        M.get_associated_function
                          (Ty.path "core::fmt::rt::Argument")
                          "new_display"
                          [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ]
                          [] in
                      let* α7 :=
                        M.get_trait_method
                          "traits::Animal"
                          (Ty.path "traits::Sheep")
                          []
                          []
                          "name"
                          []
                          [] in
                      let* α8 := M.read self in
                      let* α9 := M.call_closure α7 [ α8 ] in
                      let* α10 := M.alloc α9 in
                      let* α11 := M.call_closure α6 [ α10 ] in
                      let* α12 := M.alloc (Value.Array [ α11 ]) in
                      M.pure (M.pointer_coercion α12) in
                  let* α14 := M.call_closure α1 [ α5; α13 ] in
                  let* α15 := M.call_closure α0 [ α14 ] in
                  M.alloc α15 in
                M.alloc (Value.Tuple []) in
              M.alloc (Value.Tuple []);
            fun γ =>
              let* _ :=
                let* _ :=
                  let* α0 := M.get_function "std::io::stdio::_print" [] [] in
                  let* α1 :=
                    M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
                  let* α5 :=
                    (* Unsize *)
                      let* α2 := M.read (mk_str "") in
                      let* α3 := M.read (mk_str " gets a haircut!
") in
                      let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
                      M.pure (M.pointer_coercion α4) in
                  let* α10 :=
                    (* Unsize *)
                      let* α6 :=
                        M.get_associated_function
                          (Ty.path "core::fmt::rt::Argument")
                          "new_display"
                          [ Ty.apply (Ty.path "&") [ Ty.path "str" ] [] ]
                          [] in
                      let* α7 := M.read self in
                      let* α8 :=
                        M.call_closure α6 [ M.get_struct_record_field α7 "traits::Sheep" "name" ] in
                      let* α9 := M.alloc (Value.Array [ α8 ]) in
                      M.pure (M.pointer_coercion α9) in
                  let* α11 := M.call_closure α1 [ α5; α10 ] in
                  let* α12 := M.call_closure α0 [ α11 ] in
                  M.alloc α12 in
                M.alloc (Value.Tuple []) in
              let* _ :=
                let* α0 := M.read self in
                M.assign (M.get_struct_record_field α0 "traits::Sheep" "naked") (Value.Bool true) in
              M.alloc (Value.Tuple [])
          ] in
      M.read α1
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_shear : M.IsAssociatedFunction Self "shear" shear.
End Impl_traits_Sheep.
End Wrap_Impl_traits_Sheep_2.
Import Wrap_Impl_traits_Sheep_2.

(*
fn main() {
    // Type annotation is necessary in this case.
    let mut dolly: Sheep = Animal::new("Dolly");
    // TODO ^ Try removing the type annotations.

    dolly.talk();
    dolly.shear();
    dolly.talk();
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    let* dolly :=
      let* α0 := M.get_trait_method "traits::Animal" (Ty.path "traits::Sheep") [] [] "new" [] [] in
      let* α1 := M.read (mk_str "Dolly") in
      let* α2 := M.call_closure α0 [ α1 ] in
      M.alloc α2 in
    let* _ :=
      let* α0 := M.get_trait_method "traits::Animal" (Ty.path "traits::Sheep") [] [] "talk" [] [] in
      let* α1 := M.call_closure α0 [ dolly ] in
      M.alloc α1 in
    let* _ :=
      let* α0 := M.get_associated_function (Ty.path "traits::Sheep") "shear" [] [] in
      let* α1 := M.call_closure α0 [ dolly ] in
      M.alloc α1 in
    let* _ :=
      let* α0 := M.get_trait_method "traits::Animal" (Ty.path "traits::Sheep") [] [] "talk" [] [] in
      let* α1 := M.call_closure α0 [ dolly ] in
      M.alloc α1 in
    let* α0 := M.alloc (Value.Tuple []) in
    M.read α0
  | _, _ => M.impossible
  end.
