(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let some_vector = vec![1, 2, 3, 4];

    let pointer = some_vector.as_ptr();
    let length = some_vector.len();

    unsafe {
        let my_slice: &[u32] = slice::from_raw_parts(pointer, length);

        assert_eq!(some_vector.as_slice(), my_slice);
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let some_vector : M.Val (alloc.vec.Vec.t u32.t alloc.alloc.Global.t) :=
        M.alloc (|
          M.call (|((slice u32.t)::["into_vec"]
            (pointer_coercion
              "Unsize"
              (M.read (|
                M.call (|((alloc.boxed.Box.t _ alloc.boxed.Box.Default.A)::["new"]
                  (M.alloc (|
                    [
                      (Integer.of_Z 1) : u32.t;
                      (Integer.of_Z 2) : u32.t;
                      (Integer.of_Z 3) : u32.t;
                      (Integer.of_Z 4) : u32.t
                    ]
                  |)))
                |)
              |))))
          |)
        |) in
      let pointer : M.Val (ref u32.t) :=
        M.alloc (|
          M.call (|((alloc.vec.Vec.t u32.t alloc.alloc.Global.t)::["as_ptr"]
            (borrow some_vector))
          |)
        |) in
      let length : M.Val usize.t :=
        M.alloc (|
          M.call (|((alloc.vec.Vec.t u32.t alloc.alloc.Global.t)::["len"]
            (borrow some_vector))
          |)
        |) in
      let my_slice : M.Val (ref (slice u32.t)) :=
        M.alloc (|
          M.call (|(core.slice.raw.from_raw_parts
            (M.read (| pointer |))
            (M.read (| length |)))
          |)
        |) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            (M.alloc (|
              (borrow
                  (M.alloc (|
                    M.call (|((alloc.vec.Vec.t
                          u32.t
                          alloc.alloc.Global.t)::["as_slice"]
                      (borrow some_vector))
                    |)
                  |)),
                borrow my_slice)
            |))
            [
              fun
                  (γ :
                    M.Val
                      ((ref (ref (slice u32.t)))
                      *
                      (ref (ref (slice u32.t))))) =>
                match M.read (| γ |) with
                | (_, _) =>
                  let γ0_0 := Tuple.Access.left γ in
                  let γ0_1 := Tuple.Access.right γ in
                  let left_val := M.copy (| γ0_0 |) in
                  let right_val := M.copy (| γ0_1 |) in
                  if
                    M.read (|
                      use
                        (M.alloc (|
                          UnOp.not
                            (M.call (|(ltac:(M.get_method (fun ℐ =>
                                core.cmp.PartialEq.eq
                                  (Self := ref (slice u32.t))
                                  (Rhs := ref (slice u32.t))
                                  (Trait := ℐ)))
                              (M.read (| left_val |))
                              (M.read (| right_val |)))
                            |))
                        |))
                    |)
                  then
                    M.alloc (|
                      never_to_any (|
                        M.read (|
                          let kind : M.Val core.panicking.AssertKind.t :=
                            M.alloc (| core.panicking.AssertKind.Eq |) in
                          M.alloc (|
                            M.call (|(core.panicking.assert_failed
                              (M.read (| kind |))
                              (M.read (| left_val |))
                              (M.read (| right_val |))
                              core.option.Option.None)
                            |)
                          |)
                        |)
                      |)
                    |)
                  else
                    M.alloc (| tt |)
                end :
                M.Val unit
            ]) in
      M.alloc (| tt |)
    |)
  )).
