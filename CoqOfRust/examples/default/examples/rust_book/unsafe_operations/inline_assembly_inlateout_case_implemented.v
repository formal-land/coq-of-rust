(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    use std::arch::asm;

    let mut a: u64 = 4;
    let b: u64 = 4;
    unsafe {
        asm!("add {0}, {1}", inlateout(reg) a, in(reg) b);
    }
    assert_eq!(a, 8);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  ltac:(M.monadic (
    M.read (|
      let a : M.Val u64.t := M.alloc (| (Integer.of_Z 4) : u64.t |) in
      let b : M.Val u64.t := M.alloc (| (Integer.of_Z 4) : u64.t |) in
      let _ : M.Val unit :=
        let _ : M.Val unit := InlineAssembly in
        M.alloc (| tt |) in
      let _ : M.Val unit :=
        ltac:
          (M.monadic_match_operator
            (M.alloc (|
              (borrow a, borrow (M.alloc (| (Integer.of_Z 8) : u64.t |)))
            |))
            [
              fun (γ : M.Val ((ref u64.t) * (ref u64.t))) =>
                match M.read (| γ |) with
                | (_, _) =>
                  let γ0_0 := Tuple.Access.left γ in
                  let γ0_1 := Tuple.Access.right γ in
                  let left_val := M.copy (| γ0_0 |) in
                  let right_val := M.copy (| γ0_1 |) in
                  if
                    M.read (|
                      use
                        (M.alloc (|
                          UnOp.not
                            (BinOp.Pure.eq
                              (M.read (| deref (M.read (| left_val |)) |))
                              (M.read (| deref (M.read (| right_val |)) |)))
                        |))
                    |)
                  then
                    M.alloc (|
                      never_to_any (|
                        M.read (|
                          let kind : M.Val core.panicking.AssertKind.t :=
                            M.alloc (| core.panicking.AssertKind.Eq |) in
                          M.alloc (|
                            M.call (|(core.panicking.assert_failed
                              (M.read (| kind |))
                              (M.read (| left_val |))
                              (M.read (| right_val |))
                              core.option.Option.None)
                            |)
                          |)
                        |)
                      |)
                    |)
                  else
                    M.alloc (| tt |)
                end :
                M.Val unit
            ]) in
      M.alloc (| tt |)
    |)
  )).
