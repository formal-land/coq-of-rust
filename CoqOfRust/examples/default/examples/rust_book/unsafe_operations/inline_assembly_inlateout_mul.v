(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    use std::arch::asm;

    fn mul(a: u64, b: u64) -> u128 {
        let lo: u64;
        let hi: u64;

        unsafe {
            asm!(
                // The x86 mul instruction takes rax as an implicit input and writes
                // the 128-bit result of the multiplication to rax:rdx.
                "mul {}",
                in(reg) a,
                inlateout("rax") b => lo,
                lateout("rdx") hi
            );
        }

        ((hi as u128) << 64) + lo as u128
    }
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit := ltac:(M.monadic ( tt )).

(*
    fn mul(a: u64, b: u64) -> u128 {
        let lo: u64;
        let hi: u64;

        unsafe {
            asm!(
                // The x86 mul instruction takes rax as an implicit input and writes
                // the 128-bit result of the multiplication to rax:rdx.
                "mul {}",
                in(reg) a,
                inlateout("rax") b => lo,
                lateout("rdx") hi
            );
        }

        ((hi as u128) << 64) + lo as u128
    }
*)
Definition mul (a : u64.t) (b : u64.t) : M u128.t :=
  ltac:(M.monadic (
    let a := M.alloc (| a |) in
    let b := M.alloc (| b |) in
    M.read (|
      let lo : M.Val u64.t :=
        M.copy (| DeclaredButUndefinedVariable (A := u64.t) |) in
      let hi : M.Val u64.t :=
        M.copy (| DeclaredButUndefinedVariable (A := u64.t) |) in
      let _ : M.Val unit :=
        let _ : M.Val unit := InlineAssembly in
        M.alloc (| tt |) in
      M.alloc (|
        BinOp.Panic.add (|
          BinOp.Panic.shl (|
            rust_cast (M.read (| hi |)),
            (Integer.of_Z 64) : i32.t
          |),
          rust_cast (M.read (| lo |))
        |)
      |)
    |)
  )).
