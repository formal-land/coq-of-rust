(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    use std::arch::asm;

    fn load_fpu_control_word(control: u16) {
        unsafe {
            asm!("fldcw [{}]", in(reg) &control, options(nostack));
        }
    }
}
*)
Definition main (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [] => ltac:(M.monadic (Value.Tuple []))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_main :
  M.IsFunction.C "inline_assembly_memory_address_operands::main" main.
Admitted.
Global Typeclasses Opaque main.

Module main.
  (*
      fn load_fpu_control_word(control: u16) {
          unsafe {
              asm!("fldcw [{}]", in(reg) &control, options(nostack));
          }
      }
  *)
  Definition load_fpu_control_word (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ control ] =>
      ltac:(M.monadic
        (let control := M.alloc (| control |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] := InlineAssembly in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_load_fpu_control_word :
    M.IsFunction.C
      "inline_assembly_memory_address_operands::main::load_fpu_control_word"
      load_fpu_control_word.
  Admitted.
  Global Typeclasses Opaque load_fpu_control_word.
End main.
