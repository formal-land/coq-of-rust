(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    use std::arch::asm;

    extern "C" fn foo(arg: i32) -> i32 {
        println!("arg = {}", arg);
        arg * 2
    }

    fn call_foo(arg: i32) -> i32 {
        unsafe {
            let result;
            asm!(
                "call {}",
                // Function pointer to call
                in(reg) foo,
                // 1st argument in rdi
                in("rdi") arg,
                // Return value in rax
                out("rax") result,
                // Mark all registers which are not preserved by the "C" calling
                // convention as clobbered.
                clobber_abi("C"),
            );
            result
        }
    }
}
*)
Definition main (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with | [], [] => M.pure (Value.Tuple []) | _, _ => M.impossible end.

Module main.
  (*
      extern "C" fn foo(arg: i32) -> i32 {
          println!("arg = {}", arg);
          arg * 2
      }
  *)
  Definition foo (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ arg ] =>
      let* arg := M.alloc arg in
      let* _ :=
        let* _ :=
          let* α0 := M.get_function "std::io::stdio::_print" [] [] in
          let* α1 := M.get_associated_function (Ty.path "core::fmt::Arguments") "new_v1" [] [] in
          let* α5 :=
            (* Unsize *)
              let* α2 := M.read (mk_str "arg = ") in
              let* α3 := M.read (mk_str "
") in
              let* α4 := M.alloc (Value.Array [ α2; α3 ]) in
              M.pure (M.pointer_coercion α4) in
          let* α9 :=
            (* Unsize *)
              let* α6 :=
                M.get_associated_function
                  (Ty.path "core::fmt::rt::Argument")
                  "new_display"
                  [ Ty.path "i32" ]
                  [] in
              let* α7 := M.call_closure α6 [ arg ] in
              let* α8 := M.alloc (Value.Array [ α7 ]) in
              M.pure (M.pointer_coercion α8) in
          let* α10 := M.call_closure α1 [ α5; α9 ] in
          let* α11 := M.call_closure α0 [ α10 ] in
          M.alloc α11 in
        M.alloc (Value.Tuple []) in
      let* α0 := M.read arg in
      let* α1 := BinOp.Panic.mul α0 (Value.Integer Integer.I32 2) in
      let* α0 := M.alloc α1 in
      M.read α0
    | _, _ => M.impossible
    end.
  
  (*
      fn call_foo(arg: i32) -> i32 {
          unsafe {
              let result;
              asm!(
                  "call {}",
                  // Function pointer to call
                  in(reg) foo,
                  // 1st argument in rdi
                  in("rdi") arg,
                  // Return value in rax
                  out("rax") result,
                  // Mark all registers which are not preserved by the "C" calling
                  // convention as clobbered.
                  clobber_abi("C"),
              );
              result
          }
      }
  *)
  Definition call_foo (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ arg ] =>
      let* arg := M.alloc arg in
      let* result := M.copy Value.DeclaredButUndefined in
      let _ := InlineAssembly in
      M.read result
    | _, _ => M.impossible
    end.
End main.
