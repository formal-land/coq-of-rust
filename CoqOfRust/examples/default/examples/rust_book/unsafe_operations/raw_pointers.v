(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let raw_p: *const u32 = &10;

    unsafe {
        assert!( *raw_p == 10);
    }
}
*)
Definition main (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [] =>
    ltac:(M.monadic
      (M.read (|
        let~ raw_p : Ty.apply (Ty.path "*const") [] [ Ty.path "u32" ] :=
          M.borrow (|
            Pointer.Kind.ConstPointer,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.alloc (| Ty.path "u32", Value.Integer IntegerKind.U32 10 |)
              |)
            |)
          |) in
        let~ _ : Ty.tuple [] :=
          M.read (|
            M.match_operator (|
              Ty.tuple [],
              M.alloc (| Ty.tuple [], Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          Ty.path "bool",
                          UnOp.not (|
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.eq,
                              [
                                M.read (| M.deref (| M.read (| raw_p |) |) |);
                                Value.Integer IntegerKind.U32 10
                              ]
                            |)
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      Ty.tuple [],
                      M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::panicking::panic", [], [] |),
                          [ mk_str (| "assertion failed: *raw_p == 10" |) ]
                        |)
                      |)
                    |)));
                fun γ => ltac:(M.monadic (M.alloc (| Ty.tuple [], Value.Tuple [] |)))
              ]
            |)
          |) in
        M.alloc (| Ty.tuple [], Value.Tuple [] |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_main : M.IsFunction.C "raw_pointers::main" main.
Admitted.
Global Typeclasses Opaque main.
