(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn print_one<'a>(x: &'a i32) {
    println!("`print_one`: x is {}", x);
}
*)
Definition print_one (x : ref i32.t) : M unit :=
  let* x := M.alloc x in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "`print_one`: x is ") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
      let* α4 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α3) in
      let* α5 : core.fmt.rt.Argument.t :=
        M.call (impl core.fmt.rt.Argument.t "new_display" (borrow x)) in
      let* α6 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α5 ] in
      let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α6) in
      let* α8 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α7) in
      let* α9 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_v1" α4 α8) in
      let* α10 : unit := M.call (std.io.stdio._print α9) in
      M.alloc α10 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.

(*
fn add_one<'a>(x: &'a mut i32) {
    *x += 1;
}
*)
Definition add_one (x : mut_ref i32.t) : M unit :=
  let* x := M.alloc x in
  let* _ : M.Val unit :=
    let* β : M.Val i32.t :=
      let* α0 : mut_ref i32.t := M.read x in
      M.pure (deref α0) in
    let* α0 := M.read β in
    let* α1 := BinOp.Panic.add α0 ((Integer.of_Z 1) : i32.t) in
    assign β α1 in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.

(*
fn print_multi<'a, 'b>(x: &'a i32, y: &'b i32) {
    println!("`print_multi`: x is {}, y is {}", x, y);
}
*)
Definition print_multi (x : ref i32.t) (y : ref i32.t) : M unit :=
  let* x := M.alloc x in
  let* y := M.alloc y in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "`print_multi`: x is ") in
      let* α1 : ref str.t := M.read (mk_str ", y is ") in
      let* α2 : ref str.t := M.read (mk_str "
") in
      let* α3 : M.Val (array (ref str.t)) := M.alloc [ α0; α1; α2 ] in
      let* α4 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α3) in
      let* α5 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α4) in
      let* α6 : core.fmt.rt.Argument.t :=
        M.call (impl core.fmt.rt.Argument.t "new_display" (borrow x)) in
      let* α7 : core.fmt.rt.Argument.t :=
        M.call (impl core.fmt.rt.Argument.t "new_display" (borrow y)) in
      let* α8 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α6; α7 ] in
      let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α8) in
      let* α10 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α9) in
      let* α11 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_v1" α5 α10) in
      let* α12 : unit := M.call (std.io.stdio._print α11) in
      M.alloc α12 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.

(*
fn pass_x<'a, 'b>(x: &'a i32, _: &'b i32) -> &'a i32 {
    x
}
*)
Definition pass_x (x : ref i32.t) (arg : ref i32.t) : M (ref i32.t) :=
  let* x := M.alloc x in
  let* arg := M.alloc arg in
  M.read x.

(*
fn main() {
    let x = 7;
    let y = 9;

    print_one(&x);
    print_multi(&x, &y);

    let z = pass_x(&x, &y);
    print_one(z);

    let mut t = 3;
    add_one(&mut t);
    print_one(&t);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* x : M.Val i32.t := M.alloc ((Integer.of_Z 7) : i32.t) in
  let* y : M.Val i32.t := M.alloc ((Integer.of_Z 9) : i32.t) in
  let* _ : M.Val unit :=
    let* α0 : unit :=
      M.call (scoping_rules_lifetimes_functions.print_one (borrow x)) in
    M.alloc α0 in
  let* _ : M.Val unit :=
    let* α0 : unit :=
      M.call
        (scoping_rules_lifetimes_functions.print_multi (borrow x) (borrow y)) in
    M.alloc α0 in
  let* z : M.Val (ref i32.t) :=
    let* α0 : ref i32.t :=
      M.call (scoping_rules_lifetimes_functions.pass_x (borrow x) (borrow y)) in
    M.alloc α0 in
  let* _ : M.Val unit :=
    let* α0 : ref i32.t := M.read z in
    let* α1 : unit := M.call (scoping_rules_lifetimes_functions.print_one α0) in
    M.alloc α1 in
  let* t : M.Val i32.t := M.alloc ((Integer.of_Z 3) : i32.t) in
  let* _ : M.Val unit :=
    let* α0 : unit :=
      M.call (scoping_rules_lifetimes_functions.add_one (borrow_mut t)) in
    M.alloc α0 in
  let* _ : M.Val unit :=
    let* α0 : unit :=
      M.call (scoping_rules_lifetimes_functions.print_one (borrow t)) in
    M.alloc α0 in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
