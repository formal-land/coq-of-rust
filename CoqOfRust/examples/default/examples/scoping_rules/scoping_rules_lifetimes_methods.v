(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Owner.
Section Owner.
  Record t : Set := {
    x0 : i32.t;
  }.
  
  Definition Get_0 :=
    Ref.map (fun α => Some α.(x0)) (fun β α => Some (α <| x0 := β |>)).
End Owner.
End Owner.

Module  Impl_scoping_rules_lifetimes_methods_Owner_t.
Section Impl_scoping_rules_lifetimes_methods_Owner_t.
  Definition Self : Set := scoping_rules_lifetimes_methods.Owner.t.
  
  (*
      fn add_one<'a>(&'a mut self) {
          self.0 += 1;
      }
  *)
  Definition add_one (self : mut_ref Self) : M unit :=
    let* self := M.alloc self in
    let* _ : M.Val unit :=
      let* β : M.Val i32.t :=
        let* α0 : mut_ref scoping_rules_lifetimes_methods.Owner.t :=
          M.read self in
        M.pure (scoping_rules_lifetimes_methods.Owner.Get_0 (deref α0)) in
      let* α0 := M.read β in
      let* α1 := BinOp.Panic.add α0 ((Integer.of_Z 1) : i32.t) in
      assign β α1 in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Axiom add_one_is_impl : impl Self "add_one" = add_one.
  
  (*
      fn print<'a>(&'a self) {
          println!("`print`: {}", self.0);
      }
  *)
  Definition print (self : ref Self) : M unit :=
    let* self := M.alloc self in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : ref str.t := M.read (mk_str "`print`: ") in
        let* α1 : ref str.t := M.read (mk_str "
") in
        let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
        let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
        let* α4 : ref (slice (ref str.t)) :=
          M.read (pointer_coercion "Unsize" α3) in
        let* α5 : ref scoping_rules_lifetimes_methods.Owner.t := M.read self in
        let* α6 : core.fmt.rt.Argument.t :=
          M.call
            (impl core.fmt.rt.Argument.t "new_display"
              (borrow
                (scoping_rules_lifetimes_methods.Owner.Get_0 (deref α5)))) in
        let* α7 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α6 ] in
        let* α8 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
          M.alloc (borrow α7) in
        let* α9 : ref (slice core.fmt.rt.Argument.t) :=
          M.read (pointer_coercion "Unsize" α8) in
        let* α10 : core.fmt.Arguments.t :=
          M.call (impl core.fmt.Arguments.t "new_v1" α4 α9) in
        let* α11 : unit := M.call (std.io.stdio._print α10) in
        M.alloc α11 in
      M.alloc tt in
    let* α0 : M.Val unit := M.alloc tt in
    M.read α0.
  
  Axiom print_is_impl : impl Self "print" = print.
End Impl_scoping_rules_lifetimes_methods_Owner_t.
End Impl_scoping_rules_lifetimes_methods_Owner_t.

(*
fn main() {
    let mut owner = Owner(18);

    owner.add_one();
    owner.print();
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* owner : M.Val scoping_rules_lifetimes_methods.Owner.t :=
    M.alloc
      (scoping_rules_lifetimes_methods.Owner.Build_t
        ((Integer.of_Z 18) : i32.t)) in
  let* _ : M.Val unit :=
    let* α0 : unit :=
      M.call
        (impl scoping_rules_lifetimes_methods.Owner.t "add_one"
          (borrow_mut owner)) in
    M.alloc α0 in
  let* _ : M.Val unit :=
    let* α0 : unit :=
      M.call
        (impl scoping_rules_lifetimes_methods.Owner.t "print" (borrow owner)) in
    M.alloc α0 in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
