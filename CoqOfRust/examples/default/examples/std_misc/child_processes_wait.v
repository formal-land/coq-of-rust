(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn main() {
    let mut child = Command::new("sleep").arg("5").spawn().unwrap();
    let _result = child.wait().unwrap();

    println!("reached end of main");
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* child : M.Val std.process.Child.t :=
    let* α0 : ref str.t := M.read (mk_str "sleep") in
    let* α1 : std.process.Command.t :=
      M.call (impl std.process.Command.t "new" α0) in
    let* α2 : M.Val std.process.Command.t := M.alloc α1 in
    let* α3 : ref str.t := M.read (mk_str "5") in
    let* α4 : mut_ref std.process.Command.t :=
      M.call (impl std.process.Command.t "arg" (borrow_mut α2) α3) in
    let* α5 : core.result.Result.t std.process.Child.t std.io.error.Error.t :=
      M.call (impl std.process.Command.t "spawn" α4) in
    let* α6 : std.process.Child.t :=
      M.call
        (impl
            (core.result.Result.t std.process.Child.t std.io.error.Error.t)
            "unwrap"
          α5) in
    M.alloc α6 in
  let* _result : M.Val std.process.ExitStatus.t :=
    let* α0 :
        core.result.Result.t std.process.ExitStatus.t std.io.error.Error.t :=
      M.call (impl std.process.Child.t "wait" (borrow_mut child)) in
    let* α1 : std.process.ExitStatus.t :=
      M.call
        (impl
            (core.result.Result.t std.process.ExitStatus.t std.io.error.Error.t)
            "unwrap"
          α0) in
    M.alloc α1 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "reached end of main
") in
      let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
      let* α3 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α2) in
      let* α4 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_const" α3) in
      let* α5 : unit := M.call (std.io.stdio._print α4) in
      M.alloc α5 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
