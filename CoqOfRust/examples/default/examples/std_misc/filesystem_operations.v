(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn cat(path: &Path) -> io::Result<String> {
    let mut f = File::open(path)?;
    let mut s = String::new();
    match f.read_to_string(&mut s) {
        Ok(_) => Ok(s),
        Err(e) => Err(e),
    }
}
*)
Definition cat
    (path : ref std.path.Path.t)
    : M ltac:(std.io.error.Result alloc.string.String.t) :=
  let* path := M.alloc path in
  let return_ :=
    M.return_ (R := ltac:(std.io.error.Result alloc.string.String.t)) in
  M.catch_return
    (let* f : M.Val std.fs.File.t :=
      let* α0 : _ :=
        ltac:(M.get_method (fun ℐ =>
          core.ops.try_trait.Try.branch
            (Self := core.result.Result.t std.fs.File.t std.io.error.Error.t)
            (Trait := ℐ))) in
      let* α1 : ref std.path.Path.t := M.read path in
      let* α2 : core.result.Result.t std.fs.File.t std.io.error.Error.t :=
        M.call (impl std.fs.File.t "open" α1) in
      let* α3 :
          core.ops.control_flow.ControlFlow.t
            (core.result.Result.t
              core.convert.Infallible.t
              std.io.error.Error.t)
            std.fs.File.t :=
        M.call (α0 α2) in
      let* α4 :
          M.Val
            (core.ops.control_flow.ControlFlow.t
              (core.result.Result.t
                core.convert.Infallible.t
                std.io.error.Error.t)
              std.fs.File.t) :=
        M.alloc α3 in
      let* α5 : M.Val std.fs.File.t :=
        match_operator
          α4
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 : _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self :=
                        core.result.Result.t
                          alloc.string.String.t
                          std.io.error.Error.t)
                      (R :=
                        core.result.Result.t
                          core.convert.Infallible.t
                          std.io.error.Error.t)
                      (Trait := ℐ))) in
                let* α1 :
                    core.result.Result.t
                      core.convert.Infallible.t
                      std.io.error.Error.t :=
                  M.read residual in
                let* α2 :
                    core.result.Result.t
                      alloc.string.String.t
                      std.io.error.Error.t :=
                  M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : std.fs.File.t := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val std.fs.File.t);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val std.fs.File.t)
          ] in
      M.copy α5 in
    let* s : M.Val alloc.string.String.t :=
      let* α0 : alloc.string.String.t :=
        M.call (impl alloc.string.String.t "new") in
      M.alloc α0 in
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        std.io.Read.read_to_string (Self := std.fs.File.t) (Trait := ℐ))) in
    let* α1 : core.result.Result.t usize.t std.io.error.Error.t :=
      M.call (α0 (borrow_mut f) (borrow_mut s)) in
    let* α2 : M.Val (core.result.Result.t usize.t std.io.error.Error.t) :=
      M.alloc α1 in
    let* α0 :
        M.Val
          (core.result.Result.t alloc.string.String.t std.io.error.Error.t) :=
      match_operator
        α2
        [
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Ok _ =>
              let γ0_0 := core.result.Result.Get_Ok_0 γ in
              let* α0 : alloc.string.String.t := M.read s in
              M.alloc (core.result.Result.Ok α0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  alloc.string.String.t
                  std.io.error.Error.t));
          fun γ =>
            (let* α0 := M.read γ in
            match α0 with
            | core.result.Result.Err _ =>
              let γ0_0 := core.result.Result.Get_Err_0 γ in
              let* e := M.copy γ0_0 in
              let* α0 : std.io.error.Error.t := M.read e in
              M.alloc (core.result.Result.Err α0)
            | _ => M.break_match
            end) :
            M
              (M.Val
                (core.result.Result.t
                  alloc.string.String.t
                  std.io.error.Error.t))
        ] in
    M.read α0).

(*
fn echo(s: &str, path: &Path) -> io::Result<()> {
    let mut f = File::create(path)?;

    f.write_all(s.as_bytes())
}
*)
Definition echo
    (s : ref str.t)
    (path : ref std.path.Path.t)
    : M ltac:(std.io.error.Result unit) :=
  let* s := M.alloc s in
  let* path := M.alloc path in
  let return_ := M.return_ (R := ltac:(std.io.error.Result unit)) in
  M.catch_return
    (let* f : M.Val std.fs.File.t :=
      let* α0 : _ :=
        ltac:(M.get_method (fun ℐ =>
          core.ops.try_trait.Try.branch
            (Self := core.result.Result.t std.fs.File.t std.io.error.Error.t)
            (Trait := ℐ))) in
      let* α1 : ref std.path.Path.t := M.read path in
      let* α2 : core.result.Result.t std.fs.File.t std.io.error.Error.t :=
        M.call (impl std.fs.File.t "create" α1) in
      let* α3 :
          core.ops.control_flow.ControlFlow.t
            (core.result.Result.t
              core.convert.Infallible.t
              std.io.error.Error.t)
            std.fs.File.t :=
        M.call (α0 α2) in
      let* α4 :
          M.Val
            (core.ops.control_flow.ControlFlow.t
              (core.result.Result.t
                core.convert.Infallible.t
                std.io.error.Error.t)
              std.fs.File.t) :=
        M.alloc α3 in
      let* α5 : M.Val std.fs.File.t :=
        match_operator
          α4
          [
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Break _ =>
                let γ0_0 := core.ops.control_flow.ControlFlow.Get_Break_0 γ in
                let* residual := M.copy γ0_0 in
                let* α0 : _ :=
                  ltac:(M.get_method (fun ℐ =>
                    core.ops.try_trait.FromResidual.from_residual
                      (Self := core.result.Result.t unit std.io.error.Error.t)
                      (R :=
                        core.result.Result.t
                          core.convert.Infallible.t
                          std.io.error.Error.t)
                      (Trait := ℐ))) in
                let* α1 :
                    core.result.Result.t
                      core.convert.Infallible.t
                      std.io.error.Error.t :=
                  M.read residual in
                let* α2 : core.result.Result.t unit std.io.error.Error.t :=
                  M.call (α0 α1) in
                let* α3 : M.Val never.t := return_ α2 in
                let* α4 := M.read α3 in
                let* α5 : std.fs.File.t := never_to_any α4 in
                M.alloc α5
              | _ => M.break_match
              end) :
              M (M.Val std.fs.File.t);
            fun γ =>
              (let* α0 := M.read γ in
              match α0 with
              | core.ops.control_flow.ControlFlow.Continue _ =>
                let γ0_0 :=
                  core.ops.control_flow.ControlFlow.Get_Continue_0 γ in
                let* val := M.copy γ0_0 in
                M.pure val
              | _ => M.break_match
              end) :
              M (M.Val std.fs.File.t)
          ] in
      M.copy α5 in
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        std.io.Write.write_all (Self := std.fs.File.t) (Trait := ℐ))) in
    let* α1 : ref str.t := M.read s in
    let* α2 : ref (slice u8.t) := M.call (impl str.t "as_bytes" α1) in
    let* α3 : core.result.Result.t unit std.io.error.Error.t :=
      M.call (α0 (borrow_mut f) α2) in
    let* α0 : M.Val (core.result.Result.t unit std.io.error.Error.t) :=
      M.alloc α3 in
    M.read α0).

(*
fn touch(path: &Path) -> io::Result<()> {
    match OpenOptions::new().create(true).write(true).open(path) {
        Ok(_) => Ok(()),
        Err(e) => Err(e),
    }
}
*)
Definition touch
    (path : ref std.path.Path.t)
    : M ltac:(std.io.error.Result unit) :=
  let* path := M.alloc path in
  let* α0 : std.fs.OpenOptions.t := M.call (impl std.fs.OpenOptions.t "new") in
  let* α1 : M.Val std.fs.OpenOptions.t := M.alloc α0 in
  let* α2 : mut_ref std.fs.OpenOptions.t :=
    M.call (impl std.fs.OpenOptions.t "create" (borrow_mut α1) true) in
  let* α3 : mut_ref std.fs.OpenOptions.t :=
    M.call (impl std.fs.OpenOptions.t "write" α2 true) in
  let* α4 : ref std.path.Path.t := M.read path in
  let* α5 : core.result.Result.t std.fs.File.t std.io.error.Error.t :=
    M.call (impl std.fs.OpenOptions.t "open" (borrow (deref α3)) α4) in
  let* α6 : M.Val (core.result.Result.t std.fs.File.t std.io.error.Error.t) :=
    M.alloc α5 in
  let* α7 : M.Val (core.result.Result.t unit std.io.error.Error.t) :=
    match_operator
      α6
      [
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | core.result.Result.Ok _ =>
            let γ0_0 := core.result.Result.Get_Ok_0 γ in
            M.alloc (core.result.Result.Ok tt)
          | _ => M.break_match
          end) :
          M (M.Val (core.result.Result.t unit std.io.error.Error.t));
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | core.result.Result.Err _ =>
            let γ0_0 := core.result.Result.Get_Err_0 γ in
            let* e := M.copy γ0_0 in
            let* α0 : std.io.error.Error.t := M.read e in
            M.alloc (core.result.Result.Err α0)
          | _ => M.break_match
          end) :
          M (M.Val (core.result.Result.t unit std.io.error.Error.t))
      ] in
  M.read α7.

(*
fn main() {
    println!("`mkdir a`");
    // Create a directory, returns `io::Result<()>`
    match fs::create_dir("a") {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(_) => {}
    }

    println!("`echo hello > a/b.txt`");
    // The previous match can be simplified using the `unwrap_or_else` method
    echo("hello", &Path::new("a/b.txt")).unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`mkdir -p a/c/d`");
    // Recursively create a directory, returns `io::Result<()>`
    fs::create_dir_all("a/c/d").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`touch a/c/e.txt`");
    touch(&Path::new("a/c/e.txt")).unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`ln -s ../b.txt a/c/b.txt`");
    // Create a symbolic link, returns `io::Result<()>`
    if cfg!(target_family = "unix") {
        unix::fs::symlink("../b.txt", "a/c/b.txt").unwrap_or_else(|why| {
            println!("! {:?}", why.kind());
        });
    }

    println!("`cat a/c/b.txt`");
    match cat(&Path::new("a/c/b.txt")) {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(s) => println!("> {}", s),
    }

    println!("`ls a`");
    // Read the contents of a directory, returns `io::Result<Vec<Path>>`
    match fs::read_dir("a") {
        Err(why) => println!("! {:?}", why.kind()),
        Ok(paths) => {
            for path in paths {
                println!("> {:?}", path.unwrap().path());
            }
        }
    }

    println!("`rm a/c/e.txt`");
    // Remove a file, returns `io::Result<()>`
    fs::remove_file("a/c/e.txt").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });

    println!("`rmdir a/c/d`");
    // Remove an empty directory, returns `io::Result<()>`
    fs::remove_dir("a/c/d").unwrap_or_else(|why| {
        println!("! {:?}", why.kind());
    });
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "`mkdir a`
") in
      let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
      let* α3 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α2) in
      let* α4 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_const" α3) in
      let* α5 : unit := M.call (std.io.stdio._print α4) in
      M.alloc α5 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* α0 : ref str.t := M.read (mk_str "a") in
    let* α1 : core.result.Result.t unit std.io.error.Error.t :=
      M.call (std.fs.create_dir α0) in
    let* α2 : M.Val (core.result.Result.t unit std.io.error.Error.t) :=
      M.alloc α1 in
    match_operator
      α2
      [
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | core.result.Result.Err _ =>
            let γ0_0 := core.result.Result.Get_Err_0 γ in
            let* why := M.copy γ0_0 in
            let* _ : M.Val unit :=
              let* α0 : ref str.t := M.read (mk_str "! ") in
              let* α1 : ref str.t := M.read (mk_str "
") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
              let* α3 : M.Val (ref (array (ref str.t))) :=
                M.alloc (borrow α2) in
              let* α4 : ref (slice (ref str.t)) :=
                M.read (pointer_coercion "Unsize" α3) in
              let* α5 : std.io.error.ErrorKind.t :=
                M.call (impl std.io.error.Error.t "kind" (borrow why)) in
              let* α6 : M.Val std.io.error.ErrorKind.t := M.alloc α5 in
              let* α7 : core.fmt.rt.Argument.t :=
                M.call (impl core.fmt.rt.Argument.t "new_debug" (borrow α6)) in
              let* α8 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α7 ] in
              let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                M.alloc (borrow α8) in
              let* α10 : ref (slice core.fmt.rt.Argument.t) :=
                M.read (pointer_coercion "Unsize" α9) in
              let* α11 : core.fmt.Arguments.t :=
                M.call (impl core.fmt.Arguments.t "new_v1" α4 α10) in
              let* α12 : unit := M.call (std.io.stdio._print α11) in
              M.alloc α12 in
            M.alloc tt
          | _ => M.break_match
          end) :
          M (M.Val unit);
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | core.result.Result.Ok _ =>
            let γ0_0 := core.result.Result.Get_Ok_0 γ in
            M.alloc tt
          | _ => M.break_match
          end) :
          M (M.Val unit)
      ] in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "`echo hello > a/b.txt`
") in
      let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
      let* α3 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α2) in
      let* α4 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_const" α3) in
      let* α5 : unit := M.call (std.io.stdio._print α4) in
      M.alloc α5 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* α0 : ref str.t := M.read (mk_str "hello") in
    let* α1 : ref str.t := M.read (mk_str "a/b.txt") in
    let* α2 : ref std.path.Path.t := M.call (impl std.path.Path.t "new" α1) in
    let* α3 : core.result.Result.t unit std.io.error.Error.t :=
      M.call (filesystem_operations.echo α0 α2) in
    let* α4 : unit :=
      M.call
        (impl (core.result.Result.t unit std.io.error.Error.t) "unwrap_or_else"
          α3
          (fun (α0 : std.io.error.Error.t) =>
            (let* α0 := M.alloc α0 in
            match_operator
              α0
              [
                fun γ =>
                  (let* why := M.copy γ in
                  let* _ : M.Val unit :=
                    let* _ : M.Val unit :=
                      let* α0 : ref str.t := M.read (mk_str "! ") in
                      let* α1 : ref str.t := M.read (mk_str "
") in
                      let* α2 : M.Val (array (ref str.t)) :=
                        M.alloc [ α0; α1 ] in
                      let* α3 : M.Val (ref (array (ref str.t))) :=
                        M.alloc (borrow α2) in
                      let* α4 : ref (slice (ref str.t)) :=
                        M.read (pointer_coercion "Unsize" α3) in
                      let* α5 : std.io.error.ErrorKind.t :=
                        M.call
                          (impl std.io.error.Error.t "kind" (borrow why)) in
                      let* α6 : M.Val std.io.error.ErrorKind.t := M.alloc α5 in
                      let* α7 : core.fmt.rt.Argument.t :=
                        M.call
                          (impl core.fmt.rt.Argument.t "new_debug"
                            (borrow α6)) in
                      let* α8 : M.Val (array core.fmt.rt.Argument.t) :=
                        M.alloc [ α7 ] in
                      let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                        M.alloc (borrow α8) in
                      let* α10 : ref (slice core.fmt.rt.Argument.t) :=
                        M.read (pointer_coercion "Unsize" α9) in
                      let* α11 : core.fmt.Arguments.t :=
                        M.call (impl core.fmt.Arguments.t "new_v1" α4 α10) in
                      let* α12 : unit := M.call (std.io.stdio._print α11) in
                      M.alloc α12 in
                    M.alloc tt in
                  let* α0 : M.Val unit := M.alloc tt in
                  M.read α0) :
                  M unit
              ]) :
            M unit)) in
    M.alloc α4 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "`mkdir -p a/c/d`
") in
      let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
      let* α3 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α2) in
      let* α4 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_const" α3) in
      let* α5 : unit := M.call (std.io.stdio._print α4) in
      M.alloc α5 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* α0 : ref str.t := M.read (mk_str "a/c/d") in
    let* α1 : core.result.Result.t unit std.io.error.Error.t :=
      M.call (std.fs.create_dir_all α0) in
    let* α2 : unit :=
      M.call
        (impl (core.result.Result.t unit std.io.error.Error.t) "unwrap_or_else"
          α1
          (fun (α0 : std.io.error.Error.t) =>
            (let* α0 := M.alloc α0 in
            match_operator
              α0
              [
                fun γ =>
                  (let* why := M.copy γ in
                  let* _ : M.Val unit :=
                    let* _ : M.Val unit :=
                      let* α0 : ref str.t := M.read (mk_str "! ") in
                      let* α1 : ref str.t := M.read (mk_str "
") in
                      let* α2 : M.Val (array (ref str.t)) :=
                        M.alloc [ α0; α1 ] in
                      let* α3 : M.Val (ref (array (ref str.t))) :=
                        M.alloc (borrow α2) in
                      let* α4 : ref (slice (ref str.t)) :=
                        M.read (pointer_coercion "Unsize" α3) in
                      let* α5 : std.io.error.ErrorKind.t :=
                        M.call
                          (impl std.io.error.Error.t "kind" (borrow why)) in
                      let* α6 : M.Val std.io.error.ErrorKind.t := M.alloc α5 in
                      let* α7 : core.fmt.rt.Argument.t :=
                        M.call
                          (impl core.fmt.rt.Argument.t "new_debug"
                            (borrow α6)) in
                      let* α8 : M.Val (array core.fmt.rt.Argument.t) :=
                        M.alloc [ α7 ] in
                      let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                        M.alloc (borrow α8) in
                      let* α10 : ref (slice core.fmt.rt.Argument.t) :=
                        M.read (pointer_coercion "Unsize" α9) in
                      let* α11 : core.fmt.Arguments.t :=
                        M.call (impl core.fmt.Arguments.t "new_v1" α4 α10) in
                      let* α12 : unit := M.call (std.io.stdio._print α11) in
                      M.alloc α12 in
                    M.alloc tt in
                  let* α0 : M.Val unit := M.alloc tt in
                  M.read α0) :
                  M unit
              ]) :
            M unit)) in
    M.alloc α2 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "`touch a/c/e.txt`
") in
      let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
      let* α3 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α2) in
      let* α4 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_const" α3) in
      let* α5 : unit := M.call (std.io.stdio._print α4) in
      M.alloc α5 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* α0 : ref str.t := M.read (mk_str "a/c/e.txt") in
    let* α1 : ref std.path.Path.t := M.call (impl std.path.Path.t "new" α0) in
    let* α2 : core.result.Result.t unit std.io.error.Error.t :=
      M.call (filesystem_operations.touch α1) in
    let* α3 : unit :=
      M.call
        (impl (core.result.Result.t unit std.io.error.Error.t) "unwrap_or_else"
          α2
          (fun (α0 : std.io.error.Error.t) =>
            (let* α0 := M.alloc α0 in
            match_operator
              α0
              [
                fun γ =>
                  (let* why := M.copy γ in
                  let* _ : M.Val unit :=
                    let* _ : M.Val unit :=
                      let* α0 : ref str.t := M.read (mk_str "! ") in
                      let* α1 : ref str.t := M.read (mk_str "
") in
                      let* α2 : M.Val (array (ref str.t)) :=
                        M.alloc [ α0; α1 ] in
                      let* α3 : M.Val (ref (array (ref str.t))) :=
                        M.alloc (borrow α2) in
                      let* α4 : ref (slice (ref str.t)) :=
                        M.read (pointer_coercion "Unsize" α3) in
                      let* α5 : std.io.error.ErrorKind.t :=
                        M.call
                          (impl std.io.error.Error.t "kind" (borrow why)) in
                      let* α6 : M.Val std.io.error.ErrorKind.t := M.alloc α5 in
                      let* α7 : core.fmt.rt.Argument.t :=
                        M.call
                          (impl core.fmt.rt.Argument.t "new_debug"
                            (borrow α6)) in
                      let* α8 : M.Val (array core.fmt.rt.Argument.t) :=
                        M.alloc [ α7 ] in
                      let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                        M.alloc (borrow α8) in
                      let* α10 : ref (slice core.fmt.rt.Argument.t) :=
                        M.read (pointer_coercion "Unsize" α9) in
                      let* α11 : core.fmt.Arguments.t :=
                        M.call (impl core.fmt.Arguments.t "new_v1" α4 α10) in
                      let* α12 : unit := M.call (std.io.stdio._print α11) in
                      M.alloc α12 in
                    M.alloc tt in
                  let* α0 : M.Val unit := M.alloc tt in
                  M.read α0) :
                  M unit
              ]) :
            M unit)) in
    M.alloc α3 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "`ln -s ../b.txt a/c/b.txt`
") in
      let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
      let* α3 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α2) in
      let* α4 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_const" α3) in
      let* α5 : unit := M.call (std.io.stdio._print α4) in
      M.alloc α5 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* α0 : M.Val bool.t := M.alloc true in
    let* α1 : bool.t := M.read (use α0) in
    if α1 then
      let* _ : M.Val unit :=
        let* α0 : ref str.t := M.read (mk_str "../b.txt") in
        let* α1 : ref str.t := M.read (mk_str "a/c/b.txt") in
        let* α2 : core.result.Result.t unit std.io.error.Error.t :=
          M.call (std.os.unix.fs.symlink α0 α1) in
        let* α3 : unit :=
          M.call
            (impl
                (core.result.Result.t unit std.io.error.Error.t)
                "unwrap_or_else"
              α2
              (fun (α0 : std.io.error.Error.t) =>
                (let* α0 := M.alloc α0 in
                match_operator
                  α0
                  [
                    fun γ =>
                      (let* why := M.copy γ in
                      let* _ : M.Val unit :=
                        let* _ : M.Val unit :=
                          let* α0 : ref str.t := M.read (mk_str "! ") in
                          let* α1 : ref str.t := M.read (mk_str "
") in
                          let* α2 : M.Val (array (ref str.t)) :=
                            M.alloc [ α0; α1 ] in
                          let* α3 : M.Val (ref (array (ref str.t))) :=
                            M.alloc (borrow α2) in
                          let* α4 : ref (slice (ref str.t)) :=
                            M.read (pointer_coercion "Unsize" α3) in
                          let* α5 : std.io.error.ErrorKind.t :=
                            M.call
                              (impl std.io.error.Error.t "kind" (borrow why)) in
                          let* α6 : M.Val std.io.error.ErrorKind.t :=
                            M.alloc α5 in
                          let* α7 : core.fmt.rt.Argument.t :=
                            M.call
                              (impl core.fmt.rt.Argument.t "new_debug"
                                (borrow α6)) in
                          let* α8 : M.Val (array core.fmt.rt.Argument.t) :=
                            M.alloc [ α7 ] in
                          let* α9 :
                              M.Val (ref (array core.fmt.rt.Argument.t)) :=
                            M.alloc (borrow α8) in
                          let* α10 : ref (slice core.fmt.rt.Argument.t) :=
                            M.read (pointer_coercion "Unsize" α9) in
                          let* α11 : core.fmt.Arguments.t :=
                            M.call
                              (impl core.fmt.Arguments.t "new_v1" α4 α10) in
                          let* α12 : unit := M.call (std.io.stdio._print α11) in
                          M.alloc α12 in
                        M.alloc tt in
                      let* α0 : M.Val unit := M.alloc tt in
                      M.read α0) :
                      M unit
                  ]) :
                M unit)) in
        M.alloc α3 in
      M.alloc tt
    else
      M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "`cat a/c/b.txt`
") in
      let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
      let* α3 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α2) in
      let* α4 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_const" α3) in
      let* α5 : unit := M.call (std.io.stdio._print α4) in
      M.alloc α5 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* α0 : ref str.t := M.read (mk_str "a/c/b.txt") in
    let* α1 : ref std.path.Path.t := M.call (impl std.path.Path.t "new" α0) in
    let* α2 : core.result.Result.t alloc.string.String.t std.io.error.Error.t :=
      M.call (filesystem_operations.cat α1) in
    let* α3 :
        M.Val
          (core.result.Result.t alloc.string.String.t std.io.error.Error.t) :=
      M.alloc α2 in
    match_operator
      α3
      [
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | core.result.Result.Err _ =>
            let γ0_0 := core.result.Result.Get_Err_0 γ in
            let* why := M.copy γ0_0 in
            let* _ : M.Val unit :=
              let* α0 : ref str.t := M.read (mk_str "! ") in
              let* α1 : ref str.t := M.read (mk_str "
") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
              let* α3 : M.Val (ref (array (ref str.t))) :=
                M.alloc (borrow α2) in
              let* α4 : ref (slice (ref str.t)) :=
                M.read (pointer_coercion "Unsize" α3) in
              let* α5 : std.io.error.ErrorKind.t :=
                M.call (impl std.io.error.Error.t "kind" (borrow why)) in
              let* α6 : M.Val std.io.error.ErrorKind.t := M.alloc α5 in
              let* α7 : core.fmt.rt.Argument.t :=
                M.call (impl core.fmt.rt.Argument.t "new_debug" (borrow α6)) in
              let* α8 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α7 ] in
              let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                M.alloc (borrow α8) in
              let* α10 : ref (slice core.fmt.rt.Argument.t) :=
                M.read (pointer_coercion "Unsize" α9) in
              let* α11 : core.fmt.Arguments.t :=
                M.call (impl core.fmt.Arguments.t "new_v1" α4 α10) in
              let* α12 : unit := M.call (std.io.stdio._print α11) in
              M.alloc α12 in
            M.alloc tt
          | _ => M.break_match
          end) :
          M (M.Val unit);
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | core.result.Result.Ok _ =>
            let γ0_0 := core.result.Result.Get_Ok_0 γ in
            let* s := M.copy γ0_0 in
            let* _ : M.Val unit :=
              let* α0 : ref str.t := M.read (mk_str "> ") in
              let* α1 : ref str.t := M.read (mk_str "
") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
              let* α3 : M.Val (ref (array (ref str.t))) :=
                M.alloc (borrow α2) in
              let* α4 : ref (slice (ref str.t)) :=
                M.read (pointer_coercion "Unsize" α3) in
              let* α5 : core.fmt.rt.Argument.t :=
                M.call (impl core.fmt.rt.Argument.t "new_display" (borrow s)) in
              let* α6 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α5 ] in
              let* α7 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                M.alloc (borrow α6) in
              let* α8 : ref (slice core.fmt.rt.Argument.t) :=
                M.read (pointer_coercion "Unsize" α7) in
              let* α9 : core.fmt.Arguments.t :=
                M.call (impl core.fmt.Arguments.t "new_v1" α4 α8) in
              let* α10 : unit := M.call (std.io.stdio._print α9) in
              M.alloc α10 in
            M.alloc tt
          | _ => M.break_match
          end) :
          M (M.Val unit)
      ] in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "`ls a`
") in
      let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
      let* α3 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α2) in
      let* α4 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_const" α3) in
      let* α5 : unit := M.call (std.io.stdio._print α4) in
      M.alloc α5 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* α0 : ref str.t := M.read (mk_str "a") in
    let* α1 : core.result.Result.t std.fs.ReadDir.t std.io.error.Error.t :=
      M.call (std.fs.read_dir α0) in
    let* α2 :
        M.Val (core.result.Result.t std.fs.ReadDir.t std.io.error.Error.t) :=
      M.alloc α1 in
    match_operator
      α2
      [
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | core.result.Result.Err _ =>
            let γ0_0 := core.result.Result.Get_Err_0 γ in
            let* why := M.copy γ0_0 in
            let* _ : M.Val unit :=
              let* α0 : ref str.t := M.read (mk_str "! ") in
              let* α1 : ref str.t := M.read (mk_str "
") in
              let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
              let* α3 : M.Val (ref (array (ref str.t))) :=
                M.alloc (borrow α2) in
              let* α4 : ref (slice (ref str.t)) :=
                M.read (pointer_coercion "Unsize" α3) in
              let* α5 : std.io.error.ErrorKind.t :=
                M.call (impl std.io.error.Error.t "kind" (borrow why)) in
              let* α6 : M.Val std.io.error.ErrorKind.t := M.alloc α5 in
              let* α7 : core.fmt.rt.Argument.t :=
                M.call (impl core.fmt.rt.Argument.t "new_debug" (borrow α6)) in
              let* α8 : M.Val (array core.fmt.rt.Argument.t) :=
                M.alloc [ α7 ] in
              let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                M.alloc (borrow α8) in
              let* α10 : ref (slice core.fmt.rt.Argument.t) :=
                M.read (pointer_coercion "Unsize" α9) in
              let* α11 : core.fmt.Arguments.t :=
                M.call (impl core.fmt.Arguments.t "new_v1" α4 α10) in
              let* α12 : unit := M.call (std.io.stdio._print α11) in
              M.alloc α12 in
            M.alloc tt
          | _ => M.break_match
          end) :
          M (M.Val unit);
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | core.result.Result.Ok _ =>
            let γ0_0 := core.result.Result.Get_Ok_0 γ in
            let* paths := M.copy γ0_0 in
            let* α0 : _ :=
              ltac:(M.get_method (fun ℐ =>
                core.iter.traits.collect.IntoIterator.into_iter
                  (Self := std.fs.ReadDir.t)
                  (Trait := ℐ))) in
            let* α1 : std.fs.ReadDir.t := M.read paths in
            let* α2 : std.fs.ReadDir.t := M.call (α0 α1) in
            let* α3 : M.Val std.fs.ReadDir.t := M.alloc α2 in
            let* α4 : M.Val unit :=
              match_operator
                α3
                [
                  fun γ =>
                    (let* iter := M.copy γ in
                    M.loop
                      (let* _ : M.Val unit :=
                        let* α0 : _ :=
                          ltac:(M.get_method (fun ℐ =>
                            core.iter.traits.iterator.Iterator.next
                              (Self := std.fs.ReadDir.t)
                              (Trait := ℐ))) in
                        let* α1 :
                            core.option.Option.t
                              (core.result.Result.t
                                std.fs.DirEntry.t
                                std.io.error.Error.t) :=
                          M.call (α0 (borrow_mut iter)) in
                        let* α2 :
                            M.Val
                              (core.option.Option.t
                                (core.result.Result.t
                                  std.fs.DirEntry.t
                                  std.io.error.Error.t)) :=
                          M.alloc α1 in
                        match_operator
                          α2
                          [
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | core.option.Option.None =>
                                let* α0 : M.Val never.t := M.break in
                                let* α1 := M.read α0 in
                                let* α2 : unit := never_to_any α1 in
                                M.alloc α2
                              | _ => M.break_match
                              end) :
                              M (M.Val unit);
                            fun γ =>
                              (let* α0 := M.read γ in
                              match α0 with
                              | core.option.Option.Some _ =>
                                let γ0_0 := core.option.Option.Get_Some_0 γ in
                                let* path := M.copy γ0_0 in
                                let* _ : M.Val unit :=
                                  let* _ : M.Val unit :=
                                    let* α0 : ref str.t :=
                                      M.read (mk_str "> ") in
                                    let* α1 : ref str.t :=
                                      M.read (mk_str "
") in
                                    let* α2 : M.Val (array (ref str.t)) :=
                                      M.alloc [ α0; α1 ] in
                                    let* α3 : M.Val (ref (array (ref str.t))) :=
                                      M.alloc (borrow α2) in
                                    let* α4 : ref (slice (ref str.t)) :=
                                      M.read (pointer_coercion "Unsize" α3) in
                                    let* α5 :
                                        core.result.Result.t
                                          std.fs.DirEntry.t
                                          std.io.error.Error.t :=
                                      M.read path in
                                    let* α6 : std.fs.DirEntry.t :=
                                      M.call
                                        (impl
                                            (core.result.Result.t
                                              std.fs.DirEntry.t
                                              std.io.error.Error.t)
                                            "unwrap"
                                          α5) in
                                    let* α7 : M.Val std.fs.DirEntry.t :=
                                      M.alloc α6 in
                                    let* α8 : std.path.PathBuf.t :=
                                      M.call
                                        (impl std.fs.DirEntry.t "path"
                                          (borrow α7)) in
                                    let* α9 : M.Val std.path.PathBuf.t :=
                                      M.alloc α8 in
                                    let* α10 : core.fmt.rt.Argument.t :=
                                      M.call
                                        (impl core.fmt.rt.Argument.t "new_debug"
                                          (borrow α9)) in
                                    let* α11 :
                                        M.Val (array core.fmt.rt.Argument.t) :=
                                      M.alloc [ α10 ] in
                                    let* α12 :
                                        M.Val
                                          (ref
                                            (array core.fmt.rt.Argument.t)) :=
                                      M.alloc (borrow α11) in
                                    let* α13 :
                                        ref (slice core.fmt.rt.Argument.t) :=
                                      M.read (pointer_coercion "Unsize" α12) in
                                    let* α14 : core.fmt.Arguments.t :=
                                      M.call
                                        (impl core.fmt.Arguments.t "new_v1"
                                          α4
                                          α13) in
                                    let* α15 : unit :=
                                      M.call (std.io.stdio._print α14) in
                                    M.alloc α15 in
                                  M.alloc tt in
                                M.alloc tt
                              | _ => M.break_match
                              end) :
                              M (M.Val unit)
                          ] in
                      M.alloc tt)) :
                    M (M.Val unit)
                ] in
            M.pure (use α4)
          | _ => M.break_match
          end) :
          M (M.Val unit)
      ] in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "`rm a/c/e.txt`
") in
      let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
      let* α3 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α2) in
      let* α4 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_const" α3) in
      let* α5 : unit := M.call (std.io.stdio._print α4) in
      M.alloc α5 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* α0 : ref str.t := M.read (mk_str "a/c/e.txt") in
    let* α1 : core.result.Result.t unit std.io.error.Error.t :=
      M.call (std.fs.remove_file α0) in
    let* α2 : unit :=
      M.call
        (impl (core.result.Result.t unit std.io.error.Error.t) "unwrap_or_else"
          α1
          (fun (α0 : std.io.error.Error.t) =>
            (let* α0 := M.alloc α0 in
            match_operator
              α0
              [
                fun γ =>
                  (let* why := M.copy γ in
                  let* _ : M.Val unit :=
                    let* _ : M.Val unit :=
                      let* α0 : ref str.t := M.read (mk_str "! ") in
                      let* α1 : ref str.t := M.read (mk_str "
") in
                      let* α2 : M.Val (array (ref str.t)) :=
                        M.alloc [ α0; α1 ] in
                      let* α3 : M.Val (ref (array (ref str.t))) :=
                        M.alloc (borrow α2) in
                      let* α4 : ref (slice (ref str.t)) :=
                        M.read (pointer_coercion "Unsize" α3) in
                      let* α5 : std.io.error.ErrorKind.t :=
                        M.call
                          (impl std.io.error.Error.t "kind" (borrow why)) in
                      let* α6 : M.Val std.io.error.ErrorKind.t := M.alloc α5 in
                      let* α7 : core.fmt.rt.Argument.t :=
                        M.call
                          (impl core.fmt.rt.Argument.t "new_debug"
                            (borrow α6)) in
                      let* α8 : M.Val (array core.fmt.rt.Argument.t) :=
                        M.alloc [ α7 ] in
                      let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                        M.alloc (borrow α8) in
                      let* α10 : ref (slice core.fmt.rt.Argument.t) :=
                        M.read (pointer_coercion "Unsize" α9) in
                      let* α11 : core.fmt.Arguments.t :=
                        M.call (impl core.fmt.Arguments.t "new_v1" α4 α10) in
                      let* α12 : unit := M.call (std.io.stdio._print α11) in
                      M.alloc α12 in
                    M.alloc tt in
                  let* α0 : M.Val unit := M.alloc tt in
                  M.read α0) :
                  M unit
              ]) :
            M unit)) in
    M.alloc α2 in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "`rmdir a/c/d`
") in
      let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
      let* α3 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α2) in
      let* α4 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_const" α3) in
      let* α5 : unit := M.call (std.io.stdio._print α4) in
      M.alloc α5 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* α0 : ref str.t := M.read (mk_str "a/c/d") in
    let* α1 : core.result.Result.t unit std.io.error.Error.t :=
      M.call (std.fs.remove_dir α0) in
    let* α2 : unit :=
      M.call
        (impl (core.result.Result.t unit std.io.error.Error.t) "unwrap_or_else"
          α1
          (fun (α0 : std.io.error.Error.t) =>
            (let* α0 := M.alloc α0 in
            match_operator
              α0
              [
                fun γ =>
                  (let* why := M.copy γ in
                  let* _ : M.Val unit :=
                    let* _ : M.Val unit :=
                      let* α0 : ref str.t := M.read (mk_str "! ") in
                      let* α1 : ref str.t := M.read (mk_str "
") in
                      let* α2 : M.Val (array (ref str.t)) :=
                        M.alloc [ α0; α1 ] in
                      let* α3 : M.Val (ref (array (ref str.t))) :=
                        M.alloc (borrow α2) in
                      let* α4 : ref (slice (ref str.t)) :=
                        M.read (pointer_coercion "Unsize" α3) in
                      let* α5 : std.io.error.ErrorKind.t :=
                        M.call
                          (impl std.io.error.Error.t "kind" (borrow why)) in
                      let* α6 : M.Val std.io.error.ErrorKind.t := M.alloc α5 in
                      let* α7 : core.fmt.rt.Argument.t :=
                        M.call
                          (impl core.fmt.rt.Argument.t "new_debug"
                            (borrow α6)) in
                      let* α8 : M.Val (array core.fmt.rt.Argument.t) :=
                        M.alloc [ α7 ] in
                      let* α9 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
                        M.alloc (borrow α8) in
                      let* α10 : ref (slice core.fmt.rt.Argument.t) :=
                        M.read (pointer_coercion "Unsize" α9) in
                      let* α11 : core.fmt.Arguments.t :=
                        M.call (impl core.fmt.Arguments.t "new_v1" α4 α10) in
                      let* α12 : unit := M.call (std.io.stdio._print α11) in
                      M.alloc α12 in
                    M.alloc tt in
                  let* α0 : M.Val unit := M.alloc tt in
                  M.read α0) :
                  M unit
              ]) :
            M unit)) in
    M.alloc α2 in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
