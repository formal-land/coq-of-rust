(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  UsernameWidget.
Section UsernameWidget.
  Class Trait (Self : Set) : Type := {
    get : (ref Self) -> M alloc.string.String.t;
  }.
  
End UsernameWidget.
End UsernameWidget.

Module  AgeWidget.
Section AgeWidget.
  Class Trait (Self : Set) : Type := {
    get : (ref Self) -> M u8.t;
  }.
  
End AgeWidget.
End AgeWidget.

Module  Form.
Section Form.
  Record t : Set := {
    username : alloc.string.String.t;
    age : u8.t;
  }.
  
  Definition Get_username :=
    Ref.map
      (fun α => Some α.(username))
      (fun β α => Some (α <| username := β |>)).
  Definition Get_age :=
    Ref.map (fun α => Some α.(age)) (fun β α => Some (α <| age := β |>)).
End Form.
End Form.

Module  Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form_t.
Section Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form_t.
  Definition Self : Set := disambiguating_overlapping_traits.Form.t.
  
  (*
      fn get(&self) -> String {
          self.username.clone()
      }
  *)
  Definition get (self : ref Self) : M alloc.string.String.t :=
    let* self := M.alloc self in
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.clone.Clone.clone (Self := alloc.string.String.t) (Trait := ℐ))) in
    let* α1 : ref disambiguating_overlapping_traits.Form.t := M.read self in
    M.call
      (α0
        (borrow
          (disambiguating_overlapping_traits.Form.Get_username (deref α1)))).
  
  Axiom get_is_impl : impl Self "get" = get.
  
  Global Instance ℐ :
    disambiguating_overlapping_traits.UsernameWidget.Trait Self := {
    disambiguating_overlapping_traits.UsernameWidget.get := get;
  }.
End Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form_t.
End Impl_disambiguating_overlapping_traits_UsernameWidget_for_disambiguating_overlapping_traits_Form_t.

Module  Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form_t.
Section Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form_t.
  Definition Self : Set := disambiguating_overlapping_traits.Form.t.
  
  (*
      fn get(&self) -> u8 {
          self.age
      }
  *)
  Definition get (self : ref Self) : M u8.t :=
    let* self := M.alloc self in
    let* α0 : ref disambiguating_overlapping_traits.Form.t := M.read self in
    M.read (disambiguating_overlapping_traits.Form.Get_age (deref α0)).
  
  Axiom get_is_impl : impl Self "get" = get.
  
  Global Instance ℐ :
    disambiguating_overlapping_traits.AgeWidget.Trait Self := {
    disambiguating_overlapping_traits.AgeWidget.get := get;
  }.
End Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form_t.
End Impl_disambiguating_overlapping_traits_AgeWidget_for_disambiguating_overlapping_traits_Form_t.

(*
fn main() {
    let form = Form {
        username: "rustacean".to_owned(),
        age: 28,
    };

    // If you uncomment this line, you'll get an error saying
    // "multiple `get` found". Because, after all, there are multiple methods
    // named `get`.
    // println!("{}", form.get());

    let username = <Form as UsernameWidget>::get(&form);
    assert_eq!(("rustacean".to_string()), username);
    let age = <Form as AgeWidget>::get(&form);
    assert_eq!(28, age);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* form : M.Val disambiguating_overlapping_traits.Form.t :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        alloc.borrow.ToOwned.to_owned (Self := str.t) (Trait := ℐ))) in
    let* α1 : ref str.t := M.read (mk_str "rustacean") in
    let* α2 : alloc.string.String.t := M.call (α0 α1) in
    M.alloc
      {|
        disambiguating_overlapping_traits.Form.username := α2;
        disambiguating_overlapping_traits.Form.age := (Integer.of_Z 28) : u8.t;
      |} in
  let* username : M.Val alloc.string.String.t :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        disambiguating_overlapping_traits.UsernameWidget.get
          (Self := disambiguating_overlapping_traits.Form.t)
          (Trait := ℐ))) in
    let* α1 : alloc.string.String.t := M.call (α0 (borrow form)) in
    M.alloc α1 in
  let* _ : M.Val unit :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        alloc.string.ToString.to_string (Self := str.t) (Trait := ℐ))) in
    let* α1 : ref str.t := M.read (mk_str "rustacean") in
    let* α2 : alloc.string.String.t := M.call (α0 α1) in
    let* α3 : M.Val alloc.string.String.t := M.alloc α2 in
    let* α4 :
        M.Val ((ref alloc.string.String.t) * (ref alloc.string.String.t)) :=
      M.alloc (borrow α3, borrow username) in
    match_operator
      α4
      [
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | (_, _) =>
            let γ0_0 := Tuple.Access.left γ in
            let γ0_1 := Tuple.Access.right γ in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 : _ :=
              ltac:(M.get_method (fun ℐ =>
                core.cmp.PartialEq.eq
                  (Self := alloc.string.String.t)
                  (Rhs := alloc.string.String.t)
                  (Trait := ℐ))) in
            let* α1 : ref alloc.string.String.t := M.read left_val in
            let* α2 : ref alloc.string.String.t := M.read right_val in
            let* α3 : bool.t := M.call (α0 α1 α2) in
            let* α4 : M.Val bool.t := M.alloc (UnOp.not α3) in
            let* α5 : bool.t := M.read (use α4) in
            if α5 then
              let* kind : M.Val core.panicking.AssertKind.t :=
                M.alloc core.panicking.AssertKind.Eq in
              let* α0 : core.panicking.AssertKind.t := M.read kind in
              let* α1 : ref alloc.string.String.t := M.read left_val in
              let* α2 : ref alloc.string.String.t := M.read right_val in
              let* α3 : never.t :=
                M.call
                  (core.panicking.assert_failed
                    α0
                    α1
                    α2
                    core.option.Option.None) in
              let* α0 : M.Val never.t := M.alloc α3 in
              let* α1 := M.read α0 in
              let* α2 : unit := never_to_any α1 in
              M.alloc α2
            else
              M.alloc tt
          end) :
          M (M.Val unit)
      ] in
  let* age : M.Val u8.t :=
    let* α0 : _ :=
      ltac:(M.get_method (fun ℐ =>
        disambiguating_overlapping_traits.AgeWidget.get
          (Self := disambiguating_overlapping_traits.Form.t)
          (Trait := ℐ))) in
    let* α1 : u8.t := M.call (α0 (borrow form)) in
    M.alloc α1 in
  let* _ : M.Val unit :=
    let* α0 : M.Val u8.t := M.alloc ((Integer.of_Z 28) : u8.t) in
    let* α1 : M.Val ((ref u8.t) * (ref u8.t)) :=
      M.alloc (borrow α0, borrow age) in
    match_operator
      α1
      [
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | (_, _) =>
            let γ0_0 := Tuple.Access.left γ in
            let γ0_1 := Tuple.Access.right γ in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 : ref u8.t := M.read left_val in
            let* α1 : u8.t := M.read (deref α0) in
            let* α2 : ref u8.t := M.read right_val in
            let* α3 : u8.t := M.read (deref α2) in
            let* α4 : M.Val bool.t :=
              M.alloc (UnOp.not (BinOp.Pure.eq α1 α3)) in
            let* α5 : bool.t := M.read (use α4) in
            if α5 then
              let* kind : M.Val core.panicking.AssertKind.t :=
                M.alloc core.panicking.AssertKind.Eq in
              let* α0 : core.panicking.AssertKind.t := M.read kind in
              let* α1 : ref u8.t := M.read left_val in
              let* α2 : ref u8.t := M.read right_val in
              let* α3 : never.t :=
                M.call
                  (core.panicking.assert_failed
                    α0
                    α1
                    α2
                    core.option.Option.None) in
              let* α0 : M.Val never.t := M.alloc α3 in
              let* α1 := M.read α0 in
              let* α2 : unit := never_to_any α1 in
              M.alloc α2
            else
              M.alloc tt
          end) :
          M (M.Val unit)
      ] in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
