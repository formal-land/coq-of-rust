(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
fn combine_vecs_explicit_return_type(
    v: Vec<i32>,
    u: Vec<i32>,
) -> iter::Cycle<iter::Chain<IntoIter<i32>, IntoIter<i32>>> {
    v.into_iter().chain(u.into_iter()).cycle()
}
*)
Definition combine_vecs_explicit_return_type
    (v : alloc.vec.Vec.t i32.t alloc.vec.Vec.Default.A)
    (u : alloc.vec.Vec.t i32.t alloc.vec.Vec.Default.A)
    :
      M
        (core.iter.adapters.cycle.Cycle.t
          (core.iter.adapters.chain.Chain.t
            (alloc.vec.into_iter.IntoIter.t
              i32.t
              alloc.vec.into_iter.IntoIter.Default.A)
            (alloc.vec.into_iter.IntoIter.t
              i32.t
              alloc.vec.into_iter.IntoIter.Default.A))) :=
  let* v := M.alloc v in
  let* u := M.alloc u in
  let* α0 : _ :=
    ltac:(M.get_method (fun ℐ =>
      core.iter.traits.iterator.Iterator.cycle
        (Self :=
          core.iter.adapters.chain.Chain.t
            (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
            (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t))
        (Trait := ℐ))) in
  let* α1 : _ :=
    ltac:(M.get_method (fun ℐ =>
      core.iter.traits.iterator.Iterator.chain
        (Self := alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
        (U := alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
        (Trait := ℐ))) in
  let* α2 : _ :=
    ltac:(M.get_method (fun ℐ =>
      core.iter.traits.collect.IntoIterator.into_iter
        (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
        (Trait := ℐ))) in
  let* α3 : alloc.vec.Vec.t i32.t alloc.alloc.Global.t := M.read v in
  let* α4 : alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t :=
    M.call (α2 α3) in
  let* α5 : _ :=
    ltac:(M.get_method (fun ℐ =>
      core.iter.traits.collect.IntoIterator.into_iter
        (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
        (Trait := ℐ))) in
  let* α6 : alloc.vec.Vec.t i32.t alloc.alloc.Global.t := M.read u in
  let* α7 : alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t :=
    M.call (α5 α6) in
  let* α8 :
      core.iter.adapters.chain.Chain.t
        (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
        (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t) :=
    M.call (α1 α4 α7) in
  M.call (α0 α8).

(*
fn combine_vecs(v: Vec<i32>, u: Vec<i32>) -> impl Iterator<Item = i32> {
    v.into_iter().chain(u.into_iter()).cycle()
}
*)
Definition combine_vecs
    (v : alloc.vec.Vec.t i32.t alloc.vec.Vec.Default.A)
    (u : alloc.vec.Vec.t i32.t alloc.vec.Vec.Default.A)
    : M _ (* OpaqueTy *) :=
  let* v := M.alloc v in
  let* u := M.alloc u in
  let* α0 : _ :=
    ltac:(M.get_method (fun ℐ =>
      core.iter.traits.iterator.Iterator.cycle
        (Self :=
          core.iter.adapters.chain.Chain.t
            (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
            (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t))
        (Trait := ℐ))) in
  let* α1 : _ :=
    ltac:(M.get_method (fun ℐ =>
      core.iter.traits.iterator.Iterator.chain
        (Self := alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
        (U := alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
        (Trait := ℐ))) in
  let* α2 : _ :=
    ltac:(M.get_method (fun ℐ =>
      core.iter.traits.collect.IntoIterator.into_iter
        (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
        (Trait := ℐ))) in
  let* α3 : alloc.vec.Vec.t i32.t alloc.alloc.Global.t := M.read v in
  let* α4 : alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t :=
    M.call (α2 α3) in
  let* α5 : _ :=
    ltac:(M.get_method (fun ℐ =>
      core.iter.traits.collect.IntoIterator.into_iter
        (Self := alloc.vec.Vec.t i32.t alloc.alloc.Global.t)
        (Trait := ℐ))) in
  let* α6 : alloc.vec.Vec.t i32.t alloc.alloc.Global.t := M.read u in
  let* α7 : alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t :=
    M.call (α5 α6) in
  let* α8 :
      core.iter.adapters.chain.Chain.t
        (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t)
        (alloc.vec.into_iter.IntoIter.t i32.t alloc.alloc.Global.t) :=
    M.call (α1 α4 α7) in
  M.call (α0 α8).

Error OpaqueTy.

(*
fn main() {
    let v1 = vec![1, 2, 3];
    let v2 = vec![4, 5];
    let mut v3 = combine_vecs(v1, v2);
    assert_eq!(Some(1), v3.next());
    assert_eq!(Some(2), v3.next());
    assert_eq!(Some(3), v3.next());
    assert_eq!(Some(4), v3.next());
    assert_eq!(Some(5), v3.next());
    println!("all done");
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* v1 : M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t) :=
    let* α0 : M.Val (array i32.t) :=
      M.alloc
        [
          (Integer.of_Z 1) : i32.t;
          (Integer.of_Z 2) : i32.t;
          (Integer.of_Z 3) : i32.t
        ] in
    let* α1 : M.Val (alloc.boxed.Box.t (array i32.t) alloc.alloc.Global.t) :=
      M.call ((alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α0) in
    let* α2 : alloc.boxed.Box.t (slice i32.t) alloc.alloc.Global.t :=
      M.read (pointer_coercion "Unsize" α1) in
    let* α3 : alloc.vec.Vec.t i32.t alloc.alloc.Global.t :=
      M.call (impl (slice i32.t) "into_vec" α2) in
    M.alloc α3 in
  let* v2 : M.Val (alloc.vec.Vec.t i32.t alloc.alloc.Global.t) :=
    let* α0 : M.Val (array i32.t) :=
      M.alloc [ (Integer.of_Z 4) : i32.t; (Integer.of_Z 5) : i32.t ] in
    let* α1 : M.Val (alloc.boxed.Box.t (array i32.t) alloc.alloc.Global.t) :=
      M.call ((alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α0) in
    let* α2 : alloc.boxed.Box.t (slice i32.t) alloc.alloc.Global.t :=
      M.read (pointer_coercion "Unsize" α1) in
    let* α3 : alloc.vec.Vec.t i32.t alloc.alloc.Global.t :=
      M.call (impl (slice i32.t) "into_vec" α2) in
    M.alloc α3 in
  let* v3 : M.Val type not implemented :=
    let* α0 : alloc.vec.Vec.t i32.t alloc.alloc.Global.t := M.read v1 in
    let* α1 : alloc.vec.Vec.t i32.t alloc.alloc.Global.t := M.read v2 in
    let* α2 : type not implemented :=
      M.call (impl_trait_as_return_type.combine_vecs α0 α1) in
    M.alloc α2 in
  let* _ : M.Val unit :=
    let* α0 : M.Val (core.option.Option.t i32.t) :=
      M.alloc (core.option.Option.Some ((Integer.of_Z 1) : i32.t)) in
    let* α1 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.iter.traits.iterator.Iterator.next
          (Self := type not implemented)
          (Trait := ℐ))) in
    let* α2 : core.option.Option.t i32.t := M.call (α1 (borrow_mut v3)) in
    let* α3 : M.Val (core.option.Option.t i32.t) := M.alloc α2 in
    let* α4 :
        M.Val
          ((ref (core.option.Option.t i32.t))
          *
          (ref (core.option.Option.t i32.t))) :=
      M.alloc (borrow α0, borrow α3) in
    match_operator
      α4
      [
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | (_, _) =>
            let γ0_0 := Tuple.Access.left γ in
            let γ0_1 := Tuple.Access.right γ in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 : _ :=
              ltac:(M.get_method (fun ℐ =>
                core.cmp.PartialEq.eq
                  (Self := core.option.Option.t i32.t)
                  (Rhs := core.option.Option.t i32.t)
                  (Trait := ℐ))) in
            let* α1 : ref (core.option.Option.t i32.t) := M.read left_val in
            let* α2 : ref (core.option.Option.t i32.t) := M.read right_val in
            let* α3 : bool.t := M.call (α0 α1 α2) in
            let* α4 : M.Val bool.t := M.alloc (UnOp.not α3) in
            let* α5 : bool.t := M.read (use α4) in
            if α5 then
              let* kind : M.Val core.panicking.AssertKind.t :=
                M.alloc core.panicking.AssertKind.Eq in
              let* α0 : core.panicking.AssertKind.t := M.read kind in
              let* α1 : ref (core.option.Option.t i32.t) := M.read left_val in
              let* α2 : ref (core.option.Option.t i32.t) := M.read right_val in
              let* α3 : never.t :=
                M.call
                  (core.panicking.assert_failed
                    α0
                    α1
                    α2
                    core.option.Option.None) in
              let* α0 : M.Val never.t := M.alloc α3 in
              let* α1 := M.read α0 in
              let* α2 : unit := never_to_any α1 in
              M.alloc α2
            else
              M.alloc tt
          end) :
          M (M.Val unit)
      ] in
  let* _ : M.Val unit :=
    let* α0 : M.Val (core.option.Option.t i32.t) :=
      M.alloc (core.option.Option.Some ((Integer.of_Z 2) : i32.t)) in
    let* α1 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.iter.traits.iterator.Iterator.next
          (Self := type not implemented)
          (Trait := ℐ))) in
    let* α2 : core.option.Option.t i32.t := M.call (α1 (borrow_mut v3)) in
    let* α3 : M.Val (core.option.Option.t i32.t) := M.alloc α2 in
    let* α4 :
        M.Val
          ((ref (core.option.Option.t i32.t))
          *
          (ref (core.option.Option.t i32.t))) :=
      M.alloc (borrow α0, borrow α3) in
    match_operator
      α4
      [
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | (_, _) =>
            let γ0_0 := Tuple.Access.left γ in
            let γ0_1 := Tuple.Access.right γ in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 : _ :=
              ltac:(M.get_method (fun ℐ =>
                core.cmp.PartialEq.eq
                  (Self := core.option.Option.t i32.t)
                  (Rhs := core.option.Option.t i32.t)
                  (Trait := ℐ))) in
            let* α1 : ref (core.option.Option.t i32.t) := M.read left_val in
            let* α2 : ref (core.option.Option.t i32.t) := M.read right_val in
            let* α3 : bool.t := M.call (α0 α1 α2) in
            let* α4 : M.Val bool.t := M.alloc (UnOp.not α3) in
            let* α5 : bool.t := M.read (use α4) in
            if α5 then
              let* kind : M.Val core.panicking.AssertKind.t :=
                M.alloc core.panicking.AssertKind.Eq in
              let* α0 : core.panicking.AssertKind.t := M.read kind in
              let* α1 : ref (core.option.Option.t i32.t) := M.read left_val in
              let* α2 : ref (core.option.Option.t i32.t) := M.read right_val in
              let* α3 : never.t :=
                M.call
                  (core.panicking.assert_failed
                    α0
                    α1
                    α2
                    core.option.Option.None) in
              let* α0 : M.Val never.t := M.alloc α3 in
              let* α1 := M.read α0 in
              let* α2 : unit := never_to_any α1 in
              M.alloc α2
            else
              M.alloc tt
          end) :
          M (M.Val unit)
      ] in
  let* _ : M.Val unit :=
    let* α0 : M.Val (core.option.Option.t i32.t) :=
      M.alloc (core.option.Option.Some ((Integer.of_Z 3) : i32.t)) in
    let* α1 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.iter.traits.iterator.Iterator.next
          (Self := type not implemented)
          (Trait := ℐ))) in
    let* α2 : core.option.Option.t i32.t := M.call (α1 (borrow_mut v3)) in
    let* α3 : M.Val (core.option.Option.t i32.t) := M.alloc α2 in
    let* α4 :
        M.Val
          ((ref (core.option.Option.t i32.t))
          *
          (ref (core.option.Option.t i32.t))) :=
      M.alloc (borrow α0, borrow α3) in
    match_operator
      α4
      [
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | (_, _) =>
            let γ0_0 := Tuple.Access.left γ in
            let γ0_1 := Tuple.Access.right γ in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 : _ :=
              ltac:(M.get_method (fun ℐ =>
                core.cmp.PartialEq.eq
                  (Self := core.option.Option.t i32.t)
                  (Rhs := core.option.Option.t i32.t)
                  (Trait := ℐ))) in
            let* α1 : ref (core.option.Option.t i32.t) := M.read left_val in
            let* α2 : ref (core.option.Option.t i32.t) := M.read right_val in
            let* α3 : bool.t := M.call (α0 α1 α2) in
            let* α4 : M.Val bool.t := M.alloc (UnOp.not α3) in
            let* α5 : bool.t := M.read (use α4) in
            if α5 then
              let* kind : M.Val core.panicking.AssertKind.t :=
                M.alloc core.panicking.AssertKind.Eq in
              let* α0 : core.panicking.AssertKind.t := M.read kind in
              let* α1 : ref (core.option.Option.t i32.t) := M.read left_val in
              let* α2 : ref (core.option.Option.t i32.t) := M.read right_val in
              let* α3 : never.t :=
                M.call
                  (core.panicking.assert_failed
                    α0
                    α1
                    α2
                    core.option.Option.None) in
              let* α0 : M.Val never.t := M.alloc α3 in
              let* α1 := M.read α0 in
              let* α2 : unit := never_to_any α1 in
              M.alloc α2
            else
              M.alloc tt
          end) :
          M (M.Val unit)
      ] in
  let* _ : M.Val unit :=
    let* α0 : M.Val (core.option.Option.t i32.t) :=
      M.alloc (core.option.Option.Some ((Integer.of_Z 4) : i32.t)) in
    let* α1 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.iter.traits.iterator.Iterator.next
          (Self := type not implemented)
          (Trait := ℐ))) in
    let* α2 : core.option.Option.t i32.t := M.call (α1 (borrow_mut v3)) in
    let* α3 : M.Val (core.option.Option.t i32.t) := M.alloc α2 in
    let* α4 :
        M.Val
          ((ref (core.option.Option.t i32.t))
          *
          (ref (core.option.Option.t i32.t))) :=
      M.alloc (borrow α0, borrow α3) in
    match_operator
      α4
      [
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | (_, _) =>
            let γ0_0 := Tuple.Access.left γ in
            let γ0_1 := Tuple.Access.right γ in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 : _ :=
              ltac:(M.get_method (fun ℐ =>
                core.cmp.PartialEq.eq
                  (Self := core.option.Option.t i32.t)
                  (Rhs := core.option.Option.t i32.t)
                  (Trait := ℐ))) in
            let* α1 : ref (core.option.Option.t i32.t) := M.read left_val in
            let* α2 : ref (core.option.Option.t i32.t) := M.read right_val in
            let* α3 : bool.t := M.call (α0 α1 α2) in
            let* α4 : M.Val bool.t := M.alloc (UnOp.not α3) in
            let* α5 : bool.t := M.read (use α4) in
            if α5 then
              let* kind : M.Val core.panicking.AssertKind.t :=
                M.alloc core.panicking.AssertKind.Eq in
              let* α0 : core.panicking.AssertKind.t := M.read kind in
              let* α1 : ref (core.option.Option.t i32.t) := M.read left_val in
              let* α2 : ref (core.option.Option.t i32.t) := M.read right_val in
              let* α3 : never.t :=
                M.call
                  (core.panicking.assert_failed
                    α0
                    α1
                    α2
                    core.option.Option.None) in
              let* α0 : M.Val never.t := M.alloc α3 in
              let* α1 := M.read α0 in
              let* α2 : unit := never_to_any α1 in
              M.alloc α2
            else
              M.alloc tt
          end) :
          M (M.Val unit)
      ] in
  let* _ : M.Val unit :=
    let* α0 : M.Val (core.option.Option.t i32.t) :=
      M.alloc (core.option.Option.Some ((Integer.of_Z 5) : i32.t)) in
    let* α1 : _ :=
      ltac:(M.get_method (fun ℐ =>
        core.iter.traits.iterator.Iterator.next
          (Self := type not implemented)
          (Trait := ℐ))) in
    let* α2 : core.option.Option.t i32.t := M.call (α1 (borrow_mut v3)) in
    let* α3 : M.Val (core.option.Option.t i32.t) := M.alloc α2 in
    let* α4 :
        M.Val
          ((ref (core.option.Option.t i32.t))
          *
          (ref (core.option.Option.t i32.t))) :=
      M.alloc (borrow α0, borrow α3) in
    match_operator
      α4
      [
        fun γ =>
          (let* α0 := M.read γ in
          match α0 with
          | (_, _) =>
            let γ0_0 := Tuple.Access.left γ in
            let γ0_1 := Tuple.Access.right γ in
            let* left_val := M.copy γ0_0 in
            let* right_val := M.copy γ0_1 in
            let* α0 : _ :=
              ltac:(M.get_method (fun ℐ =>
                core.cmp.PartialEq.eq
                  (Self := core.option.Option.t i32.t)
                  (Rhs := core.option.Option.t i32.t)
                  (Trait := ℐ))) in
            let* α1 : ref (core.option.Option.t i32.t) := M.read left_val in
            let* α2 : ref (core.option.Option.t i32.t) := M.read right_val in
            let* α3 : bool.t := M.call (α0 α1 α2) in
            let* α4 : M.Val bool.t := M.alloc (UnOp.not α3) in
            let* α5 : bool.t := M.read (use α4) in
            if α5 then
              let* kind : M.Val core.panicking.AssertKind.t :=
                M.alloc core.panicking.AssertKind.Eq in
              let* α0 : core.panicking.AssertKind.t := M.read kind in
              let* α1 : ref (core.option.Option.t i32.t) := M.read left_val in
              let* α2 : ref (core.option.Option.t i32.t) := M.read right_val in
              let* α3 : never.t :=
                M.call
                  (core.panicking.assert_failed
                    α0
                    α1
                    α2
                    core.option.Option.None) in
              let* α0 : M.Val never.t := M.alloc α3 in
              let* α1 := M.read α0 in
              let* α2 : unit := never_to_any α1 in
              M.alloc α2
            else
              M.alloc tt
          end) :
          M (M.Val unit)
      ] in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "all done
") in
      let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
      let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
      let* α3 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α2) in
      let* α4 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_const" α3) in
      let* α5 : unit := M.call (std.io.stdio._print α4) in
      M.alloc α5 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
