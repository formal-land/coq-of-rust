(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Foo.
Section Foo.
  Inductive t : Set := Build.
End Foo.
End Foo.

Module  Bar.
Section Bar.
  Inductive t : Set := Build.
End Bar.
End Bar.

Module  FooBar.
Section FooBar.
  Inductive t : Set := Build.
End FooBar.
End FooBar.

Module  Impl_core_fmt_Debug_for_operator_overloading_FooBar_t.
Section Impl_core_fmt_Debug_for_operator_overloading_FooBar_t.
  Definition Self : Set := operator_overloading.FooBar.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "FooBar") in
    M.call (impl core.fmt.Formatter.t "write_str" α0 α1).
  
  Axiom fmt_is_impl : impl Self "fmt" = fmt.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_operator_overloading_FooBar_t.
End Impl_core_fmt_Debug_for_operator_overloading_FooBar_t.

Module  BarFoo.
Section BarFoo.
  Inductive t : Set := Build.
End BarFoo.
End BarFoo.

Module  Impl_core_fmt_Debug_for_operator_overloading_BarFoo_t.
Section Impl_core_fmt_Debug_for_operator_overloading_BarFoo_t.
  Definition Self : Set := operator_overloading.BarFoo.t.
  
  (*
  Debug
  *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter.t)
      : M ltac:(core.fmt.Result) :=
    let* self := M.alloc self in
    let* f := M.alloc f in
    let* α0 : mut_ref core.fmt.Formatter.t := M.read f in
    let* α1 : ref str.t := M.read (mk_str "BarFoo") in
    M.call (impl core.fmt.Formatter.t "write_str" α0 α1).
  
  Axiom fmt_is_impl : impl Self "fmt" = fmt.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_operator_overloading_BarFoo_t.
End Impl_core_fmt_Debug_for_operator_overloading_BarFoo_t.

Module  Impl_core_ops_arith_Add_operator_overloading_Bar_t_for_operator_overloading_Foo_t.
Section Impl_core_ops_arith_Add_operator_overloading_Bar_t_for_operator_overloading_Foo_t.
  Definition Self : Set := operator_overloading.Foo.t.
  
  (*
      type Output = FooBar;
  *)
  Definition Output : Set := operator_overloading.FooBar.t.
  
  (*
      fn add(self, _rhs: Bar) -> FooBar {
          println!("> Foo.add(Bar) was called");
  
          FooBar
      }
  *)
  Definition add
      (self : Self)
      (_rhs : operator_overloading.Bar.t)
      : M operator_overloading.FooBar.t :=
    let* self := M.alloc self in
    let* _rhs := M.alloc _rhs in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : ref str.t := M.read (mk_str "> Foo.add(Bar) was called
") in
        let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
        let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
        let* α3 : ref (slice (ref str.t)) :=
          M.read (pointer_coercion "Unsize" α2) in
        let* α4 : core.fmt.Arguments.t :=
          M.call (impl core.fmt.Arguments.t "new_const" α3) in
        let* α5 : unit := M.call (std.io.stdio._print α4) in
        M.alloc α5 in
      M.alloc tt in
    let* α0 : M.Val operator_overloading.FooBar.t :=
      M.alloc operator_overloading.FooBar.Build in
    M.read α0.
  
  Axiom add_is_impl : impl Self "add" = add.
  
  Global Instance ℐ :
    core.ops.arith.Add.Trait Self (Rhs := operator_overloading.Bar.t) := {
    core.ops.arith.Add.Output := Output;
    core.ops.arith.Add.add := add;
  }.
End Impl_core_ops_arith_Add_operator_overloading_Bar_t_for_operator_overloading_Foo_t.
End Impl_core_ops_arith_Add_operator_overloading_Bar_t_for_operator_overloading_Foo_t.

Module  Impl_core_ops_arith_Add_operator_overloading_Foo_t_for_operator_overloading_Bar_t.
Section Impl_core_ops_arith_Add_operator_overloading_Foo_t_for_operator_overloading_Bar_t.
  Definition Self : Set := operator_overloading.Bar.t.
  
  (*
      type Output = BarFoo;
  *)
  Definition Output : Set := operator_overloading.BarFoo.t.
  
  (*
      fn add(self, _rhs: Foo) -> BarFoo {
          println!("> Bar.add(Foo) was called");
  
          BarFoo
      }
  *)
  Definition add
      (self : Self)
      (_rhs : operator_overloading.Foo.t)
      : M operator_overloading.BarFoo.t :=
    let* self := M.alloc self in
    let* _rhs := M.alloc _rhs in
    let* _ : M.Val unit :=
      let* _ : M.Val unit :=
        let* α0 : ref str.t := M.read (mk_str "> Bar.add(Foo) was called
") in
        let* α1 : M.Val (array (ref str.t)) := M.alloc [ α0 ] in
        let* α2 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α1) in
        let* α3 : ref (slice (ref str.t)) :=
          M.read (pointer_coercion "Unsize" α2) in
        let* α4 : core.fmt.Arguments.t :=
          M.call (impl core.fmt.Arguments.t "new_const" α3) in
        let* α5 : unit := M.call (std.io.stdio._print α4) in
        M.alloc α5 in
      M.alloc tt in
    let* α0 : M.Val operator_overloading.BarFoo.t :=
      M.alloc operator_overloading.BarFoo.Build in
    M.read α0.
  
  Axiom add_is_impl : impl Self "add" = add.
  
  Global Instance ℐ :
    core.ops.arith.Add.Trait Self (Rhs := operator_overloading.Foo.t) := {
    core.ops.arith.Add.Output := Output;
    core.ops.arith.Add.add := add;
  }.
End Impl_core_ops_arith_Add_operator_overloading_Foo_t_for_operator_overloading_Bar_t.
End Impl_core_ops_arith_Add_operator_overloading_Foo_t_for_operator_overloading_Bar_t.

(*
fn main() {
    println!("Foo + Bar = {:?}", Foo + Bar);
    println!("Bar + Foo = {:?}", Bar + Foo);
}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "Foo + Bar = ") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
      let* α4 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α3) in
      let* α5 : _ :=
        ltac:(M.get_method (fun ℐ =>
          core.ops.arith.Add.add
            (Self := operator_overloading.Foo.t)
            (Rhs := operator_overloading.Bar.t)
            (Trait := ℐ))) in
      let* α6 : operator_overloading.FooBar.t :=
        M.call
          (α5 operator_overloading.Foo.Build operator_overloading.Bar.Build) in
      let* α7 : M.Val operator_overloading.FooBar.t := M.alloc α6 in
      let* α8 : core.fmt.rt.Argument.t :=
        M.call (impl core.fmt.rt.Argument.t "new_debug" (borrow α7)) in
      let* α9 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α8 ] in
      let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α9) in
      let* α11 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α10) in
      let* α12 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_v1" α4 α11) in
      let* α13 : unit := M.call (std.io.stdio._print α12) in
      M.alloc α13 in
    M.alloc tt in
  let* _ : M.Val unit :=
    let* _ : M.Val unit :=
      let* α0 : ref str.t := M.read (mk_str "Bar + Foo = ") in
      let* α1 : ref str.t := M.read (mk_str "
") in
      let* α2 : M.Val (array (ref str.t)) := M.alloc [ α0; α1 ] in
      let* α3 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α2) in
      let* α4 : ref (slice (ref str.t)) :=
        M.read (pointer_coercion "Unsize" α3) in
      let* α5 : _ :=
        ltac:(M.get_method (fun ℐ =>
          core.ops.arith.Add.add
            (Self := operator_overloading.Bar.t)
            (Rhs := operator_overloading.Foo.t)
            (Trait := ℐ))) in
      let* α6 : operator_overloading.BarFoo.t :=
        M.call
          (α5 operator_overloading.Bar.Build operator_overloading.Foo.Build) in
      let* α7 : M.Val operator_overloading.BarFoo.t := M.alloc α6 in
      let* α8 : core.fmt.rt.Argument.t :=
        M.call (impl core.fmt.rt.Argument.t "new_debug" (borrow α7)) in
      let* α9 : M.Val (array core.fmt.rt.Argument.t) := M.alloc [ α8 ] in
      let* α10 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
        M.alloc (borrow α9) in
      let* α11 : ref (slice core.fmt.rt.Argument.t) :=
        M.read (pointer_coercion "Unsize" α10) in
      let* α12 : core.fmt.Arguments.t :=
        M.call (impl core.fmt.Arguments.t "new_v1" α4 α11) in
      let* α13 : unit := M.call (std.io.stdio._print α12) in
      M.alloc α13 in
    M.alloc tt in
  let* α0 : M.Val unit := M.alloc tt in
  M.read α0.
