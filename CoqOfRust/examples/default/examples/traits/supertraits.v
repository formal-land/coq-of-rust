(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Person.
Section Person.
  Class Trait (Self : Set) : Type := {
    name : (ref Self) -> M alloc.string.String.t;
  }.
  
End Person.
End Person.

Module  Student.
Section Student.
  Class Trait (Self : Set) : Type := {
    ℒ_0 :: supertraits.Person.Trait Self;
    university : (ref Self) -> M alloc.string.String.t;
  }.
  
End Student.
End Student.

Module  Programmer.
Section Programmer.
  Class Trait (Self : Set) : Type := {
    fav_language : (ref Self) -> M alloc.string.String.t;
  }.
  
End Programmer.
End Programmer.

Module  CompSciStudent.
Section CompSciStudent.
  Class Trait (Self : Set) : Type := {
    ℒ_0 :: supertraits.Programmer.Trait Self;
    ℒ_1 :: supertraits.Student.Trait Self;
    git_username : (ref Self) -> M alloc.string.String.t;
  }.
  
End CompSciStudent.
End CompSciStudent.

(*
fn comp_sci_student_greeting(student: &dyn CompSciStudent) -> String {
    format!(
        "My name is {} and I attend {}. My favorite language is {}. My Git username is {}",
        student.name(),
        student.university(),
        student.fav_language(),
        student.git_username()
    )
}
*)
Definition comp_sci_student_greeting
    {DynT : Set}
    {ℋ_0 : supertraits.CompSciStudent.Trait DynT}
    (student : ref DynT)
    : M alloc.string.String.t :=
  let* student := M.alloc student in
  let* res : M.Val alloc.string.String.t :=
    let* α0 : ref str.t := M.read (mk_str "My name is ") in
    let* α1 : ref str.t := M.read (mk_str " and I attend ") in
    let* α2 : ref str.t := M.read (mk_str ". My favorite language is ") in
    let* α3 : ref str.t := M.read (mk_str ". My Git username is ") in
    let* α4 : M.Val (array (ref str.t)) := M.alloc [ α0; α1; α2; α3 ] in
    let* α5 : M.Val (ref (array (ref str.t))) := M.alloc (borrow α4) in
    let* α6 : ref (slice (ref str.t)) :=
      M.read (pointer_coercion "Unsize" α5) in
    let* α7 : _ :=
      ltac:(M.get_method (fun ℐ =>
        supertraits.Person.name (Self := _ (* dyn *)) (Trait := ℐ))) in
    let* α8 : ref _ (* dyn *) := M.read student in
    let* α9 : alloc.string.String.t := M.call (α7 α8) in
    let* α10 : M.Val alloc.string.String.t := M.alloc α9 in
    let* α11 : core.fmt.rt.Argument.t :=
      M.call (impl core.fmt.rt.Argument.t "new_display" (borrow α10)) in
    let* α12 : _ :=
      ltac:(M.get_method (fun ℐ =>
        supertraits.Student.university (Self := _ (* dyn *)) (Trait := ℐ))) in
    let* α13 : ref _ (* dyn *) := M.read student in
    let* α14 : alloc.string.String.t := M.call (α12 α13) in
    let* α15 : M.Val alloc.string.String.t := M.alloc α14 in
    let* α16 : core.fmt.rt.Argument.t :=
      M.call (impl core.fmt.rt.Argument.t "new_display" (borrow α15)) in
    let* α17 : _ :=
      ltac:(M.get_method (fun ℐ =>
        supertraits.Programmer.fav_language
          (Self := _ (* dyn *))
          (Trait := ℐ))) in
    let* α18 : ref _ (* dyn *) := M.read student in
    let* α19 : alloc.string.String.t := M.call (α17 α18) in
    let* α20 : M.Val alloc.string.String.t := M.alloc α19 in
    let* α21 : core.fmt.rt.Argument.t :=
      M.call (impl core.fmt.rt.Argument.t "new_display" (borrow α20)) in
    let* α22 : _ :=
      ltac:(M.get_method (fun ℐ =>
        supertraits.CompSciStudent.git_username
          (Self := _ (* dyn *))
          (Trait := ℐ))) in
    let* α23 : ref _ (* dyn *) := M.read student in
    let* α24 : alloc.string.String.t := M.call (α22 α23) in
    let* α25 : M.Val alloc.string.String.t := M.alloc α24 in
    let* α26 : core.fmt.rt.Argument.t :=
      M.call (impl core.fmt.rt.Argument.t "new_display" (borrow α25)) in
    let* α27 : M.Val (array core.fmt.rt.Argument.t) :=
      M.alloc [ α11; α16; α21; α26 ] in
    let* α28 : M.Val (ref (array core.fmt.rt.Argument.t)) :=
      M.alloc (borrow α27) in
    let* α29 : ref (slice core.fmt.rt.Argument.t) :=
      M.read (pointer_coercion "Unsize" α28) in
    let* α30 : core.fmt.Arguments.t :=
      M.call (impl core.fmt.Arguments.t "new_v1" α6 α29) in
    let* α31 : alloc.string.String.t := M.call (alloc.fmt.format α30) in
    M.alloc α31 in
  M.read res.

(*
fn main() {}
*)
(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit := M.pure tt.
