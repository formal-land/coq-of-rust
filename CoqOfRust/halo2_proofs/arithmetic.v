(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module arithmetic.
  (*
  fn multiexp_serial<C: CurveAffine>(coeffs: &[C::Scalar], bases: &[C], acc: &mut C::Curve) {
      let coeffs: Vec<_> = coeffs.iter().map(|a| a.to_repr()).collect();
  
      let c = if bases.len() < 4 {
          1
      } else if bases.len() < 32 {
          3
      } else {
          (f64::from(bases.len() as u32)).ln().ceil() as usize
      };
  
      fn get_at<F: PrimeField>(segment: usize, c: usize, bytes: &F::Repr) -> usize {
          let skip_bits = segment * c;
          let skip_bytes = skip_bits / 8;
  
          if skip_bytes >= 32 {
              return 0;
          }
  
          let mut v = [0; 8];
          for (v, o) in v.iter_mut().zip(bytes.as_ref()[skip_bytes..].iter()) {
              *v = *o;
          }
  
          let mut tmp = u64::from_le_bytes(v);
          tmp >>= skip_bits - (skip_bytes * 8);
          tmp = tmp % (1 << c);
  
          tmp as usize
      }
  
      let segments = (256 / c) + 1;
  
      for current_segment in (0..segments).rev() {
          for _ in 0..c {
              *acc = acc.double();
          }
  
          #[derive(Clone, Copy)]
          enum Bucket<C: CurveAffine> {
              None,
              Affine(C),
              Projective(C::Curve),
          }
  
          impl<C: CurveAffine> Bucket<C> {
              fn add_assign(&mut self, other: &C) {
                  *self = match *self {
                      Bucket::None => Bucket::Affine( *other),
                      Bucket::Affine(a) => Bucket::Projective(a + *other),
                      Bucket::Projective(mut a) => {
                          a += *other;
                          Bucket::Projective(a)
                      }
                  }
              }
  
              fn add(self, mut other: C::Curve) -> C::Curve {
                  match self {
                      Bucket::None => other,
                      Bucket::Affine(a) => {
                          other += a;
                          other
                      }
                      Bucket::Projective(a) => other + &a,
                  }
              }
          }
  
          let mut buckets: Vec<Bucket<C>> = vec![Bucket::None; (1 << c) - 1];
  
          for (coeff, base) in coeffs.iter().zip(bases.iter()) {
              let coeff = get_at::<C::Scalar>(current_segment, c, coeff);
              if coeff != 0 {
                  buckets[coeff - 1].add_assign(base);
              }
          }
  
          // Summation by parts
          // e.g. 3a + 2b + 1c = a +
          //                    (a) + b +
          //                    ((a) + b) + c
          let mut running_sum = C::Curve::identity();
          for exp in buckets.into_iter().rev() {
              running_sum = exp.add(running_sum);
              *acc = *acc + &running_sum;
          }
      }
  }
  *)
  Definition multiexp_serial (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ C ], [ coeffs; bases; acc ] =>
      ltac:(M.monadic
        (let coeffs := M.alloc (| coeffs |) in
        let bases := M.alloc (| bases |) in
        let acc := M.alloc (| acc |) in
        M.read (|
          let coeffs :=
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    [
                      Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.associated ];
                      Ty.function
                        [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.associated ] ] ]
                        Ty.associated
                    ],
                  [],
                  "collect",
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                  ]
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.associated ],
                      [],
                      "map",
                      [
                        Ty.associated;
                        Ty.function
                          [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.associated ] ] ]
                          Ty.associated
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [ Ty.associated ],
                          "iter",
                          []
                        |),
                        [ M.read (| coeffs |) ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let a := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "ff::PrimeField",
                                          Ty.associated,
                                          [],
                                          "to_repr",
                                          []
                                        |),
                                        [ M.read (| a |) ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                ]
              |)
            |) in
          let c :=
            M.copy (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.lt
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [ C ],
                                  "len",
                                  []
                                |),
                                [ M.read (| bases |) ]
                              |))
                              (Value.Integer 4)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (| Value.Integer 1 |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.Pure.lt
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [ C ],
                                          "len",
                                          []
                                        |),
                                        [ M.read (| bases |) ]
                                      |))
                                      (Value.Integer 32)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (| Value.Integer 3 |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.rust_cast
                                  (M.call_closure (|
                                    M.get_associated_function (| Ty.path "f64", "ceil", [] |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (| Ty.path "f64", "ln", [] |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::From",
                                              Ty.path "f64",
                                              [ Ty.path "u32" ],
                                              "from",
                                              []
                                            |),
                                            [
                                              M.rust_cast
                                                (M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [ C ],
                                                    "len",
                                                    []
                                                  |),
                                                  [ M.read (| bases |) ]
                                                |))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |))
                              |)))
                        ]
                      |)))
                ]
              |)
            |) in
          let segments :=
            M.alloc (|
              BinOp.Panic.add (|
                Integer.Usize,
                BinOp.Panic.div (| Integer.Usize, Value.Integer 256, M.read (| c |) |),
                Value.Integer 1
              |)
            |) in
          M.use
            (M.match_operator (|
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::rev::Rev")
                      [ Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ] ],
                    [],
                    "into_iter",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                        [],
                        "rev",
                        []
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [ ("start", Value.Integer 0); ("end_", M.read (| segments |)) ]
                      ]
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      ltac:(M.monadic
                        (let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::rev::Rev")
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        [ Ty.path "usize" ]
                                    ],
                                  [],
                                  "next",
                                  []
                                |),
                                [ iter ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let current_segment := M.copy (| γ0_0 |) in
                                  let _ :=
                                    M.use
                                      (M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                [ Ty.path "usize" ],
                                              [],
                                              "into_iter",
                                              []
                                            |),
                                            [
                                              Value.StructRecord
                                                "core::ops::range::Range"
                                                [
                                                  ("start", Value.Integer 0);
                                                  ("end_", M.read (| c |))
                                                ]
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let iter := M.copy (| γ |) in
                                              M.loop (|
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path "core::ops::range::Range")
                                                              [ Ty.path "usize" ],
                                                            [],
                                                            "next",
                                                            []
                                                          |),
                                                          [ iter ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let _ :=
                                                              M.write (|
                                                                M.read (| acc |),
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "group::Group",
                                                                    Ty.associated,
                                                                    [],
                                                                    "double",
                                                                    []
                                                                  |),
                                                                  [ M.read (| acc |) ]
                                                                |)
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                              |)))
                                        ]
                                      |)) in
                                  let buckets :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_function (|
                                          "alloc::vec::from_elem",
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::arithmetic::multiexp_serial::Bucket")
                                              [ C ]
                                          ]
                                        |),
                                        [
                                          Value.StructTuple
                                            "halo2_proofs::arithmetic::multiexp_serial::Bucket::None"
                                            [];
                                          BinOp.Panic.sub (|
                                            Integer.Usize,
                                            BinOp.Panic.shl (| Value.Integer 1, M.read (| c |) |),
                                            Value.Integer 1
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let _ :=
                                    M.use
                                      (M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::zip::Zip")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [ Ty.associated ];
                                                  Ty.apply (Ty.path "core::slice::iter::Iter") [ C ]
                                                ],
                                              [],
                                              "into_iter",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [ Ty.associated ],
                                                  [],
                                                  "zip",
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [ C ]
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply (Ty.path "slice") [ Ty.associated ],
                                                      "iter",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.associated;
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [],
                                                          "deref",
                                                          []
                                                        |),
                                                        [ coeffs ]
                                                      |)
                                                    ]
                                                  |);
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply (Ty.path "slice") [ C ],
                                                      "iter",
                                                      []
                                                    |),
                                                    [ M.read (| bases |) ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let iter := M.copy (| γ |) in
                                              M.loop (|
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::zip::Zip")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [ Ty.associated ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [ C ]
                                                              ],
                                                            [],
                                                            "next",
                                                            []
                                                          |),
                                                          [ iter ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let γ1_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                0
                                                              |) in
                                                            let γ1_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                1
                                                              |) in
                                                            let coeff := M.copy (| γ1_0 |) in
                                                            let base := M.copy (| γ1_1 |) in
                                                            let coeff :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_function (|
                                                                    "halo2_proofs::arithmetic::multiexp_serial.get_at",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| current_segment |);
                                                                    M.read (| c |);
                                                                    M.read (| coeff |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.match_operator (|
                                                              M.alloc (| Value.Tuple [] |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ :=
                                                                      M.use
                                                                        (M.alloc (|
                                                                          BinOp.Pure.ne
                                                                            (M.read (| coeff |))
                                                                            (Value.Integer 0)
                                                                        |)) in
                                                                    let _ :=
                                                                      M.is_constant_or_break_match (|
                                                                        M.read (| γ |),
                                                                        Value.Bool true
                                                                      |) in
                                                                    let _ :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::arithmetic::multiexp_serial::Bucket")
                                                                              [ C ],
                                                                            "add_assign",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::index::IndexMut",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::arithmetic::multiexp_serial::Bucket")
                                                                                      [ C ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [ Ty.path "usize" ],
                                                                                "index_mut",
                                                                                []
                                                                              |),
                                                                              [
                                                                                buckets;
                                                                                BinOp.Panic.sub (|
                                                                                  Integer.Usize,
                                                                                  M.read (|
                                                                                    coeff
                                                                                  |),
                                                                                  Value.Integer 1
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.read (| base |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                              |)))
                                        ]
                                      |)) in
                                  let running_sum :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "group::Group",
                                          Ty.associated,
                                          [],
                                          "identity",
                                          []
                                        |),
                                        []
                                      |)
                                    |) in
                                  M.use
                                    (M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::collect::IntoIterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::rev::Rev")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::arithmetic::multiexp_serial::Bucket")
                                                      [ C ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            [],
                                            "into_iter",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::arithmetic::multiexp_serial::Bucket")
                                                      [ C ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "rev",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::arithmetic::multiexp_serial::Bucket")
                                                          [ C ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "into_iter",
                                                    []
                                                  |),
                                                  [ M.read (| buckets |) ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let iter := M.copy (| γ |) in
                                            M.loop (|
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::rev::Rev")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::vec::into_iter::IntoIter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::arithmetic::multiexp_serial::Bucket")
                                                                    [ C ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          [],
                                                          "next",
                                                          []
                                                        |),
                                                        [ iter ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (| M.break (||) |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::option::Option::Some",
                                                              0
                                                            |) in
                                                          let exp := M.copy (| γ0_0 |) in
                                                          let _ :=
                                                            M.write (|
                                                              running_sum,
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::arithmetic::multiexp_serial::Bucket")
                                                                    [ C ],
                                                                  "add",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| exp |);
                                                                  M.read (| running_sum |)
                                                                ]
                                                              |)
                                                            |) in
                                                          let _ :=
                                                            M.write (|
                                                              M.read (| acc |),
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Add",
                                                                  Ty.associated,
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [ Ty.associated ]
                                                                  ],
                                                                  "add",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| M.read (| acc |) |);
                                                                  running_sum
                                                                ]
                                                              |)
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                            |)))
                                      ]
                                    |))))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _ => M.impossible
    end.
  
  Module multiexp_serial.
    (*
        fn get_at<F: PrimeField>(segment: usize, c: usize, bytes: &F::Repr) -> usize {
            let skip_bits = segment * c;
            let skip_bytes = skip_bits / 8;
    
            if skip_bytes >= 32 {
                return 0;
            }
    
            let mut v = [0; 8];
            for (v, o) in v.iter_mut().zip(bytes.as_ref()[skip_bytes..].iter()) {
                *v = *o;
            }
    
            let mut tmp = u64::from_le_bytes(v);
            tmp >>= skip_bits - (skip_bytes * 8);
            tmp = tmp % (1 << c);
    
            tmp as usize
        }
    *)
    Definition get_at (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ F ], [ segment; c; bytes ] =>
        ltac:(M.monadic
          (let segment := M.alloc (| segment |) in
          let c := M.alloc (| c |) in
          let bytes := M.alloc (| bytes |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let skip_bits :=
                  M.alloc (|
                    BinOp.Panic.mul (| Integer.Usize, M.read (| segment |), M.read (| c |) |)
                  |) in
                let skip_bytes :=
                  M.alloc (|
                    BinOp.Panic.div (| Integer.Usize, M.read (| skip_bits |), Value.Integer 8 |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.Pure.ge (M.read (| skip_bytes |)) (Value.Integer 32)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (| M.read (| M.return_ (| Value.Integer 0 |) |) |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let v := M.alloc (| repeat (Value.Integer 0) 8 |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::zip::Zip")
                              [
                                Ty.apply (Ty.path "core::slice::iter::IterMut") [ Ty.path "u8" ];
                                Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u8" ]
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply (Ty.path "core::slice::iter::IterMut") [ Ty.path "u8" ],
                                [],
                                "zip",
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u8" ] ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                                    "iter_mut",
                                    []
                                  |),
                                  [ (* Unsize *) M.pointer_coercion v ]
                                |);
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                                    "iter",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::index::Index",
                                        Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeFrom")
                                            [ Ty.path "usize" ]
                                        ],
                                        "index",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::convert::AsRef",
                                            Ty.associated,
                                            [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ],
                                            "as_ref",
                                            []
                                          |),
                                          [ M.read (| bytes |) ]
                                        |);
                                        Value.StructRecord
                                          "core::ops::range::RangeFrom"
                                          [ ("start", M.read (| skip_bytes |)) ]
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::zip::Zip")
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                [ Ty.path "u8" ];
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [ Ty.path "u8" ]
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                          let v := M.copy (| γ1_0 |) in
                                          let o := M.copy (| γ1_1 |) in
                                          let _ :=
                                            M.write (|
                                              M.read (| v |),
                                              M.read (| M.read (| o |) |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let tmp :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (| Ty.path "u64", "from_le_bytes", [] |),
                      [ M.read (| v |) ]
                    |)
                  |) in
                let _ :=
                  let β := tmp in
                  M.write (|
                    β,
                    BinOp.Panic.shr (|
                      M.read (| β |),
                      BinOp.Panic.sub (|
                        Integer.Usize,
                        M.read (| skip_bits |),
                        BinOp.Panic.mul (|
                          Integer.Usize,
                          M.read (| skip_bytes |),
                          Value.Integer 8
                        |)
                      |)
                    |)
                  |) in
                let _ :=
                  M.write (|
                    tmp,
                    BinOp.Panic.rem (|
                      Integer.U64,
                      M.read (| tmp |),
                      BinOp.Panic.shl (| Value.Integer 1, M.read (| c |) |)
                    |)
                  |) in
                M.alloc (| M.rust_cast (M.read (| tmp |)) |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
    Enum Bucket
    {
      ty_params := [ "C" ];
      variants :=
        [
          {
            name := "None";
            item := StructTuple [];
            discriminant := None;
          };
          {
            name := "Affine";
            item := StructTuple [ C ];
            discriminant := None;
          };
          {
            name := "Projective";
            item := StructTuple [ Ty.associated ];
            discriminant := None;
          }
        ];
    }
    *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_clone_Clone_associated_type_for_halo2_proofs_arithmetic_multiexp_serial_Bucket_C.
      Definition Self (C : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::arithmetic::multiexp_serial::Bucket") [ C ].
      
      (*         Clone *)
      Definition clone (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::arithmetic::multiexp_serial::Bucket::None"
                          []
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::arithmetic::multiexp_serial::Bucket::Affine",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::arithmetic::multiexp_serial::Bucket::Affine"
                          [
                            M.call_closure (|
                              M.get_trait_method (| "core::clone::Clone", C, [], "clone", [] |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::arithmetic::multiexp_serial::Bucket::Projective",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::arithmetic::multiexp_serial::Bucket::Projective"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.associated,
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (C : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self C)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone C)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_clone_Clone_associated_type_for_halo2_proofs_arithmetic_multiexp_serial_Bucket_C.
    
    Module Impl_core_marker_Copy_where_core_marker_Copy_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_marker_Copy_associated_type_for_halo2_proofs_arithmetic_multiexp_serial_Bucket_C.
      Definition Self (C : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::arithmetic::multiexp_serial::Bucket") [ C ].
      
      Axiom Implements :
        forall (C : Ty.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (Self C)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_where_core_marker_Copy_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_marker_Copy_associated_type_for_halo2_proofs_arithmetic_multiexp_serial_Bucket_C.
    
    Module Impl_halo2_proofs_arithmetic_multiexp_serial_Bucket_C.
      Definition Self (C : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::arithmetic::multiexp_serial::Bucket") [ C ].
      
      (*
                  fn add_assign(&mut self, other: &C) {
                      *self = match *self {
                          Bucket::None => Bucket::Affine( *other),
                          Bucket::Affine(a) => Bucket::Projective(a + *other),
                          Bucket::Projective(mut a) => {
                              a += *other;
                              Bucket::Projective(a)
                          }
                      }
                  }
      *)
      Definition add_assign (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.write (|
                M.read (| self |),
                M.read (|
                  M.match_operator (|
                    M.read (| self |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "halo2_proofs::arithmetic::multiexp_serial::Bucket::Affine"
                              [ M.read (| M.read (| other |) |) ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "halo2_proofs::arithmetic::multiexp_serial::Bucket::Affine",
                              0
                            |) in
                          let a := M.copy (| γ0_0 |) in
                          M.alloc (|
                            Value.StructTuple
                              "halo2_proofs::arithmetic::multiexp_serial::Bucket::Projective"
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::arith::Add",
                                    C,
                                    [ C ],
                                    "add",
                                    []
                                  |),
                                  [ M.read (| a |); M.read (| M.read (| other |) |) ]
                                |)
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "halo2_proofs::arithmetic::multiexp_serial::Bucket::Projective",
                              0
                            |) in
                          let a := M.copy (| γ0_0 |) in
                          let _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::arith::AddAssign",
                                  Ty.associated,
                                  [ C ],
                                  "add_assign",
                                  []
                                |),
                                [ a; M.read (| M.read (| other |) |) ]
                              |)
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "halo2_proofs::arithmetic::multiexp_serial::Bucket::Projective"
                              [ M.read (| a |) ]
                          |)))
                    ]
                  |)
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_add_assign :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "add_assign" (add_assign C).
      
      (*
                  fn add(self, mut other: C::Curve) -> C::Curve {
                      match self {
                          Bucket::None => other,
                          Bucket::Affine(a) => {
                              other += a;
                              other
                          }
                          Bucket::Projective(a) => other + &a,
                      }
                  }
      *)
      Definition add (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ => ltac:(M.monadic other);
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::arithmetic::multiexp_serial::Bucket::Affine",
                          0
                        |) in
                      let a := M.copy (| γ0_0 |) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::arith::AddAssign",
                              Ty.associated,
                              [ C ],
                              "add_assign",
                              []
                            |),
                            [ other; M.read (| a |) ]
                          |)
                        |) in
                      other));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::arithmetic::multiexp_serial::Bucket::Projective",
                          0
                        |) in
                      let a := M.copy (| γ0_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::arith::Add",
                            Ty.associated,
                            [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                            "add",
                            []
                          |),
                          [ M.read (| other |); a ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_add :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "add" (add C).
    End Impl_halo2_proofs_arithmetic_multiexp_serial_Bucket_C.
  End multiexp_serial.
  
  (*
  pub fn small_multiexp<C: CurveAffine>(coeffs: &[C::Scalar], bases: &[C]) -> C::Curve {
      let coeffs: Vec<_> = coeffs.iter().map(|a| a.to_repr()).collect();
      let mut acc = C::Curve::identity();
  
      // for byte idx
      for byte_idx in (0..32).rev() {
          // for bit idx
          for bit_idx in (0..8).rev() {
              acc = acc.double();
              // for each coeff
              for coeff_idx in 0..coeffs.len() {
                  let byte = coeffs[coeff_idx].as_ref()[byte_idx];
                  if ((byte >> bit_idx) & 1) != 0 {
                      acc += bases[coeff_idx];
                  }
              }
          }
      }
  
      acc
  }
  *)
  Definition small_multiexp (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ C ], [ coeffs; bases ] =>
      ltac:(M.monadic
        (let coeffs := M.alloc (| coeffs |) in
        let bases := M.alloc (| bases |) in
        M.read (|
          let coeffs :=
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    [
                      Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.associated ];
                      Ty.function
                        [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.associated ] ] ]
                        Ty.associated
                    ],
                  [],
                  "collect",
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                  ]
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.associated ],
                      [],
                      "map",
                      [
                        Ty.associated;
                        Ty.function
                          [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.associated ] ] ]
                          Ty.associated
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [ Ty.associated ],
                          "iter",
                          []
                        |),
                        [ M.read (| coeffs |) ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let a := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "ff::PrimeField",
                                          Ty.associated,
                                          [],
                                          "to_repr",
                                          []
                                        |),
                                        [ M.read (| a |) ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                ]
              |)
            |) in
          let acc :=
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (| "group::Group", Ty.associated, [], "identity", [] |),
                []
              |)
            |) in
          let _ :=
            M.use
              (M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::rev::Rev")
                        [ Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ] ],
                      [],
                      "into_iter",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                          [],
                          "rev",
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [ ("start", Value.Integer 0); ("end_", Value.Integer 32) ]
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        ltac:(M.monadic
                          (let _ :=
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::rev::Rev")
                                      [
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [ Ty.path "usize" ]
                                      ],
                                    [],
                                    "next",
                                    []
                                  |),
                                  [ iter ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let byte_idx := M.copy (| γ0_0 |) in
                                    M.use
                                      (M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::rev::Rev")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    [ Ty.path "i32" ]
                                                ],
                                              [],
                                              "into_iter",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    [ Ty.path "i32" ],
                                                  [],
                                                  "rev",
                                                  []
                                                |),
                                                [
                                                  Value.StructRecord
                                                    "core::ops::range::Range"
                                                    [
                                                      ("start", Value.Integer 0);
                                                      ("end_", Value.Integer 8)
                                                    ]
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let iter := M.copy (| γ |) in
                                              M.loop (|
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::rev::Rev")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::range::Range")
                                                                  [ Ty.path "i32" ]
                                                              ],
                                                            [],
                                                            "next",
                                                            []
                                                          |),
                                                          [ iter ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let bit_idx := M.copy (| γ0_0 |) in
                                                            let _ :=
                                                              M.write (|
                                                                acc,
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "group::Group",
                                                                    Ty.associated,
                                                                    [],
                                                                    "double",
                                                                    []
                                                                  |),
                                                                  [ acc ]
                                                                |)
                                                              |) in
                                                            M.use
                                                              (M.match_operator (|
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::collect::IntoIterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::ops::range::Range")
                                                                        [ Ty.path "usize" ],
                                                                      [],
                                                                      "into_iter",
                                                                      []
                                                                    |),
                                                                    [
                                                                      Value.StructRecord
                                                                        "core::ops::range::Range"
                                                                        [
                                                                          ("start",
                                                                            Value.Integer 0);
                                                                          ("end_",
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.associated;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                "len",
                                                                                []
                                                                              |),
                                                                              [ coeffs ]
                                                                            |))
                                                                        ]
                                                                    ]
                                                                  |)
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let iter := M.copy (| γ |) in
                                                                      M.loop (|
                                                                        ltac:(M.monadic
                                                                          (let _ :=
                                                                            M.match_operator (|
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::ops::range::Range")
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ],
                                                                                    [],
                                                                                    "next",
                                                                                    []
                                                                                  |),
                                                                                  [ iter ]
                                                                                |)
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (M.alloc (|
                                                                                      M.never_to_any (|
                                                                                        M.read (|
                                                                                          M.break (||)
                                                                                        |)
                                                                                      |)
                                                                                    |)));
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ0_0 :=
                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                        γ,
                                                                                        "core::option::Option::Some",
                                                                                        0
                                                                                      |) in
                                                                                    let coeff_idx :=
                                                                                      M.copy (|
                                                                                        γ0_0
                                                                                      |) in
                                                                                    let byte :=
                                                                                      M.copy (|
                                                                                        M.SubPointer.get_array_field (|
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::convert::AsRef",
                                                                                              Ty.associated,
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "slice")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "u8"
                                                                                                  ]
                                                                                              ],
                                                                                              "as_ref",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::index::Index",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    [
                                                                                                      Ty.associated;
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ],
                                                                                                  "index",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  coeffs;
                                                                                                  M.read (|
                                                                                                    coeff_idx
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |),
                                                                                          byte_idx
                                                                                        |)
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ :=
                                                                                              M.use
                                                                                                (M.alloc (|
                                                                                                  BinOp.Pure.ne
                                                                                                    (BinOp.Pure.bit_and
                                                                                                      (BinOp.Panic.shr (|
                                                                                                        M.read (|
                                                                                                          byte
                                                                                                        |),
                                                                                                        M.read (|
                                                                                                          bit_idx
                                                                                                        |)
                                                                                                      |))
                                                                                                      (Value.Integer
                                                                                                        1))
                                                                                                    (Value.Integer
                                                                                                      0)
                                                                                                |)) in
                                                                                            let _ :=
                                                                                              M.is_constant_or_break_match (|
                                                                                                M.read (|
                                                                                                  γ
                                                                                                |),
                                                                                                Value.Bool
                                                                                                  true
                                                                                              |) in
                                                                                            let _ :=
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::AddAssign",
                                                                                                    Ty.associated,
                                                                                                    [
                                                                                                      C
                                                                                                    ],
                                                                                                    "add_assign",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    acc;
                                                                                                    M.read (|
                                                                                                      M.SubPointer.get_array_field (|
                                                                                                        M.read (|
                                                                                                          bases
                                                                                                        |),
                                                                                                        coeff_idx
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Value.Tuple
                                                                                                []
                                                                                            |)));
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (M.alloc (|
                                                                                              Value.Tuple
                                                                                                []
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |) in
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |)))
                                                                      |)))
                                                                ]
                                                              |))))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                              |)))
                                        ]
                                      |))))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          acc
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub fn best_multiexp_gpu_cond<C: CurveAffine>(coeffs: &[C::Scalar], bases: &[C]) -> C::Curve {
      if coeffs.len() == 0 {
          C::Curve::identity()
      } else {
          if coeffs.len() > 1 << 14 {
              cfg_if::cfg_if! {
                  if #[cfg(feature = "cuda")] {
                      gpu_multiexp(coeffs, bases)
                  } else {
                      best_multiexp(coeffs, bases)
                  }
              }
          } else {
              best_multiexp(coeffs, bases)
          }
      }
  }
  *)
  Definition best_multiexp_gpu_cond (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ C ], [ coeffs; bases ] =>
      ltac:(M.monadic
        (let coeffs := M.alloc (| coeffs |) in
        let bases := M.alloc (| bases |) in
        M.read (|
          M.match_operator (|
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        BinOp.Pure.eq
                          (M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [ Ty.associated ],
                              "len",
                              []
                            |),
                            [ M.read (| coeffs |) ]
                          |))
                          (Value.Integer 0)
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (| "group::Group", Ty.associated, [], "identity", [] |),
                      []
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.Pure.gt
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [ Ty.associated ],
                                      "len",
                                      []
                                    |),
                                    [ M.read (| coeffs |) ]
                                  |))
                                  (BinOp.Panic.shl (| Value.Integer 1, Value.Integer 14 |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_function (| "halo2_proofs::arithmetic::best_multiexp", [ C ] |),
                              [ M.read (| coeffs |); M.read (| bases |) ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.call_closure (|
                              M.get_function (| "halo2_proofs::arithmetic::best_multiexp", [ C ] |),
                              [ M.read (| coeffs |); M.read (| bases |) ]
                            |)
                          |)))
                    ]
                  |)))
            ]
          |)
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub fn best_multiexp<C: CurveAffine>(coeffs: &[C::Scalar], bases: &[C]) -> C::Curve {
      assert_eq!(coeffs.len(), bases.len());
  
      let num_threads = multicore::current_num_threads();
      if coeffs.len() > num_threads {
          let chunk = coeffs.len() / num_threads;
          let num_chunks = coeffs.chunks(chunk).len();
          let mut results = vec![C::Curve::identity(); num_chunks];
          multicore::scope(|scope| {
              let chunk = coeffs.len() / num_threads;
  
              for ((coeffs, bases), acc) in coeffs
                  .chunks(chunk)
                  .zip(bases.chunks(chunk))
                  .zip(results.iter_mut())
              {
                  scope.spawn(move |_| {
                      multiexp_serial(coeffs, bases, acc);
                  });
              }
          });
          results.iter().fold(C::Curve::identity(), |a, b| a + b)
      } else {
          let mut acc = C::Curve::identity();
          multiexp_serial(coeffs, bases, &mut acc);
          acc
      }
  }
  *)
  Definition best_multiexp (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ C ], [ coeffs; bases ] =>
      ltac:(M.monadic
        (let coeffs := M.alloc (| coeffs |) in
        let bases := M.alloc (| bases |) in
        M.read (|
          let _ :=
            M.match_operator (|
              M.alloc (|
                Value.Tuple
                  [
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [ Ty.associated ],
                          "len",
                          []
                        |),
                        [ M.read (| coeffs |) ]
                      |)
                    |);
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (| Ty.apply (Ty.path "slice") [ C ], "len", [] |),
                        [ M.read (| bases |) ]
                      |)
                    |)
                  ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let left_val := M.copy (| γ0_0 |) in
                    let right_val := M.copy (| γ0_1 |) in
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.Pure.not
                                    (BinOp.Pure.eq
                                      (M.read (| M.read (| left_val |) |))
                                      (M.read (| M.read (| right_val |) |)))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  let kind :=
                                    M.alloc (|
                                      Value.StructTuple "core::panicking::AssertKind::Eq" []
                                    |) in
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_function (|
                                        "core::panicking::assert_failed",
                                        [ Ty.path "usize"; Ty.path "usize" ]
                                      |),
                                      [
                                        M.read (| kind |);
                                        M.read (| left_val |);
                                        M.read (| right_val |);
                                        Value.StructTuple "core::option::Option::None" []
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |)))
              ]
            |) in
          let num_threads :=
            M.alloc (|
              M.call_closure (| M.get_function (| "rayon_core::current_num_threads", [] |), [] |)
            |) in
          M.match_operator (|
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        BinOp.Pure.gt
                          (M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [ Ty.associated ],
                              "len",
                              []
                            |),
                            [ M.read (| coeffs |) ]
                          |))
                          (M.read (| num_threads |))
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  let chunk :=
                    M.alloc (|
                      BinOp.Panic.div (|
                        Integer.Usize,
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [ Ty.associated ],
                            "len",
                            []
                          |),
                          [ M.read (| coeffs |) ]
                        |),
                        M.read (| num_threads |)
                      |)
                    |) in
                  let num_chunks :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::exact_size::ExactSizeIterator",
                          Ty.apply (Ty.path "core::slice::iter::Chunks") [ Ty.associated ],
                          [],
                          "len",
                          []
                        |),
                        [
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [ Ty.associated ],
                                "chunks",
                                []
                              |),
                              [ M.read (| coeffs |); M.read (| chunk |) ]
                            |)
                          |)
                        ]
                      |)
                    |) in
                  let results :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (| "alloc::vec::from_elem", [ Ty.associated ] |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "group::Group",
                              Ty.associated,
                              [],
                              "identity",
                              []
                            |),
                            []
                          |);
                          M.read (| num_chunks |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (|
                          "rayon_core::scope::scope",
                          [
                            Ty.function
                              [
                                Ty.tuple
                                  [ Ty.apply (Ty.path "&") [ Ty.path "rayon_core::scope::Scope" ] ]
                              ]
                              (Ty.tuple []);
                            Ty.tuple []
                          ]
                        |),
                        [
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let scope := M.copy (| γ |) in
                                          M.read (|
                                            let chunk :=
                                              M.alloc (|
                                                BinOp.Panic.div (|
                                                  Integer.Usize,
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply (Ty.path "slice") [ Ty.associated ],
                                                      "len",
                                                      []
                                                    |),
                                                    [ M.read (| coeffs |) ]
                                                  |),
                                                  M.read (| num_threads |)
                                                |)
                                              |) in
                                            M.use
                                              (M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::Chunks")
                                                                [ Ty.associated ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::Chunks")
                                                                [ C ]
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            [ Ty.associated ]
                                                        ],
                                                      [],
                                                      "into_iter",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::Chunks")
                                                                [ Ty.associated ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::Chunks")
                                                                [ C ]
                                                            ],
                                                          [],
                                                          "zip",
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              [ Ty.associated ]
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::Chunks")
                                                                [ Ty.associated ],
                                                              [],
                                                              "zip",
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Chunks")
                                                                  [ C ]
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [ Ty.associated ],
                                                                  "chunks",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| coeffs |);
                                                                  M.read (| chunk |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply (Ty.path "slice") [ C ],
                                                                  "chunks",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| bases |);
                                                                  M.read (| chunk |)
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [ Ty.associated ],
                                                              "iter_mut",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::DerefMut",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.associated;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "deref_mut",
                                                                  []
                                                                |),
                                                                [ results ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let iter := M.copy (| γ |) in
                                                      M.loop (|
                                                        ltac:(M.monadic
                                                          (let _ :=
                                                            M.match_operator (|
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::zip::Zip")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::zip::Zip")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Chunks")
                                                                              [ Ty.associated ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Chunks")
                                                                              [ C ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::IterMut")
                                                                          [ Ty.associated ]
                                                                      ],
                                                                    [],
                                                                    "next",
                                                                    []
                                                                  |),
                                                                  [ iter ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (| M.break (||) |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let γ1_0 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ0_0,
                                                                        0
                                                                      |) in
                                                                    let γ1_1 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ0_0,
                                                                        1
                                                                      |) in
                                                                    let γ2_0 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ1_0,
                                                                        0
                                                                      |) in
                                                                    let γ2_1 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ1_0,
                                                                        1
                                                                      |) in
                                                                    let coeffs :=
                                                                      M.copy (| γ2_0 |) in
                                                                    let bases :=
                                                                      M.copy (| γ2_1 |) in
                                                                    let acc := M.copy (| γ1_1 |) in
                                                                    let _ :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "rayon_core::scope::Scope",
                                                                            "spawn",
                                                                            [
                                                                              Ty.function
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        [
                                                                                          Ty.path
                                                                                            "rayon_core::scope::Scope"
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                                (Ty.tuple [])
                                                                            ]
                                                                          |),
                                                                          [
                                                                            M.read (| scope |);
                                                                            M.closure
                                                                              (fun γ =>
                                                                                ltac:(M.monadic
                                                                                  match γ with
                                                                                  | [ α0 ] =>
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α0
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (M.read (|
                                                                                              let
                                                                                                    _ :=
                                                                                                M.alloc (|
                                                                                                  M.call_closure (|
                                                                                                    M.get_function (|
                                                                                                      "halo2_proofs::arithmetic::multiexp_serial",
                                                                                                      [
                                                                                                        C
                                                                                                      ]
                                                                                                    |),
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        coeffs
                                                                                                      |);
                                                                                                      M.read (|
                                                                                                        bases
                                                                                                      |);
                                                                                                      M.read (|
                                                                                                        acc
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                |) in
                                                                                              M.alloc (|
                                                                                                Value.Tuple
                                                                                                  []
                                                                                              |)
                                                                                            |)))
                                                                                      ]
                                                                                    |)
                                                                                  | _ =>
                                                                                    M.impossible (||)
                                                                                  end))
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                      |)))
                                                ]
                                              |))
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.associated ],
                        [],
                        "fold",
                        [
                          Ty.associated;
                          Ty.function
                            [ Ty.tuple [ Ty.associated; Ty.apply (Ty.path "&") [ Ty.associated ] ] ]
                            Ty.associated
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [ Ty.associated ],
                            "iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                [],
                                "deref",
                                []
                              |),
                              [ results ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          M.get_trait_method (|
                            "group::Group",
                            Ty.associated,
                            [],
                            "identity",
                            []
                          |),
                          []
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0; α1 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let a := M.copy (| γ |) in
                                        M.match_operator (|
                                          M.alloc (| α1 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let b := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Add",
                                                    Ty.associated,
                                                    [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                                    "add",
                                                    []
                                                  |),
                                                  [ M.read (| a |); M.read (| b |) ]
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let acc :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (| "group::Group", Ty.associated, [], "identity", [] |),
                        []
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (| "halo2_proofs::arithmetic::multiexp_serial", [ C ] |),
                        [ M.read (| coeffs |); M.read (| bases |); acc ]
                      |)
                    |) in
                  acc))
            ]
          |)
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub fn best_fft<G: Group>(a: &mut [G], omega: G::Scalar, log_n: u32) {
      cfg_if::cfg_if! {
          if #[cfg(feature = "cuda")]{
              return gpu_fft(a, omega, log_n);
          } else {
              return best_fft_cpu(a, omega, log_n);
          }
      }
  }
  *)
  Definition best_fft (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ G ], [ a; omega; log_n ] =>
      ltac:(M.monadic
        (let a := M.alloc (| a |) in
        let omega := M.alloc (| omega |) in
        let log_n := M.alloc (| log_n |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.never_to_any (|
              M.read (|
                M.return_ (|
                  M.call_closure (|
                    M.get_function (| "halo2_proofs::arithmetic::best_fft_cpu", [ G ] |),
                    [ M.read (| a |); M.read (| omega |); M.read (| log_n |) ]
                  |)
                |)
              |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub fn best_fft_cpu<G: Group>(a: &mut [G], omega: G::Scalar, log_n: u32) {
      fn bitreverse(mut n: usize, l: usize) -> usize {
          let mut r = 0;
          for _ in 0..l {
              r = (r << 1) | (n & 1);
              n >>= 1;
          }
          r
      }
  
      let threads = multicore::current_num_threads();
      let log_threads = log2_floor(threads);
      let n = a.len() as usize;
      assert_eq!(n, 1 << log_n);
  
      for k in 0..n {
          let rk = bitreverse(k, log_n as usize);
          if k < rk {
              a.swap(rk, k);
          }
      }
  
      //let timer1 = start_timer!(|| format!("prepare do fft {}", log_n));
      // precompute twiddle factors
      let mut twiddles: Vec<_> = (0..(n / 2) as usize)
          .into_iter()
          .map(|_| G::Scalar::one())
          .collect();
  
      let chunck_size = 1 << 14;
      let block_size = 1 << 10;
  
      if n / 2 < chunck_size {
          for i in 1..n / 2 {
              twiddles[i] = twiddles[i - 1] * omega;
          }
      } else {
          for i in 1..chunck_size {
              twiddles[i] = twiddles[i - 1] * omega;
          }
  
          let base = twiddles[chunck_size - 1] * omega;
          let mut chunks = twiddles.chunks_mut(chunck_size);
          let mut prev = chunks.next().unwrap();
  
          chunks.for_each(|curr| {
              curr.par_chunks_mut(block_size)
                  .enumerate()
                  .for_each(|(i, v)| {
                      v.iter_mut().enumerate().for_each(|(j, v)| {
                          *v = base * prev[i * block_size + j];
                      });
                  });
              prev = curr;
          });
      }
  
      if log_n <= log_threads {
          let mut chunk = 2_usize;
          let mut twiddle_chunk = (n / 2) as usize;
          for _ in 0..log_n {
              a.chunks_mut(chunk).for_each(|coeffs| {
                  let (left, right) = coeffs.split_at_mut(chunk / 2);
  
                  // case when twiddle factor is one
                  let (a, left) = left.split_at_mut(1);
                  let (b, right) = right.split_at_mut(1);
                  let t = b[0];
                  b[0] = a[0];
                  a[0].group_add(&t);
                  b[0].group_sub(&t);
  
                  left.iter_mut()
                      .zip(right.iter_mut())
                      .enumerate()
                      .for_each(|(i, (a, b))| {
                          let mut t = *b;
                          t.group_scale(&twiddles[(i + 1) * twiddle_chunk]);
                          *b = *a;
                          a.group_add(&t);
                          b.group_sub(&t);
                      });
              });
              chunk *= 2;
              twiddle_chunk /= 2;
          }
      } else {
          recursive_butterfly_arithmetic(a, n, 1, &twiddles, 0)
      }
  }
  *)
  Definition best_fft_cpu (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ G ], [ a; omega; log_n ] =>
      ltac:(M.monadic
        (let a := M.alloc (| a |) in
        let omega := M.alloc (| omega |) in
        let log_n := M.alloc (| log_n |) in
        M.read (|
          let threads :=
            M.alloc (|
              M.call_closure (| M.get_function (| "rayon_core::current_num_threads", [] |), [] |)
            |) in
          let log_threads :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "halo2_proofs::arithmetic::log2_floor", [] |),
                [ M.read (| threads |) ]
              |)
            |) in
          let n :=
            M.copy (|
              M.use
                (M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (| Ty.apply (Ty.path "slice") [ G ], "len", [] |),
                    [ M.read (| a |) ]
                  |)
                |))
            |) in
          let _ :=
            M.match_operator (|
              M.alloc (|
                Value.Tuple
                  [ n; M.alloc (| BinOp.Panic.shl (| Value.Integer 1, M.read (| log_n |) |) |) ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let left_val := M.copy (| γ0_0 |) in
                    let right_val := M.copy (| γ0_1 |) in
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.Pure.not
                                    (BinOp.Pure.eq
                                      (M.read (| M.read (| left_val |) |))
                                      (M.read (| M.read (| right_val |) |)))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  let kind :=
                                    M.alloc (|
                                      Value.StructTuple "core::panicking::AssertKind::Eq" []
                                    |) in
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_function (|
                                        "core::panicking::assert_failed",
                                        [ Ty.path "usize"; Ty.path "usize" ]
                                      |),
                                      [
                                        M.read (| kind |);
                                        M.read (| left_val |);
                                        M.read (| right_val |);
                                        Value.StructTuple "core::option::Option::None" []
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |)))
              ]
            |) in
          let _ :=
            M.use
              (M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                      [],
                      "into_iter",
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [ ("start", Value.Integer 0); ("end_", M.read (| n |)) ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        ltac:(M.monadic
                          (let _ :=
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ],
                                    [],
                                    "next",
                                    []
                                  |),
                                  [ iter ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let k := M.copy (| γ0_0 |) in
                                    let rk :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "halo2_proofs::arithmetic::best_fft_cpu.bitreverse",
                                            []
                                          |),
                                          [ M.read (| k |); M.rust_cast (M.read (| log_n |)) ]
                                        |)
                                      |) in
                                    M.match_operator (|
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  BinOp.Pure.lt (M.read (| k |)) (M.read (| rk |))
                                                |)) in
                                            let _ :=
                                              M.is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            let _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [ G ],
                                                    "swap",
                                                    []
                                                  |),
                                                  [ M.read (| a |); M.read (| rk |); M.read (| k |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          let twiddles :=
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    [
                      Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ];
                      Ty.function [ Ty.tuple [ Ty.path "usize" ] ] Ty.associated
                    ],
                  [],
                  "collect",
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                  ]
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                      [],
                      "map",
                      [ Ty.associated; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] Ty.associated ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start", Value.Integer 0);
                              ("end_",
                                M.read (|
                                  M.use
                                    (M.alloc (|
                                      BinOp.Panic.div (|
                                        Integer.Usize,
                                        M.read (| n |),
                                        Value.Integer 2
                                      |)
                                    |))
                                |))
                            ]
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        M.get_trait_method (|
                                          "ff::Field",
                                          Ty.associated,
                                          [],
                                          "one",
                                          []
                                        |),
                                        []
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                ]
              |)
            |) in
          let chunck_size :=
            M.alloc (| BinOp.Panic.shl (| Value.Integer 1, Value.Integer 14 |) |) in
          let block_size := M.alloc (| BinOp.Panic.shl (| Value.Integer 1, Value.Integer 10 |) |) in
          let _ :=
            M.match_operator (|
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          BinOp.Pure.lt
                            (BinOp.Panic.div (| Integer.Usize, M.read (| n |), Value.Integer 2 |))
                            (M.read (| chunck_size |))
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.use
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              Value.StructRecord
                                "core::ops::range::Range"
                                [
                                  ("start", Value.Integer 1);
                                  ("end_",
                                    BinOp.Panic.div (|
                                      Integer.Usize,
                                      M.read (| n |),
                                      Value.Integer 2
                                    |))
                                ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                ltac:(M.monadic
                                  (let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              [ Ty.path "usize" ],
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| γ0_0 |) in
                                            let _ :=
                                              M.write (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::index::IndexMut",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [ Ty.path "usize" ],
                                                    "index_mut",
                                                    []
                                                  |),
                                                  [ twiddles; M.read (| i |) ]
                                                |),
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Mul",
                                                    Ty.associated,
                                                    [ Ty.associated ],
                                                    "mul",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::index::Index",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.associated;
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [ Ty.path "usize" ],
                                                          "index",
                                                          []
                                                        |),
                                                        [
                                                          twiddles;
                                                          BinOp.Panic.sub (|
                                                            Integer.Usize,
                                                            M.read (| i |),
                                                            Value.Integer 1
                                                          |)
                                                        ]
                                                      |)
                                                    |);
                                                    M.read (| omega |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |))));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                Value.StructRecord
                                  "core::ops::range::Range"
                                  [ ("start", Value.Integer 1); ("end_", M.read (| chunck_size |)) ]
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                [ Ty.path "usize" ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let i := M.copy (| γ0_0 |) in
                                              let _ :=
                                                M.write (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::index::IndexMut",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [ Ty.path "usize" ],
                                                      "index_mut",
                                                      []
                                                    |),
                                                    [ twiddles; M.read (| i |) ]
                                                  |),
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Mul",
                                                      Ty.associated,
                                                      [ Ty.associated ],
                                                      "mul",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [ Ty.path "usize" ],
                                                            "index",
                                                            []
                                                          |),
                                                          [
                                                            twiddles;
                                                            BinOp.Panic.sub (|
                                                              Integer.Usize,
                                                              M.read (| i |),
                                                              Value.Integer 1
                                                            |)
                                                          ]
                                                        |)
                                                      |);
                                                      M.read (| omega |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    let base :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.associated,
                            [ Ty.associated ],
                            "mul",
                            []
                          |),
                          [
                            M.read (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::index::Index",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                  [ Ty.path "usize" ],
                                  "index",
                                  []
                                |),
                                [
                                  twiddles;
                                  BinOp.Panic.sub (|
                                    Integer.Usize,
                                    M.read (| chunck_size |),
                                    Value.Integer 1
                                  |)
                                ]
                              |)
                            |);
                            M.read (| omega |)
                          ]
                        |)
                      |) in
                    let chunks :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [ Ty.associated ],
                            "chunks_mut",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                [],
                                "deref_mut",
                                []
                              |),
                              [ twiddles ]
                            |);
                            M.read (| chunck_size |)
                          ]
                        |)
                      |) in
                    let prev :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [ Ty.apply (Ty.path "slice") [ Ty.associated ] ]
                              ],
                            "unwrap",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply (Ty.path "core::slice::iter::ChunksMut") [ Ty.associated ],
                                [],
                                "next",
                                []
                              |),
                              [ chunks ]
                            |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::slice::iter::ChunksMut") [ Ty.associated ],
                            [],
                            "for_each",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [ Ty.apply (Ty.path "slice") [ Ty.associated ] ]
                                    ]
                                ]
                                (Ty.tuple [])
                            ]
                          |),
                          [
                            M.read (| chunks |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let curr := M.copy (| γ |) in
                                            M.read (|
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "rayon::iter::ParallelIterator",
                                                      Ty.apply
                                                        (Ty.path
                                                          "rayon::iter::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "rayon::slice::chunks::ChunksMut")
                                                            [ Ty.associated ]
                                                        ],
                                                      [],
                                                      "for_each",
                                                      [
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [ Ty.associated ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.tuple [])
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "rayon::iter::IndexedParallelIterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "rayon::slice::chunks::ChunksMut")
                                                            [ Ty.associated ],
                                                          [],
                                                          "enumerate",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "rayon::slice::ParallelSliceMut",
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [ Ty.associated ],
                                                              [ Ty.associated ],
                                                              "par_chunks_mut",
                                                              []
                                                            |),
                                                            [
                                                              M.read (| curr |);
                                                              M.read (| block_size |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.closure
                                                        (fun γ =>
                                                          ltac:(M.monadic
                                                            match γ with
                                                            | [ α0 ] =>
                                                              M.match_operator (|
                                                                M.alloc (| α0 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ,
                                                                          0
                                                                        |) in
                                                                      let γ0_1 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ,
                                                                          1
                                                                        |) in
                                                                      let i := M.copy (| γ0_0 |) in
                                                                      let v := M.copy (| γ0_1 |) in
                                                                      M.read (|
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::iter::adapters::enumerate::Enumerate")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::IterMut")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ]
                                                                                  ],
                                                                                [],
                                                                                "for_each",
                                                                                [
                                                                                  Ty.function
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize";
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&mut")
                                                                                                [
                                                                                                  Ty.associated
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                    (Ty.tuple [])
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::IterMut")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ],
                                                                                    [],
                                                                                    "enumerate",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          [
                                                                                            Ty.associated
                                                                                          ],
                                                                                        "iter_mut",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          v
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.closure
                                                                                  (fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      match γ with
                                                                                      | [ α0 ] =>
                                                                                        M.match_operator (|
                                                                                          M.alloc (|
                                                                                            α0
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      γ0_0 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    0
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_1 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    1
                                                                                                  |) in
                                                                                                let
                                                                                                      j :=
                                                                                                  M.copy (|
                                                                                                    γ0_0
                                                                                                  |) in
                                                                                                let
                                                                                                      v :=
                                                                                                  M.copy (|
                                                                                                    γ0_1
                                                                                                  |) in
                                                                                                M.read (|
                                                                                                  let
                                                                                                        _ :=
                                                                                                    M.write (|
                                                                                                      M.read (|
                                                                                                        v
                                                                                                      |),
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::arith::Mul",
                                                                                                          Ty.associated,
                                                                                                          [
                                                                                                            Ty.associated
                                                                                                          ],
                                                                                                          "mul",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            base
                                                                                                          |);
                                                                                                          M.read (|
                                                                                                            M.SubPointer.get_array_field (|
                                                                                                              M.read (|
                                                                                                                prev
                                                                                                              |),
                                                                                                              M.alloc (|
                                                                                                                BinOp.Panic.add (|
                                                                                                                  Integer.Usize,
                                                                                                                  BinOp.Panic.mul (|
                                                                                                                    Integer.Usize,
                                                                                                                    M.read (|
                                                                                                                      i
                                                                                                                    |),
                                                                                                                    M.read (|
                                                                                                                      block_size
                                                                                                                    |)
                                                                                                                  |),
                                                                                                                  M.read (|
                                                                                                                    j
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |) in
                                                                                                  M.alloc (|
                                                                                                    Value.Tuple
                                                                                                      []
                                                                                                  |)
                                                                                                |)))
                                                                                          ]
                                                                                        |)
                                                                                      | _ =>
                                                                                        M.impossible (||)
                                                                                      end))
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        M.alloc (| Value.Tuple [] |)
                                                                      |)))
                                                                ]
                                                              |)
                                                            | _ => M.impossible (||)
                                                            end))
                                                    ]
                                                  |)
                                                |) in
                                              let _ := M.write (| prev, M.read (| curr |) |) in
                                              M.alloc (| Value.Tuple [] |)
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    M.alloc (| Value.Tuple [] |)))
              ]
            |) in
          M.match_operator (|
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        BinOp.Pure.le (M.read (| log_n |)) (M.read (| log_threads |))
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  let chunk := M.alloc (| Value.Integer 2 |) in
                  let twiddle_chunk :=
                    M.copy (|
                      M.use
                        (M.alloc (|
                          BinOp.Panic.div (| Integer.Usize, M.read (| n |), Value.Integer 2 |)
                        |))
                    |) in
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [ ("start", Value.Integer 0); ("end_", M.read (| log_n |)) ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "u32" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::ChunksMut")
                                                    [ G ],
                                                  [],
                                                  "for_each",
                                                  [
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              [ Ty.apply (Ty.path "slice") [ G ] ]
                                                          ]
                                                      ]
                                                      (Ty.tuple [])
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply (Ty.path "slice") [ G ],
                                                      "chunks_mut",
                                                      []
                                                    |),
                                                    [ M.read (| a |); M.read (| chunk |) ]
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          M.match_operator (|
                                                            M.alloc (| α0 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let coeffs := M.copy (| γ |) in
                                                                  M.read (|
                                                                    M.match_operator (|
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [ G ],
                                                                            "split_at_mut",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (| coeffs |);
                                                                            BinOp.Panic.div (|
                                                                              Integer.Usize,
                                                                              M.read (| chunk |),
                                                                              Value.Integer 2
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                0
                                                                              |) in
                                                                            let γ0_1 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                1
                                                                              |) in
                                                                            let left :=
                                                                              M.copy (| γ0_0 |) in
                                                                            let right :=
                                                                              M.copy (| γ0_1 |) in
                                                                            M.match_operator (|
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "slice")
                                                                                      [ G ],
                                                                                    "split_at_mut",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      left
                                                                                    |);
                                                                                    Value.Integer 1
                                                                                  ]
                                                                                |)
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ0_0 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        0
                                                                                      |) in
                                                                                    let γ0_1 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        1
                                                                                      |) in
                                                                                    let a :=
                                                                                      M.copy (|
                                                                                        γ0_0
                                                                                      |) in
                                                                                    let left :=
                                                                                      M.copy (|
                                                                                        γ0_1
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "slice")
                                                                                              [ G ],
                                                                                            "split_at_mut",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              right
                                                                                            |);
                                                                                            Value.Integer
                                                                                              1
                                                                                          ]
                                                                                        |)
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ0_0 :=
                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                γ,
                                                                                                0
                                                                                              |) in
                                                                                            let
                                                                                                  γ0_1 :=
                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                γ,
                                                                                                1
                                                                                              |) in
                                                                                            let b :=
                                                                                              M.copy (|
                                                                                                γ0_0
                                                                                              |) in
                                                                                            let
                                                                                                  right :=
                                                                                              M.copy (|
                                                                                                γ0_1
                                                                                              |) in
                                                                                            let t :=
                                                                                              M.copy (|
                                                                                                M.SubPointer.get_array_field (|
                                                                                                  M.read (|
                                                                                                    b
                                                                                                  |),
                                                                                                  M.alloc (|
                                                                                                    Value.Integer
                                                                                                      0
                                                                                                  |)
                                                                                                |)
                                                                                              |) in
                                                                                            let _ :=
                                                                                              M.write (|
                                                                                                M.SubPointer.get_array_field (|
                                                                                                  M.read (|
                                                                                                    b
                                                                                                  |),
                                                                                                  M.alloc (|
                                                                                                    Value.Integer
                                                                                                      0
                                                                                                  |)
                                                                                                |),
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_array_field (|
                                                                                                    M.read (|
                                                                                                      a
                                                                                                    |),
                                                                                                    M.alloc (|
                                                                                                      Value.Integer
                                                                                                        0
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              |) in
                                                                                            let _ :=
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "pairing_bn256::arithmetic::Group",
                                                                                                    G,
                                                                                                    [],
                                                                                                    "group_add",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.SubPointer.get_array_field (|
                                                                                                      M.read (|
                                                                                                        a
                                                                                                      |),
                                                                                                      M.alloc (|
                                                                                                        Value.Integer
                                                                                                          0
                                                                                                      |)
                                                                                                    |);
                                                                                                    t
                                                                                                  ]
                                                                                                |)
                                                                                              |) in
                                                                                            let _ :=
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "pairing_bn256::arithmetic::Group",
                                                                                                    G,
                                                                                                    [],
                                                                                                    "group_sub",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.SubPointer.get_array_field (|
                                                                                                      M.read (|
                                                                                                        b
                                                                                                      |),
                                                                                                      M.alloc (|
                                                                                                        Value.Integer
                                                                                                          0
                                                                                                      |)
                                                                                                    |);
                                                                                                    t
                                                                                                  ]
                                                                                                |)
                                                                                              |) in
                                                                                            let _ :=
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::iter::adapters::zip::Zip")
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::slice::iter::IterMut")
                                                                                                              [
                                                                                                                G
                                                                                                              ];
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::slice::iter::IterMut")
                                                                                                              [
                                                                                                                G
                                                                                                              ]
                                                                                                          ]
                                                                                                      ],
                                                                                                    [],
                                                                                                    "for_each",
                                                                                                    [
                                                                                                      Ty.function
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "usize";
                                                                                                                  Ty.tuple
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "&mut")
                                                                                                                        [
                                                                                                                          G
                                                                                                                        ];
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "&mut")
                                                                                                                        [
                                                                                                                          G
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                ]
                                                                                                            ]
                                                                                                        ]
                                                                                                        (Ty.tuple
                                                                                                          [])
                                                                                                    ]
                                                                                                  |),
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::iter::adapters::zip::Zip")
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::slice::iter::IterMut")
                                                                                                              [
                                                                                                                G
                                                                                                              ];
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::slice::iter::IterMut")
                                                                                                              [
                                                                                                                G
                                                                                                              ]
                                                                                                          ],
                                                                                                        [],
                                                                                                        "enumerate",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::slice::iter::IterMut")
                                                                                                              [
                                                                                                                G
                                                                                                              ],
                                                                                                            [],
                                                                                                            "zip",
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "core::slice::iter::IterMut")
                                                                                                                [
                                                                                                                  G
                                                                                                                ]
                                                                                                            ]
                                                                                                          |),
                                                                                                          [
                                                                                                            M.call_closure (|
                                                                                                              M.get_associated_function (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "slice")
                                                                                                                  [
                                                                                                                    G
                                                                                                                  ],
                                                                                                                "iter_mut",
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.read (|
                                                                                                                  left
                                                                                                                |)
                                                                                                              ]
                                                                                                            |);
                                                                                                            M.call_closure (|
                                                                                                              M.get_associated_function (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "slice")
                                                                                                                  [
                                                                                                                    G
                                                                                                                  ],
                                                                                                                "iter_mut",
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.read (|
                                                                                                                  right
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      ]
                                                                                                    |);
                                                                                                    M.closure
                                                                                                      (fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          match
                                                                                                            γ
                                                                                                          with
                                                                                                          | [
                                                                                                                α0
                                                                                                              ] =>
                                                                                                            M.match_operator (|
                                                                                                              M.alloc (|
                                                                                                                α0
                                                                                                              |),
                                                                                                              [
                                                                                                                fun
                                                                                                                    γ =>
                                                                                                                  ltac:(M.monadic
                                                                                                                    (let
                                                                                                                          γ0_0 :=
                                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                                        γ,
                                                                                                                        0
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          γ0_1 :=
                                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                                        γ,
                                                                                                                        1
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          i :=
                                                                                                                      M.copy (|
                                                                                                                        γ0_0
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          γ1_0 :=
                                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                                        γ0_1,
                                                                                                                        0
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          γ1_1 :=
                                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                                        γ0_1,
                                                                                                                        1
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          a :=
                                                                                                                      M.copy (|
                                                                                                                        γ1_0
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          b :=
                                                                                                                      M.copy (|
                                                                                                                        γ1_1
                                                                                                                      |) in
                                                                                                                    M.read (|
                                                                                                                      let
                                                                                                                            t :=
                                                                                                                        M.copy (|
                                                                                                                          M.read (|
                                                                                                                            b
                                                                                                                          |)
                                                                                                                        |) in
                                                                                                                      let
                                                                                                                            _ :=
                                                                                                                        M.alloc (|
                                                                                                                          M.call_closure (|
                                                                                                                            M.get_trait_method (|
                                                                                                                              "pairing_bn256::arithmetic::Group",
                                                                                                                              G,
                                                                                                                              [],
                                                                                                                              "group_scale",
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              t;
                                                                                                                              M.call_closure (|
                                                                                                                                M.get_trait_method (|
                                                                                                                                  "core::ops::index::Index",
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "alloc::vec::Vec")
                                                                                                                                    [
                                                                                                                                      Ty.associated;
                                                                                                                                      Ty.path
                                                                                                                                        "alloc::alloc::Global"
                                                                                                                                    ],
                                                                                                                                  [
                                                                                                                                    Ty.path
                                                                                                                                      "usize"
                                                                                                                                  ],
                                                                                                                                  "index",
                                                                                                                                  []
                                                                                                                                |),
                                                                                                                                [
                                                                                                                                  twiddles;
                                                                                                                                  BinOp.Panic.mul (|
                                                                                                                                    Integer.Usize,
                                                                                                                                    BinOp.Panic.add (|
                                                                                                                                      Integer.Usize,
                                                                                                                                      M.read (|
                                                                                                                                        i
                                                                                                                                      |),
                                                                                                                                      Value.Integer
                                                                                                                                        1
                                                                                                                                    |),
                                                                                                                                    M.read (|
                                                                                                                                      twiddle_chunk
                                                                                                                                    |)
                                                                                                                                  |)
                                                                                                                                ]
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                          |)
                                                                                                                        |) in
                                                                                                                      let
                                                                                                                            _ :=
                                                                                                                        M.write (|
                                                                                                                          M.read (|
                                                                                                                            b
                                                                                                                          |),
                                                                                                                          M.read (|
                                                                                                                            M.read (|
                                                                                                                              a
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        |) in
                                                                                                                      let
                                                                                                                            _ :=
                                                                                                                        M.alloc (|
                                                                                                                          M.call_closure (|
                                                                                                                            M.get_trait_method (|
                                                                                                                              "pairing_bn256::arithmetic::Group",
                                                                                                                              G,
                                                                                                                              [],
                                                                                                                              "group_add",
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              M.read (|
                                                                                                                                a
                                                                                                                              |);
                                                                                                                              t
                                                                                                                            ]
                                                                                                                          |)
                                                                                                                        |) in
                                                                                                                      let
                                                                                                                            _ :=
                                                                                                                        M.alloc (|
                                                                                                                          M.call_closure (|
                                                                                                                            M.get_trait_method (|
                                                                                                                              "pairing_bn256::arithmetic::Group",
                                                                                                                              G,
                                                                                                                              [],
                                                                                                                              "group_sub",
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              M.read (|
                                                                                                                                b
                                                                                                                              |);
                                                                                                                              t
                                                                                                                            ]
                                                                                                                          |)
                                                                                                                        |) in
                                                                                                                      M.alloc (|
                                                                                                                        Value.Tuple
                                                                                                                          []
                                                                                                                      |)
                                                                                                                    |)))
                                                                                                              ]
                                                                                                            |)
                                                                                                          | _ =>
                                                                                                            M.impossible (||)
                                                                                                          end))
                                                                                                  ]
                                                                                                |)
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Value.Tuple
                                                                                                []
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  |)))
                                                            ]
                                                          |)
                                                        | _ => M.impossible (||)
                                                        end))
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            let β := chunk in
                                            M.write (|
                                              β,
                                              BinOp.Panic.mul (|
                                                Integer.Usize,
                                                M.read (| β |),
                                                Value.Integer 2
                                              |)
                                            |) in
                                          let _ :=
                                            let β := twiddle_chunk in
                                            M.write (|
                                              β,
                                              BinOp.Panic.div (|
                                                Integer.Usize,
                                                M.read (| β |),
                                                Value.Integer 2
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |))));
              fun γ =>
                ltac:(M.monadic
                  (M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "halo2_proofs::arithmetic::recursive_butterfly_arithmetic",
                        [ G ]
                      |),
                      [
                        M.read (| a |);
                        M.read (| n |);
                        Value.Integer 1;
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                            [],
                            "deref",
                            []
                          |),
                          [ twiddles ]
                        |);
                        Value.Integer 0
                      ]
                    |)
                  |)))
            ]
          |)
        |)))
    | _, _ => M.impossible
    end.
  
  Module best_fft_cpu.
    (*
        fn bitreverse(mut n: usize, l: usize) -> usize {
            let mut r = 0;
            for _ in 0..l {
                r = (r << 1) | (n & 1);
                n >>= 1;
            }
            r
        }
    *)
    Definition bitreverse (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ n; l ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          let l := M.alloc (| l |) in
          M.read (|
            let r := M.alloc (| Value.Integer 0 |) in
            let _ :=
              M.use
                (M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                        [],
                        "into_iter",
                        []
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [ ("start", Value.Integer 0); ("end_", M.read (| l |)) ]
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          ltac:(M.monadic
                            (let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        [ Ty.path "usize" ],
                                      [],
                                      "next",
                                      []
                                    |),
                                    [ iter ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let _ :=
                                        M.write (|
                                          r,
                                          BinOp.Pure.bit_or
                                            (BinOp.Panic.shl (| M.read (| r |), Value.Integer 1 |))
                                            (BinOp.Pure.bit_and (M.read (| n |)) (Value.Integer 1))
                                        |) in
                                      let _ :=
                                        let β := n in
                                        M.write (|
                                          β,
                                          BinOp.Panic.shr (| M.read (| β |), Value.Integer 1 |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            r
          |)))
      | _, _ => M.impossible
      end.
  End best_fft_cpu.
  
  (*
  pub fn recursive_butterfly_arithmetic<G: Group>(
      a: &mut [G],
      n: usize,
      twiddle_chunk: usize,
      twiddles: &[G::Scalar],
      level: u32,
  ) {
      if n == 2 {
          let t = a[1];
          a[1] = a[0];
          a[0].group_add(&t);
          a[1].group_sub(&t);
      } else {
          let (left, right) = a.split_at_mut(n / 2);
  
          rayon::join(
              || recursive_butterfly_arithmetic(left, n / 2, twiddle_chunk * 2, twiddles, level + 1),
              || recursive_butterfly_arithmetic(right, n / 2, twiddle_chunk * 2, twiddles, level + 1),
          );
  
          // case when twiddle factor is one
          let (a, left) = left.split_at_mut(1);
          let (b, right) = right.split_at_mut(1);
          let t = b[0];
          b[0] = a[0];
          a[0].group_add(&t);
          b[0].group_sub(&t);
  
          let chunk_size = 512;
          if n > chunk_size << 2 && level < 4 {
              left.par_chunks_mut(chunk_size)
                  .zip(right.par_chunks_mut(chunk_size))
                  .enumerate()
                  .for_each(|(i, (left, right))| {
                      left.iter_mut()
                          .zip(right.iter_mut())
                          .enumerate()
                          .for_each(|(j, (a, b))| {
                              let mut t = *b;
                              t.group_scale(&twiddles[(i * chunk_size + j + 1) * twiddle_chunk]);
                              *b = *a;
                              a.group_add(&t);
                              b.group_sub(&t);
                          });
                  });
          } else {
              left.iter_mut()
                  .zip(right.iter_mut())
                  .enumerate()
                  .for_each(|(i, (a, b))| {
                      let mut t = *b;
                      t.group_scale(&twiddles[(i + 1) * twiddle_chunk]);
                      *b = *a;
                      a.group_add(&t);
                      b.group_sub(&t);
                  });
          }
      }
  }
  *)
  Definition recursive_butterfly_arithmetic (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ G ], [ a; n; twiddle_chunk; twiddles; level ] =>
      ltac:(M.monadic
        (let a := M.alloc (| a |) in
        let n := M.alloc (| n |) in
        let twiddle_chunk := M.alloc (| twiddle_chunk |) in
        let twiddles := M.alloc (| twiddles |) in
        let level := M.alloc (| level |) in
        M.read (|
          M.match_operator (|
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use (M.alloc (| BinOp.Pure.eq (M.read (| n |)) (Value.Integer 2) |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  let t :=
                    M.copy (|
                      M.SubPointer.get_array_field (|
                        M.read (| a |),
                        M.alloc (| Value.Integer 1 |)
                      |)
                    |) in
                  let _ :=
                    M.write (|
                      M.SubPointer.get_array_field (|
                        M.read (| a |),
                        M.alloc (| Value.Integer 1 |)
                      |),
                      M.read (|
                        M.SubPointer.get_array_field (|
                          M.read (| a |),
                          M.alloc (| Value.Integer 0 |)
                        |)
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "pairing_bn256::arithmetic::Group",
                          G,
                          [],
                          "group_add",
                          []
                        |),
                        [
                          M.SubPointer.get_array_field (|
                            M.read (| a |),
                            M.alloc (| Value.Integer 0 |)
                          |);
                          t
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "pairing_bn256::arithmetic::Group",
                          G,
                          [],
                          "group_sub",
                          []
                        |),
                        [
                          M.SubPointer.get_array_field (|
                            M.read (| a |),
                            M.alloc (| Value.Integer 1 |)
                          |);
                          t
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)));
              fun γ =>
                ltac:(M.monadic
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [ G ],
                          "split_at_mut",
                          []
                        |),
                        [
                          M.read (| a |);
                          BinOp.Panic.div (| Integer.Usize, M.read (| n |), Value.Integer 2 |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let left := M.copy (| γ0_0 |) in
                          let right := M.copy (| γ0_1 |) in
                          let _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_function (|
                                  "rayon_core::join::join",
                                  [
                                    Ty.function [ Ty.tuple [] ] (Ty.tuple []);
                                    Ty.function [ Ty.tuple [] ] (Ty.tuple []);
                                    Ty.tuple [];
                                    Ty.tuple []
                                  ]
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    M.get_function (|
                                                      "halo2_proofs::arithmetic::recursive_butterfly_arithmetic",
                                                      [ G ]
                                                    |),
                                                    [
                                                      M.read (| left |);
                                                      BinOp.Panic.div (|
                                                        Integer.Usize,
                                                        M.read (| n |),
                                                        Value.Integer 2
                                                      |);
                                                      BinOp.Panic.mul (|
                                                        Integer.Usize,
                                                        M.read (| twiddle_chunk |),
                                                        Value.Integer 2
                                                      |);
                                                      M.read (| twiddles |);
                                                      BinOp.Panic.add (|
                                                        Integer.U32,
                                                        M.read (| level |),
                                                        Value.Integer 1
                                                      |)
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end));
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    M.get_function (|
                                                      "halo2_proofs::arithmetic::recursive_butterfly_arithmetic",
                                                      [ G ]
                                                    |),
                                                    [
                                                      M.read (| right |);
                                                      BinOp.Panic.div (|
                                                        Integer.Usize,
                                                        M.read (| n |),
                                                        Value.Integer 2
                                                      |);
                                                      BinOp.Panic.mul (|
                                                        Integer.Usize,
                                                        M.read (| twiddle_chunk |),
                                                        Value.Integer 2
                                                      |);
                                                      M.read (| twiddles |);
                                                      BinOp.Panic.add (|
                                                        Integer.U32,
                                                        M.read (| level |),
                                                        Value.Integer 1
                                                      |)
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |)
                            |) in
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [ G ],
                                  "split_at_mut",
                                  []
                                |),
                                [ M.read (| left |); Value.Integer 1 ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let a := M.copy (| γ0_0 |) in
                                  let left := M.copy (| γ0_1 |) in
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [ G ],
                                          "split_at_mut",
                                          []
                                        |),
                                        [ M.read (| right |); Value.Integer 1 ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let b := M.copy (| γ0_0 |) in
                                          let right := M.copy (| γ0_1 |) in
                                          let t :=
                                            M.copy (|
                                              M.SubPointer.get_array_field (|
                                                M.read (| b |),
                                                M.alloc (| Value.Integer 0 |)
                                              |)
                                            |) in
                                          let _ :=
                                            M.write (|
                                              M.SubPointer.get_array_field (|
                                                M.read (| b |),
                                                M.alloc (| Value.Integer 0 |)
                                              |),
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.read (| a |),
                                                  M.alloc (| Value.Integer 0 |)
                                                |)
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "pairing_bn256::arithmetic::Group",
                                                  G,
                                                  [],
                                                  "group_add",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_array_field (|
                                                    M.read (| a |),
                                                    M.alloc (| Value.Integer 0 |)
                                                  |);
                                                  t
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "pairing_bn256::arithmetic::Group",
                                                  G,
                                                  [],
                                                  "group_sub",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_array_field (|
                                                    M.read (| b |),
                                                    M.alloc (| Value.Integer 0 |)
                                                  |);
                                                  t
                                                ]
                                              |)
                                            |) in
                                          let chunk_size := M.alloc (| Value.Integer 512 |) in
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        LogicalOp.and (|
                                                          BinOp.Pure.gt
                                                            (M.read (| n |))
                                                            (BinOp.Panic.shl (|
                                                              M.read (| chunk_size |),
                                                              Value.Integer 2
                                                            |)),
                                                          ltac:(M.monadic
                                                            (BinOp.Pure.lt
                                                              (M.read (| level |))
                                                              (Value.Integer 4)))
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let _ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "rayon::iter::ParallelIterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "rayon::iter::enumerate::Enumerate")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "rayon::iter::zip::Zip")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "rayon::slice::chunks::ChunksMut")
                                                                    [ G ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "rayon::slice::chunks::ChunksMut")
                                                                    [ G ]
                                                                ]
                                                            ],
                                                          [],
                                                          "for_each",
                                                          [
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  [ G ]
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  [ G ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.tuple [])
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "rayon::iter::IndexedParallelIterator",
                                                              Ty.apply
                                                                (Ty.path "rayon::iter::zip::Zip")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "rayon::slice::chunks::ChunksMut")
                                                                    [ G ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "rayon::slice::chunks::ChunksMut")
                                                                    [ G ]
                                                                ],
                                                              [],
                                                              "enumerate",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "rayon::iter::IndexedParallelIterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "rayon::slice::chunks::ChunksMut")
                                                                    [ G ],
                                                                  [],
                                                                  "zip",
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "rayon::slice::chunks::ChunksMut")
                                                                      [ G ]
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "rayon::slice::ParallelSliceMut",
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        [ G ],
                                                                      [ G ],
                                                                      "par_chunks_mut",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| left |);
                                                                      M.read (| chunk_size |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "rayon::slice::ParallelSliceMut",
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        [ G ],
                                                                      [ G ],
                                                                      "par_chunks_mut",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| right |);
                                                                      M.read (| chunk_size |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  M.match_operator (|
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ,
                                                                              0
                                                                            |) in
                                                                          let γ0_1 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ,
                                                                              1
                                                                            |) in
                                                                          let i :=
                                                                            M.copy (| γ0_0 |) in
                                                                          let γ1_0 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ0_1,
                                                                              0
                                                                            |) in
                                                                          let γ1_1 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ0_1,
                                                                              1
                                                                            |) in
                                                                          let left :=
                                                                            M.copy (| γ1_0 |) in
                                                                          let right :=
                                                                            M.copy (| γ1_1 |) in
                                                                          M.read (|
                                                                            let _ :=
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::adapters::zip::Zip")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::IterMut")
                                                                                              [ G ];
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::IterMut")
                                                                                              [ G ]
                                                                                          ]
                                                                                      ],
                                                                                    [],
                                                                                    "for_each",
                                                                                    [
                                                                                      Ty.function
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize";
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&mut")
                                                                                                        [
                                                                                                          G
                                                                                                        ];
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&mut")
                                                                                                        [
                                                                                                          G
                                                                                                        ]
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                        (Ty.tuple
                                                                                          [])
                                                                                    ]
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::adapters::zip::Zip")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::IterMut")
                                                                                              [ G ];
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::IterMut")
                                                                                              [ G ]
                                                                                          ],
                                                                                        [],
                                                                                        "enumerate",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::IterMut")
                                                                                              [ G ],
                                                                                            [],
                                                                                            "zip",
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::slice::iter::IterMut")
                                                                                                [ G
                                                                                                ]
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "slice")
                                                                                                  [
                                                                                                    G
                                                                                                  ],
                                                                                                "iter_mut",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  left
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "slice")
                                                                                                  [
                                                                                                    G
                                                                                                  ],
                                                                                                "iter_mut",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  right
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.closure
                                                                                      (fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          match γ
                                                                                          with
                                                                                          | [ α0
                                                                                              ] =>
                                                                                            M.match_operator (|
                                                                                              M.alloc (|
                                                                                                α0
                                                                                              |),
                                                                                              [
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (let
                                                                                                          γ0_0 :=
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        γ,
                                                                                                        0
                                                                                                      |) in
                                                                                                    let
                                                                                                          γ0_1 :=
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        γ,
                                                                                                        1
                                                                                                      |) in
                                                                                                    let
                                                                                                          j :=
                                                                                                      M.copy (|
                                                                                                        γ0_0
                                                                                                      |) in
                                                                                                    let
                                                                                                          γ1_0 :=
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        γ0_1,
                                                                                                        0
                                                                                                      |) in
                                                                                                    let
                                                                                                          γ1_1 :=
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        γ0_1,
                                                                                                        1
                                                                                                      |) in
                                                                                                    let
                                                                                                          a :=
                                                                                                      M.copy (|
                                                                                                        γ1_0
                                                                                                      |) in
                                                                                                    let
                                                                                                          b :=
                                                                                                      M.copy (|
                                                                                                        γ1_1
                                                                                                      |) in
                                                                                                    M.read (|
                                                                                                      let
                                                                                                            t :=
                                                                                                        M.copy (|
                                                                                                          M.read (|
                                                                                                            b
                                                                                                          |)
                                                                                                        |) in
                                                                                                      let
                                                                                                            _ :=
                                                                                                        M.alloc (|
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "pairing_bn256::arithmetic::Group",
                                                                                                              G,
                                                                                                              [],
                                                                                                              "group_scale",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              t;
                                                                                                              M.SubPointer.get_array_field (|
                                                                                                                M.read (|
                                                                                                                  twiddles
                                                                                                                |),
                                                                                                                M.alloc (|
                                                                                                                  BinOp.Panic.mul (|
                                                                                                                    Integer.Usize,
                                                                                                                    BinOp.Panic.add (|
                                                                                                                      Integer.Usize,
                                                                                                                      BinOp.Panic.add (|
                                                                                                                        Integer.Usize,
                                                                                                                        BinOp.Panic.mul (|
                                                                                                                          Integer.Usize,
                                                                                                                          M.read (|
                                                                                                                            i
                                                                                                                          |),
                                                                                                                          M.read (|
                                                                                                                            chunk_size
                                                                                                                          |)
                                                                                                                        |),
                                                                                                                        M.read (|
                                                                                                                          j
                                                                                                                        |)
                                                                                                                      |),
                                                                                                                      Value.Integer
                                                                                                                        1
                                                                                                                    |),
                                                                                                                    M.read (|
                                                                                                                      twiddle_chunk
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        |) in
                                                                                                      let
                                                                                                            _ :=
                                                                                                        M.write (|
                                                                                                          M.read (|
                                                                                                            b
                                                                                                          |),
                                                                                                          M.read (|
                                                                                                            M.read (|
                                                                                                              a
                                                                                                            |)
                                                                                                          |)
                                                                                                        |) in
                                                                                                      let
                                                                                                            _ :=
                                                                                                        M.alloc (|
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "pairing_bn256::arithmetic::Group",
                                                                                                              G,
                                                                                                              [],
                                                                                                              "group_add",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.read (|
                                                                                                                a
                                                                                                              |);
                                                                                                              t
                                                                                                            ]
                                                                                                          |)
                                                                                                        |) in
                                                                                                      let
                                                                                                            _ :=
                                                                                                        M.alloc (|
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "pairing_bn256::arithmetic::Group",
                                                                                                              G,
                                                                                                              [],
                                                                                                              "group_sub",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.read (|
                                                                                                                b
                                                                                                              |);
                                                                                                              t
                                                                                                            ]
                                                                                                          |)
                                                                                                        |) in
                                                                                                      M.alloc (|
                                                                                                        Value.Tuple
                                                                                                          []
                                                                                                      |)
                                                                                                    |)))
                                                                                              ]
                                                                                            |)
                                                                                          | _ =>
                                                                                            M.impossible (||)
                                                                                          end))
                                                                                  ]
                                                                                |)
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |)
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                | _ => M.impossible (||)
                                                                end))
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::enumerate::Enumerate")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::zip::Zip")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    [ G ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    [ G ]
                                                                ]
                                                            ],
                                                          [],
                                                          "for_each",
                                                          [
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              [ G ];
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              [ G ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.tuple [])
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::zip::Zip")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    [ G ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    [ G ]
                                                                ],
                                                              [],
                                                              "enumerate",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    [ G ],
                                                                  [],
                                                                  "zip",
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::IterMut")
                                                                      [ G ]
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        [ G ],
                                                                      "iter_mut",
                                                                      []
                                                                    |),
                                                                    [ M.read (| left |) ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        [ G ],
                                                                      "iter_mut",
                                                                      []
                                                                    |),
                                                                    [ M.read (| right |) ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  M.match_operator (|
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ,
                                                                              0
                                                                            |) in
                                                                          let γ0_1 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ,
                                                                              1
                                                                            |) in
                                                                          let i :=
                                                                            M.copy (| γ0_0 |) in
                                                                          let γ1_0 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ0_1,
                                                                              0
                                                                            |) in
                                                                          let γ1_1 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ0_1,
                                                                              1
                                                                            |) in
                                                                          let a :=
                                                                            M.copy (| γ1_0 |) in
                                                                          let b :=
                                                                            M.copy (| γ1_1 |) in
                                                                          M.read (|
                                                                            let t :=
                                                                              M.copy (|
                                                                                M.read (| b |)
                                                                              |) in
                                                                            let _ :=
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "pairing_bn256::arithmetic::Group",
                                                                                    G,
                                                                                    [],
                                                                                    "group_scale",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    t;
                                                                                    M.SubPointer.get_array_field (|
                                                                                      M.read (|
                                                                                        twiddles
                                                                                      |),
                                                                                      M.alloc (|
                                                                                        BinOp.Panic.mul (|
                                                                                          Integer.Usize,
                                                                                          BinOp.Panic.add (|
                                                                                            Integer.Usize,
                                                                                            M.read (|
                                                                                              i
                                                                                            |),
                                                                                            Value.Integer
                                                                                              1
                                                                                          |),
                                                                                          M.read (|
                                                                                            twiddle_chunk
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |) in
                                                                            let _ :=
                                                                              M.write (|
                                                                                M.read (| b |),
                                                                                M.read (|
                                                                                  M.read (| a |)
                                                                                |)
                                                                              |) in
                                                                            let _ :=
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "pairing_bn256::arithmetic::Group",
                                                                                    G,
                                                                                    [],
                                                                                    "group_add",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (| a |);
                                                                                    t
                                                                                  ]
                                                                                |)
                                                                              |) in
                                                                            let _ :=
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "pairing_bn256::arithmetic::Group",
                                                                                    G,
                                                                                    [],
                                                                                    "group_sub",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (| b |);
                                                                                    t
                                                                                  ]
                                                                                |)
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |)
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                | _ => M.impossible (||)
                                                                end))
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)))
                                    ]
                                  |)))
                            ]
                          |)))
                    ]
                  |)))
            ]
          |)
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub fn eval_polynomial_st<F: Field>(poly: &[F], point: F) -> F {
      poly.iter()
          .rev()
          .fold(F::zero(), |acc, coeff| acc * point + coeff)
  }
  *)
  Definition eval_polynomial_st (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ F ], [ poly; point ] =>
      ltac:(M.monadic
        (let poly := M.alloc (| poly |) in
        let point := M.alloc (| point |) in
        M.call_closure (|
          M.get_trait_method (|
            "core::iter::traits::iterator::Iterator",
            Ty.apply
              (Ty.path "core::iter::adapters::rev::Rev")
              [ Ty.apply (Ty.path "core::slice::iter::Iter") [ F ] ],
            [],
            "fold",
            [ F; Ty.function [ Ty.tuple [ F; Ty.apply (Ty.path "&") [ F ] ] ] F ]
          |),
          [
            M.call_closure (|
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply (Ty.path "core::slice::iter::Iter") [ F ],
                [],
                "rev",
                []
              |),
              [
                M.call_closure (|
                  M.get_associated_function (| Ty.apply (Ty.path "slice") [ F ], "iter", [] |),
                  [ M.read (| poly |) ]
                |)
              ]
            |);
            M.call_closure (| M.get_trait_method (| "ff::Field", F, [], "zero", [] |), [] |);
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0; α1 ] =>
                    M.match_operator (|
                      M.alloc (| α0 |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let acc := M.copy (| γ |) in
                            M.match_operator (|
                              M.alloc (| α1 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let coeff := M.copy (| γ |) in
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::arith::Add",
                                        F,
                                        [ Ty.apply (Ty.path "&") [ F ] ],
                                        "add",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::arith::Mul",
                                            F,
                                            [ F ],
                                            "mul",
                                            []
                                          |),
                                          [ M.read (| acc |); M.read (| point |) ]
                                        |);
                                        M.read (| coeff |)
                                      ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)
                  | _ => M.impossible (||)
                  end))
          ]
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub fn eval_polynomial<F: Field>(poly: &[F], point: F) -> F {
      let n = poly.len();
      let num_threads = multicore::current_num_threads();
      if n * 2 < num_threads {
          eval_polynomial_st(poly, point)
      } else {
          let chunk_size = (n + num_threads - 1) / num_threads;
          let mut parts = vec![F::zero(); num_threads];
          multicore::scope(|scope| {
              for (chunk_idx, (out, poly)) in
                  parts.chunks_mut(1).zip(poly.chunks(chunk_size)).enumerate()
              {
                  scope.spawn(move |_| {
                      let start = chunk_idx * chunk_size;
                      out[0] = eval_polynomial_st(poly, point)
                          * point.pow_vartime(&[start as u64, 0, 0, 0]);
                  });
              }
          });
          parts.iter().fold(F::zero(), |acc, coeff| acc + coeff)
      }
  }
  *)
  Definition eval_polynomial (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ F ], [ poly; point ] =>
      ltac:(M.monadic
        (let poly := M.alloc (| poly |) in
        let point := M.alloc (| point |) in
        M.read (|
          let n :=
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (| Ty.apply (Ty.path "slice") [ F ], "len", [] |),
                [ M.read (| poly |) ]
              |)
            |) in
          let num_threads :=
            M.alloc (|
              M.call_closure (| M.get_function (| "rayon_core::current_num_threads", [] |), [] |)
            |) in
          M.match_operator (|
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        BinOp.Pure.lt
                          (BinOp.Panic.mul (| Integer.Usize, M.read (| n |), Value.Integer 2 |))
                          (M.read (| num_threads |))
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "halo2_proofs::arithmetic::eval_polynomial_st", [ F ] |),
                      [ M.read (| poly |); M.read (| point |) ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let chunk_size :=
                    M.alloc (|
                      BinOp.Panic.div (|
                        Integer.Usize,
                        BinOp.Panic.sub (|
                          Integer.Usize,
                          BinOp.Panic.add (|
                            Integer.Usize,
                            M.read (| n |),
                            M.read (| num_threads |)
                          |),
                          Value.Integer 1
                        |),
                        M.read (| num_threads |)
                      |)
                    |) in
                  let parts :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (| "alloc::vec::from_elem", [ F ] |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "ff::Field", F, [], "zero", [] |),
                            []
                          |);
                          M.read (| num_threads |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (|
                          "rayon_core::scope::scope",
                          [
                            Ty.function
                              [
                                Ty.tuple
                                  [ Ty.apply (Ty.path "&") [ Ty.path "rayon_core::scope::Scope" ] ]
                              ]
                              (Ty.tuple []);
                            Ty.tuple []
                          ]
                        |),
                        [
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let scope := M.copy (| γ |) in
                                          M.read (|
                                            M.use
                                              (M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::ChunksMut")
                                                                [ F ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::Chunks")
                                                                [ F ]
                                                            ]
                                                        ],
                                                      [],
                                                      "into_iter",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::ChunksMut")
                                                                [ F ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::Chunks")
                                                                [ F ]
                                                            ],
                                                          [],
                                                          "enumerate",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::ChunksMut")
                                                                [ F ],
                                                              [],
                                                              "zip",
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Chunks")
                                                                  [ F ]
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply (Ty.path "slice") [ F ],
                                                                  "chunks_mut",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::DerefMut",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      "deref_mut",
                                                                      []
                                                                    |),
                                                                    [ parts ]
                                                                  |);
                                                                  Value.Integer 1
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply (Ty.path "slice") [ F ],
                                                                  "chunks",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| poly |);
                                                                  M.read (| chunk_size |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let iter := M.copy (| γ |) in
                                                      M.loop (|
                                                        ltac:(M.monadic
                                                          (let _ :=
                                                            M.match_operator (|
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::zip::Zip")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::ChunksMut")
                                                                              [ F ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Chunks")
                                                                              [ F ]
                                                                          ]
                                                                      ],
                                                                    [],
                                                                    "next",
                                                                    []
                                                                  |),
                                                                  [ iter ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (| M.break (||) |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let γ1_0 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ0_0,
                                                                        0
                                                                      |) in
                                                                    let γ1_1 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ0_0,
                                                                        1
                                                                      |) in
                                                                    let chunk_idx :=
                                                                      M.copy (| γ1_0 |) in
                                                                    let γ2_0 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ1_1,
                                                                        0
                                                                      |) in
                                                                    let γ2_1 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ1_1,
                                                                        1
                                                                      |) in
                                                                    let out := M.copy (| γ2_0 |) in
                                                                    let poly := M.copy (| γ2_1 |) in
                                                                    let _ :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "rayon_core::scope::Scope",
                                                                            "spawn",
                                                                            [
                                                                              Ty.function
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        [
                                                                                          Ty.path
                                                                                            "rayon_core::scope::Scope"
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                                (Ty.tuple [])
                                                                            ]
                                                                          |),
                                                                          [
                                                                            M.read (| scope |);
                                                                            M.closure
                                                                              (fun γ =>
                                                                                ltac:(M.monadic
                                                                                  match γ with
                                                                                  | [ α0 ] =>
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α0
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (M.read (|
                                                                                              let
                                                                                                    start :=
                                                                                                M.alloc (|
                                                                                                  BinOp.Panic.mul (|
                                                                                                    Integer.Usize,
                                                                                                    M.read (|
                                                                                                      chunk_idx
                                                                                                    |),
                                                                                                    M.read (|
                                                                                                      chunk_size
                                                                                                    |)
                                                                                                  |)
                                                                                                |) in
                                                                                              let
                                                                                                    _ :=
                                                                                                M.write (|
                                                                                                  M.SubPointer.get_array_field (|
                                                                                                    M.read (|
                                                                                                      out
                                                                                                    |),
                                                                                                    M.alloc (|
                                                                                                      Value.Integer
                                                                                                        0
                                                                                                    |)
                                                                                                  |),
                                                                                                  M.call_closure (|
                                                                                                    M.get_trait_method (|
                                                                                                      "core::ops::arith::Mul",
                                                                                                      F,
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                      "mul",
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.call_closure (|
                                                                                                        M.get_function (|
                                                                                                          "halo2_proofs::arithmetic::eval_polynomial_st",
                                                                                                          [
                                                                                                            F
                                                                                                          ]
                                                                                                        |),
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            poly
                                                                                                          |);
                                                                                                          M.read (|
                                                                                                            point
                                                                                                          |)
                                                                                                        ]
                                                                                                      |);
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "ff::Field",
                                                                                                          F,
                                                                                                          [],
                                                                                                          "pow_vartime",
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "array")
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "u64"
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ]
                                                                                                        |),
                                                                                                        [
                                                                                                          point;
                                                                                                          M.alloc (|
                                                                                                            Value.Array
                                                                                                              [
                                                                                                                M.rust_cast
                                                                                                                  (M.read (|
                                                                                                                    start
                                                                                                                  |));
                                                                                                                Value.Integer
                                                                                                                  0;
                                                                                                                Value.Integer
                                                                                                                  0;
                                                                                                                Value.Integer
                                                                                                                  0
                                                                                                              ]
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                |) in
                                                                                              M.alloc (|
                                                                                                Value.Tuple
                                                                                                  []
                                                                                              |)
                                                                                            |)))
                                                                                      ]
                                                                                    |)
                                                                                  | _ =>
                                                                                    M.impossible (||)
                                                                                  end))
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                      |)))
                                                ]
                                              |))
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::Iter") [ F ],
                        [],
                        "fold",
                        [ F; Ty.function [ Ty.tuple [ F; Ty.apply (Ty.path "&") [ F ] ] ] F ]
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [ F ],
                            "iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ F; Ty.path "alloc::alloc::Global" ],
                                [],
                                "deref",
                                []
                              |),
                              [ parts ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          M.get_trait_method (| "ff::Field", F, [], "zero", [] |),
                          []
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0; α1 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let acc := M.copy (| γ |) in
                                        M.match_operator (|
                                          M.alloc (| α1 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let coeff := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Add",
                                                    F,
                                                    [ Ty.apply (Ty.path "&") [ F ] ],
                                                    "add",
                                                    []
                                                  |),
                                                  [ M.read (| acc |); M.read (| coeff |) ]
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |)))
            ]
          |)
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub fn compute_inner_product<F: Field>(a: &[F], b: &[F]) -> F {
      // TODO: parallelize?
      assert_eq!(a.len(), b.len());
  
      let mut acc = F::zero();
      for (a, b) in a.iter().zip(b.iter()) {
          acc += ( *a) * ( *b);
      }
  
      acc
  }
  *)
  Definition compute_inner_product (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ F ], [ a; b ] =>
      ltac:(M.monadic
        (let a := M.alloc (| a |) in
        let b := M.alloc (| b |) in
        M.read (|
          let _ :=
            M.match_operator (|
              M.alloc (|
                Value.Tuple
                  [
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (| Ty.apply (Ty.path "slice") [ F ], "len", [] |),
                        [ M.read (| a |) ]
                      |)
                    |);
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (| Ty.apply (Ty.path "slice") [ F ], "len", [] |),
                        [ M.read (| b |) ]
                      |)
                    |)
                  ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let left_val := M.copy (| γ0_0 |) in
                    let right_val := M.copy (| γ0_1 |) in
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.Pure.not
                                    (BinOp.Pure.eq
                                      (M.read (| M.read (| left_val |) |))
                                      (M.read (| M.read (| right_val |) |)))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  let kind :=
                                    M.alloc (|
                                      Value.StructTuple "core::panicking::AssertKind::Eq" []
                                    |) in
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_function (|
                                        "core::panicking::assert_failed",
                                        [ Ty.path "usize"; Ty.path "usize" ]
                                      |),
                                      [
                                        M.read (| kind |);
                                        M.read (| left_val |);
                                        M.read (| right_val |);
                                        Value.StructTuple "core::option::Option::None" []
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |)))
              ]
            |) in
          let acc :=
            M.alloc (|
              M.call_closure (| M.get_trait_method (| "ff::Field", F, [], "zero", [] |), [] |)
            |) in
          let _ :=
            M.use
              (M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        [
                          Ty.apply (Ty.path "core::slice::iter::Iter") [ F ];
                          Ty.apply (Ty.path "core::slice::iter::Iter") [ F ]
                        ],
                      [],
                      "into_iter",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::slice::iter::Iter") [ F ],
                          [],
                          "zip",
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [ F ] ]
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [ F ],
                              "iter",
                              []
                            |),
                            [ M.read (| a |) ]
                          |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [ F ],
                              "iter",
                              []
                            |),
                            [ M.read (| b |) ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        ltac:(M.monadic
                          (let _ :=
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      [
                                        Ty.apply (Ty.path "core::slice::iter::Iter") [ F ];
                                        Ty.apply (Ty.path "core::slice::iter::Iter") [ F ]
                                      ],
                                    [],
                                    "next",
                                    []
                                  |),
                                  [ iter ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                    let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                    let a := M.copy (| γ1_0 |) in
                                    let b := M.copy (| γ1_1 |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::arith::AddAssign",
                                            F,
                                            [ F ],
                                            "add_assign",
                                            []
                                          |),
                                          [
                                            acc;
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::Mul",
                                                F,
                                                [ F ],
                                                "mul",
                                                []
                                              |),
                                              [
                                                M.read (| M.read (| a |) |);
                                                M.read (| M.read (| b |) |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          acc
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub fn kate_division<'a, F: Field, I: IntoIterator<Item = &'a F>>(a: I, mut b: F) -> Vec<F>
  where
      I::IntoIter: DoubleEndedIterator + ExactSizeIterator,
  {
      b = -b;
      let a = a.into_iter();
  
      let mut q = vec![F::zero(); a.len() - 1];
  
      let mut tmp = F::zero();
      for (q, r) in q.iter_mut().rev().zip(a.rev()) {
          let mut lead_coeff = *r;
          lead_coeff.sub_assign(&tmp);
          *q = lead_coeff;
          tmp = lead_coeff;
          tmp.mul_assign(&b);
      }
  
      q
  }
  *)
  Definition kate_division (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ F; _ as I ], [ a; b ] =>
      ltac:(M.monadic
        (let a := M.alloc (| a |) in
        let b := M.alloc (| b |) in
        M.read (|
          let _ :=
            M.write (|
              b,
              M.call_closure (|
                M.get_trait_method (| "core::ops::arith::Neg", F, [], "neg", [] |),
                [ M.read (| b |) ]
              |)
            |) in
          let a :=
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::iter::traits::collect::IntoIterator",
                  I,
                  [],
                  "into_iter",
                  []
                |),
                [ M.read (| a |) ]
              |)
            |) in
          let q :=
            M.alloc (|
              M.call_closure (|
                M.get_function (| "alloc::vec::from_elem", [ F ] |),
                [
                  M.call_closure (| M.get_trait_method (| "ff::Field", F, [], "zero", [] |), [] |);
                  BinOp.Panic.sub (|
                    Integer.Usize,
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::exact_size::ExactSizeIterator",
                        Ty.associated,
                        [],
                        "len",
                        []
                      |),
                      [ a ]
                    |),
                    Value.Integer 1
                  |)
                ]
              |)
            |) in
          let tmp :=
            M.alloc (|
              M.call_closure (| M.get_trait_method (| "ff::Field", F, [], "zero", [] |), [] |)
            |) in
          let _ :=
            M.use
              (M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            [ Ty.apply (Ty.path "core::slice::iter::IterMut") [ F ] ];
                          Ty.apply (Ty.path "core::iter::adapters::rev::Rev") [ Ty.associated ]
                        ],
                      [],
                      "into_iter",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            [ Ty.apply (Ty.path "core::slice::iter::IterMut") [ F ] ],
                          [],
                          "zip",
                          [ Ty.apply (Ty.path "core::iter::adapters::rev::Rev") [ Ty.associated ] ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::IterMut") [ F ],
                              [],
                              "rev",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [ F ],
                                  "iter_mut",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::DerefMut",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ F; Ty.path "alloc::alloc::Global" ],
                                      [],
                                      "deref_mut",
                                      []
                                    |),
                                    [ q ]
                                  |)
                                ]
                              |)
                            ]
                          |);
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.associated,
                              [],
                              "rev",
                              []
                            |),
                            [ M.read (| a |) ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        ltac:(M.monadic
                          (let _ :=
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::rev::Rev")
                                          [ Ty.apply (Ty.path "core::slice::iter::IterMut") [ F ] ];
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::rev::Rev")
                                          [ Ty.associated ]
                                      ],
                                    [],
                                    "next",
                                    []
                                  |),
                                  [ iter ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                    let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                    let q := M.copy (| γ1_0 |) in
                                    let r := M.copy (| γ1_1 |) in
                                    let lead_coeff := M.copy (| M.read (| r |) |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::arith::SubAssign",
                                            F,
                                            [ Ty.apply (Ty.path "&") [ F ] ],
                                            "sub_assign",
                                            []
                                          |),
                                          [ lead_coeff; tmp ]
                                        |)
                                      |) in
                                    let _ :=
                                      M.write (| M.read (| q |), M.read (| lead_coeff |) |) in
                                    let _ := M.write (| tmp, M.read (| lead_coeff |) |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::arith::MulAssign",
                                            F,
                                            [ Ty.apply (Ty.path "&") [ F ] ],
                                            "mul_assign",
                                            []
                                          |),
                                          [ tmp; b ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          q
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub fn parallelize<T: Send, F: Fn(&mut [T], usize) + Send + Sync + Clone>(v: &mut [T], f: F) {
      let n = v.len();
      let num_threads = multicore::current_num_threads();
      let mut chunk = (n as usize) / num_threads;
      if chunk < num_threads {
          chunk = n as usize;
      }
  
      multicore::scope(|scope| {
          for (chunk_num, v) in v.chunks_mut(chunk).enumerate() {
              let f = f.clone();
              scope.spawn(move |_| {
                  let start = chunk_num * chunk;
                  f(v, start);
              });
          }
      });
  }
  *)
  Definition parallelize (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ T; F ], [ v; f ] =>
      ltac:(M.monadic
        (let v := M.alloc (| v |) in
        let f := M.alloc (| f |) in
        M.read (|
          let n :=
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (| Ty.apply (Ty.path "slice") [ T ], "len", [] |),
                [ M.read (| v |) ]
              |)
            |) in
          let num_threads :=
            M.alloc (|
              M.call_closure (| M.get_function (| "rayon_core::current_num_threads", [] |), [] |)
            |) in
          let chunk :=
            M.alloc (|
              BinOp.Panic.div (| Integer.Usize, M.read (| M.use n |), M.read (| num_threads |) |)
            |) in
          let _ :=
            M.match_operator (|
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          BinOp.Pure.lt (M.read (| chunk |)) (M.read (| num_threads |))
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    let _ := M.write (| chunk, M.read (| M.use n |) |) in
                    M.alloc (| Value.Tuple [] |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
              ]
            |) in
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (|
                  "rayon_core::scope::scope",
                  [
                    Ty.function
                      [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "rayon_core::scope::Scope" ] ] ]
                      (Ty.tuple []);
                    Ty.tuple []
                  ]
                |),
                [
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let scope := M.copy (| γ |) in
                                  M.read (|
                                    M.use
                                      (M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::ChunksMut")
                                                    [ T ]
                                                ],
                                              [],
                                              "into_iter",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::ChunksMut")
                                                    [ T ],
                                                  [],
                                                  "enumerate",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply (Ty.path "slice") [ T ],
                                                      "chunks_mut",
                                                      []
                                                    |),
                                                    [ M.read (| v |); M.read (| chunk |) ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let iter := M.copy (| γ |) in
                                              M.loop (|
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::enumerate::Enumerate")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::ChunksMut")
                                                                  [ T ]
                                                              ],
                                                            [],
                                                            "next",
                                                            []
                                                          |),
                                                          [ iter ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let γ1_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                0
                                                              |) in
                                                            let γ1_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                1
                                                              |) in
                                                            let chunk_num := M.copy (| γ1_0 |) in
                                                            let v := M.copy (| γ1_1 |) in
                                                            let f :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::clone::Clone",
                                                                    F,
                                                                    [],
                                                                    "clone",
                                                                    []
                                                                  |),
                                                                  [ f ]
                                                                |)
                                                              |) in
                                                            let _ :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "rayon_core::scope::Scope",
                                                                    "spawn",
                                                                    [
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [
                                                                                  Ty.path
                                                                                    "rayon_core::scope::Scope"
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        (Ty.tuple [])
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (| scope |);
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (M.read (|
                                                                                      let start :=
                                                                                        M.alloc (|
                                                                                          BinOp.Panic.mul (|
                                                                                            Integer.Usize,
                                                                                            M.read (|
                                                                                              chunk_num
                                                                                            |),
                                                                                            M.read (|
                                                                                              chunk
                                                                                            |)
                                                                                          |)
                                                                                        |) in
                                                                                      let _ :=
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::function::Fn",
                                                                                              F,
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&mut")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "slice")
                                                                                                          [
                                                                                                            T
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ]
                                                                                              ],
                                                                                              "call",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              f;
                                                                                              Value.Tuple
                                                                                                [
                                                                                                  M.read (|
                                                                                                    v
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    start
                                                                                                  |)
                                                                                                ]
                                                                                            ]
                                                                                          |)
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |)
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                              |)))
                                        ]
                                      |))
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  fn log2_floor(num: usize) -> u32 {
      assert!(num > 0);
  
      let mut pow = 0;
  
      while (1 << (pow + 1)) <= num {
          pow += 1;
      }
  
      pow
  }
  *)
  Definition log2_floor (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ num ] =>
      ltac:(M.monadic
        (let num := M.alloc (| num |) in
        M.read (|
          let _ :=
            M.match_operator (|
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          UnOp.Pure.not (BinOp.Pure.gt (M.read (| num |)) (Value.Integer 0))
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          M.get_function (| "core::panicking::panic", [] |),
                          [ M.read (| Value.String "assertion failed: num > 0" |) ]
                        |)
                      |)
                    |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
              ]
            |) in
          let pow := M.alloc (| Value.Integer 0 |) in
          let _ :=
            M.loop (|
              ltac:(M.monadic
                (M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.Pure.le
                                (BinOp.Panic.shl (|
                                  Value.Integer 1,
                                  BinOp.Panic.add (|
                                    Integer.U32,
                                    M.read (| pow |),
                                    Value.Integer 1
                                  |)
                                |))
                                (M.read (| num |))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let _ :=
                          let β := pow in
                          M.write (|
                            β,
                            BinOp.Panic.add (| Integer.U32, M.read (| β |), Value.Integer 1 |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              let _ :=
                                M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                              M.alloc (| Value.Tuple [] |)
                            |)
                          |)
                        |)))
                  ]
                |)))
            |) in
          pow
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub fn mul_acc<F: FieldExt>(f: &mut [F]) {
      let num_threads = multicore::current_num_threads();
      let len = f.len();
  
      if len < num_threads * 16 {
          for i in 0..f.len() - 1 {
              f[i + 1] = f[i] * f[i + 1];
          }
      } else {
          let chunk_size = len / 4;
          let chunk_acc = f
              .par_chunks_mut(chunk_size)
              .map(|chunk| {
                  chunk[0] = chunk[0];
                  for j in 1..chunk.len() {
                      chunk[j] = chunk[j - 1] * chunk[j];
                  }
                  chunk.last().unwrap().clone()
              })
              .collect::<Vec<_>>();
  
          let mut acc = chunk_acc[0];
          for (chunk, curr_acc) in f.chunks_mut(chunk_size).zip(chunk_acc.into_iter()).skip(1) {
              chunk.par_iter_mut().for_each(|p| {
                  *p = *p * acc;
              });
  
              acc *= curr_acc;
          }
      }
  }
  *)
  Definition mul_acc (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ F ], [ f ] =>
      ltac:(M.monadic
        (let f := M.alloc (| f |) in
        M.read (|
          let num_threads :=
            M.alloc (|
              M.call_closure (| M.get_function (| "rayon_core::current_num_threads", [] |), [] |)
            |) in
          let len :=
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (| Ty.apply (Ty.path "slice") [ F ], "len", [] |),
                [ M.read (| f |) ]
              |)
            |) in
          M.match_operator (|
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        BinOp.Pure.lt
                          (M.read (| len |))
                          (BinOp.Panic.mul (|
                            Integer.Usize,
                            M.read (| num_threads |),
                            Value.Integer 16
                          |))
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer 0);
                                ("end_",
                                  BinOp.Panic.sub (|
                                    Integer.Usize,
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [ F ],
                                        "len",
                                        []
                                      |),
                                      [ M.read (| f |) ]
                                    |),
                                    Value.Integer 1
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "usize" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let i := M.copy (| γ0_0 |) in
                                          let _ :=
                                            M.write (|
                                              M.SubPointer.get_array_field (|
                                                M.read (| f |),
                                                M.alloc (|
                                                  BinOp.Panic.add (|
                                                    Integer.Usize,
                                                    M.read (| i |),
                                                    Value.Integer 1
                                                  |)
                                                |)
                                              |),
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  F,
                                                  [ F ],
                                                  "mul",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_array_field (|
                                                      M.read (| f |),
                                                      i
                                                    |)
                                                  |);
                                                  M.read (|
                                                    M.SubPointer.get_array_field (|
                                                      M.read (| f |),
                                                      M.alloc (|
                                                        BinOp.Panic.add (|
                                                          Integer.Usize,
                                                          M.read (| i |),
                                                          Value.Integer 1
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |))));
              fun γ =>
                ltac:(M.monadic
                  (let chunk_size :=
                    M.alloc (|
                      BinOp.Panic.div (| Integer.Usize, M.read (| len |), Value.Integer 4 |)
                    |) in
                  let chunk_acc :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "rayon::iter::ParallelIterator",
                          Ty.apply
                            (Ty.path "rayon::iter::map::Map")
                            [
                              Ty.apply (Ty.path "rayon::slice::chunks::ChunksMut") [ F ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [ Ty.apply (Ty.path "&mut") [ Ty.apply (Ty.path "slice") [ F ] ]
                                    ]
                                ]
                                F
                            ],
                          [],
                          "collect",
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "rayon::iter::ParallelIterator",
                              Ty.apply (Ty.path "rayon::slice::chunks::ChunksMut") [ F ],
                              [],
                              "map",
                              [
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&mut")
                                          [ Ty.apply (Ty.path "slice") [ F ] ]
                                      ]
                                  ]
                                  F;
                                F
                              ]
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "rayon::slice::ParallelSliceMut",
                                  Ty.apply (Ty.path "slice") [ F ],
                                  [ F ],
                                  "par_chunks_mut",
                                  []
                                |),
                                [ M.read (| f |); M.read (| chunk_size |) ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      M.match_operator (|
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let chunk := M.copy (| γ |) in
                                              M.read (|
                                                let _ :=
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.read (| chunk |),
                                                      M.alloc (| Value.Integer 0 |)
                                                    |),
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.read (| chunk |),
                                                        M.alloc (| Value.Integer 0 |)
                                                      |)
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.use
                                                    (M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::collect::IntoIterator",
                                                            Ty.apply
                                                              (Ty.path "core::ops::range::Range")
                                                              [ Ty.path "usize" ],
                                                            [],
                                                            "into_iter",
                                                            []
                                                          |),
                                                          [
                                                            Value.StructRecord
                                                              "core::ops::range::Range"
                                                              [
                                                                ("start", Value.Integer 1);
                                                                ("end_",
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        [ F ],
                                                                      "len",
                                                                      []
                                                                    |),
                                                                    [ M.read (| chunk |) ]
                                                                  |))
                                                              ]
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let iter := M.copy (| γ |) in
                                                            M.loop (|
                                                              ltac:(M.monadic
                                                                (let _ :=
                                                                  M.match_operator (|
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::ops::range::Range")
                                                                            [ Ty.path "usize" ],
                                                                          [],
                                                                          "next",
                                                                          []
                                                                        |),
                                                                        [ iter ]
                                                                      |)
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (M.alloc (|
                                                                            M.never_to_any (|
                                                                              M.read (|
                                                                                M.break (||)
                                                                              |)
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              γ,
                                                                              "core::option::Option::Some",
                                                                              0
                                                                            |) in
                                                                          let j :=
                                                                            M.copy (| γ0_0 |) in
                                                                          let _ :=
                                                                            M.write (|
                                                                              M.SubPointer.get_array_field (|
                                                                                M.read (| chunk |),
                                                                                j
                                                                              |),
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::arith::Mul",
                                                                                  F,
                                                                                  [ F ],
                                                                                  "mul",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    M.SubPointer.get_array_field (|
                                                                                      M.read (|
                                                                                        chunk
                                                                                      |),
                                                                                      M.alloc (|
                                                                                        BinOp.Panic.sub (|
                                                                                          Integer.Usize,
                                                                                          M.read (|
                                                                                            j
                                                                                          |),
                                                                                          Value.Integer
                                                                                            1
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  M.read (|
                                                                                    M.SubPointer.get_array_field (|
                                                                                      M.read (|
                                                                                        chunk
                                                                                      |),
                                                                                      j
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |)))
                                                                    ]
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)))
                                                            |)))
                                                      ]
                                                    |)) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::clone::Clone",
                                                      F,
                                                      [],
                                                      "clone",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [ Ty.apply (Ty.path "&") [ F ] ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply (Ty.path "slice") [ F ],
                                                              "last",
                                                              []
                                                            |),
                                                            [ M.read (| chunk |) ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let acc :=
                    M.copy (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::index::Index",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ F; Ty.path "alloc::alloc::Global" ],
                          [ Ty.path "usize" ],
                          "index",
                          []
                        |),
                        [ chunk_acc; Value.Integer 0 ]
                      |)
                    |) in
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::skip::Skip")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  [
                                    Ty.apply (Ty.path "core::slice::iter::ChunksMut") [ F ];
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      [ F; Ty.path "alloc::alloc::Global" ]
                                  ]
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  [
                                    Ty.apply (Ty.path "core::slice::iter::ChunksMut") [ F ];
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      [ F; Ty.path "alloc::alloc::Global" ]
                                  ],
                                [],
                                "skip",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply (Ty.path "core::slice::iter::ChunksMut") [ F ],
                                    [],
                                    "zip",
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        [ F; Ty.path "alloc::alloc::Global" ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [ F ],
                                        "chunks_mut",
                                        []
                                      |),
                                      [ M.read (| f |); M.read (| chunk_size |) ]
                                    |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ F; Ty.path "alloc::alloc::Global" ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [ M.read (| chunk_acc |) ]
                                    |)
                                  ]
                                |);
                                Value.Integer 1
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::skip::Skip")
                                            [
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::zip::Zip")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::ChunksMut")
                                                    [ F ];
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    [ F; Ty.path "alloc::alloc::Global" ]
                                                ]
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                          let chunk := M.copy (| γ1_0 |) in
                                          let curr_acc := M.copy (| γ1_1 |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "rayon::iter::ParallelIterator",
                                                  Ty.apply (Ty.path "rayon::slice::IterMut") [ F ],
                                                  [],
                                                  "for_each",
                                                  [
                                                    Ty.function
                                                      [ Ty.tuple [ Ty.apply (Ty.path "&mut") [ F ] ]
                                                      ]
                                                      (Ty.tuple [])
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "rayon::iter::IntoParallelRefMutIterator",
                                                      Ty.apply (Ty.path "slice") [ F ],
                                                      [],
                                                      "par_iter_mut",
                                                      []
                                                    |),
                                                    [ M.read (| chunk |) ]
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          M.match_operator (|
                                                            M.alloc (| α0 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let p := M.copy (| γ |) in
                                                                  M.read (|
                                                                    let _ :=
                                                                      M.write (|
                                                                        M.read (| p |),
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Mul",
                                                                            F,
                                                                            [ F ],
                                                                            "mul",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (|
                                                                              M.read (| p |)
                                                                            |);
                                                                            M.read (| acc |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)
                                                                  |)))
                                                            ]
                                                          |)
                                                        | _ => M.impossible (||)
                                                        end))
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::arith::MulAssign",
                                                  F,
                                                  [ F ],
                                                  "mul_assign",
                                                  []
                                                |),
                                                [ acc; M.read (| curr_acc |) ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |))))
            ]
          |)
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub fn batch_invert<F: FieldExt>(f: &mut [F]) {
      parallelize(f, |start, _| {
          start.batch_invert();
      });
  }
  *)
  Definition batch_invert (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ F ], [ f ] =>
      ltac:(M.monadic
        (let f := M.alloc (| f |) in
        M.read (|
          let _ :=
            M.alloc (|
              M.call_closure (|
                M.get_function (|
                  "halo2_proofs::arithmetic::parallelize",
                  [
                    F;
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&mut") [ Ty.apply (Ty.path "slice") [ F ] ];
                            Ty.path "usize"
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.read (| f |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0; α1 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let start := M.copy (| γ |) in
                                  M.match_operator (|
                                    M.alloc (| α1 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.read (|
                                            let _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "ff::batch::BatchInvert",
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      [ Ty.apply (Ty.path "slice") [ F ] ],
                                                    [ F ],
                                                    "batch_invert",
                                                    []
                                                  |),
                                                  [ M.read (| start |) ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)
                                          |)))
                                    ]
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub fn lagrange_interpolate<F: FieldExt>(points: &[F], evals: &[F]) -> Vec<F> {
      assert_eq!(points.len(), evals.len());
      if points.len() == 1 {
          // Constant polynomial
          return vec![evals[0]];
      } else {
          let mut denoms = Vec::with_capacity(points.len());
          for (j, x_j) in points.iter().enumerate() {
              let mut denom = Vec::with_capacity(points.len() - 1);
              for x_k in points
                  .iter()
                  .enumerate()
                  .filter(|&(k, _)| k != j)
                  .map(|a| a.1)
              {
                  denom.push( *x_j - x_k);
              }
              denoms.push(denom);
          }
  
          // Compute (x_j - x_k)^(-1) for each j != i
          denoms.iter_mut().for_each(|v| batch_invert(v));
  
          let mut final_poly = vec![F::zero(); points.len()];
          for (j, (denoms, eval)) in denoms.into_iter().zip(evals.iter()).enumerate() {
              let mut tmp: Vec<F> = Vec::with_capacity(points.len());
              let mut product = Vec::with_capacity(points.len() - 1);
              tmp.push(F::one());
              for (x_k, denom) in points
                  .iter()
                  .enumerate()
                  .filter(|&(k, _)| k != j)
                  .map(|a| a.1)
                  .zip(denoms.into_iter())
              {
                  product.resize(tmp.len() + 1, F::zero());
                  for ((a, b), product) in tmp
                      .iter()
                      .chain(std::iter::once(&F::zero()))
                      .zip(std::iter::once(&F::zero()).chain(tmp.iter()))
                      .zip(product.iter_mut())
                  {
                      *product = *a * (-denom * x_k) + *b * denom;
                  }
                  std::mem::swap(&mut tmp, &mut product);
              }
              assert_eq!(tmp.len(), points.len());
              assert_eq!(product.len(), points.len() - 1);
              for (final_coeff, interpolation_coeff) in final_poly.iter_mut().zip(tmp.into_iter()) {
                  *final_coeff += interpolation_coeff * eval;
              }
          }
          final_poly
      }
  }
  *)
  Definition lagrange_interpolate (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ F ], [ points; evals ] =>
      ltac:(M.monadic
        (let points := M.alloc (| points |) in
        let evals := M.alloc (| evals |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    Value.Tuple
                      [
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [ F ],
                              "len",
                              []
                            |),
                            [ M.read (| points |) ]
                          |)
                        |);
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [ F ],
                              "len",
                              []
                            |),
                            [ M.read (| evals |) ]
                          |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.Pure.not
                                        (BinOp.Pure.eq
                                          (M.read (| M.read (| left_val |) |))
                                          (M.read (| M.read (| right_val |) |)))
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let kind :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.read (| left_val |);
                                            M.read (| right_val |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.eq
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [ F ],
                                  "len",
                                  []
                                |),
                                [ M.read (| points |) ]
                              |))
                              (Value.Integer 1)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.read (|
                            M.return_ (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [ F ],
                                  "into_vec",
                                  [ Ty.path "alloc::alloc::Global" ]
                                |),
                                [
                                  (* Unsize *)
                                  M.pointer_coercion
                                    (M.read (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::boxed::Box")
                                            [
                                              Ty.apply (Ty.path "array") [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "new",
                                          []
                                        |),
                                        [
                                          M.alloc (|
                                            Value.Array
                                              [
                                                M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    M.read (| evals |),
                                                    M.alloc (| Value.Integer 0 |)
                                                  |)
                                                |)
                                              ]
                                          |)
                                        ]
                                      |)
                                    |))
                                ]
                              |)
                            |)
                          |)
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let denoms :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ F; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "with_capacity",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [ F ],
                                  "len",
                                  []
                                |),
                                [ M.read (| points |) ]
                              |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    [ Ty.apply (Ty.path "core::slice::iter::Iter") [ F ] ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply (Ty.path "core::slice::iter::Iter") [ F ],
                                      [],
                                      "enumerate",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [ F ],
                                          "iter",
                                          []
                                        |),
                                        [ M.read (| points |) ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [ F ]
                                                  ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                let j := M.copy (| γ1_0 |) in
                                                let x_j := M.copy (| γ1_1 |) in
                                                let denom :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [ F; Ty.path "alloc::alloc::Global" ],
                                                        "with_capacity",
                                                        []
                                                      |),
                                                      [
                                                        BinOp.Panic.sub (|
                                                          Integer.Usize,
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply (Ty.path "slice") [ F ],
                                                              "len",
                                                              []
                                                            |),
                                                            [ M.read (| points |) ]
                                                          |),
                                                          Value.Integer 1
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.use
                                                    (M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::collect::IntoIterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::map::Map")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::filter::Filter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [ F ]
                                                                      ];
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [ F ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      (Ty.path "bool")
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path "usize";
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [ F ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply (Ty.path "&") [ F ])
                                                              ],
                                                            [],
                                                            "into_iter",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::filter::Filter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [ F ]
                                                                      ];
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [ F ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      (Ty.path "bool")
                                                                  ],
                                                                [],
                                                                "map",
                                                                [
                                                                  Ty.apply (Ty.path "&") [ F ];
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.path "usize";
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [ F ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                    (Ty.apply (Ty.path "&") [ F ])
                                                                ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [ F ]
                                                                      ],
                                                                    [],
                                                                    "filter",
                                                                    [
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize";
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        [ F ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        (Ty.path "bool")
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [ F ],
                                                                        [],
                                                                        "enumerate",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [ F ],
                                                                            "iter",
                                                                            []
                                                                          |),
                                                                          [ M.read (| points |) ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ :=
                                                                                      M.read (|
                                                                                        γ
                                                                                      |) in
                                                                                    let γ1_0 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        0
                                                                                      |) in
                                                                                    let γ1_1 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        1
                                                                                      |) in
                                                                                    let k :=
                                                                                      M.copy (|
                                                                                        γ1_0
                                                                                      |) in
                                                                                    BinOp.Pure.ne
                                                                                      (M.read (|
                                                                                        k
                                                                                      |))
                                                                                      (M.read (|
                                                                                        j
                                                                                      |))))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  ]
                                                                |);
                                                                M.closure
                                                                  (fun γ =>
                                                                    ltac:(M.monadic
                                                                      match γ with
                                                                      | [ α0 ] =>
                                                                        M.match_operator (|
                                                                          M.alloc (| α0 |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let a :=
                                                                                  M.copy (| γ |) in
                                                                                M.read (|
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    a,
                                                                                    1
                                                                                  |)
                                                                                |)))
                                                                          ]
                                                                        |)
                                                                      | _ => M.impossible (||)
                                                                      end))
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let iter := M.copy (| γ |) in
                                                            M.loop (|
                                                              ltac:(M.monadic
                                                                (let _ :=
                                                                  M.match_operator (|
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::map::Map")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::iter::adapters::filter::Filter")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::iter::adapters::enumerate::Enumerate")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::Iter")
                                                                                        [ F ]
                                                                                    ];
                                                                                  Ty.function
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize";
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    [
                                                                                                      F
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                    (Ty.path "bool")
                                                                                ];
                                                                              Ty.function
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize";
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [ F ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                                (Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [ F ])
                                                                            ],
                                                                          [],
                                                                          "next",
                                                                          []
                                                                        |),
                                                                        [ iter ]
                                                                      |)
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (M.alloc (|
                                                                            M.never_to_any (|
                                                                              M.read (|
                                                                                M.break (||)
                                                                              |)
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              γ,
                                                                              "core::option::Option::Some",
                                                                              0
                                                                            |) in
                                                                          let x_k :=
                                                                            M.copy (| γ0_0 |) in
                                                                          let _ :=
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    [
                                                                                      F;
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  "push",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  denom;
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::arith::Sub",
                                                                                      F,
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [ F ]
                                                                                      ],
                                                                                      "sub",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        M.read (|
                                                                                          x_j
                                                                                        |)
                                                                                      |);
                                                                                      M.read (|
                                                                                        x_k
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |)))
                                                                    ]
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)))
                                                            |)))
                                                      ]
                                                    |)) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [ F; Ty.path "alloc::alloc::Global" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "push",
                                                        []
                                                      |),
                                                      [ denoms; M.read (| denom |) ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::slice::iter::IterMut")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ F; Ty.path "alloc::alloc::Global" ]
                                ],
                              [],
                              "for_each",
                              [
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&mut")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ]
                                      ]
                                  ]
                                  (Ty.tuple [])
                              ]
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ F; Ty.path "alloc::alloc::Global" ]
                                    ],
                                  "iter_mut",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::DerefMut",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ F; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "deref_mut",
                                      []
                                    |),
                                    [ denoms ]
                                  |)
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      M.match_operator (|
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let v := M.copy (| γ |) in
                                              M.call_closure (|
                                                M.get_function (|
                                                  "halo2_proofs::arithmetic::batch_invert",
                                                  [ F ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::DerefMut",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [ F; Ty.path "alloc::alloc::Global" ],
                                                      [],
                                                      "deref_mut",
                                                      []
                                                    |),
                                                    [ M.read (| v |) ]
                                                  |)
                                                ]
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            ]
                          |)
                        |) in
                      let final_poly :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_function (| "alloc::vec::from_elem", [ F ] |),
                            [
                              M.call_closure (|
                                M.get_trait_method (| "ff::Field", F, [], "zero", [] |),
                                []
                              |);
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [ F ],
                                  "len",
                                  []
                                |),
                                [ M.read (| points |) ]
                              |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ F; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.apply (Ty.path "core::slice::iter::Iter") [ F ]
                                        ]
                                    ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ F; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.apply (Ty.path "core::slice::iter::Iter") [ F ]
                                        ],
                                      [],
                                      "enumerate",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ F; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "zip",
                                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [ F ] ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ F; Ty.path "alloc::alloc::Global" ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "into_iter",
                                              []
                                            |),
                                            [ M.read (| denoms |) ]
                                          |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [ F ],
                                              "iter",
                                              []
                                            |),
                                            [ M.read (| evals |) ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::vec::into_iter::IntoIter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [ F; Ty.path "alloc::alloc::Global" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ F ]
                                                      ]
                                                  ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                let j := M.copy (| γ1_0 |) in
                                                let γ2_0 :=
                                                  M.SubPointer.get_tuple_field (| γ1_1, 0 |) in
                                                let γ2_1 :=
                                                  M.SubPointer.get_tuple_field (| γ1_1, 1 |) in
                                                let denoms := M.copy (| γ2_0 |) in
                                                let eval := M.copy (| γ2_1 |) in
                                                let tmp :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [ F; Ty.path "alloc::alloc::Global" ],
                                                        "with_capacity",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply (Ty.path "slice") [ F ],
                                                            "len",
                                                            []
                                                          |),
                                                          [ M.read (| points |) ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                let product :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [ F; Ty.path "alloc::alloc::Global" ],
                                                        "with_capacity",
                                                        []
                                                      |),
                                                      [
                                                        BinOp.Panic.sub (|
                                                          Integer.Usize,
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply (Ty.path "slice") [ F ],
                                                              "len",
                                                              []
                                                            |),
                                                            [ M.read (| points |) ]
                                                          |),
                                                          Value.Integer 1
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [ F; Ty.path "alloc::alloc::Global" ],
                                                        "push",
                                                        []
                                                      |),
                                                      [
                                                        tmp;
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "ff::Field",
                                                            F,
                                                            [],
                                                            "one",
                                                            []
                                                          |),
                                                          []
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.use
                                                    (M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::collect::IntoIterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::zip::Zip")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::map::Map")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::filter::Filter")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [ F ]
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize";
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [ F ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.path "bool")
                                                                      ];
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [ F ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      (Ty.apply (Ty.path "&") [ F ])
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::vec::into_iter::IntoIter")
                                                                  [
                                                                    F;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ],
                                                            [],
                                                            "into_iter",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::map::Map")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::filter::Filter")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [ F ]
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize";
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [ F ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.path "bool")
                                                                      ];
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [ F ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      (Ty.apply (Ty.path "&") [ F ])
                                                                  ],
                                                                [],
                                                                "zip",
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "alloc::vec::into_iter::IntoIter")
                                                                    [
                                                                      F;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::filter::Filter")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [ F ]
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize";
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [ F ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.path "bool")
                                                                      ],
                                                                    [],
                                                                    "map",
                                                                    [
                                                                      Ty.apply (Ty.path "&") [ F ];
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [ F ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        (Ty.apply
                                                                          (Ty.path "&")
                                                                          [ F ])
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [ F ]
                                                                          ],
                                                                        [],
                                                                        "filter",
                                                                        [
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize";
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [ F ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.path "bool")
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::iterator::Iterator",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [ F ],
                                                                            [],
                                                                            "enumerate",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  [ F ],
                                                                                "iter",
                                                                                []
                                                                              |),
                                                                              [ M.read (| points |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                M.match_operator (|
                                                                                  M.alloc (| α0 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ :=
                                                                                          M.read (|
                                                                                            γ
                                                                                          |) in
                                                                                        let γ1_0 :=
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            γ,
                                                                                            0
                                                                                          |) in
                                                                                        let γ1_1 :=
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            γ,
                                                                                            1
                                                                                          |) in
                                                                                        let k :=
                                                                                          M.copy (|
                                                                                            γ1_0
                                                                                          |) in
                                                                                        BinOp.Pure.ne
                                                                                          (M.read (|
                                                                                            k
                                                                                          |))
                                                                                          (M.read (|
                                                                                            j
                                                                                          |))))
                                                                                  ]
                                                                                |)
                                                                              | _ =>
                                                                                M.impossible (||)
                                                                              end))
                                                                      ]
                                                                    |);
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let a :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.read (|
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        a,
                                                                                        1
                                                                                      |)
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::collect::IntoIterator",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    "into_iter",
                                                                    []
                                                                  |),
                                                                  [ M.read (| denoms |) ]
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let iter := M.copy (| γ |) in
                                                            M.loop (|
                                                              ltac:(M.monadic
                                                                (let _ :=
                                                                  M.match_operator (|
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::zip::Zip")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::iter::adapters::map::Map")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::iter::adapters::filter::Filter")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::iter::adapters::enumerate::Enumerate")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::slice::iter::Iter")
                                                                                            [ F ]
                                                                                        ];
                                                                                      Ty.function
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "usize";
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        [
                                                                                                          F
                                                                                                        ]
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                        (Ty.path
                                                                                          "bool")
                                                                                    ];
                                                                                  Ty.function
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize";
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [ F
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                    (Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [ F ])
                                                                                ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::into_iter::IntoIter")
                                                                                [
                                                                                  F;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ],
                                                                          [],
                                                                          "next",
                                                                          []
                                                                        |),
                                                                        [ iter ]
                                                                      |)
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (M.alloc (|
                                                                            M.never_to_any (|
                                                                              M.read (|
                                                                                M.break (||)
                                                                              |)
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              γ,
                                                                              "core::option::Option::Some",
                                                                              0
                                                                            |) in
                                                                          let γ1_0 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ0_0,
                                                                              0
                                                                            |) in
                                                                          let γ1_1 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ0_0,
                                                                              1
                                                                            |) in
                                                                          let x_k :=
                                                                            M.copy (| γ1_0 |) in
                                                                          let denom :=
                                                                            M.copy (| γ1_1 |) in
                                                                          let _ :=
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    [
                                                                                      F;
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  "resize",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  product;
                                                                                  BinOp.Panic.add (|
                                                                                    Integer.Usize,
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          [
                                                                                            F;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        "len",
                                                                                        []
                                                                                      |),
                                                                                      [ tmp ]
                                                                                    |),
                                                                                    Value.Integer 1
                                                                                  |);
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "ff::Field",
                                                                                      F,
                                                                                      [],
                                                                                      "zero",
                                                                                      []
                                                                                    |),
                                                                                    []
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          let _ :=
                                                                            M.use
                                                                              (M.match_operator (|
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::collect::IntoIterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::iter::adapters::zip::Zip")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::iter::adapters::zip::Zip")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::iter::adapters::chain::Chain")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::slice::iter::Iter")
                                                                                                    [
                                                                                                      F
                                                                                                    ];
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::iter::sources::once::Once")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        [
                                                                                                          F
                                                                                                        ]
                                                                                                    ]
                                                                                                ];
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::iter::adapters::chain::Chain")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::iter::sources::once::Once")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        [
                                                                                                          F
                                                                                                        ]
                                                                                                    ];
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::slice::iter::Iter")
                                                                                                    [
                                                                                                      F
                                                                                                    ]
                                                                                                ]
                                                                                            ];
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::slice::iter::IterMut")
                                                                                            [ F ]
                                                                                        ],
                                                                                      [],
                                                                                      "into_iter",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::iter::traits::iterator::Iterator",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::iter::adapters::zip::Zip")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::iter::adapters::chain::Chain")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::slice::iter::Iter")
                                                                                                    [
                                                                                                      F
                                                                                                    ];
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::iter::sources::once::Once")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        [
                                                                                                          F
                                                                                                        ]
                                                                                                    ]
                                                                                                ];
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::iter::adapters::chain::Chain")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::iter::sources::once::Once")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        [
                                                                                                          F
                                                                                                        ]
                                                                                                    ];
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::slice::iter::Iter")
                                                                                                    [
                                                                                                      F
                                                                                                    ]
                                                                                                ]
                                                                                            ],
                                                                                          [],
                                                                                          "zip",
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::IterMut")
                                                                                              [ F ]
                                                                                          ]
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::iter::traits::iterator::Iterator",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::iter::adapters::chain::Chain")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::slice::iter::Iter")
                                                                                                    [
                                                                                                      F
                                                                                                    ];
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::iter::sources::once::Once")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        [
                                                                                                          F
                                                                                                        ]
                                                                                                    ]
                                                                                                ],
                                                                                              [],
                                                                                              "zip",
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::iter::adapters::chain::Chain")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::iter::sources::once::Once")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          [
                                                                                                            F
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::Iter")
                                                                                                      [
                                                                                                        F
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::slice::iter::Iter")
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                  [],
                                                                                                  "chain",
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::iter::sources::once::Once")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          [
                                                                                                            F
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.call_closure (|
                                                                                                    M.get_associated_function (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "slice")
                                                                                                        [
                                                                                                          F
                                                                                                        ],
                                                                                                      "iter",
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::deref::Deref",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            [
                                                                                                              F;
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ],
                                                                                                          [],
                                                                                                          "deref",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          tmp
                                                                                                        ]
                                                                                                      |)
                                                                                                    ]
                                                                                                  |);
                                                                                                  M.call_closure (|
                                                                                                    M.get_function (|
                                                                                                      "core::iter::sources::once::once",
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          [
                                                                                                            F
                                                                                                          ]
                                                                                                      ]
                                                                                                    |),
                                                                                                    [
                                                                                                      M.alloc (|
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "ff::Field",
                                                                                                            F,
                                                                                                            [],
                                                                                                            "zero",
                                                                                                            []
                                                                                                          |),
                                                                                                          []
                                                                                                        |)
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                ]
                                                                                              |);
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::iter::sources::once::Once")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        [
                                                                                                          F
                                                                                                        ]
                                                                                                    ],
                                                                                                  [],
                                                                                                  "chain",
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::Iter")
                                                                                                      [
                                                                                                        F
                                                                                                      ]
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.call_closure (|
                                                                                                    M.get_function (|
                                                                                                      "core::iter::sources::once::once",
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          [
                                                                                                            F
                                                                                                          ]
                                                                                                      ]
                                                                                                    |),
                                                                                                    [
                                                                                                      M.alloc (|
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "ff::Field",
                                                                                                            F,
                                                                                                            [],
                                                                                                            "zero",
                                                                                                            []
                                                                                                          |),
                                                                                                          []
                                                                                                        |)
                                                                                                      |)
                                                                                                    ]
                                                                                                  |);
                                                                                                  M.call_closure (|
                                                                                                    M.get_associated_function (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "slice")
                                                                                                        [
                                                                                                          F
                                                                                                        ],
                                                                                                      "iter",
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::deref::Deref",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            [
                                                                                                              F;
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ],
                                                                                                          [],
                                                                                                          "deref",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          tmp
                                                                                                        ]
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |);
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "slice")
                                                                                                [ F
                                                                                                ],
                                                                                              "iter_mut",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::deref::DerefMut",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    [
                                                                                                      F;
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [],
                                                                                                  "deref_mut",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  product
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let iter :=
                                                                                        M.copy (|
                                                                                          γ
                                                                                        |) in
                                                                                      M.loop (|
                                                                                        ltac:(M.monadic
                                                                                          (let _ :=
                                                                                            M.match_operator (|
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::iter::adapters::zip::Zip")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::iter::adapters::zip::Zip")
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::iter::adapters::chain::Chain")
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "core::slice::iter::Iter")
                                                                                                                  [
                                                                                                                    F
                                                                                                                  ];
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "core::iter::sources::once::Once")
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "&")
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ]
                                                                                                                  ]
                                                                                                              ];
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::iter::adapters::chain::Chain")
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "core::iter::sources::once::Once")
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "&")
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ]
                                                                                                                  ];
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "core::slice::iter::Iter")
                                                                                                                  [
                                                                                                                    F
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ];
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::slice::iter::IterMut")
                                                                                                          [
                                                                                                            F
                                                                                                          ]
                                                                                                      ],
                                                                                                    [],
                                                                                                    "next",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    iter
                                                                                                  ]
                                                                                                |)
                                                                                              |),
                                                                                              [
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (M.alloc (|
                                                                                                      M.never_to_any (|
                                                                                                        M.read (|
                                                                                                          M.break (||)
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)));
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (let
                                                                                                          γ0_0 :=
                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                        γ,
                                                                                                        "core::option::Option::Some",
                                                                                                        0
                                                                                                      |) in
                                                                                                    let
                                                                                                          γ1_0 :=
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        γ0_0,
                                                                                                        0
                                                                                                      |) in
                                                                                                    let
                                                                                                          γ1_1 :=
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        γ0_0,
                                                                                                        1
                                                                                                      |) in
                                                                                                    let
                                                                                                          γ2_0 :=
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        γ1_0,
                                                                                                        0
                                                                                                      |) in
                                                                                                    let
                                                                                                          γ2_1 :=
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        γ1_0,
                                                                                                        1
                                                                                                      |) in
                                                                                                    let
                                                                                                          a :=
                                                                                                      M.copy (|
                                                                                                        γ2_0
                                                                                                      |) in
                                                                                                    let
                                                                                                          b :=
                                                                                                      M.copy (|
                                                                                                        γ2_1
                                                                                                      |) in
                                                                                                    let
                                                                                                          product :=
                                                                                                      M.copy (|
                                                                                                        γ1_1
                                                                                                      |) in
                                                                                                    let
                                                                                                          _ :=
                                                                                                      M.write (|
                                                                                                        M.read (|
                                                                                                          product
                                                                                                        |),
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "core::ops::arith::Add",
                                                                                                            F,
                                                                                                            [
                                                                                                              F
                                                                                                            ],
                                                                                                            "add",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.call_closure (|
                                                                                                              M.get_trait_method (|
                                                                                                                "core::ops::arith::Mul",
                                                                                                                F,
                                                                                                                [
                                                                                                                  F
                                                                                                                ],
                                                                                                                "mul",
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.read (|
                                                                                                                  M.read (|
                                                                                                                    a
                                                                                                                  |)
                                                                                                                |);
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::ops::arith::Mul",
                                                                                                                    F,
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "&")
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ]
                                                                                                                    ],
                                                                                                                    "mul",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::arith::Neg",
                                                                                                                        F,
                                                                                                                        [],
                                                                                                                        "neg",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.read (|
                                                                                                                          denom
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |);
                                                                                                                    M.read (|
                                                                                                                      x_k
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              ]
                                                                                                            |);
                                                                                                            M.call_closure (|
                                                                                                              M.get_trait_method (|
                                                                                                                "core::ops::arith::Mul",
                                                                                                                F,
                                                                                                                [
                                                                                                                  F
                                                                                                                ],
                                                                                                                "mul",
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.read (|
                                                                                                                  M.read (|
                                                                                                                    b
                                                                                                                  |)
                                                                                                                |);
                                                                                                                M.read (|
                                                                                                                  denom
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      |) in
                                                                                                    M.alloc (|
                                                                                                      Value.Tuple
                                                                                                        []
                                                                                                    |)))
                                                                                              ]
                                                                                            |) in
                                                                                          M.alloc (|
                                                                                            Value.Tuple
                                                                                              []
                                                                                          |)))
                                                                                      |)))
                                                                                ]
                                                                              |)) in
                                                                          let _ :=
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_function (|
                                                                                  "core::mem::swap",
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      [
                                                                                        F;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ]
                                                                                |),
                                                                                [ tmp; product ]
                                                                              |)
                                                                            |) in
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |)))
                                                                    ]
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)))
                                                            |)))
                                                      ]
                                                    |)) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      Value.Tuple
                                                        [
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    F;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "len",
                                                                []
                                                              |),
                                                              [ tmp ]
                                                            |)
                                                          |);
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [ F ],
                                                                "len",
                                                                []
                                                              |),
                                                              [ M.read (| points |) ]
                                                            |)
                                                          |)
                                                        ]
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              0
                                                            |) in
                                                          let γ0_1 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              1
                                                            |) in
                                                          let left_val := M.copy (| γ0_0 |) in
                                                          let right_val := M.copy (| γ0_1 |) in
                                                          M.match_operator (|
                                                            M.alloc (| Value.Tuple [] |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ :=
                                                                    M.use
                                                                      (M.alloc (|
                                                                        UnOp.Pure.not
                                                                          (BinOp.Pure.eq
                                                                            (M.read (|
                                                                              M.read (| left_val |)
                                                                            |))
                                                                            (M.read (|
                                                                              M.read (| right_val |)
                                                                            |)))
                                                                      |)) in
                                                                  let _ :=
                                                                    M.is_constant_or_break_match (|
                                                                      M.read (| γ |),
                                                                      Value.Bool true
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        let kind :=
                                                                          M.alloc (|
                                                                            Value.StructTuple
                                                                              "core::panicking::AssertKind::Eq"
                                                                              []
                                                                          |) in
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_function (|
                                                                              "core::panicking::assert_failed",
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.path "usize"
                                                                              ]
                                                                            |),
                                                                            [
                                                                              M.read (| kind |);
                                                                              M.read (| left_val |);
                                                                              M.read (|
                                                                                right_val
                                                                              |);
                                                                              Value.StructTuple
                                                                                "core::option::Option::None"
                                                                                []
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |)))
                                                    ]
                                                  |) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      Value.Tuple
                                                        [
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    F;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "len",
                                                                []
                                                              |),
                                                              [ product ]
                                                            |)
                                                          |);
                                                          M.alloc (|
                                                            BinOp.Panic.sub (|
                                                              Integer.Usize,
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply (Ty.path "slice") [ F ],
                                                                  "len",
                                                                  []
                                                                |),
                                                                [ M.read (| points |) ]
                                                              |),
                                                              Value.Integer 1
                                                            |)
                                                          |)
                                                        ]
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              0
                                                            |) in
                                                          let γ0_1 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              1
                                                            |) in
                                                          let left_val := M.copy (| γ0_0 |) in
                                                          let right_val := M.copy (| γ0_1 |) in
                                                          M.match_operator (|
                                                            M.alloc (| Value.Tuple [] |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ :=
                                                                    M.use
                                                                      (M.alloc (|
                                                                        UnOp.Pure.not
                                                                          (BinOp.Pure.eq
                                                                            (M.read (|
                                                                              M.read (| left_val |)
                                                                            |))
                                                                            (M.read (|
                                                                              M.read (| right_val |)
                                                                            |)))
                                                                      |)) in
                                                                  let _ :=
                                                                    M.is_constant_or_break_match (|
                                                                      M.read (| γ |),
                                                                      Value.Bool true
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        let kind :=
                                                                          M.alloc (|
                                                                            Value.StructTuple
                                                                              "core::panicking::AssertKind::Eq"
                                                                              []
                                                                          |) in
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_function (|
                                                                              "core::panicking::assert_failed",
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.path "usize"
                                                                              ]
                                                                            |),
                                                                            [
                                                                              M.read (| kind |);
                                                                              M.read (| left_val |);
                                                                              M.read (|
                                                                                right_val
                                                                              |);
                                                                              Value.StructTuple
                                                                                "core::option::Option::None"
                                                                                []
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |)))
                                                    ]
                                                  |) in
                                                M.use
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                [ F ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::vec::into_iter::IntoIter")
                                                                [ F; Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          [],
                                                          "into_iter",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                [ F ],
                                                              [],
                                                              "zip",
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::vec::into_iter::IntoIter")
                                                                  [
                                                                    F;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply (Ty.path "slice") [ F ],
                                                                  "iter_mut",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::DerefMut",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      "deref_mut",
                                                                      []
                                                                    |),
                                                                    [ final_poly ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::collect::IntoIterator",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      F;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "into_iter",
                                                                  []
                                                                |),
                                                                [ M.read (| tmp |) ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter := M.copy (| γ |) in
                                                          M.loop (|
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::zip::Zip")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::IterMut")
                                                                              [ F ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::into_iter::IntoIter")
                                                                              [
                                                                                F;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ],
                                                                        [],
                                                                        "next",
                                                                        []
                                                                      |),
                                                                      [ iter ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let γ1_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ0_0,
                                                                            0
                                                                          |) in
                                                                        let γ1_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ0_0,
                                                                            1
                                                                          |) in
                                                                        let final_coeff :=
                                                                          M.copy (| γ1_0 |) in
                                                                        let interpolation_coeff :=
                                                                          M.copy (| γ1_1 |) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::AddAssign",
                                                                                F,
                                                                                [ F ],
                                                                                "add_assign",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (|
                                                                                  final_coeff
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    F,
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "mul",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      interpolation_coeff
                                                                                    |);
                                                                                    M.read (|
                                                                                      eval
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                          |)))
                                                    ]
                                                  |))))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      final_poly))
                ]
              |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub(crate) fn evaluate_vanishing_polynomial<F: FieldExt>(roots: &[F], z: F) -> F {
      fn evaluate<F: FieldExt>(roots: &[F], z: F) -> F {
          roots.iter().fold(F::one(), |acc, point| (z - point) * acc)
      }
      let n = roots.len();
      let num_threads = multicore::current_num_threads();
      if n * 2 < num_threads {
          evaluate(roots, z)
      } else {
          let chunk_size = (n + num_threads - 1) / num_threads;
          let mut parts = vec![F::one(); num_threads];
          multicore::scope(|scope| {
              for (out, roots) in parts.chunks_mut(1).zip(roots.chunks(chunk_size)) {
                  scope.spawn(move |_| out[0] = evaluate(roots, z));
              }
          });
          parts.iter().fold(F::one(), |acc, part| acc * part)
      }
  }
  *)
  Definition evaluate_vanishing_polynomial (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ F ], [ roots; z ] =>
      ltac:(M.monadic
        (let roots := M.alloc (| roots |) in
        let z := M.alloc (| z |) in
        M.read (|
          let n :=
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (| Ty.apply (Ty.path "slice") [ F ], "len", [] |),
                [ M.read (| roots |) ]
              |)
            |) in
          let num_threads :=
            M.alloc (|
              M.call_closure (| M.get_function (| "rayon_core::current_num_threads", [] |), [] |)
            |) in
          M.match_operator (|
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        BinOp.Pure.lt
                          (BinOp.Panic.mul (| Integer.Usize, M.read (| n |), Value.Integer 2 |))
                          (M.read (| num_threads |))
                      |)) in
                  let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "halo2_proofs::arithmetic::evaluate_vanishing_polynomial.evaluate",
                        []
                      |),
                      [ M.read (| roots |); M.read (| z |) ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let chunk_size :=
                    M.alloc (|
                      BinOp.Panic.div (|
                        Integer.Usize,
                        BinOp.Panic.sub (|
                          Integer.Usize,
                          BinOp.Panic.add (|
                            Integer.Usize,
                            M.read (| n |),
                            M.read (| num_threads |)
                          |),
                          Value.Integer 1
                        |),
                        M.read (| num_threads |)
                      |)
                    |) in
                  let parts :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (| "alloc::vec::from_elem", [ F ] |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "ff::Field", F, [], "one", [] |),
                            []
                          |);
                          M.read (| num_threads |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (|
                          "rayon_core::scope::scope",
                          [
                            Ty.function
                              [
                                Ty.tuple
                                  [ Ty.apply (Ty.path "&") [ Ty.path "rayon_core::scope::Scope" ] ]
                              ]
                              (Ty.tuple []);
                            Ty.tuple []
                          ]
                        |),
                        [
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let scope := M.copy (| γ |) in
                                          M.read (|
                                            M.use
                                              (M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::ChunksMut")
                                                            [ F ];
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Chunks")
                                                            [ F ]
                                                        ],
                                                      [],
                                                      "into_iter",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::ChunksMut")
                                                            [ F ],
                                                          [],
                                                          "zip",
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Chunks")
                                                              [ F ]
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply (Ty.path "slice") [ F ],
                                                              "chunks_mut",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::DerefMut",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      F;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "deref_mut",
                                                                  []
                                                                |),
                                                                [ parts ]
                                                              |);
                                                              Value.Integer 1
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply (Ty.path "slice") [ F ],
                                                              "chunks",
                                                              []
                                                            |),
                                                            [
                                                              M.read (| roots |);
                                                              M.read (| chunk_size |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let iter := M.copy (| γ |) in
                                                      M.loop (|
                                                        ltac:(M.monadic
                                                          (let _ :=
                                                            M.match_operator (|
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::zip::Zip")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::ChunksMut")
                                                                          [ F ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Chunks")
                                                                          [ F ]
                                                                      ],
                                                                    [],
                                                                    "next",
                                                                    []
                                                                  |),
                                                                  [ iter ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (| M.break (||) |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let γ1_0 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ0_0,
                                                                        0
                                                                      |) in
                                                                    let γ1_1 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ0_0,
                                                                        1
                                                                      |) in
                                                                    let out := M.copy (| γ1_0 |) in
                                                                    let roots :=
                                                                      M.copy (| γ1_1 |) in
                                                                    let _ :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "rayon_core::scope::Scope",
                                                                            "spawn",
                                                                            [
                                                                              Ty.function
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        [
                                                                                          Ty.path
                                                                                            "rayon_core::scope::Scope"
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                                (Ty.tuple [])
                                                                            ]
                                                                          |),
                                                                          [
                                                                            M.read (| scope |);
                                                                            M.closure
                                                                              (fun γ =>
                                                                                ltac:(M.monadic
                                                                                  match γ with
                                                                                  | [ α0 ] =>
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α0
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (M.read (|
                                                                                              M.write (|
                                                                                                M.SubPointer.get_array_field (|
                                                                                                  M.read (|
                                                                                                    out
                                                                                                  |),
                                                                                                  M.alloc (|
                                                                                                    Value.Integer
                                                                                                      0
                                                                                                  |)
                                                                                                |),
                                                                                                M.call_closure (|
                                                                                                  M.get_function (|
                                                                                                    "halo2_proofs::arithmetic::evaluate_vanishing_polynomial.evaluate",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      roots
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      z
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)))
                                                                                      ]
                                                                                    |)
                                                                                  | _ =>
                                                                                    M.impossible (||)
                                                                                  end))
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                      |)))
                                                ]
                                              |))
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::Iter") [ F ],
                        [],
                        "fold",
                        [ F; Ty.function [ Ty.tuple [ F; Ty.apply (Ty.path "&") [ F ] ] ] F ]
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [ F ],
                            "iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ F; Ty.path "alloc::alloc::Global" ],
                                [],
                                "deref",
                                []
                              |),
                              [ parts ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          M.get_trait_method (| "ff::Field", F, [], "one", [] |),
                          []
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0; α1 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let acc := M.copy (| γ |) in
                                        M.match_operator (|
                                          M.alloc (| α1 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let part := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Mul",
                                                    F,
                                                    [ Ty.apply (Ty.path "&") [ F ] ],
                                                    "mul",
                                                    []
                                                  |),
                                                  [ M.read (| acc |); M.read (| part |) ]
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |)))
            ]
          |)
        |)))
    | _, _ => M.impossible
    end.
  
  Module evaluate_vanishing_polynomial.
    (*
        fn evaluate<F: FieldExt>(roots: &[F], z: F) -> F {
            roots.iter().fold(F::one(), |acc, point| (z - point) * acc)
        }
    *)
    Definition evaluate (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ F ], [ roots; z ] =>
        ltac:(M.monadic
          (let roots := M.alloc (| roots |) in
          let z := M.alloc (| z |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply (Ty.path "core::slice::iter::Iter") [ F ],
              [],
              "fold",
              [ F; Ty.function [ Ty.tuple [ F; Ty.apply (Ty.path "&") [ F ] ] ] F ]
            |),
            [
              M.call_closure (|
                M.get_associated_function (| Ty.apply (Ty.path "slice") [ F ], "iter", [] |),
                [ M.read (| roots |) ]
              |);
              M.call_closure (| M.get_trait_method (| "ff::Field", F, [], "one", [] |), [] |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0; α1 ] =>
                      M.match_operator (|
                        M.alloc (| α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let acc := M.copy (| γ |) in
                              M.match_operator (|
                                M.alloc (| α1 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let point := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::arith::Mul",
                                          F,
                                          [ F ],
                                          "mul",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::arith::Sub",
                                              F,
                                              [ Ty.apply (Ty.path "&") [ F ] ],
                                              "sub",
                                              []
                                            |),
                                            [ M.read (| z |); M.read (| point |) ]
                                          |);
                                          M.read (| acc |)
                                        ]
                                      |)))
                                ]
                              |)))
                        ]
                      |)
                    | _ => M.impossible (||)
                    end))
            ]
          |)))
      | _, _ => M.impossible
      end.
  End evaluate_vanishing_polynomial.
  
  (*
  pub fn best_fft_cpu_st<G: Group>(a: &mut [G], omega: G::Scalar, log_n: u32) {
      fn bitreverse(mut n: usize, l: usize) -> usize {
          let mut r = 0;
          for _ in 0..l {
              r = (r << 1) | (n & 1);
              n >>= 1;
          }
          r
      }
  
      let n = a.len();
      assert_eq!(n, 1 << log_n);
  
      for k in 0..n {
          let rk = bitreverse(k, log_n as usize);
          if k < rk {
              a.swap(rk, k);
          }
      }
  
      // precompute twiddle factors
      let twiddles: Vec<_> = (0..(n / 2))
          .scan(G::Scalar::one(), |w, _| {
              let tw = *w;
              *w *= &omega;
              Some(tw)
          })
          .collect();
  
      let mut chunk = 2_usize;
      let mut twiddle_chunk = n / 2;
      for _ in 0..log_n {
          a.chunks_mut(chunk).for_each(|coeffs| {
              let (left, right) = coeffs.split_at_mut(chunk / 2);
  
              // case when twiddle factor is one
              let (a, left) = left.split_at_mut(1);
              let (b, right) = right.split_at_mut(1);
              let t = b[0];
              b[0] = a[0];
              a[0].group_add(&t);
              b[0].group_sub(&t);
  
              left.iter_mut()
                  .zip(right.iter_mut())
                  .enumerate()
                  .for_each(|(i, (a, b))| {
                      let mut t = *b;
                      t.group_scale(&twiddles[(i + 1) * twiddle_chunk]);
                      *b = *a;
                      a.group_add(&t);
                      b.group_sub(&t);
                  });
          });
          chunk *= 2;
          twiddle_chunk /= 2;
      }
  }
  *)
  Definition best_fft_cpu_st (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ G ], [ a; omega; log_n ] =>
      ltac:(M.monadic
        (let a := M.alloc (| a |) in
        let omega := M.alloc (| omega |) in
        let log_n := M.alloc (| log_n |) in
        M.read (|
          let n :=
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (| Ty.apply (Ty.path "slice") [ G ], "len", [] |),
                [ M.read (| a |) ]
              |)
            |) in
          let _ :=
            M.match_operator (|
              M.alloc (|
                Value.Tuple
                  [ n; M.alloc (| BinOp.Panic.shl (| Value.Integer 1, M.read (| log_n |) |) |) ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let left_val := M.copy (| γ0_0 |) in
                    let right_val := M.copy (| γ0_1 |) in
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.Pure.not
                                    (BinOp.Pure.eq
                                      (M.read (| M.read (| left_val |) |))
                                      (M.read (| M.read (| right_val |) |)))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  let kind :=
                                    M.alloc (|
                                      Value.StructTuple "core::panicking::AssertKind::Eq" []
                                    |) in
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_function (|
                                        "core::panicking::assert_failed",
                                        [ Ty.path "usize"; Ty.path "usize" ]
                                      |),
                                      [
                                        M.read (| kind |);
                                        M.read (| left_val |);
                                        M.read (| right_val |);
                                        Value.StructTuple "core::option::Option::None" []
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |)))
              ]
            |) in
          let _ :=
            M.use
              (M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                      [],
                      "into_iter",
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [ ("start", Value.Integer 0); ("end_", M.read (| n |)) ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        ltac:(M.monadic
                          (let _ :=
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ],
                                    [],
                                    "next",
                                    []
                                  |),
                                  [ iter ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let k := M.copy (| γ0_0 |) in
                                    let rk :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "halo2_proofs::arithmetic::best_fft_cpu_st.bitreverse",
                                            []
                                          |),
                                          [ M.read (| k |); M.rust_cast (M.read (| log_n |)) ]
                                        |)
                                      |) in
                                    M.match_operator (|
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  BinOp.Pure.lt (M.read (| k |)) (M.read (| rk |))
                                                |)) in
                                            let _ :=
                                              M.is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            let _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [ G ],
                                                    "swap",
                                                    []
                                                  |),
                                                  [ M.read (| a |); M.read (| rk |); M.read (| k |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          let twiddles :=
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::scan::Scan")
                    [
                      Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ];
                      Ty.associated;
                      Ty.function
                        [ Ty.tuple [ Ty.apply (Ty.path "&mut") [ Ty.associated ]; Ty.path "usize" ]
                        ]
                        (Ty.apply (Ty.path "core::option::Option") [ Ty.associated ])
                    ],
                  [],
                  "collect",
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                  ]
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                      [],
                      "scan",
                      [
                        Ty.associated;
                        Ty.associated;
                        Ty.function
                          [
                            Ty.tuple
                              [ Ty.apply (Ty.path "&mut") [ Ty.associated ]; Ty.path "usize" ]
                          ]
                          (Ty.apply (Ty.path "core::option::Option") [ Ty.associated ])
                      ]
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start", Value.Integer 0);
                          ("end_",
                            BinOp.Panic.div (| Integer.Usize, M.read (| n |), Value.Integer 2 |))
                        ];
                      M.call_closure (|
                        M.get_trait_method (| "ff::Field", Ty.associated, [], "one", [] |),
                        []
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let w := M.copy (| γ |) in
                                      M.match_operator (|
                                        M.alloc (| α1 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.read (|
                                                let tw := M.copy (| M.read (| w |) |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::arith::MulAssign",
                                                        Ty.associated,
                                                        [ Ty.apply (Ty.path "&") [ Ty.associated ]
                                                        ],
                                                        "mul_assign",
                                                        []
                                                      |),
                                                      [ M.read (| w |); omega ]
                                                    |)
                                                  |) in
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::option::Option::Some"
                                                    [ M.read (| tw |) ]
                                                |)
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                ]
              |)
            |) in
          let chunk := M.alloc (| Value.Integer 2 |) in
          let twiddle_chunk :=
            M.alloc (| BinOp.Panic.div (| Integer.Usize, M.read (| n |), Value.Integer 2 |) |) in
          M.use
            (M.match_operator (|
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                    [],
                    "into_iter",
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [ ("start", Value.Integer 0); ("end_", M.read (| log_n |)) ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      ltac:(M.monadic
                        (let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                                  [],
                                  "next",
                                  []
                                |),
                                [ iter ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let _ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply (Ty.path "core::slice::iter::ChunksMut") [ G ],
                                          [],
                                          "for_each",
                                          [
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      [ Ty.apply (Ty.path "slice") [ G ] ]
                                                  ]
                                              ]
                                              (Ty.tuple [])
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [ G ],
                                              "chunks_mut",
                                              []
                                            |),
                                            [ M.read (| a |); M.read (| chunk |) ]
                                          |);
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  M.match_operator (|
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let coeffs := M.copy (| γ |) in
                                                          M.read (|
                                                            M.match_operator (|
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      [ G ],
                                                                    "split_at_mut",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| coeffs |);
                                                                    BinOp.Panic.div (|
                                                                      Integer.Usize,
                                                                      M.read (| chunk |),
                                                                      Value.Integer 2
                                                                    |)
                                                                  ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ,
                                                                        0
                                                                      |) in
                                                                    let γ0_1 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ,
                                                                        1
                                                                      |) in
                                                                    let left := M.copy (| γ0_0 |) in
                                                                    let right :=
                                                                      M.copy (| γ0_1 |) in
                                                                    M.match_operator (|
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [ G ],
                                                                            "split_at_mut",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (| left |);
                                                                            Value.Integer 1
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                0
                                                                              |) in
                                                                            let γ0_1 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                1
                                                                              |) in
                                                                            let a :=
                                                                              M.copy (| γ0_0 |) in
                                                                            let left :=
                                                                              M.copy (| γ0_1 |) in
                                                                            M.match_operator (|
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "slice")
                                                                                      [ G ],
                                                                                    "split_at_mut",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      right
                                                                                    |);
                                                                                    Value.Integer 1
                                                                                  ]
                                                                                |)
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ0_0 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        0
                                                                                      |) in
                                                                                    let γ0_1 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        1
                                                                                      |) in
                                                                                    let b :=
                                                                                      M.copy (|
                                                                                        γ0_0
                                                                                      |) in
                                                                                    let right :=
                                                                                      M.copy (|
                                                                                        γ0_1
                                                                                      |) in
                                                                                    let t :=
                                                                                      M.copy (|
                                                                                        M.SubPointer.get_array_field (|
                                                                                          M.read (|
                                                                                            b
                                                                                          |),
                                                                                          M.alloc (|
                                                                                            Value.Integer
                                                                                              0
                                                                                          |)
                                                                                        |)
                                                                                      |) in
                                                                                    let _ :=
                                                                                      M.write (|
                                                                                        M.SubPointer.get_array_field (|
                                                                                          M.read (|
                                                                                            b
                                                                                          |),
                                                                                          M.alloc (|
                                                                                            Value.Integer
                                                                                              0
                                                                                          |)
                                                                                        |),
                                                                                        M.read (|
                                                                                          M.SubPointer.get_array_field (|
                                                                                            M.read (|
                                                                                              a
                                                                                            |),
                                                                                            M.alloc (|
                                                                                              Value.Integer
                                                                                                0
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      |) in
                                                                                    let _ :=
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "pairing_bn256::arithmetic::Group",
                                                                                            G,
                                                                                            [],
                                                                                            "group_add",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.SubPointer.get_array_field (|
                                                                                              M.read (|
                                                                                                a
                                                                                              |),
                                                                                              M.alloc (|
                                                                                                Value.Integer
                                                                                                  0
                                                                                              |)
                                                                                            |);
                                                                                            t
                                                                                          ]
                                                                                        |)
                                                                                      |) in
                                                                                    let _ :=
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "pairing_bn256::arithmetic::Group",
                                                                                            G,
                                                                                            [],
                                                                                            "group_sub",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.SubPointer.get_array_field (|
                                                                                              M.read (|
                                                                                                b
                                                                                              |),
                                                                                              M.alloc (|
                                                                                                Value.Integer
                                                                                                  0
                                                                                              |)
                                                                                            |);
                                                                                            t
                                                                                          ]
                                                                                        |)
                                                                                      |) in
                                                                                    let _ :=
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::iter::adapters::enumerate::Enumerate")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::iter::adapters::zip::Zip")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::IterMut")
                                                                                                      [
                                                                                                        G
                                                                                                      ];
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::IterMut")
                                                                                                      [
                                                                                                        G
                                                                                                      ]
                                                                                                  ]
                                                                                              ],
                                                                                            [],
                                                                                            "for_each",
                                                                                            [
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize";
                                                                                                          Ty.tuple
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "&mut")
                                                                                                                [
                                                                                                                  G
                                                                                                                ];
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "&mut")
                                                                                                                [
                                                                                                                  G
                                                                                                                ]
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                ]
                                                                                                (Ty.tuple
                                                                                                  [])
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::iter::traits::iterator::Iterator",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::iter::adapters::zip::Zip")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::IterMut")
                                                                                                      [
                                                                                                        G
                                                                                                      ];
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::IterMut")
                                                                                                      [
                                                                                                        G
                                                                                                      ]
                                                                                                  ],
                                                                                                [],
                                                                                                "enumerate",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::IterMut")
                                                                                                      [
                                                                                                        G
                                                                                                      ],
                                                                                                    [],
                                                                                                    "zip",
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::slice::iter::IterMut")
                                                                                                        [
                                                                                                          G
                                                                                                        ]
                                                                                                    ]
                                                                                                  |),
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "slice")
                                                                                                          [
                                                                                                            G
                                                                                                          ],
                                                                                                        "iter_mut",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          left
                                                                                                        |)
                                                                                                      ]
                                                                                                    |);
                                                                                                    M.call_closure (|
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "slice")
                                                                                                          [
                                                                                                            G
                                                                                                          ],
                                                                                                        "iter_mut",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          right
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (let
                                                                                                                  γ0_0 :=
                                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                                γ,
                                                                                                                0
                                                                                                              |) in
                                                                                                            let
                                                                                                                  γ0_1 :=
                                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                                γ,
                                                                                                                1
                                                                                                              |) in
                                                                                                            let
                                                                                                                  i :=
                                                                                                              M.copy (|
                                                                                                                γ0_0
                                                                                                              |) in
                                                                                                            let
                                                                                                                  γ1_0 :=
                                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                                γ0_1,
                                                                                                                0
                                                                                                              |) in
                                                                                                            let
                                                                                                                  γ1_1 :=
                                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                                γ0_1,
                                                                                                                1
                                                                                                              |) in
                                                                                                            let
                                                                                                                  a :=
                                                                                                              M.copy (|
                                                                                                                γ1_0
                                                                                                              |) in
                                                                                                            let
                                                                                                                  b :=
                                                                                                              M.copy (|
                                                                                                                γ1_1
                                                                                                              |) in
                                                                                                            M.read (|
                                                                                                              let
                                                                                                                    t :=
                                                                                                                M.copy (|
                                                                                                                  M.read (|
                                                                                                                    b
                                                                                                                  |)
                                                                                                                |) in
                                                                                                              let
                                                                                                                    _ :=
                                                                                                                M.alloc (|
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "pairing_bn256::arithmetic::Group",
                                                                                                                      G,
                                                                                                                      [],
                                                                                                                      "group_scale",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      t;
                                                                                                                      M.call_closure (|
                                                                                                                        M.get_trait_method (|
                                                                                                                          "core::ops::index::Index",
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "alloc::vec::Vec")
                                                                                                                            [
                                                                                                                              Ty.associated;
                                                                                                                              Ty.path
                                                                                                                                "alloc::alloc::Global"
                                                                                                                            ],
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "usize"
                                                                                                                          ],
                                                                                                                          "index",
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          twiddles;
                                                                                                                          BinOp.Panic.mul (|
                                                                                                                            Integer.Usize,
                                                                                                                            BinOp.Panic.add (|
                                                                                                                              Integer.Usize,
                                                                                                                              M.read (|
                                                                                                                                i
                                                                                                                              |),
                                                                                                                              Value.Integer
                                                                                                                                1
                                                                                                                            |),
                                                                                                                            M.read (|
                                                                                                                              twiddle_chunk
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |) in
                                                                                                              let
                                                                                                                    _ :=
                                                                                                                M.write (|
                                                                                                                  M.read (|
                                                                                                                    b
                                                                                                                  |),
                                                                                                                  M.read (|
                                                                                                                    M.read (|
                                                                                                                      a
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |) in
                                                                                                              let
                                                                                                                    _ :=
                                                                                                                M.alloc (|
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "pairing_bn256::arithmetic::Group",
                                                                                                                      G,
                                                                                                                      [],
                                                                                                                      "group_add",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        a
                                                                                                                      |);
                                                                                                                      t
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |) in
                                                                                                              let
                                                                                                                    _ :=
                                                                                                                M.alloc (|
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "pairing_bn256::arithmetic::Group",
                                                                                                                      G,
                                                                                                                      [],
                                                                                                                      "group_sub",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        b
                                                                                                                      |);
                                                                                                                      t
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |) in
                                                                                                              M.alloc (|
                                                                                                                Value.Tuple
                                                                                                                  []
                                                                                                              |)
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end))
                                                                                          ]
                                                                                        |)
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      Value.Tuple []
                                                                                    |)))
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)
                                                          |)))
                                                    ]
                                                  |)
                                                | _ => M.impossible (||)
                                                end))
                                        ]
                                      |)
                                    |) in
                                  let _ :=
                                    let β := chunk in
                                    M.write (|
                                      β,
                                      BinOp.Panic.mul (|
                                        Integer.Usize,
                                        M.read (| β |),
                                        Value.Integer 2
                                      |)
                                    |) in
                                  let _ :=
                                    let β := twiddle_chunk in
                                    M.write (|
                                      β,
                                      BinOp.Panic.div (|
                                        Integer.Usize,
                                        M.read (| β |),
                                        Value.Integer 2
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _ => M.impossible
    end.
  
  Module best_fft_cpu_st.
    (*
        fn bitreverse(mut n: usize, l: usize) -> usize {
            let mut r = 0;
            for _ in 0..l {
                r = (r << 1) | (n & 1);
                n >>= 1;
            }
            r
        }
    *)
    Definition bitreverse (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ n; l ] =>
        ltac:(M.monadic
          (let n := M.alloc (| n |) in
          let l := M.alloc (| l |) in
          M.read (|
            let r := M.alloc (| Value.Integer 0 |) in
            let _ :=
              M.use
                (M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                        [],
                        "into_iter",
                        []
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [ ("start", Value.Integer 0); ("end_", M.read (| l |)) ]
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          ltac:(M.monadic
                            (let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        [ Ty.path "usize" ],
                                      [],
                                      "next",
                                      []
                                    |),
                                    [ iter ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let _ :=
                                        M.write (|
                                          r,
                                          BinOp.Pure.bit_or
                                            (BinOp.Panic.shl (| M.read (| r |), Value.Integer 1 |))
                                            (BinOp.Pure.bit_and (M.read (| n |)) (Value.Integer 1))
                                        |) in
                                      let _ :=
                                        let β := n in
                                        M.write (|
                                          β,
                                          BinOp.Panic.shr (| M.read (| β |), Value.Integer 1 |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            r
          |)))
      | _, _ => M.impossible
      end.
  End best_fft_cpu_st.
End arithmetic.
