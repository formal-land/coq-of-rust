(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuit.
  Module floor_planner.
    Module flat.
      Module region.
        (* StructRecord
          {
            name := "RegionSetup";
            ty_params := [ "F" ];
            fields :=
              [
                ("region_index", Ty.path "halo2_proofs::circuit::RegionIndex");
                ("columns",
                  Ty.apply
                    (Ty.path "std::collections::hash::set::HashSet")
                    [
                      Ty.path "halo2_proofs::circuit::layouter::RegionColumn";
                      Ty.path "std::hash::random::RandomState"
                    ]);
                ("row_count", Ty.path "usize");
                ("constants",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "halo2_proofs::plonk::assigned::Assigned") [ F ];
                          Ty.path "halo2_proofs::circuit::Cell"
                        ];
                      Ty.path "alloc::alloc::Global"
                    ])
              ];
          } *)
        
        Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_ff_Field_F_for_halo2_proofs_circuit_floor_planner_flat_region_RegionSetup_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
              [ F ].
          
          (* Clone *)
          Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                Value.StructRecord
                  "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup"
                  [
                    ("region_index",
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.path "halo2_proofs::circuit::RegionIndex",
                          [],
                          "clone",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                            "region_index"
                          |)
                        ]
                      |));
                    ("columns",
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "std::collections::hash::set::HashSet")
                            [
                              Ty.path "halo2_proofs::circuit::layouter::RegionColumn";
                              Ty.path "std::hash::random::RandomState"
                            ],
                          [],
                          "clone",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                            "columns"
                          |)
                        ]
                      |));
                    ("row_count",
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.path "usize",
                          [],
                          "clone",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                            "row_count"
                          |)
                        ]
                      |));
                    ("constants",
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                    [ F ];
                                  Ty.path "halo2_proofs::circuit::Cell"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          "clone",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                            "constants"
                          |)
                        ]
                      |))
                  ]))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "core::clone::Clone"
              (Self F)
              (* Trait polymorphic types *) []
              (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
        End Impl_core_clone_Clone_where_core_clone_Clone_F_where_ff_Field_F_for_halo2_proofs_circuit_floor_planner_flat_region_RegionSetup_F.
        
        Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_ff_Field_F_for_halo2_proofs_circuit_floor_planner_flat_region_RegionSetup_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
              [ F ].
          
          (* Debug *)
          Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; f ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let f := M.alloc (| f |) in
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_field4_finish",
                    []
                  |),
                  [
                    M.read (| f |);
                    M.read (| Value.String "RegionSetup" |);
                    M.read (| Value.String "region_index" |);
                    (* Unsize *)
                    M.pointer_coercion
                      (M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                        "region_index"
                      |));
                    M.read (| Value.String "columns" |);
                    (* Unsize *)
                    M.pointer_coercion
                      (M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                        "columns"
                      |));
                    M.read (| Value.String "row_count" |);
                    (* Unsize *)
                    M.pointer_coercion
                      (M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                        "row_count"
                      |));
                    M.read (| Value.String "constants" |);
                    (* Unsize *)
                    M.pointer_coercion
                      (M.alloc (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                          "constants"
                        |)
                      |))
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "core::fmt::Debug"
              (Self F)
              (* Trait polymorphic types *) []
              (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
        End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_ff_Field_F_for_halo2_proofs_circuit_floor_planner_flat_region_RegionSetup_F.
        
        Module Impl_halo2_proofs_circuit_floor_planner_flat_region_RegionSetup_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
              [ F ].
          
          (*
              pub(crate) fn new(region_index: RegionIndex) -> Self {
                  RegionSetup {
                      region_index,
                      columns: HashSet::default(),
                      row_count: 0,
                      constants: vec![],
                  }
              }
          *)
          Definition new (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ region_index ] =>
              ltac:(M.monadic
                (let region_index := M.alloc (| region_index |) in
                Value.StructRecord
                  "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup"
                  [
                    ("region_index", M.read (| region_index |));
                    ("columns",
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::default::Default",
                          Ty.apply
                            (Ty.path "std::collections::hash::set::HashSet")
                            [
                              Ty.path "halo2_proofs::circuit::layouter::RegionColumn";
                              Ty.path "std::hash::random::RandomState"
                            ],
                          [],
                          "default",
                          []
                        |),
                        []
                      |));
                    ("row_count", Value.Integer 0);
                    ("constants",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                    [ F ];
                                  Ty.path "halo2_proofs::circuit::Cell"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        []
                      |))
                  ]))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_new :
            forall (F : Ty.t),
            M.IsAssociatedFunction (Self F) "new" (new F).
        End Impl_halo2_proofs_circuit_floor_planner_flat_region_RegionSetup_F.
        
        Module Impl_halo2_proofs_circuit_layouter_RegionLayouter_where_ff_Field_F_F_for_halo2_proofs_parallel_Parallel_halo2_proofs_circuit_floor_planner_flat_region_RegionSetup_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "halo2_proofs::parallel::Parallel")
              [
                Ty.apply
                  (Ty.path "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                  [ F ]
              ].
          
          (*
              fn enable_selector<'v>(
                  &'v self,
                  _: &'v (dyn Fn() -> String + 'v),
                  selector: &Selector,
                  offset: usize,
              ) -> Result<(), Error> {
                  // Track the selector's fixed column as part of the region's shape.
                  let mut region = self.lock().unwrap();
                  region.columns.insert(( *selector).into());
                  region.row_count = cmp::max(region.row_count, offset + 1);
                  Ok(())
              }
          *)
          Definition enable_selector (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; β1; selector; offset ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let β1 := M.alloc (| β1 |) in
                let selector := M.alloc (| selector |) in
                let offset := M.alloc (| offset |) in
                M.match_operator (|
                  β1,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (M.read (|
                          let region :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::MutexGuard")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                            [ F ]
                                        ];
                                      Ty.apply
                                        (Ty.path "std::sync::poison::PoisonError")
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                                [ F ]
                                            ]
                                        ]
                                    ],
                                  "unwrap",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "halo2_proofs::parallel::Parallel")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                            [ F ]
                                        ],
                                      "lock",
                                      []
                                    |),
                                    [ M.read (| self |) ]
                                  |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "std::collections::hash::set::HashSet")
                                    [
                                      Ty.path "halo2_proofs::circuit::layouter::RegionColumn";
                                      Ty.path "std::hash::random::RandomState"
                                    ],
                                  "insert",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::DerefMut",
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::MutexGuard")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                              [ F ]
                                          ],
                                        [],
                                        "deref_mut",
                                        []
                                      |),
                                      [ region ]
                                    |),
                                    "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                                    "columns"
                                  |);
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.path "halo2_proofs::plonk::circuit::Selector",
                                      [ Ty.path "halo2_proofs::circuit::layouter::RegionColumn" ],
                                      "into",
                                      []
                                    |),
                                    [ M.read (| M.read (| selector |) |) ]
                                  |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.write (|
                              M.SubPointer.get_struct_record_field (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::MutexGuard")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                          [ F ]
                                      ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [ region ]
                                |),
                                "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                                "row_count"
                              |),
                              M.call_closure (|
                                M.get_function (| "core::cmp::max", [ Ty.path "usize" ] |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                                [ F ]
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [ region ]
                                      |),
                                      "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                                      "row_count"
                                    |)
                                  |);
                                  BinOp.Panic.add (|
                                    Integer.Usize,
                                    M.read (| offset |),
                                    Value.Integer 1
                                  |)
                                ]
                              |)
                            |) in
                          M.alloc (|
                            Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                          |)
                        |)))
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn assign_advice<'v>(
                  &'v self,
                  _: &'v (dyn Fn() -> String + 'v),
                  column: Column<Advice>,
                  offset: usize,
                  _to: &'v mut (dyn FnMut() -> Result<Assigned<F>, Error> + 'v),
              ) -> Result<Cell, Error> {
                  let mut region = self.lock().unwrap();
                  region.columns.insert(Column::<Any>::from(column).into());
                  region.row_count = cmp::max(region.row_count, offset + 1);
          
                  Ok(Cell {
                      region_index: region.region_index,
                      row_offset: offset,
                      column: column.into(),
                  })
              }
          *)
          Definition assign_advice (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; β1; column; offset; _to ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let β1 := M.alloc (| β1 |) in
                let column := M.alloc (| column |) in
                let offset := M.alloc (| offset |) in
                let _to := M.alloc (| _to |) in
                M.match_operator (|
                  β1,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (M.read (|
                          let region :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::MutexGuard")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                            [ F ]
                                        ];
                                      Ty.apply
                                        (Ty.path "std::sync::poison::PoisonError")
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                                [ F ]
                                            ]
                                        ]
                                    ],
                                  "unwrap",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "halo2_proofs::parallel::Parallel")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                            [ F ]
                                        ],
                                      "lock",
                                      []
                                    |),
                                    [ M.read (| self |) ]
                                  |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "std::collections::hash::set::HashSet")
                                    [
                                      Ty.path "halo2_proofs::circuit::layouter::RegionColumn";
                                      Ty.path "std::hash::random::RandomState"
                                    ],
                                  "insert",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::DerefMut",
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::MutexGuard")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                              [ F ]
                                          ],
                                        [],
                                        "deref_mut",
                                        []
                                      |),
                                      [ region ]
                                    |),
                                    "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                                    "columns"
                                  |);
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                                      [ Ty.path "halo2_proofs::circuit::layouter::RegionColumn" ],
                                      "into",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::From",
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                                          ],
                                          "from",
                                          []
                                        |),
                                        [ M.read (| column |) ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.write (|
                              M.SubPointer.get_struct_record_field (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::MutexGuard")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                          [ F ]
                                      ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [ region ]
                                |),
                                "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                                "row_count"
                              |),
                              M.call_closure (|
                                M.get_function (| "core::cmp::max", [ Ty.path "usize" ] |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                                [ F ]
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [ region ]
                                      |),
                                      "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                                      "row_count"
                                    |)
                                  |);
                                  BinOp.Panic.add (|
                                    Integer.Usize,
                                    M.read (| offset |),
                                    Value.Integer 1
                                  |)
                                ]
                              |)
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [
                                Value.StructRecord
                                  "halo2_proofs::circuit::Cell"
                                  [
                                    ("region_index",
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "std::sync::mutex::MutexGuard")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                                    [ F ]
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [ region ]
                                          |),
                                          "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                                          "region_index"
                                        |)
                                      |));
                                    ("row_offset", M.read (| offset |));
                                    ("column",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Advice" ],
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                          ],
                                          "into",
                                          []
                                        |),
                                        [ M.read (| column |) ]
                                      |))
                                  ]
                              ]
                          |)
                        |)))
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn assign_advice_from_constant<'v>(
                  &'v self,
                  annotation: &'v (dyn Fn() -> String + 'v),
                  column: Column<Advice>,
                  offset: usize,
                  constant: Assigned<F>,
              ) -> Result<Cell, Error> {
                  // The rest is identical to witnessing an advice cell.
                  let advice = self.assign_advice(annotation, column, offset, &mut || Ok(constant))?;
                  self.constrain_constant(advice, constant)?;
                  Ok(advice)
              }
          *)
          Definition assign_advice_from_constant
              (F : Ty.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; annotation; column; offset; constant ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let annotation := M.alloc (| annotation |) in
                let column := M.alloc (| column |) in
                let offset := M.alloc (| offset |) in
                let constant := M.alloc (| constant |) in
                M.catch_return (|
                  ltac:(M.monadic
                    (M.read (|
                      let advice :=
                        M.copy (|
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.path "halo2_proofs::circuit::Cell";
                                      Ty.path "halo2_proofs::plonk::error::Error"
                                    ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "halo2_proofs::circuit::layouter::RegionLayouter",
                                      Ty.apply
                                        (Ty.path "halo2_proofs::parallel::Parallel")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                            [ F ]
                                        ],
                                      [ F ],
                                      "assign_advice",
                                      []
                                    |),
                                    [
                                      M.read (| self |);
                                      (* Unsize *) M.pointer_coercion (M.read (| annotation |));
                                      M.read (| column |);
                                      M.read (| offset |);
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  M.match_operator (|
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (Value.StructTuple
                                                            "core::result::Result::Ok"
                                                            [ M.read (| constant |) ]))
                                                    ]
                                                  |)
                                                | _ => M.impossible (||)
                                                end))
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "halo2_proofs::circuit::Cell";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |)
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "halo2_proofs::circuit::layouter::RegionLayouter",
                                    Ty.apply
                                      (Ty.path "halo2_proofs::parallel::Parallel")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                          [ F ]
                                      ],
                                    [ F ],
                                    "constrain_constant",
                                    []
                                  |),
                                  [ M.read (| self |); M.read (| advice |); M.read (| constant |) ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "halo2_proofs::circuit::Cell";
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |) in
                      M.alloc (|
                        Value.StructTuple "core::result::Result::Ok" [ M.read (| advice |) ]
                      |)
                    |)))
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn assign_advice_from_instance<'v>(
                  &self,
                  _: &'v (dyn Fn() -> String + 'v),
                  _: Column<Instance>,
                  _: usize,
                  advice: Column<Advice>,
                  offset: usize,
              ) -> Result<(Cell, Option<F>), Error> {
                  let mut region = self.lock().unwrap();
                  region.columns.insert(Column::<Any>::from(advice).into());
                  region.row_count = cmp::max(region.row_count, offset + 1);
          
                  Ok((
                      Cell {
                          region_index: region.region_index,
                          row_offset: offset,
                          column: advice.into(),
                      },
                      None,
                  ))
              }
          *)
          Definition assign_advice_from_instance
              (F : Ty.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; β1; β2; β3; advice; offset ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let β1 := M.alloc (| β1 |) in
                let β2 := M.alloc (| β2 |) in
                let β3 := M.alloc (| β3 |) in
                let advice := M.alloc (| advice |) in
                let offset := M.alloc (| offset |) in
                M.match_operator (|
                  β1,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          β2,
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  β3,
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.read (|
                                          let region :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "std::sync::mutex::MutexGuard")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                                            [ F ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "std::sync::poison::PoisonError")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "std::sync::mutex::MutexGuard")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                                                [ F ]
                                                            ]
                                                        ]
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::parallel::Parallel")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                                            [ F ]
                                                        ],
                                                      "lock",
                                                      []
                                                    |),
                                                    [ M.read (| self |) ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "std::collections::hash::set::HashSet")
                                                    [
                                                      Ty.path
                                                        "halo2_proofs::circuit::layouter::RegionColumn";
                                                      Ty.path "std::hash::random::RandomState"
                                                    ],
                                                  "insert",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::DerefMut",
                                                        Ty.apply
                                                          (Ty.path "std::sync::mutex::MutexGuard")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                                              [ F ]
                                                          ],
                                                        [],
                                                        "deref_mut",
                                                        []
                                                      |),
                                                      [ region ]
                                                    |),
                                                    "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                                                    "columns"
                                                  |);
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::Into",
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Column")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::circuit::Any"
                                                        ],
                                                      [
                                                        Ty.path
                                                          "halo2_proofs::circuit::layouter::RegionColumn"
                                                      ],
                                                      "into",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Column")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::Any"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Column")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::Advice"
                                                              ]
                                                          ],
                                                          "from",
                                                          []
                                                        |),
                                                        [ M.read (| advice |) ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.write (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::DerefMut",
                                                    Ty.apply
                                                      (Ty.path "std::sync::mutex::MutexGuard")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                                          [ F ]
                                                      ],
                                                    [],
                                                    "deref_mut",
                                                    []
                                                  |),
                                                  [ region ]
                                                |),
                                                "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                                                "row_count"
                                              |),
                                              M.call_closure (|
                                                M.get_function (|
                                                  "core::cmp::max",
                                                  [ Ty.path "usize" ]
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.apply
                                                            (Ty.path "std::sync::mutex::MutexGuard")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                                                [ F ]
                                                            ],
                                                          [],
                                                          "deref",
                                                          []
                                                        |),
                                                        [ region ]
                                                      |),
                                                      "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                                                      "row_count"
                                                    |)
                                                  |);
                                                  BinOp.Panic.add (|
                                                    Integer.Usize,
                                                    M.read (| offset |),
                                                    Value.Integer 1
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            Value.StructTuple
                                              "core::result::Result::Ok"
                                              [
                                                Value.Tuple
                                                  [
                                                    Value.StructRecord
                                                      "halo2_proofs::circuit::Cell"
                                                      [
                                                        ("region_index",
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "std::sync::mutex::MutexGuard")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                                                        [ F ]
                                                                    ],
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [ region ]
                                                              |),
                                                              "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                                                              "region_index"
                                                            |)
                                                          |));
                                                        ("row_offset", M.read (| offset |));
                                                        ("column",
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::Advice"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::Any"
                                                                  ]
                                                              ],
                                                              "into",
                                                              []
                                                            |),
                                                            [ M.read (| advice |) ]
                                                          |))
                                                      ];
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  ]
                                              ]
                                          |)
                                        |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn assign_fixed<'v>(
                  &'v self,
                  _: &'v (dyn Fn() -> String + 'v),
                  column: Column<Fixed>,
                  offset: usize,
                  _to: &'v mut (dyn FnMut() -> Result<Assigned<F>, Error> + 'v),
              ) -> Result<Cell, Error> {
                  let mut region = self.lock().unwrap();
                  region.columns.insert(Column::<Any>::from(column).into());
                  region.row_count = cmp::max(region.row_count, offset + 1);
          
                  Ok(Cell {
                      region_index: region.region_index,
                      row_offset: offset,
                      column: column.into(),
                  })
              }
          *)
          Definition assign_fixed (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; β1; column; offset; _to ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let β1 := M.alloc (| β1 |) in
                let column := M.alloc (| column |) in
                let offset := M.alloc (| offset |) in
                let _to := M.alloc (| _to |) in
                M.match_operator (|
                  β1,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (M.read (|
                          let region :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::MutexGuard")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                            [ F ]
                                        ];
                                      Ty.apply
                                        (Ty.path "std::sync::poison::PoisonError")
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                                [ F ]
                                            ]
                                        ]
                                    ],
                                  "unwrap",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "halo2_proofs::parallel::Parallel")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                            [ F ]
                                        ],
                                      "lock",
                                      []
                                    |),
                                    [ M.read (| self |) ]
                                  |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "std::collections::hash::set::HashSet")
                                    [
                                      Ty.path "halo2_proofs::circuit::layouter::RegionColumn";
                                      Ty.path "std::hash::random::RandomState"
                                    ],
                                  "insert",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::DerefMut",
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::MutexGuard")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                              [ F ]
                                          ],
                                        [],
                                        "deref_mut",
                                        []
                                      |),
                                      [ region ]
                                    |),
                                    "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                                    "columns"
                                  |);
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                                      [ Ty.path "halo2_proofs::circuit::layouter::RegionColumn" ],
                                      "into",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::From",
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ]
                                          ],
                                          "from",
                                          []
                                        |),
                                        [ M.read (| column |) ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.write (|
                              M.SubPointer.get_struct_record_field (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::MutexGuard")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                          [ F ]
                                      ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [ region ]
                                |),
                                "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                                "row_count"
                              |),
                              M.call_closure (|
                                M.get_function (| "core::cmp::max", [ Ty.path "usize" ] |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                                [ F ]
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [ region ]
                                      |),
                                      "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                                      "row_count"
                                    |)
                                  |);
                                  BinOp.Panic.add (|
                                    Integer.Usize,
                                    M.read (| offset |),
                                    Value.Integer 1
                                  |)
                                ]
                              |)
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [
                                Value.StructRecord
                                  "halo2_proofs::circuit::Cell"
                                  [
                                    ("region_index",
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "std::sync::mutex::MutexGuard")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                                    [ F ]
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [ region ]
                                          |),
                                          "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                                          "region_index"
                                        |)
                                      |));
                                    ("row_offset", M.read (| offset |));
                                    ("column",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ],
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                          ],
                                          "into",
                                          []
                                        |),
                                        [ M.read (| column |) ]
                                      |))
                                  ]
                              ]
                          |)
                        |)))
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn constrain_constant(&self, cell: Cell, constant: Assigned<F>) -> Result<(), Error> {
                  // Global constants don't affect the region shape.
                  let mut region = self.lock().unwrap();
                  region.constants.push((constant, cell));
                  Ok(())
              }
          *)
          Definition constrain_constant (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; cell; constant ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let cell := M.alloc (| cell |) in
                let constant := M.alloc (| constant |) in
                M.read (|
                  let region :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.apply
                                (Ty.path "std::sync::mutex::MutexGuard")
                                [
                                  Ty.apply
                                    (Ty.path
                                      "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                    [ F ]
                                ];
                              Ty.apply
                                (Ty.path "std::sync::poison::PoisonError")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::MutexGuard")
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                        [ F ]
                                    ]
                                ]
                            ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::parallel::Parallel")
                                [
                                  Ty.apply
                                    (Ty.path
                                      "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                    [ F ]
                                ],
                              "lock",
                              []
                            |),
                            [ M.read (| self |) ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                    [ F ];
                                  Ty.path "halo2_proofs::circuit::Cell"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "push",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "std::sync::mutex::MutexGuard")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup")
                                      [ F ]
                                  ],
                                [],
                                "deref_mut",
                                []
                              |),
                              [ region ]
                            |),
                            "halo2_proofs::circuit::floor_planner::flat::region::RegionSetup",
                            "constants"
                          |);
                          Value.Tuple [ M.read (| constant |); M.read (| cell |) ]
                        ]
                      |)
                    |) in
                  M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn constrain_equal(&self, _left: Cell, _right: Cell) -> Result<(), Error> {
                  // Equality constraints don't affect the region shape.
                  Ok(())
              }
          *)
          Definition constrain_equal (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; _left; _right ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let _left := M.alloc (| _left |) in
                let _right := M.alloc (| _right |) in
                Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "halo2_proofs::circuit::layouter::RegionLayouter"
              (Self F)
              (* Trait polymorphic types *) [ (* F *) F ]
              (* Instance *)
              [
                ("enable_selector", InstanceField.Method (enable_selector F));
                ("assign_advice", InstanceField.Method (assign_advice F));
                ("assign_advice_from_constant",
                  InstanceField.Method (assign_advice_from_constant F));
                ("assign_advice_from_instance",
                  InstanceField.Method (assign_advice_from_instance F));
                ("assign_fixed", InstanceField.Method (assign_fixed F));
                ("constrain_constant", InstanceField.Method (constrain_constant F));
                ("constrain_equal", InstanceField.Method (constrain_equal F))
              ].
        End Impl_halo2_proofs_circuit_layouter_RegionLayouter_where_ff_Field_F_F_for_halo2_proofs_parallel_Parallel_halo2_proofs_circuit_floor_planner_flat_region_RegionSetup_F.
      End region.
    End flat.
  End floor_planner.
End circuit.
