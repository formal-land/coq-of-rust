(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuit.
  Module layouter.
    (* Trait *)
    (* Empty module 'RegionLayouter' *)
    
    (* Trait *)
    (* Empty module 'TableLayouter' *)
    
    (* StructRecord
      {
        name := "RegionShape";
        ty_params := [];
        fields :=
          [
            ("region_index", Ty.path "halo2_proofs::circuit::RegionIndex");
            ("columns",
              Ty.apply
                (Ty.path "std::collections::hash::set::HashSet")
                [
                  Ty.path "halo2_proofs::circuit::layouter::RegionColumn";
                  Ty.path "std::hash::random::RandomState"
                ]);
            ("row_count", Ty.path "usize")
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_halo2_proofs_circuit_layouter_RegionShape.
      Definition Self : Ty.t := Ty.path "halo2_proofs::circuit::layouter::RegionShape".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "halo2_proofs::circuit::layouter::RegionShape"
              [
                ("region_index",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "halo2_proofs::circuit::RegionIndex",
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::circuit::layouter::RegionShape",
                        "region_index"
                      |)
                    ]
                  |));
                ("columns",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "std::collections::hash::set::HashSet")
                        [
                          Ty.path "halo2_proofs::circuit::layouter::RegionColumn";
                          Ty.path "std::hash::random::RandomState"
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::circuit::layouter::RegionShape",
                        "columns"
                      |)
                    ]
                  |));
                ("row_count",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.path "usize", [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::circuit::layouter::RegionShape",
                        "row_count"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_halo2_proofs_circuit_layouter_RegionShape.
    
    Module Impl_core_fmt_Debug_for_halo2_proofs_circuit_layouter_RegionShape.
      Definition Self : Ty.t := Ty.path "halo2_proofs::circuit::layouter::RegionShape".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field3_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "RegionShape" |);
                M.read (| Value.String "region_index" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::circuit::layouter::RegionShape",
                    "region_index"
                  |));
                M.read (| Value.String "columns" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::circuit::layouter::RegionShape",
                    "columns"
                  |));
                M.read (| Value.String "row_count" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::circuit::layouter::RegionShape",
                      "row_count"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_halo2_proofs_circuit_layouter_RegionShape.
    
    (*
    Enum RegionColumn
    {
      ty_params := [];
      variants :=
        [
          {
            name := "Column";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                    [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                ];
            discriminant := None;
          };
          {
            name := "Selector";
            item := StructTuple [ Ty.path "halo2_proofs::plonk::circuit::Selector" ];
            discriminant := None;
          }
        ];
    }
    *)
    
    Module Impl_core_marker_StructuralEq_for_halo2_proofs_circuit_layouter_RegionColumn.
      Definition Self : Ty.t := Ty.path "halo2_proofs::circuit::layouter::RegionColumn".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralEq_for_halo2_proofs_circuit_layouter_RegionColumn.
    
    Module Impl_core_cmp_Eq_for_halo2_proofs_circuit_layouter_RegionColumn.
      Definition Self : Ty.t := Ty.path "halo2_proofs::circuit::layouter::RegionColumn".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_halo2_proofs_circuit_layouter_RegionColumn.
    
    Module Impl_core_marker_StructuralPartialEq_for_halo2_proofs_circuit_layouter_RegionColumn.
      Definition Self : Ty.t := Ty.path "halo2_proofs::circuit::layouter::RegionColumn".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_halo2_proofs_circuit_layouter_RegionColumn.
    
    Module Impl_core_cmp_PartialEq_for_halo2_proofs_circuit_layouter_RegionColumn.
      Definition Self : Ty.t := Ty.path "halo2_proofs::circuit::layouter::RegionColumn".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let __self_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "halo2_proofs::circuit::layouter::RegionColumn" ]
                    |),
                    [ M.read (| self |) ]
                  |)
                |) in
              let __arg1_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "halo2_proofs::circuit::layouter::RegionColumn" ]
                    |),
                    [ M.read (| other |) ]
                  |)
                |) in
              M.alloc (|
                LogicalOp.and (|
                  BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)),
                  ltac:(M.monadic
                    (M.read (|
                      M.match_operator (|
                        M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::circuit::layouter::RegionColumn::Column",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::circuit::layouter::RegionColumn::Column",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Column")
                                      [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                    ],
                                    "eq",
                                    []
                                  |),
                                  [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::circuit::layouter::RegionColumn::Selector",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::circuit::layouter::RegionColumn::Selector",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.path "halo2_proofs::plonk::circuit::Selector",
                                    [ Ty.path "halo2_proofs::plonk::circuit::Selector" ],
                                    "eq",
                                    []
                                  |),
                                  [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    M.get_function (| "core::intrinsics::unreachable", [] |),
                                    []
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |)))
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_halo2_proofs_circuit_layouter_RegionColumn.
    
    Module Impl_core_marker_Copy_for_halo2_proofs_circuit_layouter_RegionColumn.
      Definition Self : Ty.t := Ty.path "halo2_proofs::circuit::layouter::RegionColumn".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_for_halo2_proofs_circuit_layouter_RegionColumn.
    
    Module Impl_core_clone_Clone_for_halo2_proofs_circuit_layouter_RegionColumn.
      Definition Self : Ty.t := Ty.path "halo2_proofs::circuit::layouter::RegionColumn".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.read (| self |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_halo2_proofs_circuit_layouter_RegionColumn.
    
    Module Impl_core_fmt_Debug_for_halo2_proofs_circuit_layouter_RegionColumn.
      Definition Self : Ty.t := Ty.path "halo2_proofs::circuit::layouter::RegionColumn".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::circuit::layouter::RegionColumn::Column",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Column" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::circuit::layouter::RegionColumn::Selector",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Selector" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_halo2_proofs_circuit_layouter_RegionColumn.
    
    Module Impl_core_hash_Hash_for_halo2_proofs_circuit_layouter_RegionColumn.
      Definition Self : Ty.t := Ty.path "halo2_proofs::circuit::layouter::RegionColumn".
      
      (* Hash *)
      Definition hash (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.read (|
              let __self_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "halo2_proofs::circuit::layouter::RegionColumn" ]
                    |),
                    [ M.read (| self |) ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::hash::Hash",
                      Ty.path "isize",
                      [],
                      "hash",
                      [ __H ]
                    |),
                    [ __self_tag; M.read (| state |) ]
                  |)
                |) in
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::circuit::layouter::RegionColumn::Column",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::circuit::layouter::RegionColumn::Selector",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "halo2_proofs::plonk::circuit::Selector",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_halo2_proofs_circuit_layouter_RegionColumn.
    
    Module Impl_core_convert_From_halo2_proofs_plonk_circuit_Column_halo2_proofs_plonk_circuit_Any_for_halo2_proofs_circuit_layouter_RegionColumn.
      Definition Self : Ty.t := Ty.path "halo2_proofs::circuit::layouter::RegionColumn".
      
      (*
          fn from(column: Column<Any>) -> RegionColumn {
              RegionColumn::Column(column)
          }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ column ] =>
          ltac:(M.monadic
            (let column := M.alloc (| column |) in
            Value.StructTuple
              "halo2_proofs::circuit::layouter::RegionColumn::Column"
              [ M.read (| column |) ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *)
          [
            (* T *)
            Ty.apply
              (Ty.path "halo2_proofs::plonk::circuit::Column")
              [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
          ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_halo2_proofs_plonk_circuit_Column_halo2_proofs_plonk_circuit_Any_for_halo2_proofs_circuit_layouter_RegionColumn.
    
    Module Impl_core_convert_From_halo2_proofs_plonk_circuit_Selector_for_halo2_proofs_circuit_layouter_RegionColumn.
      Definition Self : Ty.t := Ty.path "halo2_proofs::circuit::layouter::RegionColumn".
      
      (*
          fn from(selector: Selector) -> RegionColumn {
              RegionColumn::Selector(selector)
          }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ selector ] =>
          ltac:(M.monadic
            (let selector := M.alloc (| selector |) in
            Value.StructTuple
              "halo2_proofs::circuit::layouter::RegionColumn::Selector"
              [ M.read (| selector |) ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "halo2_proofs::plonk::circuit::Selector" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_halo2_proofs_plonk_circuit_Selector_for_halo2_proofs_circuit_layouter_RegionColumn.
    
    Module Impl_core_cmp_Ord_for_halo2_proofs_circuit_layouter_RegionColumn.
      Definition Self : Ty.t := Ty.path "halo2_proofs::circuit::layouter::RegionColumn".
      
      (*
          fn cmp(&self, other: &Self) -> cmp::Ordering {
              match (self, other) {
                  (Self::Column(ref a), Self::Column(ref b)) => a.cmp(b),
                  (Self::Selector(ref a), Self::Selector(ref b)) => a.0.cmp(&b.0),
                  (Self::Column(_), Self::Selector(_)) => cmp::Ordering::Less,
                  (Self::Selector(_), Self::Column(_)) => cmp::Ordering::Greater,
              }
          }
      *)
      Definition cmp (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "halo2_proofs::circuit::layouter::RegionColumn::Column",
                          0
                        |) in
                      let a := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "halo2_proofs::circuit::layouter::RegionColumn::Column",
                          0
                        |) in
                      let b := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::cmp::Ord",
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                            [],
                            "cmp",
                            []
                          |),
                          [ M.read (| a |); M.read (| b |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "halo2_proofs::circuit::layouter::RegionColumn::Selector",
                          0
                        |) in
                      let a := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "halo2_proofs::circuit::layouter::RegionColumn::Selector",
                          0
                        |) in
                      let b := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (| "core::cmp::Ord", Ty.path "usize", [], "cmp", [] |),
                          [
                            M.SubPointer.get_struct_tuple_field (|
                              M.read (| a |),
                              "halo2_proofs::plonk::circuit::Selector",
                              0
                            |);
                            M.SubPointer.get_struct_tuple_field (|
                              M.read (| b |),
                              "halo2_proofs::plonk::circuit::Selector",
                              0
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "halo2_proofs::circuit::layouter::RegionColumn::Column",
                          0
                        |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "halo2_proofs::circuit::layouter::RegionColumn::Selector",
                          0
                        |) in
                      M.alloc (| Value.StructTuple "core::cmp::Ordering::Less" [] |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "halo2_proofs::circuit::layouter::RegionColumn::Selector",
                          0
                        |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "halo2_proofs::circuit::layouter::RegionColumn::Column",
                          0
                        |) in
                      M.alloc (| Value.StructTuple "core::cmp::Ordering::Greater" [] |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Ord"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
    End Impl_core_cmp_Ord_for_halo2_proofs_circuit_layouter_RegionColumn.
    
    Module Impl_core_cmp_PartialOrd_for_halo2_proofs_circuit_layouter_RegionColumn.
      Definition Self : Ty.t := Ty.path "halo2_proofs::circuit::layouter::RegionColumn".
      
      (*
          fn partial_cmp(&self, other: &Self) -> Option<cmp::Ordering> {
              Some(self.cmp(other))
          }
      *)
      Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            Value.StructTuple
              "core::option::Option::Some"
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::Ord",
                    Ty.path "halo2_proofs::circuit::layouter::RegionColumn",
                    [],
                    "cmp",
                    []
                  |),
                  [ M.read (| self |); M.read (| other |) ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialOrd"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
    End Impl_core_cmp_PartialOrd_for_halo2_proofs_circuit_layouter_RegionColumn.
    
    Module Impl_halo2_proofs_circuit_layouter_RegionShape.
      Definition Self : Ty.t := Ty.path "halo2_proofs::circuit::layouter::RegionShape".
      
      (*
          pub fn new(region_index: RegionIndex) -> Self {
              RegionShape {
                  region_index,
                  columns: HashSet::default(),
                  row_count: 0,
              }
          }
      *)
      Definition new (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ region_index ] =>
          ltac:(M.monadic
            (let region_index := M.alloc (| region_index |) in
            Value.StructRecord
              "halo2_proofs::circuit::layouter::RegionShape"
              [
                ("region_index", M.read (| region_index |));
                ("columns",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "std::collections::hash::set::HashSet")
                        [
                          Ty.path "halo2_proofs::circuit::layouter::RegionColumn";
                          Ty.path "std::hash::random::RandomState"
                        ],
                      [],
                      "default",
                      []
                    |),
                    []
                  |));
                ("row_count", Value.Integer 0)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
      
      (*
          pub fn region_index(&self) -> RegionIndex {
              self.region_index
          }
      *)
      Definition region_index (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "halo2_proofs::circuit::layouter::RegionShape",
                "region_index"
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_region_index :
        M.IsAssociatedFunction Self "region_index" region_index.
      
      (*
          pub fn columns(&self) -> &HashSet<RegionColumn> {
              &self.columns
          }
      *)
      Definition columns (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "halo2_proofs::circuit::layouter::RegionShape",
              "columns"
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_columns : M.IsAssociatedFunction Self "columns" columns.
      
      (*
          pub fn row_count(&self) -> usize {
              self.row_count
          }
      *)
      Definition row_count (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "halo2_proofs::circuit::layouter::RegionShape",
                "row_count"
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_row_count : M.IsAssociatedFunction Self "row_count" row_count.
    End Impl_halo2_proofs_circuit_layouter_RegionShape.
    
    Module Impl_halo2_proofs_circuit_layouter_RegionLayouter_where_ff_Field_F_F_for_halo2_proofs_parallel_Parallel_halo2_proofs_circuit_layouter_RegionShape.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "halo2_proofs::parallel::Parallel")
          [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ].
      
      (*
          fn enable_selector<'v>(
              &'v self,
              _: &'v (dyn Fn() -> String + 'v),
              selector: &Selector,
              offset: usize,
          ) -> Result<(), Error> {
              let mut region_shape = self.lock().unwrap();
      
              // Track the selector's fixed column as part of the region's shape.
              region_shape.columns.insert(( *selector).into());
              region_shape.row_count = cmp::max(region_shape.row_count, offset + 1);
              Ok(())
          }
      *)
      Definition enable_selector (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; β1; selector; offset ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let β1 := M.alloc (| β1 |) in
            let selector := M.alloc (| selector |) in
            let offset := M.alloc (| offset |) in
            M.match_operator (|
              β1,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.read (|
                      let region_shape :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::MutexGuard")
                                    [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ];
                                  Ty.apply
                                    (Ty.path "std::sync::poison::PoisonError")
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::MutexGuard")
                                        [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ]
                                    ]
                                ],
                              "unwrap",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "halo2_proofs::parallel::Parallel")
                                    [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ],
                                  "lock",
                                  []
                                |),
                                [ M.read (| self |) ]
                              |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "std::collections::hash::set::HashSet")
                                [
                                  Ty.path "halo2_proofs::circuit::layouter::RegionColumn";
                                  Ty.path "std::hash::random::RandomState"
                                ],
                              "insert",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::MutexGuard")
                                      [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [ region_shape ]
                                |),
                                "halo2_proofs::circuit::layouter::RegionShape",
                                "columns"
                              |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::convert::Into",
                                  Ty.path "halo2_proofs::plonk::circuit::Selector",
                                  [ Ty.path "halo2_proofs::circuit::layouter::RegionColumn" ],
                                  "into",
                                  []
                                |),
                                [ M.read (| M.read (| selector |) |) ]
                              |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.write (|
                          M.SubPointer.get_struct_record_field (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "std::sync::mutex::MutexGuard")
                                  [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ],
                                [],
                                "deref_mut",
                                []
                              |),
                              [ region_shape ]
                            |),
                            "halo2_proofs::circuit::layouter::RegionShape",
                            "row_count"
                          |),
                          M.call_closure (|
                            M.get_function (| "core::cmp::max", [ Ty.path "usize" ] |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::MutexGuard")
                                        [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [ region_shape ]
                                  |),
                                  "halo2_proofs::circuit::layouter::RegionShape",
                                  "row_count"
                                |)
                              |);
                              BinOp.Panic.add (|
                                Integer.Usize,
                                M.read (| offset |),
                                Value.Integer 1
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                    |)))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn assign_advice<'v>(
              &'v self,
              _: &'v (dyn Fn() -> String + 'v),
              column: Column<Advice>,
              offset: usize,
              _to: &'v mut (dyn FnMut() -> Result<Assigned<F>, Error> + 'v),
          ) -> Result<Cell, Error> {
              let mut region_shape = self.lock().unwrap();
      
              region_shape
                  .columns
                  .insert(Column::<Any>::from(column).into());
              region_shape.row_count = cmp::max(region_shape.row_count, offset + 1);
      
              Ok(Cell {
                  region_index: region_shape.region_index,
                  row_offset: offset,
                  column: column.into(),
              })
          }
      *)
      Definition assign_advice (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; β1; column; offset; _to ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let β1 := M.alloc (| β1 |) in
            let column := M.alloc (| column |) in
            let offset := M.alloc (| offset |) in
            let _to := M.alloc (| _to |) in
            M.match_operator (|
              β1,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.read (|
                      let region_shape :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::MutexGuard")
                                    [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ];
                                  Ty.apply
                                    (Ty.path "std::sync::poison::PoisonError")
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::MutexGuard")
                                        [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ]
                                    ]
                                ],
                              "unwrap",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "halo2_proofs::parallel::Parallel")
                                    [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ],
                                  "lock",
                                  []
                                |),
                                [ M.read (| self |) ]
                              |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "std::collections::hash::set::HashSet")
                                [
                                  Ty.path "halo2_proofs::circuit::layouter::RegionColumn";
                                  Ty.path "std::hash::random::RandomState"
                                ],
                              "insert",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::MutexGuard")
                                      [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [ region_shape ]
                                |),
                                "halo2_proofs::circuit::layouter::RegionShape",
                                "columns"
                              |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::convert::Into",
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                    [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                                  [ Ty.path "halo2_proofs::circuit::layouter::RegionColumn" ],
                                  "into",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::convert::From",
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                                          [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                                      ],
                                      "from",
                                      []
                                    |),
                                    [ M.read (| column |) ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.write (|
                          M.SubPointer.get_struct_record_field (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "std::sync::mutex::MutexGuard")
                                  [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ],
                                [],
                                "deref_mut",
                                []
                              |),
                              [ region_shape ]
                            |),
                            "halo2_proofs::circuit::layouter::RegionShape",
                            "row_count"
                          |),
                          M.call_closure (|
                            M.get_function (| "core::cmp::max", [ Ty.path "usize" ] |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::MutexGuard")
                                        [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [ region_shape ]
                                  |),
                                  "halo2_proofs::circuit::layouter::RegionShape",
                                  "row_count"
                                |)
                              |);
                              BinOp.Panic.add (|
                                Integer.Usize,
                                M.read (| offset |),
                                Value.Integer 1
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [
                            Value.StructRecord
                              "halo2_proofs::circuit::Cell"
                              [
                                ("region_index",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            [ Ty.path "halo2_proofs::circuit::layouter::RegionShape"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [ region_shape ]
                                      |),
                                      "halo2_proofs::circuit::layouter::RegionShape",
                                      "region_index"
                                    |)
                                  |));
                                ("row_offset", M.read (| offset |));
                                ("column",
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Advice" ],
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                                          [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                      ],
                                      "into",
                                      []
                                    |),
                                    [ M.read (| column |) ]
                                  |))
                              ]
                          ]
                      |)
                    |)))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn assign_advice_from_constant<'v>(
              &'v self,
              annotation: &'v (dyn Fn() -> String + 'v),
              column: Column<Advice>,
              offset: usize,
              constant: Assigned<F>,
          ) -> Result<Cell, Error> {
              // The rest is identical to witnessing an advice cell.
              self.assign_advice(annotation, column, offset, &mut || Ok(constant))
          }
      *)
      Definition assign_advice_from_constant (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; annotation; column; offset; constant ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let annotation := M.alloc (| annotation |) in
            let column := M.alloc (| column |) in
            let offset := M.alloc (| offset |) in
            let constant := M.alloc (| constant |) in
            M.call_closure (|
              M.get_trait_method (|
                "halo2_proofs::circuit::layouter::RegionLayouter",
                Ty.apply
                  (Ty.path "halo2_proofs::parallel::Parallel")
                  [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ],
                [ F ],
                "assign_advice",
                []
              |),
              [
                M.read (| self |);
                (* Unsize *) M.pointer_coercion (M.read (| annotation |));
                M.read (| column |);
                M.read (| offset |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            M.match_operator (|
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (Value.StructTuple
                                      "core::result::Result::Ok"
                                      [ M.read (| constant |) ]))
                              ]
                            |)
                          | _ => M.impossible (||)
                          end))
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn assign_advice_from_instance<'v>(
              &self,
              _: &'v (dyn Fn() -> String + 'v),
              _: Column<Instance>,
              _: usize,
              advice: Column<Advice>,
              offset: usize,
          ) -> Result<(Cell, Option<F>), Error> {
              let mut region_shape = self.lock().unwrap();
      
              region_shape
                  .columns
                  .insert(Column::<Any>::from(advice).into());
              region_shape.row_count = cmp::max(region_shape.row_count, offset + 1);
      
              Ok((
                  Cell {
                      region_index: region_shape.region_index,
                      row_offset: offset,
                      column: advice.into(),
                  },
                  None,
              ))
          }
      *)
      Definition assign_advice_from_instance (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; β1; β2; β3; advice; offset ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let β1 := M.alloc (| β1 |) in
            let β2 := M.alloc (| β2 |) in
            let β3 := M.alloc (| β3 |) in
            let advice := M.alloc (| advice |) in
            let offset := M.alloc (| offset |) in
            M.match_operator (|
              β1,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      β2,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              β3,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.read (|
                                      let region_shape :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.apply
                                                    (Ty.path "std::sync::mutex::MutexGuard")
                                                    [
                                                      Ty.path
                                                        "halo2_proofs::circuit::layouter::RegionShape"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "std::sync::poison::PoisonError")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "std::sync::mutex::MutexGuard")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::circuit::layouter::RegionShape"
                                                        ]
                                                    ]
                                                ],
                                              "unwrap",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::parallel::Parallel")
                                                    [
                                                      Ty.path
                                                        "halo2_proofs::circuit::layouter::RegionShape"
                                                    ],
                                                  "lock",
                                                  []
                                                |),
                                                [ M.read (| self |) ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let _ :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "std::collections::hash::set::HashSet")
                                                [
                                                  Ty.path
                                                    "halo2_proofs::circuit::layouter::RegionColumn";
                                                  Ty.path "std::hash::random::RandomState"
                                                ],
                                              "insert",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::DerefMut",
                                                    Ty.apply
                                                      (Ty.path "std::sync::mutex::MutexGuard")
                                                      [
                                                        Ty.path
                                                          "halo2_proofs::circuit::layouter::RegionShape"
                                                      ],
                                                    [],
                                                    "deref_mut",
                                                    []
                                                  |),
                                                  [ region_shape ]
                                                |),
                                                "halo2_proofs::circuit::layouter::RegionShape",
                                                "columns"
                                              |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                    [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::circuit::layouter::RegionColumn"
                                                  ],
                                                  "into",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Column")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::circuit::Any"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Column")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::Advice"
                                                          ]
                                                      ],
                                                      "from",
                                                      []
                                                    |),
                                                    [ M.read (| advice |) ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let _ :=
                                        M.write (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::DerefMut",
                                                Ty.apply
                                                  (Ty.path "std::sync::mutex::MutexGuard")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::circuit::layouter::RegionShape"
                                                  ],
                                                [],
                                                "deref_mut",
                                                []
                                              |),
                                              [ region_shape ]
                                            |),
                                            "halo2_proofs::circuit::layouter::RegionShape",
                                            "row_count"
                                          |),
                                          M.call_closure (|
                                            M.get_function (|
                                              "core::cmp::max",
                                              [ Ty.path "usize" ]
                                            |),
                                            [
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "std::sync::mutex::MutexGuard")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::circuit::layouter::RegionShape"
                                                        ],
                                                      [],
                                                      "deref",
                                                      []
                                                    |),
                                                    [ region_shape ]
                                                  |),
                                                  "halo2_proofs::circuit::layouter::RegionShape",
                                                  "row_count"
                                                |)
                                              |);
                                              BinOp.Panic.add (|
                                                Integer.Usize,
                                                M.read (| offset |),
                                                Value.Integer 1
                                              |)
                                            ]
                                          |)
                                        |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "core::result::Result::Ok"
                                          [
                                            Value.Tuple
                                              [
                                                Value.StructRecord
                                                  "halo2_proofs::circuit::Cell"
                                                  [
                                                    ("region_index",
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "std::sync::mutex::MutexGuard")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::circuit::layouter::RegionShape"
                                                                ],
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [ region_shape ]
                                                          |),
                                                          "halo2_proofs::circuit::layouter::RegionShape",
                                                          "region_index"
                                                        |)
                                                      |));
                                                    ("row_offset", M.read (| offset |));
                                                    ("column",
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Column")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::Advice"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Column")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::Any"
                                                              ]
                                                          ],
                                                          "into",
                                                          []
                                                        |),
                                                        [ M.read (| advice |) ]
                                                      |))
                                                  ];
                                                Value.StructTuple "core::option::Option::None" []
                                              ]
                                          ]
                                      |)
                                    |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn assign_fixed<'v>(
              &'v self,
              _: &'v (dyn Fn() -> String + 'v),
              column: Column<Fixed>,
              offset: usize,
              _to: &'v mut (dyn FnMut() -> Result<Assigned<F>, Error> + 'v),
          ) -> Result<Cell, Error> {
              let mut region_shape = self.lock().unwrap();
      
              region_shape
                  .columns
                  .insert(Column::<Any>::from(column).into());
              region_shape.row_count = cmp::max(region_shape.row_count, offset + 1);
      
              Ok(Cell {
                  region_index: region_shape.region_index,
                  row_offset: offset,
                  column: column.into(),
              })
          }
      *)
      Definition assign_fixed (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; β1; column; offset; _to ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let β1 := M.alloc (| β1 |) in
            let column := M.alloc (| column |) in
            let offset := M.alloc (| offset |) in
            let _to := M.alloc (| _to |) in
            M.match_operator (|
              β1,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.read (|
                      let region_shape :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::MutexGuard")
                                    [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ];
                                  Ty.apply
                                    (Ty.path "std::sync::poison::PoisonError")
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::MutexGuard")
                                        [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ]
                                    ]
                                ],
                              "unwrap",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "halo2_proofs::parallel::Parallel")
                                    [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ],
                                  "lock",
                                  []
                                |),
                                [ M.read (| self |) ]
                              |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "std::collections::hash::set::HashSet")
                                [
                                  Ty.path "halo2_proofs::circuit::layouter::RegionColumn";
                                  Ty.path "std::hash::random::RandomState"
                                ],
                              "insert",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::MutexGuard")
                                      [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [ region_shape ]
                                |),
                                "halo2_proofs::circuit::layouter::RegionShape",
                                "columns"
                              |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::convert::Into",
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                    [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                                  [ Ty.path "halo2_proofs::circuit::layouter::RegionColumn" ],
                                  "into",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::convert::From",
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                                          [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ]
                                      ],
                                      "from",
                                      []
                                    |),
                                    [ M.read (| column |) ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |) in
                      let _ :=
                        M.write (|
                          M.SubPointer.get_struct_record_field (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "std::sync::mutex::MutexGuard")
                                  [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ],
                                [],
                                "deref_mut",
                                []
                              |),
                              [ region_shape ]
                            |),
                            "halo2_proofs::circuit::layouter::RegionShape",
                            "row_count"
                          |),
                          M.call_closure (|
                            M.get_function (| "core::cmp::max", [ Ty.path "usize" ] |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::MutexGuard")
                                        [ Ty.path "halo2_proofs::circuit::layouter::RegionShape" ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [ region_shape ]
                                  |),
                                  "halo2_proofs::circuit::layouter::RegionShape",
                                  "row_count"
                                |)
                              |);
                              BinOp.Panic.add (|
                                Integer.Usize,
                                M.read (| offset |),
                                Value.Integer 1
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [
                            Value.StructRecord
                              "halo2_proofs::circuit::Cell"
                              [
                                ("region_index",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            [ Ty.path "halo2_proofs::circuit::layouter::RegionShape"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [ region_shape ]
                                      |),
                                      "halo2_proofs::circuit::layouter::RegionShape",
                                      "region_index"
                                    |)
                                  |));
                                ("row_offset", M.read (| offset |));
                                ("column",
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ],
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                                          [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                      ],
                                      "into",
                                      []
                                    |),
                                    [ M.read (| column |) ]
                                  |))
                              ]
                          ]
                      |)
                    |)))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn constrain_constant(&self, _cell: Cell, _constant: Assigned<F>) -> Result<(), Error> {
              // Global constants don't affect the region shape.
              Ok(())
          }
      *)
      Definition constrain_constant (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; _cell; _constant ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _cell := M.alloc (| _cell |) in
            let _constant := M.alloc (| _constant |) in
            Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]))
        | _, _ => M.impossible
        end.
      
      (*
          fn constrain_equal(&self, _left: Cell, _right: Cell) -> Result<(), Error> {
              // Equality constraints don't affect the region shape.
              Ok(())
          }
      *)
      Definition constrain_equal (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; _left; _right ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _left := M.alloc (| _left |) in
            let _right := M.alloc (| _right |) in
            Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "halo2_proofs::circuit::layouter::RegionLayouter"
          (Self F)
          (* Trait polymorphic types *) [ (* F *) F ]
          (* Instance *)
          [
            ("enable_selector", InstanceField.Method (enable_selector F));
            ("assign_advice", InstanceField.Method (assign_advice F));
            ("assign_advice_from_constant", InstanceField.Method (assign_advice_from_constant F));
            ("assign_advice_from_instance", InstanceField.Method (assign_advice_from_instance F));
            ("assign_fixed", InstanceField.Method (assign_fixed F));
            ("constrain_constant", InstanceField.Method (constrain_constant F));
            ("constrain_equal", InstanceField.Method (constrain_equal F))
          ].
    End Impl_halo2_proofs_circuit_layouter_RegionLayouter_where_ff_Field_F_F_for_halo2_proofs_parallel_Parallel_halo2_proofs_circuit_layouter_RegionShape.
  End layouter.
End circuit.
